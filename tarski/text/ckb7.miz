:: <SchemeBlock line="11" col="10" schemenr="1" vid="5" plevel="" newlevel="1">
:: <SchemeFuncDecl nr="1" vid="6" plevel="1">
:: <ArgTypes/>
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: </SchemeFuncDecl>
:: <SchemePredDecl nr="1" vid="7" plevel="1">
:: <ArgTypes>
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: </ArgTypes>
:: </SchemePredDecl>
:: <SchemePremises>
:: <Proposition line="14" col="5" plevel="1" propnr="1">
:: <For pid="0" vid="1">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <For pid="0" vid="2">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <For pid="0" vid="3">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <Not pid="-4">
:: <And pid="-5">
:: <Pred kind="P" nr="1" aid="CKB7" schemenr="1">
:: <Var nr="1"/>
:: <Var nr="2"/>
:: </Pred>
:: <Pred kind="P" nr="1" aid="CKB7" schemenr="1">
:: <Var nr="1"/>
:: <Var nr="3"/>
:: </Pred>
:: <Not pid="-6">
:: <Pred kind="R" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Var nr="2"/>
:: <Var nr="3"/>
:: </Pred>
:: </Not>
:: </And>
:: </Not>
:: </For>
:: </For>
:: </For>
:: </Proposition>
:: </SchemePremises>
:: <Proposition line="14" col="40" plevel="1" propnr="2">
:: <Not>
:: <For pid="0" vid="4">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <Not>
:: <For pid="0" vid="1">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <And pid="-7">
:: <Not pid="-4">
:: <And pid="-5">
:: <Pred kind="R" nr="2" pid="3" aid="HIDDEN" absnr="2">
:: <Var nr="2"/>
:: <Var nr="1"/>
:: </Pred>
:: <For pid="0" vid="2">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <Not>
:: <And>
:: <Pred kind="R" nr="2" pid="3" aid="HIDDEN" absnr="2">
:: <Var nr="3"/>
:: <Func kind="F" nr="1" aid="CKB7" schemenr="1"/>
:: </Pred>
:: <Pred kind="P" nr="1" aid="CKB7" schemenr="1">
:: <Var nr="3"/>
:: <Var nr="2"/>
:: </Pred>
:: </And>
:: </Not>
:: </For>
:: </And>
:: </Not>
:: <Not pid="-4">
:: <And pid="-5">
:: <Not>
:: <For pid="0" vid="2">
:: <Typ kind="M" nr="1" pid="1" aid="HIDDEN" absnr="1">
:: <Cluster/>
:: <Cluster/>
:: </Typ>
:: <Not>
:: <And>
:: <Pred kind="R" nr="2" pid="3" aid="HIDDEN" absnr="2">
:: <Var nr="3"/>
:: <Func kind="F" nr="1" aid="CKB7" schemenr="1"/>
:: </Pred>
:: <Pred kind="P" nr="1" aid="CKB7" schemenr="1">
:: <Var nr="3"/>
:: <Var nr="2"/>
:: </Pred>
:: </And>
:: </Not>
:: </For>
:: </Not>
:: <Not pid="-6">
:: <Pred kind="R" nr="2" pid="3" aid="HIDDEN" absnr="2">
:: <Var nr="2"/>
:: <Var nr="1"/>
:: </Pred>
:: </Not>
:: </And>
:: </Not>
:: </And>
:: </For>
:: </Not>
:: </For>
:: </Not>
:: </Proposition>
:: <SkippedProof plevel="1" newlevel="1_1"/>
:: <EndPosition line="14" col="40"/>
:: </SchemeBlock>
environ

begin

reserve x for set;
reserve y for set;
reserve z for set;
reserve X for set;

scheme
  Fraenkel { A()-> set, P[set, set] }:
  ex X st for x holds x in X iff ex y st y in A() & P[y,x]
provided
  for x,y,z st P[x,y] & P[x,z] holds y = z
proof
    thus thesis;
  end;
