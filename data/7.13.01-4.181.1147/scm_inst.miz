:: On a Mathematical Model of Programs
::  by Yatsuka Nakamura and Andrzej Trybulec
::
:: Received December 29, 1992
:: Copyright (c) 1992-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, XBOOLE_0, CARD_1, ZFMISC_1, FINSEQ_1, FUNCT_1,
      RELAT_1, AMI_1, PARTFUN1, XXREAL_0, TARSKI, AMI_2, RECDEF_2, UNIALG_1,
      AMISTD_2, VALUED_0, COMPOS_0;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, CARD_1, NUMBERS, RELAT_1,
      FUNCT_1, PARTFUN1, VALUED_0, XXREAL_0, MCART_1, DOMAIN_1, FINSEQ_1,
      FINSEQ_4, RECDEF_2, COMPOS_0;
 constructors DOMAIN_1, FINSEQ_4, FINSEQ_2, VALUED_1, COMPOS_0, XTUPLE_0;
 registrations XBOOLE_0, ORDINAL1, XREAL_0, FINSEQ_1, RELAT_1, CARD_1, FUNCT_1,
      COMPOS_0, VALUED_0, XTUPLE_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE;
 definitions TARSKI, XBOOLE_0, CARD_1, FINSEQ_1, MCART_1, COMPOS_0, XTUPLE_0;
 theorems ZFMISC_1, TARSKI, ENUMSET1, FINSEQ_4, MCART_1, XBOOLE_0, XBOOLE_1,
      ORDINAL1, RELAT_1, NAT_1, DOMAIN_1, FINSEQ_1, FUNCT_7, RECDEF_2,
      XTUPLE_0;

begin
notation
synonym SCM-Halt for {};
end;
definition
redefine func SCM-Halt -> (Element of ( Segm 9 ));

correctness by NAT_1:44;
end;
definition
func SCM-Data-Loc equals 
[: { 1 } , ( NAT ) :];
coherence;
end;
registration
cluster ( SCM-Data-Loc ) -> non  empty;
coherence;
end;
definition
func SCM-Instr -> non  empty set equals 
( ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } ) \/ { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } } );
coherence;
end;
theorem
L6: [ ( 0 ) , ( {} ) , ( {} ) ] in ( SCM-Instr )
proof
L7: [ ( 0 ) , ( {} ) , ( {} ) ] in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } by TARSKI:def 1;
L8: [ ( 0 ) , ( {} ) , ( {} ) ] in ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) by L7 , XBOOLE_0:def 3;
L9: [ ( 0 ) , ( {} ) , ( {} ) ] in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } ) by L8 , XBOOLE_0:def 3;
thus L10: thesis by L9 , XBOOLE_0:def 3;
end;
registration
cluster ( SCM-Instr ) -> non  empty;
coherence;
end;
theorem
L12: (for R10 being (Element of ( NAT )) holds [ 6 , <* R10 *> , ( {} ) ] in ( SCM-Instr ))
proof
let R10 being (Element of ( NAT ));
reconsider D1 = 6 as (Element of ( Segm 9 )) by NAT_1:44;
L13: [ D1 , <* R10 *> , ( {} ) ] in { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 };
L14: [ D1 , <* R10 *> , ( {} ) ] in ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) by L13 , XBOOLE_0:def 3;
L15: [ D1 , <* R10 *> , ( {} ) ] in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } ) by L14 , XBOOLE_0:def 3;
thus L16: thesis by L15 , XBOOLE_0:def 3;
end;
theorem
L17: (for R1 being set holds (for R10 being (Element of ( NAT )) holds (for R13 being (Element of ( SCM-Data-Loc )) holds (R1 in { 7 , 8 } implies [ R1 , <* R10 *> , <* R13 *> ] in ( SCM-Instr )))))
proof
let R1 being set;
let R10 being (Element of ( NAT ));
let R13 being (Element of ( SCM-Data-Loc ));
assume L18: R1 in { 7 , 8 };
L19: (R1 = 7 or R1 = 8) by L18 , TARSKI:def 2;
reconsider D2 = R1 as (Element of ( Segm 9 )) by L19 , NAT_1:44;
L20: [ D2 , <* R10 *> , <* R13 *> ] in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } by L18;
L21: [ D2 , <* R10 *> , <* R13 *> ] in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } ) by L20 , XBOOLE_0:def 3;
thus L22: thesis by L21 , XBOOLE_0:def 3;
end;
theorem
L23: (for R1 being set holds (for R12 being (Element of ( SCM-Data-Loc )) holds (for R15 being (Element of ( SCM-Data-Loc )) holds (R1 in { 1 , 2 , 3 , 4 , 5 } implies [ R1 , ( {} ) , <* R12 , R15 *> ] in ( SCM-Instr )))))
proof
let R1 being set;
let R12 being (Element of ( SCM-Data-Loc ));
let R15 being (Element of ( SCM-Data-Loc ));
assume L24: R1 in { 1 , 2 , 3 , 4 , 5 };
L25: (R1 = 1 or R1 = 2 or R1 = 3 or R1 = 4 or R1 = 5) by L24 , ENUMSET1:def 3;
reconsider D3 = R1 as (Element of ( Segm 9 )) by L25 , NAT_1:44;
L26: [ D3 , ( {} ) , <* R12 , R15 *> ] in { [ R5 , ( {} ) , <* R11 , R14 *> ] where R5 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R5 in { 1 , 2 , 3 , 4 , 5 } } by L24;
thus L27: thesis by L26 , XBOOLE_0:def 3;
end;
definition
let C1 being (Element of ( SCM-Instr ));
given C2 , C3 being (Element of ( SCM-Data-Loc )) , R4 being (Element of ( Segm 9 )) such that
L28: C1 = [ R4 , ( {} ) , <* C2 , C3 *> ];

func C1 address_1 -> (Element of ( SCM-Data-Loc )) means 
:L29: (ex B1 being (FinSequence of ( SCM-Data-Loc )) st (B1 = ( C1 `3_3 ) & it = ( B1 /. 1 )));
existence
proof
take C2;
take <* C2 , C3 *>;
thus L30: thesis by L28 , FINSEQ_4:17 , RECDEF_2:def 3;
end;
uniqueness;
func C1 address_2 -> (Element of ( SCM-Data-Loc )) means 
:L31: (ex B2 being (FinSequence of ( SCM-Data-Loc )) st (B2 = ( C1 `3_3 ) & it = ( B2 /. 2 )));
existence
proof
take C3;
take <* C2 , C3 *>;
thus L32: thesis by L28 , FINSEQ_4:17 , RECDEF_2:def 3;
end;
correctness;
end;
theorem
L34: (for B3 being (Element of ( SCM-Instr )) holds (for B4 , B5 being (Element of ( SCM-Data-Loc )) holds (for R4 being (Element of ( Segm 9 )) holds (B3 = [ R4 , ( {} ) , <* B4 , B5 *> ] implies (( B3 address_1 ) = B4 & ( B3 address_2 ) = B5)))))
proof
let C4 being (Element of ( SCM-Instr ));
let C5 , C6 being (Element of ( SCM-Data-Loc ));
let R4 being (Element of ( Segm 9 ));
assume L35: C4 = [ R4 , ( {} ) , <* C5 , C6 *> ];
consider C7 being (FinSequence of ( SCM-Data-Loc )) such that L36: C7 = ( C4 `3_3 ) and L37: ( C4 address_1 ) = ( C7 /. 1 ) by L35 , L29;
L38: C7 = <* C5 , C6 *> by L35 , L36 , RECDEF_2:def 3;
thus L39: ( C4 address_1 ) = C5 by L38 , L37 , FINSEQ_4:17;
consider C8 being (FinSequence of ( SCM-Data-Loc )) such that L40: C8 = ( C4 `3_3 ) and L41: ( C4 address_2 ) = ( C8 /. 2 ) by L35 , L31;
L42: C8 = <* C5 , C6 *> by L35 , L40 , RECDEF_2:def 3;
thus L43: thesis by L42 , L41 , FINSEQ_4:17;
end;
definition
let C9 being (Element of ( SCM-Instr ));
given C10 being (Element of ( NAT )) , R4 being (Element of ( Segm 9 )) such that
L44: C9 = [ R4 , <* C10 *> , ( {} ) ];

func C9 jump_address -> (Element of ( NAT )) means 
:L45: (ex B6 being (FinSequence of ( NAT )) st (B6 = ( C9 `2_3 ) & it = ( B6 /. 1 )));
existence
proof
take C10;
take <* C10 *>;
thus L46: thesis by L44 , FINSEQ_4:16 , RECDEF_2:def 2;
end;
correctness;
end;
theorem
L48: (for B7 being (Element of ( SCM-Instr )) holds (for B8 being (Element of ( NAT )) holds (for R4 being (Element of ( Segm 9 )) holds (B7 = [ R4 , <* B8 *> , ( {} ) ] implies ( B7 jump_address ) = B8))))
proof
let C11 being (Element of ( SCM-Instr ));
let C12 being (Element of ( NAT ));
let R4 being (Element of ( Segm 9 ));
assume L49: C11 = [ R4 , <* C12 *> , ( {} ) ];
consider C13 being (FinSequence of ( NAT )) such that L50: C13 = ( C11 `2_3 ) and L51: ( C11 jump_address ) = ( C13 /. 1 ) by L49 , L45;
L52: C13 = <* C12 *> by L49 , L50 , RECDEF_2:def 2;
thus L53: thesis by L52 , L51 , FINSEQ_4:16;
end;
definition
let C14 being (Element of ( SCM-Instr ));
given C15 being (Element of ( NAT )) , C16 being (Element of ( SCM-Data-Loc )) , R4 being (Element of ( Segm 9 )) such that
L54: C14 = [ R4 , <* C15 *> , <* C16 *> ];

func C14 cjump_address -> (Element of ( NAT )) means 
:L55: (ex B9 being (Element of ( NAT )) st (<* B9 *> = ( C14 `2_3 ) & it = ( <* B9 *> /. 1 )));
existence
proof
take C15;
take C15;
thus L56: thesis by L54 , FINSEQ_4:16 , RECDEF_2:def 2;
end;
correctness;
func C14 cond_address -> (Element of ( SCM-Data-Loc )) means 
:L57: (ex B10 being (Element of ( SCM-Data-Loc )) st (<* B10 *> = ( C14 `3_3 ) & it = ( <* B10 *> /. 1 )));
existence
proof
take C16;
take C16;
thus L58: thesis by L54 , FINSEQ_4:16 , RECDEF_2:def 3;
end;
correctness;
end;
theorem
L60: (for B11 being (Element of ( SCM-Instr )) holds (for B12 being (Element of ( NAT )) holds (for B13 being (Element of ( SCM-Data-Loc )) holds (for R4 being (Element of ( Segm 9 )) holds (B11 = [ R4 , <* B12 *> , <* B13 *> ] implies (( B11 cjump_address ) = B12 & ( B11 cond_address ) = B13))))))
proof
let C17 being (Element of ( SCM-Instr ));
let C18 being (Element of ( NAT ));
let C19 being (Element of ( SCM-Data-Loc ));
let R4 being (Element of ( Segm 9 ));
assume L61: C17 = [ R4 , <* C18 *> , <* C19 *> ];
consider C20 being (Element of ( NAT )) such that L62: <* C20 *> = ( C17 `2_3 ) and L63: ( C17 cjump_address ) = ( <* C20 *> /. 1 ) by L61 , L55;
L64: <* C20 *> = <* C18 *> by L61 , L62 , RECDEF_2:def 2;
thus L65: ( C17 cjump_address ) = C18 by L64 , L63 , FINSEQ_4:16;
consider C21 being (Element of ( SCM-Data-Loc )) such that L66: <* C21 *> = ( C17 `3_3 ) and L67: ( C17 cond_address ) = ( <* C21 *> /. 1 ) by L61 , L57;
L68: <* C21 *> = <* C19 *> by L61 , L66 , RECDEF_2:def 3;
thus L69: thesis by L68 , L67 , FINSEQ_4:16;
end;
theorem
L70: ( SCM-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :]
proof
let R1 being set;
assume L71: R1 in ( SCM-Instr );
per cases  by L71 , XBOOLE_0:def 3;
suppose L72: R1 in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } );

per cases  by L72 , XBOOLE_0:def 3;
suppose L73: R1 in ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 } );

L74: ( SCM-Halt ) = ( 0 );
per cases  by L73 , XBOOLE_0:def 3;
suppose L75: R1 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] };

L76: R1 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ] by L75 , TARSKI:def 1;
L77: (( SCM-Halt ) in ( NAT ) & ( {} ) in ( ( NAT ) * ) & ( {} ) in ( proj2 ( SCM-Instr ) )) by L76 , L71 , L74 , FINSEQ_1:49 , XTUPLE_0:def 13;
thus L78: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L77 , L76 , DOMAIN_1:3;
end;
suppose L79: R1 in { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 };

consider R5 being (Element of ( Segm 9 )), R8 being (Element of ( NAT )) such that L80: (R1 = [ R5 , <* R8 *> , ( {} ) ] & R5 = 6) by L79;
L81: (R5 in ( NAT ) & <* R8 *> in ( ( NAT ) * ) & ( {} ) in ( proj2 ( SCM-Instr ) )) by L71 , L80 , FUNCT_7:18 , XTUPLE_0:def 13;
thus L82: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L81 , L80 , DOMAIN_1:3;
end;
end;
suppose L84: R1 in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } };

consider R6 being (Element of ( Segm 9 )), R9 being (Element of ( NAT )), R12 being (Element of ( SCM-Data-Loc )) such that L85: (R1 = [ R6 , <* R9 *> , <* R12 *> ] & R6 in { 7 , 8 }) by L84;
L86: (R6 in ( NAT ) & <* R9 *> in ( ( NAT ) * ) & <* R12 *> in ( proj2 ( SCM-Instr ) )) by L71 , L85 , FUNCT_7:18 , XTUPLE_0:def 13;
thus L87: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L86 , L85 , DOMAIN_1:3;
end;
end;
suppose L89: R1 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } };

consider R4 being (Element of ( Segm 9 )), R11 being (Element of ( SCM-Data-Loc )), R14 being (Element of ( SCM-Data-Loc )) such that L90: (R1 = [ R4 , ( {} ) , <* R11 , R14 *> ] & R4 in { 1 , 2 , 3 , 4 , 5 }) by L89;
L91: (R4 in ( NAT ) & ( {} ) in ( ( NAT ) * ) & <* R11 , R14 *> in ( proj2 ( SCM-Instr ) )) by L71 , L90 , FINSEQ_1:49 , XTUPLE_0:def 13;
thus L92: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L91 , L90 , DOMAIN_1:3;
end;
end;
registration
cluster ( proj2 ( SCM-Instr ) ) ->  FinSequence-membered;
coherence
proof
let C22 being set;
assume L94: C22 in ( proj2 ( SCM-Instr ) );
consider C23 being set such that L95: [ C23 , C22 ] in ( SCM-Instr ) by L94 , XTUPLE_0:def 13;
set D4 = [ C23 , C22 ];
per cases  by L95 , XBOOLE_0:def 3;
suppose L96: D4 in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } );

per cases  by L96 , XBOOLE_0:def 3;
suppose L97: D4 in ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 } );

per cases  by L97 , XBOOLE_0:def 3;
suppose L98: D4 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] };

L99: D4 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ] by L98 , TARSKI:def 1;
thus L100: C22 is FinSequence by L99 , XTUPLE_0:1;
end;
suppose L101: D4 in { [ R5 , <* R10 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R10 is (Element of ( NAT )) : R5 = 6 };

L102: (ex R5 being (Element of ( Segm 9 )) st (ex R8 being (Element of ( NAT )) st (D4 = [ R5 , <* R8 *> , ( {} ) ] & R5 = 6))) by L101;
thus L103: C22 is FinSequence by L102 , XTUPLE_0:1;
end;
end;
suppose L105: D4 in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } };

L106: (ex R6 being (Element of ( Segm 9 )) st (ex R9 being (Element of ( NAT )) st (ex R12 being (Element of ( SCM-Data-Loc )) st (D4 = [ R6 , <* R9 *> , <* R12 *> ] & R6 in { 7 , 8 })))) by L105;
thus L107: C22 is FinSequence by L106 , XTUPLE_0:1;
end;
end;
suppose L109: D4 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } };

L110: (ex R4 being (Element of ( Segm 9 )) st (ex R11 being (Element of ( SCM-Data-Loc )) st (ex R14 being (Element of ( SCM-Data-Loc )) st (D4 = [ R4 , ( {} ) , <* R11 , R14 *> ] & R4 in { 1 , 2 , 3 , 4 , 5 })))) by L109;
thus L111: C22 is FinSequence by L110 , XTUPLE_0:1;
end;
end;
end;
theorem
L114: (for B14 being (Element of ( SCM-Instr )) holds ((B14 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } & ( InsCode B14 ) = ( 0 )) or (B14 in { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } & ( InsCode B14 ) = 6) or (B14 in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } & (( InsCode B14 ) = 7 or ( InsCode B14 ) = 8)) or (B14 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } } & (( InsCode B14 ) = 1 or ( InsCode B14 ) = 2 or ( InsCode B14 ) = 3 or ( InsCode B14 ) = 4 or ( InsCode B14 ) = 5))))
proof
let C24 being (Element of ( SCM-Instr ));
L115: (C24 in ( ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) \/ { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } ) or C24 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } }) by XBOOLE_0:def 3;
L116: (C24 in ( { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } \/ { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 } ) or C24 in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } } or C24 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } }) by L115 , XBOOLE_0:def 3;
per cases  by L116 , XBOOLE_0:def 3;
case L117: C24 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] };
L118: C24 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ] by L117 , TARSKI:def 1;
thus L119: thesis by L118 , RECDEF_2:def 1;
end;
case L120: C24 in { [ R5 , <* R8 *> , ( {} ) ] where R5 is (Element of ( Segm 9 )) , R8 is (Element of ( NAT )) : R5 = 6 };
L121: (ex R5 being (Element of ( Segm 9 )) st (ex R8 being (Element of ( NAT )) st (C24 = [ R5 , <* R8 *> , ( {} ) ] & R5 = 6))) by L120;
thus L122: thesis by L121 , RECDEF_2:def 1;
end;
case L123: C24 in { [ R6 , <* R9 *> , <* R12 *> ] where R6 is (Element of ( Segm 9 )) , R9 is (Element of ( NAT )) , R12 is (Element of ( SCM-Data-Loc )) : R6 in { 7 , 8 } };
consider R6 being (Element of ( Segm 9 )), R9 being (Element of ( NAT )), R12 being (Element of ( SCM-Data-Loc )) such that L124: C24 = [ R6 , <* R9 *> , <* R12 *> ] and L125: R6 in { 7 , 8 } by L123;
L126: ( InsCode C24 ) = R6 by L124 , RECDEF_2:def 1;
thus L127: thesis by L126 , L125 , TARSKI:def 2;
end;
case L128: C24 in { [ R4 , ( {} ) , <* R11 , R14 *> ] where R4 is (Element of ( Segm 9 )) , R11 is (Element of ( SCM-Data-Loc )) , R14 is (Element of ( SCM-Data-Loc )) : R4 in { 1 , 2 , 3 , 4 , 5 } };
consider R4 being (Element of ( Segm 9 )), R11 being (Element of ( SCM-Data-Loc )), R14 being (Element of ( SCM-Data-Loc )) such that L129: C24 = [ R4 , ( {} ) , <* R11 , R14 *> ] and L130: R4 in { 1 , 2 , 3 , 4 , 5 } by L128;
L131: ( InsCode C24 ) = R4 by L129 , RECDEF_2:def 1;
thus L132: thesis by L131 , L130 , ENUMSET1:def 3;
end;
end;
begin
registration
cluster ( SCM-Instr ) ->  standard-ins;
coherence
proof
consider C25 being non  empty set such that L134: ( proj2 ( SCM-Instr ) ) c= ( C25 * ) by FINSEQ_1:85;
take C25;
L135: ( SCM-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L70;
L136: [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] c= [: ( NAT ) , ( ( NAT ) * ) , ( C25 * ) :] by L134 , MCART_1:73;
thus L137: ( SCM-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( C25 * ) :] by L136 , L135 , XBOOLE_1:1;
end;
end;
theorem
L139: (for B15 being (Element of ( SCM-Instr )) holds ( InsCode B15 ) <= 8)
proof
let C26 being (Element of ( SCM-Instr ));
L140: (( InsCode C26 ) = ( 0 ) or ( InsCode C26 ) = 1 or ( InsCode C26 ) = 2 or ( InsCode C26 ) = 3 or ( InsCode C26 ) = 4 or ( InsCode C26 ) = 5 or ( InsCode C26 ) = 6 or ( InsCode C26 ) = 7 or ( InsCode C26 ) = 8) by L114;
thus L141: thesis by L140;
end;
L142: (for B16 being (Element of ( SCM-Instr )) holds ((( InsCode B16 ) = 1 or ( InsCode B16 ) = 2 or ( InsCode B16 ) = 3 or ( InsCode B16 ) = 4 or ( InsCode B16 ) = 5) implies ( JumpPart B16 ) = ( {} )))
proof
let C27 being (Element of ( SCM-Instr ));
assume L143: (( InsCode C27 ) = 1 or ( InsCode C27 ) = 2 or ( InsCode C27 ) = 3 or ( InsCode C27 ) = 4 or ( InsCode C27 ) = 5);
L144: C27 in { [ R19 , ( {} ) , <* R25 , R28 *> ] where R19 is (Element of ( Segm 9 )) , R25 is (Element of ( SCM-Data-Loc )) , R28 is (Element of ( SCM-Data-Loc )) : R19 in { 1 , 2 , 3 , 4 , 5 } } by L143 , L114;
L145: (ex R19 being (Element of ( Segm 9 )) st (ex R25 being (Element of ( SCM-Data-Loc )) st (ex R28 being (Element of ( SCM-Data-Loc )) st (C27 = [ R19 , ( {} ) , <* R25 , R28 *> ] & R19 in { 1 , 2 , 3 , 4 , 5 })))) by L144;
thus L146: thesis by L145 , RECDEF_2:def 2;
end;
L147: (for B17 being (Element of ( SCM-Instr )) holds ((( InsCode B17 ) = 7 or ( InsCode B17 ) = 8) implies ( dom ( JumpPart B17 ) ) = ( Seg 1 )))
proof
let C28 being (Element of ( SCM-Instr ));
assume L148: (( InsCode C28 ) = 7 or ( InsCode C28 ) = 8);
L149: C28 in { [ R21 , <* R23 *> , <* R26 *> ] where R21 is (Element of ( Segm 9 )) , R23 is (Element of ( NAT )) , R26 is (Element of ( SCM-Data-Loc )) : R21 in { 7 , 8 } } by L148 , L114;
consider R21 being (Element of ( Segm 9 )), R23 being (Element of ( NAT )), R26 being (Element of ( SCM-Data-Loc )) such that L150: C28 = [ R21 , <* R23 *> , <* R26 *> ] and L151: R21 in { 7 , 8 } by L149;
L152: ( JumpPart C28 ) = <* R23 *> by L150 , RECDEF_2:def 2;
thus L153: thesis by L152 , FINSEQ_1:38;
end;
L154: (for B18 being (Element of ( SCM-Instr )) holds (( InsCode B18 ) = 6 implies ( dom ( JumpPart B18 ) ) = ( Seg 1 )))
proof
let C29 being (Element of ( SCM-Instr ));
assume L155: ( InsCode C29 ) = 6;
L156: C29 in { [ R20 , <* R22 *> , ( {} ) ] where R20 is (Element of ( Segm 9 )) , R22 is (Element of ( NAT )) : R20 = 6 } by L155 , L114;
consider R20 being (Element of ( Segm 9 )), R22 being (Element of ( NAT )) such that L157: C29 = [ R20 , <* R22 *> , ( {} ) ] and L158: R20 = 6 by L156;
L159: ( JumpPart C29 ) = <* R22 *> by L157 , RECDEF_2:def 2;
thus L160: thesis by L159 , FINSEQ_1:38;
end;
registration
cluster ( SCM-Instr ) ->  homogeneous;
coherence
proof
let C30 , C31 being (Element of ( SCM-Instr ));
assume that
L161: ( InsCode C30 ) = ( InsCode C31 );
L162: ( InsCode C30 ) <= 8 by L139;
per cases  by L162 , NAT_1:32;
suppose L163: ( InsCode C30 ) = ( 0 );

L164: (C30 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } & C31 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] }) by L163 , L161 , L114;
L165: (C30 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ] & C31 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ]) by L164 , TARSKI:def 1;
thus L166: thesis by L165;
end;
suppose L167: (( InsCode C30 ) = 1 or ( InsCode C30 ) = 2 or ( InsCode C30 ) = 3 or ( InsCode C30 ) = 4 or ( InsCode C30 ) = 5);

L168: (( JumpPart C30 ) = ( {} ) & ( JumpPart C31 ) = ( {} )) by L167 , L161 , L142;
thus L169: thesis by L168;
end;
suppose L170: (( InsCode C30 ) = 7 or ( InsCode C30 ) = 8);

L171: (( dom ( JumpPart C30 ) ) = ( Seg 1 ) & ( dom ( JumpPart C31 ) ) = ( Seg 1 )) by L170 , L161 , L147;
thus L172: thesis by L171;
end;
suppose L173: ( InsCode C30 ) = 6;

L174: (( dom ( JumpPart C30 ) ) = ( Seg 1 ) & ( dom ( JumpPart C31 ) ) = ( Seg 1 )) by L173 , L161 , L154;
thus L175: thesis by L174;
end;
end;
end;
L178: (for B19 being (InsType of ( SCM-Instr )) holds (B19 = ( 0 ) or B19 = 1 or B19 = 2 or B19 = 3 or B19 = 4 or B19 = 5 or B19 = 6 or B19 = 7 or B19 = 8))
proof
let C32 being (InsType of ( SCM-Instr ));
consider C33 being set such that L179: [ C32 , C33 ] in ( proj1 ( SCM-Instr ) ) by XTUPLE_0:def 12;
consider C34 being set such that L180: [ [ C32 , C33 ] , C34 ] in ( SCM-Instr ) by L179 , XTUPLE_0:def 12;
reconsider D5 = [ C32 , C33 , C34 ] as (Element of ( SCM-Instr )) by L180;
L181: C32 = ( InsCode D5 ) by RECDEF_2:def 1;
thus L182: thesis by L181 , L139 , NAT_1:32;
end;
L183: (for R30 being (InsType of ( SCM-Instr )) holds (R30 = ( 0 ) implies ( JumpParts R30 ) = { ( 0 ) }))
proof
let R30 being (InsType of ( SCM-Instr ));
assume L184: R30 = ( 0 );
thus L185:now
let C35 being set;
assume L186: C35 in ( JumpParts R30 );
consider R31 being (Element of ( SCM-Instr )) such that L187: C35 = ( JumpPart R31 ) and L188: ( InsCode R31 ) = R30 by L186;
L189: R31 in { [ ( SCM-Halt ) , ( {} ) , ( {} ) ] } by L184 , L188 , L114;
L190: R31 = [ ( SCM-Halt ) , ( {} ) , ( {} ) ] by L189 , TARSKI:def 1;
L191: C35 = ( 0 ) by L190 , L187 , RECDEF_2:def 2;
thus L192: C35 in { ( 0 ) } by L191 , TARSKI:def 1;
end;
let C36 being set;
assume L193: C36 in { ( 0 ) };
L194: C36 = ( 0 ) by L193 , TARSKI:def 1;
L195: ( JumpPart [ ( SCM-Halt ) , ( {} ) , ( {} ) ] ) = ( {} );
L196: ( InsCode [ ( SCM-Halt ) , ( {} ) , ( {} ) ] ) = ( SCM-Halt );
L197: [ ( SCM-Halt ) , ( {} ) , ( {} ) ] in ( SCM-Instr ) by L6;
thus L198: C36 in ( JumpParts R30 ) by L197 , L184 , L194 , L195 , L196;
end;
L199: (for R30 being (InsType of ( SCM-Instr )) holds ((R30 = 1 or R30 = 2 or R30 = 3 or R30 = 4 or R30 = 5) implies ( JumpParts R30 ) = { ( {} ) }))
proof
let R30 being (InsType of ( SCM-Instr ));
assume L200: (R30 = 1 or R30 = 2 or R30 = 3 or R30 = 4 or R30 = 5);
thus L201:now
let C37 being set;
assume L202: C37 in ( JumpParts R30 );
consider C38 being (Element of ( SCM-Instr )) such that L203: C37 = ( JumpPart C38 ) and L204: ( InsCode C38 ) = R30 by L202;
L205: C38 in { [ B20 , ( {} ) , <* B21 , B22 *> ] where B20 is (Element of ( Segm 9 )) , B21 is (Element of ( SCM-Data-Loc )) , B22 is (Element of ( SCM-Data-Loc )) : B20 in { 1 , 2 , 3 , 4 , 5 } } by L200 , L204 , L114;
consider C39 being (Element of ( Segm 9 )), C40 being (Element of ( SCM-Data-Loc )), C41 being (Element of ( SCM-Data-Loc )) such that L206: C38 = [ C39 , ( {} ) , <* C40 , C41 *> ] and L207: C39 in { 1 , 2 , 3 , 4 , 5 } by L205;
L208: C37 = ( {} ) by L203 , L206 , RECDEF_2:def 2;
thus L209: C37 in { ( {} ) } by L208 , TARSKI:def 1;
end;
set D6 = the (Element of ( SCM-Data-Loc ));
let C42 being set;
assume L210: C42 in { ( {} ) };
L211: C42 = ( {} ) by L210 , TARSKI:def 1;
L212: ( JumpPart [ R30 , ( {} ) , <* D6 , D6 *> ] ) = ( {} );
L213: ( InsCode [ R30 , ( {} ) , <* D6 , D6 *> ] ) = R30;
L214: R30 in { 1 , 2 , 3 , 4 , 5 } by L200 , ENUMSET1:def 3;
L215: [ R30 , ( {} ) , <* D6 , D6 *> ] in ( SCM-Instr ) by L214 , L23;
thus L216: thesis by L215 , L211 , L212 , L213;
end;
registration
cluster ( SCM-Instr ) ->  J/A-independent;
coherence
proof
let C43 being (InsType of ( SCM-Instr ));
let C44 , C45 being  natural-valued Function;
assume that
L217: C44 in ( JumpParts C43 )
and
L218: ( dom C44 ) = ( dom C45 );
let C46 being set;
assume that
L219: [ C43 , C44 , C46 ] in ( SCM-Instr );
per cases  by L178;
suppose L220: C43 = ( 0 );

L221: ( JumpParts C43 ) = { ( 0 ) } by L220 , L183;
L222: C44 = ( 0 ) by L221 , L217 , TARSKI:def 1;
L223: C44 = C45 by L222 , L218;
thus L224: [ C43 , C45 , C46 ] in ( SCM-Instr ) by L223 , L219;
end;
suppose L225: (C43 = 1 or C43 = 2 or C43 = 3 or C43 = 4 or C43 = 5);

L226: ( JumpParts C43 ) = { ( 0 ) } by L225 , L199;
L227: C44 = ( 0 ) by L226 , L217 , TARSKI:def 1;
L228: C44 = C45 by L227 , L218;
thus L229: [ C43 , C45 , C46 ] in ( SCM-Instr ) by L228 , L219;
end;
suppose L230: C43 = 6;

reconsider D7 = [ C43 , C44 , C46 ] as (Element of ( SCM-Instr )) by L219;
L231: ( InsCode D7 ) = 6 by L230 , RECDEF_2:def 1;
L232: D7 in { [ B23 , <* B24 *> , ( {} ) ] where B23 is (Element of ( Segm 9 )) , B24 is (Element of ( NAT )) : B23 = 6 } by L231 , L114;
consider C47 being (Element of ( Segm 9 )), C48 being (Element of ( NAT )) such that L233: (D7 = [ C47 , <* C48 *> , ( {} ) ] & C47 = 6) by L232;
L234: C46 = ( {} ) by L233 , XTUPLE_0:3;
L235: C44 = <* C48 *> by L233 , XTUPLE_0:3;
L236: ( dom C45 ) = { 1 } by L235 , L218 , FINSEQ_1:2 , FINSEQ_1:38;
reconsider D8 = ( C45 . 1 ) as (Element of ( NAT )) by ORDINAL1:def 12;
set D9 = [ C43 , C45 , ( {} ) ];
L237: D9 = [ 6 , <* D8 *> , ( {} ) ] by L230 , L236 , FINSEQ_1:2 , FINSEQ_1:def 8;
reconsider D10 = D9 as (Element of ( SCM-Instr )) by L237 , L12;
L238: C45 = ( JumpPart D10 ) by RECDEF_2:def 2;
thus L239: [ C43 , C45 , C46 ] in ( SCM-Instr ) by L238 , L234;
end;
suppose L240: (C43 = 7 or C43 = 8);

reconsider D11 = [ C43 , C44 , C46 ] as (Element of ( SCM-Instr )) by L219;
L241: ( InsCode D11 ) = C43 by RECDEF_2:def 1;
L242: D11 in { [ B25 , <* B26 *> , <* B27 *> ] where B25 is (Element of ( Segm 9 )) , B26 is (Element of ( NAT )) , B27 is (Element of ( SCM-Data-Loc )) : B25 in { 7 , 8 } } by L241 , L240 , L114;
consider C49 being (Element of ( Segm 9 )), C50 being (Element of ( NAT )), C51 being (Element of ( SCM-Data-Loc )) such that L243: D11 = [ C49 , <* C50 *> , <* C51 *> ] and L244: C49 in { 7 , 8 } by L242;
L245: C46 = <* C51 *> by L243 , XTUPLE_0:3;
L246: C44 = <* C50 *> by L243 , XTUPLE_0:3;
L247: ( dom C45 ) = { 1 } by L246 , L218 , FINSEQ_1:2 , FINSEQ_1:38;
reconsider D12 = ( C45 . 1 ) as (Element of ( NAT )) by ORDINAL1:def 12;
set D13 = [ C43 , C45 , C46 ];
L248: C43 in { 7 , 8 } by L240 , TARSKI:def 2;
L249: D13 = [ C43 , <* D12 *> , <* C51 *> ] by L245 , L247 , FINSEQ_1:2 , FINSEQ_1:def 8;
reconsider D14 = D13 as (Element of ( SCM-Instr )) by L249 , L248 , L17;
L250: ( InsCode D14 ) = C43 by RECDEF_2:def 1;
L251: D14 in { [ B28 , <* B29 *> , <* B30 *> ] where B28 is (Element of ( Segm 9 )) , B29 is (Element of ( NAT )) , B30 is (Element of ( SCM-Data-Loc )) : B28 in { 7 , 8 } } by L250 , L240 , L114;
consider C52 being (Element of ( Segm 9 )), C53 being (Element of ( NAT )), C54 being (Element of ( SCM-Data-Loc )) such that L252: D14 = [ C52 , <* C53 *> , <* C54 *> ] and L253: C52 in { 7 , 8 } by L251;
L254: C52 = ( InsCode D14 ) by L252 , RECDEF_2:def 1
.= C43 by RECDEF_2:def 1;
L255: D14 = [ C43 , <* C53 *> , <* C54 *> ] by L254 , L252;
thus L256: [ C43 , C45 , C46 ] in ( SCM-Instr ) by L255;
end;
end;
end;
registration
cluster ( SCM-Instr ) ->  with_halt;
coherence
proof
thus L259: [ ( 0 ) , ( {} ) , ( {} ) ] in ( SCM-Instr ) by L6;
end;
end;
