:: Binary Operations on Numbers
::  by Library Committee
::
:: Received June 21, 2004
:: Copyright (c) 2004-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, SUBSET_1, FUNCT_1, BINOP_1, XCMPLX_0, ORDINAL1,
      NUMBERS, XREAL_0, RAT_1, INT_1, ZFMISC_1, ARYTM_1, RELAT_1, ARYTM_3,
      CARD_1, SETWISEO, BINOP_2, NAT_1;
 notations XBOOLE_0, ZFMISC_1, SUBSET_1, FUNCT_1, FUNCT_2, BINOP_1, SETWISEO,
      ORDINAL1, XCMPLX_0, XREAL_0, INT_1, NUMBERS, RAT_1;
 constructors BINOP_1, SETWISEO, XCMPLX_0, RAT_1, RELSET_1;
 registrations ORDINAL1, NUMBERS, XCMPLX_0, XREAL_0, REAL_1, NAT_1, INT_1,
      RAT_1, RELSET_1;
 requirements BOOLE, SUBSET, ARITHM, NUMERALS;
 definitions BINOP_1;
 theorems BINOP_1, FUNCT_2, XCMPLX_0, XREAL_0, INT_1, RAT_1, SETWISEO, NUMBERS,
      ORDINAL1;
 schemes BINOP_1, FUNCT_2;

begin
scheme FuncDefUniq { F1 , F2() -> non  empty set , F3((Element of F1())) -> set } : (for B1 , B2 being (Function of F1() , F2()) holds (((for B3 being (Element of F1()) holds ( B1 . B3 ) = F3(B3)) & (for B4 being (Element of F1()) holds ( B2 . B4 ) = F3(B4))) implies B1 = B2))
proof
let C1 , C2 being (Function of F1() , F2());
assume that
L1: (for B5 being (Element of F1()) holds ( C1 . B5 ) = F3(B5))
and
L2: (for B6 being (Element of F1()) holds ( C2 . B6 ) = F3(B6));
L3:
now
let C3 being (Element of F1());
thus L4: ( C1 . C3 ) = F3(C3) by L1
.= ( C2 . C3 ) by L2;
end;
thus L5: thesis by L3 , FUNCT_2:63;
end;
scheme BinOpDefuniq { F4() -> non  empty set , F5((Element of F4()) , (Element of F4())) -> set } : (for B7 , B8 being (BinOp of F4()) holds (((for B9 , B10 being (Element of F4()) holds ( B7 . (B9 , B10) ) = F5(B9 , B10)) & (for B11 , B12 being (Element of F4()) holds ( B8 . (B11 , B12) ) = F5(B11 , B12))) implies B7 = B8))
proof
let C4 , C5 being (BinOp of F4());
assume that
L6: (for B13 , B14 being (Element of F4()) holds ( C4 . (B13 , B14) ) = F5(B13 , B14))
and
L7: (for B15 , B16 being (Element of F4()) holds ( C5 . (B15 , B16) ) = F5(B15 , B16));
L8:
now
let C6 , C7 being (Element of F4());
thus L9: ( C4 . (C6 , C7) ) = F5(C6 , C7) by L6
.= ( C5 . (C6 , C7) ) by L7;
end;
thus L10: thesis by L8 , BINOP_1:2;
end;
scheme CFuncDefUniq { F6( complex number) -> set } : (for B17 , B18 being (Function of ( COMPLEX ) , ( COMPLEX )) holds (((for B19 being  complex number holds ( B17 . B19 ) = F6(B19)) & (for B20 being  complex number holds ( B18 . B20 ) = F6(B20))) implies B17 = B18))
proof
let C8 , C9 being (Function of ( COMPLEX ) , ( COMPLEX ));
assume that
L11: (for B21 being  complex number holds ( C8 . B21 ) = F6(B21))
and
L12: (for B22 being  complex number holds ( C9 . B22 ) = F6(B22));
L13:
now
let C10 being (Element of ( COMPLEX ));
thus L14: ( C8 . C10 ) = F6(C10) by L11
.= ( C9 . C10 ) by L12;
end;
thus L15: thesis by L13 , FUNCT_2:63;
end;
scheme RFuncDefUniq { F7( real number) -> set } : (for B23 , B24 being (Function of ( REAL ) , ( REAL )) holds (((for B25 being  real number holds ( B23 . B25 ) = F7(B25)) & (for B26 being  real number holds ( B24 . B26 ) = F7(B26))) implies B23 = B24))
proof
let C11 , C12 being (Function of ( REAL ) , ( REAL ));
assume that
L16: (for B27 being  real number holds ( C11 . B27 ) = F7(B27))
and
L17: (for B28 being  real number holds ( C12 . B28 ) = F7(B28));
L18:
now
let C13 being (Element of ( REAL ));
thus L19: ( C11 . C13 ) = F7(C13) by L16
.= ( C12 . C13 ) by L17;
end;
thus L20: thesis by L18 , FUNCT_2:63;
end;
registration
cluster  ->  rational for (Element of ( RAT ));
coherence by RAT_1:def 2;
end;
scheme WFuncDefUniq { F8( rational number) -> set } : (for B29 , B30 being (Function of ( RAT ) , ( RAT )) holds (((for B31 being  rational number holds ( B29 . B31 ) = F8(B31)) & (for B32 being  rational number holds ( B30 . B32 ) = F8(B32))) implies B29 = B30))
proof
let C14 , C15 being (Function of ( RAT ) , ( RAT ));
assume that
L22: (for B33 being  rational number holds ( C14 . B33 ) = F8(B33))
and
L23: (for B34 being  rational number holds ( C15 . B34 ) = F8(B34));
L24:
now
let C16 being (Element of ( RAT ));
thus L25: ( C14 . C16 ) = F8(C16) by L22
.= ( C15 . C16 ) by L23;
end;
thus L26: thesis by L24 , FUNCT_2:63;
end;
scheme IFuncDefUniq { F9( integer number) -> set } : (for B35 , B36 being (Function of ( INT ) , ( INT )) holds (((for B37 being  integer number holds ( B35 . B37 ) = F9(B37)) & (for B38 being  integer number holds ( B36 . B38 ) = F9(B38))) implies B35 = B36))
proof
let C17 , C18 being (Function of ( INT ) , ( INT ));
assume that
L27: (for B39 being  integer number holds ( C17 . B39 ) = F9(B39))
and
L28: (for B40 being  integer number holds ( C18 . B40 ) = F9(B40));
L29:
now
let C19 being (Element of ( INT ));
thus L30: ( C17 . C19 ) = F9(C19) by L27
.= ( C18 . C19 ) by L28;
end;
thus L31: thesis by L29 , FUNCT_2:63;
end;
scheme NFuncDefUniq { F10(Nat) -> set } : (for B41 , B42 being (Function of ( NAT ) , ( NAT )) holds (((for B43 being Nat holds ( B41 . B43 ) = F10(B43)) & (for B44 being Nat holds ( B42 . B44 ) = F10(B44))) implies B41 = B42))
proof
let C20 , C21 being (Function of ( NAT ) , ( NAT ));
assume that
L32: (for B45 being Nat holds ( C20 . B45 ) = F10(B45))
and
L33: (for B46 being Nat holds ( C21 . B46 ) = F10(B46));
L34:
now
let C22 being (Element of ( NAT ));
thus L35: ( C20 . C22 ) = F10(C22) by L32
.= ( C21 . C22 ) by L33;
end;
thus L36: thesis by L34 , FUNCT_2:63;
end;
scheme CBinOpDefuniq { F11( complex number ,  complex number) -> set } : (for B47 , B48 being (BinOp of ( COMPLEX )) holds (((for B49 , B50 being  complex number holds ( B47 . (B49 , B50) ) = F11(B49 , B50)) & (for B51 , B52 being  complex number holds ( B48 . (B51 , B52) ) = F11(B51 , B52))) implies B47 = B48))
proof
let C23 , C24 being (BinOp of ( COMPLEX ));
assume that
L37: (for B53 , B54 being  complex number holds ( C23 . (B53 , B54) ) = F11(B53 , B54))
and
L38: (for B55 , B56 being  complex number holds ( C24 . (B55 , B56) ) = F11(B55 , B56));
L39:
now
let C25 , C26 being (Element of ( COMPLEX ));
thus L40: ( C23 . (C25 , C26) ) = F11(C25 , C26) by L37
.= ( C24 . (C25 , C26) ) by L38;
end;
thus L41: thesis by L39 , BINOP_1:2;
end;
scheme RBinOpDefuniq { F12( real number ,  real number) -> set } : (for B57 , B58 being (BinOp of ( REAL )) holds (((for B59 , B60 being  real number holds ( B57 . (B59 , B60) ) = F12(B59 , B60)) & (for B61 , B62 being  real number holds ( B58 . (B61 , B62) ) = F12(B61 , B62))) implies B57 = B58))
proof
let C27 , C28 being (BinOp of ( REAL ));
assume that
L42: (for B63 , B64 being  real number holds ( C27 . (B63 , B64) ) = F12(B63 , B64))
and
L43: (for B65 , B66 being  real number holds ( C28 . (B65 , B66) ) = F12(B65 , B66));
L44:
now
let C29 , C30 being (Element of ( REAL ));
thus L45: ( C27 . (C29 , C30) ) = F12(C29 , C30) by L42
.= ( C28 . (C29 , C30) ) by L43;
end;
thus L46: thesis by L44 , BINOP_1:2;
end;
scheme WBinOpDefuniq { F13( rational number ,  rational number) -> set } : (for B67 , B68 being (BinOp of ( RAT )) holds (((for B69 , B70 being  rational number holds ( B67 . (B69 , B70) ) = F13(B69 , B70)) & (for B71 , B72 being  rational number holds ( B68 . (B71 , B72) ) = F13(B71 , B72))) implies B67 = B68))
proof
let C31 , C32 being (BinOp of ( RAT ));
assume that
L47: (for B73 , B74 being  rational number holds ( C31 . (B73 , B74) ) = F13(B73 , B74))
and
L48: (for B75 , B76 being  rational number holds ( C32 . (B75 , B76) ) = F13(B75 , B76));
L49:
now
let C33 , C34 being (Element of ( RAT ));
thus L50: ( C31 . (C33 , C34) ) = F13(C33 , C34) by L47
.= ( C32 . (C33 , C34) ) by L48;
end;
thus L51: thesis by L49 , BINOP_1:2;
end;
scheme IBinOpDefuniq { F14( integer number ,  integer number) -> set } : (for B77 , B78 being (BinOp of ( INT )) holds (((for B79 , B80 being  integer number holds ( B77 . (B79 , B80) ) = F14(B79 , B80)) & (for B81 , B82 being  integer number holds ( B78 . (B81 , B82) ) = F14(B81 , B82))) implies B77 = B78))
proof
let C35 , C36 being (BinOp of ( INT ));
assume that
L52: (for B83 , B84 being  integer number holds ( C35 . (B83 , B84) ) = F14(B83 , B84))
and
L53: (for B85 , B86 being  integer number holds ( C36 . (B85 , B86) ) = F14(B85 , B86));
L54:
now
let C37 , C38 being (Element of ( INT ));
thus L55: ( C35 . (C37 , C38) ) = F14(C37 , C38) by L52
.= ( C36 . (C37 , C38) ) by L53;
end;
thus L56: thesis by L54 , BINOP_1:2;
end;
scheme NBinOpDefuniq { F15(Nat , Nat) -> set } : (for B87 , B88 being (BinOp of ( NAT )) holds (((for B89 , B90 being Nat holds ( B87 . (B89 , B90) ) = F15(B89 , B90)) & (for B91 , B92 being Nat holds ( B88 . (B91 , B92) ) = F15(B91 , B92))) implies B87 = B88))
proof
let C39 , C40 being (BinOp of ( NAT ));
assume that
L57: (for B93 , B94 being Nat holds ( C39 . (B93 , B94) ) = F15(B93 , B94))
and
L58: (for B95 , B96 being Nat holds ( C40 . (B95 , B96) ) = F15(B95 , B96));
L59:
now
let C41 , C42 being (Element of ( NAT ));
thus L60: ( C39 . (C41 , C42) ) = F15(C41 , C42) by L57
.= ( C40 . (C41 , C42) ) by L58;
end;
thus L61: thesis by L59 , BINOP_1:2;
end;
scheme CLambda2D { F16( complex number ,  complex number) ->  complex number } : (ex B97 being (Function of [: ( COMPLEX ) , ( COMPLEX ) :] , ( COMPLEX )) st (for B98 , B99 being  complex number holds ( B97 . (B98 , B99) ) = F16(B98 , B99)))
proof
defpred S1[  complex number ,  complex number , set ] means $3 = F16($1 , $2);
L62: (for B100 , B101 being (Element of ( COMPLEX )) holds (ex B102 being (Element of ( COMPLEX )) st S1[ B100 , B101 , B102 ]))
proof
let C43 , C44 being (Element of ( COMPLEX ));
reconsider D1 = F16(C43 , C44) as (Element of ( COMPLEX )) by XCMPLX_0:def 2;
take D1;
thus L63: S1[ C43 , C44 , D1 ];
end;
consider C45 being (Function of [: ( COMPLEX ) , ( COMPLEX ) :] , ( COMPLEX )) such that L64: (for B103 , B104 being (Element of ( COMPLEX )) holds S1[ B103 , B104 , ( C45 . (B103 , B104) ) ]) from BINOP_1:sch 3(L62);
take C45;
let C46 , C47 being  complex number;
reconsider D2 = C46 , D3 = C47 as (Element of ( COMPLEX )) by XCMPLX_0:def 2;
L65: S1[ D2 , D3 , ( C45 . (D2 , D3) ) ] by L64;
L66: ( C45 . (D2 , D3) ) = F16(D2 , D3) by L65;
thus L67: thesis by L66;
end;
scheme RLambda2D { F17( real number ,  real number) ->  real number } : (ex B105 being (Function of [: ( REAL ) , ( REAL ) :] , ( REAL )) st (for B106 , B107 being  real number holds ( B105 . (B106 , B107) ) = F17(B106 , B107)))
proof
defpred S2[  real number ,  real number , set ] means $3 = F17($1 , $2);
L68: (for B108 , B109 being (Element of ( REAL )) holds (ex B110 being (Element of ( REAL )) st S2[ B108 , B109 , B110 ]))
proof
let C48 , C49 being (Element of ( REAL ));
reconsider D4 = F17(C48 , C49) as (Element of ( REAL )) by XREAL_0:def 1;
take D4;
thus L69: S2[ C48 , C49 , D4 ];
end;
consider C50 being (Function of [: ( REAL ) , ( REAL ) :] , ( REAL )) such that L70: (for B111 , B112 being (Element of ( REAL )) holds S2[ B111 , B112 , ( C50 . (B111 , B112) ) ]) from BINOP_1:sch 3(L68);
take C50;
let C51 , C52 being  real number;
reconsider D5 = C51 , D6 = C52 as (Element of ( REAL )) by XREAL_0:def 1;
L71: S2[ D5 , D6 , ( C50 . (D5 , D6) ) ] by L70;
L72: ( C50 . (D5 , D6) ) = F17(D5 , D6) by L71;
thus L73: thesis by L72;
end;
scheme WLambda2D { F18( rational number ,  rational number) ->  rational number } : (ex B113 being (Function of [: ( RAT ) , ( RAT ) :] , ( RAT )) st (for B114 , B115 being  rational number holds ( B113 . (B114 , B115) ) = F18(B114 , B115)))
proof
defpred S3[  rational number ,  rational number , set ] means $3 = F18($1 , $2);
L74: (for B116 , B117 being (Element of ( RAT )) holds (ex B118 being (Element of ( RAT )) st S3[ B116 , B117 , B118 ]))
proof
let C53 , C54 being (Element of ( RAT ));
reconsider D7 = F18(C53 , C54) as (Element of ( RAT )) by RAT_1:def 2;
take D7;
thus L75: S3[ C53 , C54 , D7 ];
end;
consider C55 being (Function of [: ( RAT ) , ( RAT ) :] , ( RAT )) such that L76: (for B119 , B120 being (Element of ( RAT )) holds S3[ B119 , B120 , ( C55 . (B119 , B120) ) ]) from BINOP_1:sch 3(L74);
take C55;
let C56 , C57 being  rational number;
reconsider D8 = C56 , D9 = C57 as (Element of ( RAT )) by RAT_1:def 2;
L77: S3[ D8 , D9 , ( C55 . (D8 , D9) ) ] by L76;
L78: ( C55 . (D8 , D9) ) = F18(D8 , D9) by L77;
thus L79: thesis by L78;
end;
scheme ILambda2D { F19( integer number ,  integer number) ->  integer number } : (ex B121 being (Function of [: ( INT ) , ( INT ) :] , ( INT )) st (for B122 , B123 being  integer number holds ( B121 . (B122 , B123) ) = F19(B122 , B123)))
proof
defpred S4[  integer number ,  integer number , set ] means $3 = F19($1 , $2);
L80: (for B124 , B125 being (Element of ( INT )) holds (ex B126 being (Element of ( INT )) st S4[ B124 , B125 , B126 ]))
proof
let C58 , C59 being (Element of ( INT ));
reconsider D10 = F19(C58 , C59) as (Element of ( INT )) by INT_1:def 2;
take D10;
thus L81: S4[ C58 , C59 , D10 ];
end;
consider C60 being (Function of [: ( INT ) , ( INT ) :] , ( INT )) such that L82: (for B127 , B128 being (Element of ( INT )) holds S4[ B127 , B128 , ( C60 . (B127 , B128) ) ]) from BINOP_1:sch 3(L80);
take C60;
let C61 , C62 being  integer number;
reconsider D11 = C61 , D12 = C62 as (Element of ( INT )) by INT_1:def 2;
L83: S4[ D11 , D12 , ( C60 . (D11 , D12) ) ] by L82;
L84: ( C60 . (D11 , D12) ) = F19(D11 , D12) by L83;
thus L85: thesis by L84;
end;
scheme NLambda2D { F20(Nat , Nat) -> Nat } : (ex B129 being (Function of [: ( NAT ) , ( NAT ) :] , ( NAT )) st (for B130 , B131 being Nat holds ( B129 . (B130 , B131) ) = F20(B130 , B131)))
proof
defpred S5[ Nat , Nat , set ] means $3 = F20($1 , $2);
L86: (for B132 , B133 being (Element of ( NAT )) holds (ex B134 being (Element of ( NAT )) st S5[ B132 , B133 , B134 ]))
proof
let C63 , C64 being (Element of ( NAT ));
reconsider D13 = F20(C63 , C64) as (Element of ( NAT )) by ORDINAL1:def 12;
take D13;
thus L87: S5[ C63 , C64 , D13 ];
end;
consider C65 being (Function of [: ( NAT ) , ( NAT ) :] , ( NAT )) such that L88: (for B135 , B136 being (Element of ( NAT )) holds S5[ B135 , B136 , ( C65 . (B135 , B136) ) ]) from BINOP_1:sch 3(L86);
take C65;
let C66 , C67 being Nat;
reconsider D14 = C66 , D15 = C67 as (Element of ( NAT )) by ORDINAL1:def 12;
L89: S5[ D14 , D15 , ( C65 . (D14 , D15) ) ] by L88;
L90: ( C65 . (D14 , D15) ) = F20(D14 , D15) by L89;
thus L91: thesis by L90;
end;
scheme CLambdaD { F21( complex number) ->  complex number } : (ex B137 being (Function of ( COMPLEX ) , ( COMPLEX )) st (for B138 being  complex number holds ( B137 . B138 ) = F21(B138)))
proof
defpred S6[ (Element of ( COMPLEX )) , set ] means $2 = F21($1);
L92: (for B139 being (Element of ( COMPLEX )) holds (ex B140 being (Element of ( COMPLEX )) st S6[ B139 , B140 ]))
proof
let C68 being (Element of ( COMPLEX ));
reconsider D16 = F21(C68) as (Element of ( COMPLEX )) by XCMPLX_0:def 2;
take D16;
thus L93: S6[ C68 , D16 ];
end;
consider C69 being (Function of ( COMPLEX ) , ( COMPLEX )) such that L94: (for B141 being (Element of ( COMPLEX )) holds S6[ B141 , ( C69 . B141 ) ]) from FUNCT_2:sch 3(L92);
take C69;
let C70 being  complex number;
reconsider D17 = C70 as (Element of ( COMPLEX )) by XCMPLX_0:def 2;
L95: S6[ D17 , ( C69 . D17 ) ] by L94;
thus L96: thesis by L95;
end;
scheme RLambdaD { F22( real number) ->  real number } : (ex B142 being (Function of ( REAL ) , ( REAL )) st (for B143 being  real number holds ( B142 . B143 ) = F22(B143)))
proof
defpred S7[ (Element of ( REAL )) , set ] means $2 = F22($1);
L97: (for B144 being (Element of ( REAL )) holds (ex B145 being (Element of ( REAL )) st S7[ B144 , B145 ]))
proof
let C71 being (Element of ( REAL ));
reconsider D18 = F22(C71) as (Element of ( REAL )) by XREAL_0:def 1;
take D18;
thus L98: S7[ C71 , D18 ];
end;
consider C72 being (Function of ( REAL ) , ( REAL )) such that L99: (for B146 being (Element of ( REAL )) holds S7[ B146 , ( C72 . B146 ) ]) from FUNCT_2:sch 3(L97);
take C72;
let C73 being  real number;
reconsider D19 = C73 as (Element of ( REAL )) by XREAL_0:def 1;
L100: S7[ D19 , ( C72 . D19 ) ] by L99;
thus L101: thesis by L100;
end;
scheme WLambdaD { F23( rational number) ->  rational number } : (ex B147 being (Function of ( RAT ) , ( RAT )) st (for B148 being  rational number holds ( B147 . B148 ) = F23(B148)))
proof
defpred S8[ (Element of ( RAT )) , set ] means $2 = F23($1);
L102: (for B149 being (Element of ( RAT )) holds (ex B150 being (Element of ( RAT )) st S8[ B149 , B150 ]))
proof
let C74 being (Element of ( RAT ));
reconsider D20 = F23(C74) as (Element of ( RAT )) by RAT_1:def 2;
take D20;
thus L103: S8[ C74 , D20 ];
end;
consider C75 being (Function of ( RAT ) , ( RAT )) such that L104: (for B151 being (Element of ( RAT )) holds S8[ B151 , ( C75 . B151 ) ]) from FUNCT_2:sch 3(L102);
take C75;
let C76 being  rational number;
reconsider D21 = C76 as (Element of ( RAT )) by RAT_1:def 2;
L105: S8[ D21 , ( C75 . D21 ) ] by L104;
thus L106: thesis by L105;
end;
scheme ILambdaD { F24( integer number) ->  integer number } : (ex B152 being (Function of ( INT ) , ( INT )) st (for B153 being  integer number holds ( B152 . B153 ) = F24(B153)))
proof
defpred S9[ (Element of ( INT )) , set ] means $2 = F24($1);
L107: (for B154 being (Element of ( INT )) holds (ex B155 being (Element of ( INT )) st S9[ B154 , B155 ]))
proof
let C77 being (Element of ( INT ));
reconsider D22 = F24(C77) as (Element of ( INT )) by INT_1:def 2;
take D22;
thus L108: S9[ C77 , D22 ];
end;
consider C78 being (Function of ( INT ) , ( INT )) such that L109: (for B156 being (Element of ( INT )) holds S9[ B156 , ( C78 . B156 ) ]) from FUNCT_2:sch 3(L107);
take C78;
let C79 being  integer number;
reconsider D23 = C79 as (Element of ( INT )) by INT_1:def 2;
L110: S9[ D23 , ( C78 . D23 ) ] by L109;
thus L111: thesis by L110;
end;
scheme NLambdaD { F25(Nat) -> Nat } : (ex B157 being (Function of ( NAT ) , ( NAT )) st (for B158 being Nat holds ( B157 . B158 ) = F25(B158)))
proof
defpred S10[ (Element of ( NAT )) , set ] means $2 = F25($1);
L112: (for B159 being (Element of ( NAT )) holds (ex B160 being (Element of ( NAT )) st S10[ B159 , B160 ]))
proof
let C80 being (Element of ( NAT ));
reconsider D24 = F25(C80) as (Element of ( NAT )) by ORDINAL1:def 12;
take D24;
thus L113: S10[ C80 , D24 ];
end;
consider C81 being (Function of ( NAT ) , ( NAT )) such that L114: (for B161 being (Element of ( NAT )) holds S10[ B161 , ( C81 . B161 ) ]) from FUNCT_2:sch 3(L112);
take C81;
let C82 being Nat;
reconsider D25 = C82 as (Element of ( NAT )) by ORDINAL1:def 12;
L115: S10[ D25 , ( C81 . D25 ) ] by L114;
thus L116: thesis by L115;
end;
definition
let R2 being  complex number;
redefine func - R2 -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
redefine func R2 " -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
let R3 being  complex number;
redefine func R2 + R3 -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
redefine func R2 - R3 -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
redefine func R2 * R3 -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
redefine func R2 / R3 -> (Element of ( COMPLEX ));

coherence by XCMPLX_0:def 2;
end;
definition
let R5 being  real number;
redefine func - R5 -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
redefine func R5 " -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
let R6 being  real number;
redefine func R5 + R6 -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
redefine func R5 - R6 -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
redefine func R5 * R6 -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
redefine func R5 / R6 -> (Element of ( REAL ));

coherence by XREAL_0:def 1;
end;
definition
let R8 being  rational number;
redefine func - R8 -> (Element of ( RAT ));

coherence by RAT_1:def 2;
redefine func R8 " -> (Element of ( RAT ));

coherence by RAT_1:def 2;
let R9 being  rational number;
redefine func R8 + R9 -> (Element of ( RAT ));

coherence by RAT_1:def 2;
redefine func R8 - R9 -> (Element of ( RAT ));

coherence by RAT_1:def 2;
redefine func R8 * R9 -> (Element of ( RAT ));

coherence by RAT_1:def 2;
redefine func R8 / R9 -> (Element of ( RAT ));

coherence by RAT_1:def 2;
end;
definition
let R11 being  integer number;
redefine func - R11 -> (Element of ( INT ));

coherence by INT_1:def 2;
let R12 being  integer number;
redefine func R11 + R12 -> (Element of ( INT ));

coherence by INT_1:def 2;
redefine func R11 - R12 -> (Element of ( INT ));

coherence by INT_1:def 2;
redefine func R11 * R12 -> (Element of ( INT ));

coherence by INT_1:def 2;
end;
definition
let R13 being Nat;
let R14 being Nat;
redefine func R13 + R14 -> (Element of ( NAT ));

coherence by ORDINAL1:def 12;
redefine func R13 * R14 -> (Element of ( NAT ));

coherence by ORDINAL1:def 12;
end;
definition
func compcomplex -> (UnOp of ( COMPLEX )) means 
(for R1 being  complex number holds ( it . R1 ) = ( - R1 ));
existence from CLambdaD;
uniqueness from CFuncDefUniq;
func invcomplex -> (UnOp of ( COMPLEX )) means 
(for R1 being  complex number holds ( it . R1 ) = ( R1 " ));
existence from CLambdaD;
uniqueness from CFuncDefUniq;
func addcomplex -> (BinOp of ( COMPLEX )) means 
:L122: (for R2 being  complex number holds (for R3 being  complex number holds ( it . (R2 , R3) ) = ( R2 + R3 )));
existence from CLambda2D;
uniqueness from CBinOpDefuniq;
func diffcomplex -> (BinOp of ( COMPLEX )) means 
(for R2 being  complex number holds (for R3 being  complex number holds ( it . (R2 , R3) ) = ( R2 - R3 )));
existence from CLambda2D;
uniqueness from CBinOpDefuniq;
func multcomplex -> (BinOp of ( COMPLEX )) means 
:L123: (for R2 being  complex number holds (for R3 being  complex number holds ( it . (R2 , R3) ) = ( R2 * R3 )));
existence from CLambda2D;
uniqueness from CBinOpDefuniq;
func divcomplex -> (BinOp of ( COMPLEX )) means 
(for R2 being  complex number holds (for R3 being  complex number holds ( it . (R2 , R3) ) = ( R2 / R3 )));
existence from CLambda2D;
uniqueness from CBinOpDefuniq;
end;
definition
func compreal -> (UnOp of ( REAL )) means 
(for R4 being  real number holds ( it . R4 ) = ( - R4 ));
existence from RLambdaD;
uniqueness from RFuncDefUniq;
func invreal -> (UnOp of ( REAL )) means 
(for R4 being  real number holds ( it . R4 ) = ( R4 " ));
existence from RLambdaD;
uniqueness from RFuncDefUniq;
func addreal -> (BinOp of ( REAL )) means 
:L125: (for R5 being  real number holds (for R6 being  real number holds ( it . (R5 , R6) ) = ( R5 + R6 )));
existence from RLambda2D;
uniqueness from RBinOpDefuniq;
func diffreal -> (BinOp of ( REAL )) means 
(for R5 being  real number holds (for R6 being  real number holds ( it . (R5 , R6) ) = ( R5 - R6 )));
existence from RLambda2D;
uniqueness from RBinOpDefuniq;
func multreal -> (BinOp of ( REAL )) means 
:L126: (for R5 being  real number holds (for R6 being  real number holds ( it . (R5 , R6) ) = ( R5 * R6 )));
existence from RLambda2D;
uniqueness from RBinOpDefuniq;
func divreal -> (BinOp of ( REAL )) means 
(for R5 being  real number holds (for R6 being  real number holds ( it . (R5 , R6) ) = ( R5 / R6 )));
existence from RLambda2D;
uniqueness from RBinOpDefuniq;
end;
definition
func comprat -> (UnOp of ( RAT )) means 
(for R7 being  rational number holds ( it . R7 ) = ( - R7 ));
existence from WLambdaD;
uniqueness from WFuncDefUniq;
func invrat -> (UnOp of ( RAT )) means 
(for R7 being  rational number holds ( it . R7 ) = ( R7 " ));
existence from WLambdaD;
uniqueness from WFuncDefUniq;
func addrat -> (BinOp of ( RAT )) means 
:L128: (for R8 being  rational number holds (for R9 being  rational number holds ( it . (R8 , R9) ) = ( R8 + R9 )));
existence from WLambda2D;
uniqueness from WBinOpDefuniq;
func diffrat -> (BinOp of ( RAT )) means 
(for R8 being  rational number holds (for R9 being  rational number holds ( it . (R8 , R9) ) = ( R8 - R9 )));
existence from WLambda2D;
uniqueness from WBinOpDefuniq;
func multrat -> (BinOp of ( RAT )) means 
:L129: (for R8 being  rational number holds (for R9 being  rational number holds ( it . (R8 , R9) ) = ( R8 * R9 )));
existence from WLambda2D;
uniqueness from WBinOpDefuniq;
func divrat -> (BinOp of ( RAT )) means 
(for R8 being  rational number holds (for R9 being  rational number holds ( it . (R8 , R9) ) = ( R8 / R9 )));
existence from WLambda2D;
uniqueness from WBinOpDefuniq;
end;
definition
func compint -> (UnOp of ( INT )) means 
(for R10 being  integer number holds ( it . R10 ) = ( - R10 ));
existence from ILambdaD;
uniqueness from IFuncDefUniq;
func addint -> (BinOp of ( INT )) means 
:L131: (for R11 being  integer number holds (for R12 being  integer number holds ( it . (R11 , R12) ) = ( R11 + R12 )));
existence from ILambda2D;
uniqueness from IBinOpDefuniq;
func diffint -> (BinOp of ( INT )) means 
(for R11 being  integer number holds (for R12 being  integer number holds ( it . (R11 , R12) ) = ( R11 - R12 )));
existence from ILambda2D;
uniqueness from IBinOpDefuniq;
func multint -> (BinOp of ( INT )) means 
:L132: (for R11 being  integer number holds (for R12 being  integer number holds ( it . (R11 , R12) ) = ( R11 * R12 )));
existence from ILambda2D;
uniqueness from IBinOpDefuniq;
end;
definition
func addnat -> (BinOp of ( NAT )) means 
:L134: (for R13 being Nat holds (for R14 being Nat holds ( it . (R13 , R14) ) = ( R13 + R14 )));
existence from NLambda2D;
uniqueness from NBinOpDefuniq;
func multnat -> (BinOp of ( NAT )) means 
:L135: (for R13 being Nat holds (for R14 being Nat holds ( it . (R13 , R14) ) = ( R13 * R14 )));
existence from NLambda2D;
uniqueness from NBinOpDefuniq;
end;
registration
cluster ( addcomplex ) ->  commutative  associative;
coherence
proof
thus L137: ( addcomplex ) is  commutative
proof
let C83 , C84 being (Element of ( COMPLEX ));
thus L138: ( ( addcomplex ) . (C83 , C84) ) = ( C83 + C84 ) by L122
.= ( ( addcomplex ) . (C84 , C83) ) by L122;
end;

let C85 , C86 , C87 being (Element of ( COMPLEX ));
thus L139: ( ( addcomplex ) . (C85 , ( ( addcomplex ) . (C86 , C87) )) ) = ( C85 + ( ( addcomplex ) . (C86 , C87) ) ) by L122
.= ( C85 + ( C86 + C87 ) ) by L122
.= ( ( C85 + C86 ) + C87 )
.= ( ( ( addcomplex ) . (C85 , C86) ) + C87 ) by L122
.= ( ( addcomplex ) . (( ( addcomplex ) . (C85 , C86) ) , C87) ) by L122;
end;
cluster ( multcomplex ) ->  commutative  associative;
coherence
proof
thus L140: ( multcomplex ) is  commutative
proof
let C88 , C89 being (Element of ( COMPLEX ));
thus L141: ( ( multcomplex ) . (C88 , C89) ) = ( C88 * C89 ) by L123
.= ( ( multcomplex ) . (C89 , C88) ) by L123;
end;

let C90 , C91 , C92 being (Element of ( COMPLEX ));
thus L142: ( ( multcomplex ) . (C90 , ( ( multcomplex ) . (C91 , C92) )) ) = ( C90 * ( ( multcomplex ) . (C91 , C92) ) ) by L123
.= ( C90 * ( C91 * C92 ) ) by L123
.= ( ( C90 * C91 ) * C92 )
.= ( ( ( multcomplex ) . (C90 , C91) ) * C92 ) by L123
.= ( ( multcomplex ) . (( ( multcomplex ) . (C90 , C91) ) , C92) ) by L123;
end;
cluster ( addreal ) ->  commutative  associative;
coherence
proof
thus L143: ( addreal ) is  commutative
proof
let C93 , C94 being (Element of ( REAL ));
thus L144: ( ( addreal ) . (C93 , C94) ) = ( C93 + C94 ) by L125
.= ( ( addreal ) . (C94 , C93) ) by L125;
end;

let C95 , C96 , C97 being (Element of ( REAL ));
thus L145: ( ( addreal ) . (C95 , ( ( addreal ) . (C96 , C97) )) ) = ( C95 + ( ( addreal ) . (C96 , C97) ) ) by L125
.= ( C95 + ( C96 + C97 ) ) by L125
.= ( ( C95 + C96 ) + C97 )
.= ( ( ( addreal ) . (C95 , C96) ) + C97 ) by L125
.= ( ( addreal ) . (( ( addreal ) . (C95 , C96) ) , C97) ) by L125;
end;
cluster ( multreal ) ->  commutative  associative;
coherence
proof
thus L146: ( multreal ) is  commutative
proof
let C98 , C99 being (Element of ( REAL ));
thus L147: ( ( multreal ) . (C98 , C99) ) = ( C98 * C99 ) by L126
.= ( ( multreal ) . (C99 , C98) ) by L126;
end;

let C100 , C101 , C102 being (Element of ( REAL ));
thus L148: ( ( multreal ) . (C100 , ( ( multreal ) . (C101 , C102) )) ) = ( C100 * ( ( multreal ) . (C101 , C102) ) ) by L126
.= ( C100 * ( C101 * C102 ) ) by L126
.= ( ( C100 * C101 ) * C102 )
.= ( ( ( multreal ) . (C100 , C101) ) * C102 ) by L126
.= ( ( multreal ) . (( ( multreal ) . (C100 , C101) ) , C102) ) by L126;
end;
cluster ( addrat ) ->  commutative  associative;
coherence
proof
thus L149: ( addrat ) is  commutative
proof
let C103 , C104 being (Element of ( RAT ));
thus L150: ( ( addrat ) . (C103 , C104) ) = ( C103 + C104 ) by L128
.= ( ( addrat ) . (C104 , C103) ) by L128;
end;

let C105 , C106 , C107 being (Element of ( RAT ));
thus L151: ( ( addrat ) . (C105 , ( ( addrat ) . (C106 , C107) )) ) = ( C105 + ( ( addrat ) . (C106 , C107) ) ) by L128
.= ( C105 + ( C106 + C107 ) ) by L128
.= ( ( C105 + C106 ) + C107 )
.= ( ( ( addrat ) . (C105 , C106) ) + C107 ) by L128
.= ( ( addrat ) . (( ( addrat ) . (C105 , C106) ) , C107) ) by L128;
end;
cluster ( multrat ) ->  commutative  associative;
coherence
proof
thus L152: ( multrat ) is  commutative
proof
let C108 , C109 being (Element of ( RAT ));
thus L153: ( ( multrat ) . (C108 , C109) ) = ( C108 * C109 ) by L129
.= ( ( multrat ) . (C109 , C108) ) by L129;
end;

let C110 , C111 , C112 being (Element of ( RAT ));
thus L154: ( ( multrat ) . (C110 , ( ( multrat ) . (C111 , C112) )) ) = ( C110 * ( ( multrat ) . (C111 , C112) ) ) by L129
.= ( C110 * ( C111 * C112 ) ) by L129
.= ( ( C110 * C111 ) * C112 )
.= ( ( ( multrat ) . (C110 , C111) ) * C112 ) by L129
.= ( ( multrat ) . (( ( multrat ) . (C110 , C111) ) , C112) ) by L129;
end;
cluster ( addint ) ->  commutative  associative;
coherence
proof
thus L155: ( addint ) is  commutative
proof
let C113 , C114 being (Element of ( INT ));
thus L156: ( ( addint ) . (C113 , C114) ) = ( C113 + C114 ) by L131
.= ( ( addint ) . (C114 , C113) ) by L131;
end;

let C115 , C116 , C117 being (Element of ( INT ));
thus L157: ( ( addint ) . (C115 , ( ( addint ) . (C116 , C117) )) ) = ( C115 + ( ( addint ) . (C116 , C117) ) ) by L131
.= ( C115 + ( C116 + C117 ) ) by L131
.= ( ( C115 + C116 ) + C117 )
.= ( ( ( addint ) . (C115 , C116) ) + C117 ) by L131
.= ( ( addint ) . (( ( addint ) . (C115 , C116) ) , C117) ) by L131;
end;
cluster ( multint ) ->  commutative  associative;
coherence
proof
thus L158: ( multint ) is  commutative
proof
let C118 , C119 being (Element of ( INT ));
thus L159: ( ( multint ) . (C118 , C119) ) = ( C118 * C119 ) by L132
.= ( ( multint ) . (C119 , C118) ) by L132;
end;

let C120 , C121 , C122 being (Element of ( INT ));
thus L160: ( ( multint ) . (C120 , ( ( multint ) . (C121 , C122) )) ) = ( C120 * ( ( multint ) . (C121 , C122) ) ) by L132
.= ( C120 * ( C121 * C122 ) ) by L132
.= ( ( C120 * C121 ) * C122 )
.= ( ( ( multint ) . (C120 , C121) ) * C122 ) by L132
.= ( ( multint ) . (( ( multint ) . (C120 , C121) ) , C122) ) by L132;
end;
cluster ( addnat ) ->  commutative  associative;
coherence
proof
thus L161: ( addnat ) is  commutative
proof
let C123 , C124 being (Element of ( NAT ));
thus L162: ( ( addnat ) . (C123 , C124) ) = ( C123 + C124 ) by L134
.= ( ( addnat ) . (C124 , C123) ) by L134;
end;

let C125 , C126 , C127 being (Element of ( NAT ));
thus L163: ( ( addnat ) . (C125 , ( ( addnat ) . (C126 , C127) )) ) = ( C125 + ( ( addnat ) . (C126 , C127) ) ) by L134
.= ( C125 + ( C126 + C127 ) ) by L134
.= ( ( C125 + C126 ) + C127 )
.= ( ( ( addnat ) . (C125 , C126) ) + C127 ) by L134
.= ( ( addnat ) . (( ( addnat ) . (C125 , C126) ) , C127) ) by L134;
end;
cluster ( multnat ) ->  commutative  associative;
coherence
proof
thus L164: ( multnat ) is  commutative
proof
let C128 , C129 being (Element of ( NAT ));
thus L165: ( ( multnat ) . (C128 , C129) ) = ( C128 * C129 ) by L135
.= ( ( multnat ) . (C129 , C128) ) by L135;
end;

let C130 , C131 , C132 being (Element of ( NAT ));
thus L166: ( ( multnat ) . (C130 , ( ( multnat ) . (C131 , C132) )) ) = ( C130 * ( ( multnat ) . (C131 , C132) ) ) by L135
.= ( C130 * ( C131 * C132 ) ) by L135
.= ( ( C130 * C131 ) * C132 )
.= ( ( ( multnat ) . (C130 , C131) ) * C132 ) by L135
.= ( ( multnat ) . (( ( multnat ) . (C130 , C131) ) , C132) ) by L135;
end;
end;
L168: ( 0 ) in ( NAT );
reconsider D26 = ( 0 ) as (Element of ( COMPLEX )) by L168 , NUMBERS:20;
L169: D26 is_a_unity_wrt ( addcomplex )
proof
thus L170: (for B162 being (Element of ( COMPLEX )) holds ( ( addcomplex ) . (D26 , B162) ) = B162)
proof
let C133 being (Element of ( COMPLEX ));
thus L171: ( ( addcomplex ) . (D26 , C133) ) = ( ( 0 ) + C133 ) by L122
.= C133;
end;

let C134 being (Element of ( COMPLEX ));
thus L172: ( ( addcomplex ) . (C134 , D26) ) = ( C134 + ( 0 ) ) by L122
.= C134;
end;
L173: ( 0 ) is_a_unity_wrt ( addreal )
proof
thus L174: (for B163 being (Element of ( REAL )) holds ( ( addreal ) . (( 0 ) , B163) ) = B163)
proof
let C135 being (Element of ( REAL ));
thus L175: ( ( addreal ) . (( 0 ) , C135) ) = ( ( 0 ) + C135 ) by L125
.= C135;
end;

let C136 being (Element of ( REAL ));
thus L176: ( ( addreal ) . (C136 , ( 0 )) ) = ( C136 + ( 0 ) ) by L125
.= C136;
end;
reconsider D27 = ( 0 ) as (Element of ( RAT )) by L168 , NUMBERS:18;
L177: D27 is_a_unity_wrt ( addrat )
proof
thus L178: (for B164 being (Element of ( RAT )) holds ( ( addrat ) . (D27 , B164) ) = B164)
proof
let C137 being (Element of ( RAT ));
thus L179: ( ( addrat ) . (D27 , C137) ) = ( ( 0 ) + C137 ) by L128
.= C137;
end;

let C138 being (Element of ( RAT ));
thus L180: ( ( addrat ) . (C138 , D27) ) = ( C138 + ( 0 ) ) by L128
.= C138;
end;
reconsider D28 = ( 0 ) as (Element of ( INT )) by L168 , NUMBERS:17;
L181: D28 is_a_unity_wrt ( addint )
proof
thus L182: (for B165 being (Element of ( INT )) holds ( ( addint ) . (D28 , B165) ) = B165)
proof
let C139 being (Element of ( INT ));
thus L183: ( ( addint ) . (D28 , C139) ) = ( ( 0 ) + C139 ) by L131
.= C139;
end;

let C140 being (Element of ( INT ));
thus L184: ( ( addint ) . (C140 , D28) ) = ( C140 + ( 0 ) ) by L131
.= C140;
end;
L185: ( 0 ) is_a_unity_wrt ( addnat )
proof
thus L186: (for B166 being (Element of ( NAT )) holds ( ( addnat ) . (( 0 ) , B166) ) = B166)
proof
let C141 being (Element of ( NAT ));
thus L187: ( ( addnat ) . (( 0 ) , C141) ) = ( ( 0 ) + C141 ) by L134
.= C141;
end;

let C142 being (Element of ( NAT ));
thus L188: ( ( addnat ) . (C142 , ( 0 )) ) = ( C142 + ( 0 ) ) by L134
.= C142;
end;
L189: 1 in ( NAT );
reconsider D29 = 1 as (Element of ( COMPLEX )) by L189 , NUMBERS:20;
L190: D29 is_a_unity_wrt ( multcomplex )
proof
thus L191: (for B167 being (Element of ( COMPLEX )) holds ( ( multcomplex ) . (D29 , B167) ) = B167)
proof
let C143 being (Element of ( COMPLEX ));
thus L192: ( ( multcomplex ) . (D29 , C143) ) = ( 1 * C143 ) by L123
.= C143;
end;

let C144 being (Element of ( COMPLEX ));
thus L193: ( ( multcomplex ) . (C144 , D29) ) = ( C144 * 1 ) by L123
.= C144;
end;
L194: 1 is_a_unity_wrt ( multreal )
proof
thus L195: (for B168 being (Element of ( REAL )) holds ( ( multreal ) . (1 , B168) ) = B168)
proof
let C145 being (Element of ( REAL ));
thus L196: ( ( multreal ) . (1 , C145) ) = ( 1 * C145 ) by L126
.= C145;
end;

let C146 being (Element of ( REAL ));
thus L197: ( ( multreal ) . (C146 , 1) ) = ( C146 * 1 ) by L126
.= C146;
end;
reconsider D30 = 1 as (Element of ( RAT )) by L189 , NUMBERS:18;
L198: D30 is_a_unity_wrt ( multrat )
proof
thus L199: (for B169 being (Element of ( RAT )) holds ( ( multrat ) . (D30 , B169) ) = B169)
proof
let C147 being (Element of ( RAT ));
thus L200: ( ( multrat ) . (D30 , C147) ) = ( 1 * C147 ) by L129
.= C147;
end;

let C148 being (Element of ( RAT ));
thus L201: ( ( multrat ) . (C148 , D30) ) = ( C148 * 1 ) by L129
.= C148;
end;
reconsider D31 = 1 as (Element of ( INT )) by L189 , NUMBERS:17;
L202: D31 is_a_unity_wrt ( multint )
proof
thus L203: (for B170 being (Element of ( INT )) holds ( ( multint ) . (D31 , B170) ) = B170)
proof
let C149 being (Element of ( INT ));
thus L204: ( ( multint ) . (D31 , C149) ) = ( 1 * C149 ) by L132
.= C149;
end;

let C150 being (Element of ( INT ));
thus L205: ( ( multint ) . (C150 , D31) ) = ( C150 * 1 ) by L132
.= C150;
end;
L206: 1 is_a_unity_wrt ( multnat )
proof
thus L207: (for B171 being (Element of ( NAT )) holds ( ( multnat ) . (1 , B171) ) = B171)
proof
let C151 being (Element of ( NAT ));
thus L208: ( ( multnat ) . (1 , C151) ) = ( 1 * C151 ) by L135
.= C151;
end;

let C152 being (Element of ( NAT ));
thus L209: ( ( multnat ) . (C152 , 1) ) = ( C152 * 1 ) by L135
.= C152;
end;
registration
cluster ( addcomplex ) ->  having_a_unity;
coherence by L169 , SETWISEO:def 2;
cluster ( addreal ) ->  having_a_unity;
coherence by L173 , SETWISEO:def 2;
cluster ( addrat ) ->  having_a_unity;
coherence by L177 , SETWISEO:def 2;
cluster ( addint ) ->  having_a_unity;
coherence by L181 , SETWISEO:def 2;
cluster ( addnat ) ->  having_a_unity;
coherence by L185 , SETWISEO:def 2;
cluster ( multcomplex ) ->  having_a_unity;
coherence by L190 , SETWISEO:def 2;
cluster ( multreal ) ->  having_a_unity;
coherence by L194 , SETWISEO:def 2;
cluster ( multrat ) ->  having_a_unity;
coherence by L198 , SETWISEO:def 2;
cluster ( multint ) ->  having_a_unity;
coherence by L202 , SETWISEO:def 2;
cluster ( multnat ) ->  having_a_unity;
coherence by L206 , SETWISEO:def 2;
end;
theorem
L211: ( the_unity_wrt ( addcomplex ) ) = ( 0 ) by L169 , BINOP_1:def 8;
theorem
L212: ( the_unity_wrt ( addreal ) ) = ( 0 ) by L173 , BINOP_1:def 8;
theorem
L213: ( the_unity_wrt ( addrat ) ) = ( 0 ) by L177 , BINOP_1:def 8;
theorem
L214: ( the_unity_wrt ( addint ) ) = ( 0 ) by L181 , BINOP_1:def 8;
theorem
L215: ( the_unity_wrt ( addnat ) ) = ( 0 ) by L185 , BINOP_1:def 8;
theorem
L216: ( the_unity_wrt ( multcomplex ) ) = 1 by L190 , BINOP_1:def 8;
theorem
L217: ( the_unity_wrt ( multreal ) ) = 1 by L194 , BINOP_1:def 8;
theorem
L218: ( the_unity_wrt ( multrat ) ) = 1 by L198 , BINOP_1:def 8;
theorem
L219: ( the_unity_wrt ( multint ) ) = 1 by L202 , BINOP_1:def 8;
theorem
L220: ( the_unity_wrt ( multnat ) ) = 1 by L206 , BINOP_1:def 8;
