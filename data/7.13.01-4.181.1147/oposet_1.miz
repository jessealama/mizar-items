:: Basic Notions and Properties of Orthoposets
::  by Markus Moschner
::
:: Received February 11, 2003
:: Copyright (c) 2003-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, RELAT_1, SUBSET_1, TARSKI, FUNCT_5, FUNCT_1, RELAT_2,
      ORDERS_2, XXREAL_0, ORDINAL2, LATTICE3, BINOP_1, QMAX_1, STRUCT_0,
      ROBBINS1, WAYBEL_0, YELLOW_0, EQREL_1, WAYBEL_1, LATTICES, OPOSET_1,
      CARD_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, FUNCT_1, RELAT_1, RELAT_2, FUNCT_2,
      RELSET_1, PARTFUN1, BINOP_1, DOMAIN_1, FUNCT_5, CARD_1, STRUCT_0,
      ORDERS_2, LATTICE3, ROBBINS1, WAYBEL_0, WAYBEL_1, YELLOW_0, NECKLACE,
      QMAX_1, PARTIT_2;
 constructors REALSET2, LATTICE3, WAYBEL_1, NECKLACE, QMAX_1, FUNCT_5,
      PARTIT_2;
 registrations XBOOLE_0, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2, STRUCT_0,
      YELLOW_0, WAYBEL24, PARTIT_2, CARD_1, RELAT_2;
 requirements BOOLE, SUBSET;
 definitions RELAT_1, RELAT_2, ORDERS_2, NECKLACE, STRUCT_0;
 theorems FUNCT_1, FUNCT_2, LATTICE3, ORDERS_2, PARTIT_2, RELAT_1, RELAT_2,
      RELSET_1, TARSKI, WAYBEL_0, WAYBEL_1, YELLOW_0, ENUMSET1, SYSREL,
      NECKLACE, CARD_1;

begin
theorem
L1: (for B1 being non  empty  reflexive  antisymmetric RelStr holds (for B2 , B3 being (Element of B1) holds (B2 <= B3 implies (( sup { B2 , B3 } ) = B3 & ( inf { B2 , B3 } ) = B2))))
proof
let C1 being non  empty  reflexive  antisymmetric RelStr;
let C2 , C3 being (Element of C1);
L2: (for B4 being (Element of C1) holds (B4 is_>=_than { C2 , C3 } implies C3 <= B4))
proof
let C4 being (Element of C1);
L3: C3 in { C2 , C3 } by TARSKI:def 2;
assume L4: C4 is_>=_than { C2 , C3 };
thus L5: thesis by L4 , L3 , LATTICE3:def 9;
end;
L6: (for B5 being (Element of C1) holds (B5 is_<=_than { C2 , C3 } implies C2 >= B5))
proof
let C5 being (Element of C1);
L7: C2 in { C2 , C3 } by TARSKI:def 2;
assume L8: C5 is_<=_than { C2 , C3 };
thus L9: thesis by L8 , L7 , LATTICE3:def 8;
end;
assume L10: C2 <= C3;
L11: (for B6 being (Element of { C2 , C3 }) holds B6 >= C2)
proof
let C6 being (Element of { C2 , C3 });
L12: (C2 <= C6 or C2 <= C6) by L10 , TARSKI:def 2;
thus L13: thesis by L12;
end;
L14: (for B7 being (Element of C1) holds (B7 in { C2 , C3 } implies B7 >= C2)) by L11;
L15: C2 is_<=_than { C2 , C3 } by L14 , LATTICE3:def 8;
L16: (for B8 being (Element of C1) holds (B8 in { C2 , C3 } implies B8 <= C3)) by L10 , TARSKI:def 2;
L17: C3 is_>=_than { C2 , C3 } by L16 , LATTICE3:def 9;
thus L18: thesis by L17 , L15 , L2 , L6 , YELLOW_0:30 , YELLOW_0:31;
end;
registration
let C7 being set;
cluster  irreflexive  asymmetric  transitive for (Relation of C7);
existence
proof
L19: ( {} (C7 , C7) ) = ( {} );
thus L20: thesis by L19;
end;
end;
registration
let R1 being non  empty set;
let R2 being (Relation of R1);
let C8 being (UnOp of R1);
cluster OrthoRelStr (# R1 , R2 , C8 #) -> non  empty;
coherence;
end;
registration
cluster non  empty  strict for OrthoRelStr;
existence
proof
set D1 = the non  empty set;
set D2 = the (Relation of D1);
set D3 = the (UnOp of D1);
take OrthoRelStr (# D1 , D2 , D3 #);
thus L23: thesis;
end;
end;
registration
let C9 being set;
cluster  involutive for (Function of C9 , C9);
existence
proof
take ( id C9 );
thus L25: thesis;
end;
end;
definition
func TrivOrthoRelStr ->  strict OrthoRelStr equals 
:L27: OrthoRelStr (# 1 , ( id 1 ) , ( op1 ) #);
coherence;
end;
notation
synonym TrivPoset for TrivOrthoRelStr;
end;
registration
cluster ( TrivOrthoRelStr ) -> 1 -element;
coherence
proof
thus L30: (the carrier of ( TrivOrthoRelStr )) is 1 -element by CARD_1:49;
end;
end;
definition
func TrivAsymOrthoRelStr ->  strict OrthoRelStr equals 
OrthoRelStr (# 1 , ( {} (1 , 1) ) , ( op1 ) #);
coherence;
end;
registration
cluster ( TrivAsymOrthoRelStr ) -> non  empty;
coherence;
end;
definition
let C10 being non  empty OrthoRelStr;
attr C10 is  Dneg
means
:L34: (ex B9 being (Function of C10 , C10) st (B9 = (the Compl of C10) & B9 is  involutive));
end;
registration
cluster ( TrivOrthoRelStr ) ->  Dneg;
coherence by L34;
end;
registration
cluster  Dneg for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L27;
end;
definition
let C11 being non  empty RelStr;
attr C11 is  SubReFlexive
means
:L38: (the InternalRel of C11) is  reflexive;
end;
theorem
L40: (for R3 being non  empty RelStr holds (R3 is  reflexive implies R3 is  SubReFlexive))
proof
let R3 being non  empty RelStr;
assume L41: R3 is  reflexive;
L42: (the InternalRel of R3) is_reflexive_in (the carrier of R3) by L41 , ORDERS_2:def 2;
thus L43: thesis by L42 , L38 , PARTIT_2:21;
end;
theorem
L44: ( TrivOrthoRelStr ) is  reflexive
proof
L45: (( rng ( id { ( {} ) } ) ) = { ( {} ) } & ( field ( id { ( {} ) } ) ) = ( ( dom ( id { ( {} ) } ) ) \/ ( rng ( id { ( {} ) } ) ) ));
thus L46: thesis by L45 , CARD_1:49 , ORDERS_2:def 2 , RELAT_2:def 9;
end;
registration
cluster ( TrivOrthoRelStr ) ->  reflexive;
coherence by L44;
end;
registration
cluster  reflexive  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L44;
end;
definition
let R3 being non  empty RelStr;
redefine attr R3 is  irreflexive
means
:L49: (the InternalRel of R3) is  irreflexive;
compatibility
proof
set D4 = (the InternalRel of R3);
L50: ( field D4 ) c= ( (the carrier of R3) \/ (the carrier of R3) ) by RELSET_1:8;
thus L51: (R3 is  irreflexive implies D4 is  irreflexive)
proof
assume L52: R3 is  irreflexive;
let C12 being set;
thus L53: thesis by L50 , L52 , NECKLACE:def 5;
end;

assume L54: D4 is_irreflexive_in ( field D4 );
let C13 being set;
assume L55: C13 in (the carrier of R3);
per cases ;
suppose L56: C13 in ( field D4 );

thus L57: (not [ C13 , C13 ] in D4) by L56 , L54 , RELAT_2:def 2;
end;
suppose L58: (not C13 in ( field D4 ));

thus L59: (not [ C13 , C13 ] in D4) by L58 , RELAT_1:15;
end;
end;
redefine attr R3 is  irreflexive
means
:L61: (the InternalRel of R3) is_irreflexive_in (the carrier of R3);
compatibility
proof
thus L62: (R3 is  irreflexive implies (the InternalRel of R3) is_irreflexive_in (the carrier of R3))
proof
assume L63: R3 is  irreflexive;
L64: (for B10 being set holds (B10 in (the carrier of R3) implies (not [ B10 , B10 ] in (the InternalRel of R3)))) by L63 , NECKLACE:def 5;
thus L65: thesis by L64 , RELAT_2:def 2;
end;

assume L66: (the InternalRel of R3) is_irreflexive_in (the carrier of R3);
L67: (for B11 being set holds (B11 in (the carrier of R3) implies (not [ B11 , B11 ] in (the InternalRel of R3)))) by L66 , RELAT_2:def 2;
thus L68: thesis by L67 , NECKLACE:def 5;
end;
end;
theorem
L70: ( TrivAsymOrthoRelStr ) is  irreflexive
proof
L71: (for B12 being set holds (B12 in { ( {} ) } implies (not [ B12 , B12 ] in ( {} ({ ( {} ) } , { ( {} ) }) ))));
thus L72: thesis by L71 , L61 , CARD_1:49 , RELAT_2:def 2;
end;
registration
cluster ( TrivAsymOrthoRelStr ) ->  irreflexive;
coherence by L70;
end;
registration
cluster  irreflexive  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L70;
end;
definition
let C14 being non  empty RelStr;
redefine attr C14 is  symmetric
means
:L75: (the InternalRel of C14) is  symmetric  symmetric  symmetric  symmetric (Relation of (the carrier of C14));
compatibility
proof
thus L76: (C14 is  symmetric implies (the InternalRel of C14) is  symmetric  symmetric  symmetric  symmetric (Relation of (the carrier of C14)))
proof
assume L77: (the InternalRel of C14) is_symmetric_in (the carrier of C14);
thus L78: (the InternalRel of C14) is  symmetric  symmetric  symmetric  symmetric (Relation of (the carrier of C14)) by L77 , PARTIT_2:22;
end;

assume L79: (the InternalRel of C14) is  symmetric  symmetric  symmetric  symmetric (Relation of (the carrier of C14));
thus L80: (the InternalRel of C14) is_symmetric_in (the carrier of C14) by L79 , PARTIT_2:23;
end;
end;
theorem
L82: ( TrivOrthoRelStr ) is  symmetric by PARTIT_2:23 , NECKLACE:def 3;
registration
cluster  symmetric  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L82;
end;
definition
let R3 being non  empty RelStr;
redefine attr R3 is  antisymmetric
means
(the InternalRel of R3) is  antisymmetric  antisymmetric  antisymmetric  antisymmetric (Relation of (the carrier of R3));
compatibility
proof
thus L84: (R3 is  antisymmetric implies (the InternalRel of R3) is  antisymmetric  antisymmetric  antisymmetric  antisymmetric (Relation of (the carrier of R3)))
proof
assume L85: (the InternalRel of R3) is_antisymmetric_in (the carrier of R3);
thus L86: (the InternalRel of R3) is  antisymmetric  antisymmetric  antisymmetric  antisymmetric (Relation of (the carrier of R3)) by L85 , PARTIT_2:25;
end;

assume L87: (the InternalRel of R3) is  antisymmetric  antisymmetric  antisymmetric  antisymmetric (Relation of (the carrier of R3));
thus L88: (the InternalRel of R3) is_antisymmetric_in (the carrier of R3) by L87 , PARTIT_2:24;
end;
end;
L90: ( TrivOrthoRelStr ) is  antisymmetric;
registration
cluster ( TrivOrthoRelStr ) ->  symmetric;
coherence by PARTIT_2:23 , NECKLACE:def 3;
end;
registration
cluster  symmetric  antisymmetric  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L90;
end;
definition
let R3 being non  empty RelStr;
redefine attr R3 is  asymmetric
means
:L93: (the InternalRel of R3) is_asymmetric_in (the carrier of R3);
compatibility
proof
thus L94: (R3 is  asymmetric implies (the InternalRel of R3) is_asymmetric_in (the carrier of R3))
proof
assume L95: (the InternalRel of R3) is  asymmetric;
thus L96: (the InternalRel of R3) is_asymmetric_in (the carrier of R3) by L95 , PARTIT_2:28;
end;

assume L97: (the InternalRel of R3) is_asymmetric_in (the carrier of R3);
thus L98: (the InternalRel of R3) is  asymmetric by L97 , PARTIT_2:29;
end;
end;
theorem
L100: ( TrivAsymOrthoRelStr ) is  asymmetric by PARTIT_2:28 , L93;
registration
cluster ( TrivAsymOrthoRelStr ) ->  asymmetric;
coherence by PARTIT_2:28 , L93;
end;
registration
cluster  asymmetric  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L100;
end;
definition
let R3 being non  empty RelStr;
redefine attr R3 is  transitive
means
:L103: (the InternalRel of R3) is  transitive  transitive  transitive  transitive (Relation of (the carrier of R3));
compatibility
proof
thus L104: (R3 is  transitive implies (the InternalRel of R3) is  transitive  transitive  transitive  transitive (Relation of (the carrier of R3)))
proof
assume L105: (the InternalRel of R3) is_transitive_in (the carrier of R3);
thus L106: (the InternalRel of R3) is  transitive  transitive  transitive  transitive (Relation of (the carrier of R3)) by L105 , PARTIT_2:27;
end;

assume L107: (the InternalRel of R3) is  transitive  transitive  transitive  transitive (Relation of (the carrier of R3));
thus L108: (the InternalRel of R3) is_transitive_in (the carrier of R3) by L107 , PARTIT_2:26;
end;
end;
registration
cluster  reflexive  symmetric  antisymmetric  transitive  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L90;
end;
theorem
L111: ( TrivAsymOrthoRelStr ) is  transitive by PARTIT_2:26 , ORDERS_2:def 3;
registration
cluster ( TrivAsymOrthoRelStr ) ->  irreflexive  asymmetric  transitive;
coherence by PARTIT_2:26 , ORDERS_2:def 3;
end;
registration
cluster  irreflexive  asymmetric  transitive  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence by L70;
end;
theorem
L114: (for R3 being non  empty RelStr holds (R3 is  symmetric  transitive implies R3 is  SubReFlexive))
proof
let R3 being non  empty RelStr;
set D5 = (the InternalRel of R3);
assume L115: (R3 is  symmetric & R3 is  transitive);
L116: (D5 is  symmetric & D5 is  transitive) by L115 , L75 , L103;
thus L117: thesis by L116 , L38;
end;
theorem
L118: (for R3 being non  empty RelStr holds (R3 is  irreflexive  transitive implies R3 is  asymmetric))
proof
let R3 being non  empty RelStr;
set D6 = (the InternalRel of R3);
assume L119: (R3 is  irreflexive & R3 is  transitive);
L120: (D6 is  irreflexive & D6 is  transitive) by L119 , L49 , L103;
thus L121: thesis by L120 , NECKLACE:def 4;
end;
theorem
L122: (for R3 being non  empty RelStr holds (R3 is  asymmetric implies R3 is  irreflexive))
proof
let R3 being non  empty RelStr;
set D7 = (the InternalRel of R3);
assume L123: R3 is  asymmetric;
L124: D7 is  asymmetric by L123 , NECKLACE:def 4;
thus L125: thesis by L124 , L49;
end;
begin
definition
let R3 being non  empty RelStr;
attr R3 is  SubQuasiOrdered
means
:L126: R3 is  SubReFlexive  transitive;
end;
notation
let R3 being non  empty RelStr;
synonym R3 is  SubPreOrdered for R3 is  SubQuasiOrdered;
end;
definition
let R3 being non  empty RelStr;
attr R3 is  QuasiOrdered
means
:L129: R3 is  reflexive  transitive;
end;
notation
let R3 being non  empty RelStr;
synonym R3 is  PreOrdered for R3 is  QuasiOrdered;
end;
theorem
L132: (for R3 being non  empty RelStr holds (R3 is  QuasiOrdered implies R3 is  SubQuasiOrdered))
proof
let R3 being non  empty RelStr;
set D8 = (the InternalRel of R3);
set D9 = (the carrier of R3);
assume L133: R3 is  QuasiOrdered;
L134: R3 is  transitive by L133 , L129;
L135: R3 is  reflexive by L133 , L129;
L136: D8 is_reflexive_in D9 by L135 , ORDERS_2:def 2;
L137: D8 is  reflexive by L136 , PARTIT_2:21;
thus L138: thesis by L137 , L134 , L126 , L38;
end;
registration
cluster  QuasiOrdered ->  SubQuasiOrdered for non  empty non  empty non  empty non  empty OrthoRelStr;
correctness by L132;
end;
registration
cluster ( TrivOrthoRelStr ) ->  QuasiOrdered;
coherence by L129;
end;
definition
let R4 being non  empty OrthoRelStr;
attr R4 is  QuasiPure
means
:L141: R4 is  Dneg  QuasiOrdered;
end;
registration
cluster  QuasiPure  Dneg  QuasiOrdered  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence
proof
L143: ( TrivOrthoRelStr ) is  QuasiPure by L141;
thus L144: thesis by L143;
end;
end;
registration
cluster ( TrivOrthoRelStr ) ->  QuasiPure;
coherence by L141;
end;
definition
mode QuasiPureOrthoRelStr
 is  QuasiPure non  empty OrthoRelStr;
end;
definition
let R4 being non  empty OrthoRelStr;
attr R4 is  PartialOrdered
means
:L148: R4 is  reflexive  antisymmetric  transitive;
end;
registration
cluster  PartialOrdered ->  reflexive  antisymmetric  transitive for non  empty non  empty non  empty non  empty OrthoRelStr;
coherence by L148;
cluster  reflexive  antisymmetric  transitive ->  PartialOrdered for non  empty non  empty non  empty non  empty OrthoRelStr;
coherence by L148;
end;
definition
let R4 being non  empty OrthoRelStr;
attr R4 is  Pure
means
:L151: R4 is  Dneg  PartialOrdered;
end;
registration
cluster  Pure  Dneg  PartialOrdered  strict for non  empty non  empty non  empty non  empty OrthoRelStr;
existence
proof
L153: ( TrivOrthoRelStr ) is  Pure by L151;
thus L154: thesis by L153;
end;
end;
registration
cluster ( TrivOrthoRelStr ) ->  Pure;
coherence by L151;
end;
definition
mode PureOrthoRelStr
 is  Pure non  empty OrthoRelStr;
end;
definition
let R4 being non  empty OrthoRelStr;
attr R4 is  StrictPartialOrdered
means
:L158: R4 is  asymmetric  transitive;
end;
notation
let R4 being non  empty OrthoRelStr;
synonym R4 is  StrictOrdered for R4 is  StrictPartialOrdered;
end;
theorem
L161: (for R4 being non  empty OrthoRelStr holds (R4 is  StrictPartialOrdered implies R4 is  irreflexive))
proof
let R4 being non  empty OrthoRelStr;
assume L162: R4 is  StrictPartialOrdered;
L163: R4 is  asymmetric  transitive by L162 , L158;
thus L164: thesis by L163 , L122;
end;
registration
cluster  StrictPartialOrdered ->  irreflexive for non  empty non  empty non  empty non  empty OrthoRelStr;
coherence by L161;
end;
registration
cluster  StrictPartialOrdered ->  irreflexive for non  empty non  empty non  empty non  empty OrthoRelStr;
coherence;
end;
registration
cluster ( TrivAsymOrthoRelStr ) ->  irreflexive  StrictPartialOrdered;
coherence by L158;
end;
registration
cluster  irreflexive  StrictPartialOrdered for non  empty  strict non  empty  strict non  empty  strict non  empty  strict OrthoRelStr;
existence
proof
L168: ( TrivAsymOrthoRelStr ) is  StrictPartialOrdered;
thus L169: thesis by L168;
end;
end;
theorem
L171: (for R5 being  QuasiOrdered non  empty OrthoRelStr holds (R5 is  antisymmetric implies R5 is  PartialOrdered))
proof
let R5 being  QuasiOrdered non  empty OrthoRelStr;
assume L172: R5 is  antisymmetric;
L173: (R5 is  reflexive & R5 is  transitive) by L129;
thus L174: thesis by L173 , L172;
end;
registration
cluster  PartialOrdered ->  reflexive  transitive  antisymmetric for non  empty non  empty non  empty non  empty OrthoRelStr;
correctness;
end;
definition
let C15 being non  empty RelStr;
let C16 being (UnOp of (the carrier of C15));
attr C16 is  Orderinvolutive
means
:L176: C16 is  involutive  antitone;
end;
definition
let C17 being non  empty OrthoRelStr;
attr C17 is  OrderInvolutive
means
:L178: (the Compl of C17) is  Orderinvolutive;
end;
theorem
L180: (the Compl of ( TrivOrthoRelStr )) is  Orderinvolutive
proof
set D10 = ( TrivOrthoRelStr );
set D11 = (the Compl of D10);
reconsider D12 = ( {} ) as (Element of D10) by CARD_1:49 , TARSKI:def 1;
L181: D11 is  antitone  antitone  antitone  antitone (Function of D10 , D10)
proof
reconsider D13 = D11 as (Function of D10 , D10);
L182: (for B13 , B14 being (Element of D10) holds (B13 <= B14 implies (for B15 , B16 being (Element of D10) holds ((B15 = ( D13 . B13 ) & B16 = ( D13 . B14 )) implies B15 >= B16))))
proof
let C18 , C19 being (Element of D10);
set D14 = ( D13 . C18 );
L183: D14 = D12 by CARD_1:49 , FUNCT_2:50;
L184: ( D13 . C19 ) <= D14 by L183 , CARD_1:49 , FUNCT_2:50;
thus L185: thesis by L184;
end;
thus L186: thesis by L182 , WAYBEL_0:def 5;
end;
thus L187: thesis by L181 , L176;
end;
registration
cluster ( TrivOrthoRelStr ) ->  OrderInvolutive;
coherence by L178 , L180;
end;
registration
cluster  OrderInvolutive  Pure  PartialOrdered for non  empty non  empty non  empty non  empty OrthoRelStr;
existence
proof
take ( TrivOrthoRelStr );
thus L189: thesis;
end;
end;
definition
mode PreOrthoPoset
 is  OrderInvolutive  Pure  PartialOrdered non  empty OrthoRelStr;
end;
definition
let C20 being non  empty RelStr;
let C21 being (UnOp of (the carrier of C20));
pred C21 QuasiOrthoComplement_on C20
means
:L192: (C21 is  Orderinvolutive & (for B17 being (Element of C20) holds ( ex_sup_of { B17 , ( C21 . B17 ) } , C20 &  ex_inf_of { B17 , ( C21 . B17 ) } , C20)))
;end;
definition
let C22 being non  empty OrthoRelStr;
attr C22 is  QuasiOrthocomplemented
means
:L194: (ex B18 being (Function of C22 , C22) st (B18 = (the Compl of C22) & B18 QuasiOrthoComplement_on C22));
end;
L196: ( id { ( {} ) } ) = { [ ( {} ) , ( {} ) ] } by SYSREL:13;
theorem
L197: ( TrivOrthoRelStr ) is  QuasiOrthocomplemented
proof
set D15 = ( TrivOrthoRelStr );
set D16 = (the Compl of D15);
set D17 = (the carrier of D15);
L198: D16 QuasiOrthoComplement_on D15
proof
reconsider D18 = D16 as (Function of D15 , D15);
L199: (for B19 being (Element of D17) holds { B19 , ( ( op1 ) . B19 ) } = { B19 })
proof
let C23 being (Element of D17);
L200: C23 = ( ( op1 ) . C23 ) by L196 , CARD_1:49 , FUNCT_1:17 , PARTIT_2:19;
thus L201: thesis by L200 , ENUMSET1:29;
end;
L202: (for B20 being (Element of D15) holds (( sup { B20 , ( D18 . B20 ) } ) = B20 & ( inf { B20 , ( D18 . B20 ) } ) = B20 &  ex_sup_of { B20 , ( D18 . B20 ) } , D15 &  ex_inf_of { B20 , ( D18 . B20 ) } , D15))
proof
let C24 being (Element of D15);
L203: { C24 , ( D18 . C24 ) } = { C24 } by L199;
thus L204: thesis by L203 , YELLOW_0:38 , YELLOW_0:39;
end;
thus L205: thesis by L202 , L192 , L180;
end;
thus L206: thesis by L198 , L194;
end;
definition
let C25 being non  empty RelStr;
let C26 being (UnOp of (the carrier of C25));
pred C26 OrthoComplement_on C25
means
:L207: (C26 is  Orderinvolutive & (for B21 being (Element of C25) holds ( ex_sup_of { B21 , ( C26 . B21 ) } , C25 &  ex_inf_of { B21 , ( C26 . B21 ) } , C25 & ( "\/" ({ B21 , ( C26 . B21 ) } , C25) ) is_maximum_of (the carrier of C25) & ( "/\" ({ B21 , ( C26 . B21 ) } , C25) ) is_minimum_of (the carrier of C25))))
;end;
definition
let C27 being non  empty OrthoRelStr;
attr C27 is  Orthocomplemented
means
:L209: (ex B22 being (Function of C27 , C27) st (B22 = (the Compl of C27) & B22 OrthoComplement_on C27));
end;
theorem
L211: (for B23 being non  empty OrthoRelStr holds (for B24 being (UnOp of (the carrier of B23)) holds (B24 OrthoComplement_on B23 implies B24 QuasiOrthoComplement_on B23)))
proof
let C28 being non  empty OrthoRelStr;
let C29 being (UnOp of (the carrier of C28));
assume L212: C29 OrthoComplement_on C28;
L213: ((for B25 being (Element of C28) holds ( ex_sup_of { B25 , ( C29 . B25 ) } , C28 &  ex_inf_of { B25 , ( C29 . B25 ) } , C28)) & C29 is  Orderinvolutive) by L212 , L207;
thus L214: thesis by L213 , L192;
end;
theorem
L215: ( TrivOrthoRelStr ) is  Orthocomplemented
proof
set D19 = ( TrivOrthoRelStr );
set D20 = (the Compl of D19);
set D21 = (the carrier of D19);
reconsider D22 = D20 as (Function of D19 , D19);
L216: D22 OrthoComplement_on D19
proof
reconsider D23 = D20 as (Function of D19 , D19);
L217: (for B26 being (Element of D21) holds { B26 , ( ( op1 ) . B26 ) } = { B26 })
proof
let C30 being (Element of D21);
L218: C30 = ( ( op1 ) . C30 ) by L196 , CARD_1:49 , FUNCT_1:17 , PARTIT_2:19;
thus L219: thesis by L218 , ENUMSET1:29;
end;
L220: (for B27 being (Element of D19) holds ( ex_sup_of { B27 , ( D23 . B27 ) } , D19 &  ex_inf_of { B27 , ( D23 . B27 ) } , D19 & ( sup { B27 , ( D23 . B27 ) } ) = B27 & ( inf { B27 , ( D23 . B27 ) } ) = B27))
proof
let C31 being (Element of D19);
L221: { C31 , ( D23 . C31 ) } = { C31 } by L217;
thus L222: thesis by L221 , YELLOW_0:38 , YELLOW_0:39;
end;
L223: (for B28 being (Element of D19) holds (( sup { B28 , ( D23 . B28 ) } ) in { B28 , ( D23 . B28 ) } & ( inf { B28 , ( D23 . B28 ) } ) in { B28 , ( D23 . B28 ) }))
proof
let C32 being (Element of D19);
L224: (( sup { C32 , ( D23 . C32 ) } ) = C32 & ( inf { C32 , ( D23 . C32 ) } ) = C32) by L220;
thus L225: thesis by L224 , TARSKI:def 2;
end;
L226: (for B29 being (Element of D19) holds (B29 is_maximum_of { B29 , ( D23 . B29 ) } & B29 is_minimum_of { B29 , ( D23 . B29 ) }))
proof
let C33 being (Element of D19);
L227: (( sup { C33 , ( D23 . C33 ) } ) = C33 &  ex_sup_of { C33 , ( D23 . C33 ) } , D19) by L220;
L228: (( sup { C33 , ( D23 . C33 ) } ) in { C33 , ( D23 . C33 ) } & ( inf { C33 , ( D23 . C33 ) } ) = C33) by L220 , L223;
thus L229: thesis by L228 , L227 , L220 , WAYBEL_1:def 6 , WAYBEL_1:def 7;
end;
L230: (for B30 being (Element of D19) holds (( sup { B30 , ( D23 . B30 ) } ) is_maximum_of D21 & ( inf { B30 , ( D23 . B30 ) } ) is_minimum_of D21))
proof
let C34 being (Element of D19);
reconsider D24 = C34 as (Element of D21);
L231: { D24 , ( D23 . D24 ) } = { D24 } by L217;
L232: { D24 , ( D23 . D24 ) } = D21 by L231 , CARD_1:49 , TARSKI:def 1;
L233: (C34 is_maximum_of { C34 , ( D23 . C34 ) } & C34 is_minimum_of { C34 , ( D23 . C34 ) }) by L226;
thus L234: thesis by L233 , L220 , L232;
end;
thus L235: thesis by L230 , L220 , L207 , L180;
end;
thus L236: thesis by L216 , L209;
end;
registration
cluster ( TrivOrthoRelStr ) ->  QuasiOrthocomplemented  Orthocomplemented;
coherence by L197 , L215;
end;
registration
cluster  Orthocomplemented  QuasiOrthocomplemented  PartialOrdered for non  empty non  empty non  empty non  empty OrthoRelStr;
correctness
proof
take ( TrivOrthoRelStr );
thus L238: thesis;
end;
end;
definition
mode QuasiOrthoPoset
 is  QuasiOrthocomplemented  PartialOrdered non  empty OrthoRelStr;
mode OrthoPoset
 is  Orthocomplemented  PartialOrdered non  empty OrthoRelStr;
end;
