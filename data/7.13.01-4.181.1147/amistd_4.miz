:: Input and Output of Instructions
::  by Artur Korni{\l}owicz
::
:: Received May 8, 2001
:: Copyright (c) 2001-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies SETFAM_1, XBOOLE_0, AMI_1, FSM_1, CAT_1, FUNCT_1, RELAT_1,
      STRUCT_0, SUBSET_1, FUNCT_4, FUNCOP_1, GOBOARD5, FRECHET, AMISTD_1,
      ZFMISC_1, NUMBERS, CARD_1, GLIB_000, AMISTD_2, CARD_5, NET_1, TARSKI,
      AMISTD_4, ORDINAL1, UNIALG_1, NAT_1, QUANTAL1, GOBRD13, MEMSTR_0,
      COMPOS_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, RELAT_1, FUNCT_1, ZFMISC_1,
      XTUPLE_0, MCART_1, NUMBERS, FUNCOP_1, FUNCT_4, ORDINAL1, NAT_1, STRUCT_0,
      MEMSTR_0, COMPOS_0, COMPOS_1, EXTPRO_1, FUNCT_7, MEASURE6, AMISTD_1,
      AMISTD_2;
 constructors ZFMISC_1, AMISTD_2, NAT_1, PRE_POLY, EXTPRO_1, AMISTD_1,
      DOMAIN_1, FUNCT_7, FUNCT_4, MEMSTR_0, RELSET_1, MEASURE6, PBOOLE,
      XTUPLE_0;
 registrations SETFAM_1, FUNCOP_1, STRUCT_0, AMISTD_1, AMISTD_2, ZFMISC_1,
      CARD_1, RELSET_1, ORDINAL1, COMPOS_1, EXTPRO_1, ORDINAL6, FUNCT_7,
      FUNCT_4, MEMSTR_0, MEASURE6, COMPOS_0, XTUPLE_0;
 requirements SUBSET, BOOLE;
 definitions EXTPRO_1, COMPOS_1, AMISTD_1, XBOOLE_0, FUNCOP_1, MEMSTR_0,
      XTUPLE_0;
 theorems FUNCT_7, TARSKI, AMISTD_1, SUBSET_1, FUNCOP_1, ZFMISC_1,
      FUNCT_1, XBOOLE_0, XBOOLE_1, PARTFUN1,
      ORDINAL1, STRUCT_0, MEMSTR_0, MEASURE6, XTUPLE_0;
 schemes SUBSET_1;

begin
definition
let C1 being  with_zero set;
let C2 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C1;
let C3 being (State of C2);
let C4 being (Object of C2);
let C5 being (Element of ( Values C4 ));
redefine func C3 +* (C4 , C5) -> (State of C2);

coherence
proof
L1: ( dom C3 ) = (the carrier of C2) by PARTFUN1:def 2;
L2: ( C3 +* (C4 , C5) ) = ( C3 +* ( C4 .--> C5 ) ) by L1 , FUNCT_7:def 3;
thus L3: thesis by L2;
end;
end;
theorem
L5: (for R1 being  with_zero set holds (for B1 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B2 being (Instruction of B1) holds (for B3 being (State of B1) holds (for B4 being (Object of B1) holds (for B5 being (Element of ( Values B4 )) holds ((B2 is  sequential & B4 <> ( IC B1 )) implies ( IC ( Exec (B2 , B3) ) ) = ( IC ( Exec (B2 , ( B3 +* (B4 , B5) )) ) ))))))))
proof
let R1 being  with_zero set;
let C6 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C7 being (Instruction of C6);
let C8 being (State of C6);
let C9 being (Object of C6);
let C10 being (Element of ( Values C9 ));
assume that
L6: (for B6 being (State of C6) holds ( ( Exec (C7 , B6) ) . ( IC C6 ) ) = ( succ ( IC B6 ) ))
and
L7: C9 <> ( IC C6 );
thus L8: ( IC ( Exec (C7 , C8) ) ) = ( succ ( IC C8 ) ) by L6
.= ( succ ( IC ( C8 +* (C9 , C10) ) ) ) by L7 , FUNCT_7:32
.= ( IC ( Exec (C7 , ( C8 +* (C9 , C10) )) ) ) by L6;
end;
theorem
L9: (for R1 being  with_zero set holds (for B7 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B8 being (Instruction of B7) holds (for B9 being (State of B7) holds (for B10 being (Object of B7) holds (for B11 being (Element of ( Values B10 )) holds ((B8 is  sequential & B10 <> ( IC B7 )) implies ( IC ( Exec (B8 , ( B9 +* (B10 , B11) )) ) ) = ( IC ( ( Exec (B8 , B9) ) +* (B10 , B11) ) ))))))))
proof
let R1 being  with_zero set;
let C11 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C12 being (Instruction of C11);
let C13 being (State of C11);
let C14 being (Object of C11);
let C15 being (Element of ( Values C14 ));
assume that
L10: C12 is  sequential
and
L11: C14 <> ( IC C11 );
thus L12: ( IC ( Exec (C12 , ( C13 +* (C14 , C15) )) ) ) = ( IC ( Exec (C12 , C13) ) ) by L10 , L11 , L5
.= ( IC ( ( Exec (C12 , C13) ) +* (C14 , C15) ) ) by L11 , FUNCT_7:32;
end;
begin
definition
let C16 being COM-Struct;
attr C16 is  with_non_trivial_Instructions
means
:L13: (the InstructionsF of C16) is non  trivial;
end;
definition
let C17 being  with_zero set;
let C18 being non  empty  with_non-empty_values AMI-Struct over C17;
attr C18 is  with_non_trivial_ObjectKinds
means
:L15: (for B12 being (Object of C18) holds ( Values B12 ) is non  trivial);
end;
registration
let C19 being  with_zero set;
cluster ( STC C19 ) ->  with_non_trivial_ObjectKinds;
coherence
proof
let C20 being (Object of ( STC C19 ));
L17: (the carrier of ( STC C19 )) = { ( 0 ) } by AMISTD_1:def 7;
L18: (the Object-Kind of ( STC C19 )) = ( ( 0 ) .--> ( 0 ) ) by AMISTD_1:def 7;
per cases  by L17;
suppose L19: C20 in { ( 0 ) };

L20: (the ValuesF of ( STC C19 )) = ( C19 --> ( NAT ) ) by AMISTD_1:def 7;
L21: ( 0 ) in C19 by MEASURE6:def 2;
L22: ( the_Values_of ( STC C19 ) ) = ( ( 0 ) .--> ( NAT ) ) by L21 , L18 , L20 , FUNCOP_1:89;
L23: ( Values C20 ) = ( ( ( 0 ) .--> ( NAT ) ) . C20 ) by L22
.= ( NAT ) by L19 , FUNCOP_1:7;
thus L24: thesis by L23;
end;
end;
end;
registration
let C21 being  with_zero set;
cluster  with_explicit_jumps  IC-relocable  with_non_trivial_ObjectKinds  with_non_trivial_Instructions for  standard  halting  IC-Ins-separated non  empty  with_non-empty_values  standard  halting  IC-Ins-separated non  empty  with_non-empty_values  standard  halting  IC-Ins-separated non  empty  with_non-empty_values  standard  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C21;
existence
proof
take ( STC C21 );
L27: ([ 1 , ( 0 ) , ( 0 ) ] in { [ 1 , ( 0 ) , ( 0 ) ] , [ ( 0 ) , ( 0 ) , ( 0 ) ] } & [ ( 0 ) , ( 0 ) , ( 0 ) ] in { [ 1 , ( 0 ) , ( 0 ) ] , [ ( 0 ) , ( 0 ) , ( 0 ) ] }) by TARSKI:def 2;
L28: ((the InstructionsF of ( STC C21 )) = { [ ( 0 ) , ( 0 ) , ( 0 ) ] , [ 1 , ( 0 ) , ( 0 ) ] } & [ 1 , ( 0 ) , ( 0 ) ] <> [ ( 0 ) , ( 0 ) , ( 0 ) ]) by AMISTD_1:def 7 , XTUPLE_0:3;
L29: (the InstructionsF of ( STC C21 )) is non  trivial by L28 , L27 , ZFMISC_1:def 10;
thus L30: thesis by L29 , L13;
end;
end;
registration
let C22 being  with_zero set;
cluster ( STC C22 ) ->  with_non_trivial_Instructions;
coherence
proof
L32: [ ( 0 ) , ( 0 ) , ( 0 ) ] <> [ 1 , ( 0 ) , ( 0 ) ] by XTUPLE_0:3;
L33: (the InstructionsF of ( STC C22 )) = { [ ( 0 ) , ( 0 ) , ( 0 ) ] , [ 1 , ( 0 ) , ( 0 ) ] } by AMISTD_1:def 7;
L34: ([ ( 0 ) , ( 0 ) , ( 0 ) ] in (the InstructionsF of ( STC C22 )) & [ 1 , ( 0 ) , ( 0 ) ] in (the InstructionsF of ( STC C22 ))) by L33 , TARSKI:def 2;
thus L35: (the InstructionsF of ( STC C22 )) is non  trivial by L34 , L32 , ZFMISC_1:def 10;
end;
end;
registration
let C23 being  with_zero set;
cluster  with_non_trivial_ObjectKinds  with_non_trivial_Instructions  IC-Ins-separated for non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values AMI-Struct over C23;
existence
proof
take ( STC C23 );
thus L37: thesis;
end;
end;
registration
let C24 being  with_zero set;
let C25 being  with_non_trivial_ObjectKinds non  empty  with_non-empty_values AMI-Struct over C24;
let C26 being (Object of C25);
cluster ( Values C26 ) -> non  trivial;
coherence by L15;
end;
registration
let C27 being  with_zero set;
let C28 being  with_non_trivial_Instructions  with_non-empty_values AMI-Struct over C27;
cluster (the InstructionsF of C28) -> non  trivial;
coherence by L13;
end;
registration
let C29 being  with_zero set;
let C30 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C29;
cluster ( Values ( IC C30 ) ) -> non  trivial;
coherence by MEMSTR_0:def 6;
end;
definition
let C31 being  with_zero set;
let C32 being non  empty  with_non-empty_values AMI-Struct over C31;
let C33 being (Instruction of C32);
func Output C33 -> (Subset of C32) means 
:L42: (for B13 being (Object of C32) holds (B13 in it iff (ex B14 being (State of C32) st ( B14 . B13 ) <> ( ( Exec (C33 , B14) ) . B13 ))));
existence
proof
defpred S1[ set ] means (ex B15 being (State of C32) st ( B15 . $1 ) <> ( ( Exec (C33 , B15) ) . $1 ));
consider C34 being (Subset of C32) such that L43: (for B16 being set holds (B16 in C34 iff (B16 in (the carrier of C32) & S1[ B16 ]))) from SUBSET_1:sch 1;
take C34;
thus L44: thesis by L43;
end;
uniqueness
proof
defpred S2[ set ] means (ex B17 being (State of C32) st ( B17 . $1 ) <> ( ( Exec (C33 , B17) ) . $1 ));
let C35 , C36 being (Subset of C32);
assume that
L45: (for B18 being (Object of C32) holds (B18 in C35 iff S2[ B18 ]))
and
L46: (for B19 being (Object of C32) holds (B19 in C36 iff S2[ B19 ]));
thus L47: C35 = C36 from SUBSET_1:sch 2(L45 , L46);
end;
end;
definition
let C37 being  with_zero set;
let C38 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C37;
let C39 being (Instruction of C38);
func Out_\_Inp C39 -> (Subset of C38) means 
:L49: (for B20 being (Object of C38) holds (B20 in it iff (for B21 being (State of C38) holds (for B22 being (Element of ( Values B20 )) holds ( Exec (C39 , B21) ) = ( Exec (C39 , ( B21 +* (B20 , B22) )) )))));
existence
proof
defpred S3[ set ] means (ex B23 being (Object of C38) st (B23 = $1 & (for B24 being (State of C38) holds (for B25 being (Element of ( Values B23 )) holds ( Exec (C39 , B24) ) = ( Exec (C39 , ( B24 +* (B23 , B25) )) )))));
consider C40 being (Subset of C38) such that L50: (for B26 being set holds (B26 in C40 iff (B26 in (the carrier of C38) & S3[ B26 ]))) from SUBSET_1:sch 1;
take C40;
let C41 being (Object of C38);
thus L51:now
assume L52: C41 in C40;
L53: S3[ C41 ] by L52 , L50;
thus L54: (for B27 being (State of C38) holds (for B28 being (Element of ( Values C41 )) holds ( Exec (C39 , B27) ) = ( Exec (C39 , ( B27 +* (C41 , B28) )) ))) by L53;
end;
thus L55: thesis by L50;
end;
uniqueness
proof
defpred S4[ (Object of C38) ] means (for B29 being (State of C38) holds (for B30 being (Element of ( Values $1 )) holds ( Exec (C39 , B29) ) = ( Exec (C39 , ( B29 +* ($1 , B30) )) )));
let C42 , C43 being (Subset of C38);
assume that
L56: (for B31 being (Object of C38) holds (B31 in C42 iff S4[ B31 ]))
and
L57: (for B32 being (Object of C38) holds (B32 in C43 iff S4[ B32 ]));
thus L58: C42 = C43 from SUBSET_1:sch 2(L56 , L57);
end;
func Out_U_Inp C39 -> (Subset of C38) means 
:L59: (for B33 being (Object of C38) holds (B33 in it iff (ex B34 being (State of C38) st (ex B35 being (Element of ( Values B33 )) st ( Exec (C39 , ( B34 +* (B33 , B35) )) ) <> ( ( Exec (C39 , B34) ) +* (B33 , B35) )))));
existence
proof
defpred S5[ set ] means (ex B36 being (Object of C38) st (B36 = $1 & (ex B37 being (State of C38) st (ex B38 being (Element of ( Values B36 )) st ( Exec (C39 , ( B37 +* (B36 , B38) )) ) <> ( ( Exec (C39 , B37) ) +* (B36 , B38) )))));
consider C44 being (Subset of C38) such that L60: (for B39 being set holds (B39 in C44 iff (B39 in (the carrier of C38) & S5[ B39 ]))) from SUBSET_1:sch 1;
take C44;
let C45 being (Object of C38);
thus L61:now
assume L62: C45 in C44;
L63: S5[ C45 ] by L62 , L60;
thus L64: (ex B40 being (State of C38) st (ex B41 being (Element of ( Values C45 )) st ( Exec (C39 , ( B40 +* (C45 , B41) )) ) <> ( ( Exec (C39 , B40) ) +* (C45 , B41) ))) by L63;
end;
thus L65: thesis by L60;
end;
uniqueness
proof
defpred S6[ (Object of C38) ] means (ex B42 being (State of C38) st (ex B43 being (Element of ( Values $1 )) st ( Exec (C39 , ( B42 +* ($1 , B43) )) ) <> ( ( Exec (C39 , B42) ) +* ($1 , B43) )));
let C46 , C47 being (Subset of C38);
assume that
L66: (for B44 being (Object of C38) holds (B44 in C46 iff S6[ B44 ]))
and
L67: (for B45 being (Object of C38) holds (B45 in C47 iff S6[ B45 ]));
thus L68: C46 = C47 from SUBSET_1:sch 2(L66 , L67);
end;
end;
definition
let C48 being  with_zero set;
let C49 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C48;
let C50 being (Instruction of C49);
func Input C50 -> (Subset of C49) equals 
( ( Out_U_Inp C50 ) \ ( Out_\_Inp C50 ) );
coherence;
end;
theorem
L71: (for R1 being  with_zero set holds (for B46 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B47 being (Instruction of B46) holds ( Out_\_Inp B47 ) c= ( Output B47 ))))
proof
let R1 being  with_zero set;
let C51 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C52 being (Instruction of C51);
L72: (for B48 being (Object of C51) holds (B48 in ( Out_\_Inp C52 ) implies B48 in ( Output C52 )))
proof
let C53 being (Object of C51);
set D1 = the (State of C51);
set D2 = the (Element of ( Values C53 ));
consider C54 being set such that L73: C54 in ( Values C53 ) and L74: C54 <> D2 by SUBSET_1:48;
reconsider D3 = C54 as (Element of ( Values C53 )) by L73;
set D4 = ( D1 +* (C53 , D3) );
L75: ( dom D4 ) = (the carrier of C51) by PARTFUN1:def 2;
L76: ( dom D1 ) = (the carrier of C51) by PARTFUN1:def 2;
assume L77: (not thesis);
L78: ( ( Exec (C52 , ( D4 +* (C53 , D2) )) ) . C53 ) = ( ( D4 +* (C53 , D2) ) . C53 ) by L77 , L42
.= D2 by L75 , FUNCT_7:31;
L79: ( ( Exec (C52 , D4) ) . C53 ) = ( D4 . C53 ) by L77 , L42
.= D3 by L76 , FUNCT_7:31;
thus L80: contradiction by L79 , L77 , L74 , L78 , L49;
end;
thus L81: thesis by L72 , SUBSET_1:2;
end;
theorem
L82: (for R1 being  with_zero set holds (for B49 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B50 being (Instruction of B49) holds ( Output B50 ) c= ( Out_U_Inp B50 ))))
proof
let R1 being  with_zero set;
let C55 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C56 being (Instruction of C55);
L83: (for B51 being (Object of C55) holds (B51 in ( Output C56 ) implies B51 in ( Out_U_Inp C56 )))
proof
let C57 being (Object of C55);
assume L84: (not thesis);
L85: (for B52 being (State of C55) holds ( B52 . C57 ) = ( ( Exec (C56 , B52) ) . C57 ))
proof
let C58 being (State of C55);
reconsider D5 = ( C58 . C57 ) as (Element of ( Values C57 )) by MEMSTR_0:77;
L86: ( Exec (C56 , ( C58 +* (C57 , D5) )) ) = ( ( Exec (C56 , C58) ) +* (C57 , D5) ) by L84 , L59;
L87: ( dom ( Exec (C56 , C58) ) ) = (the carrier of C55) by PARTFUN1:def 2;
thus L88: ( C58 . C57 ) = ( ( ( Exec (C56 , C58) ) +* (C57 , D5) ) . C57 ) by L87 , FUNCT_7:31
.= ( ( Exec (C56 , C58) ) . C57 ) by L86 , FUNCT_7:35;
end;
thus L89: contradiction by L85 , L84 , L42;
end;
thus L90: thesis by L83 , SUBSET_1:2;
end;
theorem
L91: (for R1 being  with_zero set holds (for B53 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B54 being (Instruction of B53) holds ( Out_\_Inp B54 ) = ( ( Output B54 ) \ ( Input B54 ) ))))
proof
let R1 being  with_zero set;
let C59 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C60 being (Instruction of C59);
L92: (for B55 being (Object of C59) holds (B55 in ( Out_\_Inp C60 ) iff B55 in ( ( Output C60 ) \ ( Input C60 ) )))
proof
let C61 being (Object of C59);
thus L93:now
L94: ( Out_\_Inp C60 ) c= ( Output C60 ) by L71;
assume L95: C61 in ( Out_\_Inp C60 );
L96: ( Out_\_Inp C60 ) misses ( Input C60 ) by XBOOLE_1:85;
L97: (not C61 in ( Input C60 )) by L96 , L95 , XBOOLE_0:3;
thus L98: C61 in ( ( Output C60 ) \ ( Input C60 ) ) by L97 , L95 , L94 , XBOOLE_0:def 5;
end;
assume L99: C61 in ( ( Output C60 ) \ ( Input C60 ) );
L100: (not C61 in ( Input C60 )) by L99 , XBOOLE_0:def 5;
per cases  by L100 , XBOOLE_0:def 5;
suppose L101: (not C61 in ( Out_U_Inp C60 ));

L102: ( Output C60 ) c= ( Out_U_Inp C60 ) by L82;
L103: (not C61 in ( Output C60 )) by L102 , L101;
thus L104: thesis by L103 , L99 , XBOOLE_0:def 5;
end;
suppose L105: C61 in ( Out_\_Inp C60 );

thus L106: thesis by L105;
end;
end;
thus L108: thesis by L92 , SUBSET_1:3;
end;
theorem
L109: (for R1 being  with_zero set holds (for B56 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B57 being (Instruction of B56) holds ( Out_U_Inp B57 ) = ( ( Output B57 ) \/ ( Input B57 ) ))))
proof
let R1 being  with_zero set;
let C62 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C63 being (Instruction of C62);
L110: (for B58 being (Object of C62) holds (B58 in ( Out_U_Inp C63 ) implies B58 in ( ( Output C63 ) \/ ( Input C63 ) )))
proof
let C64 being (Object of C62);
assume that
L111: C64 in ( Out_U_Inp C63 );
L112: (C64 in ( Input C63 ) or C64 in ( Output C63 ))
proof
assume L113: (not C64 in ( Input C63 ));
per cases  by L113 , XBOOLE_0:def 5;
suppose L114: (not C64 in ( Out_U_Inp C63 ));

thus L115: thesis by L114 , L111;
end;
suppose L116: C64 in ( Out_\_Inp C63 );

L117: ( Out_\_Inp C63 ) c= ( Output C63 ) by L71;
thus L118: thesis by L117 , L116;
end;
end;
thus L120: thesis by L112 , XBOOLE_0:def 3;
end;
thus L121: ( Out_U_Inp C63 ) c= ( ( Output C63 ) \/ ( Input C63 ) ) by L110 , SUBSET_1:2;
L122: (( Output C63 ) c= ( Out_U_Inp C63 ) & ( Input C63 ) c= ( Out_U_Inp C63 )) by L82 , XBOOLE_1:36;
thus L123: thesis by L122 , XBOOLE_1:8;
end;
theorem
L124: (for R1 being  with_zero set holds (for B59 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B60 being (Instruction of B59) holds (for B61 being (Object of B59) holds (( Values B61 ) is  trivial implies (not B61 in ( Out_U_Inp B60 )))))))
proof
let R1 being  with_zero set;
let C65 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C66 being (Instruction of C65);
let C67 being (Object of C65);
assume that
L125: ( Values C67 ) is  trivial;
assume L126: C67 in ( Out_U_Inp C66 );
consider C68 being (State of C65), C69 being (Element of ( Values C67 )) such that L127: ( Exec (C66 , ( C68 +* (C67 , C69) )) ) <> ( ( Exec (C66 , C68) ) +* (C67 , C69) ) by L126 , L59;
L128: ( C68 . C67 ) is (Element of ( Values C67 )) by MEMSTR_0:77;
L129: ( C68 . C67 ) = C69 by L128 , L125 , ZFMISC_1:def 10;
L130: ( Exec (C66 , ( C68 +* (C67 , C69) )) ) = ( Exec (C66 , C68) ) by L129 , FUNCT_7:35;
L131: ( dom ( Exec (C66 , C68) ) ) = (the carrier of C65) by PARTFUN1:def 2;
L132: (for B62 being set holds (B62 in (the carrier of C65) implies ( ( ( Exec (C66 , C68) ) +* (C67 , C69) ) . B62 ) = ( ( Exec (C66 , C68) ) . B62 )))
proof
let C70 being set;
assume that
L133: C70 in (the carrier of C65);
per cases ;
suppose L134: C70 = C67;

L135: ( ( Exec (C66 , C68) ) . C67 ) is (Element of ( Values C67 )) by MEMSTR_0:77;
thus L136: ( ( ( Exec (C66 , C68) ) +* (C67 , C69) ) . C70 ) = C69 by L131 , L134 , FUNCT_7:31
.= ( ( Exec (C66 , C68) ) . C70 ) by L125 , L134 , L135 , ZFMISC_1:def 10;
end;
suppose L137: C70 <> C67;

thus L138: thesis by L137 , FUNCT_7:32;
end;
end;
L140: ( dom ( ( Exec (C66 , C68) ) +* (C67 , C69) ) ) = (the carrier of C65) by PARTFUN1:def 2;
thus L141: contradiction by L140 , L127 , L130 , L131 , L132 , FUNCT_1:2;
end;
theorem
L142: (for R1 being  with_zero set holds (for B63 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B64 being (Instruction of B63) holds (for B65 being (Object of B63) holds (( Values B65 ) is  trivial implies (not B65 in ( Input B64 )))))))
proof
let R1 being  with_zero set;
let C71 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C72 being (Instruction of C71);
let C73 being (Object of C71);
L143: ( Input C72 ) c= ( Out_U_Inp C72 ) by XBOOLE_1:36;
assume L144: ( Values C73 ) is  trivial;
thus L145: thesis by L144 , L143 , L124;
end;
theorem
L146: (for R1 being  with_zero set holds (for B66 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B67 being (Instruction of B66) holds (for B68 being (Object of B66) holds (( Values B68 ) is  trivial implies (not B68 in ( Output B67 )))))))
proof
let R1 being  with_zero set;
let C74 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C75 being (Instruction of C74);
let C76 being (Object of C74);
assume L147: ( Values C76 ) is  trivial;
L148: ( Output C75 ) c= ( Out_U_Inp C75 ) by L82;
thus L149: thesis by L148 , L147 , L124;
end;
theorem
L150: (for R1 being  with_zero set holds (for B69 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B70 being (Instruction of B69) holds (B70 is  halting iff ( Output B70 ) is  empty))))
proof
let R1 being  with_zero set;
let C77 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C78 being (Instruction of C77);
thus L151: (C78 is  halting implies ( Output C78 ) is  empty)
proof
assume L152: (for B71 being (State of C77) holds ( Exec (C78 , B71) ) = B71);
assume L153: (not thesis);
consider C79 being (Object of C77) such that L154: C79 in ( Output C78 ) by L153 , SUBSET_1:4;
L155: (ex B72 being (State of C77) st ( B72 . C79 ) <> ( ( Exec (C78 , B72) ) . C79 )) by L154 , L42;
thus L156: thesis by L155 , L152;
end;

assume L157: ( Output C78 ) is  empty;
let C80 being (State of C77);
assume L158: ( Exec (C78 , C80) ) <> C80;
L159: (( dom C80 ) = (the carrier of C77) & ( dom ( Exec (C78 , C80) ) ) = (the carrier of C77)) by PARTFUN1:def 2;
L160: (ex B73 being set st (B73 in (the carrier of C77) & ( ( Exec (C78 , C80) ) . B73 ) <> ( C80 . B73 ))) by L159 , L158 , FUNCT_1:2;
thus L161: contradiction by L160 , L157 , L42;
end;
theorem
L162: (for R1 being  with_zero set holds (for B74 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B75 being (Instruction of B74) holds (B75 is  halting implies ( Out_\_Inp B75 ) is  empty))))
proof
let R1 being  with_zero set;
let C81 being  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C82 being (Instruction of C81);
assume that
L163: C82 is  halting;
L164: ( Out_\_Inp C82 ) c= ( Output C82 ) by L71;
L165: ( Out_\_Inp C82 ) c= ( {} ) by L164 , L163 , L150;
thus L166: thesis by L165 , XBOOLE_1:3;
end;
theorem
L167: (for R1 being  with_zero set holds (for B76 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B77 being (Instruction of B76) holds (B77 is  halting implies ( Out_U_Inp B77 ) is  empty))))
proof
let R1 being  with_zero set;
let C83 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C84 being (Instruction of C83);
assume that
L168: (for B78 being (State of C83) holds ( Exec (C84 , B78) ) = B78);
assume L169: (not thesis);
consider C85 being (Object of C83) such that L170: C85 in ( Out_U_Inp C84 ) by L169 , SUBSET_1:4;
consider C86 being (State of C83), C87 being (Element of ( Values C85 )) such that L171: ( Exec (C84 , ( C86 +* (C85 , C87) )) ) <> ( ( Exec (C84 , C86) ) +* (C85 , C87) ) by L170 , L59;
L172: ( Exec (C84 , ( C86 +* (C85 , C87) )) ) = ( C86 +* (C85 , C87) ) by L168
.= ( ( Exec (C84 , C86) ) +* (C85 , C87) ) by L168;
thus L173: thesis by L172 , L171;
end;
theorem
L174: (for R1 being  with_zero set holds (for B79 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B80 being (Instruction of B79) holds (B80 is  halting implies ( Input B80 ) is  empty))))
proof
let R1 being  with_zero set;
let C88 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C89 being (Instruction of C88);
assume L175: C89 is  halting;
L176: ( Input C89 ) = ( ( {} ) \ ( Out_\_Inp C89 ) ) by L175 , L167
.= ( {} );
thus L177: thesis by L176;
end;
registration
let C90 being  with_zero set;
let C91 being  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C90;
let C92 being  halting (Instruction of C91);
cluster ( Input C92 ) ->  empty;
coherence by L174;
cluster ( Output C92 ) ->  empty;
coherence by L150;
cluster ( Out_U_Inp C92 ) ->  empty;
coherence by L167;
end;
registration
let C93 being  with_zero set;
cluster  halting  with_non_trivial_ObjectKinds  IC-Ins-separated for non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values AMI-Struct over C93;
existence
proof
take ( STC C93 );
thus L179: thesis;
end;
end;
registration
let C94 being  with_zero set;
let C95 being  halting  with_non_trivial_ObjectKinds  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C94;
let C96 being  halting (Instruction of C95);
cluster ( Out_\_Inp C96 ) ->  empty;
coherence by L162;
end;
registration
let R1 being  with_zero set;
cluster  with_non_trivial_Instructions  IC-Ins-separated for non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values non  empty  with_non-empty_values AMI-Struct over R1;
existence
proof
take ( STC R1 );
thus L182: thesis;
end;
end;
theorem
L184: (for R1 being  with_zero set holds (for B81 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B82 being (Instruction of B81) holds (B82 is  sequential implies (not ( IC B81 ) in ( Out_\_Inp B82 ))))))
proof
let R1 being  with_zero set;
let C97 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C98 being (Instruction of C97);
set D6 = the (State of C97);
set D7 = ( IC C97 );
reconsider D8 = ( succ ( IC D6 ) ) as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider D9 = D8 as (Element of ( Values D7 )) by MEMSTR_0:def 6;
set D10 = ( D6 +* (D7 , D9) );
assume L185: (for B83 being (State of C97) holds ( ( Exec (C98 , B83) ) . ( IC C97 ) ) = ( succ ( IC B83 ) ));
L186: (( ( Exec (C98 , D6) ) . D7 ) = ( succ ( IC D6 ) ) & ( ( Exec (C98 , D10) ) . D7 ) = ( succ ( IC D10 ) )) by L185;
L187: ( dom D6 ) = (the carrier of C97) by PARTFUN1:def 2;
L188: ( Exec (C98 , D6) ) <> ( Exec (C98 , D10) ) by L187 , L186 , FUNCT_7:31 , ORDINAL1:9;
thus L189: thesis by L188 , L49;
end;
theorem
L190: (for R1 being  with_zero set holds (for B84 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B85 being (Instruction of B84) holds ((ex B86 being (State of B84) st ( ( Exec (B85 , B86) ) . ( IC B84 ) ) <> ( IC B86 )) implies ( IC B84 ) in ( Output B85 ))))) by L42;
registration
let R1 being  with_zero set;
cluster  standard for  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
existence
proof
take ( STC R1 );
thus L191: thesis;
end;
end;
theorem
L193: (for R1 being  with_zero set holds (for B87 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B88 being (Instruction of B87) holds (B88 is  sequential implies ( IC B87 ) in ( Output B88 )))))
proof
let R1 being  with_zero set;
let C99 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C100 being (Instruction of C99);
assume that
L194: (for B89 being (State of C99) holds ( ( Exec (C100 , B89) ) . ( IC C99 ) ) = ( succ ( IC B89 ) ));
set D11 = the (State of C99);
L195: ( ( Exec (C100 , D11) ) . ( IC C99 ) ) = ( succ ( IC D11 ) ) by L194;
L196: ( ( Exec (C100 , D11) ) . ( IC C99 ) ) <> ( IC D11 ) by L195 , ORDINAL1:9;
thus L197: thesis by L196 , L42;
end;
theorem
L198: (for R1 being  with_zero set holds (for B90 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B91 being (Instruction of B90) holds ((ex B92 being (State of B90) st ( ( Exec (B91 , B92) ) . ( IC B90 ) ) <> ( IC B92 )) implies ( IC B90 ) in ( Out_U_Inp B91 )))))
proof
let R1 being  with_zero set;
let C101 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C102 being (Instruction of C101);
assume L199: (ex B93 being (State of C101) st ( ( Exec (C102 , B93) ) . ( IC C101 ) ) <> ( IC B93 ));
L200: ( IC C101 ) in ( Output C102 ) by L199 , L42;
L201: ( Output C102 ) c= ( Out_U_Inp C102 ) by L82;
thus L202: thesis by L201 , L200;
end;
theorem
L203: (for R1 being  with_zero set holds (for B94 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B95 being (Instruction of B94) holds (B95 is  sequential implies ( IC B94 ) in ( Out_U_Inp B95 )))))
proof
let R1 being  with_zero set;
let C103 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C104 being (Instruction of C103);
set D12 = the (State of C103);
assume L204: (for B96 being (State of C103) holds ( ( Exec (C104 , B96) ) . ( IC C103 ) ) = ( succ ( IC B96 ) ));
L205: ( ( Exec (C104 , D12) ) . ( IC C103 ) ) = ( succ ( IC D12 ) ) by L204;
L206: ( ( Exec (C104 , D12) ) . ( IC C103 ) ) <> ( IC D12 ) by L205 , ORDINAL1:9;
thus L207: thesis by L206 , L198;
end;
theorem
L208: (for R1 being  with_zero set holds (for B97 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1 holds (for B98 being (Instruction of B97) holds (for B99 being (Object of B97) holds (B98 is  jump-only implies (B99 in ( Output B98 ) implies B99 = ( IC B97 )))))))
proof
let R1 being  with_zero set;
let C105 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R1;
let C106 being (Instruction of C105);
let C107 being (Object of C105);
assume L209: (for B100 being (State of C105) holds (for B101 being (Object of C105) holds (for B102 being (Instruction of C105) holds ((( InsCode C106 ) = ( InsCode B102 ) & B101 in ( Data-Locations C105 )) implies ( ( Exec (B102 , B100) ) . B101 ) = ( B100 . B101 )))));
assume L210: C107 in ( Output C106 );
L211: (ex B103 being (State of C105) st ( B103 . C107 ) <> ( ( Exec (C106 , B103) ) . C107 )) by L210 , L42;
L212: (not C107 in ( Data-Locations C105 )) by L211 , L209;
L213: C107 in (the carrier of C105);
L214: C107 in ( { ( IC C105 ) } \/ ( Data-Locations C105 ) ) by L213 , STRUCT_0:4;
L215: C107 in { ( IC C105 ) } by L214 , L212 , XBOOLE_0:def 3;
thus L216: thesis by L215 , TARSKI:def 1;
end;
