:: On the Composition of Macro Instructions of Standard Computers
::  by Artur Korni{\l}owicz
::
:: Received April 14, 2000
:: Copyright (c) 2000-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, ORDINAL1, SETFAM_1, ARYTM_1, ARYTM_3, CARD_1, SUBSET_1,
      AMI_1, XBOOLE_0, RELAT_1, TARSKI, FUNCOP_1, GLIB_000, GOBOARD5, AMISTD_1,
      UNIALG_1, FUNCT_1, CARD_3, CARD_5, FRECHET, RCOMP_1, STRUCT_0, VALUED_1,
      FSM_1, FUNCT_4, FUNCT_7, TURING_1, CIRCUIT2, AMISTD_2, PARTFUN1, CAT_1,
      EXTPRO_1, NAT_1, RELOC, PBOOLE, XXREAL_0, COMPOS_1, MSUALG_1, FINSET_1,
      QUANTAL1, GOBRD13, MEMSTR_0;
 notations TARSKI, XBOOLE_0,
      XTUPLE_0, SUBSET_1, ORDINAL1, FINSET_1, SETFAM_1,
      MEMBERED, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2, FUNCT_4, PBOOLE, CARD_1,
      NUMBERS, XCMPLX_0, XXREAL_0, NAT_1, CARD_3, FINSEQ_1, FUNCOP_1, NAT_D,
      FUNCT_7, VALUED_0, VALUED_1, AFINSQ_1,
      STRUCT_0, MEMSTR_0, COMPOS_0, COMPOS_1, MEASURE6,
      EXTPRO_1, AMISTD_1;
 constructors WELLORD2, REALSET1, NAT_D, AMISTD_1, XXREAL_2, PRE_POLY,
      AFINSQ_1, ORDINAL4, VALUED_1, NAT_1, FUNCT_7, PBOOLE, FUNCT_4,
      MEMSTR_0, RELSET_1, MEASURE6, XTUPLE_0;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, FUNCOP_1, FINSET_1,
      XXREAL_0, XREAL_0, NAT_1, MEMBERED, FINSEQ_1, CARD_3, REALSET1, FUNCT_7,
      STRUCT_0, AMISTD_1, CARD_1, FUNCT_4, XXREAL_2, RELSET_1, GRFUNC_1,
      FUNCT_2, ORDINAL1, AFINSQ_1, VALUED_1, VALUED_0, COMPOS_1, EXTPRO_1,
      XCMPLX_0, REAL_1, PBOOLE, MEMSTR_0, MEASURE6, COMPOS_0, XTUPLE_0;
 requirements NUMERALS, BOOLE, SUBSET, REAL, ARITHM;
 definitions RELAT_1, FUNCT_1, WELLORD2, FUNCT_7, COMPOS_1, EXTPRO_1, AMISTD_1,
      XBOOLE_0, FUNCOP_1, CARD_3, NAT_1, AFINSQ_1, MCART_1, VALUED_1, TARSKI,
      STRUCT_0, MEMSTR_0, COMPOS_0, XTUPLE_0;
 theorems AMISTD_1, FUNCOP_1, FUNCT_1, FUNCT_4, GRFUNC_1, MCART_1, RELAT_1,
      SETFAM_1, TARSKI, ZFMISC_1, CARD_3, XBOOLE_0, XBOOLE_1, FUNCT_7, PBOOLE,
      PARTFUN1, RECDEF_2, VALUED_1, COMPOS_1, EXTPRO_1, ORDINAL1, NAT_D, NAT_1,
      XXREAL_0, MEMSTR_0, COMPOS_0;
 schemes NAT_1;

begin
theorem
L1: (for R14 being  with_zero set holds (for B1 being (Instruction of ( STC R14 )) holds ( JumpPart B1 ) = ( 0 )));
definition
let C1 being  with_zero set;
let C2 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C1;
let C3 being (Instruction of C2);
attr C3 is  with_explicit_jumps
means
:L2: ( JUMP C3 ) = ( rng ( JumpPart C3 ) );
end;
definition
let C4 being  with_zero set;
let C5 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C4;
attr C5 is  with_explicit_jumps
means
:L4: (for B2 being (Instruction of C5) holds B2 is  with_explicit_jumps);
end;
registration
let C6 being  with_zero set;
cluster  standard for  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C6;
existence
proof
take ( STC C6 );
thus L6: thesis;
end;
end;
theorem
L8: (for R14 being  with_zero set holds (for B3 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B4 being (Instruction of B3) holds ((for B5 being (Element of ( NAT )) holds ( NIC (B4 , B5) ) = { ( succ B5 ) }) implies ( JUMP B4 ) is  empty))))
proof
let R14 being  with_zero set;
let C7 being  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14;
let C8 being (Instruction of C7);
assume L9: (for B6 being (Element of ( NAT )) holds ( NIC (C8 , B6) ) = { ( succ B6 ) });
set D1 = 1;
set D2 = 2;
reconsider D3 = D1 , D4 = D2 as (Element of ( NAT ));
set D5 = { ( NIC (C8 , B7) ) where B7 is (Element of ( NAT )) : (not contradiction) };
assume L10: (not thesis);
consider C9 being set such that L11: C9 in ( meet D5 ) by L10 , XBOOLE_0:def 1;
L12: ( NIC (C8 , D3) ) = { ( succ D3 ) } by L9;
L13: ( NIC (C8 , D4) ) = { ( succ D4 ) } by L9;
L14: { ( succ D3 ) } in D5 by L12;
L15: { ( succ D4 ) } in D5 by L13;
L16: C9 in { ( succ D3 ) } by L11 , L14 , SETFAM_1:def 1;
L17: C9 in { ( succ D4 ) } by L11 , L15 , SETFAM_1:def 1;
L18: C9 = ( succ D3 ) by L16 , TARSKI:def 1;
thus L19: contradiction by L18 , L17 , TARSKI:def 1;
end;
registration
let C10 being  with_zero set;
let C11 being (Instruction of ( STC C10 ));
cluster ( JUMP C11 ) ->  empty;
coherence
proof
per cases  by AMISTD_1:6;
suppose L20: ( InsCode C11 ) = ( 0 );

L21: (for B8 being (Element of ( NAT )) holds ( NIC (C11 , B8) ) = { B8 }) by L20 , AMISTD_1:2 , AMISTD_1:4;
thus L22: thesis by L21 , AMISTD_1:1;
end;
suppose L23: ( InsCode C11 ) = 1;

L24: (for B9 being (Element of ( NAT )) holds ( NIC (C11 , B9) ) = { ( succ B9 ) }) by L23 , AMISTD_1:10;
thus L25: thesis by L24 , L8;
end;
end;
end;
theorem
L28: (for R14 being  with_zero set holds (for B10 being (InsType of (the InstructionsF of ( STC R14 ))) holds ( JumpParts B10 ) = { ( 0 ) }))
proof
let R14 being  with_zero set;
let C12 being (InsType of (the InstructionsF of ( STC R14 )));
set D6 = { ( JumpPart B11 ) where B11 is (Instruction of ( STC R14 )) : ( InsCode B11 ) = C12 };
L29: { ( 0 ) } = D6
proof
thus L30:now
let C13 being set;
assume L31: C13 in { ( 0 ) };
L32: C13 = ( 0 ) by L31 , TARSKI:def 1;
L33: (the InstructionsF of ( STC R14 )) = { [ ( 0 ) , ( 0 ) , ( 0 ) ] , [ 1 , ( 0 ) , ( 0 ) ] } by AMISTD_1:def 7;
L34: ( InsCodes (the InstructionsF of ( STC R14 )) ) = { ( 0 ) , 1 } by L33 , MCART_1:91;
per cases  by L34 , TARSKI:def 2;
suppose L35: C12 = ( 0 );

reconsider D7 = [ ( 0 ) , ( 0 ) , ( 0 ) ] as (Instruction of ( STC R14 )) by L33 , TARSKI:def 2;
L36: ( JumpPart D7 ) = ( 0 );
L37: ( InsCode D7 ) = ( 0 ) by RECDEF_2:def 1;
thus L38: C13 in D6 by L37 , L32 , L35 , L36;
end;
suppose L39: C12 = 1;

reconsider D8 = [ 1 , ( 0 ) , ( 0 ) ] as (Instruction of ( STC R14 )) by L33 , TARSKI:def 2;
L40: ( JumpPart D8 ) = ( 0 );
L41: ( InsCode D8 ) = 1 by RECDEF_2:def 1;
thus L42: C13 in D6 by L41 , L32 , L39 , L40;
end;
end;
let C14 being set;
assume L44: C14 in D6;
L45: (ex B12 being (Instruction of ( STC R14 )) st (C14 = ( JumpPart B12 ) & ( InsCode B12 ) = C12)) by L44;
L46: C14 = ( 0 ) by L45;
thus L47: thesis by L46 , TARSKI:def 1;
end;
thus L48: thesis by L29;
end;
L49: (for R14 being  with_zero set holds (for B13 being (Instruction of ( Trivial-AMI R14 )) holds ( JumpPart B13 ) = ( 0 )))
proof
let R14 being  with_zero set;
let C15 being (Instruction of ( Trivial-AMI R14 ));
L50: (the InstructionsF of ( Trivial-AMI R14 )) = { [ ( 0 ) , ( 0 ) , ( {} ) ] } by EXTPRO_1:def 1;
L51: C15 = [ ( 0 ) , ( 0 ) , ( 0 ) ] by L50 , TARSKI:def 1;
thus L52: thesis by L51 , RECDEF_2:def 2;
end;
L53: (for R14 being  with_zero set holds (for B14 being (InsType of (the InstructionsF of ( Trivial-AMI R14 ))) holds ( JumpParts B14 ) = { ( 0 ) }))
proof
let R14 being  with_zero set;
let C16 being (InsType of (the InstructionsF of ( Trivial-AMI R14 )));
set D9 = { ( JumpPart B15 ) where B15 is (Instruction of ( Trivial-AMI R14 )) : ( InsCode B15 ) = C16 };
L54: { ( 0 ) } = D9
proof
thus L55:now
let C17 being set;
assume L56: C17 in { ( 0 ) };
L57: C17 = ( 0 ) by L56 , TARSKI:def 1;
L58: (the InstructionsF of ( Trivial-AMI R14 )) = { [ ( 0 ) , ( 0 ) , ( {} ) ] } by EXTPRO_1:def 1;
L59: ( InsCodes (the InstructionsF of ( Trivial-AMI R14 )) ) = { ( 0 ) } by L58 , MCART_1:92;
L60: C16 = ( 0 ) by L59 , TARSKI:def 1;
reconsider D10 = [ ( 0 ) , ( 0 ) , ( 0 ) ] as (Instruction of ( Trivial-AMI R14 )) by L58 , TARSKI:def 1;
L61: ( JumpPart D10 ) = ( 0 ) by L49;
L62: ( InsCode D10 ) = ( 0 ) by RECDEF_2:def 1;
thus L63: C17 in D9 by L62 , L57 , L60 , L61;
end;
let C18 being set;
assume L64: C18 in D9;
L65: (ex B16 being (Instruction of ( Trivial-AMI R14 )) st (C18 = ( JumpPart B16 ) & ( InsCode B16 ) = C16)) by L64;
L66: C18 = ( 0 ) by L65 , L49;
thus L67: thesis by L66 , TARSKI:def 1;
end;
thus L68: thesis by L54;
end;
registration
let C19 being  with_zero set;
cluster ( STC C19 ) ->  with_explicit_jumps;
coherence
proof
let C20 being (Instruction of ( STC C19 ));
thus L69: ( JUMP C20 ) = ( rng ( JumpPart C20 ) );
end;
end;
registration
let C21 being  with_zero set;
cluster  standard  halting  with_explicit_jumps for  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C21;
existence
proof
take ( STC C21 );
thus L71: thesis;
end;
end;
registration
let C22 being  with_zero set;
let C23 being (Instruction of ( Trivial-AMI C22 ));
cluster ( JUMP C23 ) ->  empty;
coherence
proof
L73: (for B17 being (Element of ( NAT )) holds ( NIC (C23 , B17) ) = { B17 }) by AMISTD_1:2 , AMISTD_1:17;
thus L74: thesis by L73 , AMISTD_1:1;
end;
end;
registration
let C24 being  with_zero set;
cluster ( Trivial-AMI C24 ) ->  with_explicit_jumps;
coherence
proof
thus L76: ( Trivial-AMI C24 ) is  with_explicit_jumps
proof
let C25 being (Instruction of ( Trivial-AMI C24 ));
L77: (the InstructionsF of ( Trivial-AMI C24 )) = { [ ( 0 ) , ( 0 ) , ( {} ) ] } by EXTPRO_1:def 1;
L78: C25 = [ ( 0 ) , ( 0 ) , ( 0 ) ] by L77 , TARSKI:def 1;
thus L79: ( JUMP C25 ) = ( rng ( JumpPart C25 ) ) by L78 , RECDEF_2:def 2 , RELAT_1:38;
end;

end;
end;
registration
let C26 being  with_zero set;
cluster  with_explicit_jumps  halting for  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C26;
existence
proof
take ( Trivial-AMI C26 );
thus L78: thesis;
end;
end;
registration
let C27 being  with_zero set;
let C28 being  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C27;
cluster  ->  with_explicit_jumps for (Instruction of C28);
coherence by L4;
end;
theorem
L81: (for R14 being  with_zero set holds (for B18 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B19 being (Instruction of B18) holds (B19 is  halting implies ( JUMP B19 ) is  empty))))
proof
let R14 being  with_zero set;
let C29 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14;
let C30 being (Instruction of C29);
assume L82: C30 is  halting;
L83: (for B20 being (Element of ( NAT )) holds ( NIC (C30 , B20) ) = { B20 }) by L82 , AMISTD_1:2;
thus L84: thesis by L83 , AMISTD_1:1;
end;
registration
let C31 being  with_zero set;
let C32 being  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C31;
let C33 being  halting (Instruction of C32);
cluster ( JUMP C33 ) ->  empty;
coherence by L81;
end;
theorem
L86: (for R14 being  with_zero set holds (for B21 being  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B22 being (Instruction of B21) holds (B22 is  ins-loc-free implies ( JUMP B22 ) is  empty))))
proof
let R14 being  with_zero set;
let C34 being  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14;
let C35 being (Instruction of C34);
assume that
L87: ( JumpPart C35 ) is  empty;
L88: ( rng ( JumpPart C35 ) ) = ( {} ) by L87;
L89: ( JUMP C35 ) c= ( rng ( JumpPart C35 ) ) by L2;
thus L90: thesis by L89 , L88;
end;
registration
let C36 being  with_zero set;
let C37 being  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C36;
cluster  halting ->  ins-loc-free for (Instruction of C37);
coherence
proof
let C38 being (Instruction of C37);
assume L91: C38 is  halting;
L92: ( JUMP C38 ) is  empty by L91 , L81;
L93: ( rng ( JumpPart C38 ) ) = ( JUMP C38 ) by L2;
thus L94: ( JumpPart C38 ) is  empty by L93 , L92;
end;
end;
registration
let C39 being  with_zero set;
let C40 being  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C39;
cluster  sequential ->  ins-loc-free for (Instruction of C40);
coherence
proof
let C41 being (Instruction of C40);
assume L96: C41 is  sequential;
L97: ( JUMP C41 ) is  empty by L96 , AMISTD_1:13;
L98: ( rng ( JumpPart C41 ) ) = ( JUMP C41 ) by L2;
thus L99: ( JumpPart C41 ) is  empty by L98 , L97;
end;
end;
registration
let C42 being  with_zero set;
let C43 being  standard  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C42;
cluster ( Stop C43 ) ->  really-closed;
coherence by AMISTD_1:16;
end;
begin
registration
let C44 being  with_zero set;
let C45 being  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C44;
let C46 being  halting (Instruction of C45);
let C47 being Nat;
cluster ( IncAddr (C46 , C47) ) ->  halting;
coherence by COMPOS_0:4;
end;
theorem
L103: (for R1 being Nat holds (for R14 being  with_zero set holds (for B23 being  standard  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B24 being (Instruction of B23) holds (B24 is  sequential implies ( IncAddr (B24 , R1) ) is  sequential))))) by COMPOS_0:4;
definition
let C48 being  with_zero set;
let C49 being  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C48;
let C50 being (Instruction of C49);
attr C50 is  IC-relocable
means
:L104: (for B25 , B26 being Nat holds (for B27 being (State of C49) holds ( ( IC ( Exec (( IncAddr (C50 , B25) ) , B27) ) ) + B26 ) = ( IC ( Exec (( IncAddr (C50 , ( B25 + B26 )) ) , ( IncIC (B27 , B26) )) ) )));
end;
definition
let C51 being  with_zero set;
let C52 being  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C51;
attr C52 is  IC-relocable
means
:L106: (for B28 being (Instruction of C52) holds B28 is  IC-relocable);
end;
registration
let C53 being  with_zero set;
let C54 being  with_explicit_jumps  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over C53;
cluster  sequential ->  IC-relocable for (Instruction of C54);
coherence
proof
let C55 being (Instruction of C54);
assume that
L108: C55 is  sequential;
let C56 , C57 being Nat;
let C58 being (State of C54);
set D11 = ( IncIC (C58 , C57) );
L109: ( dom ( ( IC C54 ) .--> ( ( IC C58 ) + C57 ) ) ) = { ( IC C54 ) } by FUNCOP_1:13;
L110: ( IC C54 ) in ( dom ( ( IC C54 ) .--> ( ( IC C58 ) + C57 ) ) ) by L109 , TARSKI:def 1;
L111: ( IC D11 ) = ( ( ( IC C54 ) .--> ( ( IC C58 ) + C57 ) ) . ( IC C54 ) ) by L110 , FUNCT_4:13
.= ( ( IC C58 ) + C57 ) by FUNCOP_1:72;
L112: ( IC ( Exec (C55 , D11) ) ) = ( succ ( IC D11 ) ) by L108 , AMISTD_1:def 8
.= ( ( ( IC C58 ) + 1 ) + C57 ) by L111;
L113: ( IncAddr (C55 , C56) ) = C55 by L108 , COMPOS_0:4;
L114: ( IC ( Exec (C55 , C58) ) ) = ( succ ( IC C58 ) ) by L108 , AMISTD_1:def 8
.= ( ( IC C58 ) + 1 );
thus L115: ( ( IC ( Exec (( IncAddr (C55 , C56) ) , C58) ) ) + C57 ) = ( IC ( Exec (( IncAddr (( IncAddr (C55 , C56) ) , C57) ) , D11) ) ) by L114 , L108 , L112 , L113 , COMPOS_0:4
.= ( IC ( Exec (( IncAddr (C55 , ( C56 + C57 )) ) , D11) ) ) by COMPOS_0:7;
end;
end;
registration
let C59 being  with_zero set;
let C60 being  with_explicit_jumps  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over C59;
cluster  halting ->  IC-relocable for (Instruction of C60);
coherence
proof
let C61 being (Instruction of C60);
assume that
L117: C61 is  halting;
let C62 , C63 being Nat;
let C64 being (State of C60);
set D12 = ( IncIC (C64 , C63) );
L118: ( dom ( ( IC C60 ) .--> ( ( IC C64 ) + C63 ) ) ) = { ( IC C60 ) } by FUNCOP_1:13;
L119: ( IC C60 ) in ( dom ( ( IC C60 ) .--> ( ( IC C64 ) + C63 ) ) ) by L118 , TARSKI:def 1;
thus L120: ( ( IC ( Exec (( IncAddr (C61 , C62) ) , C64) ) ) + C63 ) = ( ( IC C64 ) + C63 ) by L117 , EXTPRO_1:def 3
.= ( ( ( IC C60 ) .--> ( ( IC C64 ) + C63 ) ) . ( IC C60 ) ) by FUNCOP_1:72
.= ( IC D12 ) by L119 , FUNCT_4:13
.= ( IC ( Exec (( IncAddr (C61 , ( C62 + C63 )) ) , D12) ) ) by L117 , EXTPRO_1:def 3;
end;
end;
registration
let C65 being  with_zero set;
cluster ( STC C65 ) ->  IC-relocable;
coherence
proof
thus L122: ( STC C65 ) is  IC-relocable
proof
let C66 being (Instruction of ( STC C65 ));
let C67 , C68 being Nat;
let C69 being (State of ( STC C65 ));
set D13 = ( IncIC (C69 , C68) );
L123: { ( IC ( STC C65 ) ) } = ( dom ( ( IC ( STC C65 ) ) .--> ( ( IC C69 ) + C68 ) ) ) by FUNCOP_1:13;
L124: ( IC ( STC C65 ) ) in ( dom ( ( IC ( STC C65 ) ) .--> ( ( IC C69 ) + C68 ) ) ) by L123 , TARSKI:def 1;
L125: ( IC D13 ) = ( ( ( IC ( STC C65 ) ) .--> ( ( IC C69 ) + C68 ) ) . ( IC ( STC C65 ) ) ) by L124 , FUNCT_4:13
.= ( ( IC C69 ) + C68 ) by FUNCOP_1:72;
per cases  by AMISTD_1:6;
suppose L126: ( InsCode C66 ) = 1;

L127: ( InsCode ( IncAddr (C66 , C68) ) ) = 1 by L126 , COMPOS_0:def 9;
L128: ( IncAddr (C66 , C67) ) = C66 by COMPOS_0:4;
L129: ( IC ( Exec (C66 , C69) ) ) = ( succ ( IC C69 ) ) by L126 , AMISTD_1:9
.= ( ( IC C69 ) + 1 );
thus L130: ( ( IC ( Exec (( IncAddr (C66 , C67) ) , C69) ) ) + C68 ) = ( succ ( IC D13 ) ) by L129 , L125 , L128
.= ( IC ( Exec (( IncAddr (( IncAddr (C66 , C67) ) , C68) ) , D13) ) ) by L128 , L127 , AMISTD_1:9
.= ( IC ( Exec (( IncAddr (C66 , ( C67 + C68 )) ) , D13) ) ) by COMPOS_0:7;
end;
suppose L131: ( InsCode C66 ) = ( 0 );

L132: C66 is  halting by L131 , AMISTD_1:4;
thus L133: ( ( IC ( Exec (( IncAddr (C66 , C67) ) , C69) ) ) + C68 ) = ( ( IC C69 ) + C68 ) by L132 , EXTPRO_1:def 3
.= ( IC ( Exec (( IncAddr (( IncAddr (C66 , C67) ) , C68) ) , D13) ) ) by L125 , L132 , EXTPRO_1:def 3
.= ( IC ( Exec (( IncAddr (C66 , ( C67 + C68 )) ) , D13) ) ) by COMPOS_0:7;
end;
end;

end;
end;
registration
let C70 being  with_zero set;
cluster  halting  with_explicit_jumps for  standard  IC-Ins-separated non  empty  with_non-empty_values  standard  IC-Ins-separated non  empty  with_non-empty_values  standard  IC-Ins-separated non  empty  with_non-empty_values  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C70;
existence
proof
take ( STC C70 );
thus L124: thesis;
end;
end;
registration
let C71 being  with_zero set;
cluster  IC-relocable for  with_explicit_jumps  halting  standard  IC-Ins-separated non  empty  with_non-empty_values  with_explicit_jumps  halting  standard  IC-Ins-separated non  empty  with_non-empty_values  with_explicit_jumps  halting  standard  IC-Ins-separated non  empty  with_non-empty_values  with_explicit_jumps  halting  standard  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C71;
existence
proof
take ( STC C71 );
thus L126: thesis;
end;
end;
registration
let C72 being  with_zero set;
let C73 being  IC-relocable  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over C72;
cluster  ->  IC-relocable for (Instruction of C73);
coherence by L106;
end;
registration
let C74 being  with_zero set;
let C75 being  with_explicit_jumps  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over C74;
cluster  IC-relocable for (Instruction of C75);
existence
proof
take the  halting (Instruction of C75);
thus L129: thesis;
end;
end;
theorem
L131: (for R14 being  with_zero set holds (for B29 being  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B30 being  IC-relocable (Instruction of B29) holds (for B31 being Nat holds (for B32 being (State of B29) holds ( ( IC ( Exec (B30 , B32) ) ) + B31 ) = ( IC ( Exec (( IncAddr (B30 , B31) ) , ( IncIC (B32 , B31) )) ) ))))))
proof
let R14 being  with_zero set;
let C76 being  halting  with_explicit_jumps  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14;
let C77 being  IC-relocable (Instruction of C76);
let C78 being Nat;
let C79 being (State of C76);
L132: ( C78 + (( 0 ) qua Nat) ) = C78;
thus L133: ( ( IC ( Exec (C77 , C79) ) ) + C78 ) = ( ( IC ( Exec (( IncAddr (C77 , ( 0 )) ) , C79) ) ) + C78 ) by COMPOS_0:3
.= ( IC ( Exec (( IncAddr (C77 , C78) ) , ( IncIC (C79 , C78) )) ) ) by L104 , L132
.= ( IC ( Exec (( IncAddr (C77 , C78) ) , ( IncIC (C79 , C78) )) ) );
end;
registration
let C80 being  with_zero set;
let C81 being  IC-relocable  standard  with_explicit_jumps  halting  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over C80;
let C82 , C83 being  really-closed  initial non  empty ( NAT ) -defined (the InstructionsF of C81) -valued  finite Function;
cluster ( C82 ';' C83 ) ->  really-closed;
coherence
proof
set D14 = ( C82 ';' C83 );
set D15 = ( ( card C82 ) -' 1 );
let C84 being (Element of ( NAT ));
assume that
L134: C84 in ( dom D14 );
L135: ( dom D14 ) = ( ( dom ( CutLastLoc C82 ) ) \/ ( dom ( Reloc (C83 , D15) ) ) ) by FUNCT_4:def 1;
L136: ( dom ( CutLastLoc C82 ) ) c= ( dom C82 ) by GRFUNC_1:2;
L137: ( dom ( Reloc (C83 , D15) ) ) = { ( B33 + D15 ) where B33 is (Element of ( NAT )) : B33 in ( dom ( IncAddr (C83 , D15) ) ) } by VALUED_1:def 12;
let C85 being set;
assume L138: C85 in ( NIC (( D14 /. C84 ) , C84) );
consider C86 being (Element of ( product ( the_Values_of C81 ) )) such that L139: C85 = ( IC ( Exec (( D14 /. C84 ) , C86) ) ) and L140: ( IC C86 ) = C84 by L138;
L141: ( D14 /. C84 ) = ( D14 . C84 ) by L134 , PARTFUN1:def 6;
per cases  by L134 , L135 , XBOOLE_0:def 3;
suppose L142: C84 in ( dom ( CutLastLoc C82 ) );

L143: ( NIC (( C82 /. C84 ) , C84) ) c= ( dom C82 ) by L142 , L136 , AMISTD_1:def 9;
L144: ( dom ( CutLastLoc C82 ) ) = ( ( dom C82 ) \ { ( LastLoc C82 ) } ) by VALUED_1:36;
L145: C84 in ( dom C82 ) by L144 , L142 , XBOOLE_0:def 5;
L146: ( dom ( CutLastLoc C82 ) ) misses ( dom ( Reloc (C83 , ( ( card C82 ) -' 1 )) ) ) by COMPOS_1:18;
L147: (not C84 in ( dom ( Reloc (C83 , ( ( card C82 ) -' 1 )) ) )) by L146 , L142 , XBOOLE_0:3;
L148: ( D14 /. C84 ) = ( D14 . C84 ) by L134 , PARTFUN1:def 6
.= ( ( CutLastLoc C82 ) . C84 ) by L147 , FUNCT_4:11
.= ( C82 . C84 ) by L142 , GRFUNC_1:2
.= ( C82 /. C84 ) by L145 , PARTFUN1:def 6;
L149: ( IC ( Exec (( C82 /. C84 ) , C86) ) ) in ( NIC (( C82 /. C84 ) , C84) ) by L140;
L150: C85 in ( dom C82 ) by L149 , L139 , L143 , L148;
L151: ( dom C82 ) c= ( dom D14 ) by COMPOS_1:21;
thus L152: thesis by L151 , L150;
end;
suppose L153: C84 in ( dom ( Reloc (C83 , D15) ) );

consider C87 being (Element of ( NAT )) such that L154: C84 = ( C87 + D15 ) and L155: C87 in ( dom ( IncAddr (C83 , D15) ) ) by L153 , L137;
L156: C87 in ( dom C83 ) by L155 , COMPOS_1:def 21;
L157: ( NIC (( C83 /. C87 ) , C87) ) c= ( dom C83 ) by L156 , AMISTD_1:def 9;
L158: ( Values ( IC C81 ) ) = ( NAT ) by MEMSTR_0:def 6;
reconsider D16 = ( ( IC C81 ) .--> C87 ) as (FinPartState of C81) by L158;
set D17 = ( C86 +* D16 );
L159: ( D14 /. C84 ) = ( ( Reloc (C83 , D15) ) . C84 ) by L141 , L153 , FUNCT_4:13
.= ( ( IncAddr (C83 , D15) ) . C87 ) by L154 , L155 , VALUED_1:def 12;
L160: ( ( ( IC C81 ) .--> C87 ) . ( IC C81 ) ) = C87 by FUNCOP_1:72;
L161: ( IC C81 ) in { ( IC C81 ) } by TARSKI:def 1;
L162: ( dom ( ( IC C81 ) .--> C87 ) ) = { ( IC C81 ) } by FUNCOP_1:13;
reconsider D18 = ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) as (FinPartState of C81) by L158;
L163: ( dom ( D17 +* ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) ) ) = (the carrier of C81) by PARTFUN1:def 2;
L164: ( dom C86 ) = (the carrier of C81) by PARTFUN1:def 2;
L165: (for B34 being set holds (B34 in ( dom C86 ) implies ( C86 . B34 ) = ( ( D17 +* ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) ) . B34 )))
proof
let C88 being set;
assume that
L166: C88 in ( dom C86 );
L167: ( dom ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) ) = { ( IC C81 ) } by FUNCOP_1:13;
per cases ;
suppose L168: C88 = ( IC C81 );

thus L169: ( C86 . C88 ) = ( ( IC D17 ) + D15 ) by L168 , L140 , L154 , L162 , L160 , L161 , FUNCT_4:13
.= ( ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) . C88 ) by L168 , FUNCOP_1:72
.= ( ( D17 +* ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) ) . C88 ) by L161 , L167 , L168 , FUNCT_4:13;
end;
suppose L170: C88 <> ( IC C81 );

L171: (not C88 in ( dom ( ( IC C81 ) .--> ( ( IC D17 ) + D15 ) ) )) by L170 , L167 , TARSKI:def 1;
L172: (not C88 in ( dom ( ( IC C81 ) .--> C87 ) )) by L162 , L170 , TARSKI:def 1;
L173: ( D17 . C88 ) = ( C86 . C88 ) by L172 , FUNCT_4:11;
thus L174: thesis by L173 , L171 , FUNCT_4:11;
end;
end;
L176: C86 = ( IncIC (D17 , D15) ) by L165 , L163 , L164 , FUNCT_1:2;
set D19 = D17;
L177: ( IC D19 ) = ( D17 . ( IC C81 ) )
.= C87 by L160 , L161 , L162 , FUNCT_4:13;
reconsider D20 = D19 as (Element of ( product ( the_Values_of C81 ) )) by CARD_3:107;
reconsider D21 = D15 , D22 = C87 as (Element of ( NAT ));
L178: C85 = ( IC ( Exec (( IncAddr (( C83 /. D22 ) , D21) ) , C86) ) ) by L139 , L156 , L159 , COMPOS_1:def 21
.= ( ( IC ( Exec (( C83 /. D22 ) , D17) ) ) + D21 ) by L176 , L131
.= ( ( IC ( Exec (( C83 /. D22 ) , D20) ) ) + D21 );
L179: ( IC ( Exec (( C83 /. D22 ) , D20) ) ) in ( NIC (( C83 /. D22 ) , D22) ) by L177;
L180: ( IC ( Exec (( C83 /. D22 ) , D20) ) ) in ( dom C83 ) by L179 , L157;
L181: ( IC ( Exec (( C83 /. D22 ) , D20) ) ) in ( dom ( IncAddr (C83 , D21) ) ) by L180 , COMPOS_1:def 21;
L182: C85 in ( dom ( Reloc (C83 , D21) ) ) by L181 , L137 , L178;
thus L183: thesis by L182 , L135 , XBOOLE_0:def 3;
end;
end;
end;
theorem
L186: (for R14 being  with_zero set holds (for B35 being (Instruction of ( Trivial-AMI R14 )) holds ( JumpPart B35 ) = ( 0 ))) by L49;
theorem
L187: (for R14 being  with_zero set holds (for B36 being (InsType of (the InstructionsF of ( Trivial-AMI R14 ))) holds ( JumpParts B36 ) = { ( 0 ) })) by L53;
theorem
L188: (for R14 being  with_zero set holds (for R15 being (Element of ( NAT )) holds (for B37 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14 holds (for B38 being (State of B37) holds (for B39 being (Program of B37) holds (for B40 , B41 being (Instruction-Sequence of B37) holds ((B39 c= B40 & B39 c= B41 & (for R16 being (Element of ( NAT )) holds (R16 < R15 implies ( IC ( Comput (B41 , B38 , R16) ) ) in ( dom B39 )))) implies (for R16 being (Element of ( NAT )) holds (R16 <= R15 implies ( Comput (B40 , B38 , R16) ) = ( Comput (B41 , B38 , R16) ))))))))))
proof
let R14 being  with_zero set;
let R15 being (Element of ( NAT ));
let C89 being  IC-Ins-separated non  empty  with_non-empty_values AMI-Struct over R14;
let C90 being (State of C89);
let C91 being (Program of C89);
let C92 , C93 being (Instruction-Sequence of C89);
assume that
L189: (C91 c= C92 & C91 c= C93);
assume that
L190: (for R16 being (Element of ( NAT )) holds (R16 < R15 implies ( IC ( Comput (C93 , C90 , R16) ) ) in ( dom C91 )));
defpred S1[ Nat ] means ($1 <= R15 implies ( Comput (C92 , C90 , $1) ) = ( Comput (C93 , C90 , $1) ));
L191: (for R16 being (Element of ( NAT )) holds (S1[ R16 ] implies S1[ ( R16 + 1 ) ]))
proof
let R16 being (Element of ( NAT ));
assume that
L192: S1[ R16 ];
L193: ( Comput (C93 , C90 , ( R16 + 1 )) ) = ( Following (C93 , ( Comput (C93 , C90 , R16) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (C93 , ( Comput (C93 , C90 , R16) )) ) , ( Comput (C93 , C90 , R16) )) );
L194: ( Comput (C92 , C90 , ( R16 + 1 )) ) = ( Following (C92 , ( Comput (C92 , C90 , R16) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (C92 , ( Comput (C92 , C90 , R16) )) ) , ( Comput (C92 , C90 , R16) )) );
assume L195: ( R16 + 1 ) <= R15;
L196: R16 < R15 by L195 , NAT_1:13;
L197: ( IC ( Comput (C92 , C90 , R16) ) ) = ( IC ( Comput (C93 , C90 , R16) ) ) by L196 , L192;
L198: R16 < R15 by L195 , NAT_1:13;
L199: ( IC ( Comput (C93 , C90 , R16) ) ) in ( dom C91 ) by L198 , L190;
L200: ( dom C93 ) = ( NAT ) by PARTFUN1:def 2;
L201: ( IC ( Comput (C93 , C90 , R16) ) ) in ( dom C93 ) by L200;
L202: ( dom C92 ) = ( NAT ) by PARTFUN1:def 2;
L203: ( IC ( Comput (C92 , C90 , R16) ) ) in ( dom C92 ) by L202;
L204: ( CurInstr (C92 , ( Comput (C92 , C90 , R16) )) ) = ( C92 . ( IC ( Comput (C92 , C90 , R16) ) ) ) by L203 , PARTFUN1:def 6
.= ( C91 . ( IC ( Comput (C92 , C90 , R16) ) ) ) by L199 , L197 , L189 , GRFUNC_1:2
.= ( C93 . ( IC ( Comput (C93 , C90 , R16) ) ) ) by L199 , L197 , L189 , GRFUNC_1:2
.= ( CurInstr (C93 , ( Comput (C93 , C90 , R16) )) ) by L201 , PARTFUN1:def 6;
thus L205: thesis by L204 , L192 , L194 , L193 , L195 , NAT_1:13;
end;
L206: S1[ ( 0 ) ];
thus L207: (for R16 being (Element of ( NAT )) holds S1[ R16 ]) from NAT_1:sch 1(L206 , L191);
end;
theorem
L208: (for R14 being  with_zero set holds (for B42 being  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over R14 holds (for B43 being (Instruction-Sequence of B42) holds (for B44 being (State of B42) holds (B44 = ( Following (B43 , B44) ) implies (for R15 being (Element of ( NAT )) holds ( Comput (B43 , B44 , R15) ) = B44))))))
proof
let R14 being  with_zero set;
let C94 being  IC-Ins-separated  halting non  empty  with_non-empty_values AMI-Struct over R14;
let C95 being (Instruction-Sequence of C94);
let C96 being (State of C94);
defpred S2[ (Element of ( NAT )) ] means ( Comput (C95 , C96 , $1) ) = C96;
assume L209: C96 = ( Following (C95 , C96) );
L210: (for R15 being (Element of ( NAT )) holds (S2[ R15 ] implies S2[ ( R15 + 1 ) ])) by L209 , EXTPRO_1:3;
L211: S2[ ( 0 ) ];
thus L212: (for R15 being (Element of ( NAT )) holds S2[ R15 ]) from NAT_1:sch 1(L211 , L210);
end;
