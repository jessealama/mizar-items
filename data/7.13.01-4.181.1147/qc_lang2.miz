:: Connectives and Subformulae of the First Order Language
::  by Grzegorz Bancerek
::
:: Received November 23, 1989
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, FINSEQ_1, QC_LANG1, SUBSET_1, ZF_LANG, XBOOLEAN,
      XXREAL_0, CARD_1, ORDINAL4, BVFUNC_2, FUNCT_1, CLASSES2, MCART_1,
      REALSET1, ARYTM_3, NAT_1, RELAT_1, ARYTM_1, TARSKI, XBOOLE_0, QC_LANG2;
 notations TARSKI, XBOOLE_0, ENUMSET1, SUBSET_1, XCMPLX_0, RELAT_1, FUNCT_1,
      ORDINAL1, NUMBERS, NAT_1, FINSEQ_1, XTUPLE_0, MCART_1, QC_LANG1,
      XXREAL_0;
 constructors ENUMSET1, XXREAL_0, XREAL_0, NAT_1, QC_LANG1, XTUPLE_0;
 registrations RELSET_1, XREAL_0, FINSEQ_1, ORDINAL1, XTUPLE_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions TARSKI, QC_LANG1, XBOOLE_0, XTUPLE_0;
 theorems TARSKI, ENUMSET1, NAT_1, FUNCT_1, FINSEQ_1, QC_LANG1, XBOOLE_0,
      XBOOLE_1, XREAL_1, XXREAL_0, ORDINAL1;
 schemes NAT_1, XBOOLE_0;

begin
theorem
L1: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds ( the_argument_of ( 'not' R6 ) ) = R6))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
L2: ( 'not' R6 ) is  negative by QC_LANG1:def 19;
thus L3: thesis by L2 , QC_LANG1:def 24;
end;
theorem
L4: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R10 being (Element of ( QC-WFF R1 )) holds (( R6 '&' R7 ) = ( R8 '&' R10 ) implies (R6 = R8 & R7 = R10)))))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R8 being (Element of ( QC-WFF R1 ));
let R10 being (Element of ( QC-WFF R1 ));
assume L5: ( R6 '&' R7 ) = ( R8 '&' R10 );
L6: (( ( <* [ 2 , ( 0 ) ] *> ^ ( @ R6 ) ) ^ ( @ R7 ) ) = ( <* [ 2 , ( 0 ) ] *> ^ ( ( @ R6 ) ^ ( @ R7 ) ) ) & ( ( <* [ 2 , ( 0 ) ] *> ^ ( @ R8 ) ) ^ ( @ R10 ) ) = ( <* [ 2 , ( 0 ) ] *> ^ ( ( @ R8 ) ^ ( @ R10 ) ) )) by FINSEQ_1:32;
L7: ( ( @ R6 ) ^ ( @ R7 ) ) = ( ( @ R8 ) ^ ( @ R10 ) ) by L6 , L5 , FINSEQ_1:33;
L8: (( len ( @ R8 ) ) <= ( len ( @ R6 ) ) implies (ex R2 being FinSequence st ( @ R6 ) = ( ( @ R8 ) ^ R2 ))) by L7 , FINSEQ_1:47;
L9: (( len ( @ R6 ) ) <= ( len ( @ R8 ) ) implies (ex R2 being FinSequence st ( @ R8 ) = ( ( @ R6 ) ^ R2 ))) by L7 , FINSEQ_1:47;
thus L10: R6 = R8 by L9 , L8 , QC_LANG1:13;
L11: ((ex R2 being FinSequence st ( @ R8 ) = ( ( @ R6 ) ^ R2 )) implies R8 = R6) by QC_LANG1:13;
thus L12: thesis by L11 , L5 , L8 , L9 , FINSEQ_1:33 , QC_LANG1:13;
end;
theorem
L13: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (R6 is  conjunctive implies R6 = ( ( the_left_argument_of R6 ) '&' ( the_right_argument_of R6 ) ))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
given R8 being (Element of ( QC-WFF R1 )) , R10 being (Element of ( QC-WFF R1 )) such that
L14: R6 = ( R8 '&' R10 );

L15: R6 is  conjunctive by L14 , QC_LANG1:def 20;
L16: R8 = ( the_left_argument_of R6 ) by L15 , L14 , QC_LANG1:def 25;
thus L17: thesis by L16 , L14 , L15 , QC_LANG1:def 26;
end;
theorem
L18: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (( the_left_argument_of ( R6 '&' R7 ) ) = R6 & ( the_right_argument_of ( R6 '&' R7 ) ) = R7))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
L19: ( R6 '&' R7 ) is  conjunctive by QC_LANG1:def 20;
thus L20: thesis by L19 , QC_LANG1:def 25 , QC_LANG1:def 26;
end;
theorem
L21: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R6) ) = ( All (R4 , R7) ) implies (R3 = R4 & R6 = R7)))))))
proof
let R1 being QC-alphabet;
let R3 being (bound_QC-variable of R1);
let R4 being (bound_QC-variable of R1);
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
L22: (( ( <* [ 3 , ( 0 ) ] *> ^ <* R3 *> ) ^ ( @ R6 ) ) = ( <* [ 3 , ( 0 ) ] *> ^ ( <* R3 *> ^ ( @ R6 ) ) ) & ( ( <* [ 3 , ( 0 ) ] *> ^ <* R4 *> ) ^ ( @ R7 ) ) = ( <* [ 3 , ( 0 ) ] *> ^ ( <* R4 *> ^ ( @ R7 ) ) )) by FINSEQ_1:32;
L23: (( ( <* R3 *> ^ ( @ R6 ) ) . 1 ) = R3 & ( ( <* R4 *> ^ ( @ R7 ) ) . 1 ) = R4) by FINSEQ_1:41;
assume L24: ( All (R3 , R6) ) = ( All (R4 , R7) );
thus L25: R3 = R4 by L24 , L22 , L23 , FINSEQ_1:33;
L26: ( <* R3 *> ^ ( @ R6 ) ) = ( <* R4 *> ^ ( @ R7 ) ) by L24 , L22 , FINSEQ_1:33;
thus L27: thesis by L26 , L23 , FINSEQ_1:33;
end;
theorem
L28: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (R6 is  universal implies R6 = ( All (( bound_in R6 ) , ( the_scope_of R6 )) ))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
given R3 being (bound_QC-variable of R1) , R7 being (Element of ( QC-WFF R1 )) such that
L29: R6 = ( All (R3 , R7) );

L30: R6 is  universal by L29 , QC_LANG1:def 21;
L31: R3 = ( bound_in R6 ) by L30 , L29 , QC_LANG1:def 27;
thus L32: thesis by L31 , L29 , L30 , QC_LANG1:def 28;
end;
theorem
L33: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( bound_in ( All (R3 , R6) ) ) = R3 & ( the_scope_of ( All (R3 , R6) ) ) = R6))))
proof
let R1 being QC-alphabet;
let R3 being (bound_QC-variable of R1);
let R6 being (Element of ( QC-WFF R1 ));
L34: ( All (R3 , R6) ) is  universal by QC_LANG1:def 21;
L35: ( All (R3 , R6) ) = ( All (( bound_in ( All (R3 , R6) ) ) , ( the_scope_of ( All (R3 , R6) ) )) ) by L34 , L28;
thus L36: thesis by L35 , L21;
end;
definition
let C1 being QC-alphabet;
func FALSUM C1 -> (QC-formula of C1) equals 
( 'not' ( VERUM C1 ) );
correctness;
let C2 , C3 being (Element of ( QC-WFF C1 ));
func C2 => C3 -> (QC-formula of C1) equals 
( 'not' ( C2 '&' ( 'not' C3 ) ) );
correctness;
func C2 'or' C3 -> (QC-formula of C1) equals 
( 'not' ( ( 'not' C2 ) '&' ( 'not' C3 ) ) );
correctness;
end;
definition
let C4 being QC-alphabet;
let C5 , C6 being (Element of ( QC-WFF C4 ));
func C5 <=> C6 -> (QC-formula of C4) equals 
( ( C5 => C6 ) '&' ( C6 => C5 ) );
correctness;
end;
definition
let C7 being QC-alphabet;
let C8 being (bound_QC-variable of C7);
let C9 being (Element of ( QC-WFF C7 ));
func Ex (C8 , C9) -> (QC-formula of C7) equals 
( 'not' ( All (C8 , ( 'not' C9 )) ) );
correctness;
end;
theorem
L40: (for R1 being QC-alphabet holds (( FALSUM R1 ) is  negative & ( the_argument_of ( FALSUM R1 ) ) = ( VERUM R1 ))) by L1 , QC_LANG1:def 19;
theorem
L41: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds ( R6 'or' R7 ) = ( ( 'not' R6 ) => R7 ))));
theorem
L42: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R10 being (Element of ( QC-WFF R1 )) holds (( R6 'or' R7 ) = ( R8 'or' R10 ) implies (R6 = R8 & R7 = R10)))))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R8 being (Element of ( QC-WFF R1 ));
let R10 being (Element of ( QC-WFF R1 ));
assume L43: ( R6 'or' R7 ) = ( R8 'or' R10 );
L44: ( ( 'not' R6 ) '&' ( 'not' R7 ) ) = ( ( 'not' R8 ) '&' ( 'not' R10 ) ) by L43 , FINSEQ_1:33;
L45: (( 'not' R6 ) = ( 'not' R8 ) & ( 'not' R7 ) = ( 'not' R10 )) by L44 , L4;
thus L46: thesis by L45 , FINSEQ_1:33;
end;
theorem
L47: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R10 being (Element of ( QC-WFF R1 )) holds (( R6 => R7 ) = ( R8 => R10 ) implies (R6 = R8 & R7 = R10)))))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R8 being (Element of ( QC-WFF R1 ));
let R10 being (Element of ( QC-WFF R1 ));
assume L48: ( R6 => R7 ) = ( R8 => R10 );
L49: ( R6 '&' ( 'not' R7 ) ) = ( R8 '&' ( 'not' R10 ) ) by L48 , FINSEQ_1:33;
thus L50: R6 = R8 by L49 , L4;
L51: ( 'not' R7 ) = ( 'not' R10 ) by L49 , L4;
thus L52: thesis by L51 , FINSEQ_1:33;
end;
theorem
L53: (for R1 being QC-alphabet holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R10 being (Element of ( QC-WFF R1 )) holds (( R6 <=> R7 ) = ( R8 <=> R10 ) implies (R6 = R8 & R7 = R10)))))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R8 being (Element of ( QC-WFF R1 ));
let R10 being (Element of ( QC-WFF R1 ));
assume L54: ( R6 <=> R7 ) = ( R8 <=> R10 );
L55: ( R6 => R7 ) = ( R8 => R10 ) by L54 , L4;
thus L56: thesis by L55 , L47;
end;
theorem
L57: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (( Ex (R3 , R6) ) = ( Ex (R4 , R7) ) implies (R3 = R4 & R6 = R7)))))))
proof
let R1 being QC-alphabet;
let R3 being (bound_QC-variable of R1);
let R4 being (bound_QC-variable of R1);
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
assume L58: ( Ex (R3 , R6) ) = ( Ex (R4 , R7) );
L59: ( All (R3 , ( 'not' R6 )) ) = ( All (R4 , ( 'not' R7 )) ) by L58 , FINSEQ_1:33;
L60: ( 'not' R6 ) = ( 'not' R7 ) by L59 , L21;
thus L61: thesis by L60 , L59 , L21 , FINSEQ_1:33;
end;
definition
let C10 being QC-alphabet;
let C11 , C12 being (bound_QC-variable of C10);
let C13 being (Element of ( QC-WFF C10 ));
func All (C11 , C12 , C13) -> (QC-formula of C10) equals 
( All (C11 , ( All (C12 , C13) )) );
correctness;
func Ex (C11 , C12 , C13) -> (QC-formula of C10) equals 
( Ex (C11 , ( Ex (C12 , C13) )) );
correctness;
end;
theorem
L63: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R4 , R6) ) = ( All (R3 , ( All (R4 , R6) )) ) & ( Ex (R3 , R4 , R6) ) = ( Ex (R3 , ( Ex (R4 , R6) )) ))))));
theorem
L64: (for R1 being QC-alphabet holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R9 being (Element of ( QC-WFF R1 )) holds (for B1 , B2 , B3 , B4 being (bound_QC-variable of R1) holds (( All (B1 , B3 , R8) ) = ( All (B2 , B4 , R9) ) implies (B1 = B2 & B3 = B4 & R8 = R9))))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( QC-WFF R1 ));
let R9 being (Element of ( QC-WFF R1 ));
let C14 , C15 , C16 , C17 being (bound_QC-variable of R1);
assume that
L65: ( All (C14 , C16 , R8) ) = ( All (C15 , C17 , R9) );
thus L66: C14 = C15 by L65 , L21;
L67: ( All (C16 , R8) ) = ( All (C17 , R9) ) by L65 , L21;
thus L68: thesis by L67 , L21;
end;
theorem
L69: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R4 , R6) ) = ( All (R5 , R7) ) implies (R3 = R5 & ( All (R4 , R6) ) = R7)))))))) by L21;
theorem
L70: (for R1 being QC-alphabet holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R9 being (Element of ( QC-WFF R1 )) holds (for B5 , B6 , B7 , B8 being (bound_QC-variable of R1) holds (( Ex (B5 , B7 , R8) ) = ( Ex (B6 , B8 , R9) ) implies (B5 = B6 & B7 = B8 & R8 = R9))))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( QC-WFF R1 ));
let R9 being (Element of ( QC-WFF R1 ));
let C18 , C19 , C20 , C21 being (bound_QC-variable of R1);
assume that
L71: ( Ex (C18 , C20 , R8) ) = ( Ex (C19 , C21 , R9) );
thus L72: C18 = C19 by L71 , L57;
L73: ( Ex (C20 , R8) ) = ( Ex (C21 , R9) ) by L71 , L57;
thus L74: thesis by L73 , L57;
end;
theorem
L75: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (( Ex (R3 , R4 , R6) ) = ( Ex (R5 , R7) ) implies (R3 = R5 & ( Ex (R4 , R6) ) = R7)))))))) by L57;
theorem
L76: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R4 , R6) ) is  universal & ( bound_in ( All (R3 , R4 , R6) ) ) = R3 & ( the_scope_of ( All (R3 , R4 , R6) ) ) = ( All (R4 , R6) )))))) by L33 , QC_LANG1:def 21;
definition
let C22 being QC-alphabet;
let C23 , C24 , C25 being (bound_QC-variable of C22);
let C26 being (Element of ( QC-WFF C22 ));
func All (C23 , C24 , C25 , C26) -> (QC-formula of C22) equals 
( All (C23 , ( All (C24 , C25 , C26) )) );
correctness;
func Ex (C23 , C24 , C25 , C26) -> (QC-formula of C22) equals 
( Ex (C23 , ( Ex (C24 , C25 , C26) )) );
correctness;
end;
theorem
L78: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R4 , R5 , R6) ) = ( All (R3 , ( All (R4 , R5 , R6) )) ) & ( Ex (R3 , R4 , R5 , R6) ) = ( Ex (R3 , ( Ex (R4 , R5 , R6) )) )))))));
theorem
L79: (for R1 being QC-alphabet holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R9 being (Element of ( QC-WFF R1 )) holds (for B9 , B10 , B11 , B12 , B13 , B14 being (bound_QC-variable of R1) holds (( All (B9 , B11 , B13 , R8) ) = ( All (B10 , B12 , B14 , R9) ) implies (B9 = B10 & B11 = B12 & B13 = B14 & R8 = R9))))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( QC-WFF R1 ));
let R9 being (Element of ( QC-WFF R1 ));
let C27 , C28 , C29 , C30 , C31 , C32 being (bound_QC-variable of R1);
assume that
L80: ( All (C27 , C29 , C31 , R8) ) = ( All (C28 , C30 , C32 , R9) );
thus L81: C27 = C28 by L80 , L21;
L82: ( All (C29 , C31 , R8) ) = ( All (C30 , C32 , R9) ) by L80 , L21;
thus L83: thesis by L82 , L64;
end;
theorem
L84: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R12 being (bound_QC-variable of R1) holds (( All (R3 , R4 , R5 , R6) ) = ( All (R12 , R7) ) implies (R3 = R12 & ( All (R4 , R5 , R6) ) = R7))))))))) by L21;
theorem
L85: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R11 being (bound_QC-variable of R1) holds (for R12 being (bound_QC-variable of R1) holds (( All (R3 , R4 , R5 , R6) ) = ( All (R12 , R11 , R7) ) implies (R3 = R12 & R4 = R11 & ( All (R5 , R6) ) = R7))))))))))
proof
let R1 being QC-alphabet;
let R3 being (bound_QC-variable of R1);
let R4 being (bound_QC-variable of R1);
let R5 being (bound_QC-variable of R1);
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R11 being (bound_QC-variable of R1);
let R12 being (bound_QC-variable of R1);
assume L86: ( All (R3 , R4 , R5 , R6) ) = ( All (R12 , R11 , R7) );
thus L87: R3 = R12 by L86 , L21;
L88: ( All (R4 , R5 , R6) ) = ( All (R11 , R7) ) by L86 , L21;
thus L89: thesis by L88 , L21;
end;
theorem
L90: (for R1 being QC-alphabet holds (for R8 being (Element of ( QC-WFF R1 )) holds (for R9 being (Element of ( QC-WFF R1 )) holds (for B15 , B16 , B17 , B18 , B19 , B20 being (bound_QC-variable of R1) holds (( Ex (B15 , B17 , B19 , R8) ) = ( Ex (B16 , B18 , B20 , R9) ) implies (B15 = B16 & B17 = B18 & B19 = B20 & R8 = R9))))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( QC-WFF R1 ));
let R9 being (Element of ( QC-WFF R1 ));
let C33 , C34 , C35 , C36 , C37 , C38 being (bound_QC-variable of R1);
assume that
L91: ( Ex (C33 , C35 , C37 , R8) ) = ( Ex (C34 , C36 , C38 , R9) );
thus L92: C33 = C34 by L91 , L57;
L93: ( Ex (C35 , C37 , R8) ) = ( Ex (C36 , C38 , R9) ) by L91 , L57;
thus L94: thesis by L93 , L70;
end;
theorem
L95: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R12 being (bound_QC-variable of R1) holds (( Ex (R3 , R4 , R5 , R6) ) = ( Ex (R12 , R7) ) implies (R3 = R12 & ( Ex (R4 , R5 , R6) ) = R7))))))))) by L57;
theorem
L96: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (for R7 being (Element of ( QC-WFF R1 )) holds (for R11 being (bound_QC-variable of R1) holds (for R12 being (bound_QC-variable of R1) holds (( Ex (R3 , R4 , R5 , R6) ) = ( Ex (R12 , R11 , R7) ) implies (R3 = R12 & R4 = R11 & ( Ex (R5 , R6) ) = R7))))))))))
proof
let R1 being QC-alphabet;
let R3 being (bound_QC-variable of R1);
let R4 being (bound_QC-variable of R1);
let R5 being (bound_QC-variable of R1);
let R6 being (Element of ( QC-WFF R1 ));
let R7 being (Element of ( QC-WFF R1 ));
let R11 being (bound_QC-variable of R1);
let R12 being (bound_QC-variable of R1);
assume L97: ( Ex (R3 , R4 , R5 , R6) ) = ( Ex (R12 , R11 , R7) );
thus L98: R3 = R12 by L97 , L57;
L99: ( Ex (R4 , R5 , R6) ) = ( Ex (R11 , R7) ) by L97 , L57;
thus L100: thesis by L99 , L57;
end;
theorem
L101: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( All (R3 , R4 , R5 , R6) ) is  universal & ( bound_in ( All (R3 , R4 , R5 , R6) ) ) = R3 & ( the_scope_of ( All (R3 , R4 , R5 , R6) ) ) = ( All (R4 , R5 , R6) ))))))) by L33 , QC_LANG1:def 21;
definition
let C39 being QC-alphabet;
let C40 being (Element of ( QC-WFF C39 ));
attr C40 is  disjunctive
means
(ex B21 , B22 being (Element of ( QC-WFF C39 )) st C40 = ( B21 'or' B22 ));
attr C40 is  conditional
means
:L102: (ex B23 , B24 being (Element of ( QC-WFF C39 )) st C40 = ( B23 => B24 ));
attr C40 is  biconditional
means
(ex B25 , B26 being (Element of ( QC-WFF C39 )) st C40 = ( B25 <=> B26 ));
attr C40 is  existential
means
:L103: (ex B27 being (bound_QC-variable of C39) st (ex B28 being (Element of ( QC-WFF C39 )) st C40 = ( Ex (B27 , B28) )));
end;
theorem
L105: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R4 being (bound_QC-variable of R1) holds (for R5 being (bound_QC-variable of R1) holds (for R6 being (Element of ( QC-WFF R1 )) holds (( Ex (R3 , R4 , R6) ) is  existential & ( Ex (R3 , R4 , R5 , R6) ) is  existential)))))) by L103;
definition
let C41 being QC-alphabet;
let C42 being (Element of ( QC-WFF C41 ));
func the_left_disjunct_of C42 -> (QC-formula of C41) equals 
( the_argument_of ( the_left_argument_of ( the_argument_of C42 ) ) );
correctness;
func the_right_disjunct_of C42 -> (QC-formula of C41) equals 
( the_argument_of ( the_right_argument_of ( the_argument_of C42 ) ) );
correctness;
func the_antecedent_of C42 -> (QC-formula of C41) equals 
( the_left_argument_of ( the_argument_of C42 ) );
correctness;
end;
notation
let C43 being QC-alphabet;
let C44 being (Element of ( QC-WFF C43 ));
synonym the_consequent_of C44 for the_right_disjunct_of C44;
end;
definition
let C45 being QC-alphabet;
let C46 being (Element of ( QC-WFF C45 ));
func the_left_side_of C46 -> (QC-formula of C45) equals 
( the_antecedent_of ( the_left_argument_of C46 ) );
correctness;
func the_right_side_of C46 -> (QC-formula of C45) equals 
( the_consequent_of ( the_left_argument_of C46 ) );
correctness;
end;
theorem
L109: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (( the_left_disjunct_of ( R13 'or' R14 ) ) = R13 & ( the_right_disjunct_of ( R13 'or' R14 ) ) = R14 & ( the_argument_of ( R13 'or' R14 ) ) = ( ( 'not' R13 ) '&' ( 'not' R14 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L110: ( the_left_disjunct_of ( R13 'or' R14 ) ) = ( the_argument_of ( the_left_argument_of ( ( 'not' R13 ) '&' ( 'not' R14 ) ) ) ) by L1
.= ( the_argument_of ( 'not' R13 ) ) by L18
.= R13 by L1;
thus L111: ( the_right_disjunct_of ( R13 'or' R14 ) ) = ( the_argument_of ( the_right_argument_of ( ( 'not' R13 ) '&' ( 'not' R14 ) ) ) ) by L1
.= ( the_argument_of ( 'not' R14 ) ) by L18
.= R14 by L1;
thus L112: thesis by L1;
end;
theorem
L113: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (( the_antecedent_of ( R13 => R14 ) ) = R13 & ( the_consequent_of ( R13 => R14 ) ) = R14 & ( the_argument_of ( R13 => R14 ) ) = ( R13 '&' ( 'not' R14 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L114: ( the_antecedent_of ( R13 => R14 ) ) = ( the_left_argument_of ( R13 '&' ( 'not' R14 ) ) ) by L1
.= R13 by L18;
thus L115: ( the_consequent_of ( R13 => R14 ) ) = ( the_argument_of ( the_right_argument_of ( R13 '&' ( 'not' R14 ) ) ) ) by L1
.= ( the_argument_of ( 'not' R14 ) ) by L18
.= R14 by L1;
thus L116: thesis by L1;
end;
theorem
L117: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (( the_left_side_of ( R13 <=> R14 ) ) = R13 & ( the_right_side_of ( R13 <=> R14 ) ) = R14 & ( the_left_argument_of ( R13 <=> R14 ) ) = ( R13 => R14 ) & ( the_right_argument_of ( R13 <=> R14 ) ) = ( R14 => R13 )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
L118: (( the_antecedent_of ( R13 => R14 ) ) = R13 & ( the_consequent_of ( R13 => R14 ) ) = R14) by L113;
thus L119: thesis by L118 , L18;
end;
theorem
L120: (for R1 being QC-alphabet holds (for R3 being (bound_QC-variable of R1) holds (for R15 being (Element of ( QC-WFF R1 )) holds ( the_argument_of ( Ex (R3 , R15) ) ) = ( All (R3 , ( 'not' R15 )) )))) by L1;
theorem
L121: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  disjunctive implies (R15 is  conditional & R15 is  negative & ( the_argument_of R15 ) is  conjunctive & ( the_left_argument_of ( the_argument_of R15 ) ) is  negative & ( the_right_argument_of ( the_argument_of R15 ) ) is  negative))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L122: R15 = ( R13 'or' R14 );

L123: ( R13 'or' R14 ) = ( ( 'not' R13 ) => R14 );
thus L124: R15 is  conditional by L123 , L122 , L102;
thus L125: R15 is  negative by L122 , QC_LANG1:def 19;
L126: ( the_argument_of R15 ) = ( ( 'not' R13 ) '&' ( 'not' R14 ) ) by L122 , L1;
thus L127: ( the_argument_of R15 ) is  conjunctive by L126 , QC_LANG1:def 20;
L128: (( the_left_argument_of ( the_argument_of R15 ) ) = ( 'not' R13 ) & ( the_right_argument_of ( the_argument_of R15 ) ) = ( 'not' R14 )) by L126 , L18;
thus L129: thesis by L128 , QC_LANG1:def 19;
end;
theorem
L130: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  conditional implies (R15 is  negative & ( the_argument_of R15 ) is  conjunctive & ( the_right_argument_of ( the_argument_of R15 ) ) is  negative))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L131: R15 = ( R13 => R14 );

L132: (( the_argument_of ( 'not' ( R13 '&' ( 'not' R14 ) ) ) ) = ( R13 '&' ( 'not' R14 ) ) & ( the_right_argument_of ( R13 '&' ( 'not' R14 ) ) ) = ( 'not' R14 )) by L1 , L18;
thus L133: thesis by L132 , L131 , QC_LANG1:def 19 , QC_LANG1:def 20;
end;
theorem
L134: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  biconditional implies (R15 is  conjunctive & ( the_left_argument_of R15 ) is  conditional & ( the_right_argument_of R15 ) is  conditional))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L135: R15 = ( R13 <=> R14 );

L136: (( the_left_argument_of ( ( R13 => R14 ) '&' ( R14 => R13 ) ) ) = ( R13 => R14 ) & ( the_right_argument_of ( ( R13 => R14 ) '&' ( R14 => R13 ) ) ) = ( R14 => R13 )) by L18;
thus L137: thesis by L136 , L135 , L102 , QC_LANG1:def 20;
end;
theorem
L138: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  existential implies (R15 is  negative & ( the_argument_of R15 ) is  universal & ( the_scope_of ( the_argument_of R15 ) ) is  negative))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R3 being (bound_QC-variable of R1) , R16 being (Element of ( QC-WFF R1 )) such that
L139: R15 = ( Ex (R3 , R16) );

L140: (( the_argument_of ( 'not' ( All (R3 , ( 'not' R16 )) ) ) ) = ( All (R3 , ( 'not' R16 )) ) & ( the_scope_of ( All (R3 , ( 'not' R16 )) ) ) = ( 'not' R16 )) by L1 , L33;
thus L141: thesis by L140 , L139 , QC_LANG1:def 19 , QC_LANG1:def 21;
end;
theorem
L142: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  disjunctive implies R15 = ( ( the_left_disjunct_of R15 ) 'or' ( the_right_disjunct_of R15 ) ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L143: R15 = ( R13 'or' R14 );

L144: ( the_left_disjunct_of R15 ) = R13 by L143 , L109;
thus L145: thesis by L144 , L143 , L109;
end;
theorem
L146: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  conditional implies R15 = ( ( the_antecedent_of R15 ) => ( the_consequent_of R15 ) ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L147: R15 = ( R13 => R14 );

L148: ( the_antecedent_of R15 ) = R13 by L147 , L113;
thus L149: thesis by L148 , L147 , L113;
end;
theorem
L150: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  biconditional implies R15 = ( ( the_left_side_of R15 ) <=> ( the_right_side_of R15 ) ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R13 being (Element of ( QC-WFF R1 )) , R14 being (Element of ( QC-WFF R1 )) such that
L151: R15 = ( R13 <=> R14 );

L152: ( the_left_side_of R15 ) = R13 by L151 , L117;
thus L153: thesis by L152 , L151 , L117;
end;
theorem
L154: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  existential implies R15 = ( Ex (( bound_in ( the_argument_of R15 ) ) , ( the_argument_of ( the_scope_of ( the_argument_of R15 ) ) )) ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
given R3 being (bound_QC-variable of R1) , R16 being (Element of ( QC-WFF R1 )) such that
L155: R15 = ( Ex (R3 , R16) );

L156: ( the_argument_of ( 'not' R16 ) ) = R16 by L1;
L157: (( the_argument_of ( 'not' ( All (R3 , ( 'not' R16 )) ) ) ) = ( All (R3 , ( 'not' R16 )) ) & ( the_scope_of ( All (R3 , ( 'not' R16 )) ) ) = ( 'not' R16 )) by L1 , L33;
thus L158: thesis by L157 , L155 , L156 , L33;
end;
definition
let C47 being QC-alphabet;
let C48 , C49 being (Element of ( QC-WFF C47 ));
pred C48 is_immediate_constituent_of C49
means
:L159: (C49 = ( 'not' C48 ) or (ex B29 being (Element of ( QC-WFF C47 )) st (C49 = ( C48 '&' B29 ) or C49 = ( B29 '&' C48 ))) or (ex B30 being (bound_QC-variable of C47) st C49 = ( All (B30 , C48) )))
;end;
theorem
L161: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (not R15 is_immediate_constituent_of ( VERUM R1 ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
L162: (not (( VERUM R1 ) is  negative or ( VERUM R1 ) is  conjunctive or ( VERUM R1 ) is  universal)) by QC_LANG1:20;
L163: (not (( VERUM R1 ) = ( 'not' R15 ) or (ex R16 being (Element of ( QC-WFF R1 )) st (( VERUM R1 ) = ( R15 '&' R16 ) or ( VERUM R1 ) = ( R16 '&' R15 ))) or (ex B31 being (bound_QC-variable of R1) st ( VERUM R1 ) = ( All (B31 , R15) )))) by L162 , QC_LANG1:def 19 , QC_LANG1:def 20 , QC_LANG1:def 21;
thus L164: thesis by L163 , L159;
end;
theorem
L165: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R20 being (Element of ( NAT )) holds (for R23 being (QC-pred_symbol of R20 , R1) holds (for R24 being (QC-variable_list of R20 , R1) holds (not R15 is_immediate_constituent_of ( R23 ! R24 )))))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
let R20 being (Element of ( NAT ));
let R23 being (QC-pred_symbol of R20 , R1);
let R24 being (QC-variable_list of R20 , R1);
assume L166: (not thesis);
L167: ( R23 ! R24 ) is  atomic by QC_LANG1:def 18;
L168: ( ( ( @ ( R23 ! R24 ) ) . 1 ) `1 ) <> 3 by L167 , QC_LANG1:19;
L169: ( ( ( @ ( R23 ! R24 ) ) . 1 ) `1 ) <> 2 by L167 , QC_LANG1:19;
L170:
now
given C50 being (Element of ( QC-WFF R1 )) such that
L171: (( R23 ! R24 ) = ( R15 '&' C50 ) or ( R23 ! R24 ) = ( C50 '&' R15 ));

L172: (( R15 '&' C50 ) is  conjunctive & ( C50 '&' R15 ) is  conjunctive) by QC_LANG1:def 20;
thus L173: contradiction by L172 , L169 , L171 , QC_LANG1:18;
end;
L174: ( 'not' R15 ) is  negative by QC_LANG1:def 19;
L175: ( ( ( @ ( 'not' R15 ) ) . 1 ) `1 ) = 1 by L174 , QC_LANG1:18;
L176: ( ( ( @ ( R23 ! R24 ) ) . 1 ) `1 ) <> 1 by L167 , QC_LANG1:19;
consider R19 being (bound_QC-variable of R1) such that L177: ( R23 ! R24 ) = ( All (R19 , R15) ) by L176 , L166 , L175 , L170 , L159;
L178: ( All (R19 , R15) ) is  universal by QC_LANG1:def 21;
thus L179: contradiction by L178 , L168 , L177 , QC_LANG1:18;
end;
theorem
L180: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R13 is_immediate_constituent_of ( 'not' R15 ) iff R13 = R15))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
thus L181: (R13 is_immediate_constituent_of ( 'not' R15 ) implies R13 = R15)
proof
L182: ( 'not' R15 ) is  negative by QC_LANG1:def 19;
L183: ( ( ( @ ( 'not' R15 ) ) . 1 ) `1 ) = 1 by L182 , QC_LANG1:18;
L184:
now
given R16 being (Element of ( QC-WFF R1 )) such that
L185: (( 'not' R15 ) = ( R13 '&' R16 ) or ( 'not' R15 ) = ( R16 '&' R13 ));

L186: (( R13 '&' R16 ) is  conjunctive & ( R16 '&' R13 ) is  conjunctive) by QC_LANG1:def 20;
thus L187: contradiction by L186 , L183 , L185 , QC_LANG1:18;
end;
L188:
now
given R17 being (bound_QC-variable of R1) such that
L189: ( 'not' R15 ) = ( All (R17 , R13) );

L190: ( All (R17 , R13) ) is  universal by QC_LANG1:def 21;
thus L191: contradiction by L190 , L183 , L189 , QC_LANG1:18;
end;
assume L192: (( 'not' R15 ) = ( 'not' R13 ) or (ex R16 being (Element of ( QC-WFF R1 )) st (( 'not' R15 ) = ( R13 '&' R16 ) or ( 'not' R15 ) = ( R16 '&' R13 ))) or (ex R17 being (bound_QC-variable of R1) st ( 'not' R15 ) = ( All (R17 , R13) )));
thus L193: thesis by L192 , L184 , L188 , FINSEQ_1:33;
end;

thus L194: thesis by L159;
end;
theorem
L195: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_immediate_constituent_of ( FALSUM R1 ) iff R15 = ( VERUM R1 )))) by L180;
theorem
L196: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R13 is_immediate_constituent_of ( R14 '&' R15 ) iff (R13 = R14 or R13 = R15))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
thus L197: (R13 is_immediate_constituent_of ( R14 '&' R15 ) implies (R13 = R14 or R13 = R15))
proof
L198: ( R14 '&' R15 ) is  conjunctive by QC_LANG1:def 20;
L199: ( ( ( @ ( R14 '&' R15 ) ) . 1 ) `1 ) = 2 by L198 , QC_LANG1:18;
L200:
now
L201: ( 'not' R13 ) is  negative by QC_LANG1:def 19;
assume L202: ( R14 '&' R15 ) = ( 'not' R13 );
thus L203: contradiction by L202 , L199 , L201 , QC_LANG1:18;
end;
L204:
now
given R17 being (bound_QC-variable of R1) such that
L205: ( R14 '&' R15 ) = ( All (R17 , R13) );

L206: ( All (R17 , R13) ) is  universal by QC_LANG1:def 21;
thus L207: contradiction by L206 , L199 , L205 , QC_LANG1:18;
end;
assume L208: (( R14 '&' R15 ) = ( 'not' R13 ) or (ex R16 being (Element of ( QC-WFF R1 )) st (( R14 '&' R15 ) = ( R13 '&' R16 ) or ( R14 '&' R15 ) = ( R16 '&' R13 ))) or (ex R17 being (bound_QC-variable of R1) st ( R14 '&' R15 ) = ( All (R17 , R13) )));
thus L209: thesis by L208 , L200 , L204 , L4;
end;

assume L210: (R13 = R14 or R13 = R15);
thus L211: thesis by L210 , L159;
end;
theorem
L212: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R17 being (bound_QC-variable of R1) holds (R13 is_immediate_constituent_of ( All (R17 , R15) ) iff R13 = R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
let R17 being (bound_QC-variable of R1);
thus L213: (R13 is_immediate_constituent_of ( All (R17 , R15) ) implies R13 = R15)
proof
L214: ( All (R17 , R15) ) is  universal by QC_LANG1:def 21;
L215: ( ( ( @ ( All (R17 , R15) ) ) . 1 ) `1 ) = 3 by L214 , QC_LANG1:18;
L216:
now
L217: ( 'not' R13 ) is  negative by QC_LANG1:def 19;
assume L218: ( All (R17 , R15) ) = ( 'not' R13 );
thus L219: contradiction by L218 , L215 , L217 , QC_LANG1:18;
end;
L220:
now
given R14 being (Element of ( QC-WFF R1 )) such that
L221: (( All (R17 , R15) ) = ( R13 '&' R14 ) or ( All (R17 , R15) ) = ( R14 '&' R13 ));

L222: (( R13 '&' R14 ) is  conjunctive & ( R14 '&' R13 ) is  conjunctive) by QC_LANG1:def 20;
thus L223: contradiction by L222 , L215 , L221 , QC_LANG1:18;
end;
assume L224: (( All (R17 , R15) ) = ( 'not' R13 ) or (ex R16 being (Element of ( QC-WFF R1 )) st (( All (R17 , R15) ) = ( R13 '&' R16 ) or ( All (R17 , R15) ) = ( R16 '&' R13 ))) or (ex R18 being (bound_QC-variable of R1) st ( All (R17 , R15) ) = ( All (R18 , R13) )));
thus L225: thesis by L224 , L216 , L220 , L21;
end;

thus L226: thesis by L159;
end;
theorem
L227: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  atomic implies (not R13 is_immediate_constituent_of R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L228: (ex R20 being (Element of ( NAT )) st (ex R23 being (QC-pred_symbol of R20 , R1) st (ex R24 being (QC-variable_list of R20 , R1) st R15 = ( R23 ! R24 ))));
thus L229: thesis by L228 , L165;
end;
theorem
L230: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  negative implies (R13 is_immediate_constituent_of R15 iff R13 = ( the_argument_of R15 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L231: R15 is  negative;
L232: R15 = ( 'not' ( the_argument_of R15 ) ) by L231 , QC_LANG1:def 24;
thus L233: thesis by L232 , L180;
end;
theorem
L234: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  conjunctive implies (R13 is_immediate_constituent_of R15 iff (R13 = ( the_left_argument_of R15 ) or R13 = ( the_right_argument_of R15 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L235: R15 is  conjunctive;
L236: R15 = ( ( the_left_argument_of R15 ) '&' ( the_right_argument_of R15 ) ) by L235 , L13;
thus L237: thesis by L236 , L196;
end;
theorem
L238: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  universal implies (R13 is_immediate_constituent_of R15 iff R13 = ( the_scope_of R15 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L239: R15 is  universal;
L240: R15 = ( All (( bound_in R15 ) , ( the_scope_of R15 )) ) by L239 , L28;
thus L241: thesis by L240 , L212;
end;
definition
let C51 being QC-alphabet;
let C52 , C53 being (Element of ( QC-WFF C51 ));
pred C52 is_subformula_of C53
means
:L242: (ex R21 being (Element of ( NAT )) st (ex R25 being FinSequence st (1 <= R21 & ( len R25 ) = R21 & ( R25 . 1 ) = C52 & ( R25 . R21 ) = C53 & (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B32 , B33 being (Element of ( QC-WFF C51 )) st (( R25 . R20 ) = B32 & ( R25 . ( R20 + 1 ) ) = B33 & B32 is_immediate_constituent_of B33)))))))
;reflexivity
proof
let C54 being (Element of ( QC-WFF C51 ));
reconsider D1 = <* C54 *> as FinSequence;
take 1;
take D1;
thus L243: (1 <= 1 & ( len D1 ) = 1 & ( D1 . 1 ) = C54 & ( D1 . 1 ) = C54) by FINSEQ_1:40;
let R20 being (Element of ( NAT ));
assume L244: (1 <= R20 & R20 < 1);
thus L245: thesis by L244;
end;
end;
definition
let C55 being QC-alphabet;
let C56 , C57 being (Element of ( QC-WFF C55 ));
pred C56 is_proper_subformula_of C57
means
:L247: (C56 is_subformula_of C57 & C56 <> C57)
;irreflexivity
;
end;
theorem
L249: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_immediate_constituent_of R13 implies ( len ( @ R15 ) ) < ( len ( @ R13 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
L250: (R13 = ( VERUM R1 ) or R13 is  atomic or R13 is  negative or R13 is  conjunctive or R13 is  universal) by QC_LANG1:9;
assume L251: R15 is_immediate_constituent_of R13;
L252: ((R13 is  negative & R15 = ( the_argument_of R13 )) or (R13 is  conjunctive & R15 = ( the_left_argument_of R13 )) or (R13 is  conjunctive & R15 = ( the_right_argument_of R13 )) or (R13 is  universal & R15 = ( the_scope_of R13 ))) by L251 , L250 , L161 , L227 , L230 , L234 , L238;
thus L253: thesis by L252 , QC_LANG1:14 , QC_LANG1:15 , QC_LANG1:16;
end;
theorem
L254: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_immediate_constituent_of R13 implies R15 is_subformula_of R13))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L255: R15 is_immediate_constituent_of R13;
take D2 = 2;
take D3 = <* R15 , R13 *>;
thus L256: 1 <= D2;
thus L257: ( len D3 ) = D2 by FINSEQ_1:44;
thus L258: (( D3 . 1 ) = R15 & ( D3 . D2 ) = R13) by FINSEQ_1:44;
let R20 being (Element of ( NAT ));
assume that
L259: 1 <= R20
and
L260: R20 < D2;
take R15;
take R13;
L261: R20 < ( 1 + 1 ) by L260;
L262: R20 <= 1 by L261 , NAT_1:13;
L263: R20 = 1 by L262 , L259 , XXREAL_0:1;
thus L264: (( D3 . R20 ) = R15 & ( D3 . ( R20 + 1 ) ) = R13) by L263 , FINSEQ_1:44;
thus L265: thesis by L255;
end;
theorem
L266: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_immediate_constituent_of R13 implies R15 is_proper_subformula_of R13))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L267: R15 is_immediate_constituent_of R13;
thus L268: R15 is_subformula_of R13 by L267 , L254;
assume L269: R15 = R13;
L270: ( len ( @ R15 ) ) = ( len ( @ R13 ) ) by L269;
thus L271: contradiction by L270 , L267 , L249;
end;
theorem
L272: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_proper_subformula_of R13 implies ( len ( @ R15 ) ) < ( len ( @ R13 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
given R21 being (Element of ( NAT )) , R25 being FinSequence such that
L273: 1 <= R21
and
L274: ( len R25 ) = R21
and
L275: ( R25 . 1 ) = R15
and
L276: ( R25 . R21 ) = R13
and
L277: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B34 , B35 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B34 & ( R25 . ( R20 + 1 ) ) = B35 & B34 is_immediate_constituent_of B35))));

defpred S1[ (Element of ( NAT )) ] means ((1 <= $1 & $1 < R21) implies (for R16 being (Element of ( QC-WFF R1 )) holds (( R25 . ( $1 + 1 ) ) = R16 implies ( len ( @ R15 ) ) < ( len ( @ R16 ) ))));
L278: (for R20 being (Element of ( NAT )) holds (S1[ R20 ] implies S1[ ( R20 + 1 ) ]))
proof
let R20 being (Element of ( NAT ));
assume that
L279: ((1 <= R20 & R20 < R21) implies (for R16 being (Element of ( QC-WFF R1 )) holds (( R25 . ( R20 + 1 ) ) = R16 implies ( len ( @ R15 ) ) < ( len ( @ R16 ) ))))
and
L280: 1 <= ( R20 + 1 )
and
L281: ( R20 + 1 ) < R21;
consider C58 , C59 being (Element of ( QC-WFF R1 )) such that L282: ( R25 . ( R20 + 1 ) ) = C58 and L283: (( R25 . ( ( R20 + 1 ) + 1 ) ) = C59 & C58 is_immediate_constituent_of C59) by L277 , L280 , L281;
let R16 being (Element of ( QC-WFF R1 ));
assume that
L284: ( R25 . ( ( R20 + 1 ) + 1 ) ) = R16;
L285:
now
given C60 being Nat such that
L286: R20 = ( C60 + 1 );

L287: ( len ( @ R15 ) ) < ( len ( @ C58 ) ) by L279 , L281 , L282 , L286 , NAT_1:11 , NAT_1:13;
thus L288: thesis by L287 , L284 , L283 , L249 , XXREAL_0:2;
end;
L289: (R20 = ( 0 ) implies ( len ( @ R15 ) ) < ( len ( @ R16 ) )) by L275 , L284 , L282 , L283 , L249;
thus L290: thesis by L289 , L285 , NAT_1:6;
end;
assume L291: R15 <> R13;
L292: 1 < R21 by L291 , L273 , L275 , L276 , XXREAL_0:1;
L293: ( 1 + 1 ) <= R21 by L292 , NAT_1:13;
consider C61 being Nat such that L294: R21 = ( 2 + C61 ) by L293 , NAT_1:10;
L295: S1[ ( 0 ) ];
L296: (for R20 being (Element of ( NAT )) holds S1[ R20 ]) from NAT_1:sch 1(L295 , L278);
reconsider D4 = C61 as (Element of ( NAT )) by ORDINAL1:def 12;
L297: ( ( 1 + 1 ) + D4 ) = ( ( 1 + D4 ) + 1 );
L298: ( 1 + D4 ) < R21 by L297 , L294 , NAT_1:13;
thus L299: thesis by L298 , L276 , L296 , L294 , L297 , NAT_1:11;
end;
theorem
L300: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_proper_subformula_of R13 implies (ex R14 being (Element of ( QC-WFF R1 )) st R14 is_immediate_constituent_of R13)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
given R21 being (Element of ( NAT )) , R25 being FinSequence such that
L301: 1 <= R21
and
L302: ( len R25 ) = R21
and
L303: ( R25 . 1 ) = R15
and
L304: ( R25 . R21 ) = R13
and
L305: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B36 , B37 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B36 & ( R25 . ( R20 + 1 ) ) = B37 & B36 is_immediate_constituent_of B37))));

assume L306: R15 <> R13;
L307: 1 < R21 by L306 , L301 , L303 , L304 , XXREAL_0:1;
L308: ( 1 + 1 ) <= R21 by L307 , NAT_1:13;
consider C62 being Nat such that L309: R21 = ( 2 + C62 ) by L308 , NAT_1:10;
reconsider D5 = C62 as (Element of ( NAT )) by ORDINAL1:def 12;
L310: ( ( 1 + 1 ) + D5 ) = ( ( 1 + D5 ) + 1 );
L311: ( 1 + D5 ) < R21 by L310 , L309 , NAT_1:13;
consider C63 , C64 being (Element of ( QC-WFF R1 )) such that L312: ( R25 . ( 1 + D5 ) ) = C63 and L313: (( R25 . ( ( 1 + D5 ) + 1 ) ) = C64 & C63 is_immediate_constituent_of C64) by L311 , L305 , NAT_1:11;
take C63;
thus L314: thesis by L304 , L309 , L313;
end;
theorem
L315: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds ((R13 is_proper_subformula_of R14 & R14 is_proper_subformula_of R15) implies R13 is_proper_subformula_of R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L316: R13 is_proper_subformula_of R14
and
L317: R14 is_proper_subformula_of R15;
L318: R13 is_subformula_of R14 by L316 , L247;
consider R21 being (Element of ( NAT )), R25 being FinSequence such that L319: 1 <= R21 and L320: ( len R25 ) = R21 and L321: ( R25 . 1 ) = R13 and L322: ( R25 . R21 ) = R14 and L323: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B38 , B39 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B38 & ( R25 . ( R20 + 1 ) ) = B39 & B38 is_immediate_constituent_of B39)))) by L318 , L242;
L324: 1 < R21 by L316 , L319 , L321 , L322 , XXREAL_0:1;
L325: ( 1 + 1 ) <= R21 by L324 , NAT_1:13;
consider C65 being Nat such that L326: R21 = ( 2 + C65 ) by L325 , NAT_1:10;
L327: R14 is_subformula_of R15 by L317 , L247;
consider R22 being (Element of ( NAT )), R26 being FinSequence such that L328: 1 <= R22 and L329: ( len R26 ) = R22 and L330: ( R26 . 1 ) = R14 and L331: ( R26 . R22 ) = R15 and L332: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R22) implies (ex B40 , B41 being (Element of ( QC-WFF R1 )) st (( R26 . R20 ) = B40 & ( R26 . ( R20 + 1 ) ) = B41 & B40 is_immediate_constituent_of B41)))) by L327 , L242;
reconsider D6 = C65 as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider D7 = ( R25 | ( Seg ( 1 + D6 ) ) ) as FinSequence by FINSEQ_1:15;
thus L333: R13 is_subformula_of R15
proof
take D8 = ( ( 1 + D6 ) + R22 );
take D9 = ( D7 ^ R26 );
L334: ( ( ( 1 + D6 ) + R22 ) - ( 1 + D6 ) ) = R22;
L335: R22 <= ( R22 + ( 1 + D6 ) ) by NAT_1:11;
thus L336: 1 <= D8 by L335 , L328 , XXREAL_0:2;
L337: ( ( 1 + 1 ) + D6 ) = ( ( 1 + D6 ) + 1 );
L338: ( 1 + D6 ) <= R21 by L337 , L326 , NAT_1:11;
L339: ( len D7 ) = ( 1 + D6 ) by L338 , L320 , FINSEQ_1:17;
thus L340: ( len D9 ) = D8 by L339 , L329 , FINSEQ_1:22;
L341:
now
let C66 being (Element of ( NAT ));
assume L342: (1 <= C66 & C66 <= ( 1 + D6 ));
L343: C66 in ( Seg ( 1 + D6 ) ) by L342 , FINSEQ_1:1;
L344: C66 in ( dom D7 ) by L343 , L320 , L338 , FINSEQ_1:17;
L345: ( D9 . C66 ) = ( D7 . C66 ) by L344 , FINSEQ_1:def 7;
thus L346: ( D9 . C66 ) = ( R25 . C66 ) by L345 , L343 , FUNCT_1:49;
end;
L347: 1 <= ( 1 + D6 ) by NAT_1:11;
thus L348: ( D9 . 1 ) = R13 by L347 , L321 , L341;
L349: ( ( len D7 ) + 1 ) <= ( ( len D7 ) + R22 ) by L328 , XREAL_1:7;
L350: ( len D7 ) < D8 by L349 , L339 , NAT_1:13;
L351: ( D9 . D8 ) = ( R26 . ( D8 - ( len D7 ) ) ) by L350 , L340 , FINSEQ_1:24;
thus L352: ( D9 . D8 ) = R15 by L351 , L320 , L331 , L338 , L334 , FINSEQ_1:17;
let C67 being (Element of ( NAT ));
assume that
L353: 1 <= C67
and
L354: C67 < D8;
L355: ( C67 + ( 0 ) ) <= ( C67 + 1 ) by XREAL_1:7;
L356: 1 <= ( C67 + 1 ) by L355 , L353 , XXREAL_0:2;
L357:
now
assume L358: C67 < ( 1 + D6 );
L359: ( C67 + 1 ) <= ( 1 + D6 ) by L358 , NAT_1:13;
L360: ( C67 + 1 ) <= R21 by L359 , L338 , XXREAL_0:2;
L361: C67 < R21 by L360 , NAT_1:13;
consider C68 , C69 being (Element of ( QC-WFF R1 )) such that L362: (( R25 . C67 ) = C68 & ( R25 . ( C67 + 1 ) ) = C69 & C68 is_immediate_constituent_of C69) by L361 , L323 , L353;
take D10 = C68;
take D11 = C69;
thus L363: (( D9 . C67 ) = D10 & ( D9 . ( C67 + 1 ) ) = D11 & D10 is_immediate_constituent_of D11) by L341 , L353 , L356 , L358 , L359 , L362;
end;
L364:
now
L365: ( C67 + 1 ) <= D8 by L354 , NAT_1:13;
assume L366: ( 1 + D6 ) < C67;
L367: ( 1 + D6 ) < ( C67 + 1 ) by L366 , NAT_1:13;
L368: ( ( 1 + D6 ) + 1 ) <= C67 by L366 , NAT_1:13;
consider C70 being Nat such that L369: C67 = ( ( ( 1 + D6 ) + 1 ) + C70 ) by L368 , NAT_1:10;
reconsider D12 = C70 as (Element of ( NAT )) by ORDINAL1:def 12;
L370: ( C67 - ( 1 + D6 ) ) < ( D8 - ( 1 + D6 ) ) by L354 , XREAL_1:9;
consider C71 , C72 being (Element of ( QC-WFF R1 )) such that L371: (( R26 . ( 1 + D12 ) ) = C71 & ( R26 . ( ( 1 + D12 ) + 1 ) ) = C72 & C71 is_immediate_constituent_of C72) by L370 , L332 , L369 , NAT_1:11;
take D13 = C71;
take D14 = C72;
L372: ( ( ( 1 + D12 ) + ( 1 + D6 ) ) - ( 1 + D6 ) ) = ( ( ( 1 + D12 ) + ( 1 + D6 ) ) + ( - ( 1 + D6 ) ) );
L373: ( ( C67 + 1 ) - ( len D7 ) ) = ( 1 + ( C67 + ( - ( len D7 ) ) ) )
.= ( ( 1 + D12 ) + 1 ) by L320 , L338 , L369 , L372 , FINSEQ_1:17;
thus L374: (( D9 . C67 ) = D13 & ( D9 . ( C67 + 1 ) ) = D14 & D13 is_immediate_constituent_of D14) by L373 , L339 , L340 , L354 , L366 , L367 , L365 , L372 , L371 , FINSEQ_1:24;
end;
L375:
now
L376: (( C67 + 1 ) <= D8 & ( ( C67 + 1 ) - C67 ) = ( ( C67 + 1 ) + ( - C67 ) )) by L354 , NAT_1:13;
assume L377: C67 = ( 1 + D6 );
L378: C67 < ( ( 1 + D6 ) + 1 ) by L377 , NAT_1:13;
consider C73 , C74 being (Element of ( QC-WFF R1 )) such that L379: (( R25 . C67 ) = C73 & ( R25 . ( C67 + 1 ) ) = C74 & C73 is_immediate_constituent_of C74) by L378 , L323 , L326 , L353;
take D15 = C73;
take D16 = C74;
L380: ( 1 + D6 ) < ( C67 + 1 ) by L377 , NAT_1:13;
thus L381: (( D9 . C67 ) = D15 & ( D9 . ( C67 + 1 ) ) = D16 & D15 is_immediate_constituent_of D16) by L380 , L322 , L330 , L326 , L339 , L340 , L341 , L353 , L377 , L376 , L379 , FINSEQ_1:24;
end;
thus L382: thesis by L375 , L357 , L364 , XXREAL_0:1;
end;

L383: ( len ( @ R13 ) ) < ( len ( @ R14 ) ) by L316 , L272;
thus L384: thesis by L383 , L317 , L272;
end;
theorem
L385: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds ((R13 is_subformula_of R14 & R14 is_subformula_of R15) implies R13 is_subformula_of R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L386: R13 is_subformula_of R14
and
L387: R14 is_subformula_of R15;
L388:
now
assume L389: R13 <> R14;
L390: R13 is_proper_subformula_of R14 by L389 , L386 , L247;
L391:
now
assume L392: R14 <> R15;
L393: R14 is_proper_subformula_of R15 by L392 , L387 , L247;
L394: R13 is_proper_subformula_of R15 by L393 , L390 , L315;
thus L395: thesis by L394 , L247;
end;
thus L396: thesis by L391 , L386;
end;
thus L397: thesis by L388 , L387;
end;
theorem
L398: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds ((R14 is_subformula_of R15 & R15 is_subformula_of R14) implies R14 = R15))))
proof
let R1 being QC-alphabet;
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L399: R14 is_subformula_of R15
and
L400: R15 is_subformula_of R14;
assume L401: R14 <> R15;
L402: R14 is_proper_subformula_of R15 by L401 , L399 , L247;
L403: ( len ( @ R14 ) ) < ( len ( @ R15 ) ) by L402 , L272;
L404: R15 is_proper_subformula_of R14 by L400 , L401 , L247;
thus L405: contradiction by L404 , L403 , L272;
end;
theorem
L406: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (not (R14 is_proper_subformula_of R15 & R15 is_subformula_of R14)))))
proof
let R1 being QC-alphabet;
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L407: (R14 is_subformula_of R15 & R14 <> R15 & R15 is_subformula_of R14);
thus L408: contradiction by L407 , L398;
end;
theorem
L409: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (not (R14 is_proper_subformula_of R15 & R15 is_proper_subformula_of R14)))))
proof
let R1 being QC-alphabet;
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L410: R14 is_subformula_of R15
and
L411: R14 <> R15
and
L412: R15 is_proper_subformula_of R14;
thus L413: contradiction by L410 , L412 , L406;
end;
theorem
L414: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (not (R14 is_subformula_of R15 & R15 is_immediate_constituent_of R14))))) by L266 , L406;
theorem
L415: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (not (R14 is_proper_subformula_of R15 & R15 is_immediate_constituent_of R14)))))
proof
let R1 being QC-alphabet;
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L416: R14 is_subformula_of R15
and
L417: R14 <> R15
and
L418: R15 is_immediate_constituent_of R14;
thus L419: contradiction by L416 , L418 , L266 , L406;
end;
theorem
L420: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (((R13 is_proper_subformula_of R14 & R14 is_subformula_of R15) or (R13 is_subformula_of R14 & R14 is_proper_subformula_of R15) or (R13 is_subformula_of R14 & R14 is_immediate_constituent_of R15) or (R13 is_immediate_constituent_of R14 & R14 is_subformula_of R15) or (R13 is_proper_subformula_of R14 & R14 is_immediate_constituent_of R15) or (R13 is_immediate_constituent_of R14 & R14 is_proper_subformula_of R15)) implies R13 is_proper_subformula_of R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L421: ((R13 is_proper_subformula_of R14 & R14 is_subformula_of R15) or (R13 is_subformula_of R14 & R14 is_proper_subformula_of R15) or (R13 is_subformula_of R14 & R14 is_immediate_constituent_of R15) or (R13 is_immediate_constituent_of R14 & R14 is_subformula_of R15) or (R13 is_proper_subformula_of R14 & R14 is_immediate_constituent_of R15) or (R13 is_immediate_constituent_of R14 & R14 is_proper_subformula_of R15));
L422: (R13 is_subformula_of R14 & R14 is_subformula_of R15) by L421 , L247 , L254;
thus L423: R13 is_subformula_of R15 by L422 , L385;
thus L424: thesis by L421 , L406 , L414 , L415;
end;
theorem
L425: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (not R13 is_proper_subformula_of ( VERUM R1 ))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
assume L426: (not thesis);
consider R14 being (Element of ( QC-WFF R1 )) such that L427: R14 is_immediate_constituent_of ( VERUM R1 ) by L426 , L300;
thus L428: thesis by L427 , L161;
end;
theorem
L429: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R20 being (Element of ( NAT )) holds (for R23 being (QC-pred_symbol of R20 , R1) holds (for R24 being (QC-variable_list of R20 , R1) holds (not R13 is_proper_subformula_of ( R23 ! R24 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R20 being (Element of ( NAT ));
let R23 being (QC-pred_symbol of R20 , R1);
let R24 being (QC-variable_list of R20 , R1);
assume L430: R13 is_proper_subformula_of ( R23 ! R24 );
L431: (ex R14 being (Element of ( QC-WFF R1 )) st R14 is_immediate_constituent_of ( R23 ! R24 )) by L430 , L300;
thus L432: contradiction by L431 , L165;
end;
theorem
L433: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R13 is_subformula_of R15 iff R13 is_proper_subformula_of ( 'not' R15 )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
L434: R15 is_immediate_constituent_of ( 'not' R15 ) by L180;
thus L435: (R13 is_subformula_of R15 implies R13 is_proper_subformula_of ( 'not' R15 )) by L434 , L420;
given R21 being (Element of ( NAT )) , R25 being FinSequence such that
L436: 1 <= R21
and
L437: ( len R25 ) = R21
and
L438: ( R25 . 1 ) = R13
and
L439: ( R25 . R21 ) = ( 'not' R15 )
and
L440: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B42 , B43 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B42 & ( R25 . ( R20 + 1 ) ) = B43 & B42 is_immediate_constituent_of B43))));

assume L441: R13 <> ( 'not' R15 );
L442: 1 < R21 by L441 , L436 , L438 , L439 , XXREAL_0:1;
L443: ( 1 + 1 ) <= R21 by L442 , NAT_1:13;
consider C75 being Nat such that L444: R21 = ( 2 + C75 ) by L443 , NAT_1:10;
reconsider D17 = C75 as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider D18 = ( R25 | ( Seg ( 1 + D17 ) ) ) as FinSequence by FINSEQ_1:15;
take D19 = ( 1 + D17 );
take D18;
thus L445: 1 <= D19 by NAT_1:11;
L446: ( 1 + D17 ) <= ( ( 1 + D17 ) + 1 ) by NAT_1:11;
thus L447: ( len D18 ) = D19 by L446 , L437 , L444 , FINSEQ_1:17;
L448:
now
let C76 being (Element of ( NAT ));
assume L449: (1 <= C76 & C76 <= D19);
L450: C76 in ( Seg ( 1 + D17 ) ) by L449 , FINSEQ_1:1;
thus L451: ( D18 . C76 ) = ( R25 . C76 ) by L450 , FUNCT_1:49;
end;
thus L452: ( D18 . 1 ) = R13 by L448 , L438 , L445;
L453: D19 < ( D19 + 1 ) by NAT_1:13;
consider C77 , C78 being (Element of ( QC-WFF R1 )) such that L454: ( R25 . D19 ) = C77 and L455: (( R25 . ( D19 + 1 ) ) = C78 & C77 is_immediate_constituent_of C78) by L453 , L440 , L444 , NAT_1:11;
L456: C77 = R15 by L439 , L444 , L455 , L180;
thus L457: ( D18 . D19 ) = R15 by L456 , L445 , L448 , L454;
let C79 being (Element of ( NAT ));
assume that
L458: 1 <= C79
and
L459: C79 < D19;
L460: D19 <= ( D19 + 1 ) by NAT_1:11;
L461: C79 < R21 by L460 , L444 , L459 , XXREAL_0:2;
consider C80 , C81 being (Element of ( QC-WFF R1 )) such that L462: (( R25 . C79 ) = C80 & ( R25 . ( C79 + 1 ) ) = C81 & C80 is_immediate_constituent_of C81) by L461 , L440 , L458;
take C80;
take C81;
L463: (1 <= ( 1 + C79 ) & ( C79 + 1 ) <= D19) by L458 , L459 , NAT_1:13;
thus L464: thesis by L463 , L448 , L458 , L459 , L462;
end;
theorem
L465: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (( 'not' R13 ) is_subformula_of R15 implies R13 is_proper_subformula_of R15))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
L466: R13 is_proper_subformula_of ( 'not' R13 ) by L433;
thus L467: thesis by L466 , L420;
end;
theorem
L468: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (R13 is_proper_subformula_of ( FALSUM R1 ) iff R13 is_subformula_of ( VERUM R1 )))) by L433;
theorem
L469: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds ((R13 is_subformula_of R14 or R13 is_subformula_of R15) iff R13 is_proper_subformula_of ( R14 '&' R15 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
L470: (R14 is_immediate_constituent_of ( R14 '&' R15 ) & R15 is_immediate_constituent_of ( R14 '&' R15 )) by L196;
thus L471: ((R13 is_subformula_of R14 or R13 is_subformula_of R15) implies R13 is_proper_subformula_of ( R14 '&' R15 )) by L470 , L420;
given R21 being (Element of ( NAT )) , R25 being FinSequence such that
L472: 1 <= R21
and
L473: ( len R25 ) = R21
and
L474: ( R25 . 1 ) = R13
and
L475: ( R25 . R21 ) = ( R14 '&' R15 )
and
L476: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B44 , B45 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B44 & ( R25 . ( R20 + 1 ) ) = B45 & B44 is_immediate_constituent_of B45))));

assume L477: R13 <> ( R14 '&' R15 );
L478: 1 < R21 by L477 , L472 , L474 , L475 , XXREAL_0:1;
L479: ( 1 + 1 ) <= R21 by L478 , NAT_1:13;
consider C82 being Nat such that L480: R21 = ( 2 + C82 ) by L479 , NAT_1:10;
reconsider D20 = C82 as (Element of ( NAT )) by ORDINAL1:def 12;
L481: ( ( 1 + 1 ) + D20 ) = ( ( 1 + D20 ) + 1 );
L482: ( 1 + D20 ) < R21 by L481 , L480 , NAT_1:13;
consider C83 , C84 being (Element of ( QC-WFF R1 )) such that L483: ( R25 . ( 1 + D20 ) ) = C83 and L484: (( R25 . ( ( 1 + D20 ) + 1 ) ) = C84 & C83 is_immediate_constituent_of C84) by L482 , L476 , NAT_1:11;
reconsider D21 = ( R25 | ( Seg ( 1 + D20 ) ) ) as FinSequence by FINSEQ_1:15;
L485: R13 is_subformula_of C83
proof
take D22 = ( 1 + D20 );
take D21;
thus L486: 1 <= D22 by NAT_1:11;
L487: ( 1 + D20 ) <= ( ( 1 + D20 ) + 1 ) by NAT_1:11;
thus L488: ( len D21 ) = D22 by L487 , L473 , L480 , FINSEQ_1:17;
L489:
now
let C85 being (Element of ( NAT ));
assume L490: (1 <= C85 & C85 <= D22);
L491: C85 in ( Seg ( 1 + D20 ) ) by L490 , FINSEQ_1:1;
thus L492: ( D21 . C85 ) = ( R25 . C85 ) by L491 , FUNCT_1:49;
end;
thus L493: ( D21 . 1 ) = R13 by L489 , L474 , L486;
thus L494: ( D21 . D22 ) = C83 by L483 , L486 , L489;
let C86 being (Element of ( NAT ));
assume that
L495: 1 <= C86
and
L496: C86 < D22;
L497: D22 <= ( D22 + 1 ) by NAT_1:11;
L498: C86 < R21 by L497 , L480 , L496 , XXREAL_0:2;
consider C87 , C88 being (Element of ( QC-WFF R1 )) such that L499: (( R25 . C86 ) = C87 & ( R25 . ( C86 + 1 ) ) = C88 & C87 is_immediate_constituent_of C88) by L498 , L476 , L495;
take C87;
take C88;
L500: (1 <= ( 1 + C86 ) & ( C86 + 1 ) <= D22) by L495 , L496 , NAT_1:13;
thus L501: thesis by L500 , L489 , L495 , L496 , L499;
end;
thus L502: thesis by L485 , L475 , L480 , L484 , L196;
end;
theorem
L503: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (( R13 '&' R14 ) is_subformula_of R15 implies (R13 is_proper_subformula_of R15 & R14 is_proper_subformula_of R15))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
L504: (R13 is_proper_subformula_of ( R13 '&' R14 ) & R14 is_proper_subformula_of ( R13 '&' R14 )) by L469;
thus L505: thesis by L504 , L420;
end;
theorem
L506: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R17 being (bound_QC-variable of R1) holds (R13 is_subformula_of R15 iff R13 is_proper_subformula_of ( All (R17 , R15) ))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
let R17 being (bound_QC-variable of R1);
L507: R15 is_immediate_constituent_of ( All (R17 , R15) ) by L212;
thus L508: (R13 is_subformula_of R15 implies R13 is_proper_subformula_of ( All (R17 , R15) )) by L507 , L420;
given R21 being (Element of ( NAT )) , R25 being FinSequence such that
L509: 1 <= R21
and
L510: ( len R25 ) = R21
and
L511: ( R25 . 1 ) = R13
and
L512: ( R25 . R21 ) = ( All (R17 , R15) )
and
L513: (for R20 being (Element of ( NAT )) holds ((1 <= R20 & R20 < R21) implies (ex B46 , B47 being (Element of ( QC-WFF R1 )) st (( R25 . R20 ) = B46 & ( R25 . ( R20 + 1 ) ) = B47 & B46 is_immediate_constituent_of B47))));

assume L514: R13 <> ( All (R17 , R15) );
L515: 1 < R21 by L514 , L509 , L511 , L512 , XXREAL_0:1;
L516: ( 1 + 1 ) <= R21 by L515 , NAT_1:13;
consider C89 being Nat such that L517: R21 = ( 2 + C89 ) by L516 , NAT_1:10;
reconsider D23 = C89 as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider D24 = ( R25 | ( Seg ( 1 + D23 ) ) ) as FinSequence by FINSEQ_1:15;
take D25 = ( 1 + D23 );
take D24;
thus L518: 1 <= D25 by NAT_1:11;
L519: ( 1 + D23 ) <= ( ( 1 + D23 ) + 1 ) by NAT_1:11;
thus L520: ( len D24 ) = D25 by L519 , L510 , L517 , FINSEQ_1:17;
L521:
now
let C90 being (Element of ( NAT ));
assume L522: (1 <= C90 & C90 <= D25);
L523: C90 in ( Seg ( 1 + D23 ) ) by L522 , FINSEQ_1:1;
thus L524: ( D24 . C90 ) = ( R25 . C90 ) by L523 , FUNCT_1:49;
end;
thus L525: ( D24 . 1 ) = R13 by L521 , L511 , L518;
L526: D25 < ( D25 + 1 ) by NAT_1:13;
consider C91 , C92 being (Element of ( QC-WFF R1 )) such that L527: ( R25 . D25 ) = C91 and L528: (( R25 . ( D25 + 1 ) ) = C92 & C91 is_immediate_constituent_of C92) by L526 , L513 , L517 , NAT_1:11;
L529: C91 = R15 by L512 , L517 , L528 , L212;
thus L530: ( D24 . D25 ) = R15 by L529 , L518 , L521 , L527;
let C93 being (Element of ( NAT ));
assume that
L531: 1 <= C93
and
L532: C93 < D25;
L533: D25 <= ( D25 + 1 ) by NAT_1:11;
L534: C93 < R21 by L533 , L517 , L532 , XXREAL_0:2;
consider C94 , C95 being (Element of ( QC-WFF R1 )) such that L535: (( R25 . C93 ) = C94 & ( R25 . ( C93 + 1 ) ) = C95 & C94 is_immediate_constituent_of C95) by L534 , L513 , L531;
take C94;
take C95;
L536: (1 <= ( 1 + C93 ) & ( C93 + 1 ) <= D25) by L531 , L532 , NAT_1:13;
thus L537: thesis by L536 , L521 , L531 , L532 , L535;
end;
theorem
L538: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R17 being (bound_QC-variable of R1) holds (( All (R17 , R15) ) is_subformula_of R13 implies R15 is_proper_subformula_of R13)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
let R17 being (bound_QC-variable of R1);
L539: R15 is_proper_subformula_of ( All (R17 , R15) ) by L506;
thus L540: thesis by L539 , L420;
end;
theorem
L541: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (( R13 '&' ( 'not' R14 ) ) is_proper_subformula_of ( R13 => R14 ) & R13 is_proper_subformula_of ( R13 => R14 ) & ( 'not' R14 ) is_proper_subformula_of ( R13 => R14 ) & R14 is_proper_subformula_of ( R13 => R14 )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L542: ( R13 '&' ( 'not' R14 ) ) is_proper_subformula_of ( R13 => R14 ) by L433;
L543: (R13 is_proper_subformula_of ( R13 '&' ( 'not' R14 ) ) & ( 'not' R14 ) is_proper_subformula_of ( R13 '&' ( 'not' R14 ) )) by L469;
thus L544: (R13 is_proper_subformula_of ( R13 => R14 ) & ( 'not' R14 ) is_proper_subformula_of ( R13 => R14 )) by L543 , L542 , L315;
L545: R14 is_proper_subformula_of ( 'not' R14 ) by L433;
thus L546: thesis by L545 , L544 , L315;
end;
theorem
L547: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (( ( 'not' R13 ) '&' ( 'not' R14 ) ) is_proper_subformula_of ( R13 'or' R14 ) & ( 'not' R13 ) is_proper_subformula_of ( R13 'or' R14 ) & ( 'not' R14 ) is_proper_subformula_of ( R13 'or' R14 ) & R13 is_proper_subformula_of ( R13 'or' R14 ) & R14 is_proper_subformula_of ( R13 'or' R14 )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L548: ( ( 'not' R13 ) '&' ( 'not' R14 ) ) is_proper_subformula_of ( R13 'or' R14 ) by L433;
L549: (( 'not' R13 ) is_proper_subformula_of ( ( 'not' R13 ) '&' ( 'not' R14 ) ) & ( 'not' R14 ) is_proper_subformula_of ( ( 'not' R13 ) '&' ( 'not' R14 ) )) by L469;
thus L550: (( 'not' R13 ) is_proper_subformula_of ( R13 'or' R14 ) & ( 'not' R14 ) is_proper_subformula_of ( R13 'or' R14 )) by L549 , L548 , L315;
L551: (R14 is_proper_subformula_of ( 'not' R14 ) & R13 is_proper_subformula_of ( 'not' R13 )) by L433;
thus L552: thesis by L551 , L550 , L315;
end;
theorem
L553: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  atomic implies (not R13 is_proper_subformula_of R15)))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L554: (ex R20 being (Element of ( NAT )) st (ex R23 being (QC-pred_symbol of R20 , R1) st (ex R24 being (QC-variable_list of R20 , R1) st R15 = ( R23 ! R24 ))));
thus L555: thesis by L554 , L429;
end;
theorem
L556: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  negative implies ( the_argument_of R15 ) is_proper_subformula_of R15)))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L557: R15 is  negative;
L558: ( the_argument_of R15 ) is_immediate_constituent_of R15 by L557 , L230;
thus L559: thesis by L558 , L266;
end;
theorem
L560: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  conjunctive implies (( the_left_argument_of R15 ) is_proper_subformula_of R15 & ( the_right_argument_of R15 ) is_proper_subformula_of R15))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L561: R15 is  conjunctive;
L562: (( the_left_argument_of R15 ) is_immediate_constituent_of R15 & ( the_right_argument_of R15 ) is_immediate_constituent_of R15) by L561 , L234;
thus L563: thesis by L562 , L266;
end;
theorem
L564: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  universal implies ( the_scope_of R15 ) is_proper_subformula_of R15)))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L565: R15 is  universal;
L566: ( the_scope_of R15 ) is_immediate_constituent_of R15 by L565 , L238;
thus L567: thesis by L566 , L266;
end;
theorem
L568: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_subformula_of ( VERUM R1 ) iff R15 = ( VERUM R1 ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
thus L569: (R15 is_subformula_of ( VERUM R1 ) implies R15 = ( VERUM R1 ))
proof
assume L570: R15 is_subformula_of ( VERUM R1 );
assume L571: R15 <> ( VERUM R1 );
L572: R15 is_proper_subformula_of ( VERUM R1 ) by L571 , L570 , L247;
thus L573: contradiction by L572 , L425;
end;

thus L574: thesis;
end;
theorem
L575: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R20 being (Element of ( NAT )) holds (for R23 being (QC-pred_symbol of R20 , R1) holds (for R24 being (QC-variable_list of R20 , R1) holds (R15 is_subformula_of ( R23 ! R24 ) iff R15 = ( R23 ! R24 )))))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
let R20 being (Element of ( NAT ));
let R23 being (QC-pred_symbol of R20 , R1);
let R24 being (QC-variable_list of R20 , R1);
thus L576: (R15 is_subformula_of ( R23 ! R24 ) implies R15 = ( R23 ! R24 ))
proof
assume L577: R15 is_subformula_of ( R23 ! R24 );
assume L578: R15 <> ( R23 ! R24 );
L579: R15 is_proper_subformula_of ( R23 ! R24 ) by L578 , L577 , L247;
L580: (ex R13 being (Element of ( QC-WFF R1 )) st R13 is_immediate_constituent_of ( R23 ! R24 )) by L579 , L300;
thus L581: contradiction by L580 , L165;
end;

thus L582: thesis;
end;
theorem
L583: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is_subformula_of ( FALSUM R1 ) iff (R15 = ( FALSUM R1 ) or R15 = ( VERUM R1 )))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
thus L584: (R15 is_subformula_of ( FALSUM R1 ) implies (R15 = ( FALSUM R1 ) or R15 = ( VERUM R1 )))
proof
assume L585: (R15 is_subformula_of ( FALSUM R1 ) & R15 <> ( FALSUM R1 ));
L586: R15 is_proper_subformula_of ( FALSUM R1 ) by L585 , L247;
L587: R15 is_subformula_of ( VERUM R1 ) by L586 , L433;
thus L588: thesis by L587 , L568;
end;

L589: ( VERUM R1 ) is_immediate_constituent_of ( FALSUM R1 ) by L159;
L590: ( VERUM R1 ) is_proper_subformula_of ( FALSUM R1 ) by L589 , L266;
thus L591: thesis by L590 , L247;
end;
definition
let C96 being QC-alphabet;
let C97 being (Element of ( QC-WFF C96 ));
func Subformulae C97 -> set means 
:L592: (for B48 being set holds (B48 in it iff (ex B49 being (Element of ( QC-WFF C96 )) st (B49 = B48 & B49 is_subformula_of C97))));
existence
proof
defpred S2[ set ] means (ex B50 being (Element of ( QC-WFF C96 )) st (B50 = $1 & B50 is_subformula_of C97));
consider C98 being set such that L593: (for B51 being set holds (B51 in C98 iff (B51 in ( QC-WFF C96 ) & S2[ B51 ]))) from XBOOLE_0:sch 1;
take C98;
let C99 being set;
thus L594: (C99 in C98 implies (ex B52 being (Element of ( QC-WFF C96 )) st (B52 = C99 & B52 is_subformula_of C97))) by L593;
given C100 being (Element of ( QC-WFF C96 )) such that
L595: (C100 = C99 & C100 is_subformula_of C97);

thus L596: thesis by L593 , L595;
end;
uniqueness
proof
defpred S3[ set ] means (ex B53 being (Element of ( QC-WFF C96 )) st (B53 = $1 & B53 is_subformula_of C97));
let C101 , C102 being set;
assume that
L597: (for B54 being set holds (B54 in C101 iff S3[ B54 ]))
and
L598: (for B55 being set holds (B55 in C102 iff S3[ B55 ]));
thus L599: thesis from XBOOLE_0:sch 2(L597 , L598);
end;
end;
theorem
L601: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R14 in ( Subformulae R15 ) implies R14 is_subformula_of R15))))
proof
let R1 being QC-alphabet;
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L602: R14 in ( Subformulae R15 );
L603: (ex R13 being (Element of ( QC-WFF R1 )) st (R13 = R14 & R13 is_subformula_of R15)) by L602 , L592;
thus L604: thesis by L603;
end;
theorem
L605: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R13 is_subformula_of R15 implies ( Subformulae R13 ) c= ( Subformulae R15 )))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume L606: R13 is_subformula_of R15;
let C103 being set;
assume L607: C103 in ( Subformulae R13 );
consider C104 being (Element of ( QC-WFF R1 )) such that L608: C104 = C103 and L609: C104 is_subformula_of R13 by L607 , L592;
L610: C104 is_subformula_of R15 by L606 , L609 , L385;
thus L611: thesis by L610 , L608 , L592;
end;
theorem
L612: (for R1 being QC-alphabet holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (R14 in ( Subformulae R15 ) implies ( Subformulae R14 ) c= ( Subformulae R15 ))))) by L601 , L605;
theorem
L613: (for R1 being QC-alphabet holds ( Subformulae ( VERUM R1 ) ) = { ( VERUM R1 ) })
proof
let R1 being QC-alphabet;
thus L614: ( Subformulae ( VERUM R1 ) ) c= { ( VERUM R1 ) }
proof
let C105 being set;
assume L615: C105 in ( Subformulae ( VERUM R1 ) );
consider C106 being (Element of ( QC-WFF R1 )) such that L616: C106 = C105 and L617: C106 is_subformula_of ( VERUM R1 ) by L615 , L592;
L618: C106 = ( VERUM R1 ) by L617 , L568;
thus L619: thesis by L618 , L616 , TARSKI:def 1;
end;

let C107 being set;
assume L620: C107 in { ( VERUM R1 ) };
L621: C107 = ( VERUM R1 ) by L620 , TARSKI:def 1;
thus L622: thesis by L621 , L592;
end;
theorem
L623: (for R1 being QC-alphabet holds (for R20 being (Element of ( NAT )) holds (for R23 being (QC-pred_symbol of R20 , R1) holds (for R24 being (QC-variable_list of R20 , R1) holds ( Subformulae ( R23 ! R24 ) ) = { ( R23 ! R24 ) }))))
proof
let R1 being QC-alphabet;
let R20 being (Element of ( NAT ));
let R23 being (QC-pred_symbol of R20 , R1);
let R24 being (QC-variable_list of R20 , R1);
thus L624: ( Subformulae ( R23 ! R24 ) ) c= { ( R23 ! R24 ) }
proof
let C108 being set;
assume L625: C108 in ( Subformulae ( R23 ! R24 ) );
consider R13 being (Element of ( QC-WFF R1 )) such that L626: R13 = C108 and L627: R13 is_subformula_of ( R23 ! R24 ) by L625 , L592;
L628: R13 = ( R23 ! R24 ) by L627 , L575;
thus L629: thesis by L628 , L626 , TARSKI:def 1;
end;

let C109 being set;
assume L630: C109 in { ( R23 ! R24 ) };
L631: C109 = ( R23 ! R24 ) by L630 , TARSKI:def 1;
thus L632: thesis by L631 , L592;
end;
theorem
L633: (for R1 being QC-alphabet holds ( Subformulae ( FALSUM R1 ) ) = { ( VERUM R1 ) , ( FALSUM R1 ) })
proof
let R1 being QC-alphabet;
thus L634: ( Subformulae ( FALSUM R1 ) ) c= { ( VERUM R1 ) , ( FALSUM R1 ) }
proof
let C110 being set;
assume L635: C110 in ( Subformulae ( FALSUM R1 ) );
L636: (ex R13 being (Element of ( QC-WFF R1 )) st (R13 = C110 & R13 is_subformula_of ( FALSUM R1 ))) by L635 , L592;
L637: (C110 = ( FALSUM R1 ) or C110 = ( VERUM R1 )) by L636 , L583;
thus L638: thesis by L637 , TARSKI:def 2;
end;

let C111 being set;
assume L639: C111 in { ( VERUM R1 ) , ( FALSUM R1 ) };
L640: (C111 = ( VERUM R1 ) or C111 = ( FALSUM R1 )) by L639 , TARSKI:def 2;
reconsider D26 = C111 as (Element of ( QC-WFF R1 )) by L639 , TARSKI:def 2;
L641: D26 is_subformula_of ( FALSUM R1 ) by L640 , L583;
thus L642: thesis by L641 , L592;
end;
theorem
L643: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds ( Subformulae ( 'not' R15 ) ) = ( ( Subformulae R15 ) \/ { ( 'not' R15 ) } )))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
thus L644: ( Subformulae ( 'not' R15 ) ) c= ( ( Subformulae R15 ) \/ { ( 'not' R15 ) } )
proof
let C112 being set;
assume L645: C112 in ( Subformulae ( 'not' R15 ) );
consider R13 being (Element of ( QC-WFF R1 )) such that L646: R13 = C112 and L647: R13 is_subformula_of ( 'not' R15 ) by L645 , L592;
L648:
now
assume L649: R13 <> ( 'not' R15 );
L650: R13 is_proper_subformula_of ( 'not' R15 ) by L649 , L647 , L247;
L651: R13 is_subformula_of R15 by L650 , L433;
thus L652: C112 in ( Subformulae R15 ) by L651 , L646 , L592;
end;
L653: (C112 in ( Subformulae R15 ) or C112 in { ( 'not' R15 ) }) by L648 , L646 , TARSKI:def 1;
thus L654: thesis by L653 , XBOOLE_0:def 3;
end;

let C113 being set;
assume that
L655: C113 in ( ( Subformulae R15 ) \/ { ( 'not' R15 ) } );
L656:
now
assume L657: C113 in ( Subformulae R15 );
consider R13 being (Element of ( QC-WFF R1 )) such that L658: R13 = C113 and L659: R13 is_subformula_of R15 by L657 , L592;
L660: R15 is_immediate_constituent_of ( 'not' R15 ) by L159;
L661: R15 is_proper_subformula_of ( 'not' R15 ) by L660 , L266;
L662: R15 is_subformula_of ( 'not' R15 ) by L661 , L247;
L663: R13 is_subformula_of ( 'not' R15 ) by L662 , L659 , L385;
thus L664: thesis by L663 , L658 , L592;
end;
L665:
now
assume L666: C113 in { ( 'not' R15 ) };
L667: C113 = ( 'not' R15 ) by L666 , TARSKI:def 1;
thus L668: thesis by L667 , L592;
end;
thus L669: thesis by L665 , L655 , L656 , XBOOLE_0:def 3;
end;
theorem
L670: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds ( Subformulae ( R15 '&' R13 ) ) = ( ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) \/ { ( R15 '&' R13 ) } ))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
thus L671: ( Subformulae ( R15 '&' R13 ) ) c= ( ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) \/ { ( R15 '&' R13 ) } )
proof
let C114 being set;
assume L672: C114 in ( Subformulae ( R15 '&' R13 ) );
consider R14 being (Element of ( QC-WFF R1 )) such that L673: R14 = C114 and L674: R14 is_subformula_of ( R15 '&' R13 ) by L672 , L592;
L675:
now
assume L676: R14 <> ( R15 '&' R13 );
L677: R14 is_proper_subformula_of ( R15 '&' R13 ) by L676 , L674 , L247;
L678: (R14 is_subformula_of R15 or R14 is_subformula_of R13) by L677 , L469;
L679: (C114 in ( Subformulae R15 ) or C114 in ( Subformulae R13 )) by L678 , L673 , L592;
thus L680: C114 in ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) by L679 , XBOOLE_0:def 3;
end;
L681: (C114 in ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) or C114 in { ( R15 '&' R13 ) }) by L675 , L673 , TARSKI:def 1;
thus L682: thesis by L681 , XBOOLE_0:def 3;
end;

let C115 being set;
assume that
L683: C115 in ( ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) \/ { ( R15 '&' R13 ) } );
L684:
now
assume L685: C115 in { ( R15 '&' R13 ) };
L686: C115 = ( R15 '&' R13 ) by L685 , TARSKI:def 1;
thus L687: thesis by L686 , L592;
end;
L688:
now
assume L689: C115 in ( Subformulae R13 );
consider R14 being (Element of ( QC-WFF R1 )) such that L690: R14 = C115 and L691: R14 is_subformula_of R13 by L689 , L592;
L692: R13 is_immediate_constituent_of ( R15 '&' R13 ) by L196;
L693: R13 is_proper_subformula_of ( R15 '&' R13 ) by L692 , L266;
L694: R13 is_subformula_of ( R15 '&' R13 ) by L693 , L247;
L695: R14 is_subformula_of ( R15 '&' R13 ) by L694 , L691 , L385;
thus L696: thesis by L695 , L690 , L592;
end;
L697:
now
assume L698: C115 in ( Subformulae R15 );
consider R14 being (Element of ( QC-WFF R1 )) such that L699: R14 = C115 and L700: R14 is_subformula_of R15 by L698 , L592;
L701: R15 is_immediate_constituent_of ( R15 '&' R13 ) by L196;
L702: R15 is_proper_subformula_of ( R15 '&' R13 ) by L701 , L266;
L703: R15 is_subformula_of ( R15 '&' R13 ) by L702 , L247;
L704: R14 is_subformula_of ( R15 '&' R13 ) by L703 , L700 , L385;
thus L705: thesis by L704 , L699 , L592;
end;
L706: (C115 in ( ( Subformulae R15 ) \/ ( Subformulae R13 ) ) implies (C115 in ( Subformulae R15 ) or C115 in ( Subformulae R13 ))) by XBOOLE_0:def 3;
thus L707: thesis by L706 , L683 , L697 , L688 , L684 , XBOOLE_0:def 3;
end;
theorem
L708: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (for R17 being (bound_QC-variable of R1) holds ( Subformulae ( All (R17 , R15) ) ) = ( ( Subformulae R15 ) \/ { ( All (R17 , R15) ) } ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
let R17 being (bound_QC-variable of R1);
thus L709: ( Subformulae ( All (R17 , R15) ) ) c= ( ( Subformulae R15 ) \/ { ( All (R17 , R15) ) } )
proof
let C116 being set;
assume L710: C116 in ( Subformulae ( All (R17 , R15) ) );
consider R13 being (Element of ( QC-WFF R1 )) such that L711: R13 = C116 and L712: R13 is_subformula_of ( All (R17 , R15) ) by L710 , L592;
L713:
now
assume L714: R13 <> ( All (R17 , R15) );
L715: R13 is_proper_subformula_of ( All (R17 , R15) ) by L714 , L712 , L247;
L716: R13 is_subformula_of R15 by L715 , L506;
thus L717: C116 in ( Subformulae R15 ) by L716 , L711 , L592;
end;
L718: (C116 in ( Subformulae R15 ) or C116 in { ( All (R17 , R15) ) }) by L713 , L711 , TARSKI:def 1;
thus L719: thesis by L718 , XBOOLE_0:def 3;
end;

let C117 being set;
assume that
L720: C117 in ( ( Subformulae R15 ) \/ { ( All (R17 , R15) ) } );
L721:
now
assume L722: C117 in ( Subformulae R15 );
consider R13 being (Element of ( QC-WFF R1 )) such that L723: R13 = C117 and L724: R13 is_subformula_of R15 by L722 , L592;
L725: R15 is_immediate_constituent_of ( All (R17 , R15) ) by L212;
L726: R15 is_proper_subformula_of ( All (R17 , R15) ) by L725 , L266;
L727: R15 is_subformula_of ( All (R17 , R15) ) by L726 , L247;
L728: R13 is_subformula_of ( All (R17 , R15) ) by L727 , L724 , L385;
thus L729: thesis by L728 , L723 , L592;
end;
L730:
now
assume L731: C117 in { ( All (R17 , R15) ) };
L732: C117 = ( All (R17 , R15) ) by L731 , TARSKI:def 1;
thus L733: thesis by L732 , L592;
end;
thus L734: thesis by L730 , L720 , L721 , XBOOLE_0:def 3;
end;
theorem
L735: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds ( Subformulae ( R13 => R14 ) ) = ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L736: ( Subformulae ( R13 => R14 ) ) = ( ( Subformulae ( R13 '&' ( 'not' R14 ) ) ) \/ { ( R13 => R14 ) } ) by L643
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae ( 'not' R14 ) ) ) \/ { ( R13 '&' ( 'not' R14 ) ) } ) \/ { ( R13 => R14 ) } ) by L670
.= ( ( ( ( Subformulae R13 ) \/ ( ( Subformulae R14 ) \/ { ( 'not' R14 ) } ) ) \/ { ( R13 '&' ( 'not' R14 ) ) } ) \/ { ( R13 => R14 ) } ) by L643
.= ( ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) } ) \/ { ( R13 '&' ( 'not' R14 ) ) } ) \/ { ( R13 => R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) } ) \/ ( { ( R13 '&' ( 'not' R14 ) ) } \/ { ( R13 => R14 ) } ) ) by XBOOLE_1:4
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( { ( 'not' R14 ) } \/ ( { ( R13 '&' ( 'not' R14 ) ) } \/ { ( R13 => R14 ) } ) ) ) by XBOOLE_1:4
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( { ( 'not' R14 ) } \/ { ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ) ) by ENUMSET1:1
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ) by ENUMSET1:2;
end;
theorem
L737: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds ( Subformulae ( R13 'or' R14 ) ) = ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( 'not' R13 ) , ( ( 'not' R13 ) '&' ( 'not' R14 ) ) , ( R13 'or' R14 ) } ))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L738: ( Subformulae ( R13 'or' R14 ) ) = ( ( Subformulae ( ( 'not' R13 ) '&' ( 'not' R14 ) ) ) \/ { ( R13 'or' R14 ) } ) by L643
.= ( ( ( ( Subformulae ( 'not' R13 ) ) \/ ( Subformulae ( 'not' R14 ) ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by L670
.= ( ( ( ( Subformulae ( 'not' R13 ) ) \/ ( ( Subformulae R14 ) \/ { ( 'not' R14 ) } ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by L643
.= ( ( ( ( ( Subformulae R13 ) \/ { ( 'not' R13 ) } ) \/ ( ( Subformulae R14 ) \/ { ( 'not' R14 ) } ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by L643
.= ( ( ( ( Subformulae R13 ) \/ ( ( ( Subformulae R14 ) \/ { ( 'not' R14 ) } ) \/ { ( 'not' R13 ) } ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( ( Subformulae R14 ) \/ ( { ( 'not' R14 ) } \/ { ( 'not' R13 ) } ) ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( ( Subformulae R14 ) \/ { ( 'not' R14 ) , ( 'not' R13 ) } ) ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by ENUMSET1:1
.= ( ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( 'not' R13 ) } ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } ) \/ { ( R13 'or' R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( 'not' R13 ) } ) \/ ( { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) } \/ { ( R13 'or' R14 ) } ) ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( 'not' R13 ) } ) \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) , ( R13 'or' R14 ) } ) by ENUMSET1:1
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( { ( 'not' R14 ) , ( 'not' R13 ) } \/ { ( ( 'not' R13 ) '&' ( 'not' R14 ) ) , ( R13 'or' R14 ) } ) ) by XBOOLE_1:4
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( 'not' R13 ) , ( ( 'not' R13 ) '&' ( 'not' R14 ) ) , ( R13 'or' R14 ) } ) by ENUMSET1:5;
end;
theorem
L739: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds ( Subformulae ( R13 <=> R14 ) ) = ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) , ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) , ( R13 <=> R14 ) } ))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
thus L740: ( Subformulae ( R13 <=> R14 ) ) = ( ( ( Subformulae ( R13 => R14 ) ) \/ ( Subformulae ( R14 => R13 ) ) ) \/ { ( R13 <=> R14 ) } ) by L670
.= ( ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ) \/ ( Subformulae ( R14 => R13 ) ) ) \/ { ( R13 <=> R14 ) } ) by L735
.= ( ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ) \/ ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } ) ) \/ { ( R13 <=> R14 ) } ) by L735
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } ) \/ { ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } ) ) \/ { ( R13 <=> R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } \/ { ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } ) ) ) \/ { ( R13 <=> R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) ) \/ ( { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) } \/ { ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } ) ) \/ { ( R13 <=> R14 ) } ) by XBOOLE_1:4
.= ( ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) , ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } ) \/ { ( R13 <=> R14 ) } ) by ENUMSET1:13
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ ( { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) , ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) } \/ { ( R13 <=> R14 ) } ) ) by XBOOLE_1:4
.= ( ( ( Subformulae R13 ) \/ ( Subformulae R14 ) ) \/ { ( 'not' R14 ) , ( R13 '&' ( 'not' R14 ) ) , ( R13 => R14 ) , ( 'not' R13 ) , ( R14 '&' ( 'not' R13 ) ) , ( R14 => R13 ) , ( R13 <=> R14 ) } ) by ENUMSET1:21;
end;
theorem
L741: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds ((R15 = ( VERUM R1 ) or R15 is  atomic) iff ( Subformulae R15 ) = { R15 })))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
L742: (R15 is  atomic implies ( Subformulae R15 ) = { R15 })
proof
assume L743: (ex R20 being (Element of ( NAT )) st (ex R23 being (QC-pred_symbol of R20 , R1) st (ex R24 being (QC-variable_list of R20 , R1) st R15 = ( R23 ! R24 ))));
thus L744: thesis by L743 , L623;
end;
thus L745: ((R15 = ( VERUM R1 ) or R15 is  atomic) implies ( Subformulae R15 ) = { R15 }) by L742 , L613;
assume L746: ( Subformulae R15 ) = { R15 };
L747:
now
assume L748: R15 = ( 'not' ( the_argument_of R15 ) );
L749: ( the_argument_of R15 ) is_immediate_constituent_of R15 by L748 , L180;
L750: ( the_argument_of R15 ) is_proper_subformula_of R15 by L749 , L266;
L751: ( the_argument_of R15 ) is_subformula_of R15 by L750 , L247;
L752: ( the_argument_of R15 ) in ( Subformulae R15 ) by L751 , L592;
L753: ( len ( @ ( the_argument_of R15 ) ) ) <> ( len ( @ R15 ) ) by L749 , L249;
thus L754: contradiction by L753 , L746 , L752 , TARSKI:def 1;
end;
L755:
now
assume L756: R15 = ( ( the_left_argument_of R15 ) '&' ( the_right_argument_of R15 ) );
L757: ( the_left_argument_of R15 ) is_immediate_constituent_of R15 by L756 , L196;
L758: ( the_left_argument_of R15 ) is_proper_subformula_of R15 by L757 , L266;
L759: ( the_left_argument_of R15 ) is_subformula_of R15 by L758 , L247;
L760: ( the_left_argument_of R15 ) in ( Subformulae R15 ) by L759 , L592;
L761: ( len ( @ ( the_left_argument_of R15 ) ) ) <> ( len ( @ R15 ) ) by L757 , L249;
thus L762: contradiction by L761 , L746 , L760 , TARSKI:def 1;
end;
assume L763: (R15 <> ( VERUM R1 ) & (not R15 is  atomic));
L764: (R15 is  negative or R15 is  conjunctive or R15 is  universal) by L763 , QC_LANG1:9;
L765: (R15 = ( 'not' ( the_argument_of R15 ) ) or R15 = ( ( the_left_argument_of R15 ) '&' ( the_right_argument_of R15 ) ) or R15 = ( All (( bound_in R15 ) , ( the_scope_of R15 )) )) by L764 , L13 , L28 , QC_LANG1:def 24;
L766: ( the_scope_of R15 ) is_immediate_constituent_of R15 by L765 , L747 , L755 , L212;
L767: ( the_scope_of R15 ) is_proper_subformula_of R15 by L766 , L266;
L768: ( the_scope_of R15 ) is_subformula_of R15 by L767 , L247;
L769: ( the_scope_of R15 ) in ( Subformulae R15 ) by L768 , L592;
L770: ( len ( @ ( the_scope_of R15 ) ) ) <> ( len ( @ R15 ) ) by L766 , L249;
thus L771: contradiction by L770 , L746 , L769 , TARSKI:def 1;
end;
theorem
L772: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  negative implies ( Subformulae R15 ) = ( ( Subformulae ( the_argument_of R15 ) ) \/ { R15 } ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L773: R15 is  negative;
L774: R15 = ( 'not' ( the_argument_of R15 ) ) by L773 , QC_LANG1:def 24;
thus L775: thesis by L774 , L643;
end;
theorem
L776: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  conjunctive implies ( Subformulae R15 ) = ( ( ( Subformulae ( the_left_argument_of R15 ) ) \/ ( Subformulae ( the_right_argument_of R15 ) ) ) \/ { R15 } ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L777: R15 is  conjunctive;
L778: R15 = ( ( the_left_argument_of R15 ) '&' ( the_right_argument_of R15 ) ) by L777 , L13;
thus L779: thesis by L778 , L670;
end;
theorem
L780: (for R1 being QC-alphabet holds (for R15 being (Element of ( QC-WFF R1 )) holds (R15 is  universal implies ( Subformulae R15 ) = ( ( Subformulae ( the_scope_of R15 ) ) \/ { R15 } ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( QC-WFF R1 ));
assume L781: R15 is  universal;
L782: R15 = ( All (( bound_in R15 ) , ( the_scope_of R15 )) ) by L781 , L28;
thus L783: thesis by L782 , L708;
end;
theorem
L784: (for R1 being QC-alphabet holds (for R13 being (Element of ( QC-WFF R1 )) holds (for R14 being (Element of ( QC-WFF R1 )) holds (for R15 being (Element of ( QC-WFF R1 )) holds (((R15 is_immediate_constituent_of R14 or R15 is_proper_subformula_of R14 or R15 is_subformula_of R14) & R14 in ( Subformulae R13 )) implies R15 in ( Subformulae R13 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Element of ( QC-WFF R1 ));
let R14 being (Element of ( QC-WFF R1 ));
let R15 being (Element of ( QC-WFF R1 ));
assume that
L785: (R15 is_immediate_constituent_of R14 or R15 is_proper_subformula_of R14 or R15 is_subformula_of R14)
and
L786: R14 in ( Subformulae R13 );
L787: (R15 is_proper_subformula_of R14 or R15 is_subformula_of R14) by L785 , L266;
L788: R15 is_subformula_of R14 by L787 , L247;
L789: R14 is_subformula_of R13 by L786 , L601;
L790: R15 is_subformula_of R13 by L789 , L788 , L385;
thus L791: thesis by L790 , L592;
end;
