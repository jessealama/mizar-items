:: Calculus of Propositions
::  by Jan Popio{\l}ek and Andrzej Trybulec
::
:: Received October 23, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies SUBSET_1, CQC_LANG, XBOOLEAN, CQC_THE1, QC_LANG1;
 notations SUBSET_1, QC_LANG1, CQC_LANG, CQC_THE1;
 constructors CQC_THE1;
 registrations CQC_LANG;
 theorems CQC_THE1, QC_LANG2, LUKASI_1;

begin
theorem
L1: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( 'not' ( R2 '&' ( 'not' R2 ) ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L2: ( R2 => R2 ) in ( TAUT R1 ) by LUKASI_1:4;
thus L3: thesis by L2 , QC_LANG2:def 2;
end;
L4: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R2 'or' R3 ) = ( ( 'not' R2 ) => R3 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L5: ( ( 'not' R2 ) => R3 ) = ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) by QC_LANG2:def 2;
thus L6: thesis by L5 , QC_LANG2:def 3;
end;
theorem
L7: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 'or' ( 'not' R2 ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L8: ( ( 'not' R2 ) => ( 'not' R2 ) ) in ( TAUT R1 ) by LUKASI_1:4;
thus L9: thesis by L8 , L4;
end;
theorem
L10: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( R2 'or' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L11: ( R2 => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) by CQC_THE1:43;
thus L12: thesis by L11 , L4;
end;
theorem
L13: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R3 => ( R2 'or' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L14: ( R3 => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) by LUKASI_1:5;
thus L15: thesis by L14 , L4;
end;
theorem
L16: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 'or' R3 ) => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L17: ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) by LUKASI_1:4;
thus L18: thesis by L17 , L4;
end;
theorem
L19: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( R2 'or' R3 ) ) => ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L20: ( 'not' ( R2 'or' R3 ) ) = ( 'not' ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) ) by QC_LANG2:def 3;
thus L21: thesis by L20 , LUKASI_1:25;
end;
theorem
L22: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) '&' ( 'not' R3 ) ) => ( 'not' ( R2 'or' R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L23: ( 'not' ( R2 'or' R3 ) ) = ( 'not' ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) ) by QC_LANG2:def 3;
thus L24: thesis by L23 , LUKASI_1:27;
end;
theorem
L25: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 'or' R3 ) => ( R3 'or' R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L26: ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) by LUKASI_1:31;
L27: ( ( R2 'or' R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) by L26 , L4;
thus L28: thesis by L27 , L4;
end;
theorem
L29: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' R2 ) 'or' R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L30: ( ( R2 'or' ( 'not' R2 ) ) => ( ( 'not' R2 ) 'or' R2 ) ) in ( TAUT R1 ) by L25;
thus L31: thesis by L30 , L7 , CQC_THE1:46;
end;
theorem
L32: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( R2 'or' R3 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L33: (( ( R2 => ( R2 'or' R3 ) ) => ( ( 'not' ( R2 'or' R3 ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) & ( R2 => ( R2 'or' R3 ) ) in ( TAUT R1 )) by L10 , LUKASI_1:26;
thus L34: thesis by L33 , CQC_THE1:46;
end;
theorem
L35: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( R2 'or' R2 ) => R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L36: (( ( R2 'or' R2 ) => ( ( 'not' R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => R2 ) => R2 ) in ( TAUT R1 )) by L16 , CQC_THE1:42;
thus L37: thesis by L36 , LUKASI_1:3;
end;
theorem
L38: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( R2 'or' R2 ) ) in ( TAUT R1 ))) by L10;
theorem
L39: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' ( 'not' R2 ) ) => R3 ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L40: ( ( 'not' R3 ) => ( 'not' ( R2 '&' ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by L1 , LUKASI_1:13;
thus L41: thesis by L40 , LUKASI_1:35;
end;
theorem
L42: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R3 ) => ( ( 'not' R2 ) 'or' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L43: ( ( ( 'not' ( 'not' R2 ) ) => R2 ) => ( ( R2 => R3 ) => ( ( 'not' ( 'not' R2 ) ) => R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:1;
L44: (( ( 'not' ( 'not' R2 ) ) => R3 ) = ( ( 'not' R2 ) 'or' R3 ) & ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 )) by L4 , LUKASI_1:25;
thus L45: thesis by L44 , L43 , CQC_THE1:46;
end;
L46: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' R3 ) => ( ( 'not' ( 'not' R2 ) ) '&' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L47: (( ( R2 => ( 'not' ( 'not' R2 ) ) ) => ( ( 'not' ( ( 'not' ( 'not' R2 ) ) '&' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) & ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 )) by CQC_THE1:44 , LUKASI_1:27;
L48: ( ( 'not' ( ( 'not' ( 'not' R2 ) ) '&' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L47 , CQC_THE1:46;
thus L49: thesis by L48 , LUKASI_1:35;
end;
L50: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' ( 'not' R2 ) ) '&' R3 ) => ( R2 '&' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L51: (( ( ( 'not' ( 'not' R2 ) ) => R2 ) => ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( ( 'not' ( 'not' R2 ) ) '&' R3 ) ) ) ) in ( TAUT R1 ) & ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 )) by CQC_THE1:44 , LUKASI_1:25;
L52: ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( ( 'not' ( 'not' R2 ) ) '&' R3 ) ) ) in ( TAUT R1 ) by L51 , CQC_THE1:46;
thus L53: thesis by L52 , LUKASI_1:35;
end;
theorem
L54: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' R3 ) => ( 'not' ( R2 => ( 'not' R3 ) ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L55: ( ( R2 '&' ( 'not' ( 'not' R3 ) ) ) => ( 'not' ( 'not' ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L56: (( ( R3 '&' R2 ) => ( ( 'not' ( 'not' R3 ) ) '&' R2 ) ) in ( TAUT R1 ) & ( ( R2 '&' R3 ) => ( R3 '&' R2 ) ) in ( TAUT R1 )) by L46 , CQC_THE1:45;
L57: ( ( R2 '&' R3 ) => ( ( 'not' ( 'not' R3 ) ) '&' R2 ) ) in ( TAUT R1 ) by L56 , LUKASI_1:3;
L58: ( ( ( 'not' ( 'not' R3 ) ) '&' R2 ) => ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by CQC_THE1:45;
L59: ( ( R2 '&' R3 ) => ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L58 , L57 , LUKASI_1:3;
L60: ( ( R2 '&' R3 ) => ( 'not' ( 'not' ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) ) ) in ( TAUT R1 ) by L59 , L55 , LUKASI_1:3;
thus L61: thesis by L60 , QC_LANG2:def 2;
end;
theorem
L62: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( R2 => ( 'not' R3 ) ) ) => ( R2 '&' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L63: ( ( 'not' ( 'not' ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) ) => ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:25;
L64: (( ( R2 '&' ( 'not' ( 'not' R3 ) ) ) => ( ( 'not' ( 'not' R3 ) ) '&' R2 ) ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R3 ) ) '&' R2 ) => ( R3 '&' R2 ) ) in ( TAUT R1 )) by L50 , CQC_THE1:45;
L65: ( ( R2 '&' ( 'not' ( 'not' R3 ) ) ) => ( R3 '&' R2 ) ) in ( TAUT R1 ) by L64 , LUKASI_1:3;
L66: ( ( R3 '&' R2 ) => ( R2 '&' R3 ) ) in ( TAUT R1 ) by CQC_THE1:45;
L67: ( ( R2 '&' ( 'not' ( 'not' R3 ) ) ) => ( R2 '&' R3 ) ) in ( TAUT R1 ) by L66 , L65 , LUKASI_1:3;
L68: ( ( 'not' ( 'not' ( R2 '&' ( 'not' ( 'not' R3 ) ) ) ) ) => ( R2 '&' R3 ) ) in ( TAUT R1 ) by L67 , L63 , LUKASI_1:3;
thus L69: thesis by L68 , QC_LANG2:def 2;
end;
theorem
L70: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L71: (( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R2 ) ) => R2 ) => ( ( R2 => ( 'not' R3 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R3 ) ) ) ) in ( TAUT R1 )) by LUKASI_1:1 , LUKASI_1:25;
L72: ( ( R2 => ( 'not' R3 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R3 ) ) ) in ( TAUT R1 ) by L71 , CQC_THE1:46;
L73: ( ( 'not' ( R2 => ( 'not' R3 ) ) ) => ( R2 '&' R3 ) ) in ( TAUT R1 ) by L62;
L74: ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( 'not' ( R2 => ( 'not' R3 ) ) ) ) ) in ( TAUT R1 ) by L73 , LUKASI_1:34;
L75: ( ( 'not' ( 'not' ( R2 => ( 'not' R3 ) ) ) ) => ( R2 => ( 'not' R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:25;
L76: ( ( 'not' ( R2 '&' R3 ) ) => ( R2 => ( 'not' R3 ) ) ) in ( TAUT R1 ) by L75 , L74 , LUKASI_1:3;
L77: ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R3 ) ) ) in ( TAUT R1 ) by L76 , L72 , LUKASI_1:3;
thus L78: thesis by L77 , L4;
end;
theorem
L79: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L80: ( ( R2 => ( 'not' ( 'not' R2 ) ) ) => ( ( ( 'not' ( 'not' R2 ) ) => ( 'not' R3 ) ) => ( R2 => ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:1;
L81: ( ( R2 '&' R3 ) => ( 'not' ( R2 => ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L54;
L82: ( ( 'not' ( 'not' ( R2 => ( 'not' R3 ) ) ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L81 , LUKASI_1:34;
L83: ( ( R2 => ( 'not' R3 ) ) => ( 'not' ( 'not' ( R2 => ( 'not' R3 ) ) ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L84: ( ( R2 => ( 'not' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L83 , L82 , LUKASI_1:3;
L85: (( ( 'not' R2 ) 'or' ( 'not' R3 ) ) = ( ( 'not' ( 'not' R2 ) ) => ( 'not' R3 ) ) & ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 )) by L4 , LUKASI_1:27;
L86: ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => ( R2 => ( 'not' R3 ) ) ) in ( TAUT R1 ) by L85 , L80 , CQC_THE1:46;
thus L87: thesis by L86 , L84 , LUKASI_1:3;
end;
theorem
L88: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' R3 ) => R2 ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L89: ( ( 'not' R2 ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) by L10;
L90: ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L89 , LUKASI_1:34;
L91: ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L79;
L92: ( ( 'not' ( 'not' ( R2 '&' R3 ) ) ) => ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L91 , LUKASI_1:34;
L93: ( ( R2 '&' R3 ) => ( 'not' ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L94: ( ( R2 '&' R3 ) => ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L93 , L92 , LUKASI_1:3;
L95: ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) by LUKASI_1:25;
L96: ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) => R2 ) in ( TAUT R1 ) by L95 , L90 , LUKASI_1:3;
thus L97: thesis by L96 , L94 , LUKASI_1:3;
end;
theorem
L98: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' R3 ) => ( R2 'or' R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L99: (( R2 => ( R2 'or' R3 ) ) in ( TAUT R1 ) & ( ( R2 '&' R3 ) => R2 ) in ( TAUT R1 )) by L10 , L88;
thus L100: thesis by L99 , LUKASI_1:3;
end;
theorem
L101: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' R3 ) => R3 ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L102: (( ( R3 '&' R2 ) => R3 ) in ( TAUT R1 ) & ( ( R2 '&' R3 ) => ( R3 '&' R2 ) ) in ( TAUT R1 )) by L88 , CQC_THE1:45;
thus L103: thesis by L102 , LUKASI_1:3;
end;
theorem
L104: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( R2 '&' R2 ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L105: (( ( 'not' ( R2 '&' R2 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) 'or' ( 'not' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 )) by L35 , L70;
L106: ( ( 'not' ( R2 '&' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L105 , LUKASI_1:3;
thus L107: thesis by L106 , LUKASI_1:35;
end;
theorem
L108: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 <=> R3 ) => ( R2 => R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L109: ( R2 <=> R3 ) = ( ( R2 => R3 ) '&' ( R3 => R2 ) ) by QC_LANG2:def 4;
thus L110: thesis by L109 , L88;
end;
theorem
L111: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 <=> R3 ) => ( R3 => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L112: ( R2 <=> R3 ) = ( ( R2 => R3 ) '&' ( R3 => R2 ) ) by QC_LANG2:def 4;
thus L113: thesis by L112 , L101;
end;
theorem
L114: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 'or' R3 ) 'or' R4 ) => ( R2 'or' ( R3 'or' R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L115: (( ( 'not' R2 ) => ( ( ( 'not' R4 ) => R3 ) => ( ( 'not' R3 ) => R4 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => ( ( ( 'not' R4 ) => R3 ) => ( ( 'not' R3 ) => R4 ) ) ) => ( ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) => ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) ) ) in ( TAUT R1 )) by LUKASI_1:11 , LUKASI_1:13 , LUKASI_1:31;
L116: ( ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) => ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) ) in ( TAUT R1 ) by L115 , CQC_THE1:46;
L117: (( ( ( R2 'or' R3 ) 'or' R4 ) => ( R4 'or' ( R2 'or' R3 ) ) ) in ( TAUT R1 ) & ( ( R4 'or' ( R2 'or' R3 ) ) => ( ( 'not' R4 ) => ( R2 'or' R3 ) ) ) in ( TAUT R1 )) by L16 , L25;
L118: ( ( ( R2 'or' R3 ) 'or' R4 ) => ( ( 'not' R4 ) => ( R2 'or' R3 ) ) ) in ( TAUT R1 ) by L117 , LUKASI_1:3;
L119: ( ( ( R2 'or' R3 ) 'or' R4 ) => ( ( 'not' R4 ) => ( ( 'not' R2 ) => R3 ) ) ) in ( TAUT R1 ) by L118 , L4;
L120: ( ( ( 'not' R4 ) => ( ( 'not' R2 ) => R3 ) ) => ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:8;
L121: ( ( ( R2 'or' R3 ) 'or' R4 ) => ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) by L120 , L119 , LUKASI_1:3;
L122: ( ( ( R2 'or' R3 ) 'or' R4 ) => ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) ) in ( TAUT R1 ) by L121 , L116 , LUKASI_1:3;
L123: ( ( ( R2 'or' R3 ) 'or' R4 ) => ( ( 'not' R2 ) => ( R3 'or' R4 ) ) ) in ( TAUT R1 ) by L122 , L4;
thus L124: thesis by L123 , L4;
end;
theorem
L125: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 '&' R3 ) '&' R4 ) => ( R2 '&' ( R3 '&' R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L126: ( ( ( 'not' R2 ) 'or' ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) => ( ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L25;
L127: (( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 )) by L25 , L70;
L128: ( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) by L127 , LUKASI_1:3;
L129: ( ( 'not' ( 'not' R2 ) ) => ( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L128 , LUKASI_1:13;
L130: ( ( ( 'not' ( 'not' R2 ) ) => ( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) => ( ( ( 'not' ( 'not' R2 ) ) => ( 'not' ( R3 '&' R4 ) ) ) => ( ( 'not' ( 'not' R2 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L131: ( ( ( 'not' ( 'not' R2 ) ) => ( 'not' ( R3 '&' R4 ) ) ) => ( ( 'not' ( 'not' R2 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L130 , L129 , CQC_THE1:46;
L132: ( ( ( 'not' R2 ) 'or' ( 'not' ( R3 '&' R4 ) ) ) => ( ( 'not' ( 'not' R2 ) ) => ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L131 , L4;
L133: ( ( ( 'not' R2 ) 'or' ( 'not' ( R3 '&' R4 ) ) ) => ( ( 'not' R2 ) 'or' ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L132 , L4;
L134: ( ( 'not' ( R2 '&' ( R3 '&' R4 ) ) ) => ( ( 'not' R2 ) 'or' ( 'not' ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L70;
L135: ( ( 'not' ( R2 '&' ( R3 '&' R4 ) ) ) => ( ( 'not' R2 ) 'or' ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L134 , L133 , LUKASI_1:3;
L136: ( ( 'not' ( R2 '&' ( R3 '&' R4 ) ) ) => ( ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L135 , L126 , LUKASI_1:3;
L137: ( ( ( 'not' ( R2 '&' R3 ) ) 'or' ( 'not' R4 ) ) => ( 'not' ( ( R2 '&' R3 ) '&' R4 ) ) ) in ( TAUT R1 ) by L79;
L138: (( ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 )) by L25 , L79;
L139: ( ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) => ( 'not' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L138 , LUKASI_1:3;
L140: ( ( 'not' ( 'not' R4 ) ) => ( ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L139 , LUKASI_1:13;
L141: ( ( ( 'not' ( 'not' R4 ) ) => ( ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) => ( ( ( 'not' ( 'not' R4 ) ) => ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( ( 'not' ( 'not' R4 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L142: ( ( ( 'not' ( 'not' R4 ) ) => ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( ( 'not' ( 'not' R4 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L141 , L140 , CQC_THE1:46;
L143: ( ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( ( 'not' ( 'not' R4 ) ) => ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L142 , L4;
L144: ( ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( ( 'not' R4 ) 'or' ( 'not' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L143 , L4;
L145: ( ( ( 'not' R4 ) 'or' ( 'not' ( R2 '&' R3 ) ) ) => ( ( 'not' ( R2 '&' R3 ) ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) by L25;
L146: ( ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( ( 'not' ( R2 '&' R3 ) ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) by L145 , L144 , LUKASI_1:3;
L147: ( ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) => ( 'not' ( ( R2 '&' R3 ) '&' R4 ) ) ) in ( TAUT R1 ) by L146 , L137 , LUKASI_1:3;
L148: ( ( ( ( 'not' R4 ) 'or' ( 'not' R3 ) ) 'or' ( 'not' R2 ) ) => ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by L114;
L149: ( ( 'not' ( R2 '&' ( R3 '&' R4 ) ) ) => ( ( 'not' R4 ) 'or' ( ( 'not' R3 ) 'or' ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by L148 , L136 , LUKASI_1:3;
L150: ( ( 'not' ( R2 '&' ( R3 '&' R4 ) ) ) => ( 'not' ( ( R2 '&' R3 ) '&' R4 ) ) ) in ( TAUT R1 ) by L149 , L147 , LUKASI_1:3;
thus L151: thesis by L150 , LUKASI_1:35;
end;
theorem
L152: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( R2 'or' R3 ) 'or' R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L153: ( ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) => ( ( 'not' R4 ) => ( ( 'not' R2 ) => R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:8;
L154: (( ( 'not' R2 ) => ( ( ( 'not' R3 ) => R4 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => ( ( ( 'not' R3 ) => R4 ) => ( ( 'not' R4 ) => R3 ) ) ) => ( ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) => ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) ) ) in ( TAUT R1 )) by LUKASI_1:11 , LUKASI_1:13 , LUKASI_1:31;
L155: ( ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) => ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) by L154 , CQC_THE1:46;
L156: ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( 'not' R2 ) => ( R3 'or' R4 ) ) ) in ( TAUT R1 ) by L16;
L157: ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( 'not' R2 ) => ( ( 'not' R3 ) => R4 ) ) ) in ( TAUT R1 ) by L156 , L4;
L158: ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( 'not' R2 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) by L157 , L155 , LUKASI_1:3;
L159: ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( 'not' R4 ) => ( ( 'not' R2 ) => R3 ) ) ) in ( TAUT R1 ) by L158 , L153 , LUKASI_1:3;
L160: ( ( R2 'or' ( R3 'or' R4 ) ) => ( R4 'or' ( ( 'not' R2 ) => R3 ) ) ) in ( TAUT R1 ) by L159 , L4;
L161: ( ( R4 'or' ( ( 'not' R2 ) => R3 ) ) => ( ( ( 'not' R2 ) => R3 ) 'or' R4 ) ) in ( TAUT R1 ) by L25;
L162: ( ( R2 'or' ( R3 'or' R4 ) ) => ( ( ( 'not' R2 ) => R3 ) 'or' R4 ) ) in ( TAUT R1 ) by L161 , L160 , LUKASI_1:3;
thus L163: thesis by L162 , L4;
end;
theorem
L164: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( R3 => ( R2 '&' R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L165: ( ( ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) 'or' ( 'not' R3 ) ) => ( ( 'not' R3 ) 'or' ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by L25;
L166: ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) by L70;
L167: ( ( R2 '&' R3 ) 'or' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) by L166 , L4;
L168: ( ( ( R2 '&' R3 ) 'or' ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) => ( ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) by L152;
L169: ( ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) 'or' ( 'not' R3 ) ) in ( TAUT R1 ) by L168 , L167 , CQC_THE1:46;
L170: ( ( 'not' R3 ) 'or' ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L169 , L165 , CQC_THE1:46;
L171: ( ( 'not' ( 'not' R3 ) ) => ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L170 , L4;
L172: (( R3 => ( ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) => ( ( 'not' R2 ) 'or' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) & ( ( R3 => ( ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) => ( ( 'not' R2 ) 'or' ( R2 '&' R3 ) ) ) ) => ( ( R3 => ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) => ( R3 => ( ( 'not' R2 ) 'or' ( R2 '&' R3 ) ) ) ) ) in ( TAUT R1 )) by L25 , LUKASI_1:11 , LUKASI_1:13;
L173: ( ( R3 => ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) => ( R3 => ( ( 'not' R2 ) 'or' ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L172 , CQC_THE1:46;
L174: ( R3 => ( 'not' ( 'not' R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L175: ( R3 => ( ( R2 '&' R3 ) 'or' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L174 , L171 , LUKASI_1:3;
L176: ( R3 => ( ( 'not' R2 ) 'or' ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L175 , L173 , CQC_THE1:46;
L177: ( R3 => ( ( 'not' ( 'not' R2 ) ) => ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L176 , L4;
L178: ( ( 'not' ( 'not' R2 ) ) => ( R3 => ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L177 , LUKASI_1:15;
L179: ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
thus L180: thesis by L179 , L178 , LUKASI_1:3;
end;
theorem
L181: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R3 ) => ( ( R3 => R2 ) => ( R2 <=> R3 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L182: ( ( R2 => R3 ) => ( ( R3 => R2 ) => ( ( R2 => R3 ) '&' ( R3 => R2 ) ) ) ) in ( TAUT R1 ) by L164;
thus L183: thesis by L182 , QC_LANG2:def 4;
end;
L184: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ((R2 in ( TAUT R1 ) & R3 in ( TAUT R1 )) implies ( R2 '&' R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume that
L185: R2 in ( TAUT R1 )
and
L186: R3 in ( TAUT R1 );
L187: ( R2 => ( R3 => ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L164;
L188: ( R3 => ( R2 '&' R3 ) ) in ( TAUT R1 ) by L187 , L185 , CQC_THE1:46;
thus L189: thesis by L188 , L186 , CQC_THE1:46;
end;
theorem
L190: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 'or' R3 ) <=> ( R3 'or' R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
set D1 = ( R2 'or' R3 );
set D2 = ( R3 'or' R2 );
L191: (( D1 => D2 ) in ( TAUT R1 ) & ( D2 => D1 ) in ( TAUT R1 )) by L25;
L192: ( ( D1 => D2 ) '&' ( D2 => D1 ) ) in ( TAUT R1 ) by L191 , L184;
thus L193: thesis by L192 , QC_LANG2:def 4;
end;
theorem
L194: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 '&' R3 ) => R4 ) => ( R2 => ( R3 => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L195: (( R2 => ( ( R3 => ( R2 '&' R3 ) ) => ( ( ( R2 '&' R3 ) => R4 ) => ( R3 => R4 ) ) ) ) in ( TAUT R1 ) & ( R2 => ( R3 => ( R2 '&' R3 ) ) ) in ( TAUT R1 )) by L164 , LUKASI_1:1 , LUKASI_1:13;
L196: ( R2 => ( ( ( R2 '&' R3 ) => R4 ) => ( R3 => R4 ) ) ) in ( TAUT R1 ) by L195 , LUKASI_1:20;
L197: ( ( R2 => ( ( ( R2 '&' R3 ) => R4 ) => ( R3 => R4 ) ) ) => ( ( ( R2 '&' R3 ) => R4 ) => ( R2 => ( R3 => R4 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:8;
thus L198: thesis by L197 , L196 , CQC_THE1:46;
end;
theorem
L199: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( R3 => R4 ) ) => ( ( R2 '&' R3 ) => R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L200: ( ( R2 => ( ( R2 '&' R3 ) => R4 ) ) => ( ( R2 '&' R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by LUKASI_1:8;
L201: ( ( ( R2 '&' R3 ) => ( R2 => R4 ) ) => ( ( ( R2 '&' R3 ) => R2 ) => ( ( R2 '&' R3 ) => R4 ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L202: ( ( ( R2 '&' R3 ) => ( R2 => R4 ) ) => ( ( R2 '&' R3 ) => R4 ) ) in ( TAUT R1 ) by L201 , L88 , LUKASI_1:16;
L203: (( ( R2 '&' R3 ) => R3 ) in ( TAUT R1 ) & ( ( ( R2 '&' R3 ) => R3 ) => ( ( R3 => R4 ) => ( ( R2 '&' R3 ) => R4 ) ) ) in ( TAUT R1 )) by L101 , LUKASI_1:1;
L204: ( ( R3 => R4 ) => ( ( R2 '&' R3 ) => R4 ) ) in ( TAUT R1 ) by L203 , CQC_THE1:46;
L205: ( R2 => ( ( R3 => R4 ) => ( ( R2 '&' R3 ) => R4 ) ) ) in ( TAUT R1 ) by L204 , LUKASI_1:13;
L206: ( ( R2 => ( ( R3 => R4 ) => ( ( R2 '&' R3 ) => R4 ) ) ) => ( ( R2 => ( R3 => R4 ) ) => ( R2 => ( ( R2 '&' R3 ) => R4 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L207: ( ( R2 => ( R3 => R4 ) ) => ( R2 => ( ( R2 '&' R3 ) => R4 ) ) ) in ( TAUT R1 ) by L206 , L205 , CQC_THE1:46;
L208: ( ( R2 => ( R3 => R4 ) ) => ( ( R2 '&' R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L207 , L200 , LUKASI_1:3;
thus L209: thesis by L208 , L202 , LUKASI_1:3;
end;
theorem
L210: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R4 => R2 ) => ( ( R4 => R3 ) => ( R4 => ( R2 '&' R3 ) ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L211: (( R4 => ( R2 => ( R3 => ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) & ( ( R4 => ( R2 => ( R3 => ( R2 '&' R3 ) ) ) ) => ( ( R4 => R2 ) => ( R4 => ( R3 => ( R2 '&' R3 ) ) ) ) ) in ( TAUT R1 )) by L164 , LUKASI_1:11 , LUKASI_1:13;
L212: ( ( R4 => R2 ) => ( R4 => ( R3 => ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L211 , CQC_THE1:46;
L213: ( ( R4 => ( R3 => ( R2 '&' R3 ) ) ) => ( ( R4 => R3 ) => ( R4 => ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
thus L214: thesis by L213 , L212 , LUKASI_1:3;
end;
theorem
L215: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 'or' R3 ) => R4 ) => ( ( R2 => R4 ) 'or' ( R3 => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L216: (( R3 => ( R2 'or' R3 ) ) in ( TAUT R1 ) & ( ( R3 => ( R2 'or' R3 ) ) => ( ( ( R2 'or' R3 ) => R4 ) => ( R3 => R4 ) ) ) in ( TAUT R1 )) by L13 , LUKASI_1:1;
L217: ( ( ( R2 'or' R3 ) => R4 ) => ( R3 => R4 ) ) in ( TAUT R1 ) by L216 , CQC_THE1:46;
L218: ( ( 'not' ( R2 => R4 ) ) => ( ( ( R2 'or' R3 ) => R4 ) => ( R3 => R4 ) ) ) in ( TAUT R1 ) by L217 , LUKASI_1:13;
L219: ( ( ( R2 'or' R3 ) => R4 ) => ( ( 'not' ( R2 => R4 ) ) => ( R3 => R4 ) ) ) in ( TAUT R1 ) by L218 , LUKASI_1:15;
thus L220: thesis by L219 , L4;
end;
theorem
L221: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R4 ) => ( ( R3 => R4 ) => ( ( R2 'or' R3 ) => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
set D3 = ( ( 'not' R4 ) => ( 'not' R2 ) );
set D4 = ( ( 'not' R4 ) => ( 'not' R3 ) );
set D5 = ( ( 'not' R4 ) => ( ( 'not' R2 ) '&' ( 'not' R3 ) ) );
set D6 = ( ( R2 'or' R3 ) => R4 );
set D7 = ( R3 => R4 );
L222: ( D3 => ( D4 => D5 ) ) in ( TAUT R1 ) by L210;
L223: ( D5 => ( ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) => R4 ) ) in ( TAUT R1 ) by LUKASI_1:31;
L224: ( D5 => D6 ) in ( TAUT R1 ) by L223 , QC_LANG2:def 3;
L225: ( D4 => ( D5 => D6 ) ) in ( TAUT R1 ) by L224 , LUKASI_1:13;
L226: ( ( D4 => ( D5 => D6 ) ) => ( ( D4 => D5 ) => ( D4 => D6 ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L227: ( ( D4 => D5 ) => ( D4 => D6 ) ) in ( TAUT R1 ) by L226 , L225 , CQC_THE1:46;
L228: ( D3 => ( D4 => D6 ) ) in ( TAUT R1 ) by L227 , L222 , LUKASI_1:3;
L229: ( D4 => ( D3 => D6 ) ) in ( TAUT R1 ) by L228 , LUKASI_1:15;
L230: ( D7 => D4 ) in ( TAUT R1 ) by LUKASI_1:26;
L231: ( D7 => ( D3 => D6 ) ) in ( TAUT R1 ) by L230 , L229 , LUKASI_1:3;
L232: ( D3 => ( D7 => D6 ) ) in ( TAUT R1 ) by L231 , LUKASI_1:15;
L233: ( ( R2 => R4 ) => D3 ) in ( TAUT R1 ) by LUKASI_1:26;
thus L234: thesis by L233 , L232 , LUKASI_1:3;
end;
theorem
L235: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 => R4 ) '&' ( R3 => R4 ) ) => ( ( R2 'or' R3 ) => R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
set D8 = ( R2 => R4 );
set D9 = ( R3 => R4 );
set D10 = ( ( R2 'or' R3 ) => R4 );
L236: (( D8 => ( D9 => D10 ) ) in ( TAUT R1 ) & ( ( D8 => ( D9 => D10 ) ) => ( ( D8 '&' D9 ) => D10 ) ) in ( TAUT R1 )) by L199 , L221;
thus L237: thesis by L236 , CQC_THE1:46;
end;
theorem
L238: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( R3 '&' ( 'not' R3 ) ) ) => ( 'not' R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L239: ( R2 => ( 'not' ( R3 '&' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L1 , LUKASI_1:13;
L240: ( ( 'not' ( 'not' ( R3 '&' ( 'not' R3 ) ) ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L239 , LUKASI_1:34;
L241: ( ( R3 '&' ( 'not' R3 ) ) => ( 'not' ( 'not' ( R3 '&' ( 'not' R3 ) ) ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L242: ( ( R3 '&' ( 'not' R3 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L241 , L240 , LUKASI_1:3;
L243: ( R2 => ( ( R3 '&' ( 'not' R3 ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L242 , LUKASI_1:13;
L244: (( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R2 ) ) => R2 ) => ( ( R2 => ( 'not' R2 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R2 ) ) ) ) in ( TAUT R1 )) by LUKASI_1:1 , LUKASI_1:25;
L245: (( ( ( 'not' ( 'not' R2 ) ) => ( 'not' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) & ( ( R2 => ( 'not' R2 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 )) by L244 , CQC_THE1:42 , CQC_THE1:46;
L246: ( ( R2 => ( 'not' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L245 , LUKASI_1:3;
L247: ( ( R2 => ( ( R3 '&' ( 'not' R3 ) ) => ( 'not' R2 ) ) ) => ( ( R2 => ( R3 '&' ( 'not' R3 ) ) ) => ( R2 => ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L248: ( ( R2 => ( R3 '&' ( 'not' R3 ) ) ) => ( R2 => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L247 , L243 , CQC_THE1:46;
thus L249: thesis by L248 , L246 , LUKASI_1:3;
end;
theorem
L250: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 'or' R3 ) '&' ( R2 'or' R4 ) ) => ( R2 'or' ( R3 '&' R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L251: ( ( ( 'not' R2 ) => R3 ) => ( ( ( 'not' R2 ) => R4 ) => ( ( 'not' R2 ) => ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L210;
L252: ( ( R2 'or' R3 ) => ( ( ( 'not' R2 ) => R4 ) => ( ( 'not' R2 ) => ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L251 , L4;
L253: ( ( R2 'or' R3 ) => ( ( R2 'or' R4 ) => ( ( 'not' R2 ) => ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L252 , L4;
L254: ( ( R2 'or' R3 ) => ( ( R2 'or' R4 ) => ( R2 'or' ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L253 , L4;
L255: ( ( ( R2 'or' R3 ) => ( ( R2 'or' R4 ) => ( R2 'or' ( R3 '&' R4 ) ) ) ) => ( ( ( R2 'or' R3 ) '&' ( R2 'or' R4 ) ) => ( R2 'or' ( R3 '&' R4 ) ) ) ) in ( TAUT R1 ) by L199;
thus L256: thesis by L255 , L254 , CQC_THE1:46;
end;
theorem
L257: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 '&' ( R3 'or' R4 ) ) => ( ( R2 '&' R3 ) 'or' ( R2 '&' R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L258: ( ( 'not' ( ( R2 '&' R3 ) 'or' ( R2 '&' R4 ) ) ) => ( ( 'not' ( R2 '&' R3 ) ) '&' ( 'not' ( R2 '&' R4 ) ) ) ) in ( TAUT R1 ) by L19;
L259: (( ( 'not' ( R2 => ( 'not' R3 ) ) ) => ( R2 '&' R3 ) ) in ( TAUT R1 ) & ( ( ( 'not' ( R2 => ( 'not' R3 ) ) ) => ( R2 '&' R3 ) ) => ( ( 'not' ( R2 '&' R3 ) ) => ( R2 => ( 'not' R3 ) ) ) ) in ( TAUT R1 )) by L62 , LUKASI_1:31;
L260: ( ( 'not' ( R2 '&' R3 ) ) => ( R2 => ( 'not' R3 ) ) ) in ( TAUT R1 ) by L259 , CQC_THE1:46;
L261: (( ( 'not' ( R2 => ( 'not' R4 ) ) ) => ( R2 '&' R4 ) ) in ( TAUT R1 ) & ( ( ( 'not' ( R2 => ( 'not' R4 ) ) ) => ( R2 '&' R4 ) ) => ( ( 'not' ( R2 '&' R4 ) ) => ( R2 => ( 'not' R4 ) ) ) ) in ( TAUT R1 )) by L62 , LUKASI_1:31;
L262: ( ( 'not' ( R2 '&' R4 ) ) => ( R2 => ( 'not' R4 ) ) ) in ( TAUT R1 ) by L261 , CQC_THE1:46;
L263: (( ( R2 => ( 'not' R3 ) ) => ( ( R2 => ( 'not' R4 ) ) => ( R2 => ( ( 'not' R3 ) '&' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) & ( R2 => ( ( 'not' R3 ) '&' ( 'not' R4 ) ) ) = ( 'not' ( R2 '&' ( 'not' ( ( 'not' R3 ) '&' ( 'not' R4 ) ) ) ) )) by L210 , QC_LANG2:def 2;
L264: ( ( R2 => ( 'not' R3 ) ) => ( ( R2 => ( 'not' R4 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L263 , QC_LANG2:def 3;
L265: ( ( 'not' ( R2 '&' R3 ) ) => ( ( R2 => ( 'not' R4 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L264 , L260 , LUKASI_1:3;
L266: ( ( R2 => ( 'not' R4 ) ) => ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L265 , LUKASI_1:15;
L267: ( ( 'not' ( R2 '&' R4 ) ) => ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L266 , L262 , LUKASI_1:3;
L268: ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' ( R2 '&' R4 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L267 , LUKASI_1:15;
L269: ( ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' ( R2 '&' R4 ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) => ( ( ( 'not' ( R2 '&' R3 ) ) '&' ( 'not' ( R2 '&' R4 ) ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) ) in ( TAUT R1 ) by L199;
L270: ( ( ( 'not' ( R2 '&' R3 ) ) '&' ( 'not' ( R2 '&' R4 ) ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) in ( TAUT R1 ) by L269 , L268 , CQC_THE1:46;
L271: ( ( 'not' ( ( R2 '&' R3 ) 'or' ( R2 '&' R4 ) ) ) => ( 'not' ( R2 '&' ( R3 'or' R4 ) ) ) ) in ( TAUT R1 ) by L270 , L258 , LUKASI_1:3;
thus L272: thesis by L271 , LUKASI_1:35;
end;
theorem
L273: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 'or' R4 ) '&' ( R3 'or' R4 ) ) => ( ( R2 '&' R3 ) 'or' R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L274: ( ( ( ( 'not' R2 ) => R4 ) '&' ( ( 'not' R3 ) => R4 ) ) => ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => R4 ) ) in ( TAUT R1 ) by L235;
L275: ( ( ( R2 'or' R4 ) '&' ( ( 'not' R3 ) => R4 ) ) => ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => R4 ) ) in ( TAUT R1 ) by L274 , L4;
L276: ( ( ( R2 'or' R4 ) '&' ( R3 'or' R4 ) ) => ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => R4 ) ) in ( TAUT R1 ) by L275 , L4;
L277: (( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' ( R2 '&' R3 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) ) => ( ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => R4 ) => ( ( 'not' ( R2 '&' R3 ) ) => R4 ) ) ) in ( TAUT R1 )) by L70 , LUKASI_1:1;
L278: ( ( ( ( 'not' R2 ) 'or' ( 'not' R3 ) ) => R4 ) => ( ( 'not' ( R2 '&' R3 ) ) => R4 ) ) in ( TAUT R1 ) by L277 , CQC_THE1:46;
L279: ( ( ( R2 'or' R4 ) '&' ( R3 'or' R4 ) ) => ( ( 'not' ( R2 '&' R3 ) ) => R4 ) ) in ( TAUT R1 ) by L278 , L276 , LUKASI_1:3;
thus L280: thesis by L279 , L4;
end;
L281: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R4 '&' R2 ) => ( R4 '&' R3 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L282: ( ( 'not' ( R4 => ( 'not' R3 ) ) ) => ( R4 '&' R3 ) ) in ( TAUT R1 ) by L62;
assume L283: ( R2 => R3 ) in ( TAUT R1 );
L284: ( ( 'not' R3 ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L283 , LUKASI_1:34;
L285: ( R4 => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L284 , LUKASI_1:13;
L286: ( ( R4 => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) => ( ( R4 => ( 'not' R3 ) ) => ( R4 => ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L287: ( ( R4 => ( 'not' R3 ) ) => ( R4 => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L286 , L285 , CQC_THE1:46;
L288: ( ( 'not' ( R4 => ( 'not' R2 ) ) ) => ( 'not' ( R4 => ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L287 , LUKASI_1:34;
L289: ( ( R4 '&' R2 ) => ( 'not' ( R4 => ( 'not' R2 ) ) ) ) in ( TAUT R1 ) by L54;
L290: ( ( R4 '&' R2 ) => ( 'not' ( R4 => ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L289 , L288 , LUKASI_1:3;
thus L291: thesis by L290 , L282 , LUKASI_1:3;
end;
L292: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R2 'or' R4 ) => ( R3 'or' R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L293: ( R2 => R3 ) in ( TAUT R1 );
L294: ( ( 'not' R3 ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L293 , LUKASI_1:34;
L295: ( ( ( 'not' R3 ) => ( 'not' R2 ) ) => ( ( ( 'not' R2 ) => R4 ) => ( ( 'not' R3 ) => R4 ) ) ) in ( TAUT R1 ) by LUKASI_1:1;
L296: ( ( ( 'not' R2 ) => R4 ) => ( ( 'not' R3 ) => R4 ) ) in ( TAUT R1 ) by L295 , L294 , CQC_THE1:46;
L297: ( ( R2 'or' R4 ) => ( ( 'not' R3 ) => R4 ) ) in ( TAUT R1 ) by L296 , L4;
thus L298: thesis by L297 , L4;
end;
L299: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R4 'or' R2 ) => ( R4 'or' R3 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L300: ( R2 => R3 ) in ( TAUT R1 );
L301: ( ( 'not' R4 ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L300 , LUKASI_1:13;
L302: ( ( ( 'not' R4 ) => ( R2 => R3 ) ) => ( ( ( 'not' R4 ) => R2 ) => ( ( 'not' R4 ) => R3 ) ) ) in ( TAUT R1 ) by LUKASI_1:11;
L303: ( ( ( 'not' R4 ) => R2 ) => ( ( 'not' R4 ) => R3 ) ) in ( TAUT R1 ) by L302 , L301 , CQC_THE1:46;
L304: ( ( R4 'or' R2 ) => ( ( 'not' R4 ) => R3 ) ) in ( TAUT R1 ) by L303 , L4;
thus L305: thesis by L304 , L4;
end;
theorem
L306: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 'or' R3 ) '&' R4 ) => ( ( R2 '&' R4 ) 'or' ( R3 '&' R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L307: ( ( 'not' ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) => ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L70;
L308: ( ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) => ( ( ( 'not' R2 ) '&' ( 'not' R3 ) ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) by L273;
L309: ( ( 'not' ( ( ( 'not' R2 ) '&' ( 'not' R3 ) ) 'or' ( 'not' R4 ) ) ) => ( 'not' ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L308 , LUKASI_1:34;
L310: ( ( ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) '&' ( 'not' ( 'not' R4 ) ) ) => ( 'not' ( ( ( 'not' R2 ) '&' ( 'not' R3 ) ) 'or' ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by L22;
L311: ( ( ( 'not' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) ) '&' ( 'not' ( 'not' R4 ) ) ) => ( 'not' ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L310 , L309 , LUKASI_1:3;
L312: ( ( ( R2 'or' R3 ) '&' ( 'not' ( 'not' R4 ) ) ) => ( 'not' ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L311 , QC_LANG2:def 3;
L313: (( ( 'not' ( R2 '&' R4 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' ( R2 '&' R4 ) ) => ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) => ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) => ( R2 '&' R4 ) ) ) in ( TAUT R1 )) by L70 , LUKASI_1:31;
L314: ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) => ( R2 '&' R4 ) ) in ( TAUT R1 ) by L313 , CQC_THE1:46;
L315: ( ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) => ( ( R2 '&' R4 ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L314 , L292;
L316: (( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' ( R3 '&' R4 ) ) => ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) => ( ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) => ( R3 '&' R4 ) ) ) in ( TAUT R1 )) by L70 , LUKASI_1:31;
L317: ( ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) => ( R3 '&' R4 ) ) in ( TAUT R1 ) by L316 , CQC_THE1:46;
L318: ( ( ( R2 '&' R4 ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) => ( ( R2 '&' R4 ) 'or' ( R3 '&' R4 ) ) ) in ( TAUT R1 ) by L317 , L299;
L319: ( R4 => ( 'not' ( 'not' R4 ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L320: ( ( ( R2 'or' R3 ) '&' R4 ) => ( ( R2 'or' R3 ) '&' ( 'not' ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by L319 , L281;
L321: ( ( ( R2 'or' R3 ) '&' R4 ) => ( 'not' ( ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) '&' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L320 , L312 , LUKASI_1:3;
L322: ( ( ( R2 'or' R3 ) '&' R4 ) => ( ( 'not' ( ( 'not' R2 ) 'or' ( 'not' R4 ) ) ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L321 , L307 , LUKASI_1:3;
L323: ( ( ( R2 'or' R3 ) '&' R4 ) => ( ( R2 '&' R4 ) 'or' ( 'not' ( ( 'not' R3 ) 'or' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L322 , L315 , LUKASI_1:3;
thus L324: thesis by L323 , L318 , LUKASI_1:3;
end;
theorem
L325: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (R2 in ( TAUT R1 ) implies ( R2 'or' R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L326: R2 in ( TAUT R1 );
L327: ( R2 => ( R2 'or' R3 ) ) in ( TAUT R1 ) by L10;
thus L328: thesis by L327 , L326 , CQC_THE1:46;
end;
theorem
L329: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (R3 in ( TAUT R1 ) implies ( R2 'or' R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L330: R3 in ( TAUT R1 );
L331: ( R3 => ( R2 'or' R3 ) ) in ( TAUT R1 ) by L13;
thus L332: thesis by L331 , L330 , CQC_THE1:46;
end;
theorem
L333: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 '&' R3 ) in ( TAUT R1 ) implies R2 in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L334: ( R2 '&' R3 ) in ( TAUT R1 );
L335: ( ( R2 '&' R3 ) => R2 ) in ( TAUT R1 ) by L88;
thus L336: thesis by L335 , L334 , CQC_THE1:46;
end;
theorem
L337: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 '&' R3 ) in ( TAUT R1 ) implies R3 in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L338: ( R2 '&' R3 ) in ( TAUT R1 );
L339: ( ( R2 '&' R3 ) => R3 ) in ( TAUT R1 ) by L101;
thus L340: thesis by L339 , L338 , CQC_THE1:46;
end;
theorem
L341: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 '&' R3 ) in ( TAUT R1 ) implies ( R2 'or' R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L342: ( R2 '&' R3 ) in ( TAUT R1 );
L343: ( ( R2 '&' R3 ) => ( R2 'or' R3 ) ) in ( TAUT R1 ) by L98;
thus L344: thesis by L343 , L342 , CQC_THE1:46;
end;
theorem
L345: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ((R2 in ( TAUT R1 ) & R3 in ( TAUT R1 )) implies ( R2 '&' R3 ) in ( TAUT R1 ))))) by L184;
theorem
L346: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R2 'or' R4 ) => ( R3 'or' R4 ) ) in ( TAUT R1 )))))) by L292;
theorem
L347: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R4 'or' R2 ) => ( R4 'or' R3 ) ) in ( TAUT R1 )))))) by L299;
theorem
L348: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R4 '&' R2 ) => ( R4 '&' R3 ) ) in ( TAUT R1 )))))) by L281;
theorem
L349: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R2 '&' R4 ) => ( R3 '&' R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L350: ( ( R2 => R3 ) => ( ( R3 => ( 'not' R4 ) ) => ( R2 => ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by LUKASI_1:1;
assume L351: ( R2 => R3 ) in ( TAUT R1 );
L352: ( ( R3 => ( 'not' R4 ) ) => ( R2 => ( 'not' R4 ) ) ) in ( TAUT R1 ) by L351 , L350 , CQC_THE1:46;
L353: ( ( 'not' ( R2 => ( 'not' R4 ) ) ) => ( 'not' ( R3 => ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by L352 , LUKASI_1:34;
L354: ( ( 'not' ( R3 => ( 'not' R4 ) ) ) => ( R3 '&' R4 ) ) in ( TAUT R1 ) by L62;
L355: ( ( R2 '&' R4 ) => ( 'not' ( R2 => ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by L54;
L356: ( ( R2 '&' R4 ) => ( 'not' ( R3 => ( 'not' R4 ) ) ) ) in ( TAUT R1 ) by L355 , L353 , LUKASI_1:3;
thus L357: thesis by L356 , L354 , LUKASI_1:3;
end;
theorem
L358: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R4 => R2 ) in ( TAUT R1 ) & ( R4 => R3 ) in ( TAUT R1 )) implies ( R4 => ( R2 '&' R3 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume that
L359: ( R4 => R2 ) in ( TAUT R1 )
and
L360: ( R4 => R3 ) in ( TAUT R1 );
L361: ( ( R4 => R2 ) => ( ( R4 => R3 ) => ( R4 => ( R2 '&' R3 ) ) ) ) in ( TAUT R1 ) by L210;
L362: ( ( R4 => R3 ) => ( R4 => ( R2 '&' R3 ) ) ) in ( TAUT R1 ) by L361 , L359 , CQC_THE1:46;
thus L363: thesis by L362 , L360 , CQC_THE1:46;
end;
theorem
L364: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => R4 ) in ( TAUT R1 ) & ( R3 => R4 ) in ( TAUT R1 )) implies ( ( R2 'or' R3 ) => R4 ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L365: (( R2 => R4 ) in ( TAUT R1 ) & ( R3 => R4 ) in ( TAUT R1 ));
L366: ( ( R2 => R4 ) '&' ( R3 => R4 ) ) in ( TAUT R1 ) by L365 , L184;
L367: ( ( ( R2 => R4 ) '&' ( R3 => R4 ) ) => ( ( R2 'or' R3 ) => R4 ) ) in ( TAUT R1 ) by L235;
thus L368: thesis by L367 , L366 , CQC_THE1:46;
end;
theorem
L369: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ((( R2 'or' R3 ) in ( TAUT R1 ) & ( 'not' R2 ) in ( TAUT R1 )) implies R3 in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume that
L370: ( R2 'or' R3 ) in ( TAUT R1 )
and
L371: ( 'not' R2 ) in ( TAUT R1 );
L372: ( ( R2 'or' R3 ) => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) by L16;
L373: ( ( 'not' R2 ) => R3 ) in ( TAUT R1 ) by L372 , L370 , CQC_THE1:46;
thus L374: thesis by L373 , L371 , CQC_THE1:46;
end;
theorem
L375: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ((( R2 'or' R3 ) in ( TAUT R1 ) & ( 'not' R3 ) in ( TAUT R1 )) implies R2 in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume that
L376: ( R2 'or' R3 ) in ( TAUT R1 )
and
L377: ( 'not' R3 ) in ( TAUT R1 );
L378: (( ( R3 'or' R2 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) & ( ( R2 'or' R3 ) => ( R3 'or' R2 ) ) in ( TAUT R1 )) by L16 , L25;
L379: ( ( R2 'or' R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) by L378 , LUKASI_1:3;
L380: ( ( 'not' R3 ) => R2 ) in ( TAUT R1 ) by L379 , L376 , CQC_THE1:46;
thus L381: thesis by L380 , L377 , CQC_THE1:46;
end;
theorem
L382: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((( R2 => R3 ) in ( TAUT R1 ) & ( R4 => R5 ) in ( TAUT R1 )) implies ( ( R2 '&' R4 ) => ( R3 '&' R5 ) ) in ( TAUT R1 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume L383: (( R2 => R3 ) in ( TAUT R1 ) & ( R4 => R5 ) in ( TAUT R1 ));
L384: (( ( R2 '&' R4 ) => ( R3 '&' R4 ) ) in ( TAUT R1 ) & ( ( R3 '&' R4 ) => ( R3 '&' R5 ) ) in ( TAUT R1 )) by L383 , L281 , L349;
thus L385: thesis by L384 , LUKASI_1:3;
end;
theorem
L386: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((( R2 => R3 ) in ( TAUT R1 ) & ( R4 => R5 ) in ( TAUT R1 )) implies ( ( R2 'or' R4 ) => ( R3 'or' R5 ) ) in ( TAUT R1 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume L387: (( R2 => R3 ) in ( TAUT R1 ) & ( R4 => R5 ) in ( TAUT R1 ));
L388: (( ( R2 'or' R4 ) => ( R3 'or' R4 ) ) in ( TAUT R1 ) & ( ( R3 'or' R4 ) => ( R3 'or' R5 ) ) in ( TAUT R1 )) by L387 , L292 , L299;
thus L389: thesis by L388 , LUKASI_1:3;
end;
theorem
L390: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( R2 '&' ( 'not' R3 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) implies ( R2 => R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L391: ( 'not' ( R2 '&' ( 'not' R3 ) ) ) = ( R2 => R3 ) by QC_LANG2:def 2;
assume L392: ( ( R2 '&' ( 'not' R3 ) ) => ( 'not' R2 ) ) in ( TAUT R1 );
L393: ( ( 'not' ( 'not' R2 ) ) => ( 'not' ( R2 '&' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L392 , LUKASI_1:34;
L394: ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by LUKASI_1:27;
L395: ( R2 => ( 'not' ( R2 '&' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L394 , L393 , LUKASI_1:3;
thus L396: thesis by L395 , L391 , LUKASI_1:18;
end;
