:: Binary Arithmetics. Addition
::  by Takaya Nishiyama and Yasuho Mizuhara
::
:: Received October 8, 1993
:: Copyright (c) 1993-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, NAT_1, XBOOLE_0, SUBSET_1, FINSEQ_2, FINSEQ_1, ORDINAL4,
      PARTFUN1, RELAT_1, ARYTM_3, CARD_1, MARGREL1, XBOOLEAN, XCMPLX_0,
      FUNCT_1, XXREAL_0, ARYTM_1, FUNCOP_1, POWER, BINOP_2, SETWISEO, REAL_1,
      BINARITH;
 notations XBOOLE_0, SUBSET_1, NUMBERS, XCMPLX_0, REAL_1, XBOOLEAN, MARGREL1,
      FUNCT_1, PARTFUN1, FUNCT_2, BINOP_1, BINOP_2, SETWISEO, FUNCOP_1,
      SETWOP_2, SERIES_1, FINSEQ_1, FINSEQ_2, XXREAL_0, ORDINAL1, NAT_1, NAT_D;
 constructors BINOP_1, SETWISEO, XXREAL_0, NAT_1, INT_1, BINOP_2, MARGREL1,
      PARTFUN1, FINSOP_1, SERIES_1, RFINSEQ, SEQ_1, REAL_1, NAT_D, RELSET_1,
      FINSEQ_2;
 registrations ORDINAL1, RELSET_1, NUMBERS, XXREAL_0, XREAL_0, NAT_1, INT_1,
      BINOP_2, XBOOLEAN, MARGREL1, FINSEQ_2, XBOOLE_0, REAL_1, CARD_1,
      FINSEQ_1;
 requirements REAL, NUMERALS, BOOLE, SUBSET, ARITHM;
 definitions FINSEQ_1, TARSKI, XBOOLEAN;
 theorems NAT_1, INT_1, FINSEQ_1, FINSEQ_2, FINSEQ_4, FUNCT_1, TARSKI, POWER,
      FINSOP_1, XBOOLE_0, BINOP_2, XREAL_1, XXREAL_0, XBOOLEAN, FUNCOP_1,
      PARTFUN1, FINSEQ_3, XREAL_0, NAT_D, CARD_1;
 schemes FINSEQ_1, FINSEQ_2, NAT_1;

begin
theorem
L1: (for B1 , B2 being Nat holds (for B3 being non  empty set holds (for B4 being (Element of B3) holds (for B5 being (Tuple of B2 , B3) holds (B1 in ( Seg B2 ) implies ( ( B5 ^ <* B4 *> ) /. B1 ) = ( B5 /. B1 ))))))
proof
let C1 , C2 being Nat;
let C3 being non  empty set;
let C4 being (Element of C3);
let C5 being (Tuple of C2 , C3);
assume that
L2: C1 in ( Seg C2 );
L3: ( len C5 ) = C2 by CARD_1:def 7;
L4: C1 in ( dom C5 ) by L3 , L2 , FINSEQ_1:def 3;
thus L5: thesis by L4 , FINSEQ_4:68;
end;
theorem
L6: (for B6 being Nat holds (for B7 being non  empty set holds (for B8 being (Element of B7) holds (for B9 being (Tuple of B6 , B7) holds ( ( B9 ^ <* B8 *> ) /. ( B6 + 1 ) ) = B8))))
proof
let C6 being Nat;
let C7 being non  empty set;
let C8 being (Element of C7);
let C9 being (Tuple of C6 , C7);
L7: ( len <* C8 *> ) = 1 by FINSEQ_1:39;
L8: ( ( 0 ) + 1 ) in ( Seg ( len <* C8 *> ) ) by L7;
L9: ( ( 0 ) + 1 ) in ( dom <* C8 *> ) by L8 , FINSEQ_1:def 3;
L10: ( len C9 ) = C6 by CARD_1:def 7;
thus L11: ( ( C9 ^ <* C8 *> ) /. ( C6 + 1 ) ) = ( <* C8 *> /. 1 ) by L10 , L9 , FINSEQ_4:69
.= C8 by FINSEQ_4:16;
end;
definition
let C10 , C11 being (Element of ( BOOLEAN ));
redefine func C10 'or' C11 -> (Element of ( BOOLEAN ));

correctness
proof
L12: (( C10 'or' C11 ) = ( FALSE ) or ( C10 'or' C11 ) = ( TRUE )) by XBOOLEAN:def 3;
thus L13: thesis by L12;
end;
redefine func C10 'xor' C11 -> (Element of ( BOOLEAN ));

correctness
proof
L14: (( C10 'xor' C11 ) = ( FALSE ) or ( C10 'xor' C11 ) = ( TRUE )) by XBOOLEAN:def 3;
thus L15: thesis by L14;
end;
end;
theorem
L17: (for R1 being  boolean set holds ( R1 'or' ( FALSE ) ) = R1);
theorem
L18: (for R1 being  boolean set holds (for R2 being  boolean set holds ( 'not' ( R1 '&' R2 ) ) = ( ( 'not' R1 ) 'or' ( 'not' R2 ) )));
theorem
L19: (for R1 being  boolean set holds (for R2 being  boolean set holds ( 'not' ( R1 'or' R2 ) ) = ( ( 'not' R1 ) '&' ( 'not' R2 ) )));
theorem
L20: (for R1 being  boolean set holds (for R2 being  boolean set holds ( R1 '&' R2 ) = ( 'not' ( ( 'not' R1 ) 'or' ( 'not' R2 ) ) )));
theorem
L21: (for R1 being  boolean set holds ( ( TRUE ) 'xor' R1 ) = ( 'not' R1 ));
theorem
L22: (for R1 being  boolean set holds ( ( FALSE ) 'xor' R1 ) = R1);
theorem
L23: (for R1 being  boolean set holds ( R1 '&' R1 ) = R1);
theorem
L24: (for R1 being  boolean set holds ( R1 'or' ( TRUE ) ) = ( TRUE ));
theorem
L25: (for R1 being  boolean set holds (for R2 being  boolean set holds (for R3 being  boolean set holds ( ( R1 'or' R2 ) 'or' R3 ) = ( R1 'or' ( R2 'or' R3 ) ))));
theorem
L26: (for R1 being  boolean set holds ( R1 'or' R1 ) = R1);
theorem
L27: ( ( TRUE ) 'xor' ( FALSE ) ) = ( TRUE );
definition
let C12 being Nat;
let C13 being (Tuple of C12 , ( BOOLEAN ));
func 'not' C13 -> (Tuple of C12 , ( BOOLEAN )) means 
(for R4 being Nat holds (R4 in ( Seg C12 ) implies ( it /. R4 ) = ( 'not' ( C13 /. R4 ) )));
existence
proof
deffunc H1(Nat) = ( 'not' ( C13 /. $1 ) );
consider C14 being (FinSequence of ( BOOLEAN )) such that L28: ( len C14 ) = C12 and L29: (for B10 being Nat holds (B10 in ( dom C14 ) implies ( C14 . B10 ) = H1(B10))) from FINSEQ_2:sch 1;
L30: ( dom C14 ) = ( Seg C12 ) by L28 , FINSEQ_1:def 3;
reconsider D1 = C14 as (Tuple of C12 , ( BOOLEAN )) by L28 , CARD_1:def 7;
take D1;
let R4 being Nat;
assume L31: R4 in ( Seg C12 );
L32: R4 in ( dom D1 ) by L31 , L28 , FINSEQ_1:def 3;
thus L33: ( D1 /. R4 ) = ( D1 . R4 ) by L32 , PARTFUN1:def 6
.= ( 'not' ( C13 /. R4 ) ) by L29 , L30 , L31;
end;
uniqueness
proof
let C15 , C16 being (Tuple of C12 , ( BOOLEAN ));
assume that
L34: (for R4 being Nat holds (R4 in ( Seg C12 ) implies ( C15 /. R4 ) = ( 'not' ( C13 /. R4 ) )))
and
L35: (for R4 being Nat holds (R4 in ( Seg C12 ) implies ( C16 /. R4 ) = ( 'not' ( C13 /. R4 ) )));
L36: ( len C15 ) = C12 by CARD_1:def 7;
L37: ( dom C15 ) = ( Seg C12 ) by L36 , FINSEQ_1:def 3;
L38: ( len C16 ) = C12 by CARD_1:def 7;
L39:
now
let C17 being Nat;
assume L40: C17 in ( dom C15 );
L41: C17 in ( dom C16 ) by L40 , L38 , L37 , FINSEQ_1:def 3;
thus L42: ( C15 . C17 ) = ( C15 /. C17 ) by L40 , PARTFUN1:def 6
.= ( 'not' ( C13 /. C17 ) ) by L34 , L37 , L40
.= ( C16 /. C17 ) by L35 , L37 , L40
.= ( C16 . C17 ) by L41 , PARTFUN1:def 6;
end;
thus L43: thesis by L39 , L36 , L38 , FINSEQ_2:9;
end;
end;
definition
let C18 being non  empty Nat;
let C19 , C20 being (Tuple of C18 , ( BOOLEAN ));
func carry (C19 , C20) -> (Tuple of C18 , ( BOOLEAN )) means 
:L45: (( it /. 1 ) = ( FALSE ) & (for B11 being Nat holds ((1 <= B11 & B11 < C18) implies ( it /. ( B11 + 1 ) ) = ( ( ( ( C19 /. B11 ) '&' ( C20 /. B11 ) ) 'or' ( ( C19 /. B11 ) '&' ( it /. B11 ) ) ) 'or' ( ( C20 /. B11 ) '&' ( it /. B11 ) ) ))));
existence
proof
deffunc H2(Nat , (Element of ( BOOLEAN ))) = ( ( ( ( C19 /. ( $1 + 1 ) ) '&' ( C20 /. ( $1 + 1 ) ) ) 'or' ( ( C19 /. ( $1 + 1 ) ) '&' $2 ) ) 'or' ( ( C20 /. ( $1 + 1 ) ) '&' $2 ) );
consider C21 being (Function of ( NAT ) , ( BOOLEAN )) such that L46: ( C21 . ( 0 ) ) = ( FALSE ) and L47: (for B12 being Nat holds ( C21 . ( B12 + 1 ) ) = H2(B12 , ( C21 . B12 ))) from NAT_1:sch 12;
deffunc H3(Nat) = ( C21 . ( $1 - 1 ) );
consider C22 being FinSequence such that L48: ( len C22 ) = C18 and L49: (for B13 being Nat holds (B13 in ( dom C22 ) implies ( C22 . B13 ) = H3(B13))) from FINSEQ_1:sch 2;
L50: C22 is (FinSequence of ( BOOLEAN ))
proof
let C23 being set;
assume L51: C23 in ( rng C22 );
consider C24 being set such that L52: C24 in ( dom C22 ) and L53: C23 = ( C22 . C24 ) by L51 , FUNCT_1:def 3;
L54: C24 in ( Seg C18 ) by L48 , L52 , FINSEQ_1:def 3;
reconsider D2 = C24 as (Element of ( NAT )) by L52;
L55: D2 >= 1 by L54 , FINSEQ_1:1;
reconsider D3 = ( D2 - 1 ) as (Element of ( NAT )) by L55 , INT_1:5;
L56: ( C22 . D2 ) = ( C21 . D3 ) by L49 , L52;
thus L57: thesis by L56 , L53;
end;
reconsider D4 = C22 as (Tuple of C18 , ( BOOLEAN )) by L50 , L48 , CARD_1:def 7;
take D4;
L58: ( ( 0 ) + 1 ) <= C18 by NAT_1:13;
L59: 1 in ( Seg C18 ) by L58;
L60: 1 in ( dom D4 ) by L59 , L48 , FINSEQ_1:def 3;
thus L61: ( D4 /. 1 ) = ( D4 . 1 ) by L60 , PARTFUN1:def 6
.= ( C21 . ( 1 - 1 ) ) by L49 , L60
.= ( FALSE ) by L46;
let C25 being Nat;
assume that
L62: 1 <= C25
and
L63: C25 < C18;
consider C26 being Nat such that L64: ( C26 + 1 ) = C25 by L62 , NAT_1:6;
L65: ( C26 + 1 ) in ( Seg C18 ) by L62 , L63 , L64;
L66: ( C26 + 1 ) in ( dom D4 ) by L65 , L48 , FINSEQ_1:def 3;
L67: ( D4 /. ( C26 + 1 ) ) = ( D4 . ( C26 + 1 ) ) by L66 , PARTFUN1:def 6
.= ( C21 . ( ( C26 + 1 ) - 1 ) ) by L49 , L66
.= ( C21 . C26 );
L68: ( ( C25 + 1 ) - 1 ) = C25;
L69: (1 <= ( C25 + 1 ) & ( C25 + 1 ) <= C18) by L62 , L63 , NAT_1:13;
L70: ( C25 + 1 ) in ( dom D4 ) by L69 , L48 , FINSEQ_3:25;
thus L71: ( D4 /. ( C25 + 1 ) ) = ( D4 . ( C25 + 1 ) ) by L70 , PARTFUN1:def 6
.= ( C21 . ( C26 + 1 ) ) by L49 , L64 , L68 , L70
.= ( ( ( ( C19 /. C25 ) '&' ( C20 /. C25 ) ) 'or' ( ( C19 /. C25 ) '&' ( D4 /. C25 ) ) ) 'or' ( ( C20 /. C25 ) '&' ( D4 /. C25 ) ) ) by L47 , L64 , L67;
end;
uniqueness
proof
let C27 , C28 being (Tuple of C18 , ( BOOLEAN ));
assume that
L72: ( C27 /. 1 ) = ( FALSE )
and
L73: (for B14 being Nat holds ((1 <= B14 & B14 < C18) implies ( C27 /. ( B14 + 1 ) ) = ( ( ( ( C19 /. B14 ) '&' ( C20 /. B14 ) ) 'or' ( ( C19 /. B14 ) '&' ( C27 /. B14 ) ) ) 'or' ( ( C20 /. B14 ) '&' ( C27 /. B14 ) ) )))
and
L74: ( C28 /. 1 ) = ( FALSE )
and
L75: (for B15 being Nat holds ((1 <= B15 & B15 < C18) implies ( C28 /. ( B15 + 1 ) ) = ( ( ( ( C19 /. B15 ) '&' ( C20 /. B15 ) ) 'or' ( ( C19 /. B15 ) '&' ( C28 /. B15 ) ) ) 'or' ( ( C20 /. B15 ) '&' ( C28 /. B15 ) ) )));
L76: ( len C28 ) = C18 by CARD_1:def 7;
L77: ( len C27 ) = C18 by CARD_1:def 7;
L78: ( dom C27 ) = ( Seg C18 ) by L77 , FINSEQ_1:def 3;
L79:
now
defpred S1[ Nat ] means ($1 in ( Seg C18 ) implies ( C27 /. $1 ) = ( C28 /. $1 ));
L80: (( dom C27 ) = ( Seg C18 ) & ( dom C28 ) = ( Seg C18 )) by L77 , L76 , FINSEQ_1:def 3;
L81:
now
let R6 being Nat;
assume that
L82: S1[ R6 ];
thus L83: S1[ ( R6 + 1 ) ]
proof
assume L84: ( R6 + 1 ) in ( Seg C18 );
per cases ;
suppose L85: R6 = ( 0 );

thus L86: thesis by L85 , L72 , L74;
end;
suppose L87: R6 <> ( 0 );

L88: (( R6 + 1 ) <= C18 & R6 < ( R6 + 1 )) by L84 , FINSEQ_1:1 , XREAL_1:29;
L89: R6 < C18 by L88 , XXREAL_0:2;
L90: R6 >= ( ( 0 ) + 1 ) by L87 , NAT_1:13;
thus L91: ( C27 /. ( R6 + 1 ) ) = ( ( ( ( C19 /. R6 ) '&' ( C20 /. R6 ) ) 'or' ( ( C19 /. R6 ) '&' ( C27 /. R6 ) ) ) 'or' ( ( C20 /. R6 ) '&' ( C27 /. R6 ) ) ) by L90 , L73 , L89
.= ( C28 /. ( R6 + 1 ) ) by L75 , L82 , L90 , L89 , FINSEQ_1:1;
end;
end;

end;
L84: S1[ ( 0 ) ] by FINSEQ_1:1;
L85: (for R6 being Nat holds S1[ R6 ]) from NAT_1:sch 2(L84 , L81);
let C29 being Nat;
assume that
L86: C29 in ( dom C27 );
thus L87: ( C27 . C29 ) = ( C27 /. C29 ) by L86 , PARTFUN1:def 6
.= ( C28 /. C29 ) by L78 , L86 , L85
.= ( C28 . C29 ) by L86 , L80 , PARTFUN1:def 6;
end;
thus L88: thesis by L79 , L77 , L76 , FINSEQ_2:9;
end;
end;
definition
let C30 being Nat;
let C31 being (Tuple of C30 , ( BOOLEAN ));
func Binary C31 -> (Tuple of C30 , ( NAT )) means 
:L90: (for R4 being Nat holds (R4 in ( Seg C30 ) implies ( it /. R4 ) = ( IFEQ (( C31 /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) )));
existence
proof
deffunc H4(Nat) = ( IFEQ (( C31 /. $1 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( $1 -' 1 ) )) );
consider C32 being (FinSequence of ( NAT )) such that L91: ( len C32 ) = C30 and L92: (for B16 being Nat holds (B16 in ( dom C32 ) implies ( C32 . B16 ) = H4(B16))) from FINSEQ_2:sch 1;
L93: ( dom C32 ) = ( Seg C30 ) by L91 , FINSEQ_1:def 3;
reconsider D5 = C32 as (Tuple of C30 , ( NAT )) by L91 , CARD_1:def 7;
take D5;
let R5 being Nat;
assume L94: R5 in ( Seg C30 );
L95: R5 in ( dom D5 ) by L94 , L91 , FINSEQ_1:def 3;
thus L96: ( D5 /. R5 ) = ( D5 . R5 ) by L95 , PARTFUN1:def 6
.= ( IFEQ (( C31 /. R5 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R5 -' 1 ) )) ) by L92 , L93 , L94;
end;
uniqueness
proof
let C33 , C34 being (Tuple of C30 , ( NAT ));
assume that
L97: (for R4 being Nat holds (R4 in ( Seg C30 ) implies ( C33 /. R4 ) = ( IFEQ (( C31 /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) )))
and
L98: (for R4 being Nat holds (R4 in ( Seg C30 ) implies ( C34 /. R4 ) = ( IFEQ (( C31 /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) )));
L99: ( len C33 ) = C30 by CARD_1:def 7;
L100: ( dom C33 ) = ( Seg C30 ) by L99 , FINSEQ_1:def 3;
L101: ( len C34 ) = C30 by CARD_1:def 7;
L102: ( dom C34 ) = ( Seg C30 ) by L101 , FINSEQ_1:def 3;
L103:
now
let C35 being Nat;
assume L104: C35 in ( dom C33 );
thus L105: ( C33 . C35 ) = ( C33 /. C35 ) by L104 , PARTFUN1:def 6
.= ( IFEQ (( C31 /. C35 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( C35 -' 1 ) )) ) by L97 , L100 , L104
.= ( C34 /. C35 ) by L98 , L100 , L104
.= ( C34 . C35 ) by L100 , L102 , L104 , PARTFUN1:def 6;
end;
thus L106: thesis by L103 , L99 , L101 , FINSEQ_2:9;
end;
end;
definition
let C36 being Nat;
let C37 being (Tuple of C36 , ( BOOLEAN ));
func Absval C37 -> (Element of ( NAT )) equals 
( ( addnat ) $$ ( Binary C37 ) );
correctness;
end;
definition
let R7 being non  zero Nat;
let R8 being (Tuple of R7 , ( BOOLEAN ));
let R9 being (Tuple of R7 , ( BOOLEAN ));
func R8 + R9 -> (Tuple of R7 , ( BOOLEAN )) means 
:L109: (for R4 being Nat holds (R4 in ( Seg R7 ) implies ( it /. R4 ) = ( ( ( R8 /. R4 ) 'xor' ( R9 /. R4 ) ) 'xor' ( ( carry (R8 , R9) ) /. R4 ) )));
existence
proof
deffunc H5(Nat) = ( ( ( R8 /. $1 ) 'xor' ( R9 /. $1 ) ) 'xor' ( ( carry (R8 , R9) ) /. $1 ) );
consider C38 being (FinSequence of ( BOOLEAN )) such that L110: ( len C38 ) = R7 and L111: (for B17 being Nat holds (B17 in ( dom C38 ) implies ( C38 . B17 ) = H5(B17))) from FINSEQ_2:sch 1;
L112: ( dom C38 ) = ( Seg R7 ) by L110 , FINSEQ_1:def 3;
reconsider D6 = C38 as (Tuple of R7 , ( BOOLEAN )) by L110 , CARD_1:def 7;
take D6;
let R4 being Nat;
assume L113: R4 in ( Seg R7 );
L114: R4 in ( dom D6 ) by L113 , L110 , FINSEQ_1:def 3;
thus L115: ( D6 /. R4 ) = ( D6 . R4 ) by L114 , PARTFUN1:def 6
.= ( ( ( R8 /. R4 ) 'xor' ( R9 /. R4 ) ) 'xor' ( ( carry (R8 , R9) ) /. R4 ) ) by L111 , L112 , L113;
end;
uniqueness
proof
let R10 being (Tuple of R7 , ( BOOLEAN ));
let R11 being (Tuple of R7 , ( BOOLEAN ));
assume that
L116: (for R4 being Nat holds (R4 in ( Seg R7 ) implies ( R10 /. R4 ) = ( ( ( R8 /. R4 ) 'xor' ( R9 /. R4 ) ) 'xor' ( ( carry (R8 , R9) ) /. R4 ) )))
and
L117: (for R4 being Nat holds (R4 in ( Seg R7 ) implies ( R11 /. R4 ) = ( ( ( R8 /. R4 ) 'xor' ( R9 /. R4 ) ) 'xor' ( ( carry (R8 , R9) ) /. R4 ) )));
L118: ( len R10 ) = R7 by CARD_1:def 7;
L119: ( dom R10 ) = ( Seg R7 ) by L118 , FINSEQ_1:def 3;
L120: ( len R11 ) = R7 by CARD_1:def 7;
L121: ( dom R11 ) = ( Seg R7 ) by L120 , FINSEQ_1:def 3;
L122:
now
let C39 being Nat;
assume L123: C39 in ( dom R10 );
thus L124: ( R10 . C39 ) = ( R10 /. C39 ) by L123 , PARTFUN1:def 6
.= ( ( ( R8 /. C39 ) 'xor' ( R9 /. C39 ) ) 'xor' ( ( carry (R8 , R9) ) /. C39 ) ) by L116 , L119 , L123
.= ( R11 /. C39 ) by L117 , L119 , L123
.= ( R11 . C39 ) by L119 , L121 , L123 , PARTFUN1:def 6;
end;
thus L125: thesis by L122 , L118 , L120 , FINSEQ_2:9;
end;
end;
definition
let R7 being non  zero Nat;
let R10 being (Tuple of R7 , ( BOOLEAN ));
let R11 being (Tuple of R7 , ( BOOLEAN ));
func add_ovfl (R10 , R11) -> (Element of ( BOOLEAN )) equals 
( ( ( ( R10 /. R7 ) '&' ( R11 /. R7 ) ) 'or' ( ( R10 /. R7 ) '&' ( ( carry (R10 , R11) ) /. R7 ) ) ) 'or' ( ( R11 /. R7 ) '&' ( ( carry (R10 , R11) ) /. R7 ) ) );
correctness;
end;
definition
let R7 being non  zero Nat;
let R10 being (Tuple of R7 , ( BOOLEAN ));
let R11 being (Tuple of R7 , ( BOOLEAN ));
pred R10 , R11 are_summable 
means
:L128: ( add_ovfl (R10 , R11) ) = ( FALSE )
;end;
theorem
L130: (for B18 being (Tuple of 1 , ( BOOLEAN )) holds (B18 = <* ( FALSE ) *> or B18 = <* ( TRUE ) *>))
proof
let C40 being (Tuple of 1 , ( BOOLEAN ));
L131: (ex B19 being (Element of ( BOOLEAN )) st C40 = <* B19 *>) by FINSEQ_2:97;
per cases  by XBOOLEAN:def 3;
suppose L132: ( C40 /. 1 ) = ( FALSE );

thus L133: thesis by L132 , L131 , FINSEQ_4:16;
end;
suppose L134: ( C40 /. 1 ) = ( TRUE );

thus L135: thesis by L134 , L131 , FINSEQ_4:16;
end;
end;
theorem
L137: (for B20 being (Tuple of 1 , ( BOOLEAN )) holds (B20 = <* ( FALSE ) *> implies ( Absval B20 ) = ( 0 )))
proof
let C41 being (Tuple of 1 , ( BOOLEAN ));
L138: (ex B21 being (Element of ( NAT )) st ( Binary C41 ) = <* B21 *>) by FINSEQ_2:97;
assume L139: C41 = <* ( FALSE ) *>;
L140: ( C41 /. 1 ) = ( FALSE ) by L139 , FINSEQ_4:16;
L141: 1 in ( Seg 1 );
L142: ( ( Binary C41 ) /. 1 ) = ( IFEQ (( C41 /. 1 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( 1 -' 1 ) )) ) by L141 , L90
.= ( 0 ) by L140 , FUNCOP_1:def 8;
thus L143: ( Absval C41 ) = ( ( addnat ) $$ <* ( 0 ) *> ) by L142 , L138 , FINSEQ_4:16
.= ( 0 ) by FINSOP_1:11;
end;
theorem
L144: (for B22 being (Tuple of 1 , ( BOOLEAN )) holds (B22 = <* ( TRUE ) *> implies ( Absval B22 ) = 1))
proof
let C42 being (Tuple of 1 , ( BOOLEAN ));
L145: ( 1 - 1 ) = ( 0 );
assume L146: C42 = <* ( TRUE ) *>;
L147: ( C42 /. 1 ) <> ( FALSE ) by L146 , FINSEQ_4:16;
L148: 1 in ( Seg 1 );
L149: ( ( Binary C42 ) /. 1 ) = ( IFEQ (( C42 /. 1 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( 1 -' 1 ) )) ) by L148 , L90
.= ( 2 to_power ( 1 -' 1 ) ) by L147 , FUNCOP_1:def 8;
L150: (ex B23 being (Element of ( NAT )) st ( Binary C42 ) = <* B23 *>) by FINSEQ_2:97;
thus L151: ( Absval C42 ) = ( ( addnat ) $$ <* ( 2 to_power ( 1 -' 1 ) ) *> ) by L150 , L149 , FINSEQ_4:16
.= ( 2 to_power ( 1 -' 1 ) ) by FINSOP_1:11
.= ( 2 to_power ( 0 ) ) by L145 , XREAL_0:def 2
.= 1 by POWER:24;
end;
definition
let C43 , C44 being Nat;
let C45 being non  empty set;
let C46 being (Tuple of C43 , C45);
let C47 being (Tuple of C44 , C45);
redefine func C46 ^ C47 -> (Tuple of ( C43 + C44 ) , C45);

coherence by FINSEQ_2:107;
end;
definition
let C48 being non  empty set;
let C49 being (Element of C48);
redefine func <*C49 *> -> (Tuple of 1 , C48);

coherence
proof
L153: <* C49 *> in ( 1 -tuples_on C48 ) by FINSEQ_2:98;
thus L154: thesis by L153;
end;
end;
theorem
L156: (for R7 being non  zero Nat holds (for B24 , B25 being (Tuple of R7 , ( BOOLEAN )) holds (for B26 , B27 being (Element of ( BOOLEAN )) holds (for B28 being Nat holds (B28 in ( Seg R7 ) implies ( ( carry (( B24 ^ <* B26 *> ) , ( B25 ^ <* B27 *> )) ) /. B28 ) = ( ( carry (B24 , B25) ) /. B28 ))))))
proof
let R7 being non  zero Nat;
let C50 , C51 being (Tuple of R7 , ( BOOLEAN ));
let C52 , C53 being (Element of ( BOOLEAN ));
defpred S2[ Nat ] means ($1 in ( Seg R7 ) implies ( ( carry (( C50 ^ <* C52 *> ) , ( C51 ^ <* C53 *> )) ) /. $1 ) = ( ( carry (C50 , C51) ) /. $1 ));
let C54 being Nat;
L157: (for B29 being non  empty Nat holds (S2[ B29 ] implies S2[ ( B29 + 1 ) ]))
proof
let C55 being non  empty Nat;
assume L158: S2[ C55 ];
assume L159: ( C55 + 1 ) in ( Seg R7 );
L160: (( C55 + 1 ) > C55 & ( C55 + 1 ) <= R7) by L159 , FINSEQ_1:1 , XREAL_1:29;
L161: C55 < R7 by L160 , XXREAL_0:2;
L162: R7 <= ( R7 + 1 ) by NAT_1:11;
L163: C55 < ( R7 + 1 ) by L162 , L161 , XXREAL_0:2;
L164: 1 <= C55 by NAT_1:14;
L165: C55 in ( Seg R7 ) by L164 , L161 , FINSEQ_1:1;
L166: (( ( C50 ^ <* C52 *> ) /. C55 ) = ( C50 /. C55 ) & ( ( C51 ^ <* C53 *> ) /. C55 ) = ( C51 /. C55 )) by L165 , L1;
thus L167: ( ( carry (( C50 ^ <* C52 *> ) , ( C51 ^ <* C53 *> )) ) /. ( C55 + 1 ) ) = ( ( ( ( C50 /. C55 ) '&' ( C51 /. C55 ) ) 'or' ( ( C50 /. C55 ) '&' ( ( carry (C50 , C51) ) /. C55 ) ) ) 'or' ( ( C51 /. C55 ) '&' ( ( carry (C50 , C51) ) /. C55 ) ) ) by L166 , L158 , L164 , L161 , L163 , L45 , FINSEQ_1:1
.= ( ( carry (C50 , C51) ) /. ( C55 + 1 ) ) by L164 , L161 , L45;
end;
L168: S2[ 1 ]
proof
assume L169: 1 in ( Seg R7 );
thus L170: ( ( carry (( C50 ^ <* C52 *> ) , ( C51 ^ <* C53 *> )) ) /. 1 ) = ( FALSE ) by L45
.= ( ( carry (C50 , C51) ) /. 1 ) by L45;
end;
L171: (for B30 being non  empty Nat holds S2[ B30 ]) from NAT_1:sch 10(L168 , L157);
assume L172: C54 in ( Seg R7 );
L173: C54 is non  empty by L172 , FINSEQ_1:1;
thus L174: thesis by L173 , L172 , L171;
end;
theorem
L175: (for R7 being non  zero Nat holds (for B31 , B32 being (Tuple of R7 , ( BOOLEAN )) holds (for B33 , B34 being (Element of ( BOOLEAN )) holds ( add_ovfl (B31 , B32) ) = ( ( carry (( B31 ^ <* B33 *> ) , ( B32 ^ <* B34 *> )) ) /. ( R7 + 1 ) ))))
proof
let R7 being non  zero Nat;
let C56 , C57 being (Tuple of R7 , ( BOOLEAN ));
let C58 , C59 being (Element of ( BOOLEAN ));
L176: (1 <= R7 & R7 < ( R7 + 1 )) by NAT_1:14 , XREAL_1:29;
L177: R7 in ( Seg R7 ) by FINSEQ_1:3;
L178: ( C57 /. R7 ) = ( ( C57 ^ <* C59 *> ) /. R7 ) by L177 , L1;
L179: (( ( carry (( C56 ^ <* C58 *> ) , ( C57 ^ <* C59 *> )) ) /. R7 ) = ( ( carry (C56 , C57) ) /. R7 ) & ( C56 /. R7 ) = ( ( C56 ^ <* C58 *> ) /. R7 )) by L177 , L1 , L156;
thus L180: thesis by L179 , L178 , L176 , L45;
end;
theorem
L181: (for R7 being non  zero Nat holds (for B35 , B36 being (Tuple of R7 , ( BOOLEAN )) holds (for B37 , B38 being (Element of ( BOOLEAN )) holds ( ( B35 ^ <* B37 *> ) + ( B36 ^ <* B38 *> ) ) = ( ( B35 + B36 ) ^ <* ( ( B37 'xor' B38 ) 'xor' ( add_ovfl (B35 , B36) ) ) *> ))))
proof
let R7 being non  zero Nat;
let C60 , C61 being (Tuple of R7 , ( BOOLEAN ));
let C62 , C63 being (Element of ( BOOLEAN ));
L182: (for R4 being Nat holds (R4 in ( Seg ( R7 + 1 ) ) implies ( ( ( C60 + C61 ) ^ <* ( ( C62 'xor' C63 ) 'xor' ( add_ovfl (C60 , C61) ) ) *> ) /. R4 ) = ( ( ( ( C60 ^ <* C62 *> ) /. R4 ) 'xor' ( ( C61 ^ <* C63 *> ) /. R4 ) ) 'xor' ( ( carry (( C60 ^ <* C62 *> ) , ( C61 ^ <* C63 *> )) ) /. R4 ) )))
proof
L183: ( Seg ( R7 + 1 ) ) = ( ( Seg R7 ) \/ {. ( R7 + 1 ) .} ) by FINSEQ_1:9;
let R4 being Nat;
assume that
L184: R4 in ( Seg ( R7 + 1 ) );
per cases  by L184 , L183 , XBOOLE_0:def 3;
suppose L185: R4 in ( Seg R7 );

thus L186: ( ( ( C60 + C61 ) ^ <* ( ( C62 'xor' C63 ) 'xor' ( add_ovfl (C60 , C61) ) ) *> ) /. R4 ) = ( ( C60 + C61 ) /. R4 ) by L185 , L1
.= ( ( ( C60 /. R4 ) 'xor' ( C61 /. R4 ) ) 'xor' ( ( carry (C60 , C61) ) /. R4 ) ) by L185 , L109
.= ( ( ( ( C60 ^ <* C62 *> ) /. R4 ) 'xor' ( C61 /. R4 ) ) 'xor' ( ( carry (C60 , C61) ) /. R4 ) ) by L185 , L1
.= ( ( ( ( C60 ^ <* C62 *> ) /. R4 ) 'xor' ( ( C61 ^ <* C63 *> ) /. R4 ) ) 'xor' ( ( carry (C60 , C61) ) /. R4 ) ) by L185 , L1
.= ( ( ( ( C60 ^ <* C62 *> ) /. R4 ) 'xor' ( ( C61 ^ <* C63 *> ) /. R4 ) ) 'xor' ( ( carry (( C60 ^ <* C62 *> ) , ( C61 ^ <* C63 *> )) ) /. R4 ) ) by L185 , L156;
end;
suppose L187: R4 in {. ( R7 + 1 ) .};

L188: R4 = ( R7 + 1 ) by L187 , TARSKI:def 1;
thus L189: ( ( ( C60 + C61 ) ^ <* ( ( C62 'xor' C63 ) 'xor' ( add_ovfl (C60 , C61) ) ) *> ) /. R4 ) = ( ( C62 'xor' C63 ) 'xor' ( add_ovfl (C60 , C61) ) ) by L188 , L6
.= ( ( C62 'xor' C63 ) 'xor' ( ( carry (( C60 ^ <* C62 *> ) , ( C61 ^ <* C63 *> )) ) /. R4 ) ) by L188 , L175
.= ( ( C62 'xor' ( ( C61 ^ <* C63 *> ) /. R4 ) ) 'xor' ( ( carry (( C60 ^ <* C62 *> ) , ( C61 ^ <* C63 *> )) ) /. R4 ) ) by L188 , L6
.= ( ( ( ( C60 ^ <* C62 *> ) /. R4 ) 'xor' ( ( C61 ^ <* C63 *> ) /. R4 ) ) 'xor' ( ( carry (( C60 ^ <* C62 *> ) , ( C61 ^ <* C63 *> )) ) /. R4 ) ) by L188 , L6;
end;
end;
thus L191: thesis by L182 , L109;
end;
theorem
L192: (for R7 being non  zero Nat holds (for B39 being (Tuple of R7 , ( BOOLEAN )) holds (for B40 being (Element of ( BOOLEAN )) holds ( Absval ( B39 ^ <* B40 *> ) ) = ( ( Absval B39 ) + ( IFEQ (B40 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) ))))
proof
let R7 being non  zero Nat;
let C64 being (Tuple of R7 , ( BOOLEAN ));
let C65 being (Element of ( BOOLEAN ));
L193: (for R4 being Nat holds (R4 in ( Seg ( R7 + 1 ) ) implies ( ( ( Binary C64 ) ^ <* ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) *> ) /. R4 ) = ( IFEQ (( ( C64 ^ <* C65 *> ) /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) )))
proof
L194: ( Seg ( R7 + 1 ) ) = ( ( Seg R7 ) \/ {. ( R7 + 1 ) .} ) by FINSEQ_1:9;
let R4 being Nat;
assume that
L195: R4 in ( Seg ( R7 + 1 ) );
per cases  by L195 , L194 , XBOOLE_0:def 3;
suppose L196: R4 in ( Seg R7 );

thus L197: ( ( ( Binary C64 ) ^ <* ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) *> ) /. R4 ) = ( ( Binary C64 ) /. R4 ) by L196 , L1
.= ( IFEQ (( C64 /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) ) by L196 , L90
.= ( IFEQ (( ( C64 ^ <* C65 *> ) /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) ) by L196 , L1;
end;
suppose L198: R4 in {. ( R7 + 1 ) .};

L199: R4 = ( R7 + 1 ) by L198 , TARSKI:def 1;
thus L200: ( ( ( Binary C64 ) ^ <* ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) *> ) /. R4 ) = ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) by L199 , L6
.= ( IFEQ (( ( C64 ^ <* C65 *> ) /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) by L199 , L6
.= ( IFEQ (( ( C64 ^ <* C65 *> ) /. R4 ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R4 -' 1 ) )) ) by L199 , NAT_D:34;
end;
end;
thus L202: ( Absval ( C64 ^ <* C65 *> ) ) = ( ( addnat ) $$ ( ( Binary C64 ) ^ <* ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) *> ) ) by L193 , L90
.= ( ( addnat ) . (( ( addnat ) $$ ( Binary C64 ) ) , ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) )) ) by FINSOP_1:4
.= ( ( Absval C64 ) + ( IFEQ (C65 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) ) by BINOP_2:def 23;
end;
theorem
L203: (for R7 being non  zero Nat holds (for B41 , B42 being (Tuple of R7 , ( BOOLEAN )) holds ( ( Absval ( B41 + B42 ) ) + ( IFEQ (( add_ovfl (B41 , B42) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) ) = ( ( Absval B41 ) + ( Absval B42 ) )))
proof
defpred S3[ non  zero Nat ] means (for B43 , B44 being (Tuple of $1 , ( BOOLEAN )) holds ( ( Absval ( B43 + B44 ) ) + ( IFEQ (( add_ovfl (B43 , B44) ) , ( FALSE ) , ( 0 ) , ( 2 to_power $1 )) ) ) = ( ( Absval B43 ) + ( Absval B44 ) ));
set D7 = ( FALSE );
set D8 = ( TRUE );
L204: (for B45 being non  zero Nat holds (S3[ B45 ] implies S3[ ( B45 + 1 ) ]))
proof
let R7 being non  zero Nat;
assume L205: S3[ R7 ];
let C66 , C67 being (Tuple of ( R7 + 1 ) , ( BOOLEAN ));
consider C68 being (Element of ( R7 -tuples_on ( BOOLEAN ) )), C69 being (Element of ( BOOLEAN )) such that L206: C66 = ( C68 ^ <* C69 *> ) by FINSEQ_2:117;
consider C70 being (Element of ( R7 -tuples_on ( BOOLEAN ) )), C71 being (Element of ( BOOLEAN )) such that L207: C67 = ( C70 ^ <* C71 *> ) by FINSEQ_2:117;
L208: ( IFEQ (( add_ovfl (C68 , C70) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) is (Element of ( NAT ));
L209: (( IFEQ (C69 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) is (Element of ( NAT )) & ( IFEQ (C71 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) is (Element of ( NAT )));
L210: (( IFEQ (( add_ovfl (C66 , C67) ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R7 + 1 ) )) ) is (Element of ( NAT )) & ( IFEQ (( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) is (Element of ( NAT )));
reconsider D9 = ( IFEQ (( add_ovfl (C66 , C67) ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R7 + 1 ) )) ) , D10 = ( IFEQ (( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) , D11 = ( IFEQ (C69 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) , D12 = ( IFEQ (C71 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) , D13 = ( IFEQ (( add_ovfl (C68 , C70) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) as Real by L210 , L209 , L208;
L211: ( add_ovfl (C66 , C67) ) = ( ( ( C69 '&' ( ( C70 ^ <* C71 *> ) /. ( R7 + 1 ) ) ) 'or' ( ( ( C68 ^ <* C69 *> ) /. ( R7 + 1 ) ) '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) 'or' ( ( ( C70 ^ <* C71 *> ) /. ( R7 + 1 ) ) '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) by L206 , L207 , L6
.= ( ( ( C69 '&' C71 ) 'or' ( ( ( C68 ^ <* C69 *> ) /. ( R7 + 1 ) ) '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) 'or' ( ( ( C70 ^ <* C71 *> ) /. ( R7 + 1 ) ) '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) by L6
.= ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) 'or' ( ( ( C70 ^ <* C71 *> ) /. ( R7 + 1 ) ) '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) by L6
.= ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) 'or' ( C71 '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) by L6
.= ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( ( carry (( C68 ^ <* C69 *> ) , ( C70 ^ <* C71 *> )) ) /. ( R7 + 1 ) ) ) ) by L175
.= ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L175;
L212: ( D10 + D9 ) = ( ( D13 + D11 ) + D12 )
proof
L213:
now
per cases ;
suppose L214: C69 = D7;

L215: D11 = ( 0 ) by L214 , FUNCOP_1:def 8;
L216:
now
per cases ;
suppose L217: C71 = D7;

L218: D12 = ( 0 ) by L217 , FUNCOP_1:def 8;
thus L219: thesis by L218 , L211 , L214 , L217 , FUNCOP_1:def 8;
end;
suppose L220: C71 <> D7;

L221: D12 = ( 2 to_power R7 ) by L220 , FUNCOP_1:def 8;
L222:
now
per cases ;
suppose L223: ( add_ovfl (C68 , C70) ) = D7;

L224: D13 = ( 0 ) by L223 , FUNCOP_1:def 8;
thus L225: thesis by L224 , L211 , L214 , L223 , FUNCOP_1:def 8;
end;
suppose L226: ( add_ovfl (C68 , C70) ) <> D7;

L227: ( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) = ( D8 'xor' ( add_ovfl (C68 , C70) ) ) by L214 , L220 , XBOOLEAN:def 3
.= D7 by L226 , XBOOLEAN:def 3;
L228: D10 = ( 0 ) by L227 , FUNCOP_1:def 8;
L229: D13 = ( 2 to_power R7 ) by L226 , FUNCOP_1:def 8;
L230: ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) = ( ( D7 'or' D7 ) 'or' ( D8 '&' ( add_ovfl (C68 , C70) ) ) ) by L214 , L220 , XBOOLEAN:def 3
.= D8 by L226 , XBOOLEAN:def 3;
L231: D9 = ( 2 to_power ( R7 + 1 ) ) by L230 , L211 , FUNCOP_1:def 8;
thus L232: ( D10 + D9 ) = ( ( 2 to_power R7 ) * ( 2 to_power 1 ) ) by L231 , L228 , POWER:27
.= ( 2 * ( 2 to_power R7 ) ) by POWER:25
.= ( ( D13 + D11 ) + D12 ) by L215 , L221 , L229;
end;
end;
thus L234: thesis by L222;
end;
end;
thus L236: thesis by L216;
end;
suppose L237: C69 <> D7;

L238: D11 = ( 2 to_power R7 ) by L237 , FUNCOP_1:def 8;
L239:
now
per cases ;
suppose L240: C71 = D7;

L241: D12 = ( 0 ) by L240 , FUNCOP_1:def 8;
L242:
now
per cases ;
suppose L243: ( add_ovfl (C68 , C70) ) = D7;

thus L244: thesis by L243 , L211 , L240 , L241 , FUNCOP_1:def 8;
end;
suppose L245: ( add_ovfl (C68 , C70) ) <> D7;

L246: ( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) = ( D8 'xor' ( add_ovfl (C68 , C70) ) ) by L237 , L240 , XBOOLEAN:def 3
.= D7 by L245 , XBOOLEAN:def 3;
L247: D10 = ( 0 ) by L246 , FUNCOP_1:def 8;
L248: D13 = ( 2 to_power R7 ) by L245 , FUNCOP_1:def 8;
L249: ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) = ( ( D7 'or' ( D8 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L237 , L240 , XBOOLEAN:def 3
.= ( ( D7 'or' ( D8 '&' D8 ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L245 , XBOOLEAN:def 3
.= D8;
L250: D9 = ( 2 to_power ( R7 + 1 ) ) by L249 , L211 , FUNCOP_1:def 8;
thus L251: ( D10 + D9 ) = ( ( 2 to_power R7 ) * ( 2 to_power 1 ) ) by L250 , L247 , POWER:27
.= ( 2 * ( 2 to_power R7 ) ) by POWER:25
.= ( ( D13 + D11 ) + D12 ) by L238 , L241 , L248;
end;
end;
thus L253: thesis by L242;
end;
suppose L254: C71 <> D7;

L255: D12 = ( 2 to_power R7 ) by L254 , FUNCOP_1:def 8;
L256:
now
per cases ;
suppose L257: ( add_ovfl (C68 , C70) ) = D7;

L258: ( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) = ( ( D8 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) by L237 , XBOOLEAN:def 3
.= D7 by L254 , L257 , XBOOLEAN:def 3;
L259: D10 = ( 0 ) by L258 , FUNCOP_1:def 8;
L260: D13 = ( 0 ) by L257 , FUNCOP_1:def 8;
L261: ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) = ( ( ( D8 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L237 , XBOOLEAN:def 3
.= ( ( ( D8 '&' D8 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L254 , XBOOLEAN:def 3
.= D8;
L262: D9 = ( 2 to_power ( R7 + 1 ) ) by L261 , L211 , FUNCOP_1:def 8;
thus L263: ( D10 + D9 ) = ( ( 2 to_power R7 ) * ( 2 to_power 1 ) ) by L262 , L259 , POWER:27
.= ( 2 * ( 2 to_power R7 ) ) by POWER:25
.= ( ( D13 + D11 ) + D12 ) by L238 , L255 , L260;
end;
suppose L264: ( add_ovfl (C68 , C70) ) <> D7;

L265: ( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) = ( ( D8 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) by L237 , XBOOLEAN:def 3
.= ( D7 'xor' ( add_ovfl (C68 , C70) ) ) by L254 , XBOOLEAN:def 3
.= D8 by L264 , XBOOLEAN:def 3;
L266: D10 = ( 2 to_power R7 ) by L265 , FUNCOP_1:def 8;
L267: ( ( ( C69 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) = ( ( ( D8 '&' C71 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L237 , XBOOLEAN:def 3
.= ( ( ( D8 '&' D8 ) 'or' ( C69 '&' ( add_ovfl (C68 , C70) ) ) ) 'or' ( C71 '&' ( add_ovfl (C68 , C70) ) ) ) by L254 , XBOOLEAN:def 3
.= D8;
L268: D9 = ( 2 to_power ( R7 + 1 ) ) by L267 , L211 , FUNCOP_1:def 8;
thus L269: ( D10 + D9 ) = ( ( 2 to_power R7 ) + ( ( 2 to_power R7 ) * ( 2 to_power 1 ) ) ) by L268 , L266 , POWER:27
.= ( ( 2 to_power R7 ) + ( 2 * ( 2 to_power R7 ) ) ) by POWER:25
.= ( ( ( 2 to_power R7 ) + ( 2 to_power R7 ) ) + ( 2 to_power R7 ) )
.= ( ( D13 + D11 ) + D12 ) by L238 , L255 , L264 , FUNCOP_1:def 8;
end;
end;
thus L271: thesis by L256;
end;
end;
thus L273: thesis by L239;
end;
end;
thus L275: thesis by L213;
end;
thus L276: ( ( Absval ( C66 + C67 ) ) + ( IFEQ (( add_ovfl (C66 , C67) ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R7 + 1 ) )) ) ) = ( ( Absval ( ( C68 + C70 ) ^ <* ( ( C69 'xor' C71 ) 'xor' ( add_ovfl (C68 , C70) ) ) *> ) ) + ( IFEQ (( add_ovfl (C66 , C67) ) , ( FALSE ) , ( 0 ) , ( 2 to_power ( R7 + 1 ) )) ) ) by L206 , L207 , L181
.= ( ( ( Absval ( C68 + C70 ) ) + D10 ) + D9 ) by L192
.= ( ( ( ( Absval ( C68 + C70 ) ) + D13 ) + D11 ) + D12 ) by L212
.= ( ( ( ( Absval C68 ) + ( Absval C70 ) ) + D11 ) + D12 ) by L205
.= ( ( ( Absval C68 ) + D11 ) + ( ( Absval C70 ) + D12 ) )
.= ( ( ( Absval C68 ) + ( IFEQ (C69 , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) ) + ( Absval ( C70 ^ <* C71 *> ) ) ) by L192
.= ( ( Absval C66 ) + ( Absval C67 ) ) by L206 , L207 , L192;
end;
L277: S3[ 1 ]
proof
reconsider D14 = <* D8 *> , D15 = <* D7 *> as (Tuple of 1 , ( BOOLEAN ));
let C72 , C73 being (Tuple of 1 , ( BOOLEAN ));
L278: ( ( carry (C72 , C73) ) /. 1 ) = D7 by L45;
L279: ( Absval D14 ) = 1 by L144;
L280: ( Absval D15 ) = ( 0 ) by L137;
per cases  by L130;
suppose L281: (C72 = <* D7 *> & C73 = <* D7 *>);

L282:
now
let R4 being Nat;
assume L283: R4 in ( Seg 1 );
L284: R4 = 1 by L283 , FINSEQ_1:2 , TARSKI:def 1;
thus L285: ( D15 /. R4 ) = ( ( ( C72 /. 1 ) 'xor' D7 ) 'xor' D7 ) by L281 , L283 , FINSEQ_1:2 , TARSKI:def 1
.= ( ( ( C72 /. 1 ) 'xor' ( C73 /. 1 ) ) 'xor' D7 ) by L281 , FINSEQ_4:16
.= ( ( ( C72 /. R4 ) 'xor' ( C73 /. R4 ) ) 'xor' ( ( carry (C72 , C73) ) /. R4 ) ) by L284 , L45;
end;
L286: ( add_ovfl (C72 , C73) ) = D7 by L278 , L281 , FINSEQ_4:16;
L287: ( IFEQ (( add_ovfl (C72 , C73) ) , ( FALSE ) , ( 0 ) , ( 2 to_power 1 )) ) = ( 0 ) by L286 , FUNCOP_1:def 8;
thus L288: thesis by L287 , L280 , L281 , L282 , L109;
end;
suppose L289: (C72 = <* D8 *> & C73 = <* D7 *>);

L290:
now
let R4 being Nat;
assume L291: R4 in ( Seg 1 );
L292: R4 = 1 by L291 , FINSEQ_1:2 , TARSKI:def 1;
thus L293: ( D14 /. R4 ) = ( ( ( C72 /. 1 ) 'xor' D7 ) 'xor' D7 ) by L289 , L291 , FINSEQ_1:2 , TARSKI:def 1
.= ( ( ( C72 /. 1 ) 'xor' ( C73 /. 1 ) ) 'xor' D7 ) by L289 , FINSEQ_4:16
.= ( ( ( C72 /. R4 ) 'xor' ( C73 /. R4 ) ) 'xor' ( ( carry (C72 , C73) ) /. R4 ) ) by L292 , L45;
end;
L294: ( add_ovfl (C72 , C73) ) = D7 by L278 , L289 , FINSEQ_4:16;
L295: ( IFEQ (( add_ovfl (C72 , C73) ) , ( FALSE ) , ( 0 ) , ( 2 to_power 1 )) ) = ( 0 ) by L294 , FUNCOP_1:def 8;
thus L296: thesis by L295 , L280 , L289 , L290 , L109;
end;
suppose L297: (C72 = <* D7 *> & C73 = <* D8 *>);

L298:
now
let R4 being Nat;
assume L299: R4 in ( Seg 1 );
L300: R4 = 1 by L299 , FINSEQ_1:2 , TARSKI:def 1;
thus L301: ( D14 /. R4 ) = ( ( ( 'not' D8 ) 'xor' D8 ) 'xor' D7 ) by L300 , FINSEQ_4:16
.= ( ( ( C72 /. 1 ) 'xor' D8 ) 'xor' D7 ) by L297 , FINSEQ_4:16
.= ( ( ( C72 /. 1 ) 'xor' ( C73 /. 1 ) ) 'xor' D7 ) by L297 , FINSEQ_4:16
.= ( ( ( C72 /. R4 ) 'xor' ( C73 /. R4 ) ) 'xor' ( ( carry (C72 , C73) ) /. R4 ) ) by L300 , L45;
end;
L302: ( add_ovfl (C72 , C73) ) = D7 by L278 , L297 , FINSEQ_4:16;
L303: ( IFEQ (( add_ovfl (C72 , C73) ) , ( FALSE ) , ( 0 ) , ( 2 to_power 1 )) ) = ( 0 ) by L302 , FUNCOP_1:def 8;
thus L304: thesis by L303 , L280 , L297 , L298 , L109;
end;
suppose L305: (C72 = <* D8 *> & C73 = <* D8 *>);

L306:
now
let R4 being Nat;
assume L307: R4 in ( Seg 1 );
L308: R4 = 1 by L307 , FINSEQ_1:2 , TARSKI:def 1;
thus L309: ( D15 /. R4 ) = ( ( D8 'xor' D8 ) 'xor' ( 'not' D8 ) ) by L308 , FINSEQ_4:16
.= ( ( ( C72 /. 1 ) 'xor' D8 ) 'xor' D7 ) by L305 , FINSEQ_4:16
.= ( ( ( C72 /. 1 ) 'xor' ( C73 /. 1 ) ) 'xor' D7 ) by L305 , FINSEQ_4:16
.= ( ( ( C72 /. R4 ) 'xor' ( C73 /. R4 ) ) 'xor' ( ( carry (C72 , C73) ) /. R4 ) ) by L308 , L45;
end;
L310: ( C72 + C73 ) = <* D7 *> by L306 , L109;
L311: ( add_ovfl (C72 , C73) ) = D8 by L278 , L305 , FINSEQ_4:16;
L312: ( IFEQ (( add_ovfl (C72 , C73) ) , ( FALSE ) , ( 0 ) , ( 2 to_power 1 )) ) = ( 2 to_power 1 ) by L311 , FUNCOP_1:def 8
.= 2 by POWER:25;
thus L313: thesis by L312 , L279 , L280 , L305 , L310;
end;
end;
thus L315: (for B46 being non  zero Nat holds S3[ B46 ]) from NAT_1:sch 10(L277 , L204);
end;
theorem
L316: (for R7 being non  zero Nat holds (for B47 , B48 being (Tuple of R7 , ( BOOLEAN )) holds (B47 , B48 are_summable  implies ( Absval ( B47 + B48 ) ) = ( ( Absval B47 ) + ( Absval B48 ) ))))
proof
let R7 being non  zero Nat;
let C74 , C75 being (Tuple of R7 , ( BOOLEAN ));
assume L317: C74 , C75 are_summable ;
L318: ( add_ovfl (C74 , C75) ) = ( FALSE ) by L317 , L128;
L319: ( IFEQ (( add_ovfl (C74 , C75) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) = ( 0 ) by L318 , FUNCOP_1:def 8;
thus L320: ( Absval ( C74 + C75 ) ) = ( ( Absval ( C74 + C75 ) ) + ( IFEQ (( add_ovfl (C74 , C75) ) , ( FALSE ) , ( 0 ) , ( 2 to_power R7 )) ) ) by L319
.= ( ( Absval C74 ) + ( Absval C75 ) ) by L203;
end;
