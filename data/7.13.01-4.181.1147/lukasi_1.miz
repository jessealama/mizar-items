:: Propositional Calculus
::  by Grzegorz Bancerek, Agata Darmochwa\l and Andrzej Trybulec
::
:: Received September 26, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies SUBSET_1, CQC_LANG, XBOOLEAN, CQC_THE1, QC_LANG1;
 notations SUBSET_1, QC_LANG1, CQC_LANG, CQC_THE1;
 constructors CQC_THE1;
 registrations CQC_LANG;
 definitions CQC_THE1;
 theorems CQC_THE1, QC_LANG2;

begin
theorem
L1: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L2: ( ( R2 => R3 ) => ( ( 'not' ( R3 '&' ( 'not' R4 ) ) ) => ( 'not' ( R2 '&' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by CQC_THE1:44;
L3: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( 'not' ( R2 '&' ( 'not' R4 ) ) ) ) ) in ( TAUT R1 ) by L2 , QC_LANG2:def 2;
thus L4: thesis by L3 , QC_LANG2:def 2;
end;
theorem
L5: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) implies ( ( R3 => R4 ) => ( R2 => R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L6: ( R2 => R3 ) in ( TAUT R1 );
L7: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L1;
thus L8: thesis by L7 , L6 , CQC_THE1:46;
end;
theorem
L9: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => R3 ) in ( TAUT R1 ) & ( R3 => R4 ) in ( TAUT R1 )) implies ( R2 => R4 ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume that
L10: ( R2 => R3 ) in ( TAUT R1 )
and
L11: ( R3 => R4 ) in ( TAUT R1 );
L12: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L1;
L13: ( ( R3 => R4 ) => ( R2 => R4 ) ) in ( TAUT R1 ) by L12 , L10 , CQC_THE1:46;
thus L14: thesis by L13 , L11 , CQC_THE1:46;
end;
theorem
L15: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 => R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L16: (( ( ( 'not' R2 ) => R2 ) => R2 ) in ( TAUT R1 ) & ( R2 => ( ( 'not' R2 ) => R2 ) ) in ( TAUT R1 )) by CQC_THE1:42 , CQC_THE1:43;
thus L17: thesis by L16 , L9;
end;
L18: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( ( ( R3 => R4 ) => ( R2 => R4 ) ) => R5 ) => ( ( R2 => R3 ) => R5 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L19: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L1;
thus L20: thesis by L19 , L5;
end;
L21: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( R3 => R4 ) ) => ( ( R5 => R3 ) => ( R2 => ( R5 => R4 ) ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L22: (( ( ( ( ( R3 => R4 ) => ( R5 => R4 ) ) => ( R2 => ( R5 => R4 ) ) ) => ( ( R5 => R3 ) => ( R2 => ( R5 => R4 ) ) ) ) => ( ( R2 => ( R3 => R4 ) ) => ( ( R5 => R3 ) => ( R2 => ( R5 => R4 ) ) ) ) ) in ( TAUT R1 ) & ( ( ( ( R3 => R4 ) => ( R5 => R4 ) ) => ( R2 => ( R5 => R4 ) ) ) => ( ( R5 => R3 ) => ( R2 => ( R5 => R4 ) ) ) ) in ( TAUT R1 )) by L18;
thus L23: thesis by L22 , CQC_THE1:46;
end;
L24: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L25: (( ( ( R3 => R4 ) => ( R2 => R4 ) ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ) & ( ( ( ( R3 => R4 ) => ( R2 => R4 ) ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) => ( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) ) in ( TAUT R1 )) by L18 , L1;
thus L26: thesis by L25 , CQC_THE1:46;
end;
L27: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds (for R6 being (Element of ( CQC-WFF R1 )) holds ( ( R6 => ( ( R2 => R4 ) => R5 ) ) => ( ( R2 => R3 ) => ( R6 => ( ( R3 => R4 ) => R5 ) ) ) ) in ( TAUT R1 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
let R6 being (Element of ( CQC-WFF R1 ));
L28: (( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ) & ( ( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) => ( ( R6 => ( ( R2 => R4 ) => R5 ) ) => ( ( R2 => R3 ) => ( R6 => ( ( R3 => R4 ) => R5 ) ) ) ) ) in ( TAUT R1 )) by L21 , L24;
thus L29: thesis by L28 , CQC_THE1:46;
end;
L30: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( ( 'not' R2 ) => R3 ) => R4 ) => ( R2 => R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L31: ( R2 => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) by CQC_THE1:43;
thus L32: thesis by L31 , L5;
end;
L33: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( ( ( ( 'not' R2 ) => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L34: (( ( ( 'not' R2 ) => R3 ) => ( ( ( ( 'not' R2 ) => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => R3 ) => ( ( ( ( 'not' R2 ) => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) => ( R2 => ( ( ( ( 'not' R2 ) => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) ) in ( TAUT R1 )) by L24 , L30;
thus L35: thesis by L34 , CQC_THE1:46;
end;
L36: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R3 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L37: (( ( ( 'not' R2 ) => R2 ) => R2 ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => R2 ) => R2 ) => ( ( ( ( 'not' ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( R3 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) ) ) in ( TAUT R1 )) by L33 , CQC_THE1:42;
L38: (( ( ( 'not' ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( R3 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L37 , CQC_THE1:42 , CQC_THE1:46;
thus L39: thesis by L38 , CQC_THE1:46;
end;
L40: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R6 being (Element of ( CQC-WFF R1 )) holds ( R6 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R6 being (Element of ( CQC-WFF R1 ));
L41: (( ( ( 'not' R6 ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R6 ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( R6 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L30 , L36;
thus L42: thesis by L41 , CQC_THE1:46;
end;
L43: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R6 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) => R3 ) => ( R6 => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R6 being (Element of ( CQC-WFF R1 ));
L44: (( R6 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( R6 => ( ( ( 'not' R2 ) => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R3 ) => ( R6 => ( ( R3 => R2 ) => R2 ) ) ) ) in ( TAUT R1 )) by L27 , L40;
thus L45: thesis by L44 , CQC_THE1:46;
end;
L46: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R6 being (Element of ( CQC-WFF R1 )) holds ( ( ( R6 => ( ( R3 => R2 ) => R2 ) ) => R4 ) => ( ( ( 'not' R2 ) => R3 ) => R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R6 being (Element of ( CQC-WFF R1 ));
L47: (( ( ( 'not' R2 ) => R3 ) => ( R6 => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => R3 ) => ( R6 => ( ( R3 => R2 ) => R2 ) ) ) => ( ( ( R6 => ( ( R3 => R2 ) => R2 ) ) => R4 ) => ( ( ( 'not' R2 ) => R3 ) => R4 ) ) ) in ( TAUT R1 )) by L43 , L1;
thus L48: thesis by L47 , CQC_THE1:46;
end;
L49: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L50: (( ( ( 'not' ( ( R3 => R2 ) => R2 ) ) => ( ( R3 => R2 ) => R2 ) ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' ( ( R3 => R2 ) => R2 ) ) => ( ( R3 => R2 ) => R2 ) ) => ( ( R3 => R2 ) => R2 ) ) => ( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L46 , CQC_THE1:42;
thus L51: thesis by L50 , CQC_THE1:46;
end;
L52: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L53: (( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) => ( R2 => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L30 , L49;
thus L54: thesis by L53 , CQC_THE1:46;
end;
theorem
L55: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R3 => ( R2 => R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L56: (( R3 => ( ( ( 'not' R2 ) => R3 ) => R3 ) ) in ( TAUT R1 ) & ( ( R3 => ( ( ( 'not' R2 ) => R3 ) => R3 ) ) => ( ( R2 => ( ( 'not' R2 ) => R3 ) ) => ( R3 => ( R2 => R3 ) ) ) ) in ( TAUT R1 )) by L21 , L52;
L57: (( R2 => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) & ( ( R2 => ( ( 'not' R2 ) => R3 ) ) => ( R3 => ( R2 => R3 ) ) ) in ( TAUT R1 )) by L56 , CQC_THE1:43 , CQC_THE1:46;
thus L58: thesis by L57 , CQC_THE1:46;
end;
theorem
L59: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L60: (( R3 => ( R2 => R3 ) ) in ( TAUT R1 ) & ( ( R3 => ( R2 => R3 ) ) => ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) ) in ( TAUT R1 )) by L1 , L55;
thus L61: thesis by L60 , CQC_THE1:46;
end;
theorem
L62: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( R3 => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L63: (( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) => ( R3 => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L49 , L59;
thus L64: thesis by L63 , CQC_THE1:46;
end;
theorem
L65: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L66: (( R3 => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( R3 => ( ( R3 => R2 ) => R2 ) ) => ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) ) in ( TAUT R1 )) by L21 , L62;
thus L67: thesis by L66 , CQC_THE1:46;
end;
theorem
L68: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R3 => R4 ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L69: (( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) & ( ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) => ( ( R3 => R4 ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) ) in ( TAUT R1 )) by L1 , L65;
thus L70: thesis by L69 , CQC_THE1:46;
end;
L71: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( ( R3 => ( R5 => R2 ) ) => R4 ) => ( ( R5 => ( R3 => R2 ) ) => R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L72: (( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) in ( TAUT R1 ) & ( ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) => ( ( ( R3 => ( R5 => R2 ) ) => R4 ) => ( ( R5 => ( R3 => R2 ) ) => R4 ) ) ) in ( TAUT R1 )) by L1 , L65;
thus L73: thesis by L72 , CQC_THE1:46;
end;
L74: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 => R3 ) => R2 ) => R2 ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L75: (( ( ( 'not' R2 ) => ( R2 => R3 ) ) => ( ( ( R2 => R3 ) => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( 'not' R2 ) => ( R2 => R3 ) ) => ( ( ( R2 => R3 ) => R2 ) => R2 ) ) => ( ( R2 => ( ( 'not' R2 ) => R3 ) ) => ( ( ( R2 => R3 ) => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L49 , L71;
L76: (( R2 => ( ( 'not' R2 ) => R3 ) ) in ( TAUT R1 ) & ( ( R2 => ( ( 'not' R2 ) => R3 ) ) => ( ( ( R2 => R3 ) => R2 ) => R2 ) ) in ( TAUT R1 )) by L75 , CQC_THE1:43 , CQC_THE1:46;
thus L77: thesis by L76 , CQC_THE1:46;
end;
L78: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 => R4 ) => R5 ) => ( ( R2 => R3 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L79: (( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) in ( TAUT R1 ) & ( ( ( R2 => R3 ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R3 => R4 ) => R5 ) ) ) => ( ( ( R2 => R4 ) => R5 ) => ( ( R2 => R3 ) => ( ( R3 => R4 ) => R5 ) ) ) ) in ( TAUT R1 )) by L24 , L65;
thus L80: thesis by L79 , CQC_THE1:46;
end;
L81: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R2 => R3 ) => R4 ) => ( ( R4 => R2 ) => R2 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L82: (( ( ( R2 => R3 ) => R2 ) => R2 ) in ( TAUT R1 ) & ( ( ( ( R2 => R3 ) => R2 ) => R2 ) => ( ( ( R2 => R3 ) => R4 ) => ( ( R4 => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L74 , L78;
thus L83: thesis by L82 , CQC_THE1:46;
end;
L84: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( ( ( R4 => R2 ) => R2 ) => R5 ) => ( ( ( R2 => R3 ) => R4 ) => R5 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L85: (( ( ( R2 => R3 ) => R4 ) => ( ( R4 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( R2 => R3 ) => R4 ) => ( ( R4 => R2 ) => R2 ) ) => ( ( ( ( R4 => R2 ) => R2 ) => R5 ) => ( ( ( R2 => R3 ) => R4 ) => R5 ) ) ) in ( TAUT R1 )) by L81 , L1;
thus L86: thesis by L85 , CQC_THE1:46;
end;
L87: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L88: (( ( ( R2 => R3 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( R2 => R3 ) => R3 ) => ( ( R3 => R2 ) => R2 ) ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R2 ) => R2 ) ) ) in ( TAUT R1 )) by L81 , L84;
thus L89: thesis by L88 , CQC_THE1:46;
end;
theorem
L90: (for R1 being QC-alphabet holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L91: (( ( R3 => R4 ) => ( R3 => R4 ) ) in ( TAUT R1 ) & ( ( ( R3 => R4 ) => ( R3 => R4 ) ) => ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) ) in ( TAUT R1 )) by L87 , L15;
thus L92: thesis by L91 , CQC_THE1:46;
end;
L93: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R3 => R5 ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R5 => R2 ) => R2 ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L94: (( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R2 ) => R2 ) ) in ( TAUT R1 ) & ( ( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R2 ) => R2 ) ) => ( ( R3 => R5 ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R5 => R2 ) => R2 ) ) ) ) in ( TAUT R1 )) by L27 , L87;
thus L95: thesis by L94 , CQC_THE1:46;
end;
L96: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R5 ) => ( ( R5 => R2 ) => R2 ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L97: (( ( R3 => R5 ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R5 => R2 ) => R2 ) ) ) in ( TAUT R1 ) & ( ( ( R3 => R5 ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R5 => R2 ) => R2 ) ) ) => ( ( ( R3 => R4 ) => R2 ) => ( ( R3 => R5 ) => ( ( R5 => R2 ) => R2 ) ) ) ) in ( TAUT R1 )) by L93 , L65;
thus L98: thesis by L97 , CQC_THE1:46;
end;
L99: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R3 => R5 ) => ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( R2 => ( R3 => R4 ) ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L100: (( ( R3 => R4 ) => ( R2 => ( R3 => R4 ) ) ) in ( TAUT R1 ) & ( ( ( R3 => R4 ) => ( R2 => ( R3 => R4 ) ) ) => ( ( R3 => R5 ) => ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( R2 => ( R3 => R4 ) ) ) ) ) in ( TAUT R1 )) by L96 , L55;
thus L101: thesis by L100 , CQC_THE1:46;
end;
L102: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( ( R3 => R5 ) => ( R2 => ( R3 => R4 ) ) ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
L103: (( ( R3 => R5 ) => ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( R2 => ( R3 => R4 ) ) ) ) in ( TAUT R1 ) & ( ( ( R3 => R5 ) => ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( R2 => ( R3 => R4 ) ) ) ) => ( ( R5 => ( R2 => ( R3 => R4 ) ) ) => ( ( R3 => R5 ) => ( R2 => ( R3 => R4 ) ) ) ) ) in ( TAUT R1 )) by L99 , L65;
thus L104: thesis by L103 , CQC_THE1:46;
end;
theorem
L105: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L106: (( ( R3 => R4 ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) & ( ( ( R3 => R4 ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) => ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) ) in ( TAUT R1 )) by L102 , L68;
thus L107: thesis by L106 , CQC_THE1:46;
end;
theorem
L108: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( VERUM R1 ) ) => R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L109: ( ( VERUM R1 ) => ( ( 'not' ( VERUM R1 ) ) => R2 ) ) in ( TAUT R1 ) by CQC_THE1:43;
thus L110: thesis by L109 , CQC_THE1:41 , CQC_THE1:46;
end;
theorem
L111: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (R3 in ( TAUT R1 ) implies ( R2 => R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L112: ( R3 => ( R2 => R3 ) ) in ( TAUT R1 ) by L55;
thus L113: thesis by L112 , CQC_THE1:46;
end;
theorem
L114: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (R2 in ( TAUT R1 ) implies ( ( R2 => R3 ) => R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L115: R2 in ( TAUT R1 );
L116: ( R2 => ( ( R2 => R3 ) => R3 ) ) in ( TAUT R1 ) by L62;
thus L117: thesis by L116 , L115 , CQC_THE1:46;
end;
theorem
L118: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds (( R5 => ( R3 => R2 ) ) in ( TAUT R1 ) implies ( R3 => ( R5 => R2 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume L119: ( R5 => ( R3 => R2 ) ) in ( TAUT R1 );
L120: ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) in ( TAUT R1 ) by L65;
thus L121: thesis by L120 , L119 , CQC_THE1:46;
end;
theorem
L122: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((( R5 => ( R3 => R2 ) ) in ( TAUT R1 ) & R3 in ( TAUT R1 )) implies ( R5 => R2 ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume L123: ( R5 => ( R3 => R2 ) ) in ( TAUT R1 );
L124: ( R3 => ( R5 => R2 ) ) in ( TAUT R1 ) by L123 , L118;
thus L125: thesis by L124 , CQC_THE1:46;
end;
theorem
L126: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((( R5 => ( R3 => R2 ) ) in ( TAUT R1 ) & R3 in ( TAUT R1 ) & R5 in ( TAUT R1 )) implies R2 in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume L127: (( R5 => ( R3 => R2 ) ) in ( TAUT R1 ) & R3 in ( TAUT R1 ));
L128: ( R5 => R2 ) in ( TAUT R1 ) by L127 , L122;
thus L129: thesis by L128 , CQC_THE1:46;
end;
theorem
L130: (for R1 being QC-alphabet holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R3 => ( R3 => R4 ) ) in ( TAUT R1 ) implies ( R3 => R4 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
L131: ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) in ( TAUT R1 ) by L90;
thus L132: thesis by L131 , CQC_THE1:46;
end;
theorem
L133: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) implies ( ( R2 => R3 ) => ( R2 => R4 ) ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L134: ( R2 => ( R3 => R4 ) ) in ( TAUT R1 );
L135: ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L105;
thus L136: thesis by L135 , L134 , CQC_THE1:46;
end;
theorem
L137: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) & ( R2 => R3 ) in ( TAUT R1 )) implies ( R2 => R4 ) in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L138: ( R2 => ( R3 => R4 ) ) in ( TAUT R1 );
L139: ( ( R2 => R3 ) => ( R2 => R4 ) ) in ( TAUT R1 ) by L138 , L133;
thus L140: thesis by L139 , CQC_THE1:46;
end;
theorem
L141: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) & ( R2 => R3 ) in ( TAUT R1 ) & R2 in ( TAUT R1 )) implies R4 in ( TAUT R1 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L142: (( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) & ( R2 => R3 ) in ( TAUT R1 ));
L143: ( R2 => R4 ) in ( TAUT R1 ) by L142 , L137;
thus L144: thesis by L143 , CQC_THE1:46;
end;
theorem
L145: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) & ( R2 => ( R4 => R5 ) ) in ( TAUT R1 )) implies ( R2 => ( R3 => R5 ) ) in ( TAUT R1 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume that
L146: ( R2 => ( R3 => R4 ) ) in ( TAUT R1 )
and
L147: ( R2 => ( R4 => R5 ) ) in ( TAUT R1 );
L148: ( R2 => ( ( R3 => R4 ) => ( ( R4 => R5 ) => ( R3 => R5 ) ) ) ) in ( TAUT R1 ) by L1 , L111;
L149: ( R2 => ( ( R4 => R5 ) => ( R3 => R5 ) ) ) in ( TAUT R1 ) by L148 , L146 , L137;
thus L150: thesis by L149 , L147 , L137;
end;
theorem
L151: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( VERUM R1 ) ) in ( TAUT R1 ))) by L111 , CQC_THE1:41;
L152: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' R2 ) => ( R2 => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L153: ( R2 => ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) by CQC_THE1:43;
thus L154: thesis by L153 , L118;
end;
L155: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L156: (( ( 'not' R2 ) => ( ( 'not' ( VERUM R1 ) ) => R2 ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => ( ( 'not' ( VERUM R1 ) ) => R2 ) ) => ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => ( ( 'not' R2 ) => R2 ) ) ) in ( TAUT R1 )) by L105 , L108 , L111;
L157: ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => ( ( 'not' R2 ) => R2 ) ) in ( TAUT R1 ) by L156 , CQC_THE1:46;
L158: ( ( ( 'not' R2 ) => R2 ) => R2 ) in ( TAUT R1 ) by CQC_THE1:42;
thus L159: thesis by L158 , L157 , L9;
end;
theorem
L160: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( R3 => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L161: (( R3 => ( ( 'not' R3 ) => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R3 ) => ( 'not' ( VERUM R1 ) ) ) => ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) ) ) in ( TAUT R1 )) by L68 , CQC_THE1:43;
L162: ( R3 => ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) ) ) in ( TAUT R1 ) by L161 , L9;
L163: ( R3 => ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => R2 ) ) in ( TAUT R1 ) by L155 , L111;
L164: ( R3 => ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => R2 ) ) in ( TAUT R1 ) by L163 , L162 , L145;
thus L165: thesis by L164 , L118;
end;
theorem
L166: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L167: (( ( 'not' ( 'not' R2 ) ) => ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => ( ( VERUM R1 ) => R2 ) ) in ( TAUT R1 )) by L152 , L160;
L168: ( ( 'not' ( 'not' R2 ) ) => ( ( VERUM R1 ) => R2 ) ) in ( TAUT R1 ) by L167 , L9;
L169: ( ( VERUM R1 ) => ( ( 'not' ( 'not' R2 ) ) => R2 ) ) in ( TAUT R1 ) by L168 , L118;
thus L170: thesis by L169 , CQC_THE1:41 , CQC_THE1:46;
end;
L171:
now
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L172: ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) by L166;
L173: ( ( R2 => ( 'not' ( VERUM R1 ) ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) by L172 , L5;
L174: ( ( ( 'not' ( 'not' R2 ) ) => ( 'not' ( VERUM R1 ) ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L155;
thus L175: ( ( R2 => ( 'not' ( VERUM R1 ) ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) by L174 , L173 , L9;
end;
theorem
L176: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => R3 ) => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L177: (( ( 'not' R3 ) => ( R3 => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) & ( ( R3 => ( 'not' ( VERUM R1 ) ) ) => ( ( R2 => R3 ) => ( R2 => ( 'not' ( VERUM R1 ) ) ) ) ) in ( TAUT R1 )) by L152 , L68;
L178: ( ( 'not' R3 ) => ( ( R2 => R3 ) => ( R2 => ( 'not' ( VERUM R1 ) ) ) ) ) in ( TAUT R1 ) by L177 , L9;
L179: ( ( 'not' R3 ) => ( ( R2 => ( 'not' ( VERUM R1 ) ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L171 , L111;
L180: ( ( 'not' R3 ) => ( ( R2 => R3 ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L179 , L178 , L145;
thus L181: thesis by L180 , L118;
end;
theorem
L182: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L183: (( ( ( VERUM R1 ) => R2 ) => ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R2 ) => ( 'not' ( VERUM R1 ) ) ) => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 )) by L171 , L176;
L184: ( ( ( VERUM R1 ) => R2 ) => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L183 , L9;
L185: ( R2 => ( ( VERUM R1 ) => R2 ) ) in ( TAUT R1 ) by L55;
thus L186: thesis by L185 , L184 , L9;
end;
theorem
L187: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) in ( TAUT R1 ) & ( ( R2 => R3 ) => ( ( 'not' ( 'not' R2 ) ) => R3 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L188: ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L182;
thus L189: ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L188 , L5;
L190: ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) by L166;
thus L191: thesis by L190 , L5;
end;
theorem
L192: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) in ( TAUT R1 ) & ( ( R2 => R3 ) => ( R2 => ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L193: (( ( R2 => ( ( 'not' ( 'not' R3 ) ) => R3 ) ) => ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) ) in ( TAUT R1 ) & ( R2 => ( ( 'not' ( 'not' R3 ) ) => R3 ) ) in ( TAUT R1 )) by L105 , L111 , L166;
thus L194: ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L193 , CQC_THE1:46;
L195: (( ( R2 => ( R3 => ( 'not' ( 'not' R3 ) ) ) ) => ( ( R2 => R3 ) => ( R2 => ( 'not' ( 'not' R3 ) ) ) ) ) in ( TAUT R1 ) & ( R2 => ( R3 => ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 )) by L105 , L111 , L182;
thus L196: thesis by L195 , CQC_THE1:46;
end;
theorem
L197: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L198: (( ( R2 => ( 'not' R3 ) ) => ( ( 'not' ( 'not' R3 ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R3 ) ) => ( 'not' R2 ) ) => ( R3 => ( 'not' R2 ) ) ) in ( TAUT R1 )) by L176 , L187;
thus L199: thesis by L198 , L9;
end;
theorem
L200: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L201: (( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => ( 'not' ( 'not' R2 ) ) ) ) in ( TAUT R1 ) & ( ( ( 'not' R3 ) => ( 'not' ( 'not' R2 ) ) ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 )) by L176 , L192;
thus L202: thesis by L201 , L9;
end;
theorem
L203: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds ( ( R2 => ( 'not' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
L204: (( ( ( 'not' ( 'not' R2 ) ) => ( 'not' R2 ) ) => ( 'not' R2 ) ) in ( TAUT R1 ) & ( ( R2 => ( 'not' R2 ) ) => ( ( 'not' ( 'not' R2 ) ) => ( 'not' R2 ) ) ) in ( TAUT R1 )) by L187 , CQC_THE1:42;
thus L205: thesis by L204 , L9;
end;
theorem
L206: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds ( ( 'not' R2 ) => ( R2 => R3 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L207: (( ( 'not' R2 ) => ( ( 'not' ( 'not' R2 ) ) => R3 ) ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) in ( TAUT R1 )) by L187 , CQC_THE1:43;
thus L208: thesis by L207 , L9;
end;
theorem
L209: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) iff ( ( 'not' R3 ) => ( 'not' R2 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
L210: ( ( R2 => R3 ) => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L176;
thus L211: (( R2 => R3 ) in ( TAUT R1 ) implies ( ( 'not' R3 ) => ( 'not' R2 ) ) in ( TAUT R1 )) by L210 , CQC_THE1:46;
L212: ( ( ( 'not' R3 ) => ( 'not' R2 ) ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L160;
thus L213: (( ( 'not' R3 ) => ( 'not' R2 ) ) in ( TAUT R1 ) implies ( R2 => R3 ) in ( TAUT R1 )) by L212 , CQC_THE1:46;
end;
theorem
L214: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( 'not' R2 ) => ( 'not' R3 ) ) in ( TAUT R1 ) implies ( R3 => R2 ) in ( TAUT R1 ))))) by L209;
theorem
L215: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (R2 in ( TAUT R1 ) iff ( 'not' ( 'not' R2 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
thus L216: (R2 in ( TAUT R1 ) implies ( 'not' ( 'not' R2 ) ) in ( TAUT R1 ))
proof
assume L217: R2 in ( TAUT R1 );
L218: ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L182;
thus L219: thesis by L218 , L217 , CQC_THE1:46;
end;

assume L220: ( 'not' ( 'not' R2 ) ) in ( TAUT R1 );
L221: ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) by L166;
thus L222: thesis by L221 , L220 , CQC_THE1:46;
end;
theorem
L223: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) iff ( R2 => ( 'not' ( 'not' R3 ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
thus L224: (( R2 => R3 ) in ( TAUT R1 ) implies ( R2 => ( 'not' ( 'not' R3 ) ) ) in ( TAUT R1 ))
proof
assume L225: ( R2 => R3 ) in ( TAUT R1 );
L226: ( ( R2 => R3 ) => ( R2 => ( 'not' ( 'not' R3 ) ) ) ) in ( TAUT R1 ) by L192;
thus L227: thesis by L226 , L225 , CQC_THE1:46;
end;

assume L228: ( R2 => ( 'not' ( 'not' R3 ) ) ) in ( TAUT R1 );
L229: ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L192;
thus L230: thesis by L229 , L228 , CQC_THE1:46;
end;
theorem
L231: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) in ( TAUT R1 ) iff ( ( 'not' ( 'not' R2 ) ) => R3 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
thus L232: (( R2 => R3 ) in ( TAUT R1 ) implies ( ( 'not' ( 'not' R2 ) ) => R3 ) in ( TAUT R1 ))
proof
assume L233: ( R2 => R3 ) in ( TAUT R1 );
L234: ( ( R2 => R3 ) => ( ( 'not' ( 'not' R2 ) ) => R3 ) ) in ( TAUT R1 ) by L187;
thus L235: thesis by L234 , L233 , CQC_THE1:46;
end;

assume L236: ( ( 'not' ( 'not' R2 ) ) => R3 ) in ( TAUT R1 );
L237: ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L187;
thus L238: thesis by L237 , L236 , CQC_THE1:46;
end;
theorem
L239: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( 'not' R3 ) ) in ( TAUT R1 ) implies ( R3 => ( 'not' R2 ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L240: ( R2 => ( 'not' R3 ) ) in ( TAUT R1 );
L241: ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L197;
thus L242: thesis by L241 , L240 , CQC_THE1:46;
end;
theorem
L243: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( 'not' R2 ) => R3 ) in ( TAUT R1 ) implies ( ( 'not' R3 ) => R2 ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L244: ( ( 'not' R2 ) => R3 ) in ( TAUT R1 );
L245: ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) by L200;
thus L246: thesis by L245 , L244 , CQC_THE1:46;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) ->  valid;
coherence
proof
thus L247: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L1;
end;
end;
theorem
L249: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) is  valid implies ( ( R3 => R4 ) => ( R2 => R4 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L250: ( R2 => R3 ) is  valid;
L251: ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) is  valid;
thus L252: thesis by L251 , L250 , CQC_THE1:65;
end;
theorem
L253: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => R3 ) is  valid & ( R3 => R4 ) is  valid) implies ( R2 => R4 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L254: (( R2 => R3 ) is  valid & ( R3 => R4 ) is  valid);
L255: (( R2 => R3 ) in ( TAUT R1 ) & ( R3 => R4 ) in ( TAUT R1 )) by L254 , CQC_THE1:def 10;
thus L256: ( R2 => R4 ) in ( TAUT R1 ) by L255 , L9;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
cluster ( R2 => R2 ) ->  valid;
coherence
proof
thus L257: ( R2 => R2 ) in ( TAUT R1 ) by L15;
end;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( R2 => ( R3 => R2 ) ) ->  valid;
coherence
proof
thus L259: ( R2 => ( R3 => R2 ) ) in ( TAUT R1 ) by L55;
end;
end;
theorem
L261: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (R2 is  valid implies ( R3 => R2 ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L262: R2 is  valid;
L263: R2 in ( TAUT R1 ) by L262 , CQC_THE1:def 10;
thus L264: ( R3 => R2 ) in ( TAUT R1 ) by L263 , L111;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
cluster ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) ->  valid;
coherence
proof
thus L265: ( ( R5 => ( R3 => R2 ) ) => ( R3 => ( R5 => R2 ) ) ) in ( TAUT R1 ) by L65;
end;
end;
theorem
L267: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( R3 => R4 ) ) is  valid implies ( R3 => ( R2 => R4 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L268: ( R2 => ( R3 => R4 ) ) is  valid;
L269: ( R2 => ( R3 => R4 ) ) in ( TAUT R1 ) by L268 , CQC_THE1:def 10;
thus L270: ( R3 => ( R2 => R4 ) ) in ( TAUT R1 ) by L269 , L118;
end;
theorem
L271: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => ( R3 => R4 ) ) is  valid & R3 is  valid) implies ( R2 => R4 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L272: ( R2 => ( R3 => R4 ) ) is  valid;
L273: ( R3 => ( R2 => R4 ) ) is  valid by L272 , L267;
thus L274: thesis by L273 , CQC_THE1:65;
end;
theorem
L275: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( VERUM R1 ) ) is  valid & ( ( 'not' ( VERUM R1 ) ) => R2 ) is  valid)))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
thus L276: ( R2 => ( VERUM R1 ) ) in ( TAUT R1 ) by L111 , CQC_THE1:41;
thus L277: ( ( 'not' ( VERUM R1 ) ) => R2 ) in ( TAUT R1 ) by L108;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( R2 => ( ( R2 => R3 ) => R3 ) ) ->  valid;
coherence
proof
thus L278: ( R2 => ( ( R2 => R3 ) => R3 ) ) in ( TAUT R1 ) by L62;
end;
end;
registration
let R1 being QC-alphabet;
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
cluster ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) ->  valid;
coherence
proof
thus L280: ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) in ( TAUT R1 ) by L90;
end;
end;
theorem
L282: (for R1 being QC-alphabet holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R3 => ( R3 => R4 ) ) is  valid implies ( R3 => R4 ) is  valid))))
proof
let R1 being QC-alphabet;
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L283: ( R3 => ( R3 => R4 ) ) is  valid;
L284: ( ( R3 => ( R3 => R4 ) ) => ( R3 => R4 ) ) is  valid;
thus L285: thesis by L284 , L283 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) ->  valid;
coherence
proof
thus L286: ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) in ( TAUT R1 ) by L105;
end;
end;
theorem
L288: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( R3 => R4 ) ) is  valid implies ( ( R2 => R3 ) => ( R2 => R4 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L289: ( R2 => ( R3 => R4 ) ) is  valid;
L290: ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) is  valid;
thus L291: thesis by L290 , L289 , CQC_THE1:65;
end;
theorem
L292: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds ((( R2 => ( R3 => R4 ) ) is  valid & ( R2 => R3 ) is  valid) implies ( R2 => R4 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume that
L293: ( R2 => ( R3 => R4 ) ) is  valid
and
L294: ( R2 => R3 ) is  valid;
L295: ( ( R2 => R3 ) => ( R2 => R4 ) ) is  valid by L293 , L288;
thus L296: thesis by L295 , L294 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
cluster ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) ->  valid;
coherence
proof
thus L297: ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) in ( TAUT R1 ) by L59;
end;
end;
theorem
L299: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( ( R2 => R3 ) => R4 ) is  valid implies ( R3 => R4 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L300: ( ( R2 => R3 ) => R4 ) is  valid;
L301: ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) is  valid;
thus L302: thesis by L301 , L300 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => R3 ) => ( ( R4 => R2 ) => ( R4 => R3 ) ) ) ->  valid;
coherence
proof
thus L303: ( ( R2 => R3 ) => ( ( R4 => R2 ) => ( R4 => R3 ) ) ) in ( TAUT R1 ) by L68;
end;
end;
theorem
L305: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (( R2 => R3 ) is  valid implies ( ( R4 => R2 ) => ( R4 => R3 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
assume L306: ( R2 => R3 ) is  valid;
L307: ( ( R2 => R3 ) => ( ( R4 => R2 ) => ( R4 => R3 ) ) ) is  valid;
thus L308: thesis by L307 , L306 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => R3 ) => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) ->  valid;
coherence
proof
thus L309: ( ( R2 => R3 ) => ( ( 'not' R3 ) => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L176;
end;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( R3 => R2 ) ) ->  valid;
coherence
proof
thus L311: ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( R3 => R2 ) ) in ( TAUT R1 ) by L160;
end;
end;
theorem
L313: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( 'not' R2 ) => ( 'not' R3 ) ) is  valid iff ( R3 => R2 ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
thus L314: (( ( 'not' R2 ) => ( 'not' R3 ) ) is  valid implies ( R3 => R2 ) is  valid)
proof
assume L315: ( ( 'not' R2 ) => ( 'not' R3 ) ) is  valid;
L316: ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( R3 => R2 ) ) is  valid;
thus L317: thesis by L316 , L315 , CQC_THE1:65;
end;

assume L318: ( R3 => R2 ) is  valid;
L319: ( ( R3 => R2 ) => ( ( 'not' R2 ) => ( 'not' R3 ) ) ) is  valid;
thus L320: thesis by L319 , L318 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
cluster ( R2 => ( 'not' ( 'not' R2 ) ) ) ->  valid;
coherence
proof
thus L321: ( R2 => ( 'not' ( 'not' R2 ) ) ) in ( TAUT R1 ) by L182;
end;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
cluster ( ( 'not' ( 'not' R2 ) ) => R2 ) ->  valid;
coherence
proof
thus L323: ( ( 'not' ( 'not' R2 ) ) => R2 ) in ( TAUT R1 ) by L166;
end;
end;
theorem
L325: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (( 'not' ( 'not' R2 ) ) is  valid iff R2 is  valid)))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
thus L326: (( 'not' ( 'not' R2 ) ) is  valid implies R2 is  valid)
proof
assume L327: ( 'not' ( 'not' R2 ) ) is  valid;
L328: ( ( 'not' ( 'not' R2 ) ) => R2 ) is  valid;
thus L329: thesis by L328 , L327 , CQC_THE1:65;
end;

assume L330: R2 is  valid;
L331: ( R2 => ( 'not' ( 'not' R2 ) ) ) is  valid;
thus L332: thesis by L331 , L330 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) ->  valid;
coherence
proof
thus L333: ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L187;
end;
end;
theorem
L335: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( 'not' ( 'not' R2 ) ) => R3 ) is  valid iff ( R2 => R3 ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
thus L336: (( ( 'not' ( 'not' R2 ) ) => R3 ) is  valid implies ( R2 => R3 ) is  valid)
proof
assume L337: ( ( 'not' ( 'not' R2 ) ) => R3 ) is  valid;
L338: ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) is  valid;
thus L339: thesis by L338 , L337 , CQC_THE1:65;
end;

assume L340: ( R2 => R3 ) is  valid;
L341: ( ( 'not' ( 'not' R2 ) ) => R2 ) is  valid;
thus L342: thesis by L341 , L340 , L253;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) ->  valid;
coherence
proof
thus L343: ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) in ( TAUT R1 ) by L192;
end;
end;
theorem
L345: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( 'not' ( 'not' R3 ) ) ) is  valid iff ( R2 => R3 ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
thus L346: (( R2 => ( 'not' ( 'not' R3 ) ) ) is  valid implies ( R2 => R3 ) is  valid)
proof
assume L347: ( R2 => ( 'not' ( 'not' R3 ) ) ) is  valid;
L348: ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) is  valid;
thus L349: thesis by L348 , L347 , CQC_THE1:65;
end;

assume L350: ( R2 => R3 ) is  valid;
L351: ( R3 => ( 'not' ( 'not' R3 ) ) ) is  valid;
thus L352: thesis by L351 , L350 , L253;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) ->  valid;
coherence
proof
thus L353: ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) in ( TAUT R1 ) by L197;
end;
end;
theorem
L355: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( R2 => ( 'not' R3 ) ) is  valid implies ( R3 => ( 'not' R2 ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L356: ( R2 => ( 'not' R3 ) ) is  valid;
L357: ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) is  valid;
thus L358: thesis by L357 , L356 , CQC_THE1:65;
end;
registration
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
cluster ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) ->  valid;
coherence
proof
thus L359: ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) in ( TAUT R1 ) by L200;
end;
end;
theorem
L361: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (( ( 'not' R2 ) => R3 ) is  valid implies ( ( 'not' R3 ) => R2 ) is  valid))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
assume L362: ( ( 'not' R2 ) => R3 ) is  valid;
L363: ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) is  valid;
thus L364: thesis by L363 , L362 , CQC_THE1:65;
end;
theorem
L365: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => R3 ) implies R7 |- ( ( R3 => R4 ) => ( R2 => R4 ) )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L366: R7 |- ( R2 => R3 );
L367: R7 |- ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) by CQC_THE1:59;
thus L368: thesis by L367 , L366 , CQC_THE1:55;
end;
theorem
L369: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds ((R7 |- ( R2 => R3 ) & R7 |- ( R3 => R4 )) implies R7 |- ( R2 => R4 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume that
L370: R7 |- ( R2 => R3 )
and
L371: R7 |- ( R3 => R4 );
L372: R7 |- ( ( R2 => R3 ) => ( ( R3 => R4 ) => ( R2 => R4 ) ) ) by CQC_THE1:59;
L373: R7 |- ( ( R3 => R4 ) => ( R2 => R4 ) ) by L372 , L370 , CQC_THE1:55;
thus L374: thesis by L373 , L371 , CQC_THE1:55;
end;
theorem
L375: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds R7 |- ( R2 => R2 )))) by CQC_THE1:59;
theorem
L376: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- R2 implies R7 |- ( R3 => R2 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L377: R7 |- R2;
L378: R7 |- ( R2 => ( R3 => R2 ) ) by CQC_THE1:59;
thus L379: thesis by L378 , L377 , CQC_THE1:55;
end;
theorem
L380: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- R2 implies R7 |- ( ( R2 => R3 ) => R3 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L381: R7 |- R2;
L382: R7 |- ( R2 => ( ( R2 => R3 ) => R3 ) ) by CQC_THE1:59;
thus L383: thesis by L382 , L381 , CQC_THE1:55;
end;
theorem
L384: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => ( R3 => R4 ) ) implies R7 |- ( R3 => ( R2 => R4 ) )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L385: R7 |- ( R2 => ( R3 => R4 ) );
L386: R7 |- ( ( R2 => ( R3 => R4 ) ) => ( R3 => ( R2 => R4 ) ) ) by CQC_THE1:59;
thus L387: thesis by L386 , L385 , CQC_THE1:55;
end;
theorem
L388: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds ((R7 |- ( R2 => ( R3 => R4 ) ) & R7 |- R3) implies R7 |- ( R2 => R4 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L389: R7 |- ( R2 => ( R3 => R4 ) );
L390: R7 |- ( R3 => ( R2 => R4 ) ) by L389 , L384;
thus L391: thesis by L390 , CQC_THE1:55;
end;
theorem
L392: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => ( R2 => R3 ) ) implies R7 |- ( R2 => R3 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L393: R7 |- ( R2 => ( R2 => R3 ) );
L394: R7 |- ( ( R2 => ( R2 => R3 ) ) => ( R2 => R3 ) ) by CQC_THE1:59;
thus L395: thesis by L394 , L393 , CQC_THE1:55;
end;
theorem
L396: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( ( R2 => R3 ) => R4 ) implies R7 |- ( R3 => R4 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L397: R7 |- ( ( R2 => R3 ) => R4 );
L398: R7 |- ( ( ( R2 => R3 ) => R4 ) => ( R3 => R4 ) ) by CQC_THE1:59;
thus L399: thesis by L398 , L397 , CQC_THE1:55;
end;
theorem
L400: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => ( R3 => R4 ) ) implies R7 |- ( ( R2 => R3 ) => ( R2 => R4 ) )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L401: R7 |- ( R2 => ( R3 => R4 ) );
L402: R7 |- ( ( R2 => ( R3 => R4 ) ) => ( ( R2 => R3 ) => ( R2 => R4 ) ) ) by CQC_THE1:59;
thus L403: thesis by L402 , L401 , CQC_THE1:55;
end;
theorem
L404: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds ((R7 |- ( R2 => ( R3 => R4 ) ) & R7 |- ( R2 => R3 )) implies R7 |- ( R2 => R4 )))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L405: R7 |- ( R2 => ( R3 => R4 ) );
L406: R7 |- ( ( R2 => R3 ) => ( R2 => R4 ) ) by L405 , L400;
thus L407: thesis by L406 , CQC_THE1:55;
end;
theorem
L408: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( ( 'not' R2 ) => ( 'not' R3 ) ) iff R7 |- ( R3 => R2 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
thus L409: (R7 |- ( ( 'not' R2 ) => ( 'not' R3 ) ) implies R7 |- ( R3 => R2 ))
proof
assume L410: R7 |- ( ( 'not' R2 ) => ( 'not' R3 ) );
L411: R7 |- ( ( ( 'not' R2 ) => ( 'not' R3 ) ) => ( R3 => R2 ) ) by CQC_THE1:59;
thus L412: thesis by L411 , L410 , CQC_THE1:55;
end;

assume L413: R7 |- ( R3 => R2 );
L414: R7 |- ( ( R3 => R2 ) => ( ( 'not' R2 ) => ( 'not' R3 ) ) ) by CQC_THE1:59;
thus L415: thesis by L414 , L413 , CQC_THE1:55;
end;
theorem
L416: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( 'not' ( 'not' R2 ) ) iff R7 |- R2))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
thus L417: (R7 |- ( 'not' ( 'not' R2 ) ) implies R7 |- R2)
proof
assume L418: R7 |- ( 'not' ( 'not' R2 ) );
L419: R7 |- ( ( 'not' ( 'not' R2 ) ) => R2 ) by CQC_THE1:59;
thus L420: thesis by L419 , L418 , CQC_THE1:55;
end;

assume L421: R7 |- R2;
L422: R7 |- ( R2 => ( 'not' ( 'not' R2 ) ) ) by CQC_THE1:59;
thus L423: thesis by L422 , L421 , CQC_THE1:55;
end;
theorem
L424: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => ( 'not' ( 'not' R3 ) ) ) iff R7 |- ( R2 => R3 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
thus L425: (R7 |- ( R2 => ( 'not' ( 'not' R3 ) ) ) implies R7 |- ( R2 => R3 ))
proof
assume L426: R7 |- ( R2 => ( 'not' ( 'not' R3 ) ) );
L427: R7 |- ( ( R2 => ( 'not' ( 'not' R3 ) ) ) => ( R2 => R3 ) ) by CQC_THE1:59;
thus L428: thesis by L427 , L426 , CQC_THE1:55;
end;

assume L429: R7 |- ( R2 => R3 );
L430: R7 |- ( R3 => ( 'not' ( 'not' R3 ) ) ) by CQC_THE1:59;
thus L431: thesis by L430 , L429 , L369;
end;
theorem
L432: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( ( 'not' ( 'not' R2 ) ) => R3 ) iff R7 |- ( R2 => R3 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
thus L433: (R7 |- ( ( 'not' ( 'not' R2 ) ) => R3 ) implies R7 |- ( R2 => R3 ))
proof
assume L434: R7 |- ( ( 'not' ( 'not' R2 ) ) => R3 );
L435: R7 |- ( ( ( 'not' ( 'not' R2 ) ) => R3 ) => ( R2 => R3 ) ) by CQC_THE1:59;
thus L436: thesis by L435 , L434 , CQC_THE1:55;
end;

assume L437: R7 |- ( R2 => R3 );
L438: R7 |- ( ( 'not' ( 'not' R2 ) ) => R2 ) by CQC_THE1:59;
thus L439: thesis by L438 , L437 , L369;
end;
theorem
L440: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( R2 => ( 'not' R3 ) ) implies R7 |- ( R3 => ( 'not' R2 ) ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L441: R7 |- ( R2 => ( 'not' R3 ) );
L442: R7 |- ( ( R2 => ( 'not' R3 ) ) => ( R3 => ( 'not' R2 ) ) ) by CQC_THE1:59;
thus L443: thesis by L442 , L441 , CQC_THE1:55;
end;
theorem
L444: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds (R7 |- ( ( 'not' R2 ) => R3 ) implies R7 |- ( ( 'not' R3 ) => R2 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L445: R7 |- ( ( 'not' R2 ) => R3 );
L446: R7 |- ( ( ( 'not' R2 ) => R3 ) => ( ( 'not' R3 ) => R2 ) ) by CQC_THE1:59;
thus L447: thesis by L446 , L445 , CQC_THE1:55;
end;
theorem
L448: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds ((R7 |- ( R2 => ( 'not' R3 ) ) & R7 |- R3) implies R7 |- ( 'not' R2 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L449: R7 |- ( R2 => ( 'not' R3 ) );
L450: R7 |- ( R3 => ( 'not' R2 ) ) by L449 , L440;
thus L451: thesis by L450 , CQC_THE1:55;
end;
theorem
L452: (for R1 being QC-alphabet holds (for R2 being (Element of ( CQC-WFF R1 )) holds (for R3 being (Element of ( CQC-WFF R1 )) holds (for R7 being (Subset of ( CQC-WFF R1 )) holds ((R7 |- ( ( 'not' R2 ) => R3 ) & R7 |- ( 'not' R3 )) implies R7 |- R2)))))
proof
let R1 being QC-alphabet;
let R2 being (Element of ( CQC-WFF R1 ));
let R3 being (Element of ( CQC-WFF R1 ));
let R7 being (Subset of ( CQC-WFF R1 ));
assume L453: R7 |- ( ( 'not' R2 ) => R3 );
L454: R7 |- ( ( 'not' R3 ) => R2 ) by L453 , L444;
thus L455: thesis by L454 , CQC_THE1:55;
end;
