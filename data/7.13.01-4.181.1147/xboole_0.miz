:: Boolean Properties of Sets - Definitions
::  by Library Committee
::
:: Received April 6, 2002
:: Copyright (c) 2002-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies TARSKI, XBOOLE_0;
 notations TARSKI;
 constructors TARSKI;
 theorems TARSKI;
 schemes TARSKI;

begin
scheme Separation { F1() -> set , P1[set] } : (ex B1 being set st (for B2 being set holds (B2 in B1 iff (B2 in F1() & P1[ B2 ]))))
proof
defpred S1[ set , set ] means ($1 = $2 & P1[ $2 ]);
L1: (for R4 being set holds (for R5 being set holds (for R6 being set holds ((S1[ R4 , R5 ] & S1[ R4 , R6 ]) implies R5 = R6))));
consider R1 being set such that L2: (for R4 being set holds (R4 in R1 iff (ex R5 being set st (R5 in F1() & S1[ R5 , R4 ])))) from TARSKI:sch 1(L1);
take R1;
let R4 being set;
L3: (R4 in R1 iff (ex R5 being set st (R5 in F1() & R5 = R4 & P1[ R4 ]))) by L2;
thus L4: thesis by L3;
end;
definition
let C1 being set;
attr C1 is  empty
means
:L5: (not (ex B3 being set st B3 in C1));
end;
registration
cluster  empty for set;
existence
proof
defpred S2[ set ] means contradiction;
consider R2 being set such that L7: (for R4 being set holds (R4 in R2 iff (R4 in the set & S2[ R4 ]))) from Separation;
take R2;
thus L8: (not (ex B4 being set st B4 in R2)) by L7;
end;
end;
definition
func {} -> set equals 
the  empty set;
coherence;
let C2 , C3 being set;
func C2 \/ C3 -> set means 
:L10: (for R4 being set holds (R4 in it iff (R4 in C2 or R4 in C3)));
existence
proof
take ( union { C2 , C3 } );
let R4 being set;
thus L11: (R4 in ( union { C2 , C3 } ) implies (R4 in C2 or R4 in C3))
proof
assume L12: R4 in ( union { C2 , C3 } );
L13: (ex B5 being set st (R4 in B5 & B5 in { C2 , C3 })) by L12 , TARSKI:def 4;
thus L14: thesis by L13 , TARSKI:def 2;
end;

L15: (C2 in { C2 , C3 } & C3 in { C2 , C3 }) by TARSKI:def 2;
thus L16: thesis by L15 , TARSKI:def 4;
end;
uniqueness
proof
let C4 , C5 being set;
assume that
L17: (for R4 being set holds (R4 in C4 iff (R4 in C2 or R4 in C3)))
and
L18: (for R4 being set holds (R4 in C5 iff (R4 in C2 or R4 in C3)));
L19:
now
let R4 being set;
L20: (R4 in C4 iff (R4 in C2 or R4 in C3)) by L17;
thus L21: (R4 in C4 iff R4 in C5) by L20 , L18;
end;
thus L22: thesis by L19 , TARSKI:1;
end;
commutativity
;
idempotence
;
func C2 /\ C3 -> set means 
:L23: (for R4 being set holds (R4 in it iff (R4 in C2 & R4 in C3)));
existence
proof
defpred S3[ set ] means $1 in C3;
thus L24: (ex B6 being set st (for R4 being set holds (R4 in B6 iff (R4 in C2 & S3[ R4 ])))) from Separation;
end;
uniqueness
proof
let C6 , C7 being set;
assume that
L25: (for R4 being set holds (R4 in C6 iff (R4 in C2 & R4 in C3)))
and
L26: (for R4 being set holds (R4 in C7 iff (R4 in C2 & R4 in C3)));
L27:
now
let R4 being set;
L28: (R4 in C6 iff (R4 in C2 & R4 in C3)) by L25;
thus L29: (R4 in C6 iff R4 in C7) by L28 , L26;
end;
thus L30: thesis by L27 , TARSKI:1;
end;
commutativity
;
idempotence
;
func C2 \ C3 -> set means 
:L31: (for R4 being set holds (R4 in it iff (R4 in C2 & (not R4 in C3))));
existence
proof
defpred S4[ set ] means (not $1 in C3);
thus L32: (ex B7 being set st (for R4 being set holds (R4 in B7 iff (R4 in C2 & S4[ R4 ])))) from Separation;
end;
uniqueness
proof
let C8 , C9 being set;
assume that
L33: (for R4 being set holds (R4 in C8 iff (R4 in C2 & (not R4 in C3))))
and
L34: (for R4 being set holds (R4 in C9 iff (R4 in C2 & (not R4 in C3))));
L35:
now
let R4 being set;
L36: (R4 in C8 iff (R4 in C2 & (not R4 in C3))) by L33;
thus L37: (R4 in C8 iff R4 in C9) by L36 , L34;
end;
thus L38: thesis by L35 , TARSKI:1;
end;
end;
definition
let C10 , C11 being set;
func C10 \+\ C11 -> set equals 
( ( C10 \ C11 ) \/ ( C11 \ C10 ) );
correctness;
commutativity
;
pred C10 misses C11
means
:L40: ( C10 /\ C11 ) = ( {} )
;symmetry
;
pred C10 c< C11
means
:L41: (C10 c= C11 & C10 <> C11)
;irreflexivity
;
asymmetry
proof
let R1 being set;
let R2 being set;
assume L42: R1 c= R2;
assume L43: R1 <> R2;
assume L44: R2 c= R1;
L45: (for R4 being set holds (R4 in R1 iff R4 in R2)) by L44 , L42 , TARSKI:def 3;
thus L46: thesis by L45 , TARSKI:1;
end;
pred C10 , C11 are_c=-comparable 
means
(C10 c= C11 or C11 c= C10)
;reflexivity
;
symmetry
;
redefine pred C10 = C11
means
(C10 c= C11 & C11 c= C10)
;compatibility
proof
thus L47: (C10 = C11 implies (C10 c= C11 & C11 c= C10));
assume L48: (C10 c= C11 & C11 c= C10);
L49: (for R4 being set holds (R4 in C10 iff R4 in C11)) by L48 , TARSKI:def 3;
thus L50: thesis by L49 , TARSKI:1;
end;
end;
notation
let C12 , C13 being set;
antonym C12 meets C13 for C12 misses C13;
end;
theorem
L53: (for R1 being set holds (for R2 being set holds (for R4 being set holds (R4 in ( R1 \+\ R2 ) iff (not (R4 in R1 iff R4 in R2))))))
proof
let R1 being set;
let R2 being set;
let R4 being set;
L54: (R4 in ( R1 \+\ R2 ) iff (R4 in ( R1 \ R2 ) or R4 in ( R2 \ R1 ))) by L10;
thus L55: thesis by L54 , L31;
end;
theorem
L56: (for R1 being set holds (for R2 being set holds (for R3 being set holds ((for R4 being set holds ((not R4 in R1) iff (R4 in R2 iff R4 in R3))) implies R1 = ( R2 \+\ R3 )))))
proof
let R1 being set;
let R2 being set;
let R3 being set;
assume L57: (for R4 being set holds ((not R4 in R1) iff (R4 in R2 iff R4 in R3)));
L58:
now
let R4 being set;
L59: (R4 in R1 iff ((R4 in R2 & (not R4 in R3)) or (R4 in R3 & (not R4 in R2)))) by L57;
L60: (R4 in R1 iff (R4 in ( R2 \ R3 ) or R4 in ( R3 \ R2 ))) by L59 , L31;
thus L61: (R4 in R1 iff R4 in ( R2 \+\ R3 )) by L60 , L10;
end;
thus L62: thesis by L58 , TARSKI:1;
end;
registration
cluster ( {} ) ->  empty;
coherence;
end;
registration
let C14 being set;
cluster { C14 } -> non  empty;
coherence
proof
L64: C14 in { C14 } by TARSKI:def 1;
thus L65: (ex B8 being set st B8 in { C14 }) by L64;
end;
let C15 being set;
cluster { C14 , C15 } -> non  empty;
coherence
proof
L66: C14 in { C14 , C15 } by TARSKI:def 2;
thus L67: (ex B9 being set st B9 in { C14 , C15 }) by L66;
end;
end;
registration
cluster non  empty for set;
existence
proof
take { the set };
thus L69: thesis;
end;
end;
registration
let C16 being non  empty set;
let C17 being set;
cluster ( C16 \/ C17 ) -> non  empty;
coherence
proof
consider C18 being set such that L71: C18 in C16 by L5;
L72: C18 in ( C16 \/ C17 ) by L71 , L10;
thus L73: (ex B10 being set st B10 in ( C16 \/ C17 )) by L72;
end;
cluster ( C17 \/ C16 ) -> non  empty;
coherence;
end;
L75: (for R1 being set holds (R1 is  empty implies R1 = ( {} )))
proof
let R1 being set;
assume L76: (not (ex R4 being set st R4 in R1));
L77: (for R4 being set holds (R4 in ( {} ) iff R4 in R1)) by L76 , L5;
thus L78: thesis by L77 , TARSKI:1;
end;
theorem
L79: (for R1 being set holds (for R2 being set holds (R1 meets R2 iff (ex R4 being set st (R4 in R1 & R4 in R2)))))
proof
let R1 being set;
let R2 being set;
thus L80:now
assume L81: R1 meets R2;
L82: ( R1 /\ R2 ) <> ( {} ) by L81 , L40;
L83: (not ( R1 /\ R2 ) is  empty) by L82 , L75;
consider R4 being set such that L84: R4 in ( R1 /\ R2 ) by L83 , L5;
take D1 = R4;
thus L85: (D1 in R1 & D1 in R2) by L84 , L23;
end;
given R4 being set such that
L86: (R4 in R1 & R4 in R2);

L87: R4 in ( R1 /\ R2 ) by L86 , L23;
L88: ( R1 /\ R2 ) <> ( {} ) by L87 , L5;
thus L89: thesis by L88 , L40;
end;
theorem
L90: (for R1 being set holds (for R2 being set holds (R1 meets R2 iff (ex R4 being set st R4 in ( R1 /\ R2 )))))
proof
let R1 being set;
let R2 being set;
thus L91:now
assume L92: R1 meets R2;
L93: ( R1 /\ R2 ) <> ( {} ) by L92 , L40;
L94: (not ( R1 /\ R2 ) is  empty) by L93 , L75;
consider R4 being set such that L95: R4 in ( R1 /\ R2 ) by L94 , L5;
take D2 = R4;
thus L96: D2 in ( R1 /\ R2 ) by L95;
end;
assume L97: (ex R4 being set st R4 in ( R1 /\ R2 ));
L98: ( R1 /\ R2 ) <> ( {} ) by L97 , L5;
thus L99: thesis by L98 , L40;
end;
theorem
L100: (for R1 being set holds (for R2 being set holds (for R4 being set holds ((R1 misses R2 & R4 in ( R1 \/ R2 )) implies ((R4 in R1 & (not R4 in R2)) or (R4 in R2 & (not R4 in R1))))))) by L10 , L79;
scheme Extensionality { F2 , F3() -> set , P2[set] } : F2() = F3()
provided
L101: (for R4 being set holds (R4 in F2() iff P2[ R4 ]))
and
L102: (for R4 being set holds (R4 in F3() iff P2[ R4 ]))
proof
L103: (for R4 being set holds (R4 in F3() implies R4 in F2()))
proof
let R4 being set;
assume L104: R4 in F3();
L105: P2[ R4 ] by L104 , L102;
thus L106: thesis by L105 , L101;
end;
L107: (for R4 being set holds (R4 in F2() implies R4 in F3()))
proof
let R4 being set;
assume L108: R4 in F2();
L109: P2[ R4 ] by L108 , L101;
thus L110: thesis by L109 , L102;
end;
thus L111: thesis by L107 , L103 , TARSKI:1;
end;
scheme SetEq { P3[set] } : (for B11 , B12 being set holds (((for B13 being set holds (B13 in B11 iff P3[ B13 ])) & (for B14 being set holds (B14 in B12 iff P3[ B14 ]))) implies B11 = B12))
proof
let C19 , C20 being set;
assume that
L112: (for B15 being set holds (B15 in C19 iff P3[ B15 ]))
and
L113: (for B16 being set holds (B16 in C20 iff P3[ B16 ]));
thus L114: thesis from Extensionality(L112 , L113);
end;
begin
theorem
L115: (for R1 being set holds (for R2 being set holds (R1 c< R2 implies (ex R4 being set st (R4 in R2 & (not R4 in R1))))))
proof
let R1 being set;
let R2 being set;
assume L116: R1 c< R2;
L117: ((not (for R4 being set holds (R4 in R1 iff R4 in R2))) & R1 c= R2) by L116 , L41 , TARSKI:1;
thus L118: thesis by L117 , TARSKI:def 3;
end;
theorem
L119: (for R1 being set holds (R1 <> ( {} ) implies (ex R4 being set st R4 in R1)))
proof
let R1 being set;
assume L120: R1 <> ( {} );
assume L121: (not (ex R4 being set st R4 in R1));
L122: R1 is  empty by L121 , L5;
thus L123: thesis by L122 , L120 , L75;
end;
