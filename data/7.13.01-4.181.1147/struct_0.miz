:: Preliminaries to Structures
::  by Library Committee
::
:: Received January 6, 1995
:: Copyright (c) 1995-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, SUBSET_1, SETFAM_1, FUNCT_1, FINSEQ_1, PBOOLE, RELAT_1,
      NAT_1, PARTFUN1, SUPINF_2, MESFUNC1, ZFMISC_1, CARD_1, FINSET_1,
      XCMPLX_0, FUNCT_7, FUNCOP_1, VALUED_0, BINOP_1, STRUCT_0, ORDINAL1,
      MSUALG_6;
 notations TARSKI, XBOOLE_0, SUBSET_1, DOMAIN_1, SETFAM_1, FINSET_1, ORDINAL1,
      CARD_1, RELAT_1, XCMPLX_0, RELSET_1, PARTFUN1, FUNCT_2, BINOP_1, NAT_1,
      FINSEQ_1, FUNCOP_1, ZFMISC_1, PBOOLE, FUNCT_7;
 constructors PARTFUN1, PBOOLE, ZFMISC_1, FUNCT_7, SETFAM_1, RELSET_1,
      XCMPLX_0, DOMAIN_1;
 registrations XBOOLE_0, FUNCT_1, FUNCT_2, ZFMISC_1, CARD_5, ORDINAL1,
      XCMPLX_0, CARD_1, FINSET_1, RELSET_1;
 requirements BOOLE, SUBSET, NUMERALS;
 definitions SUBSET_1, TARSKI, XBOOLE_0, ZFMISC_1;
 theorems TARSKI, ZFMISC_1, XBOOLE_0, SUBSET_1, CARD_1, FUNCT_7, XBOOLE_1;

begin
definition
struct 1-sorted(# carrier -> set #);
end;
definition
let C1 being 1-sorted;
attr C1 is  empty
means
:L2: (the carrier of C1) is  empty;
end;
registration
cluster  strict  empty for 1-sorted;
existence
proof
take D1 = 1-sorted (# ( {} ) #);
thus L4: D1 is  strict;
thus L5: (the carrier of D1) is  empty;
end;
end;
registration
cluster  strict non  empty for 1-sorted;
existence
proof
take 1-sorted (# { ( {} ) } #);
thus L7: 1-sorted (# { ( {} ) } #) is  strict;
thus L8: (the carrier of 1-sorted (# { ( {} ) } #)) is non  empty;
end;
end;
registration
let C2 being  empty 1-sorted;
cluster (the carrier of C2) ->  empty;
coherence by L2;
end;
registration
let C3 being non  empty 1-sorted;
cluster (the carrier of C3) -> non  empty;
coherence by L2;
end;
definition
let C4 being 1-sorted;
mode Element of C4
 is (Element of (the carrier of C4));
mode Subset of C4
 is (Subset of (the carrier of C4));
mode Subset-Family of C4
 is (Subset-Family of (the carrier of C4));
end;
definition
let C5 being 1-sorted;
let C6 being set;
mode Function of C5 , C6
 is (Function of (the carrier of C5) , C6);
mode Function of C6 , C5
 is (Function of C6 , (the carrier of C5));
end;
definition
let C7 , C8 being 1-sorted;
mode Function of C7 , C8
 is (Function of (the carrier of C7) , (the carrier of C8));
end;
definition
let C9 being 1-sorted;
func {} C9 -> (Subset of C9) equals 
( {} );
coherence
proof
L15: ( {} ) = ( {} (the carrier of C9) );
thus L16: thesis by L15;
end;
func [#] C9 -> (Subset of C9) equals 
(the carrier of C9);
coherence
proof
L17: (the carrier of C9) = ( [#] (the carrier of C9) );
thus L18: thesis by L17;
end;
end;
registration
let C10 being 1-sorted;
cluster ( {} C10 ) ->  empty;
coherence;
end;
registration
let C11 being  empty 1-sorted;
cluster ( [#] C11 ) ->  empty;
coherence;
end;
registration
let C12 being non  empty 1-sorted;
cluster ( [#] C12 ) -> non  empty;
coherence;
end;
registration
let C13 being non  empty 1-sorted;
cluster non  empty for (Subset of C13);
existence
proof
take ( [#] C13 );
thus L23: thesis;
end;
end;
definition
let C14 being 1-sorted;
mode FinSequence of C14
 is (FinSequence of (the carrier of C14));
end;
definition
let C15 being 1-sorted;
mode ManySortedSet of C15
 is (ManySortedSet of (the carrier of C15));
end;
definition
let C16 being 1-sorted;
func id C16 -> (Function of C16 , C16) equals 
( id (the carrier of C16) );
coherence;
end;
definition
let C17 being 1-sorted;
mode sequence of C17
 is (sequence of (the carrier of C17));
end;
definition
let C18 being 1-sorted;
let C19 being set;
mode PartFunc of C18 , C19
 is (PartFunc of (the carrier of C18) , C19);
mode PartFunc of C19 , C18
 is (PartFunc of C19 , (the carrier of C18));
end;
definition
let C20 , C21 being 1-sorted;
mode PartFunc of C20 , C21
 is (PartFunc of (the carrier of C20) , (the carrier of C21));
end;
definition
let C22 being 1-sorted;
let C23 being set;
pred C23 in C22
means
C23 in (the carrier of C22)
;end;
definition
struct (1-sorted) ZeroStr(# carrier -> set , ZeroF -> (Element of the carrier) #);
end;
registration
cluster  strict non  empty for ZeroStr;
existence
proof
set D2 = the non  empty set;
set D3 = the (Element of D2);
take ZeroStr (# D2 , D3 #);
thus L33: ZeroStr (# D2 , D3 #) is  strict;
thus L34: (the carrier of ZeroStr (# D2 , D3 #)) is non  empty;
end;
end;
definition
struct (1-sorted) OneStr(# carrier -> set , OneF -> (Element of the carrier) #);
end;
definition
struct (ZeroStr , OneStr) ZeroOneStr(# carrier -> set , ZeroF -> (Element of the carrier) , OneF -> (Element of the carrier) #);
end;
definition
let C24 being ZeroStr;
func 0. C24 -> (Element of C24) equals 
(the ZeroF of C24);
coherence;
end;
definition
let C25 being OneStr;
func 1. C25 -> (Element of C25) equals 
(the OneF of C25);
coherence;
end;
definition
let C26 being ZeroOneStr;
attr C26 is  degenerated
means
:L40: ( 0. C26 ) = ( 1. C26 );
end;
definition
let C27 being 1-sorted;
attr C27 is  trivial
means
:L42: (the carrier of C27) is  trivial;
end;
registration
cluster  empty ->  trivial for 1-sorted;
coherence
proof
let C28 being 1-sorted;
assume L44: (the carrier of C28) is  empty;
thus L45: (the carrier of C28) is  trivial by L44;
end;
cluster non  trivial -> non  empty for 1-sorted;
coherence;
end;
definition
let C29 being 1-sorted;
redefine attr C29 is  trivial
means
:L47: (for B1 , B2 being (Element of C29) holds B1 = B2);
compatibility
proof
set D4 = (the carrier of C29);
per cases ;
suppose L48: D4 is non  empty;

thus L49: (C29 is  trivial implies (for B3 , B4 being (Element of D4) holds B3 = B4))
proof
assume L50: D4 is  trivial;
let C30 , C31 being (Element of D4);
thus L51: thesis by L50 , L48 , ZFMISC_1:def 10;
end;

assume L52: (for B5 , B6 being (Element of D4) holds B5 = B6);
let C32 , C33 being set;
thus L53: thesis by L52;
end;
suppose L54: D4 is  empty;

L55: (for B7 , B8 being (Element of D4) holds B7 = B8)
proof
let C34 , C35 being (Element of D4);
thus L56: C34 = ( {} ) by L54 , SUBSET_1:def 1
.= C35 by L54 , SUBSET_1:def 1;
end;
thus L57: thesis by L55 , L54;
end;
end;
end;
registration
cluster non  degenerated -> non  trivial for ZeroOneStr;
coherence
proof
let C36 being ZeroOneStr;
assume L60: C36 is non  degenerated;
assume L61: C36 is  trivial;
L62: ( 0. C36 ) = ( 1. C36 ) by L61 , L47;
thus L63: contradiction by L62 , L60 , L40;
end;
end;
registration
cluster  trivial non  empty  strict for 1-sorted;
existence
proof
take 1-sorted (# 1 #);
thus L65: thesis by L42 , CARD_1:49;
end;
cluster non  trivial  strict for 1-sorted;
existence
proof
take D5 = 1-sorted (# 2 #);
reconsider D6 = ( 0 ) , D7 = 1 as (Element of D5) by CARD_1:50 , TARSKI:def 2;
L66: D6 <> D7;
thus L67: thesis by L66 , L47;
end;
end;
registration
let C37 being non  trivial 1-sorted;
cluster (the carrier of C37) -> non  trivial;
coherence by L42;
end;
registration
let C38 being  trivial 1-sorted;
cluster (the carrier of C38) ->  trivial;
coherence by L42;
end;
begin
definition
let C39 being 1-sorted;
attr C39 is  finite
means
:L71: (the carrier of C39) is  finite;
end;
registration
cluster  strict  finite non  empty for 1-sorted;
existence
proof
take 1-sorted (# { ( {} ) } #);
thus L73: thesis by L71;
end;
end;
registration
let C40 being  finite 1-sorted;
cluster (the carrier of C40) ->  finite;
coherence by L71;
end;
registration
cluster  ->  finite for  empty  empty  empty  empty 1-sorted;
coherence
proof
let C41 being  empty 1-sorted;
thus L76: (the carrier of C41) is  finite;
end;
end;
notation
let C42 being 1-sorted;
antonym C42 is  infinite for C42 is  finite;
end;
registration
cluster  strict  infinite for 1-sorted;
existence
proof
take D8 = 1-sorted (# the  infinite set #);
thus L79: D8 is  strict;
thus L80: (the carrier of D8) is  infinite;
end;
end;
registration
let C43 being  infinite 1-sorted;
cluster (the carrier of C43) ->  infinite;
coherence by L71;
end;
registration
cluster  -> non  empty for  infinite  infinite  infinite  infinite 1-sorted;
coherence;
end;
registration
cluster  trivial ->  finite for 1-sorted;
coherence
proof
let C44 being 1-sorted;
assume L84: C44 is  trivial;
reconsider D9 = (the carrier of C44) as  trivial set by L84;
L85: D9 is  finite;
thus L86: (the carrier of C44) is  finite by L85;
end;
end;
registration
cluster  infinite -> non  trivial for 1-sorted;
coherence;
end;
definition
let C45 being ZeroStr;
let C46 being (Element of C45);
attr C46 is  zero
means
:L89: C46 = ( 0. C45 );
end;
registration
let C47 being ZeroStr;
cluster ( 0. C47 ) ->  zero;
coherence by L89;
end;
registration
cluster  strict non  degenerated for ZeroOneStr;
existence
proof
take D10 = ZeroOneStr (# 2 , ( In (( 0 ) , 2) ) , ( In (1 , 2) ) #);
L92: ( 0 ) in 2 by CARD_1:50 , TARSKI:def 2;
L93: (1 in 2 & ( In (( 0 ) , 2) ) = ( 0 )) by L92 , CARD_1:50 , FUNCT_7:def 1 , TARSKI:def 2;
L94: ( 0. D10 ) <> ( 1. D10 ) by L93 , FUNCT_7:def 1;
thus L95: thesis by L94 , L40;
end;
end;
registration
let C48 being non  degenerated ZeroOneStr;
cluster ( 1. C48 ) -> non  zero;
coherence
proof
L97: ( 0. C48 ) <> ( 1. C48 ) by L40;
thus L98: thesis by L97 , L89;
end;
end;
definition
let C49 being 1-sorted;
mode Cover of C49
 is (Cover of (the carrier of C49));
end;
registration
let C50 being 1-sorted;
cluster ( [#] C50 ) -> non  proper;
coherence
proof
thus L101: ( [#] C50 ) = (the carrier of C50);
end;
end;
begin
definition
struct (1-sorted) 2-sorted(# carrier , carrier' -> set #);
end;
definition
let C51 being 2-sorted;
attr C51 is  void
means
:L104: (the carrier' of C51) is  empty;
end;
registration
cluster  strict  empty  void for 2-sorted;
existence
proof
take D11 = 2-sorted (# ( {} ) , ( {} ) #);
thus L106: D11 is  strict;
thus L107: (the carrier of D11) is  empty;
thus L108: (the carrier' of D11) is  empty;
end;
end;
registration
let C52 being  void 2-sorted;
cluster (the carrier' of C52) ->  empty;
coherence by L104;
end;
registration
cluster  strict non  empty non  void for 2-sorted;
existence
proof
take D12 = 2-sorted (# 1 , 1 #);
thus L111: D12 is  strict;
thus L112: (not (the carrier of D12) is  empty);
thus L113: (not (the carrier' of D12) is  empty);
end;
end;
registration
let C53 being non  void 2-sorted;
cluster (the carrier' of C53) -> non  empty;
coherence by L104;
end;
definition
let C54 being 1-sorted;
let C55 being non  empty 1-sorted;
let C56 being (Element of C55);
func C54 --> C56 -> (Function of C54 , C55) equals 
( (the carrier of C54) --> C56 );
coherence;
end;
registration
let C57 being ZeroStr;
cluster  zero for (Element of C57);
existence
proof
take ( 0. C57 );
thus L117: ( 0. C57 ) = ( 0. C57 );
end;
end;
registration
cluster  strict non  trivial for ZeroStr;
existence
proof
take ZeroStr (# 2 , ( In (( 0 ) , 2) ) #);
L119: (( 0 ) in 2 & 1 in 2) by CARD_1:50 , TARSKI:def 2;
thus L120: thesis by L119 , L47;
end;
end;
registration
let C58 being non  trivial ZeroStr;
cluster non  zero for (Element of C58);
existence
proof
consider C59 , C60 being (Element of C58) such that L122: C59 <> C60 by L47;
per cases  by L122;
suppose L123: C59 <> ( 0. C58 );

take C59;
thus L124: C59 <> ( 0. C58 ) by L123;
end;
suppose L125: C60 <> ( 0. C58 );

take C60;
thus L126: C60 <> ( 0. C58 ) by L125;
end;
end;
end;
definition
let C61 being set;
let C62 being ZeroStr;
let C63 being (Relation of C61 , (the carrier of C62));
attr C63 is  non-zero
means
(not ( 0. C62 ) in ( rng C63 ));
end;
definition
let C64 being 1-sorted;
func card C64 -> Cardinal equals 
( card (the carrier of C64) );
coherence;
end;
definition
let C65 being 1-sorted;
mode UnOp of C65
 is (UnOp of (the carrier of C65));
mode BinOp of C65
 is (BinOp of (the carrier of C65));
end;
definition
let C66 being ZeroStr;
func NonZero C66 -> (Subset of C66) equals 
( ( [#] C66 ) \ { ( 0. C66 ) } );
coherence;
end;
theorem
L133: (for B9 being non  empty ZeroStr holds (for B10 being (Element of B9) holds (B10 in ( NonZero B9 ) iff (not B10 is  zero))))
proof
let C67 being non  empty ZeroStr;
let C68 being (Element of C67);
thus L134: (C68 in ( NonZero C67 ) implies (not C68 is  zero))
proof
assume L135: C68 in ( NonZero C67 );
L136: C68 <> ( 0. C67 ) by L135 , ZFMISC_1:56;
thus L137: thesis by L136 , L89;
end;

thus L138: ((not C68 is  zero) implies C68 in ( NonZero C67 )) by ZFMISC_1:56;
end;
definition
let C69 being non  empty ZeroStr;
redefine attr C69 is  trivial
means
:L139: (for B11 being (Element of C69) holds B11 = ( 0. C69 ));
compatibility
proof
thus L140: (C69 is  trivial implies (for B12 being (Element of C69) holds B12 = ( 0. C69 ))) by L47;
assume L141: (for B13 being (Element of C69) holds B13 = ( 0. C69 ));
let C70 , C71 being (Element of C69);
thus L142: C70 = ( 0. C69 ) by L141
.= C71 by L141;
end;
end;
registration
let C72 being non  trivial ZeroStr;
cluster ( NonZero C72 ) -> non  empty;
coherence
proof
L144: (ex B14 being (Element of C72) st B14 <> ( 0. C72 )) by L139;
thus L145: thesis by L144 , ZFMISC_1:56;
end;
end;
registration
cluster  trivial non  empty for ZeroStr;
existence
proof
take ZeroStr (# 1 , ( In (( 0 ) , 1) ) #);
thus L147: thesis by CARD_1:49;
end;
end;
registration
let C73 being  trivial non  empty ZeroStr;
cluster ( NonZero C73 ) ->  empty;
coherence
proof
assume L149: (not ( NonZero C73 ) is  empty);
consider C74 being (Element of C73) such that L150: C74 in ( NonZero C73 ) by L149 , SUBSET_1:4;
L151: (not C74 in { ( 0. C73 ) }) by L150 , XBOOLE_0:def 5;
L152: C74 <> ( 0. C73 ) by L151 , TARSKI:def 1;
thus L153: contradiction by L152 , L139;
end;
end;
registration
let C75 being non  empty 1-sorted;
cluster non  empty  trivial for (Subset of C75);
existence
proof
L155: { the (Element of C75) } is (Subset of C75);
thus L156: thesis by L155;
end;
end;
theorem
L158: (for B15 being non  degenerated ZeroOneStr holds ( 1. B15 ) in ( NonZero B15 ))
proof
let C76 being non  degenerated ZeroOneStr;
L159: (not ( 1. C76 ) in { ( 0. C76 ) }) by TARSKI:def 1;
thus L160: thesis by L159 , XBOOLE_0:def 5;
end;
registration
let C77 being  finite 1-sorted;
cluster ( card C77 ) ->  natural;
coherence;
end;
registration
let C78 being  finite non  empty 1-sorted;
cluster ( card C78 ) -> non  zero for Nat;
coherence;
end;
registration
let C79 being non  trivial 1-sorted;
cluster non  trivial for (Subset of C79);
existence
proof
consider C80 , C81 being (Element of C79) such that L163: C80 <> C81 by L47;
reconsider D13 = { C80 , C81 } as (Subset of C79);
take D13;
take C80;
take C81;
thus L164: C80 in D13 by TARSKI:def 2;
thus L165: C81 in D13 by TARSKI:def 2;
thus L166: thesis by L163;
end;
end;
theorem
L168: (for B16 being ZeroStr holds (not ( 0. B16 ) in ( NonZero B16 )))
proof
let C82 being ZeroStr;
assume L169: ( 0. C82 ) in ( NonZero C82 );
L170: (not ( 0. C82 ) in { ( 0. C82 ) }) by L169 , XBOOLE_0:def 5;
thus L171: thesis by L170 , TARSKI:def 1;
end;
theorem
L172: (for B17 being non  empty ZeroStr holds (the carrier of B17) = ( { ( 0. B17 ) } \/ ( NonZero B17 ) )) by XBOOLE_1:45;
definition
let C83 being set;
let C84 being 1-sorted;
attr C84 is C83 -element
means
:L173: (the carrier of C84) is C83 -element;
end;
registration
let C85 being Cardinal;
cluster C85 -element for 1-sorted;
existence
proof
take D14 = 1-sorted (# the C85 -element set #);
thus L175: (the carrier of D14) is C85 -element;
end;
end;
registration
let C86 being Cardinal;
let C87 being C86 -element 1-sorted;
cluster (the carrier of C87) -> C86 -element;
coherence by L173;
end;
registration
cluster  empty -> ( 0 ) -element for 1-sorted;
coherence
proof
let C88 being 1-sorted;
assume L178: C88 is  empty;
thus L179: (the carrier of C88) is ( 0 ) -element by L178;
end;
cluster ( 0 ) -element ->  empty for 1-sorted;
coherence
proof
let C89 being 1-sorted;
assume L180: C89 is ( 0 ) -element;
thus L181: (the carrier of C89) is  empty by L180;
end;
cluster non  empty  trivial -> 1 -element for 1-sorted;
coherence
proof
let C90 being 1-sorted;
assume L182: (the carrier of C90) is non  empty;
assume L183: C90 is  trivial;
thus L184: (the carrier of C90) is 1 -element by L183 , L182;
end;
cluster 1 -element -> non  empty  trivial for 1-sorted;
coherence
proof
let C91 being 1-sorted;
assume L185: C91 is 1 -element;
thus L186: (the carrier of C91) is non  empty by L185;
L187: (the carrier of C91) is  trivial by L185;
thus L188: thesis by L187;
end;
end;
definition
let C92 being 2-sorted;
attr C92 is  feasible
means
:L190: ((the carrier of C92) is  empty implies (the carrier' of C92) is  empty);
end;
registration
cluster non  empty ->  feasible for 2-sorted;
coherence
proof
let C93 being 2-sorted;
assume L192: (not (the carrier of C93) is  empty);
thus L193: thesis by L192 , L190;
end;
cluster  void ->  feasible for 2-sorted;
coherence
proof
let C94 being 2-sorted;
assume L194: (the carrier' of C94) is  empty;
thus L195: thesis by L194 , L190;
end;
cluster  empty  feasible ->  void for 2-sorted;
coherence
proof
let C95 being 2-sorted;
assume L196: ((the carrier of C95) is  empty & C95 is  feasible);
thus L197: (the carrier' of C95) is  empty by L196 , L190;
end;
cluster non  void  feasible -> non  empty for 2-sorted;
coherence;
end;
definition
let C96 being 2-sorted;
attr C96 is  trivial'
means
:L199: (the carrier' of C96) is  trivial;
end;
registration
cluster  strict non  empty non  void  trivial  trivial' for 2-sorted;
existence
proof
take D15 = 2-sorted (# 1 , 1 #);
thus L201: D15 is  strict;
thus L202: (not D15 is  empty);
thus L203: (not D15 is  void);
thus L204: D15 is  trivial by CARD_1:49;
thus L205: (the carrier' of D15) is  trivial by CARD_1:49;
end;
end;
registration
let C97 being  trivial' 2-sorted;
cluster (the carrier' of C97) ->  trivial;
coherence by L199;
end;
registration
cluster non  trivial' for 2-sorted;
existence
proof
take D16 = 2-sorted (# 1 , { ( 0 ) , 1 } #);
L208: (( 0 ) in { ( 0 ) , 1 } & 1 in { ( 0 ) , 1 }) by TARSKI:def 2;
thus L209: thesis by L208 , ZFMISC_1:def 10;
end;
end;
registration
let C98 being non  trivial' 2-sorted;
cluster (the carrier' of C98) -> non  trivial;
coherence by L199;
end;
registration
cluster  void ->  trivial' for 2-sorted;
coherence
proof
let C99 being 2-sorted;
assume L212: (the carrier' of C99) is  empty;
thus L213: (the carrier' of C99) is  trivial by L212;
end;
cluster non  trivial -> non  empty for 1-sorted;
coherence;
end;
