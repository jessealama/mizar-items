:: The Lattice of Natural Numbers and The Sublattice of it.
:: The Set of Prime Numbers
::  by Marek Chmur
::
:: Received April 26, 1991
:: Copyright (c) 1991-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, NAT_1, BINOP_1, FUNCT_1, INT_2, SUBSET_1, ARYTM_3,
      STRUCT_0, XBOOLE_0, LATTICES, ORDINAL1, EQREL_1, PBOOLE, CARD_1, TARSKI,
      XREAL_0, XXREAL_0, QC_LANG1, XCMPLX_0, ZFMISC_1, RELAT_1, REALSET1,
      NAT_LAT, MEMBERED;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, ORDINAL1, XREAL_0,
      REALSET1, NAT_1, NAT_D, BINOP_1, RELAT_1, FUNCT_1, MEMBERED, XXREAL_0,
      STRUCT_0, LATTICES;
 constructors PARTFUN1, BINOP_1, FINSET_1, XXREAL_0, NAT_D, MEMBERED, REALSET1,
      LATTICES, RELSET_1;
 registrations ORDINAL1, RELSET_1, FINSET_1, XREAL_0, MEMBERED, STRUCT_0,
      LATTICES;
 requirements REAL, NUMERALS, SUBSET, BOOLE;
 definitions TARSKI, XBOOLE_0, LATTICES, BINOP_1, REALSET1, ORDINAL1;
 theorems NEWTON, ZFMISC_1, LATTICES, FUNCT_1, FUNCT_2, XBOOLE_1, RELAT_1,
      ORDINAL1, BINOP_1, RELSET_1;
 schemes BINOP_1, BINOP_2, SUBSET_1;

begin
definition
func hcflat -> (BinOp of ( NAT )) means 
:L1: (for R1 being Nat holds (for R2 being Nat holds ( it . (R2 , R1) ) = ( R2 gcd R1 )));
existence
proof
deffunc H1(Nat , Nat) = ( $1 gcd $2 );
consider C1 being (BinOp of ( NAT )) such that L2: (for B1 , B2 being (Element of ( NAT )) holds ( C1 . (B1 , B2) ) = H1(B1 , B2)) from BINOP_1:sch 4;
take C1;
let R2 being Nat;
let R1 being Nat;
L3: (R2 in ( NAT ) & R1 in ( NAT )) by ORDINAL1:def 12;
thus L4: thesis by L3 , L2;
end;
uniqueness
proof
let C2 , C3 being (BinOp of ( NAT ));
assume that
L5: (for R1 being Nat holds (for R2 being Nat holds ( C2 . (R2 , R1) ) = ( R2 gcd R1 )))
and
L6: (for R1 being Nat holds (for R2 being Nat holds ( C3 . (R2 , R1) ) = ( R2 gcd R1 )));
L7:
now
let C4 , C5 being (Element of ( NAT ));
thus L8: ( C2 . (C4 , C5) ) = ( C4 gcd C5 ) by L5
.= ( C3 . (C4 , C5) ) by L6;
end;
thus L9: thesis by L7 , BINOP_1:2;
end;
func lcmlat -> (BinOp of ( NAT )) means 
:L10: (for R1 being Nat holds (for R2 being Nat holds ( it . (R2 , R1) ) = ( R2 lcm R1 )));
existence
proof
deffunc H2(Nat , Nat) = ( $1 lcm $2 );
consider C6 being (BinOp of ( NAT )) such that L11: (for B3 , B4 being (Element of ( NAT )) holds ( C6 . (B3 , B4) ) = H2(B3 , B4)) from BINOP_1:sch 4;
take C6;
let R2 being Nat;
let R1 being Nat;
L12: (R2 in ( NAT ) & R1 in ( NAT )) by ORDINAL1:def 12;
thus L13: thesis by L12 , L11;
end;
uniqueness
proof
let C7 , C8 being (BinOp of ( NAT ));
assume that
L14: (for R1 being Nat holds (for R2 being Nat holds ( C7 . (R2 , R1) ) = ( R2 lcm R1 )))
and
L15: (for R1 being Nat holds (for R2 being Nat holds ( C8 . (R2 , R1) ) = ( R2 lcm R1 )));
L16:
now
let C9 , C10 being (Element of ( NAT ));
thus L17: ( C7 . (C9 , C10) ) = ( C9 lcm C10 ) by L14
.= ( C8 . (C9 , C10) ) by L15;
end;
thus L18: thesis by L16 , BINOP_1:2;
end;
end;
definition
func Nat_Lattice ->  strict non  empty LattStr equals 
LattStr (# ( NAT ) , ( lcmlat ) , ( hcflat ) #);
coherence;
end;
registration
cluster (the carrier of ( Nat_Lattice )) ->  natural-membered;
coherence;
end;
registration
let R3 being (Element of ( Nat_Lattice ));
let R4 being (Element of ( Nat_Lattice ));
identify R3 "\/" R4 with R3 lcm R4;
compatibility by L10;
identify R3 "/\" R4 with R3 gcd R4;
compatibility by L1;
end;
theorem
L23: (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( R3 "\/" R4 ) = ( R3 lcm R4 )));
theorem
L24: (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( R3 "/\" R4 ) = ( R3 gcd R4 )));
theorem
L25: (for B5 , B6 being (Element of ( Nat_Lattice )) holds (B5 [= B6 implies B5 divides B6))
proof
let C11 , C12 being (Element of ( Nat_Lattice ));
assume L26: C11 [= C12;
L27: ( C11 "\/" C12 ) = C12 by L26 , LATTICES:def 3;
thus L28: thesis by L27 , NEWTON:44;
end;
definition
func 0_NN -> (Element of ( Nat_Lattice )) equals 
1;
coherence;
func 1_NN -> (Element of ( Nat_Lattice )) equals 
( 0 );
coherence;
end;
theorem
L30: ( 0_NN ) = 1;
L31: (for B7 being (Element of ( Nat_Lattice )) holds (( ( 0_NN ) "/\" B7 ) = ( 0_NN ) & ( B7 "/\" ( 0_NN ) ) = ( 0_NN ))) by NEWTON:51;
registration
cluster ( Nat_Lattice ) ->  Lattice-like;
coherence
proof
thus L32: ((for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( R3 "\/" R4 ) = ( R4 "\/" R3 ))) & (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds (for R5 being (Element of ( Nat_Lattice )) holds ( R3 "\/" ( R4 "\/" R5 ) ) = ( ( R3 "\/" R4 ) "\/" R5 )))) & (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( ( R3 "/\" R4 ) "\/" R4 ) = R4)) & (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( R3 "/\" R4 ) = ( R4 "/\" R3 ))) & (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds (for R5 being (Element of ( Nat_Lattice )) holds ( R3 "/\" ( R4 "/\" R5 ) ) = ( ( R3 "/\" R4 ) "/\" R5 )))) & (for R3 being (Element of ( Nat_Lattice )) holds (for R4 being (Element of ( Nat_Lattice )) holds ( R3 "/\" ( R3 "\/" R4 ) ) = R3))) by NEWTON:43 , NEWTON:48 , NEWTON:53 , NEWTON:54;
end;
end;
registration
cluster ( Nat_Lattice ) ->  strict;
coherence;
end;
registration
cluster ( Nat_Lattice ) ->  lower-bounded;
coherence by L31 , LATTICES:def 13;
end;
theorem
L36: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds ( ( lcmlat ) . (R6 , R7) ) = ( ( lcmlat ) . (R7 , R6) )))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
thus L37: ( ( lcmlat ) . (R6 , R7) ) = ( R7 "\/" R6 ) by LATTICES:def 1
.= ( ( lcmlat ) . (R7 , R6) );
end;
theorem
L38: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds ( ( hcflat ) . (R7 , R6) ) = ( ( hcflat ) . (R6 , R7) )))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
thus L39: ( ( hcflat ) . (R7 , R6) ) = ( R6 "/\" R7 ) by LATTICES:def 2
.= ( ( hcflat ) . (R6 , R7) );
end;
theorem
L40: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (for R8 being (Element of ( Nat_Lattice )) holds ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R6 , R7) ) , R8) ))))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
let R8 being (Element of ( Nat_Lattice ));
set D1 = ( R7 "\/" R8 );
thus L41: ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( R6 "\/" D1 )
.= ( ( R6 "\/" R7 ) "\/" R8 ) by NEWTON:43
.= ( ( lcmlat ) . (( ( lcmlat ) . (R6 , R7) ) , R8) );
end;
theorem
L42: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (for R8 being (Element of ( Nat_Lattice )) holds (( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R7 , R6) ) , R8) ) & ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R6 , R8) ) , R7) ) & ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R8 , R7) ) , R6) ) & ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R8 , R6) ) , R7) )))))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
let R8 being (Element of ( Nat_Lattice ));
set D2 = ( R8 "\/" R7 );
thus L43: ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (( ( lcmlat ) . (R6 , R7) ) , R8) ) by L40
.= ( ( lcmlat ) . (( ( lcmlat ) . (R7 , R6) ) , R8) ) by L36;
thus L44: ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R8 , R7) )) ) by L36
.= ( ( lcmlat ) . (( ( lcmlat ) . (R6 , R8) ) , R7) ) by L40;
thus L45: ( ( lcmlat ) . (R6 , ( ( lcmlat ) . (R7 , R8) )) ) = ( ( lcmlat ) . (R6 , D2) ) by LATTICES:def 1
.= ( ( lcmlat ) . (( ( lcmlat ) . (R8 , R7) ) , R6) ) by L36;
thus L46: thesis by L44 , L36;
end;
theorem
L47: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (for R8 being (Element of ( Nat_Lattice )) holds ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R6 , R7) ) , R8) ))))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
let R8 being (Element of ( Nat_Lattice ));
set D3 = ( R7 "/\" R8 );
thus L48: ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( R6 "/\" D3 )
.= ( ( R6 "/\" R7 ) "/\" R8 ) by NEWTON:48
.= ( ( hcflat ) . (( ( hcflat ) . (R6 , R7) ) , R8) );
end;
theorem
L49: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (for R8 being (Element of ( Nat_Lattice )) holds (( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R7 , R6) ) , R8) ) & ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R6 , R8) ) , R7) ) & ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R8 , R7) ) , R6) ) & ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R8 , R6) ) , R7) )))))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
let R8 being (Element of ( Nat_Lattice ));
set D4 = ( R8 "/\" R7 );
thus L50: ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (( ( hcflat ) . (R6 , R7) ) , R8) ) by L47
.= ( ( hcflat ) . (( ( hcflat ) . (R7 , R6) ) , R8) ) by L38;
thus L51: ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (R6 , ( ( hcflat ) . (R8 , R7) )) ) by L38
.= ( ( hcflat ) . (( ( hcflat ) . (R6 , R8) ) , R7) ) by L47;
thus L52: ( ( hcflat ) . (R6 , ( ( hcflat ) . (R7 , R8) )) ) = ( ( hcflat ) . (R6 , D4) ) by LATTICES:def 2
.= ( ( hcflat ) . (( ( hcflat ) . (R8 , R7) ) , R6) ) by L38;
thus L53: thesis by L51 , L38;
end;
theorem
L54: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (( ( hcflat ) . (R7 , ( ( lcmlat ) . (R7 , R6) )) ) = R7 & ( ( hcflat ) . (( ( lcmlat ) . (R6 , R7) ) , R7) ) = R7 & ( ( hcflat ) . (R7 , ( ( lcmlat ) . (R6 , R7) )) ) = R7 & ( ( hcflat ) . (( ( lcmlat ) . (R7 , R6) ) , R7) ) = R7)))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
set D5 = ( R7 "\/" R6 );
thus L55: ( ( hcflat ) . (R7 , ( ( lcmlat ) . (R7 , R6) )) ) = ( R7 "/\" D5 )
.= R7 by NEWTON:54;
thus L56: ( ( hcflat ) . (( ( lcmlat ) . (R6 , R7) ) , R7) ) = ( ( hcflat ) . (( R6 "\/" R7 ) , R7) )
.= ( R7 "/\" ( R7 "\/" R6 ) ) by LATTICES:def 2
.= R7 by NEWTON:54;
thus L57: ( ( hcflat ) . (R7 , ( ( lcmlat ) . (R6 , R7) )) ) = R7 by L55 , L36;
thus L58: thesis by L56 , L36;
end;
theorem
L59: (for R6 being (Element of ( Nat_Lattice )) holds (for R7 being (Element of ( Nat_Lattice )) holds (( ( lcmlat ) . (R7 , ( ( hcflat ) . (R7 , R6) )) ) = R7 & ( ( lcmlat ) . (( ( hcflat ) . (R6 , R7) ) , R7) ) = R7 & ( ( lcmlat ) . (R7 , ( ( hcflat ) . (R6 , R7) )) ) = R7 & ( ( lcmlat ) . (( ( hcflat ) . (R7 , R6) ) , R7) ) = R7)))
proof
let R6 being (Element of ( Nat_Lattice ));
let R7 being (Element of ( Nat_Lattice ));
set D6 = ( R6 "/\" R7 );
thus L60: ( ( lcmlat ) . (R7 , ( ( hcflat ) . (R7 , R6) )) ) = ( ( lcmlat ) . (R7 , ( R7 "/\" R6 )) )
.= ( ( R6 "/\" R7 ) "\/" R7 ) by LATTICES:def 1
.= R7 by NEWTON:53;
thus L61: ( ( lcmlat ) . (( ( hcflat ) . (R6 , R7) ) , R7) ) = ( D6 "\/" R7 )
.= R7 by NEWTON:53;
thus L62: ( ( lcmlat ) . (R7 , ( ( hcflat ) . (R6 , R7) )) ) = R7 by L60 , L38;
thus L63: thesis by L61 , L38;
end;
definition
func NATPLUS -> (Subset of ( NAT )) means 
:L64: (for B8 being Nat holds (B8 in it iff ( 0 ) < B8));
existence
proof
defpred S1[ Nat ] means ( 0 ) < $1;
consider C13 being (Subset of ( NAT )) such that L65: (for B9 being (Element of ( NAT )) holds (B9 in C13 iff S1[ B9 ])) from SUBSET_1:sch 3;
take C13;
let C14 being Nat;
thus L66: (C14 in C13 implies ( 0 ) < C14) by L65;
L67: C14 in ( NAT ) by ORDINAL1:def 12;
thus L68: thesis by L67 , L65;
end;
uniqueness
proof
let C15 , C16 being (Subset of ( NAT ));
assume that
L69: (for B10 being Nat holds (B10 in C15 iff ( 0 ) < B10))
and
L70: (for B11 being Nat holds (B11 in C16 iff ( 0 ) < B11));
thus L71: C15 c= C16
proof
let C17 being set;
assume L72: C17 in C15;
reconsider D7 = C17 as Nat by L72;
L73: ( 0 ) < D7 by L69 , L72;
thus L74: thesis by L73 , L70;
end;

let C18 being set;
assume L75: C18 in C16;
reconsider D8 = C18 as Nat by L75;
L76: ( 0 ) < D8 by L70 , L75;
thus L77: thesis by L76 , L69;
end;
end;
registration
cluster ( NATPLUS ) -> non  empty;
coherence
proof
L79: ( 0 ) < 1;
thus L80: thesis by L79 , L64;
end;
end;
definition
let C19 being non  empty set;
let C20 being non  empty (Subset of C19);
let C21 being non  empty (Subset of C20);
redefine mode Element of C21
 -> (Element of C20);
coherence
proof
let C22 being (Element of C21);
thus L82: thesis;
end;
end;
registration
let C23 being (Subset of ( REAL ));
cluster  ->  real for (Element of C23);
coherence;
end;
registration
let C24 being (Subset of ( NAT ));
cluster  ->  real for (Element of C24);
coherence;
end;
definition
mode NatPlus
 is (Element of ( NATPLUS ));
end;
definition
let C25 being Nat;
assume that
L87: C25 > ( 0 );
func @ C25 -> NatPlus equals 
:L88: C25;
coherence by L87 , L64;
end;
registration
cluster  ->  natural non  zero for NatPlus;
coherence by L64;
end;
definition
func hcflatplus -> (BinOp of ( NATPLUS )) means 
:L91: (for R9 being NatPlus holds (for R10 being NatPlus holds ( it . (R9 , R10) ) = ( R9 gcd R10 )));
existence
proof
deffunc H3(NatPlus , NatPlus) = ( @ ( $1 gcd $2 ) );
consider C26 being (BinOp of ( NATPLUS )) such that L92: (for B12 , B13 being NatPlus holds ( C26 . (B12 , B13) ) = H3(B12 , B13)) from BINOP_1:sch 4;
take C26;
let C27 , C28 being NatPlus;
L93: ( C26 . (C27 , C28) ) = ( @ ( C27 gcd C28 ) ) by L92;
L94: C28 > ( 0 ) by L64;
thus L95: thesis by L94 , L93 , L88 , NEWTON:58;
end;
uniqueness
proof
deffunc H4(NatPlus , NatPlus) = ( $1 gcd $2 );
thus L96: (for B14 , B15 being (BinOp of ( NATPLUS )) holds (((for B16 , B17 being NatPlus holds ( B14 . (B16 , B17) ) = H4(B16 , B17)) & (for B18 , B19 being NatPlus holds ( B15 . (B18 , B19) ) = H4(B18 , B19))) implies B14 = B15)) from BINOP_2:sch 2;
end;
func lcmlatplus -> (BinOp of ( NATPLUS )) means 
:L97: (for R9 being NatPlus holds (for R10 being NatPlus holds ( it . (R9 , R10) ) = ( R9 lcm R10 )));
existence
proof
deffunc H5(NatPlus , NatPlus) = ( @ ( $1 lcm $2 ) );
consider C29 being (BinOp of ( NATPLUS )) such that L98: (for B20 , B21 being NatPlus holds ( C29 . (B20 , B21) ) = H5(B20 , B21)) from BINOP_1:sch 4;
take C29;
let C30 , C31 being NatPlus;
L99: (C30 > ( 0 ) & C31 > ( 0 )) by L64;
thus L100: ( C29 . (C30 , C31) ) = H5(C30 , C31) by L98
.= ( C30 lcm C31 ) by L99 , L88 , NEWTON:59;
end;
uniqueness
proof
deffunc H6(NatPlus , NatPlus) = ( $1 lcm $2 );
thus L101: (for B22 , B23 being (BinOp of ( NATPLUS )) holds (((for B24 , B25 being NatPlus holds ( B22 . (B24 , B25) ) = H6(B24 , B25)) & (for B26 , B27 being NatPlus holds ( B23 . (B26 , B27) ) = H6(B26 , B27))) implies B22 = B23)) from BINOP_2:sch 2;
end;
end;
definition
func NatPlus_Lattice ->  strict LattStr equals 
LattStr (# ( NATPLUS ) , ( lcmlatplus ) , ( hcflatplus ) #);
coherence;
end;
registration
cluster ( NatPlus_Lattice ) -> non  empty;
coherence;
end;
definition
let C32 being (Element of ( NatPlus_Lattice ));
func @ C32 -> NatPlus equals 
C32;
coherence;
end;
registration
cluster  ->  natural non  zero for (Element of ( NatPlus_Lattice ));
coherence;
end;
registration
let C33 , C34 being (Element of ( NatPlus_Lattice ));
identify C33 "\/" C34 with C33 lcm C34;
compatibility by L97;
identify C33 "/\" C34 with C33 gcd C34;
compatibility by L91;
end;
theorem
L108: (for R11 being (Element of ( NatPlus_Lattice )) holds (for R12 being (Element of ( NatPlus_Lattice )) holds ( R11 "\/" R12 ) = ( ( @ R11 ) lcm ( @ R12 ) )));
theorem
L109: (for R11 being (Element of ( NatPlus_Lattice )) holds (for R12 being (Element of ( NatPlus_Lattice )) holds ( R11 "/\" R12 ) = ( ( @ R11 ) gcd ( @ R12 ) )));
L110: ((for B28 , B29 being (Element of ( NatPlus_Lattice )) holds ( B28 "\/" B29 ) = ( B29 "\/" B28 )) & (for B30 , B31 , B32 being (Element of ( NatPlus_Lattice )) holds ( B30 "\/" ( B31 "\/" B32 ) ) = ( ( B30 "\/" B31 ) "\/" B32 ))) by NEWTON:43;
L111: ((for B33 , B34 being (Element of ( NatPlus_Lattice )) holds ( ( B33 "/\" B34 ) "\/" B34 ) = B34) & (for B35 , B36 being (Element of ( NatPlus_Lattice )) holds ( B35 "/\" B36 ) = ( B36 "/\" B35 ))) by NEWTON:53;
L112: ((for B37 , B38 , B39 being (Element of ( NatPlus_Lattice )) holds ( B37 "/\" ( B38 "/\" B39 ) ) = ( ( B37 "/\" B38 ) "/\" B39 )) & (for B40 , B41 being (Element of ( NatPlus_Lattice )) holds ( B40 "/\" ( B40 "\/" B41 ) ) = B40)) by NEWTON:48 , NEWTON:54;
registration
cluster ( NatPlus_Lattice ) ->  join-commutative  join-associative  meet-commutative  meet-associative  join-absorbing  meet-absorbing;
coherence by L110 , L111 , L112 , LATTICES:def 4 , LATTICES:def 5 , LATTICES:def 6 , LATTICES:def 7 , LATTICES:def 8 , LATTICES:def 9;
end;
L114:
now
let C35 being Lattice;
L115: [: (the carrier of C35) , (the carrier of C35) :] = ( dom (the L_join of C35) ) by FUNCT_2:def 1;
thus L116: (the L_join of C35) = ( (the L_join of C35) || (the carrier of C35) ) by L115 , RELAT_1:68;
L117: [: (the carrier of C35) , (the carrier of C35) :] = ( dom (the L_meet of C35) ) by FUNCT_2:def 1;
thus L118: (the L_meet of C35) = ( (the L_meet of C35) || (the carrier of C35) ) by L117 , RELAT_1:68;
end;
definition
let C36 being Lattice;
mode SubLattice of C36
 -> Lattice
means :L119: ((the carrier of it) c= (the carrier of C36) & (the L_join of it) = ( (the L_join of C36) || (the carrier of it) ) & (the L_meet of it) = ( (the L_meet of C36) || (the carrier of it) ));
existence
proof
take C36;
thus L120: thesis by L114;
end;
end;
registration
let C37 being Lattice;
cluster  strict for (SubLattice of C37);
existence
proof
set D9 = LattStr (# (the carrier of C37) , (the L_join of C37) , (the L_meet of C37) #);
L122:
now
let C38 , C39 , C40 being (Element of D9);
reconsider D10 = C38 , D11 = C39 , D12 = C40 as (Element of C37);
thus L123: ( C38 "\/" ( C39 "\/" C40 ) ) = ( D10 "\/" ( D11 "\/" D12 ) )
.= ( ( D10 "\/" D11 ) "\/" D12 ) by LATTICES:def 5
.= ( ( C38 "\/" C39 ) "\/" C40 );
end;
L124:
now
let C41 , C42 being (Element of D9);
reconsider D13 = C41 , D14 = C42 as (Element of C37);
thus L125: ( ( C41 "/\" C42 ) "\/" C42 ) = ( ( D13 "/\" D14 ) "\/" D14 )
.= C42 by LATTICES:def 8;
end;
L126:
now
let C43 , C44 being (Element of D9);
reconsider D15 = C43 , D16 = C44 as (Element of C37);
thus L127: ( C43 "/\" ( C43 "\/" C44 ) ) = ( D15 "/\" ( D15 "\/" D16 ) )
.= C43 by LATTICES:def 9;
end;
L128:
now
let C45 , C46 , C47 being (Element of D9);
reconsider D17 = C45 , D18 = C46 , D19 = C47 as (Element of C37);
thus L129: ( C45 "/\" ( C46 "/\" C47 ) ) = ( D17 "/\" ( D18 "/\" D19 ) )
.= ( ( D17 "/\" D18 ) "/\" D19 ) by LATTICES:def 7
.= ( ( C45 "/\" C46 ) "/\" C47 );
end;
L130: (for B42 , B43 being (Element of D9) holds (for B44 , B45 being (Element of C37) holds ((B42 = B44 & B43 = B45) implies (( B42 "\/" B43 ) = ( B44 "\/" B45 ) & ( B42 "/\" B43 ) = ( B44 "/\" B45 )))));
L131:
now
let C48 , C49 being (Element of D9);
reconsider D20 = C48 , D21 = C49 as (Element of C37);
thus L132: ( C48 "/\" C49 ) = ( D21 "/\" D20 ) by L130
.= ( C49 "/\" C48 );
end;
L133:
now
let C50 , C51 being (Element of D9);
reconsider D22 = C50 , D23 = C51 as (Element of C37);
thus L134: ( C50 "\/" C51 ) = ( D23 "\/" D22 ) by L130
.= ( C51 "\/" C50 );
end;
L135: D9 is  join-commutative  join-associative  meet-absorbing  meet-commutative  meet-associative  join-absorbing by L133 , L122 , L124 , L131 , L128 , L126 , LATTICES:def 4 , LATTICES:def 5 , LATTICES:def 6 , LATTICES:def 7 , LATTICES:def 8 , LATTICES:def 9;
reconsider D24 = D9 as Lattice by L135;
L136: ((the L_join of D24) = ( (the L_join of C37) || (the carrier of D24) ) & (the L_meet of D24) = ( (the L_meet of C37) || (the carrier of D24) )) by RELSET_1:19;
L137: D24 is (SubLattice of C37) by L136 , L119;
thus L138: thesis by L137;
end;
end;
theorem
L140: (for B46 being Lattice holds B46 is (SubLattice of B46))
proof
let C52 being Lattice;
thus L141: (the carrier of C52) c= (the carrier of C52);
thus L142: thesis by L114;
end;
theorem
L143: ( NatPlus_Lattice ) is (SubLattice of ( Nat_Lattice ))
proof
L144: (for B47 being set holds (B47 in ( dom ( hcflatplus ) ) implies ( ( hcflatplus ) . B47 ) = ( ( hcflat ) . B47 )))
proof
let C53 being set;
assume L145: C53 in ( dom ( hcflatplus ) );
L146: C53 in [: ( NATPLUS ) , ( NATPLUS ) :] by L145 , FUNCT_2:def 1;
consider C54 , C55 being set such that L147: [ C54 , C55 ] = C53 by L145 , RELAT_1:def 1;
L148: (C54 in ( NATPLUS ) & C55 in ( NATPLUS )) by L146 , L147 , ZFMISC_1:87;
reconsider D25 = C54 , D26 = C55 as Nat by L148;
L149: ( ( hcflat ) . (D25 , D26) ) = ( D25 gcd D26 ) by L1;
reconsider D27 = C54 , D28 = C55 as NatPlus by L146 , L147 , ZFMISC_1:87;
L150: ( ( hcflatplus ) . (D27 , D28) ) = ( ( hcflat ) . (D27 , D28) ) by L149 , L91;
thus L151: thesis by L150 , L147;
end;
L152: (( dom ( hcflatplus ) ) = [: ( NATPLUS ) , ( NATPLUS ) :] & ( dom ( hcflat ) ) = [: ( NAT ) , ( NAT ) :]) by FUNCT_2:def 1;
L153: ( dom ( hcflatplus ) ) = ( ( dom ( hcflat ) ) /\ [: ( NATPLUS ) , ( NATPLUS ) :] ) by L152 , XBOOLE_1:28 , ZFMISC_1:96;
L154: ( hcflatplus ) = ( ( hcflat ) || ( NATPLUS ) ) by L153 , L144 , FUNCT_1:46;
L155: (for B48 being set holds (B48 in ( dom ( lcmlatplus ) ) implies ( ( lcmlatplus ) . B48 ) = ( ( lcmlat ) . B48 )))
proof
let C56 being set;
assume L156: C56 in ( dom ( lcmlatplus ) );
L157: C56 in [: ( NATPLUS ) , ( NATPLUS ) :] by L156 , FUNCT_2:def 1;
consider C57 , C58 being set such that L158: [ C57 , C58 ] = C56 by L156 , RELAT_1:def 1;
L159: (C57 in ( NATPLUS ) & C58 in ( NATPLUS )) by L157 , L158 , ZFMISC_1:87;
reconsider D29 = C57 , D30 = C58 as Nat by L159;
L160: ( ( lcmlat ) . (D29 , D30) ) = ( D29 lcm D30 ) by L10;
reconsider D31 = C57 , D32 = C58 as NatPlus by L157 , L158 , ZFMISC_1:87;
L161: ( ( lcmlatplus ) . (D31 , D32) ) = ( ( lcmlat ) . (D31 , D32) ) by L160 , L97;
thus L162: thesis by L161 , L158;
end;
L163: (( dom ( lcmlatplus ) ) = [: ( NATPLUS ) , ( NATPLUS ) :] & ( dom ( lcmlat ) ) = [: ( NAT ) , ( NAT ) :]) by FUNCT_2:def 1;
L164: ( dom ( lcmlatplus ) ) = ( ( dom ( lcmlat ) ) /\ [: ( NATPLUS ) , ( NATPLUS ) :] ) by L163 , XBOOLE_1:28 , ZFMISC_1:96;
L165: ( lcmlatplus ) = ( ( lcmlat ) || ( NATPLUS ) ) by L164 , L155 , FUNCT_1:46;
thus L166: thesis by L165 , L154 , L119;
end;
