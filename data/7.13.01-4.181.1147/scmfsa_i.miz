:: The Instructions for SCM+FSA Computer
::  by Andrzej Trybulec , Yatsuka Nakamura and Piotr Rudnicki
::
:: Received February 3, 1996
:: Copyright (c) 1996-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, AMI_2, XBOOLE_0, TARSKI, CARD_1, FINSEQ_1,
      ZFMISC_1, RELAT_1, AMI_1, XXREAL_0, FUNCT_1, PARTFUN1, SCMFSA_1,
      RECDEF_2, UNIALG_1, AMISTD_2, VALUED_0, COMPOS_0;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, CARD_1, NUMBERS, MCART_1,
      RELAT_1, FUNCT_1, PARTFUN1, VALUED_0, FINSEQ_1, XXREAL_0, RECDEF_2,
      COMPOS_0, SCM_INST;
 constructors AMI_3, VALUED_0, XTUPLE_0;
 registrations XBOOLE_0, FUNCT_1, ORDINAL1, XREAL_0, FINSEQ_1, GR_CY_1,
      RELAT_1, COMPOS_0, SCM_INST, VALUED_0, XTUPLE_0;
 requirements NUMERALS, REAL, BOOLE, SUBSET;
 definitions TARSKI, XBOOLE_0, CARD_1, FINSEQ_1, MCART_1, COMPOS_0,
      XTUPLE_0;
 theorems ZFMISC_1, TARSKI, FINSEQ_1, FINSEQ_4, MCART_1, RELAT_1, XBOOLE_0,
      XBOOLE_1, NUMBERS, NAT_1, FUNCT_5, RECDEF_2, COMPOS_0, SCM_INST,
      XTUPLE_0;

begin
definition
func SCM+FSA-Data*-Loc equals
( ( INT ) \ ( NAT ) );
coherence;
end;
registration
cluster ( SCM+FSA-Data*-Loc ) -> non  empty;
coherence
proof
L2: (not ( INT ) c= ( NAT )) by NUMBERS:17 , NUMBERS:27 , XBOOLE_0:def 10;
thus L3: thesis by L2 , XBOOLE_1:37;
end;
end;
definition
func SCM+FSA-Instr -> non  empty set equals
( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } );
coherence;
end;
theorem
L6: ( SCM-Instr ) c= ( SCM+FSA-Instr )
proof
L7: ( SCM-Instr ) c= ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) by XBOOLE_1:7;
L8: ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) c= ( ( ( SCM-Instr ) \/ { [ R6 , ( {} ) , <* R14 , R17 , R11 *> ] where R6 is (Element of ( Segm 13 )) , R14 is (Element of ( SCM-Data-Loc )) , R11 is (Element of ( SCM-Data-Loc )) , R17 is (Element of ( SCM+FSA-Data*-Loc )) : R6 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } ) by XBOOLE_1:7;
L9: ( SCM-Instr ) c= ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } ) by L8 , L7 , XBOOLE_1:1;
thus L10: thesis by L9;
end;
L11: ( SCM+FSA-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :]
proof
let R1 being set;
assume L12: R1 in ( SCM+FSA-Instr );
per cases  by L12;
suppose L13: R1 in ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } );

per cases  by L13 , XBOOLE_0:def 3;
suppose L14: R1 in ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } );

per cases  by L14 , XBOOLE_0:def 3;
suppose L15: R1 in ( SCM-Instr );

L16: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] by L15 , SCM_INST:8;
L17: ( proj2 ( SCM-Instr ) ) c= ( proj2 ( SCM+FSA-Instr ) ) by L6 , XTUPLE_0:9;
L18: [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM-Instr ) ) :] c= [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L17 , MCART_1:73;
thus L19: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L18 , L16;
end;
suppose L20: R1 in { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } };

consider R5 being (Element of ( Segm 13 )), R12 being (Element of ( SCM-Data-Loc )), R9 being (Element of ( SCM-Data-Loc )), R15 being (Element of ( SCM+FSA-Data*-Loc )) such that L21: (R1 = [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] & R5 in { 9 , 10 }) by L20;
L22: ( {} ) in ( ( NAT ) * ) by FINSEQ_1:49;
L23: (R5 in ( NAT ) & <* R12 , R15 , R9 *> in ( proj2 ( SCM+FSA-Instr ) )) by L12 , L21 , XTUPLE_0:def 13;
thus L24: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L23 , L21 , L22 , MCART_1:69;
end;
end;
suppose L26: R1 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } };

consider R7 being (Element of ( Segm 13 )), R13 being (Element of ( SCM-Data-Loc )), R16 being (Element of ( SCM+FSA-Data*-Loc )) such that L27: (R1 = [ R7 , ( {} ) , <* R13 , R16 *> ] & R7 in { 11 , 12 }) by L26;
L28: ( {} ) in ( ( NAT ) * ) by FINSEQ_1:49;
L29: (R7 in ( NAT ) & <* R13 , R16 *> in ( proj2 ( SCM+FSA-Instr ) )) by L12 , L27 , XTUPLE_0:def 13;
thus L30: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L29 , L27 , L28 , MCART_1:69;
end;
end;
suppose L32: R1 in { [ 13 , ( {} ) , <* R10 *> ] where R10 is (Element of ( SCM-Data-Loc )) : (not contradiction) };

consider R10 being (Element of ( SCM-Data-Loc )) such that L33: R1 = [ 13 , ( {} ) , <* R10 *> ] by L32;
L34: ( {} ) in ( ( NAT ) * ) by FINSEQ_1:49;
L35: (for R7 being (Element of ( Segm 13 )) holds (R7 in ( NAT ) & <* R10 *> in ( proj2 ( SCM+FSA-Instr ) ))) by L12 , L33 , XTUPLE_0:def 13;
thus L36: R1 in [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L35 , L33 , L34 , MCART_1:69;
end;
end;
registration
cluster ( proj2 ( SCM+FSA-Instr ) ) ->  FinSequence-membered;
coherence
proof
let C1 being set;
assume L38: C1 in ( proj2 ( SCM+FSA-Instr ) );
consider C2 being set such that L39: [ C2 , C1 ] in ( SCM+FSA-Instr ) by L38 , XTUPLE_0:def 13;
set D1 = [ C2 , C1 ];
per cases  by L39;
suppose L40: D1 in ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R17 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R17 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } );

per cases  by L40 , XBOOLE_0:def 3;
suppose L41: D1 in ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R16 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } );

per cases  by L41 , XBOOLE_0:def 3;
suppose L42: D1 in ( SCM-Instr );

L43: C1 in ( proj2 ( SCM-Instr ) ) by L42 , XTUPLE_0:def 13;
thus L44: C1 is FinSequence by L43;
end;
suppose L45: D1 in { [ R5 , ( {} ) , <* R12 , R16 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } };

consider R5 being (Element of ( Segm 13 )), R12 being (Element of ( SCM-Data-Loc )), R9 being (Element of ( SCM-Data-Loc )), R16 being (Element of ( SCM+FSA-Data*-Loc )) such that L46: (D1 = [ R5 , ( {} ) , <* R12 , R16 , R9 *> ] & R5 in { 9 , 10 }) by L45;
L47: C1 = <* R12 , R16 , R9 *> by L46 , XTUPLE_0:1;
thus L48: C1 is FinSequence by L47;
end;
end;
suppose L50: D1 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } };

consider R7 being (Element of ( Segm 13 )), R13 being (Element of ( SCM-Data-Loc )), R16 being (Element of ( SCM+FSA-Data*-Loc )) such that L51: (D1 = [ R7 , ( {} ) , <* R13 , R16 *> ] & R7 in { 11 , 12 }) by L50;
L52: C1 = <* R13 , R16 *> by L51 , XTUPLE_0:1;
thus L53: C1 is FinSequence by L52;
end;
end;
suppose L55: D1 in { [ 13 , ( {} ) , <* R10 *> ] where R10 is (Element of ( SCM-Data-Loc )) : (not contradiction) };

consider R10 being (Element of ( SCM-Data-Loc )) such that L56: D1 = [ 13 , ( {} ) , <* R10 *> ] by L55;
L57: C1 = <* R10 *> by L56 , XTUPLE_0:1;
thus L58: C1 is FinSequence by L57;
end;
end;
end;
registration
cluster ( SCM+FSA-Instr ) ->  standard-ins non  empty;
coherence
proof
thus L61: ( SCM+FSA-Instr ) is  standard-ins
proof
consider C3 being non  empty set such that L62: ( proj2 ( SCM+FSA-Instr ) ) c= ( C3 * ) by FINSEQ_1:85;
take C3;
L63: [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] c= [: ( NAT ) , ( ( NAT ) * ) , ( C3 * ) :] by L62 , MCART_1:73;
thus L64: ( SCM+FSA-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( C3 * ) :] by L63 , L11 , XBOOLE_1:1;
end;

thus L65: thesis;
end;
end;
theorem
L67: (for B1 being (Element of ( SCM+FSA-Instr )) holds (( B1 `1_3 ) <= 8 implies B1 in ( SCM-Instr )))
proof
let C4 being (Element of ( SCM+FSA-Instr ));
assume that
L68: ( C4 `1_3 ) <= 8;
L69:
now
assume L70: C4 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } };
consider R7 being (Element of ( Segm 13 )), R12 being (Element of ( SCM-Data-Loc )), R15 being (Element of ( SCM+FSA-Data*-Loc )) such that L71: C4 = [ R7 , ( {} ) , <* R12 , R15 *> ] and L72: R7 in { 11 , 12 } by L70;
L73: ( C4 `1_3 ) = R7 by L71 , RECDEF_2:def 1;
L74: (( C4 `1_3 ) = 11 or ( C4 `1_3 ) = 12) by L73 , L72 , TARSKI:def 2;
thus L75: contradiction by L74 , L68;
end;
L76:
now
assume L77: C4 in { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } };
consider R5 being (Element of ( Segm 13 )), R12 being (Element of ( SCM-Data-Loc )), R9 being (Element of ( SCM-Data-Loc )), R15 being (Element of ( SCM+FSA-Data*-Loc )) such that L78: C4 = [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] and L79: R5 in { 9 , 10 } by L77;
L80: ( C4 `1_3 ) = R5 by L78 , RECDEF_2:def 1;
L81: (( C4 `1_3 ) = 9 or ( C4 `1_3 ) = 10) by L80 , L79 , TARSKI:def 2;
thus L82: contradiction by L81 , L68;
end;
L83:
now
assume L84: C4 in { [ 13 , ( {} ) , <* R10 *> ] where R10 is (Element of ( SCM-Data-Loc )) : (not contradiction) };
consider R10 being (Element of ( SCM-Data-Loc )) such that L85: C4 = [ 13 , ( {} ) , <* R10 *> ] by L84;
L86: ( C4 `1_3 ) = 13 by L85 , RECDEF_2:def 1;
thus L87: contradiction by L86 , L68;
end;
L88: (C4 in ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) or C4 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } or C4 in { [ 13 , ( {} ) , <* R10 *> ] where R10 is (Element of ( SCM-Data-Loc )) : (not contradiction) }) by XBOOLE_0:def 3;
thus L89: thesis by L88 , L69 , L76 , L83 , XBOOLE_0:def 3;
end;
theorem
L90: [ ( 0 ) , ( {} ) , ( {} ) ] in ( SCM+FSA-Instr ) by L6 , SCM_INST:1;
theorem
L91: (for R1 being set holds (for R9 being (Element of ( SCM-Data-Loc )) holds (for R12 being (Element of ( SCM-Data-Loc )) holds (for R15 being (Element of ( SCM+FSA-Data*-Loc )) holds (R1 in { 9 , 10 } implies [ R1 , ( {} ) , <* R12 , R15 , R9 *> ] in ( SCM+FSA-Instr ))))))
proof
let R1 being set;
let R9 being (Element of ( SCM-Data-Loc ));
let R12 being (Element of ( SCM-Data-Loc ));
let R15 being (Element of ( SCM+FSA-Data*-Loc ));
assume L92: R1 in { 9 , 10 };
L93: (R1 = 9 or R1 = 10) by L92 , TARSKI:def 2;
reconsider D2 = R1 as (Element of ( Segm 13 )) by L93 , NAT_1:44;
L94: [ D2 , ( {} ) , <* R12 , R15 , R9 *> ] in { [ R7 , ( {} ) , <* R13 , R16 , R10 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R10 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 9 , 10 } } by L92;
L95: [ D2 , ( {} ) , <* R12 , R15 , R9 *> ] in ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R13 , R16 , R10 *> ] where R5 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R10 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) by L94 , XBOOLE_0:def 3;
L96: [ D2 , ( {} ) , <* R12 , R15 , R9 *> ] in ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R13 , R16 , R10 *> ] where R5 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R10 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R14 , R17 *> ] where R7 is (Element of ( Segm 13 )) , R14 is (Element of ( SCM-Data-Loc )) , R17 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } ) by L95 , XBOOLE_0:def 3;
thus L97: thesis by L96;
end;
theorem
L98: (for R1 being set holds (for R12 being (Element of ( SCM-Data-Loc )) holds (for R15 being (Element of ( SCM+FSA-Data*-Loc )) holds (R1 in { 11 , 12 } implies [ R1 , ( {} ) , <* R12 , R15 *> ] in ( SCM+FSA-Instr )))))
proof
let R1 being set;
let R12 being (Element of ( SCM-Data-Loc ));
let R15 being (Element of ( SCM+FSA-Data*-Loc ));
assume L99: R1 in { 11 , 12 };
L100: (R1 = 11 or R1 = 12) by L99 , TARSKI:def 2;
reconsider D3 = R1 as (Element of ( Segm 13 )) by L100 , NAT_1:44;
L101: [ D3 , ( {} ) , <* R12 , R15 *> ] in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } by L99;
L102: [ D3 , ( {} ) , <* R12 , R15 *> ] in ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R14 , R17 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R14 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R17 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } ) by L101 , XBOOLE_0:def 3;
L103: [ D3 , ( {} ) , <* R12 , R15 *> ] in ( ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R14 , R17 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R14 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R17 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) \/ { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } ) by L102;
thus L104: thesis by L103;
end;
definition
let C5 being (Element of ( SCM+FSA-Instr ));
given R12 being (Element of ( SCM-Data-Loc )) , R15 being (Element of ( SCM+FSA-Data*-Loc )) , R9 being (Element of ( SCM-Data-Loc )) , R5 being (Element of ( Segm 13 )) such that
L105: C5 = [ R5 , ( {} ) , <* R12 , R15 , R9 *> ];

func C5 int_addr1 -> (Element of ( SCM-Data-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (ex R9 being (Element of ( SCM-Data-Loc )) st (<* R12 , R15 , R9 *> = ( C5 `3_3 ) & it = R12))));
existence
proof
take R12;
take R12;
take R15;
take R9;
thus L106: thesis by L105 , RECDEF_2:def 3;
end;
uniqueness
proof
let C6 , C7 being (Element of ( SCM-Data-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) , R16 being (Element of ( SCM+FSA-Data*-Loc )) , R10 being (Element of ( SCM-Data-Loc )) such that
L107: <* R13 , R16 , R10 *> = ( C5 `3_3 )
and
L108: C6 = R13;

given R14 being (Element of ( SCM-Data-Loc )) , R17 being (Element of ( SCM+FSA-Data*-Loc )) , R11 being (Element of ( SCM-Data-Loc )) such that
L109: (<* R14 , R17 , R11 *> = ( C5 `3_3 ) & C7 = R14);

thus L110: C6 = ( <* R13 , R16 , R10 *> . 1 ) by L108 , FINSEQ_1:45
.= C7 by L107 , L109 , FINSEQ_1:45;
end;
func C5 int_addr2 -> (Element of ( SCM-Data-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (ex R9 being (Element of ( SCM-Data-Loc )) st (<* R12 , R15 , R9 *> = ( C5 `3_3 ) & it = R9))));
existence
proof
take R9;
take R12;
take R15;
take R9;
thus L111: thesis by L105 , RECDEF_2:def 3;
end;
correctness
proof
let C8 , C9 being (Element of ( SCM-Data-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) , R16 being (Element of ( SCM+FSA-Data*-Loc )) , R10 being (Element of ( SCM-Data-Loc )) such that
L112: <* R13 , R16 , R10 *> = ( C5 `3_3 )
and
L113: C8 = R10;

given R14 being (Element of ( SCM-Data-Loc )) , R17 being (Element of ( SCM+FSA-Data*-Loc )) , R11 being (Element of ( SCM-Data-Loc )) such that
L114: (<* R14 , R17 , R11 *> = ( C5 `3_3 ) & C9 = R11);

thus L115: C8 = ( <* R13 , R16 , R10 *> . 3 ) by L113 , FINSEQ_1:45
.= C9 by L112 , L114 , FINSEQ_1:45;
end;
func C5 coll_addr1 -> (Element of ( SCM+FSA-Data*-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (ex R9 being (Element of ( SCM-Data-Loc )) st (<* R12 , R15 , R9 *> = ( C5 `3_3 ) & it = R15))));
existence
proof
take R15;
take R12;
take R15;
take R9;
thus L116: thesis by L105 , RECDEF_2:def 3;
end;
correctness
proof
let C10 , C11 being (Element of ( SCM+FSA-Data*-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) , R16 being (Element of ( SCM+FSA-Data*-Loc )) , R10 being (Element of ( SCM-Data-Loc )) such that
L117: <* R13 , R16 , R10 *> = ( C5 `3_3 )
and
L118: C10 = R16;

given R14 being (Element of ( SCM-Data-Loc )) , R17 being (Element of ( SCM+FSA-Data*-Loc )) , R11 being (Element of ( SCM-Data-Loc )) such that
L119: (<* R14 , R17 , R11 *> = ( C5 `3_3 ) & C11 = R17);

thus L120: C10 = ( <* R13 , R16 , R10 *> . 2 ) by L118 , FINSEQ_1:45
.= C11 by L117 , L119 , FINSEQ_1:45;
end;
end;
definition
let C12 being (Element of ( SCM+FSA-Instr ));
given R12 being (Element of ( SCM-Data-Loc )) such that
L122: C12 = [ 13 , ( {} ) , <* R12 *> ];

func C12 int_addr -> (Element of ( SCM-Data-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (<* R12 *> = ( C12 `3_3 ) & it = R12));
existence
proof
take R12;
take R12;
thus L123: thesis by L122 , RECDEF_2:def 3;
end;
uniqueness
proof
let C13 , C14 being (Element of ( SCM-Data-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) such that
L124: <* R13 *> = ( C12 `3_3 )
and
L125: C13 = R13;

given R14 being (Element of ( SCM-Data-Loc )) such that
L126: (<* R14 *> = ( C12 `3_3 ) & C14 = R14);

thus L127: C13 = ( <* R13 *> /. 1 ) by L125 , FINSEQ_4:16
.= C14 by L124 , L126 , FINSEQ_4:16;
end;
end;
definition
let C15 being (Element of ( SCM+FSA-Instr ));
given R12 being (Element of ( SCM-Data-Loc )) , R15 being (Element of ( SCM+FSA-Data*-Loc )) , R5 being (Element of ( Segm 13 )) such that
L129: C15 = [ R5 , ( {} ) , <* R12 , R15 *> ];

func C15 int_addr3 -> (Element of ( SCM-Data-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (<* R12 , R15 *> = ( C15 `3_3 ) & it = R12)));
existence
proof
take R12;
take R12;
take R15;
thus L130: thesis by L129 , RECDEF_2:def 3;
end;
uniqueness
proof
let C16 , C17 being (Element of ( SCM-Data-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) , R16 being (Element of ( SCM+FSA-Data*-Loc )) such that
L131: <* R13 , R16 *> = ( C15 `3_3 )
and
L132: C16 = R13;

given R14 being (Element of ( SCM-Data-Loc )) , R17 being (Element of ( SCM+FSA-Data*-Loc )) such that
L133: (<* R14 , R17 *> = ( C15 `3_3 ) & C17 = R14);

thus L134: C16 = ( <* R13 , R16 *> . 1 ) by L132 , FINSEQ_1:44
.= C17 by L131 , L133 , FINSEQ_1:44;
end;
func C15 coll_addr2 -> (Element of ( SCM+FSA-Data*-Loc )) means
(ex R12 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (<* R12 , R15 *> = ( C15 `3_3 ) & it = R15)));
existence
proof
take R15;
take R12;
take R15;
thus L135: thesis by L129 , RECDEF_2:def 3;
end;
correctness
proof
let C18 , C19 being (Element of ( SCM+FSA-Data*-Loc ));
given R13 being (Element of ( SCM-Data-Loc )) , R16 being (Element of ( SCM+FSA-Data*-Loc )) such that
L136: <* R13 , R16 *> = ( C15 `3_3 )
and
L137: C18 = R16;

given R14 being (Element of ( SCM-Data-Loc )) , R17 being (Element of ( SCM+FSA-Data*-Loc )) such that
L138: (<* R14 , R17 *> = ( C15 `3_3 ) & C19 = R17);

thus L139: C18 = ( <* R13 , R16 *> . 2 ) by L137 , FINSEQ_1:44
.= C19 by L136 , L138 , FINSEQ_1:44;
end;
end;
theorem
L141: ( SCM+FSA-Instr ) c= [: ( NAT ) , ( ( NAT ) * ) , ( proj2 ( SCM+FSA-Instr ) ) :] by L11;
theorem
L142: (for B2 being (Element of ( SCM+FSA-Instr )) holds ((B2 in ( SCM-Instr ) & (( InsCode B2 ) = ( 0 ) or ( InsCode B2 ) = 1 or ( InsCode B2 ) = 2 or ( InsCode B2 ) = 3 or ( InsCode B2 ) = 4 or ( InsCode B2 ) = 5 or ( InsCode B2 ) = 6 or ( InsCode B2 ) = 7 or ( InsCode B2 ) = 8)) or (B2 in { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } & (( InsCode B2 ) = 9 or ( InsCode B2 ) = 10)) or (B2 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } & (( InsCode B2 ) = 11 or ( InsCode B2 ) = 12))))
proof
let C20 being (Element of ( SCM+FSA-Instr ));
L143: (C20 in ( ( SCM-Instr ) \/ { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } ) or C20 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } }) by XBOOLE_0:def 3;
per cases  by L143 , XBOOLE_0:def 3;
case L144: C20 in ( SCM-Instr );
L145: ( InsCode C20 ) <= 8 by L144 , SCM_INST:10;
thus L146: thesis by L145 , NAT_1:32;
end;
case L147: C20 in { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } };
consider R5 being (Element of ( Segm 13 )), R12 being (Element of ( SCM-Data-Loc )), R9 being (Element of ( SCM-Data-Loc )), R15 being (Element of ( SCM+FSA-Data*-Loc )) such that L148: C20 = [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] and L149: R5 in { 9 , 10 } by L147;
L150: ( InsCode C20 ) = R5 by L148 , RECDEF_2:def 1;
thus L151: thesis by L150 , L149 , TARSKI:def 2;
end;
case L152: C20 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } };
consider R7 being (Element of ( Segm 13 )), R13 being (Element of ( SCM-Data-Loc )), R16 being (Element of ( SCM+FSA-Data*-Loc )) such that L153: C20 = [ R7 , ( {} ) , <* R13 , R16 *> ] and L154: R7 in { 11 , 12 } by L152;
L155: ( InsCode C20 ) = R7 by L153 , RECDEF_2:def 1;
thus L156: thesis by L155 , L154 , TARSKI:def 2;
end;
end;
L158: (for B3 being (Element of ( SCM+FSA-Instr )) holds ( InsCode B3 ) <= 12)
proof
let C21 being (Element of ( SCM+FSA-Instr ));
L159: (( InsCode C21 ) = ( 0 ) or ( InsCode C21 ) = 1 or ( InsCode C21 ) = 2 or ( InsCode C21 ) = 3 or ( InsCode C21 ) = 4 or ( InsCode C21 ) = 5 or ( InsCode C21 ) = 6 or ( InsCode C21 ) = 7 or ( InsCode C21 ) = 8 or ( InsCode C21 ) = 9 or ( InsCode C21 ) = 10 or ( InsCode C21 ) = 11 or ( InsCode C21 ) = 12) by L142;
thus L160: thesis by L159;
end;
L161: (for B4 being (Element of ( SCM+FSA-Instr )) holds ((( InsCode B4 ) = 9 or ( InsCode B4 ) = 10) implies ( JumpPart B4 ) = ( {} )))
proof
let C22 being (Element of ( SCM+FSA-Instr ));
assume L162: (( InsCode C22 ) = 9 or ( InsCode C22 ) = 10);
L163: C22 in { [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] where R5 is (Element of ( Segm 13 )) , R12 is (Element of ( SCM-Data-Loc )) , R9 is (Element of ( SCM-Data-Loc )) , R15 is (Element of ( SCM+FSA-Data*-Loc )) : R5 in { 9 , 10 } } by L162 , L142;
L164: (ex R5 being (Element of ( Segm 13 )) st (ex R12 being (Element of ( SCM-Data-Loc )) st (ex R9 being (Element of ( SCM-Data-Loc )) st (ex R15 being (Element of ( SCM+FSA-Data*-Loc )) st (C22 = [ R5 , ( {} ) , <* R12 , R15 , R9 *> ] & R5 in { 9 , 10 }))))) by L163;
thus L165: thesis by L164 , RECDEF_2:def 2;
end;
L166: (for B5 being (Element of ( SCM+FSA-Instr )) holds ((( InsCode B5 ) = 11 or ( InsCode B5 ) = 12) implies ( JumpPart B5 ) = ( {} )))
proof
let C23 being (Element of ( SCM+FSA-Instr ));
assume L167: (( InsCode C23 ) = 11 or ( InsCode C23 ) = 12);
L168: C23 in { [ R7 , ( {} ) , <* R13 , R16 *> ] where R7 is (Element of ( Segm 13 )) , R13 is (Element of ( SCM-Data-Loc )) , R16 is (Element of ( SCM+FSA-Data*-Loc )) : R7 in { 11 , 12 } } by L167 , L142;
L169: (ex R7 being (Element of ( Segm 13 )) st (ex R13 being (Element of ( SCM-Data-Loc )) st (ex R16 being (Element of ( SCM+FSA-Data*-Loc )) st (C23 = [ R7 , ( {} ) , <* R13 , R16 *> ] & R7 in { 11 , 12 })))) by L168;
thus L170: thesis by L169 , RECDEF_2:def 2;
end;
registration
cluster ( SCM+FSA-Instr ) ->  homogeneous;
coherence
proof
let C24 , C25 being (Element of ( SCM+FSA-Instr ));
assume that
L171: ( InsCode C24 ) = ( InsCode C25 );
L172: ( InsCode C24 ) <= 12 by L158;
per cases  by L172 , NAT_1:36;
suppose L173: (( InsCode C24 ) = ( 0 ) or ( InsCode C24 ) = 1 or ( InsCode C24 ) = 2 or ( InsCode C24 ) = 3 or ( InsCode C24 ) = 4 or ( InsCode C24 ) = 5 or ( InsCode C24 ) = 6 or ( InsCode C24 ) = 7 or ( InsCode C24 ) = 8);

L174: (C24 in ( SCM-Instr ) & C25 in ( SCM-Instr )) by L173 , L171 , L142;
thus L175: thesis by L174 , L171 , COMPOS_0:def 5;
end;
suppose L176: (( InsCode C24 ) = 9 or ( InsCode C24 ) = 10);

L177: (( JumpPart C24 ) = ( {} ) & ( JumpPart C25 ) = ( {} )) by L176 , L171 , L161;
thus L178: thesis by L177;
end;
suppose L179: (( InsCode C24 ) = 11 or ( InsCode C24 ) = 12);

L180: (( JumpPart C24 ) = ( {} ) & ( JumpPart C25 ) = ( {} )) by L179 , L171 , L166;
thus L181: thesis by L180;
end;
end;
end;
L184: (for B6 being (Element of ( SCM+FSA-Instr )) holds (for B7 being (Element of ( SCM-Instr )) holds (B6 = B7 implies ( JumpParts ( InsCode B6 ) ) = ( JumpParts ( InsCode B7 ) ))))
proof
let C26 being (Element of ( SCM+FSA-Instr ));
let C27 being (Element of ( SCM-Instr ));
assume that
L185: C26 = C27;
thus L186: ( JumpParts ( InsCode C26 ) ) c= ( JumpParts ( InsCode C27 ) )
proof
let C28 being set;
assume L187: C28 in ( JumpParts ( InsCode C26 ) );
consider C29 being (Element of ( SCM+FSA-Instr )) such that L188: C28 = ( JumpPart C29 ) and L189: ( InsCode C29 ) = ( InsCode C26 ) by L187;
L190: ( InsCode C29 ) <= 8 by L185 , L189 , SCM_INST:10;
reconsider D4 = C29 as (Element of ( SCM-Instr )) by L190 , L67;
L191: ( InsCode D4 ) = ( InsCode C27 ) by L185 , L189;
thus L192: C28 in ( JumpParts ( InsCode C27 ) ) by L191 , L188;
end;

let C30 being set;
assume L193: C30 in ( JumpParts ( InsCode C27 ) );
consider C31 being (Element of ( SCM-Instr )) such that L194: C30 = ( JumpPart C31 ) and L195: ( InsCode C31 ) = ( InsCode C27 ) by L193;
L196: ( SCM-Instr ) c= ( SCM+FSA-Instr ) by L6;
L197: C31 in ( SCM-Instr );
L198: C31 in ( SCM+FSA-Instr ) by L197 , L196;
reconsider D5 = C31 as (Element of ( SCM+FSA-Instr )) by L198;
L199: ( InsCode D5 ) = ( InsCode C26 ) by L185 , L195;
thus L200: C30 in ( JumpParts ( InsCode C26 ) ) by L199 , L194;
end;
theorem
L201: (for R18 being (InsType of ( SCM+FSA-Instr )) holds ((R18 = 9 or R18 = 10) implies ( JumpParts R18 ) = { ( {} ) }))
proof
let R18 being (InsType of ( SCM+FSA-Instr ));
assume L202: (R18 = 9 or R18 = 10);
thus L203:now
let C32 being set;
assume L204: C32 in ( JumpParts R18 );
consider C33 being (Element of ( SCM+FSA-Instr )) such that L205: C32 = ( JumpPart C33 ) and L206: ( InsCode C33 ) = R18 by L204;
L207: C33 in { [ B8 , ( {} ) , <* B9 , B11 , B10 *> ] where B8 is (Element of ( Segm 13 )) , B9 is (Element of ( SCM-Data-Loc )) , B10 is (Element of ( SCM-Data-Loc )) , B11 is (Element of ( SCM+FSA-Data*-Loc )) : B8 in { 9 , 10 } } by L202 , L206 , L142;
consider C34 being (Element of ( Segm 13 )), C35 being (Element of ( SCM-Data-Loc )), C36 being (Element of ( SCM-Data-Loc )), C37 being (Element of ( SCM+FSA-Data*-Loc )) such that L208: (C33 = [ C34 , ( {} ) , <* C35 , C37 , C36 *> ] & C34 in { 9 , 10 }) by L207;
L209: C32 = ( {} ) by L205 , L208 , RECDEF_2:def 2;
thus L210: C32 in { ( {} ) } by L209 , TARSKI:def 1;
end;
set D6 = the (Element of ( SCM-Data-Loc ));
set D7 = the (Element of ( SCM+FSA-Data*-Loc ));
let C38 being set;
L211: R18 in { 9 , 10 } by L202 , TARSKI:def 2;
L212: [ R18 , ( {} ) , <* D6 , D7 , D6 *> ] in ( SCM+FSA-Instr ) by L211 , L91;
assume L213: C38 in { ( {} ) };
L214: C38 = ( {} ) by L213 , TARSKI:def 1;
L215: C38 = ( JumpPart [ R18 , ( {} ) , <* D6 , D7 , D6 *> ] ) by L214;
L216: ( InsCode [ R18 , ( {} ) , <* D6 , D7 , D6 *> ] ) = R18;
thus L217: thesis by L216 , L215 , L212;
end;
theorem
L218: (for R18 being (InsType of ( SCM+FSA-Instr )) holds ((R18 = 11 or R18 = 12) implies ( JumpParts R18 ) = { ( {} ) }))
proof
let R18 being (InsType of ( SCM+FSA-Instr ));
assume L219: (R18 = 11 or R18 = 12);
thus L220:now
let C39 being set;
assume L221: C39 in ( JumpParts R18 );
consider C40 being (Element of ( SCM+FSA-Instr )) such that L222: C39 = ( JumpPart C40 ) and L223: ( InsCode C40 ) = R18 by L221;
L224: C40 in { [ B12 , ( {} ) , <* B13 , B14 *> ] where B12 is (Element of ( Segm 13 )) , B13 is (Element of ( SCM-Data-Loc )) , B14 is (Element of ( SCM+FSA-Data*-Loc )) : B12 in { 11 , 12 } } by L219 , L223 , L142;
consider C41 being (Element of ( Segm 13 )), C42 being (Element of ( SCM-Data-Loc )), C43 being (Element of ( SCM+FSA-Data*-Loc )) such that L225: (C40 = [ C41 , ( {} ) , <* C42 , C43 *> ] & C41 in { 11 , 12 }) by L224;
L226: C39 = ( {} ) by L222 , L225 , RECDEF_2:def 2;
thus L227: C39 in { ( {} ) } by L226 , TARSKI:def 1;
end;
set D8 = the (Element of ( SCM-Data-Loc ));
set D9 = the (Element of ( SCM+FSA-Data*-Loc ));
let C44 being set;
L228: R18 in { 11 , 12 } by L219 , TARSKI:def 2;
L229: [ R18 , ( {} ) , <* D8 , D9 *> ] in ( SCM+FSA-Instr ) by L228 , L98;
assume L230: C44 in { ( {} ) };
L231: C44 = ( {} ) by L230 , TARSKI:def 1;
L232: C44 = ( JumpPart [ R18 , ( {} ) , <* D8 , D9 *> ] ) by L231;
L233: ( InsCode [ R18 , ( {} ) , <* D8 , D9 *> ] ) = R18;
thus L234: thesis by L233 , L232 , L229;
end;
registration
cluster ( SCM+FSA-Instr ) ->  J/A-independent;
coherence
proof
let C45 being (InsType of ( SCM+FSA-Instr ));
let C46 , C47 being  natural-valued Function;
assume that
L235: C46 in ( JumpParts C45 )
and
L236: ( dom C46 ) = ( dom C47 );
let C48 being set;
assume that
L237: [ C45 , C46 , C48 ] in ( SCM+FSA-Instr );
L238: C45 = ( InsCode [ C45 , C46 , C48 ] );
reconsider D10 = [ C45 , C46 , C48 ] as (Element of ( SCM+FSA-Instr )) by L237;
L239: ( InsCode D10 ) <= 12 by L158;
per cases  by L239 , L238 , NAT_1:36;
suppose L240: (( InsCode D10 ) = ( 0 ) or ( InsCode D10 ) = 1 or ( InsCode D10 ) = 2 or ( InsCode D10 ) = 3 or ( InsCode D10 ) = 4 or ( InsCode D10 ) = 5 or ( InsCode D10 ) = 6 or ( InsCode D10 ) = 7 or ( InsCode D10 ) = 8);

L241: ( InsCode D10 ) <= 8 by L240;
reconsider D11 = D10 as (Element of ( SCM-Instr )) by L241 , L67;
L242: C45 = ( InsCode D11 ) by L238;
L243: C45 in ( InsCodes ( SCM-Instr ) ) by L242;
reconsider D12 = C45 as (InsType of ( SCM-Instr )) by L243;
L244: [ D12 , C46 , C48 ] in ( SCM-Instr ) by L241 , L67;
L245: ( JumpParts D12 ) = ( JumpParts C45 ) by L242 , L184;
L246: [ D12 , C47 , C48 ] in ( SCM-Instr ) by L245 , L235 , L236 , L244 , COMPOS_0:def 7;
L247: [ C45 , C47 , C48 ] in ( SCM-Instr ) by L246;
thus L248: [ C45 , C47 , C48 ] in ( SCM+FSA-Instr ) by L247 , L6;
end;
suppose L249: (C45 = 9 or C45 = 10 or C45 = 11 or C45 = 12);

L250: ( JumpParts C45 ) = { ( 0 ) } by L249 , L201 , L218;
L251: C46 = ( 0 ) by L250 , L235 , TARSKI:def 1;
L252: C46 = C47 by L251 , L236;
thus L253: [ C45 , C47 , C48 ] in ( SCM+FSA-Instr ) by L252 , L237;
end;
end;
end;
registration
cluster ( SCM+FSA-Instr ) ->  with_halt;
coherence
proof
thus L256: [ ( 0 ) , ( {} ) , ( {} ) ] in ( SCM+FSA-Instr ) by L90;
end;
end;
