:: A First-Order Predicate Calculus.
:: Axiomatics, the Consequence Operation and a Concept of Proof
::  by Agata Darmochwa{\l}
::
:: Received May 25, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, XXREAL_0, ARYTM_3, XBOOLE_0, TARSKI, FINSET_1,
      CARD_1, MCART_1, ZFMISC_1, CQC_LANG, XBOOLEAN, BVFUNC_2, QC_LANG1,
      FUNCT_1, FINSEQ_1, NAT_1, RELAT_1, ORDINAL4, ARYTM_1, CQC_THE1;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, ORDINAL1, XCMPLX_0, FUNCT_1,
      NUMBERS, NAT_1, FINSET_1, FINSEQ_1, MCART_1, QC_LANG1, CQC_LANG,
      XXREAL_0;
 constructors XXREAL_0, XREAL_0, NAT_1, CQC_LANG, XTUPLE_0;
 registrations SUBSET_1, RELSET_1, FINSET_1, XXREAL_0, XREAL_0, FINSEQ_1,
      CQC_LANG, ORDINAL1, CARD_1, XTUPLE_0;
 requirements NUMERALS, REAL, BOOLE, SUBSET, ARITHM;
 definitions TARSKI, XBOOLE_0, XTUPLE_0;
 theorems TARSKI, ZFMISC_1, FINSET_1, FINSEQ_1, MCART_1, FUNCT_1, NAT_1,
      XBOOLE_0, XBOOLE_1, XREAL_1, XXREAL_0, ORDINAL1, RELAT_1;
 schemes NAT_1, FRAENKEL, XBOOLE_0;

begin
theorem
L1: (for R4 being (Element of ( NAT )) holds { R5 where R5 is (Element of ( NAT )) : R5 <= ( R4 + 1 ) } = ( { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } \/ { ( R4 + 1 ) } ))
proof
let R4 being (Element of ( NAT ));
thus L2: { R5 where R5 is (Element of ( NAT )) : R5 <= ( R4 + 1 ) } c= ( { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } \/ { ( R4 + 1 ) } )
proof
let R7 being set;
assume L3: R7 in { R5 where R5 is (Element of ( NAT )) : R5 <= ( R4 + 1 ) };
consider R5 being (Element of ( NAT )) such that L4: R5 = R7 and L5: R5 <= ( R4 + 1 ) by L3;
L6: (R5 <= R4 or R5 = ( R4 + 1 )) by L5 , NAT_1:8;
L7: (R7 in { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } or R7 in { ( R4 + 1 ) }) by L6 , L4 , TARSKI:def 1;
thus L8: thesis by L7 , XBOOLE_0:def 3;
end;

thus L9: ( { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } \/ { ( R4 + 1 ) } ) c= { R5 where R5 is (Element of ( NAT )) : R5 <= ( R4 + 1 ) }
proof
let R7 being set;
assume L10: R7 in ( { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } \/ { ( R4 + 1 ) } );
L11: (R7 in { R2 where R2 is (Element of ( NAT )) : R2 <= R4 } or R7 in { ( R4 + 1 ) }) by L10 , XBOOLE_0:def 3;
L12: ((ex R2 being (Element of ( NAT )) st (R7 = R2 & R2 <= R4)) or R7 = ( R4 + 1 )) by L11 , TARSKI:def 1;
L13:
now
given R2 being (Element of ( NAT )) such that
L14: R7 = R2
and
L15: R2 <= R4;

L16: R4 <= ( R4 + 1 ) by NAT_1:11;
L17: R2 <= ( R4 + 1 ) by L16 , L15 , XXREAL_0:2;
thus L18: thesis by L17 , L14;
end;
thus L19: thesis by L13 , L12;
end;

end;
theorem
L10: (for R4 being (Element of ( NAT )) holds { R5 where R5 is (Element of ( NAT )) : R5 <= R4 } is  finite)
proof
defpred S1[ (Element of ( NAT )) ] means { R5 where R5 is (Element of ( NAT )) : R5 <= $1 } is  finite;
L11: { R5 where R5 is (Element of ( NAT )) : R5 <= ( 0 ) } = { ( 0 ) }
proof
thus L12: { R5 where R5 is (Element of ( NAT )) : R5 <= ( 0 ) } c= { ( 0 ) }
proof
let R7 being set;
assume L13: R7 in { R5 where R5 is (Element of ( NAT )) : R5 <= ( 0 ) };
consider R5 being (Element of ( NAT )) such that L14: R5 = R7 and L15: R5 <= ( 0 ) by L13;
L16: R5 = ( 0 ) by L15 , NAT_1:3;
thus L17: thesis by L16 , L14 , TARSKI:def 1;
end;

thus L18: { ( 0 ) } c= { R5 where R5 is (Element of ( NAT )) : R5 <= ( 0 ) }
proof
let R7 being set;
assume L19: R7 in { ( 0 ) };
L20: R7 = ( 0 ) by L19 , TARSKI:def 1;
thus L21: thesis by L20;
end;

end;
L19: S1[ ( 0 ) ] by L11;
L20: (for R4 being (Element of ( NAT )) holds (S1[ R4 ] implies S1[ ( R4 + 1 ) ]))
proof
let R4 being (Element of ( NAT ));
assume L21: S1[ R4 ];
L22: { R6 where R6 is (Element of ( NAT )) : R6 <= ( R4 + 1 ) } = ( { R5 where R5 is (Element of ( NAT )) : R5 <= R4 } \/ { ( R4 + 1 ) } ) by L1;
thus L23: thesis by L22 , L21;
end;
thus L24: (for B1 being (Element of ( NAT )) holds S1[ B1 ]) from NAT_1:sch 1(L19 , L20);
end;
theorem
L25: (for R8 being set holds (for R9 being set holds (for R10 being set holds ((R8 is  finite & R8 c= [: R9 , R10 :]) implies (ex B2 , B3 being set st (B2 is  finite & B2 c= R9 & B3 is  finite & B3 c= R10 & R8 c= [: B2 , B3 :])))))) by FINSET_1:13;
theorem
L26: (for R8 being set holds (for R9 being set holds (for R10 being set holds ((R8 is  finite & R10 is  finite & R8 c= [: R9 , R10 :]) implies (ex B4 being set st (B4 is  finite & B4 c= R9 & R8 c= [: B4 , R10 :])))))) by FINSET_1:14;
definition
let R1 being QC-alphabet;
let R11 being (Subset of ( CQC-WFF R1 ));
attr R11 is  being_a_theory
means
:L27: (( VERUM R1 ) in R11 & (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds (( ( ( 'not' R15 ) => R15 ) => R15 ) in R11 & ( R15 => ( ( 'not' R15 ) => R16 ) ) in R11 & ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in R11 & ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in R11 & ((R15 in R11 & ( R15 => R16 ) in R11) implies R16 in R11) & ( ( All (R23 , R15) ) => R15 ) in R11 & ((( R15 => R16 ) in R11 & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in R11) & ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in R11) implies ( R22 . R24 ) in R11)))))))));
end;
theorem
L29: (for R1 being QC-alphabet holds (for R11 being (Subset of ( CQC-WFF R1 )) holds (for R12 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R12 is  being_a_theory) implies ( R11 /\ R12 ) is  being_a_theory))))
proof
let R1 being QC-alphabet;
let R11 being (Subset of ( CQC-WFF R1 ));
let R12 being (Subset of ( CQC-WFF R1 ));
assume that
L30: R11 is  being_a_theory
and
L31: R12 is  being_a_theory;
L32: (( VERUM R1 ) in R11 & ( VERUM R1 ) in R12) by L30 , L31 , L27;
thus L33: ( VERUM R1 ) in ( R11 /\ R12 ) by L32 , XBOOLE_0:def 4;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
L34: (( ( ( 'not' R15 ) => R15 ) => R15 ) in R11 & ( ( ( 'not' R15 ) => R15 ) => R15 ) in R12) by L30 , L31 , L27;
thus L35: ( ( ( 'not' R15 ) => R15 ) => R15 ) in ( R11 /\ R12 ) by L34 , XBOOLE_0:def 4;
L36: (( R15 => ( ( 'not' R15 ) => R16 ) ) in R11 & ( R15 => ( ( 'not' R15 ) => R16 ) ) in R12) by L30 , L31 , L27;
thus L37: ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( R11 /\ R12 ) by L36 , XBOOLE_0:def 4;
L38: (( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in R11 & ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in R12) by L30 , L31 , L27;
thus L39: ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( R11 /\ R12 ) by L38 , XBOOLE_0:def 4;
L40: (( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in R11 & ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in R12) by L30 , L31 , L27;
thus L41: ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( R11 /\ R12 ) by L40 , XBOOLE_0:def 4;
L42: ((R15 in R11 & ( R15 => R16 ) in R11) implies R16 in R11) by L30 , L27;
L43: ((R15 in R12 & ( R15 => R16 ) in R12) implies R16 in R12) by L31 , L27;
thus L44: ((R15 in ( R11 /\ R12 ) & ( R15 => R16 ) in ( R11 /\ R12 )) implies R16 in ( R11 /\ R12 )) by L43 , L42 , XBOOLE_0:def 4;
L45: (( ( All (R23 , R15) ) => R15 ) in R11 & ( ( All (R23 , R15) ) => R15 ) in R12) by L30 , L31 , L27;
thus L46: ( ( All (R23 , R15) ) => R15 ) in ( R11 /\ R12 ) by L45 , XBOOLE_0:def 4;
L47: ((( R15 => R16 ) in R11 & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in R11) by L30 , L27;
L48: ((( R15 => R16 ) in R12 & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in R12) by L31 , L27;
thus L49: ((( R15 => R16 ) in ( R11 /\ R12 ) & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in ( R11 /\ R12 )) by L48 , L47 , XBOOLE_0:def 4;
L50: ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in R11) implies ( R22 . R24 ) in R11) by L30 , L27;
L51: ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in R12) implies ( R22 . R24 ) in R12) by L31 , L27;
thus L52: thesis by L51 , L50 , XBOOLE_0:def 4;
end;
definition
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
func Cn R13 -> (Subset of ( CQC-WFF R1 )) means 
:L53: (for R18 being (Element of ( CQC-WFF R1 )) holds (R18 in it iff (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies R18 in R11))));
existence
proof
defpred S2[ set ] means (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies $1 in R11));
consider C1 being set such that L54: (for R7 being set holds (R7 in C1 iff (R7 in ( CQC-WFF R1 ) & S2[ R7 ]))) from XBOOLE_0:sch 1;
L55: C1 c= ( CQC-WFF R1 )
proof
let R7 being set;
assume L56: R7 in C1;
thus L57: thesis by L56 , L54;
end;
reconsider D1 = C1 as (Subset of ( CQC-WFF R1 )) by L55;
take D1;
thus L58: thesis by L54;
end;
uniqueness
proof
let C2 , C3 being (Subset of ( CQC-WFF R1 ));
assume that
L59: (for R18 being (Element of ( CQC-WFF R1 )) holds (R18 in C2 iff (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies R18 in R11))))
and
L60: (for R18 being (Element of ( CQC-WFF R1 )) holds (R18 in C3 iff (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies R18 in R11))));
L61: (for R7 being set holds (R7 in C2 iff R7 in C3))
proof
let R7 being set;
thus L62: (R7 in C2 implies R7 in C3)
proof
assume L63: R7 in C2;
reconsider D2 = R7 as (Element of ( CQC-WFF R1 )) by L63;
L64: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies D2 in R11)) by L59 , L63;
thus L65: thesis by L64 , L60;
end;

thus L66: (R7 in C3 implies R7 in C2)
proof
assume L67: R7 in C3;
reconsider D3 = R7 as (Element of ( CQC-WFF R1 )) by L67;
L68: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies D3 in R11)) by L60 , L67;
thus L69: thesis by L68 , L59;
end;

end;
thus L67: thesis by L61 , TARSKI:1;
end;
end;
theorem
L69: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( VERUM R1 ) in ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
L70: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( VERUM R1 ) in R11)) by L27;
thus L71: thesis by L70 , L53;
end;
theorem
L72: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R15 ) => R15 ) => R15 ) in ( Cn R13 ))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
L73: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( ( ( 'not' R15 ) => R15 ) => R15 ) in R11)) by L27;
thus L74: thesis by L73 , L53;
end;
theorem
L75: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( Cn R13 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L76: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( R15 => ( ( 'not' R15 ) => R16 ) ) in R11)) by L27;
thus L77: thesis by L76 , L53;
end;
theorem
L78: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( Cn R13 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
L79: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in R11)) by L27;
thus L80: thesis by L79 , L53;
end;
theorem
L81: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( Cn R13 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L82: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in R11)) by L27;
thus L83: thesis by L82 , L53;
end;
theorem
L84: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ((R15 in ( Cn R13 ) & ( R15 => R16 ) in ( Cn R13 )) implies R16 in ( Cn R13 ))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
assume L85: (R15 in ( Cn R13 ) & ( R15 => R16 ) in ( Cn R13 ));
L86: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies R16 in R11))
proof
let R11 being (Subset of ( CQC-WFF R1 ));
assume that
L87: R11 is  being_a_theory
and
L88: R13 c= R11;
L89: (R15 in R11 & ( R15 => R16 ) in R11) by L85 , L87 , L88 , L53;
thus L90: thesis by L89 , L87 , L27;
end;
thus L91: thesis by L86 , L53;
end;
theorem
L92: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ( ( All (R23 , R15) ) => R15 ) in ( Cn R13 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
L93: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( ( All (R23 , R15) ) => R15 ) in R11)) by L27;
thus L94: thesis by L93 , L53;
end;
theorem
L95: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ((( R15 => R16 ) in ( Cn R13 ) & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in ( Cn R13 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
assume that
L96: ( R15 => R16 ) in ( Cn R13 )
and
L97: (not R23 in ( still_not-bound_in R15 ));
L98: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( R15 => ( All (R23 , R16) ) ) in R11))
proof
let R11 being (Subset of ( CQC-WFF R1 ));
assume that
L99: R11 is  being_a_theory
and
L100: R13 c= R11;
L101: ( R15 => R16 ) in R11 by L96 , L99 , L100 , L53;
thus L102: thesis by L101 , L97 , L99 , L27;
end;
thus L103: thesis by L98 , L53;
end;
theorem
L104: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in ( Cn R13 )) implies ( R22 . R24 ) in ( Cn R13 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
assume that
L105: ( R22 . R23 ) in ( CQC-WFF R1 )
and
L106: ( R22 . R24 ) in ( CQC-WFF R1 )
and
L107: (not R23 in ( still_not-bound_in R22 ))
and
L108: ( R22 . R23 ) in ( Cn R13 );
reconsider D4 = ( R22 . R23 ) as (Element of ( CQC-WFF R1 )) by L105;
reconsider D5 = ( R22 . R24 ) as (Element of ( CQC-WFF R1 )) by L106;
L109: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies D5 in R11))
proof
let R11 being (Subset of ( CQC-WFF R1 ));
assume that
L110: R11 is  being_a_theory
and
L111: R13 c= R11;
L112: D4 in R11 by L108 , L110 , L111 , L53;
thus L113: thesis by L112 , L107 , L110 , L27;
end;
thus L114: thesis by L109 , L53;
end;
theorem
L115: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( Cn R13 ) is  being_a_theory))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
thus L116: ( VERUM R1 ) in ( Cn R13 ) by L69;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
thus L117: (( ( ( 'not' R15 ) => R15 ) => R15 ) in ( Cn R13 ) & ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( Cn R13 ) & ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( Cn R13 ) & ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( Cn R13 ) & ((R15 in ( Cn R13 ) & ( R15 => R16 ) in ( Cn R13 )) implies R16 in ( Cn R13 ))) by L72 , L75 , L78 , L81 , L84;
thus L118: thesis by L92 , L95 , L104;
end;
theorem
L119: (for R1 being QC-alphabet holds (for R11 being (Subset of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies ( Cn R13 ) c= R11))))
proof
let R1 being QC-alphabet;
let R11 being (Subset of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
assume L120: (R11 is  being_a_theory & R13 c= R11);
thus L121: ( Cn R13 ) c= R11
proof
let R7 being set;
assume L122: R7 in ( Cn R13 );
thus L123: thesis by L122 , L120 , L53;
end;

end;
theorem
L122: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds R13 c= ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R7 being set;
assume L123: R7 in R13;
reconsider D6 = R7 as (Element of ( CQC-WFF R1 )) by L123;
L124: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies D6 in R11)) by L123;
thus L125: thesis by L124 , L53;
end;
theorem
L126: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R14 being (Subset of ( CQC-WFF R1 )) holds (R13 c= R14 implies ( Cn R13 ) c= ( Cn R14 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R14 being (Subset of ( CQC-WFF R1 ));
assume L127: R13 c= R14;
thus L128: ( Cn R13 ) c= ( Cn R14 )
proof
let R7 being set;
assume L129: R7 in ( Cn R13 );
reconsider D7 = R7 as (Element of ( CQC-WFF R1 )) by L129;
L130: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R14 c= R11) implies D7 in R11))
proof
let R11 being (Subset of ( CQC-WFF R1 ));
assume that
L131: R11 is  being_a_theory
and
L132: R14 c= R11;
L133: R13 c= R11 by L127 , L132 , XBOOLE_1:1;
thus L134: thesis by L133 , L129 , L131 , L53;
end;
thus L135: thesis by L130 , L53;
end;

end;
L129: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( Cn ( Cn R13 ) ) c= ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R7 being set;
assume L130: R7 in ( Cn ( Cn R13 ) );
reconsider D8 = R7 as (Element of ( CQC-WFF R1 )) by L130;
L131: (for R11 being (Subset of ( CQC-WFF R1 )) holds ((R11 is  being_a_theory & R13 c= R11) implies D8 in R11))
proof
let R11 being (Subset of ( CQC-WFF R1 ));
assume that
L132: R11 is  being_a_theory
and
L133: R13 c= R11;
L134: ( Cn R13 ) c= R11 by L132 , L133 , L119;
thus L135: thesis by L134 , L130 , L132 , L53;
end;
thus L136: thesis by L131 , L53;
end;
theorem
L137: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( Cn ( Cn R13 ) ) = ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
L138: (( Cn ( Cn R13 ) ) c= ( Cn R13 ) & ( Cn R13 ) c= ( Cn ( Cn R13 ) )) by L129 , L122;
thus L139: thesis by L138 , XBOOLE_0:def 10;
end;
theorem
L140: (for R1 being QC-alphabet holds (for R11 being (Subset of ( CQC-WFF R1 )) holds (R11 is  being_a_theory iff ( Cn R11 ) = R11)))
proof
let R1 being QC-alphabet;
let R11 being (Subset of ( CQC-WFF R1 ));
thus L141: (R11 is  being_a_theory implies ( Cn R11 ) = R11)
proof
assume L142: R11 is  being_a_theory;
L143: R11 c= ( Cn R11 ) by L122;
L144: ( Cn R11 ) c= R11
proof
let R7 being set;
assume L145: R7 in ( Cn R11 );
thus L146: thesis by L145 , L142 , L53;
end;
thus L147: thesis by L144 , L143 , XBOOLE_0:def 10;
end;

thus L148: thesis by L115;
end;
definition
func Proof_Step_Kinds -> set equals 
{ R5 where R5 is (Element of ( NAT )) : R5 <= 9 };
coherence;
end;
registration
cluster ( Proof_Step_Kinds ) -> non  empty;
coherence
proof
L150: 9 in { R5 where R5 is (Element of ( NAT )) : R5 <= 9 };
thus L151: thesis by L150;
end;
end;
theorem
L153: (( 0 ) in ( Proof_Step_Kinds ) & 1 in ( Proof_Step_Kinds ) & 2 in ( Proof_Step_Kinds ) & 3 in ( Proof_Step_Kinds ) & 4 in ( Proof_Step_Kinds ) & 5 in ( Proof_Step_Kinds ) & 6 in ( Proof_Step_Kinds ) & 7 in ( Proof_Step_Kinds ) & 8 in ( Proof_Step_Kinds ) & 9 in ( Proof_Step_Kinds ));
theorem
L154: ( Proof_Step_Kinds ) is  finite by L10;
theorem
L155: (for R1 being QC-alphabet holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (for B5 being Nat holds ((1 <= B5 & B5 <= ( len R25 )) implies (( ( R25 . B5 ) `2 ) = ( 0 ) or ( ( R25 . B5 ) `2 ) = 1 or ( ( R25 . B5 ) `2 ) = 2 or ( ( R25 . B5 ) `2 ) = 3 or ( ( R25 . B5 ) `2 ) = 4 or ( ( R25 . B5 ) `2 ) = 5 or ( ( R25 . B5 ) `2 ) = 6 or ( ( R25 . B5 ) `2 ) = 7 or ( ( R25 . B5 ) `2 ) = 8 or ( ( R25 . B5 ) `2 ) = 9)))))
proof
let R1 being QC-alphabet;
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
let C4 being Nat;
assume L156: (1 <= C4 & C4 <= ( len R25 ));
L157: ( dom R25 ) = ( Seg ( len R25 ) ) by FINSEQ_1:def 3;
L158: C4 in ( dom R25 ) by L157 , L156 , FINSEQ_1:1;
L159: (( rng R25 ) c= [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :] & ( R25 . C4 ) in ( rng R25 )) by L158 , FINSEQ_1:def 4 , FUNCT_1:def 3;
L160: ( ( R25 . C4 ) `2 ) in ( Proof_Step_Kinds ) by L159 , MCART_1:10;
L161: (ex R5 being (Element of ( NAT )) st (R5 = ( ( R25 . C4 ) `2 ) & R5 <= 9)) by L160;
thus L162: thesis by L161 , NAT_1:33;
end;
definition
let R1 being QC-alphabet;
let C5 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
let C6 being Nat;
let R13 being (Subset of ( CQC-WFF R1 ));
pred C5 , C6 is_a_correct_step_wrt R13
means
:L163: ( ( C5 . C6 ) `1 ) in R13 if ( ( C5 . C6 ) `2 ) = ( 0 ) , ( ( C5 . C6 ) `1 ) = ( VERUM R1 ) if ( ( C5 . C6 ) `2 ) = 1 , (ex R15 being (Element of ( CQC-WFF R1 )) st ( ( C5 . C6 ) `1 ) = ( ( ( 'not' R15 ) => R15 ) => R15 )) if ( ( C5 . C6 ) `2 ) = 2 , (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st ( ( C5 . C6 ) `1 ) = ( R15 => ( ( 'not' R15 ) => R16 ) ))) if ( ( C5 . C6 ) `2 ) = 3 , (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (ex R17 being (Element of ( CQC-WFF R1 )) st ( ( C5 . C6 ) `1 ) = ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) )))) if ( ( C5 . C6 ) `2 ) = 4 , (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st ( ( C5 . C6 ) `1 ) = ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ))) if ( ( C5 . C6 ) `2 ) = 5 , (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R23 being (bound_QC-variable of R1) st ( ( C5 . C6 ) `1 ) = ( ( All (R23 , R15) ) => R15 ))) if ( ( C5 . C6 ) `2 ) = 6 , (ex R2 being (Element of ( NAT )) st (ex R3 being (Element of ( NAT )) st (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (1 <= R2 & R2 < C6 & 1 <= R3 & R3 < R2 & R15 = ( ( C5 . R3 ) `1 ) & R16 = ( ( C5 . C6 ) `1 ) & ( ( C5 . R2 ) `1 ) = ( R15 => R16 )))))) if ( ( C5 . C6 ) `2 ) = 7 , (ex R2 being (Element of ( NAT )) st (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (ex R23 being (bound_QC-variable of R1) st (1 <= R2 & R2 < C6 & ( ( C5 . R2 ) `1 ) = ( R15 => R16 ) & (not R23 in ( still_not-bound_in R15 )) & ( ( C5 . C6 ) `1 ) = ( R15 => ( All (R23 , R16) ) )))))) if ( ( C5 . C6 ) `2 ) = 8 , (ex R2 being (Element of ( NAT )) st (ex R23 being (bound_QC-variable of R1) st (ex R24 being (bound_QC-variable of R1) st (ex R22 being (QC-formula of R1) st (1 <= R2 & R2 < C6 & ( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( C5 . R2 ) `1 ) & ( R22 . R24 ) = ( ( C5 . C6 ) `1 )))))) if ( ( C5 . C6 ) `2 ) = 9
;consistency;
end;
definition
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
pred R25 is_a_proof_wrt R13
means
:L165: (R25 <> ( {} ) & (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len R25 )) implies R25 , R4 is_a_correct_step_wrt R13)))
;end;
theorem
L167: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (R25 is_a_proof_wrt R13 implies ( rng R25 ) <> ( {} )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume L168: R25 is_a_proof_wrt R13;
L169: R25 <> ( {} ) by L168 , L165;
thus L170: thesis by L169 , RELAT_1:41;
end;
theorem
L171: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (R25 is_a_proof_wrt R13 implies 1 <= ( len R25 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume L172: R25 is_a_proof_wrt R13;
L173: R25 <> ( {} ) by L172 , L165;
L174: ( 0 ) <= ( len R25 ) by NAT_1:2;
L175: ( ( 0 ) + 1 ) <= ( len R25 ) by L174 , L173 , NAT_1:13;
thus L176: thesis by L175;
end;
theorem
L177: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (R25 is_a_proof_wrt R13 implies (( ( R25 . 1 ) `2 ) = ( 0 ) or ( ( R25 . 1 ) `2 ) = 1 or ( ( R25 . 1 ) `2 ) = 2 or ( ( R25 . 1 ) `2 ) = 3 or ( ( R25 . 1 ) `2 ) = 4 or ( ( R25 . 1 ) `2 ) = 5 or ( ( R25 . 1 ) `2 ) = 6)))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume L178: R25 is_a_proof_wrt R13;
L179: 1 <= ( len R25 ) by L178 , L171;
L180: R25 , 1 is_a_correct_step_wrt R13 by L179 , L178 , L165;
assume L181: ((not ( ( R25 . 1 ) `2 ) = ( 0 )) & (not ( ( R25 . 1 ) `2 ) = 1) & (not ( ( R25 . 1 ) `2 ) = 2) & (not ( ( R25 . 1 ) `2 ) = 3) & (not ( ( R25 . 1 ) `2 ) = 4) & (not ( ( R25 . 1 ) `2 ) = 5) & (not ( ( R25 . 1 ) `2 ) = 6));
per cases  by L179 , L181 , L155;
suppose L182: ( ( R25 . 1 ) `2 ) = 7;

L183: (ex R2 being (Element of ( NAT )) st (ex R3 being (Element of ( NAT )) st (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (1 <= R2 & R2 < 1 & 1 <= R3 & R3 < R2 & R15 = ( ( R25 . R3 ) `1 ) & R16 = ( ( R25 . 1 ) `1 ) & ( ( R25 . R2 ) `1 ) = ( R15 => R16 )))))) by L182 , L180 , L163;
thus L184: contradiction by L183;
end;
suppose L185: ( ( R25 . 1 ) `2 ) = 8;

L186: (ex R2 being (Element of ( NAT )) st (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (ex R23 being (bound_QC-variable of R1) st (1 <= R2 & R2 < 1 & ( ( R25 . R2 ) `1 ) = ( R15 => R16 ) & (not R23 in ( still_not-bound_in R15 )) & ( ( R25 . 1 ) `1 ) = ( R15 => ( All (R23 , R16) ) )))))) by L185 , L180 , L163;
thus L187: contradiction by L186;
end;
suppose L188: ( ( R25 . 1 ) `2 ) = 9;

L189: (ex R2 being (Element of ( NAT )) st (ex R23 being (bound_QC-variable of R1) st (ex R24 being (bound_QC-variable of R1) st (ex R22 being (QC-formula of R1) st (1 <= R2 & R2 < 1 & ( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( R25 . R2 ) `1 ) & ( ( R25 . 1 ) `1 ) = ( R22 . R24 )))))) by L188 , L180 , L163;
thus L190: contradiction by L189;
end;
end;
theorem
L192: (for R1 being QC-alphabet holds (for R4 being (Element of ( NAT )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (for R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds ((1 <= R4 & R4 <= ( len R25 )) implies (R25 , R4 is_a_correct_step_wrt R13 iff ( R25 ^ R26 ) , R4 is_a_correct_step_wrt R13)))))))
proof
let R1 being QC-alphabet;
let R4 being (Element of ( NAT ));
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
let R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume that
L193: 1 <= R4
and
L194: R4 <= ( len R25 );
L195: R4 in ( Seg ( len R25 ) ) by L193 , L194 , FINSEQ_1:1;
L196: R4 in ( dom R25 ) by L195 , FINSEQ_1:def 3;
L197: ( ( R25 ^ R26 ) . R4 ) = ( R25 . R4 ) by L196 , FINSEQ_1:def 7;
L198: ( len ( R25 ^ R26 ) ) = ( ( len R25 ) + ( len R26 ) ) by FINSEQ_1:22;
L199: ( len R25 ) <= ( len ( R25 ^ R26 ) ) by L198 , NAT_1:11;
L200: R4 <= ( len ( R25 ^ R26 ) ) by L199 , L194 , XXREAL_0:2;
thus L201: (R25 , R4 is_a_correct_step_wrt R13 implies ( R25 ^ R26 ) , R4 is_a_correct_step_wrt R13)
proof
assume L202: R25 , R4 is_a_correct_step_wrt R13;
per cases  by L193 , L200 , L155;
case L203: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = ( 0 );
thus L204: thesis by L203 , L197 , L202 , L163;
end;
case L205: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 1;
thus L206: thesis by L205 , L197 , L202 , L163;
end;
case L207: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 2;
thus L208: thesis by L207 , L197 , L202 , L163;
end;
case L209: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 3;
thus L210: thesis by L209 , L197 , L202 , L163;
end;
case L211: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 4;
thus L212: thesis by L211 , L197 , L202 , L163;
end;
case L213: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 5;
thus L214: thesis by L213 , L197 , L202 , L163;
end;
case L215: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 6;
thus L216: thesis by L215 , L197 , L202 , L163;
end;
case L217: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 7;
consider R2 being (Element of ( NAT )), R3 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )) such that L218: 1 <= R2 and L219: R2 < R4 and L220: 1 <= R3 and L221: R3 < R2 and L222: (R17 = ( ( R25 . R3 ) `1 ) & R18 = ( ( R25 . R4 ) `1 ) & ( ( R25 . R2 ) `1 ) = ( R17 => R18 )) by L217 , L197 , L202 , L163;
L223: R2 <= ( len R25 ) by L194 , L219 , XXREAL_0:2;
L224: R3 <= ( len R25 ) by L223 , L221 , XXREAL_0:2;
L225: R2 in ( Seg ( len R25 ) ) by L218 , L223 , FINSEQ_1:1;
L226: R3 in ( Seg ( len R25 ) ) by L220 , L224 , FINSEQ_1:1;
L227: R2 in ( dom R25 ) by L225 , FINSEQ_1:def 3;
L228: R3 in ( dom R25 ) by L226 , FINSEQ_1:def 3;
L229: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L227 , FINSEQ_1:def 7;
L230: ( R25 . R3 ) = ( ( R25 ^ R26 ) . R3 ) by L228 , FINSEQ_1:def 7;
thus L231: thesis by L230 , L197 , L218 , L219 , L220 , L221 , L222 , L229;
end;
case L232: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 8;
consider R2 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )), R23 being (bound_QC-variable of R1) such that L233: 1 <= R2 and L234: R2 < R4 and L235: (( ( R25 . R2 ) `1 ) = ( R17 => R18 ) & (not R23 in ( still_not-bound_in R17 )) & ( ( R25 . R4 ) `1 ) = ( R17 => ( All (R23 , R18) ) )) by L232 , L197 , L202 , L163;
L236: R2 <= ( len R25 ) by L194 , L234 , XXREAL_0:2;
L237: R2 in ( Seg ( len R25 ) ) by L236 , L233 , FINSEQ_1:1;
L238: R2 in ( dom R25 ) by L237 , FINSEQ_1:def 3;
L239: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L238 , FINSEQ_1:def 7;
thus L240: thesis by L239 , L197 , L233 , L234 , L235;
end;
case L241: ( ( ( R25 ^ R26 ) . R4 ) `2 ) = 9;
consider R2 being (Element of ( NAT )), R23 being (bound_QC-variable of R1), R24 being (bound_QC-variable of R1), R22 being (QC-formula of R1) such that L242: 1 <= R2 and L243: R2 < R4 and L244: (( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( R25 . R2 ) `1 ) & ( ( R25 . R4 ) `1 ) = ( R22 . R24 )) by L241 , L197 , L202 , L163;
L245: R2 <= ( len R25 ) by L194 , L243 , XXREAL_0:2;
L246: R2 in ( Seg ( len R25 ) ) by L245 , L242 , FINSEQ_1:1;
L247: R2 in ( dom R25 ) by L246 , FINSEQ_1:def 3;
L248: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L247 , FINSEQ_1:def 7;
thus L249: thesis by L248 , L197 , L242 , L243 , L244;
end;
end;

assume L251: ( R25 ^ R26 ) , R4 is_a_correct_step_wrt R13;
per cases  by L193 , L194 , L155;
case L252: ( ( R25 . R4 ) `2 ) = ( 0 );
thus L253: thesis by L252 , L197 , L251 , L163;
end;
case L254: ( ( R25 . R4 ) `2 ) = 1;
thus L255: thesis by L254 , L197 , L251 , L163;
end;
case L256: ( ( R25 . R4 ) `2 ) = 2;
thus L257: thesis by L256 , L197 , L251 , L163;
end;
case L258: ( ( R25 . R4 ) `2 ) = 3;
thus L259: thesis by L258 , L197 , L251 , L163;
end;
case L260: ( ( R25 . R4 ) `2 ) = 4;
thus L261: thesis by L260 , L197 , L251 , L163;
end;
case L262: ( ( R25 . R4 ) `2 ) = 5;
thus L263: thesis by L262 , L197 , L251 , L163;
end;
case L264: ( ( R25 . R4 ) `2 ) = 6;
thus L265: thesis by L264 , L197 , L251 , L163;
end;
case L266: ( ( R25 . R4 ) `2 ) = 7;
consider R2 being (Element of ( NAT )), R3 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )) such that L267: 1 <= R2 and L268: R2 < R4 and L269: 1 <= R3 and L270: R3 < R2 and L271: (R17 = ( ( ( R25 ^ R26 ) . R3 ) `1 ) & R18 = ( ( ( R25 ^ R26 ) . R4 ) `1 ) & ( ( ( R25 ^ R26 ) . R2 ) `1 ) = ( R17 => R18 )) by L266 , L197 , L251 , L163;
L272: R2 <= ( len R25 ) by L194 , L268 , XXREAL_0:2;
L273: R3 <= ( len R25 ) by L272 , L270 , XXREAL_0:2;
L274: R2 in ( Seg ( len R25 ) ) by L267 , L272 , FINSEQ_1:1;
L275: R3 in ( Seg ( len R25 ) ) by L269 , L273 , FINSEQ_1:1;
L276: R2 in ( dom R25 ) by L274 , FINSEQ_1:def 3;
L277: R3 in ( dom R25 ) by L275 , FINSEQ_1:def 3;
L278: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L276 , FINSEQ_1:def 7;
L279: ( R25 . R3 ) = ( ( R25 ^ R26 ) . R3 ) by L277 , FINSEQ_1:def 7;
thus L280: thesis by L279 , L197 , L267 , L268 , L269 , L270 , L271 , L278;
end;
case L281: ( ( R25 . R4 ) `2 ) = 8;
consider R2 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )), R23 being (bound_QC-variable of R1) such that L282: 1 <= R2 and L283: R2 < R4 and L284: (( ( ( R25 ^ R26 ) . R2 ) `1 ) = ( R17 => R18 ) & (not R23 in ( still_not-bound_in R17 )) & ( ( ( R25 ^ R26 ) . R4 ) `1 ) = ( R17 => ( All (R23 , R18) ) )) by L281 , L197 , L251 , L163;
L285: R2 <= ( len R25 ) by L194 , L283 , XXREAL_0:2;
L286: R2 in ( Seg ( len R25 ) ) by L285 , L282 , FINSEQ_1:1;
L287: R2 in ( dom R25 ) by L286 , FINSEQ_1:def 3;
L288: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L287 , FINSEQ_1:def 7;
thus L289: thesis by L288 , L197 , L282 , L283 , L284;
end;
case L290: ( ( R25 . R4 ) `2 ) = 9;
consider R2 being (Element of ( NAT )), R23 being (bound_QC-variable of R1), R24 being (bound_QC-variable of R1), R22 being (QC-formula of R1) such that L291: 1 <= R2 and L292: R2 < R4 and L293: (( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( ( R25 ^ R26 ) . R2 ) `1 ) & ( ( ( R25 ^ R26 ) . R4 ) `1 ) = ( R22 . R24 )) by L290 , L197 , L251 , L163;
L294: R2 <= ( len R25 ) by L194 , L292 , XXREAL_0:2;
L295: R2 in ( Seg ( len R25 ) ) by L294 , L291 , FINSEQ_1:1;
L296: R2 in ( dom R25 ) by L295 , FINSEQ_1:def 3;
L297: ( R25 . R2 ) = ( ( R25 ^ R26 ) . R2 ) by L296 , FINSEQ_1:def 7;
thus L298: thesis by L297 , L197 , L291 , L292 , L293;
end;
end;
theorem
L300: (for R1 being QC-alphabet holds (for R4 being (Element of ( NAT )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (for R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds ((1 <= R4 & R4 <= ( len R26 ) & R26 , R4 is_a_correct_step_wrt R13) implies ( R25 ^ R26 ) , ( R4 + ( len R25 ) ) is_a_correct_step_wrt R13))))))
proof
let R1 being QC-alphabet;
let R4 being (Element of ( NAT ));
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
let R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume that
L301: 1 <= R4
and
L302: R4 <= ( len R26 )
and
L303: R26 , R4 is_a_correct_step_wrt R13;
L304: R4 in ( Seg ( len R26 ) ) by L301 , L302 , FINSEQ_1:1;
L305: R4 in ( dom R26 ) by L304 , FINSEQ_1:def 3;
L306: ( R26 . R4 ) = ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) by L305 , FINSEQ_1:def 7;
L307: ( R4 + ( len R25 ) ) <= ( ( len R25 ) + ( len R26 ) ) by L302 , XREAL_1:6;
L308: ( R4 + ( len R25 ) ) <= ( len ( R25 ^ R26 ) ) by L307 , FINSEQ_1:22;
per cases  by L301 , L308 , L155 , NAT_1:12;
case L309: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = ( 0 );
thus L310: thesis by L309 , L303 , L306 , L163;
end;
case L311: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 1;
thus L312: thesis by L311 , L303 , L306 , L163;
end;
case L313: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 2;
thus L314: thesis by L313 , L303 , L306 , L163;
end;
case L315: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 3;
thus L316: thesis by L315 , L303 , L306 , L163;
end;
case L317: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 4;
thus L318: thesis by L317 , L303 , L306 , L163;
end;
case L319: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 5;
thus L320: thesis by L319 , L303 , L306 , L163;
end;
case L321: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 6;
thus L322: thesis by L321 , L303 , L306 , L163;
end;
case L323: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 7;
consider R2 being (Element of ( NAT )), R3 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )) such that L324: 1 <= R2 and L325: R2 < R4 and L326: 1 <= R3 and L327: R3 < R2 and L328: (R17 = ( ( R26 . R3 ) `1 ) & R18 = ( ( R26 . R4 ) `1 ) & ( ( R26 . R2 ) `1 ) = ( R17 => R18 )) by L323 , L303 , L306 , L163;
L329: (1 <= ( R2 + ( len R25 ) ) & ( R2 + ( len R25 ) ) < ( R4 + ( len R25 ) )) by L324 , L325 , NAT_1:12 , XREAL_1:6;
L330: (1 <= ( R3 + ( len R25 ) ) & ( R3 + ( len R25 ) ) < ( R2 + ( len R25 ) )) by L326 , L327 , NAT_1:12 , XREAL_1:6;
L331: R2 <= ( len R26 ) by L302 , L325 , XXREAL_0:2;
L332: R3 <= ( len R26 ) by L331 , L327 , XXREAL_0:2;
L333: R2 in ( Seg ( len R26 ) ) by L324 , L331 , FINSEQ_1:1;
L334: R3 in ( Seg ( len R26 ) ) by L326 , L332 , FINSEQ_1:1;
L335: R2 in ( dom R26 ) by L333 , FINSEQ_1:def 3;
L336: R3 in ( dom R26 ) by L334 , FINSEQ_1:def 3;
L337: ( R26 . R2 ) = ( ( R25 ^ R26 ) . ( R2 + ( len R25 ) ) ) by L335 , FINSEQ_1:def 7;
L338: ( R26 . R3 ) = ( ( R25 ^ R26 ) . ( R3 + ( len R25 ) ) ) by L336 , FINSEQ_1:def 7;
thus L339: thesis by L338 , L306 , L328 , L329 , L330 , L337;
end;
case L340: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 8;
consider R2 being (Element of ( NAT )), R17 being (Element of ( CQC-WFF R1 )), R18 being (Element of ( CQC-WFF R1 )), R23 being (bound_QC-variable of R1) such that L341: 1 <= R2 and L342: R2 < R4 and L343: (( ( R26 . R2 ) `1 ) = ( R17 => R18 ) & (not R23 in ( still_not-bound_in R17 )) & ( ( R26 . R4 ) `1 ) = ( R17 => ( All (R23 , R18) ) )) by L340 , L303 , L306 , L163;
L344: (1 <= ( ( len R25 ) + R2 ) & ( ( len R25 ) + R2 ) < ( R4 + ( len R25 ) )) by L341 , L342 , NAT_1:12 , XREAL_1:6;
L345: R2 <= ( len R26 ) by L302 , L342 , XXREAL_0:2;
L346: R2 in ( Seg ( len R26 ) ) by L345 , L341 , FINSEQ_1:1;
L347: R2 in ( dom R26 ) by L346 , FINSEQ_1:def 3;
L348: ( R26 . R2 ) = ( ( R25 ^ R26 ) . ( ( len R25 ) + R2 ) ) by L347 , FINSEQ_1:def 7;
thus L349: thesis by L348 , L306 , L343 , L344;
end;
case L350: ( ( ( R25 ^ R26 ) . ( R4 + ( len R25 ) ) ) `2 ) = 9;
consider R2 being (Element of ( NAT )), R23 being (bound_QC-variable of R1), R24 being (bound_QC-variable of R1), R22 being (QC-formula of R1) such that L351: 1 <= R2 and L352: R2 < R4 and L353: (( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( R26 . R2 ) `1 ) & ( ( R26 . R4 ) `1 ) = ( R22 . R24 )) by L350 , L303 , L306 , L163;
L354: (1 <= ( ( len R25 ) + R2 ) & ( ( len R25 ) + R2 ) < ( R4 + ( len R25 ) )) by L351 , L352 , NAT_1:12 , XREAL_1:6;
L355: R2 <= ( len R26 ) by L302 , L352 , XXREAL_0:2;
L356: R2 in ( Seg ( len R26 ) ) by L355 , L351 , FINSEQ_1:1;
L357: R2 in ( dom R26 ) by L356 , FINSEQ_1:def 3;
L358: ( R26 . R2 ) = ( ( R25 ^ R26 ) . ( ( len R25 ) + R2 ) ) by L357 , FINSEQ_1:def 7;
thus L359: thesis by L358 , L306 , L353 , L354;
end;
end;
theorem
L361: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (for R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds ((R25 is_a_proof_wrt R13 & R26 is_a_proof_wrt R13) implies ( R25 ^ R26 ) is_a_proof_wrt R13)))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
let R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume that
L362: R25 is_a_proof_wrt R13
and
L363: R26 is_a_proof_wrt R13;
L364: R25 <> ( {} ) by L362 , L165;
thus L365: ( R25 ^ R26 ) <> ( {} ) by L364;
let R4 being (Element of ( NAT ));
assume that
L366: 1 <= R4
and
L367: R4 <= ( len ( R25 ^ R26 ) );
L368:
now
per cases ;
suppose L369: R4 <= ( len R25 );

L370: R25 , R4 is_a_correct_step_wrt R13 by L369 , L362 , L366 , L165;
thus L371: thesis by L370 , L366 , L369 , L192;
end;
suppose L372: ( len R25 ) < R4;

reconsider D9 = ( R4 - ( len R25 ) ) as (Element of ( NAT )) by L372 , NAT_1:21;
L373: ( D9 + ( len R25 ) ) <= ( ( len R26 ) + ( len R25 ) ) by L367 , FINSEQ_1:22;
L374: ( ( len R25 ) + 1 ) <= ( D9 + ( len R25 ) ) by L372 , NAT_1:13;
L375: 1 <= D9 by L374 , XREAL_1:6;
L376: D9 <= ( len R26 ) by L373 , XREAL_1:6;
L377: (( D9 + ( len R25 ) ) = R4 & R26 , D9 is_a_correct_step_wrt R13) by L376 , L363 , L375 , L165;
thus L378: thesis by L377 , L375 , L376 , L300;
end;
end;
thus L380: thesis by L368;
end;
theorem
L381: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R14 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds ((R25 is_a_proof_wrt R13 & R13 c= R14) implies R25 is_a_proof_wrt R14)))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R14 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume that
L382: R25 is_a_proof_wrt R13
and
L383: R13 c= R14;
thus L384: R25 <> ( {} ) by L382 , L165;
let R4 being (Element of ( NAT ));
assume L385: (1 <= R4 & R4 <= ( len R25 ));
L386: R25 , R4 is_a_correct_step_wrt R13 by L385 , L382 , L165;
per cases  by L385 , L155;
case L387: ( ( R25 . R4 ) `2 ) = ( 0 );
L388: ( ( R25 . R4 ) `1 ) in R13 by L387 , L386 , L163;
thus L389: thesis by L388 , L383;
end;
case L390: ( ( R25 . R4 ) `2 ) = 1;
thus L391: thesis by L390 , L386 , L163;
end;
case L392: ( ( R25 . R4 ) `2 ) = 2;
thus L393: thesis by L392 , L386 , L163;
end;
case L394: ( ( R25 . R4 ) `2 ) = 3;
thus L395: thesis by L394 , L386 , L163;
end;
case L396: ( ( R25 . R4 ) `2 ) = 4;
thus L397: thesis by L396 , L386 , L163;
end;
case L398: ( ( R25 . R4 ) `2 ) = 5;
thus L399: thesis by L398 , L386 , L163;
end;
case L400: ( ( R25 . R4 ) `2 ) = 6;
thus L401: thesis by L400 , L386 , L163;
end;
case L402: ( ( R25 . R4 ) `2 ) = 7;
thus L403: thesis by L402 , L386 , L163;
end;
case L404: ( ( R25 . R4 ) `2 ) = 8;
thus L405: thesis by L404 , L386 , L163;
end;
case L406: ( ( R25 . R4 ) `2 ) = 9;
thus L407: thesis by L406 , L386 , L163;
end;
end;
theorem
L409: (for R1 being QC-alphabet holds (for R6 being (Element of ( NAT )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds ((R25 is_a_proof_wrt R13 & 1 <= R6 & R6 <= ( len R25 )) implies ( ( R25 . R6 ) `1 ) in ( Cn R13 ))))))
proof
let R1 being QC-alphabet;
let R6 being (Element of ( NAT ));
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume that
L410: R25 is_a_proof_wrt R13
and
L411: (1 <= R6 & R6 <= ( len R25 ));
L412: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len R25 )) implies ( ( R25 . R4 ) `1 ) in ( Cn R13 )))
proof
defpred S3[ Nat ] means ((1 <= $1 & $1 <= ( len R25 )) implies ( ( R25 . $1 ) `1 ) in ( Cn R13 ));
L413: (for B6 being Nat holds ((for B7 being Nat holds (B7 < B6 implies S3[ B7 ])) implies S3[ B6 ]))
proof
let C7 being Nat;
assume L414: (for B8 being Nat holds (B8 < C7 implies S3[ B8 ]));
L415: C7 in ( NAT ) by ORDINAL1:def 12;
assume that
L416: 1 <= C7
and
L417: C7 <= ( len R25 );
L418: R25 , C7 is_a_correct_step_wrt R13 by L410 , L415 , L416 , L417 , L165;
L419:
now
per cases  by L416 , L417 , L155;
suppose L420: ( ( R25 . C7 ) `2 ) = ( 0 );

L421: ( ( R25 . C7 ) `1 ) in R13 by L420 , L418 , L163;
L422: R13 c= ( Cn R13 ) by L122;
thus L423: thesis by L422 , L421;
end;
suppose L424: ( ( R25 . C7 ) `2 ) = 1;

L425: ( ( R25 . C7 ) `1 ) = ( VERUM R1 ) by L424 , L418 , L163;
thus L426: thesis by L425 , L69;
end;
suppose L427: ( ( R25 . C7 ) `2 ) = 2;

L428: (ex R15 being (Element of ( CQC-WFF R1 )) st ( ( R25 . C7 ) `1 ) = ( ( ( 'not' R15 ) => R15 ) => R15 )) by L427 , L418 , L163;
thus L429: thesis by L428 , L72;
end;
suppose L430: ( ( R25 . C7 ) `2 ) = 3;

L431: (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st ( ( R25 . C7 ) `1 ) = ( R15 => ( ( 'not' R15 ) => R16 ) ))) by L430 , L418 , L163;
thus L432: thesis by L431 , L75;
end;
suppose L433: ( ( R25 . C7 ) `2 ) = 4;

L434: (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st (ex R17 being (Element of ( CQC-WFF R1 )) st ( ( R25 . C7 ) `1 ) = ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) )))) by L433 , L418 , L163;
thus L435: thesis by L434 , L78;
end;
suppose L436: ( ( R25 . C7 ) `2 ) = 5;

L437: (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R16 being (Element of ( CQC-WFF R1 )) st ( ( R25 . C7 ) `1 ) = ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ))) by L436 , L418 , L163;
thus L438: thesis by L437 , L81;
end;
suppose L439: ( ( R25 . C7 ) `2 ) = 6;

L440: (ex R15 being (Element of ( CQC-WFF R1 )) st (ex R23 being (bound_QC-variable of R1) st ( ( R25 . C7 ) `1 ) = ( ( All (R23 , R15) ) => R15 ))) by L439 , L418 , L163;
thus L441: thesis by L440 , L92;
end;
suppose L442: ( ( R25 . C7 ) `2 ) = 7;

consider R2 being (Element of ( NAT )), R3 being (Element of ( NAT )), R15 being (Element of ( CQC-WFF R1 )), R16 being (Element of ( CQC-WFF R1 )) such that L443: 1 <= R2 and L444: R2 < C7 and L445: 1 <= R3 and L446: R3 < R2 and L447: (R15 = ( ( R25 . R3 ) `1 ) & R16 = ( ( R25 . C7 ) `1 ) & ( ( R25 . R2 ) `1 ) = ( R15 => R16 )) by L442 , L418 , L163;
L448: R3 < C7 by L444 , L446 , XXREAL_0:2;
L449: R2 <= ( len R25 ) by L417 , L444 , XXREAL_0:2;
L450: R3 <= ( len R25 ) by L449 , L446 , XXREAL_0:2;
L451: ( ( R25 . R3 ) `1 ) in ( Cn R13 ) by L450 , L414 , L445 , L448;
L452: ( ( R25 . R2 ) `1 ) in ( Cn R13 ) by L414 , L443 , L444 , L449;
thus L453: thesis by L452 , L447 , L451 , L84;
end;
suppose L454: ( ( R25 . C7 ) `2 ) = 8;

consider R2 being (Element of ( NAT )), R15 being (Element of ( CQC-WFF R1 )), R16 being (Element of ( CQC-WFF R1 )), R23 being (bound_QC-variable of R1) such that L455: 1 <= R2 and L456: R2 < C7 and L457: (( ( R25 . R2 ) `1 ) = ( R15 => R16 ) & (not R23 in ( still_not-bound_in R15 )) & ( ( R25 . C7 ) `1 ) = ( R15 => ( All (R23 , R16) ) )) by L454 , L418 , L163;
L458: R2 <= ( len R25 ) by L417 , L456 , XXREAL_0:2;
thus L459: thesis by L458 , L414 , L455 , L456 , L457 , L95;
end;
suppose L460: ( ( R25 . C7 ) `2 ) = 9;

consider R2 being (Element of ( NAT )), R23 being (bound_QC-variable of R1), R24 being (bound_QC-variable of R1), R22 being (QC-formula of R1) such that L461: 1 <= R2 and L462: R2 < C7 and L463: (( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) = ( ( R25 . R2 ) `1 ) & ( ( R25 . C7 ) `1 ) = ( R22 . R24 )) by L460 , L418 , L163;
L464: R2 <= ( len R25 ) by L417 , L462 , XXREAL_0:2;
thus L465: thesis by L464 , L414 , L461 , L462 , L463 , L104;
end;
end;
thus L467: thesis by L419;
end;
L468: (for B9 being Nat holds S3[ B9 ]) from NAT_1:sch 4(L413);
thus L469: thesis by L468;
end;
thus L470: thesis by L412 , L411;
end;
definition
let R1 being QC-alphabet;
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume L471: R25 <> ( {} );
func Effect R25 -> (Element of ( CQC-WFF R1 )) equals 
:L472: ( ( R25 . ( len R25 ) ) `1 );
coherence
proof
L473: ( 0 ) <= ( len R25 ) by NAT_1:2;
L474: ( ( 0 ) + 1 ) <= ( len R25 ) by L473 , L471 , NAT_1:13;
L475: ( len R25 ) in ( Seg ( len R25 ) ) by L474 , FINSEQ_1:1;
L476: ( Seg ( len R25 ) ) = ( dom R25 ) by FINSEQ_1:def 3;
L477: ( R25 . ( len R25 ) ) in ( rng R25 ) by L476 , L475 , FUNCT_1:def 3;
L478: ( rng R25 ) c= [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :] by FINSEQ_1:def 4;
thus L479: thesis by L478 , L477 , MCART_1:10;
end;
end;
theorem
L481: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) holds (R25 is_a_proof_wrt R13 implies ( Effect R25 ) in ( Cn R13 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]);
assume L482: R25 is_a_proof_wrt R13;
L483: 1 <= ( len R25 ) by L482 , L171;
L484: ( ( R25 . ( len R25 ) ) `1 ) in ( Cn R13 ) by L483 , L482 , L409;
L485: R25 <> ( {} ) by L483;
thus L486: thesis by L485 , L484 , L472;
end;
L487: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) } c= ( CQC-WFF R1 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
defpred S4[ set ] means (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = $1));
thus L488: { R15 where R15 is (Element of ( CQC-WFF R1 )) : S4[ R15 ] } c= ( CQC-WFF R1 ) from FRAENKEL:sch 10;
end;
theorem
L489: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds R13 c= { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R7 being set;
assume L490: R7 in R13;
reconsider D10 = R7 as (Element of ( CQC-WFF R1 )) by L490;
reconsider D11 = [ D10 , ( 0 ) ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D12 = <* D11 *>;
L491: ( len D12 ) = 1 by FINSEQ_1:40;
L492: ( D12 . 1 ) = D11 by FINSEQ_1:40;
L493: ( ( D12 . ( len D12 ) ) `1 ) = D10 by L492 , L491 , MCART_1:7;
L494: ( Effect D12 ) = D10 by L493 , L472;
L495: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D12 )) implies D12 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L496: (1 <= R4 & R4 <= ( len D12 ));
L497: R4 = 1 by L496 , L491 , XXREAL_0:1;
L498: ( ( D12 . 1 ) `2 ) = ( 0 ) by L492 , MCART_1:7;
L499: ( ( D12 . R4 ) `1 ) in R13 by L490 , L492 , L497 , MCART_1:7;
thus L500: thesis by L499 , L497 , L498 , L163;
end;
L501: D12 is_a_proof_wrt R13 by L495 , L165;
thus L502: thesis by L501 , L494;
end;
L503: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( VERUM R1 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D13 = [ ( VERUM R1 ) , 1 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D14 = <* D13 *>;
L504: ( len D14 ) = 1 by FINSEQ_1:40;
L505: ( D14 . 1 ) = D13 by FINSEQ_1:40;
L506: ( ( D14 . ( len D14 ) ) `1 ) = ( VERUM R1 ) by L505 , L504 , MCART_1:7;
L507: ( Effect D14 ) = ( VERUM R1 ) by L506 , L472;
L508: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D14 )) implies D14 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L509: (1 <= R4 & R4 <= ( len D14 ));
L510: R4 = 1 by L509 , L504 , XXREAL_0:1;
L511: ( ( D14 . 1 ) `2 ) = 1 by L505 , MCART_1:7;
L512: ( ( D14 . R4 ) `1 ) = ( VERUM R1 ) by L505 , L510 , MCART_1:7;
thus L513: thesis by L512 , L510 , L511 , L163;
end;
L514: D14 is_a_proof_wrt R13 by L508 , L165;
thus L515: thesis by L514 , L507;
end;
L516: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( ( ( 'not' R15 ) => R15 ) => R15 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) })))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D15 = [ ( ( ( 'not' R15 ) => R15 ) => R15 ) , 2 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D16 = <* D15 *>;
L517: ( len D16 ) = 1 by FINSEQ_1:40;
L518: ( D16 . 1 ) = D15 by FINSEQ_1:40;
L519: ( ( D16 . ( len D16 ) ) `1 ) = ( ( ( 'not' R15 ) => R15 ) => R15 ) by L518 , L517 , MCART_1:7;
L520: ( Effect D16 ) = ( ( ( 'not' R15 ) => R15 ) => R15 ) by L519 , L472;
L521: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D16 )) implies D16 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L522: (1 <= R4 & R4 <= ( len D16 ));
L523: R4 = 1 by L522 , L517 , XXREAL_0:1;
L524: ( ( D16 . 1 ) `2 ) = 2 by L518 , MCART_1:7;
L525: ( ( D16 . R4 ) `1 ) = ( ( ( 'not' R15 ) => R15 ) => R15 ) by L518 , L523 , MCART_1:7;
thus L526: thesis by L525 , L523 , L524 , L163;
end;
L527: D16 is_a_proof_wrt R13 by L521 , L165;
thus L528: thesis by L527 , L520;
end;
L529: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( R15 => ( ( 'not' R15 ) => R16 ) ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D17 = [ ( R15 => ( ( 'not' R15 ) => R16 ) ) , 3 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D18 = <* D17 *>;
L530: ( len D18 ) = 1 by FINSEQ_1:40;
L531: ( D18 . 1 ) = D17 by FINSEQ_1:40;
L532: ( ( D18 . ( len D18 ) ) `1 ) = ( R15 => ( ( 'not' R15 ) => R16 ) ) by L531 , L530 , MCART_1:7;
L533: ( Effect D18 ) = ( R15 => ( ( 'not' R15 ) => R16 ) ) by L532 , L472;
L534: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D18 )) implies D18 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L535: (1 <= R4 & R4 <= ( len D18 ));
L536: R4 = 1 by L535 , L530 , XXREAL_0:1;
L537: ( ( D18 . 1 ) `2 ) = 3 by L531 , MCART_1:7;
L538: ( ( D18 . R4 ) `1 ) = ( R15 => ( ( 'not' R15 ) => R16 ) ) by L531 , L536 , MCART_1:7;
thus L539: thesis by L538 , L536 , L537 , L163;
end;
L540: D18 is_a_proof_wrt R13 by L534 , L165;
thus L541: thesis by L540 , L533;
end;
L542: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) })))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D19 = [ ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) , 4 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D20 = <* D19 *>;
L543: ( len D20 ) = 1 by FINSEQ_1:40;
L544: ( D20 . 1 ) = D19 by FINSEQ_1:40;
L545: ( ( D20 . ( len D20 ) ) `1 ) = ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) by L544 , L543 , MCART_1:7;
L546: ( Effect D20 ) = ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) by L545 , L472;
L547: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D20 )) implies D20 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L548: (1 <= R4 & R4 <= ( len D20 ));
L549: R4 = 1 by L548 , L543 , XXREAL_0:1;
L550: ( ( D20 . 1 ) `2 ) = 4 by L544 , MCART_1:7;
L551: ( ( D20 . R4 ) `1 ) = ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) by L544 , L549 , MCART_1:7;
thus L552: thesis by L551 , L549 , L550 , L163;
end;
L553: D20 is_a_proof_wrt R13 by L547 , L165;
thus L554: thesis by L553 , L546;
end;
L555: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D21 = [ ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) , 5 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D22 = <* D21 *>;
L556: ( len D22 ) = 1 by FINSEQ_1:40;
L557: ( D22 . 1 ) = D21 by FINSEQ_1:40;
L558: ( ( D22 . ( len D22 ) ) `1 ) = ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) by L557 , L556 , MCART_1:7;
L559: ( Effect D22 ) = ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) by L558 , L472;
L560: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D22 )) implies D22 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L561: (1 <= R4 & R4 <= ( len D22 ));
L562: R4 = 1 by L561 , L556 , XXREAL_0:1;
L563: ( ( D22 . 1 ) `2 ) = 5 by L557 , MCART_1:7;
L564: ( ( D22 . R4 ) `1 ) = ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) by L557 , L562 , MCART_1:7;
thus L565: thesis by L564 , L562 , L563 , L163;
end;
L566: D22 is_a_proof_wrt R13 by L560 , L165;
thus L567: thesis by L566 , L559;
end;
L568: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ((R15 in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) } & ( R15 => R16 ) in { R21 where R21 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R21)) }) implies R16 in { R20 where R20 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R20)) })))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
assume that
L569: R15 in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }
and
L570: ( R15 => R16 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) };
L571: (ex R18 being (Element of ( CQC-WFF R1 )) st (R18 = R15 & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R18)))) by L569;
consider R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L572: R25 is_a_proof_wrt R13 and L573: ( Effect R25 ) = R15 by L571;
L574: (ex R17 being (Element of ( CQC-WFF R1 )) st (R17 = ( R15 => R16 ) & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R17)))) by L570;
consider R26 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L575: R26 is_a_proof_wrt R13 and L576: ( Effect R26 ) = ( R15 => R16 ) by L574;
L577: R25 <> ( {} ) by L572 , L165;
L578: R26 <> ( {} ) by L575 , L165;
reconsider D23 = [ R16 , 7 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D24 = ( ( R25 ^ R26 ) ^ <* D23 *> );
L579: ( len D24 ) = ( ( len ( R25 ^ R26 ) ) + ( len <* D23 *> ) ) by FINSEQ_1:22
.= ( ( len ( R25 ^ R26 ) ) + 1 ) by FINSEQ_1:40;
L580: ( len D24 ) = ( ( ( len R25 ) + ( len R26 ) ) + 1 ) by L579 , FINSEQ_1:22;
L581: ( D24 . ( len D24 ) ) = D23 by L579 , FINSEQ_1:42;
L582: ( ( D24 . ( len D24 ) ) `1 ) = R16 by L581 , MCART_1:7;
L583: ( Effect D24 ) = R16 by L582 , L472;
L584: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D24 )) implies D24 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume that
L585: 1 <= R4
and
L586: R4 <= ( len D24 );
L587:
now
per cases  by L580 , L586 , NAT_1:8;
suppose L588: R4 <= ( ( len R25 ) + ( len R26 ) );

L589: R4 <= ( len ( R25 ^ R26 ) ) by L588 , FINSEQ_1:22;
L590: ( R25 ^ R26 ) is_a_proof_wrt R13 by L572 , L575 , L361;
L591: ( R25 ^ R26 ) , R4 is_a_correct_step_wrt R13 by L590 , L585 , L589 , L165;
thus L592: thesis by L591 , L585 , L589 , L192;
end;
suppose L593: R4 = ( len D24 );

L594: ( D24 . R4 ) = D23 by L593 , L579 , FINSEQ_1:42;
L595: (( ( D24 . R4 ) `2 ) = 7 & ( ( D24 . R4 ) `1 ) = R16) by L594 , MCART_1:7;
L596: ( len R25 ) <> ( 0 ) by L572 , L171;
L597: ( len R25 ) in ( Seg ( len R25 ) ) by L596 , FINSEQ_1:3;
L598: ( len R25 ) in ( dom R25 ) by L597 , FINSEQ_1:def 3;
L599: D24 = ( R25 ^ ( R26 ^ <* D23 *> ) ) by FINSEQ_1:32;
L600: ( ( D24 . ( len R25 ) ) `1 ) = ( ( R25 . ( len R25 ) ) `1 ) by L599 , L598 , FINSEQ_1:def 7
.= R15 by L573 , L577 , L472;
L601: (( dom R26 ) = ( Seg ( len R26 ) ) & ( len R26 ) <> ( 0 )) by L575 , L171 , FINSEQ_1:def 3;
L602: ( len R26 ) in ( dom R26 ) by L601 , FINSEQ_1:3;
L603: (1 <= ( len R25 ) & ( len R25 ) <= ( ( len R25 ) + ( len R26 ) )) by L572 , L171 , NAT_1:11;
L604: ( ( len R25 ) + ( len R26 ) ) in ( Seg ( ( len R25 ) + ( len R26 ) ) ) by L603 , FINSEQ_1:3;
L605: ( ( len R25 ) + ( len R26 ) ) in ( Seg ( len ( R25 ^ R26 ) ) ) by L604 , FINSEQ_1:22;
L606: ( ( len R25 ) + ( len R26 ) ) in ( dom ( R25 ^ R26 ) ) by L605 , FINSEQ_1:def 3;
L607: ( ( D24 . ( ( len R25 ) + ( len R26 ) ) ) `1 ) = ( ( ( R25 ^ R26 ) . ( ( len R25 ) + ( len R26 ) ) ) `1 ) by L606 , FINSEQ_1:def 7
.= ( ( R26 . ( len R26 ) ) `1 ) by L602 , FINSEQ_1:def 7
.= ( R15 => R16 ) by L576 , L578 , L472;
L608: 1 <= ( len R26 ) by L575 , L171;
L609: ( ( len R25 ) + 1 ) <= ( ( len R25 ) + ( len R26 ) ) by L608 , XREAL_1:7;
L610: ( len R25 ) < ( ( len R25 ) + ( len R26 ) ) by L609 , NAT_1:13;
L611: (1 <= ( len R25 ) & 1 <= ( ( len R25 ) + ( len R26 ) )) by L572 , L171 , NAT_1:12;
L612: ( ( len R25 ) + ( len R26 ) ) < R4 by L580 , L593 , NAT_1:13;
thus L613: thesis by L612 , L595 , L600 , L607 , L610 , L611 , L163;
end;
end;
thus L615: thesis by L587;
end;
L616: D24 is_a_proof_wrt R13 by L584 , L165;
thus L617: thesis by L616 , L583;
end;
L618: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( ( All (R23 , R15) ) => R15 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
let R13 being (Subset of ( CQC-WFF R1 ));
reconsider D25 = [ ( ( All (R23 , R15) ) => R15 ) , 6 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D26 = <* D25 *>;
L619: ( len D26 ) = 1 by FINSEQ_1:40;
L620: ( D26 . 1 ) = D25 by FINSEQ_1:40;
L621: ( ( D26 . ( len D26 ) ) `1 ) = ( ( All (R23 , R15) ) => R15 ) by L620 , L619 , MCART_1:7;
L622: ( Effect D26 ) = ( ( All (R23 , R15) ) => R15 ) by L621 , L472;
L623: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D26 )) implies D26 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume L624: (1 <= R4 & R4 <= ( len D26 ));
L625: R4 = 1 by L624 , L619 , XXREAL_0:1;
L626: ( ( D26 . 1 ) `2 ) = 6 by L620 , MCART_1:7;
L627: ( ( D26 . R4 ) `1 ) = ( ( All (R23 , R15) ) => R15 ) by L620 , L625 , MCART_1:7;
thus L628: thesis by L627 , L625 , L626 , L163;
end;
L629: D26 is_a_proof_wrt R13 by L623 , L165;
thus L630: thesis by L629 , L622;
end;
L631: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ((( R15 => R16 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) } & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in { R21 where R21 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R21)) }))))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
let R13 being (Subset of ( CQC-WFF R1 ));
assume that
L632: ( R15 => R16 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }
and
L633: (not R23 in ( still_not-bound_in R15 ));
L634: (ex R18 being (Element of ( CQC-WFF R1 )) st (R18 = ( R15 => R16 ) & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R18)))) by L632;
consider R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L635: R25 is_a_proof_wrt R13 and L636: ( Effect R25 ) = ( R15 => R16 ) by L634;
L637: R25 <> ( {} ) by L635 , L165;
reconsider D27 = [ ( R15 => ( All (R23 , R16) ) ) , 8 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L153 , ZFMISC_1:87;
set D28 = ( R25 ^ <* D27 *> );
L638: ( len D28 ) = ( ( len R25 ) + ( len <* D27 *> ) ) by FINSEQ_1:22
.= ( ( len R25 ) + 1 ) by FINSEQ_1:39;
L639: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D28 )) implies D28 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume that
L640: 1 <= R4
and
L641: R4 <= ( len D28 );
L642:
now
per cases  by L638 , L641 , NAT_1:8;
suppose L643: R4 <= ( len R25 );

L644: R25 , R4 is_a_correct_step_wrt R13 by L643 , L635 , L640 , L165;
thus L645: thesis by L644 , L640 , L643 , L192;
end;
suppose L646: R4 = ( len D28 );

L647: ( D28 . R4 ) = D27 by L646 , L638 , FINSEQ_1:42;
L648: (( ( D28 . R4 ) `2 ) = 8 & ( ( D28 . R4 ) `1 ) = ( R15 => ( All (R23 , R16) ) )) by L647 , MCART_1:7;
L649: ( len R25 ) <> ( 0 ) by L635 , L171;
L650: ( len R25 ) in ( Seg ( len R25 ) ) by L649 , FINSEQ_1:3;
L651: ( len R25 ) in ( dom R25 ) by L650 , FINSEQ_1:def 3;
L652: ( ( D28 . ( len R25 ) ) `1 ) = ( ( R25 . ( len R25 ) ) `1 ) by L651 , FINSEQ_1:def 7
.= ( R15 => R16 ) by L636 , L637 , L472;
L653: 1 <= ( len R25 ) by L635 , L171;
L654: ( len R25 ) < R4 by L638 , L646 , NAT_1:13;
thus L655: thesis by L654 , L633 , L648 , L652 , L653 , L163;
end;
end;
thus L657: thesis by L642;
end;
L658: D28 is_a_proof_wrt R13 by L639 , L165;
L659: ( Effect D28 ) = ( ( D28 . ( ( len R25 ) + 1 ) ) `1 ) by L638 , L472
.= ( D27 `1 ) by FINSEQ_1:42
.= ( R15 => ( All (R23 , R16) ) ) by MCART_1:7;
thus L660: thesis by L659 , L658;
end;
L661: (for R1 being QC-alphabet holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) }) implies ( R22 . R24 ) in { R21 where R21 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R21)) }))))))
proof
let R1 being QC-alphabet;
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
let R13 being (Subset of ( CQC-WFF R1 ));
assume that
L662: (( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ))
and
L663: (not R23 in ( still_not-bound_in R22 ))
and
L664: ( R22 . R23 ) in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) };
L665: (ex R18 being (Element of ( CQC-WFF R1 )) st (R18 = ( R22 . R23 ) & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R18)))) by L664;
consider R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L666: R25 is_a_proof_wrt R13 and L667: ( Effect R25 ) = ( R22 . R23 ) by L665;
L668: R25 <> ( {} ) by L666 , L165;
reconsider D29 = [ ( R22 . R24 ) , 9 ] as (Element of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) by L662 , L153 , ZFMISC_1:87;
set D30 = ( R25 ^ <* D29 *> );
L669: ( len D30 ) = ( ( len R25 ) + ( len <* D29 *> ) ) by FINSEQ_1:22
.= ( ( len R25 ) + 1 ) by FINSEQ_1:39;
L670: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len D30 )) implies D30 , R4 is_a_correct_step_wrt R13))
proof
let R4 being (Element of ( NAT ));
assume that
L671: 1 <= R4
and
L672: R4 <= ( len D30 );
L673:
now
per cases  by L669 , L672 , NAT_1:8;
suppose L674: R4 <= ( len R25 );

L675: R25 , R4 is_a_correct_step_wrt R13 by L674 , L666 , L671 , L165;
thus L676: thesis by L675 , L671 , L674 , L192;
end;
suppose L677: R4 = ( len D30 );

L678: ( D30 . R4 ) = D29 by L677 , L669 , FINSEQ_1:42;
L679: (( ( D30 . R4 ) `2 ) = 9 & ( ( D30 . R4 ) `1 ) = ( R22 . R24 )) by L678 , MCART_1:7;
L680: ( len R25 ) <> ( 0 ) by L666 , L171;
L681: ( len R25 ) in ( Seg ( len R25 ) ) by L680 , FINSEQ_1:3;
L682: ( len R25 ) in ( dom R25 ) by L681 , FINSEQ_1:def 3;
L683: ( ( D30 . ( len R25 ) ) `1 ) = ( ( R25 . ( len R25 ) ) `1 ) by L682 , FINSEQ_1:def 7
.= ( R22 . R23 ) by L667 , L668 , L472;
L684: 1 <= ( len R25 ) by L666 , L171;
L685: ( len R25 ) < R4 by L669 , L677 , NAT_1:13;
thus L686: thesis by L685 , L662 , L663 , L679 , L683 , L684 , L163;
end;
end;
thus L688: thesis by L673;
end;
L689: D30 is_a_proof_wrt R13 by L670 , L165;
L690: ( Effect D30 ) = ( ( D30 . ( ( len R25 ) + 1 ) ) `1 ) by L669 , L472
.= ( D29 `1 ) by FINSEQ_1:42
.= ( R22 . R24 ) by MCART_1:7;
thus L691: thesis by L690 , L689;
end;
theorem
L692: (for R1 being QC-alphabet holds (for R14 being (Subset of ( CQC-WFF R1 )) holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (R14 = { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) } implies R14 is  being_a_theory))))
proof
let R1 being QC-alphabet;
let R14 being (Subset of ( CQC-WFF R1 ));
let R13 being (Subset of ( CQC-WFF R1 ));
assume L693: R14 = { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) };
thus L694: ( VERUM R1 ) in R14 by L693 , L503;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
thus L695: ( ( ( 'not' R15 ) => R15 ) => R15 ) in R14 by L693 , L516;
thus L696: ( R15 => ( ( 'not' R15 ) => R16 ) ) in R14 by L693 , L529;
thus L697: ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in R14 by L693 , L542;
thus L698: ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in R14 by L693 , L555;
thus L699: ((R15 in R14 & ( R15 => R16 ) in R14) implies R16 in R14) by L693 , L568;
thus L700: ( ( All (R23 , R15) ) => R15 ) in R14 by L693 , L618;
thus L701: ((( R15 => R16 ) in R14 & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in R14) by L693 , L631;
thus L702: thesis by L693 , L661;
end;
L703: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) } c= ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R7 being set;
assume L704: R7 in { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) };
L705: (ex R16 being (Element of ( CQC-WFF R1 )) st (R16 = R7 & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R16)))) by L704;
thus L706: thesis by L705 , L481;
end;
theorem
L707: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) } = ( Cn R13 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
set D31 = { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) };
L708: D31 c= ( Cn R13 ) by L703;
reconsider D32 = D31 as (Subset of ( CQC-WFF R1 )) by L487;
L709: R13 c= D32 by L489;
L710: ( Cn R13 ) c= { R15 where R15 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) } by L709 , L119 , L692;
thus L711: thesis by L710 , L708 , XBOOLE_0:def 10;
end;
theorem
L712: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (R15 in ( Cn R13 ) iff (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
thus L713: (R15 in ( Cn R13 ) implies (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)))
proof
assume L714: R15 in ( Cn R13 );
L715: R15 in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) } by L714 , L707;
L716: (ex R19 being (Element of ( CQC-WFF R1 )) st (R19 = R15 & (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)))) by L715;
thus L717: thesis by L716;
end;

thus L718: ((ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15)) implies R15 in ( Cn R13 ))
proof
given R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that
L719: (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R15);

L720: R15 in { R19 where R19 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt R13 & ( Effect R25 ) = R19)) } by L719;
thus L721: thesis by L720 , L707;
end;

end;
theorem
L719: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (R15 in ( Cn R13 ) implies (ex R14 being (Subset of ( CQC-WFF R1 )) st (R14 c= R13 & R14 is  finite & R15 in ( Cn R14 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
assume L720: R15 in ( Cn R13 );
consider R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L721: R25 is_a_proof_wrt R13 and L722: ( Effect R25 ) = R15 by L720 , L712;
L723: R25 <> ( {} ) by L721 , L165;
L724: ( rng R25 ) c= [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :] by FINSEQ_1:def 4;
consider C8 being set such that L725: C8 is  finite and L726: C8 c= ( CQC-WFF R1 ) and L727: ( rng R25 ) c= [: C8 , ( Proof_Step_Kinds ) :] by L724 , FINSET_1:14;
reconsider D33 = C8 as (Subset of ( CQC-WFF R1 )) by L726;
take D34 = ( D33 /\ R13 );
thus L728: D34 c= R13 by XBOOLE_1:17;
thus L729: D34 is  finite by L725;
L730: (for R4 being (Element of ( NAT )) holds ((1 <= R4 & R4 <= ( len R25 )) implies R25 , R4 is_a_correct_step_wrt D34))
proof
let R4 being (Element of ( NAT ));
assume L731: (1 <= R4 & R4 <= ( len R25 ));
L732: R25 , R4 is_a_correct_step_wrt R13 by L731 , L721 , L165;
per cases  by L731 , L155;
case L733: ( ( R25 . R4 ) `2 ) = ( 0 );
L734: ( ( R25 . R4 ) `1 ) in R13 by L733 , L732 , L163;
L735: R4 in ( Seg ( len R25 ) ) by L731 , FINSEQ_1:1;
L736: R4 in ( dom R25 ) by L735 , FINSEQ_1:def 3;
L737: ( R25 . R4 ) in ( rng R25 ) by L736 , FUNCT_1:def 3;
L738: ( ( R25 . R4 ) `1 ) in C8 by L737 , L727 , MCART_1:10;
thus L739: thesis by L738 , L734 , XBOOLE_0:def 4;
end;
case L740: ( ( R25 . R4 ) `2 ) = 1;
thus L741: thesis by L740 , L732 , L163;
end;
case L742: ( ( R25 . R4 ) `2 ) = 2;
thus L743: thesis by L742 , L732 , L163;
end;
case L744: ( ( R25 . R4 ) `2 ) = 3;
thus L745: thesis by L744 , L732 , L163;
end;
case L746: ( ( R25 . R4 ) `2 ) = 4;
thus L747: thesis by L746 , L732 , L163;
end;
case L748: ( ( R25 . R4 ) `2 ) = 5;
thus L749: thesis by L748 , L732 , L163;
end;
case L750: ( ( R25 . R4 ) `2 ) = 6;
thus L751: thesis by L750 , L732 , L163;
end;
case L752: ( ( R25 . R4 ) `2 ) = 7;
thus L753: thesis by L752 , L732 , L163;
end;
case L754: ( ( R25 . R4 ) `2 ) = 8;
thus L755: thesis by L754 , L732 , L163;
end;
case L756: ( ( R25 . R4 ) `2 ) = 9;
thus L757: thesis by L756 , L732 , L163;
end;
end;
L759: R25 is_a_proof_wrt D34 by L730 , L723 , L165;
L760: R15 in { R16 where R16 is (Element of ( CQC-WFF R1 )) : (ex R25 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) st (R25 is_a_proof_wrt D34 & ( Effect R25 ) = R16)) } by L759 , L722;
thus L761: thesis by L760 , L707;
end;
definition
let R1 being QC-alphabet;
func TAUT R1 -> (Subset of ( CQC-WFF R1 )) equals 
( Cn ( {} ( CQC-WFF R1 ) ) );
correctness;
end;
theorem
L763: (for R1 being QC-alphabet holds (for R11 being (Subset of ( CQC-WFF R1 )) holds (R11 is  being_a_theory implies ( TAUT R1 ) c= R11)))
proof
let R1 being QC-alphabet;
let R11 being (Subset of ( CQC-WFF R1 ));
assume L764: R11 is  being_a_theory;
L765: ( Cn ( {} ( CQC-WFF R1 ) ) ) c= ( Cn R11 ) by L126 , XBOOLE_1:2;
thus L766: thesis by L765 , L764 , L140;
end;
theorem
L767: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds ( TAUT R1 ) c= ( Cn R13 ))) by L115 , L763;
theorem
L768: (for R1 being QC-alphabet holds ( TAUT R1 ) is  being_a_theory) by L115;
theorem
L769: (for R1 being QC-alphabet holds ( VERUM R1 ) in ( TAUT R1 ))
proof
let R1 being QC-alphabet;
L770: ( TAUT R1 ) is  being_a_theory by L115;
thus L771: thesis by L770 , L27;
end;
theorem
L772: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R15 ) => R15 ) => R15 ) in ( TAUT R1 )))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
L773: ( TAUT R1 ) is  being_a_theory by L115;
thus L774: thesis by L773 , L27;
end;
theorem
L775: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L776: ( TAUT R1 ) is  being_a_theory by L115;
thus L777: thesis by L776 , L27;
end;
theorem
L778: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
L779: ( TAUT R1 ) is  being_a_theory by L115;
thus L780: thesis by L779 , L27;
end;
theorem
L781: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L782: ( TAUT R1 ) is  being_a_theory by L115;
thus L783: thesis by L782 , L27;
end;
theorem
L784: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ((R15 in ( TAUT R1 ) & ( R15 => R16 ) in ( TAUT R1 )) implies R16 in ( TAUT R1 )))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L785: ( TAUT R1 ) is  being_a_theory by L115;
thus L786: thesis by L785 , L27;
end;
theorem
L787: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ( ( All (R23 , R15) ) => R15 ) in ( TAUT R1 )))) by L92;
theorem
L788: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ((( R15 => R16 ) in ( TAUT R1 ) & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) in ( TAUT R1 )))))) by L95;
theorem
L789: (for R1 being QC-alphabet holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds ((( R22 . R23 ) in ( CQC-WFF R1 ) & ( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) in ( TAUT R1 )) implies ( R22 . R24 ) in ( TAUT R1 )))))) by L104;
definition
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
pred R13 |- R22
means
:L790: R22 in ( Cn R13 )
;end;
theorem
L792: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds R13 |- ( VERUM R1 )))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
L793: ( VERUM R1 ) in ( Cn R13 ) by L69;
thus L794: thesis by L793 , L790;
end;
theorem
L795: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds R13 |- ( ( ( 'not' R15 ) => R15 ) => R15 ))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
L796: ( ( ( 'not' R15 ) => R15 ) => R15 ) in ( Cn R13 ) by L72;
thus L797: thesis by L796 , L790;
end;
theorem
L798: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds R13 |- ( R15 => ( ( 'not' R15 ) => R16 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L799: ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( Cn R13 ) by L75;
thus L800: thesis by L799 , L790;
end;
theorem
L801: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds R13 |- ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
L802: ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( Cn R13 ) by L78;
thus L803: thesis by L802 , L790;
end;
theorem
L804: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds R13 |- ( ( R15 '&' R16 ) => ( R16 '&' R15 ) )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L805: ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( Cn R13 ) by L81;
thus L806: thesis by L805 , L790;
end;
theorem
L807: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ((R13 |- R15 & R13 |- ( R15 => R16 )) implies R13 |- R16)))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
assume L808: (R13 |- R15 & R13 |- ( R15 => R16 ));
L809: (R15 in ( Cn R13 ) & ( R15 => R16 ) in ( Cn R13 )) by L808 , L790;
L810: R16 in ( Cn R13 ) by L809 , L84;
thus L811: thesis by L810 , L790;
end;
theorem
L812: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds R13 |- ( ( All (R23 , R15) ) => R15 )))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
L813: ( ( All (R23 , R15) ) => R15 ) in ( Cn R13 ) by L92;
thus L814: thesis by L813 , L790;
end;
theorem
L815: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ((R13 |- ( R15 => R16 ) & (not R23 in ( still_not-bound_in R15 ))) implies R13 |- ( R15 => ( All (R23 , R16) ) )))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
assume that
L816: R13 |- ( R15 => R16 )
and
L817: (not R23 in ( still_not-bound_in R15 ));
L818: ( R15 => R16 ) in ( Cn R13 ) by L816 , L790;
L819: ( R15 => ( All (R23 , R16) ) ) in ( Cn R13 ) by L818 , L817 , L95;
thus L820: thesis by L819 , L790;
end;
theorem
L821: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds ((( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & R13 |- ( R22 . R23 )) implies R13 |- ( R22 . R24 )))))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
assume that
L822: (( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )))
and
L823: R13 |- ( R22 . R23 );
L824: ( R22 . R23 ) in ( Cn R13 ) by L823 , L790;
L825: ( R22 . R24 ) in ( Cn R13 ) by L824 , L822 , L104;
thus L826: thesis by L825 , L790;
end;
definition
let R1 being QC-alphabet;
let R22 being (QC-formula of R1);
attr R22 is  valid
means
:L827: ( {} ( CQC-WFF R1 ) ) |- R22;
end;
L829: (for R1 being QC-alphabet holds (for R22 being (QC-formula of R1) holds (R22 is  valid iff R22 in ( TAUT R1 ))))
proof
let R1 being QC-alphabet;
let R22 being (QC-formula of R1);
L830: (R22 is  valid iff ( {} ( CQC-WFF R1 ) ) |- R22) by L827;
thus L831: thesis by L830 , L790;
end;
definition
let R1 being QC-alphabet;
let R22 being (QC-formula of R1);
redefine attr R22 is  valid
means
R22 in ( TAUT R1 );
compatibility by L829;
end;
theorem
L833: (for R1 being QC-alphabet holds (for R13 being (Subset of ( CQC-WFF R1 )) holds (for R15 being (Element of ( CQC-WFF R1 )) holds (R15 is  valid implies R13 |- R15))))
proof
let R1 being QC-alphabet;
let R13 being (Subset of ( CQC-WFF R1 ));
let R15 being (Element of ( CQC-WFF R1 ));
assume L834: R15 is  valid;
L835: R15 in ( TAUT R1 ) by L834 , L829;
L836: ( TAUT R1 ) c= ( Cn R13 ) by L115 , L763;
thus L837: thesis by L836 , L835 , L790;
end;
theorem
L838: (for R1 being QC-alphabet holds ( VERUM R1 ) is  valid)
proof
let R1 being QC-alphabet;
L839: ( VERUM R1 ) in ( TAUT R1 ) by L769;
thus L840: thesis by L839 , L829;
end;
theorem
L841: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R15 ) => R15 ) => R15 ) is  valid))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
L842: ( ( ( 'not' R15 ) => R15 ) => R15 ) in ( TAUT R1 )
proof
L843: ( TAUT R1 ) is  being_a_theory by L115;
thus L844: thesis by L843 , L27;
end;
thus L845: thesis by L842 , L829;
end;
theorem
L846: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( R15 => ( ( 'not' R15 ) => R16 ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L847: ( R15 => ( ( 'not' R15 ) => R16 ) ) in ( TAUT R1 )
proof
L848: ( TAUT R1 ) is  being_a_theory by L115;
thus L849: thesis by L848 , L27;
end;
thus L850: thesis by L847 , L829;
end;
theorem
L851: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R17 being (Element of ( CQC-WFF R1 )) holds ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R17 being (Element of ( CQC-WFF R1 ));
L852: ( ( R15 => R16 ) => ( ( 'not' ( R16 '&' R17 ) ) => ( 'not' ( R15 '&' R17 ) ) ) ) in ( TAUT R1 )
proof
L853: ( TAUT R1 ) is  being_a_theory by L115;
thus L854: thesis by L853 , L27;
end;
thus L855: thesis by L852 , L829;
end;
theorem
L856: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L857: ( ( R15 '&' R16 ) => ( R16 '&' R15 ) ) in ( TAUT R1 )
proof
L858: ( TAUT R1 ) is  being_a_theory by L115;
thus L859: thesis by L858 , L27;
end;
thus L860: thesis by L857 , L829;
end;
theorem
L861: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds ((R15 is  valid & ( R15 => R16 ) is  valid) implies R16 is  valid))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
L862: ( TAUT R1 ) is  being_a_theory by L115;
assume L863: (R15 is  valid & ( R15 => R16 ) is  valid);
L864: (R15 in ( TAUT R1 ) & ( R15 => R16 ) in ( TAUT R1 )) by L863 , L829;
L865: R16 in ( TAUT R1 ) by L864 , L27 , L862;
thus L866: thesis by L865 , L829;
end;
theorem
L867: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ( ( All (R23 , R15) ) => R15 ) is  valid)))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
L868: ( ( All (R23 , R15) ) => R15 ) in ( TAUT R1 ) by L92;
thus L869: thesis by L868 , L829;
end;
theorem
L870: (for R1 being QC-alphabet holds (for R15 being (Element of ( CQC-WFF R1 )) holds (for R16 being (Element of ( CQC-WFF R1 )) holds (for R23 being (bound_QC-variable of R1) holds ((( R15 => R16 ) is  valid & (not R23 in ( still_not-bound_in R15 ))) implies ( R15 => ( All (R23 , R16) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R15 being (Element of ( CQC-WFF R1 ));
let R16 being (Element of ( CQC-WFF R1 ));
let R23 being (bound_QC-variable of R1);
assume that
L871: ( R15 => R16 ) is  valid
and
L872: (not R23 in ( still_not-bound_in R15 ));
L873: ( R15 => R16 ) in ( TAUT R1 ) by L871 , L829;
L874: ( R15 => ( All (R23 , R16) ) ) in ( TAUT R1 ) by L873 , L872 , L95;
thus L875: thesis by L874 , L829;
end;
theorem
L876: (for R1 being QC-alphabet holds (for R22 being (QC-formula of R1) holds (for R23 being (bound_QC-variable of R1) holds (for R24 being (bound_QC-variable of R1) holds ((( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )) & ( R22 . R23 ) is  valid) implies ( R22 . R24 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R22 being (QC-formula of R1);
let R23 being (bound_QC-variable of R1);
let R24 being (bound_QC-variable of R1);
assume that
L877: (( R22 . R24 ) in ( CQC-WFF R1 ) & (not R23 in ( still_not-bound_in R22 )))
and
L878: ( R22 . R23 ) is  valid;
L879: ( R22 . R23 ) in ( TAUT R1 ) by L878 , L829;
L880: ( R22 . R24 ) in ( TAUT R1 ) by L879 , L877 , L104;
thus L881: thesis by L880 , L829;
end;
