:: Insert Sort on SCMPDS
::  by JingChao Chen
::
:: Received June 14, 2000
:: Copyright (c) 2000-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SCMPDS_2, SUBSET_1, FINSEQ_1, FSM_1, XXREAL_0, FUNCT_1,
      SCMP_GCD, ARYTM_3, GRAPH_2, NAT_1, RELAT_1, CLASSES1, AMI_2, AMI_1,
      SCMFSA6B, SCMPDS_4, UNIALG_2, SCMFSA7B, TURING_1, SCMFSA_7, INT_1,
      CARD_1, SCMPDS_7, AMI_3, ARYTM_1, VALUED_1, TARSKI, FUNCT_4, CIRCUIT2,
      GRAPHSP, MSUALG_1, XBOOLE_0, SCMISORT, SCMFSA_9, SCMFSA8B, COMPLEX1,
      SCPISORT, ORDINAL1, EXTPRO_1, SCMFSA6C, COMPOS_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, CARD_1, NUMBERS, RELAT_1, FUNCT_1,
      VALUED_1, XCMPLX_0, FUNCT_4, INT_1, ORDINAL1, NAT_1, COMPLEX1, MEMSTR_0,
      EXTPRO_1, COMPOS_0, COMPOS_1, AMI_2, SCMPDS_2, SCMPDS_4, SCMPDS_5,
      SCMPDS_6, SCMP_GCD, DOMAIN_1, FINSEQ_1, SCMPDS_7, SCMPDS_8, GRAPH_2,
      CLASSES1, XXREAL_0;
 constructors DOMAIN_1, REAL_1, INT_2, SCM_1, SCMPDS_4, SCMPDS_5, SCMPDS_6,
      SCMP_GCD, SCMPDS_7, SCMPDS_8, CLASSES1, PRE_POLY, GRAPH_2, RELSET_1;
 registrations XXREAL_0, XREAL_0, NAT_1, INT_1, SCMPDS_2, SCMPDS_4, SCMPDS_5,
      SCMPDS_6, SCMPDS_7, SCMPDS_8, XBOOLE_0, VALUED_0, ORDINAL1, CARD_1,
      COMPOS_1, AFINSQ_1, FUNCT_4, MEMSTR_0, RELSET_1, AMI_3, COMPOS_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions SCMPDS_2, SCMP_GCD, AMI_3, COMPOS_1, EXTPRO_1, MEMSTR_0;
 theorems AMI_3, NAT_1, TARSKI, FUNCT_4, INT_1, SCMPDS_2, GRFUNC_1, SCMPDS_4,
      SCMPDS_5, SCMPDS_6, ENUMSET1, SCMP_GCD, SCMPDS_7, SCMPDS_8, ABSVALUE,
      FINSEQ_1, FINSEQ_2, RFINSEQ, XBOOLE_1, XREAL_1, ORDINAL1, XXREAL_0,
      GRAPH_2, ZFMISC_1, FINSEQ_3, CLASSES1, AFINSQ_1, COMPOS_1, EXTPRO_1,
      PBOOLE, MEMSTR_0, XTUPLE_0;
 schemes NAT_1, FINSEQ_1;

begin
definition
let C1 being (FinSequence of ( INT ));
let C2 being (State of ( SCMPDS ));
let C3 being (Element of ( NAT ));
pred C1 is_FinSequence_on C2 , C3
means
:L1: (for B1 being (Element of ( NAT )) holds ((1 <= B1 & B1 <= ( len C1 )) implies ( C1 . B1 ) = ( C2 . ( intpos ( C3 + B1 ) ) )))
;end;
theorem
L3: (for B2 being (State of ( SCMPDS )) holds (for B3 , B4 being (Element of ( NAT )) holds (ex B5 being (FinSequence of ( INT )) st (( len B5 ) = B3 & (for B6 being (Element of ( NAT )) holds ((1 <= B6 & B6 <= ( len B5 )) implies ( B5 . B6 ) = ( B2 . ( intpos ( B4 + B6 ) ) )))))))
proof
let C4 being (State of ( SCMPDS ));
let C5 , C6 being (Element of ( NAT ));
deffunc H1(Nat) = ( C4 . ( intpos ( C6 + $1 ) ) );
consider C7 being FinSequence such that L4: (( len C7 ) = C5 & (for B7 being Nat holds (B7 in ( dom C7 ) implies ( C7 . B7 ) = H1(B7)))) from FINSEQ_1:sch 2;
L5:
now
let C8 being Nat;
reconsider D1 = C8 as (Element of ( NAT )) by ORDINAL1:def 12;
assume L6: C8 in ( dom C7 );
L7: ( C7 . C8 ) = ( C4 . ( intpos ( C6 + D1 ) ) ) by L6 , L4;
thus L8: ( C7 . C8 ) in ( INT ) by L7 , INT_1:def 2;
end;
reconsider D2 = C7 as (FinSequence of ( INT )) by L5 , FINSEQ_2:12;
take D2;
thus L9: ( len D2 ) = C5 by L4;
thus L10:now
let C9 being (Element of ( NAT ));
assume L11: (1 <= C9 & C9 <= ( len D2 ));
L12: C9 in ( dom D2 ) by L11 , FINSEQ_3:25;
thus L13: ( D2 . C9 ) = ( C4 . ( intpos ( C6 + C9 ) ) ) by L12 , L4;
end;
end;
theorem
L11: (for B8 being (State of ( SCMPDS )) holds (for B9 , B10 being (Element of ( NAT )) holds (ex B11 being (FinSequence of ( INT )) st (( len B11 ) = B9 & B11 is_FinSequence_on B8 , B10))))
proof
let C10 being (State of ( SCMPDS ));
let C11 , C12 being (Element of ( NAT ));
consider C13 being (FinSequence of ( INT )) such that L12: ( len C13 ) = C11 and L13: (for B12 being (Element of ( NAT )) holds ((1 <= B12 & B12 <= ( len C13 )) implies ( C13 . B12 ) = ( C10 . ( intpos ( C12 + B12 ) ) ))) by L3;
take C13;
thus L14: ( len C13 ) = C11 by L12;
thus L15: thesis by L13 , L1;
end;
theorem
L16: (for B13 , B14 being (FinSequence of ( INT )) holds (for B15 , B16 being (Element of ( NAT )) holds ((1 <= B16 & B16 <= ( len B13 ) & 1 <= B15 & B15 <= ( len B13 ) & ( len B13 ) = ( len B14 ) & ( B13 . B15 ) = ( B14 . B16 ) & ( B13 . B16 ) = ( B14 . B15 ) & (for B17 being (Element of ( NAT )) holds ((B17 <> B15 & B17 <> B16 & 1 <= B17 & B17 <= ( len B13 )) implies ( B13 . B17 ) = ( B14 . B17 )))) implies B13 , B14 are_fiberwise_equipotent )))
proof
let C14 , C15 being (FinSequence of ( INT ));
let C16 , C17 being (Element of ( NAT ));
assume that
L17: (1 <= C17 & C17 <= ( len C14 ))
and
L18: (1 <= C16 & C16 <= ( len C14 ))
and
L19: ( len C14 ) = ( len C15 )
and
L20: (( C14 . C16 ) = ( C15 . C17 ) & ( C14 . C17 ) = ( C15 . C16 ))
and
L21: (for B18 being (Element of ( NAT )) holds ((B18 <> C16 & B18 <> C17 & 1 <= B18 & B18 <= ( len C14 )) implies ( C14 . B18 ) = ( C15 . B18 )));
L22: C16 in ( Seg ( len C14 ) ) by L18 , FINSEQ_1:1;
L23: ( Seg ( len C14 ) ) = ( dom C14 ) by FINSEQ_1:def 3;
L24:
now
let C18 being set;
assume that
L25: (C18 <> C16 & C18 <> C17)
and
L26: C18 in ( dom C14 );
reconsider D3 = C18 as (Element of ( NAT )) by L26;
L27: (1 <= D3 & D3 <= ( len C14 )) by L23 , L26 , FINSEQ_1:1;
thus L28: ( C14 . C18 ) = ( C15 . C18 ) by L27 , L21 , L25;
end;
L29: (C17 in ( dom C14 ) & ( dom C14 ) = ( dom C15 )) by L17 , L19 , L23 , FINSEQ_1:1 , FINSEQ_1:def 3;
thus L30: thesis by L29 , L20 , L23 , L22 , L24 , RFINSEQ:28;
end;
set D4 = ( NAT );
set D5 = ( SCM-Data-Loc );
theorem
L31: (for B19 , B20 being (State of ( SCMPDS )) holds ((for B21 being Int_position holds ( B19 . B21 ) = ( B20 . B21 )) implies ( Initialize B19 ) = ( Initialize B20 )))
proof
let C19 , C20 being (State of ( SCMPDS ));
assume L32: (for B22 being Int_position holds ( C19 . B22 ) = ( C20 . B22 ));
L33: ( DataPart C19 ) = ( DataPart C20 ) by L32 , SCMPDS_4:8;
thus L34: thesis by L33 , MEMSTR_0:80;
end;
theorem
L35: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B23 being (State of ( SCMPDS )) holds (for B24 being  halt-free (Program of ( SCMPDS )) holds (for B25 being  parahalting  shiftable (Instruction of ( SCMPDS )) holds ((B24 is_closed_on B23 , R4 & B24 is_halting_on B23 , R4) implies (( B24 ';' B25 ) is_closed_on B23 , R4 & ( B24 ';' B25 ) is_halting_on B23 , R4))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C21 being (State of ( SCMPDS ));
let C22 being  halt-free (Program of ( SCMPDS ));
let C23 being  parahalting  shiftable (Instruction of ( SCMPDS ));
set D6 = ( Load C23 );
L36: (D6 is_closed_on ( IExec (C22 , R4 , ( Initialize C21 )) ) , R4 & D6 is_halting_on ( IExec (C22 , R4 , ( Initialize C21 )) ) , R4) by SCMPDS_6:20 , SCMPDS_6:21;
assume L37: (C22 is_closed_on C21 , R4 & C22 is_halting_on C21 , R4);
L38: (( C22 ';' D6 ) is_closed_on C21 , R4 & ( C22 ';' D6 ) is_halting_on C21 , R4) by L37 , L36 , SCMPDS_7:24;
thus L39: thesis by L38 , SCMPDS_4:def 3;
end;
theorem
L40: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B26 being ( 0 ) -started (State of ( SCMPDS )) holds (for B27 being  halt-free (Program of ( SCMPDS )) holds (for B28 being  shiftable  parahalting (Program of ( SCMPDS )) holds (for B29 being Int_position holds ((B27 is_closed_on B26 , R4 & B27 is_halting_on B26 , R4) implies ( ( IExec (( B27 ';' B28 ) , R4 , B26) ) . B29 ) = ( ( IExec (B28 , R4 , ( Initialize ( IExec (B27 , R4 , B26) ) )) ) . B29 )))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C24 being ( 0 ) -started (State of ( SCMPDS ));
let C25 being  halt-free (Program of ( SCMPDS ));
let C26 being  shiftable  parahalting (Program of ( SCMPDS ));
let C27 being Int_position;
L41: (C26 is_closed_on ( IExec (C25 , R4 , C24) ) , R4 & C26 is_halting_on ( IExec (C25 , R4 , C24) ) , R4) by SCMPDS_6:20 , SCMPDS_6:21;
thus L42: thesis by L41 , SCMPDS_7:30;
end;
theorem
L43: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B30 being ( 0 ) -started (State of ( SCMPDS )) holds (for B31 being  halt-free  parahalting (Program of ( SCMPDS )) holds (for B32 being  shiftable (Program of ( SCMPDS )) holds (for B33 being Int_position holds ((B32 is_closed_on ( IExec (B31 , R4 , B30) ) , R4 & B32 is_halting_on ( IExec (B31 , R4 , B30) ) , R4) implies ( ( IExec (( B31 ';' B32 ) , R4 , B30) ) . B33 ) = ( ( IExec (B32 , R4 , ( Initialize ( IExec (B31 , R4 , B30) ) )) ) . B33 )))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C28 being ( 0 ) -started (State of ( SCMPDS ));
let C29 being  halt-free  parahalting (Program of ( SCMPDS ));
let C30 being  shiftable (Program of ( SCMPDS ));
let C31 being Int_position;
L44: (C29 is_closed_on C28 , R4 & C29 is_halting_on C28 , R4) by SCMPDS_6:20 , SCMPDS_6:21;
thus L45: thesis by L44 , SCMPDS_7:30;
end;
theorem
L46: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B34 being (State of ( SCMPDS )) holds (for B35 being (Program of ( SCMPDS )) holds (for B36 being  shiftable  parahalting (Program of ( SCMPDS )) holds ((B35 is_closed_on B34 , R4 & B35 is_halting_on B34 , R4) implies (( B35 ';' B36 ) is_closed_on B34 , R4 & ( B35 ';' B36 ) is_halting_on B34 , R4))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C32 being (State of ( SCMPDS ));
let C33 being (Program of ( SCMPDS ));
let C34 being  shiftable  parahalting (Program of ( SCMPDS ));
L47: (C34 is_closed_on ( IExec (C33 , R4 , ( Initialize C32 )) ) , R4 & C34 is_halting_on ( IExec (C33 , R4 , ( Initialize C32 )) ) , R4) by SCMPDS_6:20 , SCMPDS_6:21;
assume L48: (C33 is_closed_on C32 , R4 & C33 is_halting_on C32 , R4);
thus L49: thesis by L48 , L47 , SCMPDS_7:24;
end;
theorem
L50: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B37 being (State of ( SCMPDS )) holds (for B38 being  parahalting (Program of ( SCMPDS )) holds (for B39 being  shiftable (Program of ( SCMPDS )) holds ((B39 is_closed_on ( IExec (B38 , R4 , ( Initialize B37 )) ) , R4 & B39 is_halting_on ( IExec (B38 , R4 , ( Initialize B37 )) ) , R4) implies (( B38 ';' B39 ) is_closed_on B37 , R4 & ( B38 ';' B39 ) is_halting_on B37 , R4))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C35 being (State of ( SCMPDS ));
let C36 being  parahalting (Program of ( SCMPDS ));
let C37 being  shiftable (Program of ( SCMPDS ));
L51: (C36 is_closed_on C35 , R4 & C36 is_halting_on C35 , R4) by SCMPDS_6:20 , SCMPDS_6:21;
assume L52: (C37 is_closed_on ( IExec (C36 , R4 , ( Initialize C35 )) ) , R4 & C37 is_halting_on ( IExec (C36 , R4 , ( Initialize C35 )) ) , R4);
thus L53: thesis by L52 , L51 , SCMPDS_7:24;
end;
theorem
L54: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B40 being (State of ( SCMPDS )) holds (for B41 being (Program of ( SCMPDS )) holds (for B42 being  parahalting  shiftable (Instruction of ( SCMPDS )) holds ((B41 is_closed_on B40 , R4 & B41 is_halting_on B40 , R4) implies (( B41 ';' B42 ) is_closed_on B40 , R4 & ( B41 ';' B42 ) is_halting_on B40 , R4))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C38 being (State of ( SCMPDS ));
let C39 being (Program of ( SCMPDS ));
let C40 being  shiftable  parahalting (Instruction of ( SCMPDS ));
L55: (( Load C40 ) is_closed_on ( IExec (C39 , R4 , ( Initialize C38 )) ) , R4 & ( Load C40 ) is_halting_on ( IExec (C39 , R4 , ( Initialize C38 )) ) , R4) by SCMPDS_6:20 , SCMPDS_6:21;
assume L56: (C39 is_closed_on C38 , R4 & C39 is_halting_on C38 , R4);
L57: (( C39 ';' ( Load C40 ) ) is_closed_on C38 , R4 & ( C39 ';' ( Load C40 ) ) is_halting_on C38 , R4) by L56 , L55 , SCMPDS_7:24;
thus L58: thesis by L57 , SCMPDS_4:def 3;
end;
L59: (for B43 being Int_position holds (for B44 being Integer holds (for B45 being (Element of ( NAT )) holds (for B46 being (Program of ( SCMPDS )) holds ( card ( stop ( for-down (B43 , B44 , B45 , B46) ) ) ) = ( ( card B46 ) + 4 )))))
proof
let C41 being Int_position;
let C42 being Integer;
let C43 being (Element of ( NAT ));
let C44 being (Program of ( SCMPDS ));
thus L60: ( card ( stop ( for-down (C41 , C42 , C43 , C44) ) ) ) = ( ( card ( for-down (C41 , C42 , C43 , C44) ) ) + 1 ) by COMPOS_1:55
.= ( ( ( card C44 ) + 3 ) + 1 ) by SCMPDS_7:41
.= ( ( card C44 ) + 4 );
end;
L61: (for B47 being Int_position holds (for B48 being Integer holds (for B49 being (Element of ( NAT )) holds (for B50 being (Program of ( SCMPDS )) holds ( for-down (B47 , B48 , B49 , B50) ) = ( ( (B47 , B48) <=0_goto ( ( card B50 ) + 3 ) ) ';' ( ( B50 ';' ( AddTo (B47 , B48 , ( - B49 )) ) ) ';' ( goto ( - ( ( card B50 ) + 2 ) ) ) ) )))))
proof
let C45 being Int_position;
let C46 being Integer;
let C47 being (Element of ( NAT ));
let C48 being (Program of ( SCMPDS ));
set D7 = ( (C45 , C46) <=0_goto ( ( card C48 ) + 3 ) );
set D8 = ( AddTo (C45 , C46 , ( - C47 )) );
set D9 = ( goto ( - ( ( card C48 ) + 2 ) ) );
thus L62: ( for-down (C45 , C46 , C47 , C48) ) = ( ( ( D7 ';' C48 ) ';' D8 ) ';' D9 ) by SCMPDS_7:def 2
.= ( D7 ';' ( ( C48 ';' D8 ) ';' D9 ) ) by SCMPDS_7:2;
end;
L63: (for B51 being (Program of ( SCMPDS )) holds (for B52 being Int_position holds (for B53 being Integer holds (for B54 being (Element of ( NAT )) holds ( Shift (( B51 ';' ( AddTo (B52 , B53 , ( - B54 )) ) ) , 1) ) c= ( for-down (B52 , B53 , B54 , B51) )))))
proof
let C49 being (Program of ( SCMPDS ));
let C50 being Int_position;
let C51 being Integer;
let C52 being (Element of ( NAT ));
set D10 = ( (C50 , C51) <=0_goto ( ( card C49 ) + 3 ) );
set D11 = ( AddTo (C50 , C51 , ( - C52 )) );
set D12 = ( goto ( - ( ( card C49 ) + 2 ) ) );
L64: ( for-down (C50 , C51 , C52 , C49) ) = ( ( ( D10 ';' C49 ) ';' D11 ) ';' D12 ) by SCMPDS_7:def 2
.= ( ( D10 ';' ( C49 ';' D11 ) ) ';' D12 ) by SCMPDS_4:15
.= ( ( ( Load D10 ) ';' ( C49 ';' D11 ) ) ';' D12 ) by SCMPDS_4:def 2
.= ( ( ( Load D10 ) ';' ( C49 ';' D11 ) ) ';' ( Load D12 ) ) by SCMPDS_4:def 3;
L65: ( card ( Load D10 ) ) = 1 by COMPOS_1:54;
thus L66: thesis by L65 , L64 , SCMPDS_7:3;
end;
begin
scheme ForDownHalt { P1[set] , F1() -> ( 0 ) -started (State of ( SCMPDS )) , F2() -> (Instruction-Sequence of ( SCMPDS )) , F3() ->  halt-free  shiftable (Program of ( SCMPDS )) , F4() -> Int_position , F5() -> Integer , F6() -> (Element of ( NAT )) } : (( for-down (F4() , F5() , F6() , F3()) ) is_closed_on F1() , F2() & ( for-down (F4() , F5() , F6() , F3()) ) is_halting_on F1() , F2())
provided
L67: F6() > ( 0 )
and
L68: P1[ F1() ]
and
L69: (for B55 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((P1[ B55 ] & ( B55 . F4() ) = ( F1() . F4() ) & ( B55 . ( DataLoc (( F1() . F4() ) , F5()) ) ) > ( 0 )) implies (( ( IExec (( F3() ';' ( AddTo (F4() , F5() , ( - F6() )) ) ) , R5 , B55) ) . F4() ) = ( B55 . F4() ) & ( ( IExec (( F3() ';' ( AddTo (F4() , F5() , ( - F6() )) ) ) , R5 , B55) ) . ( DataLoc (( F1() . F4() ) , F5()) ) ) = ( ( B55 . ( DataLoc (( F1() . F4() ) , F5()) ) ) - F6() ) & F3() is_closed_on B55 , R5 & F3() is_halting_on B55 , R5 & P1[ ( Initialize ( IExec (( F3() ';' ( AddTo (F4() , F5() , ( - F6() )) ) ) , R5 , B55) ) ) ]))))
proof
set D13 = ( (F4() , F5()) <=0_goto ( ( card F3() ) + 3 ) );
set D14 = ( F3() ';' ( AddTo (F4() , F5() , ( - F6() )) ) );
set D15 = ( goto ( - ( ( card F3() ) + 2 ) ) );
set D16 = ( DataLoc (( F1() . F4() ) , F5()) );
set D17 = ( for-down (F4() , F5() , F6() , F3()) );
set D18 = ( stop D17 );
set D19 = ( stop D14 );
defpred S1[ Nat ] means (for B56 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B56 . D16 ) <= $1 & P1[ B56 ] & ( B56 . F4() ) = ( F1() . F4() )) implies (D17 is_closed_on B56 , R5 & D17 is_halting_on B56 , R5))));
L70: (for B57 being (Element of ( NAT )) holds (S1[ B57 ] implies S1[ ( B57 + 1 ) ]))
proof
let C53 being (Element of ( NAT ));
assume L71: S1[ C53 ];
L72:
now
let C54 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
L73: ( Initialize C54 ) = C54 by MEMSTR_0:44;
assume L74: ( C54 . D16 ) <= ( C53 + 1 );
assume L75: P1[ C54 ];
assume L76: ( C54 . F4() ) = ( F1() . F4() );
per cases ;
suppose L77: ( C54 . D16 ) <= ( 0 );

thus L78: (D17 is_closed_on C54 , R5 & D17 is_halting_on C54 , R5) by L77 , L76 , SCMPDS_7:44;
end;
suppose L79: ( C54 . D16 ) > ( 0 );

L80: ( 0 ) in ( dom D18 ) by COMPOS_1:36;
L81: ( - ( - F6() ) ) > ( 0 ) by L67;
L82: ( - F6() ) < ( 0 ) by L81;
L83: ( - F6() ) <= ( - 1 ) by L82 , INT_1:8;
L84: ( ( - F6() ) + ( C54 . D16 ) ) <= ( ( - 1 ) + ( C54 . D16 ) ) by L83 , XREAL_1:6;
L85: ( ( C54 . D16 ) - 1 ) <= C53 by L74 , XREAL_1:20;
L86: ( ( - F6() ) + ( C54 . D16 ) ) <= C53 by L85 , L84 , XXREAL_0:2;
set D20 = ( R5 +* D19 );
set D21 = ( R5 +* D18 );
set D22 = ( Comput (D21 , C54 , 1) );
set D23 = D21;
set D24 = ( IExec (D14 , R5 , C54) );
L87: D19 c= D20 by FUNCT_4:25;
L88: D17 = ( D13 ';' ( D14 ';' D15 ) ) by L61;
L89: ( Comput (D21 , C54 , ( ( 0 ) + 1 )) ) = ( Following (D21 , ( Comput (D21 , C54 , ( 0 )) )) ) by EXTPRO_1:3
.= ( Following (D21 , C54) ) by EXTPRO_1:2
.= ( Exec (D13 , C54) ) by L88 , L73 , SCMPDS_6:11;
L90: (for R1 being Int_position holds ( C54 . R1 ) = ( D22 . R1 )) by L89 , SCMPDS_2:56;
L91: ( DataPart C54 ) = ( DataPart D22 ) by L90 , SCMPDS_4:8;
L92: ( D24 . D16 ) = ( ( C54 . D16 ) - F6() ) by L69 , L75 , L76 , L79;
L93: ( D24 . F4() ) = ( C54 . F4() ) by L69 , L75 , L76 , L79;
set D25 = ( LifeSpan (D20 , C54) );
set D26 = ( Comput (D23 , D22 , D25) );
set D27 = D23;
set D28 = ( ( card D14 ) + 1 );
L94: ( card D14 ) = ( ( card F3() ) + 1 ) by SCMP_GCD:4;
L95: ( C54 . ( DataLoc (( C54 . F4() ) , F5()) ) ) = ( C54 . D16 ) by L76;
L96: ( IC C54 ) = ( 0 ) by L73 , MEMSTR_0:47;
L97: (F3() is_closed_on C54 , R5 & F3() is_halting_on C54 , R5) by L69 , L75 , L76 , L79;
L98: D14 is_closed_on C54 , R5 by L97 , L35;
L99: D14 is_closed_on C54 , D20 by L98 , L73 , SCMPDS_6:24;
L100: ( ( card F3() ) + 2 ) < ( ( card F3() ) + 3 ) by XREAL_1:6;
L101: D28 in ( dom D17 ) by L100 , L94 , SCMPDS_7:42;
set D29 = ( D25 + 1 );
set D30 = ( Comput (D21 , C54 , D29) );
set D31 = D21;
L102: D30 = D26 by EXTPRO_1:4;
L103: D14 is_halting_on C54 , R5 by L97 , L35;
L104: D20 halts_on C54 by L103 , L73 , SCMPDS_6:def 3;
L105: ( D20 +* D19 ) halts_on C54 by L103 , L73 , SCMPDS_6:def 3;
L106: D14 is_halting_on C54 , D20 by L105 , L73 , SCMPDS_6:def 3;
set D32 = ( D29 + 1 );
set D33 = ( Comput (D21 , C54 , D32) );
set D34 = D21;
L107: D18 c= D21 by FUNCT_4:25;
L108: D17 c= D18 by AFINSQ_1:74;
L109: D17 c= D21 by L108 , L107 , XBOOLE_1:1;
L110: ( Shift (D14 , 1) ) c= D17 by L63;
L111: ( Shift (D14 , 1) ) c= D18 by L110 , L108 , XBOOLE_1:1;
L112: ( Shift (D14 , 1) ) c= D23 by L111 , L107 , XBOOLE_1:1;
L113: ( IC D22 ) = ( succ ( IC C54 ) ) by L79 , L89 , L95 , SCMPDS_2:56
.= ( ( 0 ) + 1 ) by L96;
L114: ( DataPart ( Comput (D20 , C54 , D25) ) ) = ( DataPart D26 ) by L113 , L87 , L106 , L99 , L91 , L112 , SCMPDS_7:18;
L115: ( DataPart D26 ) = ( DataPart ( Result (D20 , C54) ) ) by L114 , L104 , EXTPRO_1:23
.= ( DataPart D24 ) by SCMPDS_4:def 5;
L116: ( IC D26 ) = D28 by L87 , L106 , L99 , L113 , L91 , L112 , SCMPDS_7:18;
L117: ( CurInstr (D31 , D30) ) = ( D23 . D28 ) by L116 , L102 , PBOOLE:143
.= ( D17 . D28 ) by L101 , L109 , GRFUNC_1:2
.= D15 by L94 , SCMPDS_7:43;
L118: D33 = ( Following (D21 , D30) ) by EXTPRO_1:3
.= ( Exec (D15 , D30) ) by L117;
L119: ( IC D33 ) = ( ICplusConst (D30 , ( ( 0 ) - ( ( card F3() ) + 2 ) )) ) by L118 , SCMPDS_2:54
.= ( 0 ) by L94 , L116 , L102 , SCMPDS_7:1;
L120: ( Initialize D33 ) = D33 by L119 , MEMSTR_0:46;
L121: ( InsCode D15 ) = 14 by SCMPDS_2:12;
L122: ( InsCode D15 ) in { ( 0 ) , 4 , 5 , 6 , 14 } by L121 , ENUMSET1:def 3;
L123: D33 = ( Initialize D30 ) by L122 , L118 , L120 , SCMPDS_8:3
.= ( Initialize D24 ) by L115 , L102 , MEMSTR_0:80;
L124: P1[ D33 ] by L123 , L69 , L75 , L76 , L79;
L125: ( D34 +* D18 ) = D34;
L126: ( D26 . D16 ) = ( ( Comput (D20 , C54 , D25) ) . D16 ) by L114 , SCMPDS_4:8
.= ( ( Result (D20 , C54) ) . D16 ) by L104 , EXTPRO_1:23
.= ( ( C54 . D16 ) - F6() ) by L92 , SCMPDS_4:def 5;
L127: ( D33 . D16 ) = ( ( - F6() ) + ( C54 . D16 ) ) by L126 , L102 , L118 , SCMPDS_2:54;
L128: ( D26 . F4() ) = ( ( Comput (D20 , C54 , D25) ) . F4() ) by L114 , SCMPDS_4:8
.= ( ( Result (D20 , C54) ) . F4() ) by L104 , EXTPRO_1:23
.= ( F1() . F4() ) by L76 , L93 , SCMPDS_4:def 5;
L129: ( D33 . F4() ) = ( F1() . F4() ) by L128 , L102 , L118 , SCMPDS_2:54;
L130: D17 is_closed_on D33 , D34 by L129 , L71 , L124 , L127 , L86 , L120;
L131:
now
let C55 being (Element of ( NAT ));
per cases ;
suppose L132: C55 < D32;

L133: C55 <= D29 by L132 , INT_1:7;
thus L134:now
per cases  by L133 , NAT_1:8;
suppose L135: C55 <= D25;

per cases ;
suppose L136: C55 = ( 0 );

thus L137: ( IC ( Comput (D21 , C54 , C55) ) ) in ( dom D18 ) by L136 , L80 , L96 , EXTPRO_1:2;
end;
suppose L138: C55 <> ( 0 );

consider C56 being Nat such that L139: C55 = ( C56 + 1 ) by L138 , NAT_1:6;
reconsider D35 = C56 as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider D36 = ( IC ( Comput (D20 , C54 , D35) ) ) as (Element of ( NAT ));
L140: D35 < C55 by L139 , XREAL_1:29;
L141: D35 < D25 by L140 , L135 , XXREAL_0:2;
L142: ( ( IC ( Comput (D20 , C54 , D35) ) ) + 1 ) = ( IC ( Comput (D23 , D22 , D35) ) ) by L141 , L87 , L106 , L99 , L113 , L91 , L112 , SCMPDS_7:16;
L143: ( IC ( Comput (D21 , C54 , C55) ) ) = ( D36 + 1 ) by L142 , L139 , EXTPRO_1:4;
L144: ( IC ( Comput (D20 , C54 , D35) ) ) in ( dom D19 ) by L98 , L73 , SCMPDS_6:def 2;
L145: D36 < ( card D19 ) by L144 , AFINSQ_1:66;
L146: D36 < ( ( card D14 ) + 1 ) by L145 , COMPOS_1:55;
L147: ( D36 + 1 ) <= ( ( card D14 ) + 1 ) by L146 , INT_1:7;
L148: ( ( card F3() ) + 2 ) < ( ( card F3() ) + 4 ) by XREAL_1:6;
L149: ( D36 + 1 ) < ( ( card F3() ) + 4 ) by L148 , L94 , L147 , XXREAL_0:2;
L150: ( D36 + 1 ) < ( card D18 ) by L149 , L59;
thus L151: ( IC ( Comput (D21 , C54 , C55) ) ) in ( dom D18 ) by L150 , L143 , AFINSQ_1:66;
end;
end;
suppose L153: C55 = D29;

L154: D28 in ( dom D18 ) by L101 , COMPOS_1:62;
thus L155: ( IC ( Comput (D21 , C54 , C55) ) ) in ( dom D18 ) by L154 , L87 , L106 , L99 , L113 , L91 , L112 , L102 , L153 , SCMPDS_7:18;
end;
end;
end;
suppose L135: C55 >= D32;

consider C57 being Nat such that L136: C55 = ( D32 + C57 ) by L135 , NAT_1:10;
reconsider D37 = C57 as (Element of ( NAT )) by ORDINAL1:def 12;
L137: ( Comput (D21 , C54 , C55) ) = ( Comput (D21 , ( Comput (D21 , C54 , D32) ) , D37) ) by L136 , EXTPRO_1:4
.= ( Comput (( D34 +* D18 ) , D33 , D37) );
thus L138: ( IC ( Comput (D21 , C54 , C55) ) ) in ( dom D18 ) by L137 , L130 , L120 , SCMPDS_6:def 2;
end;
end;
thus L140: D17 is_closed_on C54 , R5 by L131 , L73 , SCMPDS_6:def 2;
L141: D17 is_halting_on D33 , D34 by L71 , L129 , L124 , L127 , L86 , L120;
L142: D34 halts_on D33 by L141 , L125 , L120 , SCMPDS_6:def 3;
L143: D21 halts_on C54 by L142 , EXTPRO_1:22;
thus L144: D17 is_halting_on C54 , R5 by L143 , L73 , SCMPDS_6:def 3;
end;
end;
thus L146: thesis by L72;
end;
L147: S1[ ( 0 ) ] by SCMPDS_7:44;
L148: (for B58 being (Element of ( NAT )) holds S1[ B58 ]) from NAT_1:sch 1(L147 , L70);
per cases ;
suppose L149: ( F1() . D16 ) <= ( 0 );

thus L150: thesis by L149 , SCMPDS_7:44;
end;
suppose L151: ( F1() . D16 ) > ( 0 );

reconsider D38 = ( F1() . D16 ) as (Element of ( NAT )) by L151 , INT_1:3;
L152: S1[ D38 ] by L148;
thus L153: thesis by L152 , L68;
end;
end;
scheme ForDownExec { P2[set] , F7() -> ( 0 ) -started (State of ( SCMPDS )) , F8() -> (Instruction-Sequence of ( SCMPDS )) , F9() ->  halt-free  shiftable (Program of ( SCMPDS )) , F10() -> Int_position , F11() -> Integer , F12() -> (Element of ( NAT )) } : ( IExec (( for-down (F10() , F11() , F12() , F9()) ) , F8() , F7()) ) = ( IExec (( for-down (F10() , F11() , F12() , F9()) ) , F8() , ( Initialize ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , F8() , F7()) ) )) )
provided
L155: F12() > ( 0 )
and
L156: ( F7() . ( DataLoc (( F7() . F10() ) , F11()) ) ) > ( 0 )
and
L157: P2[ F7() ]
and
L158: (for B59 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((P2[ B59 ] & ( B59 . F10() ) = ( F7() . F10() ) & ( B59 . ( DataLoc (( F7() . F10() ) , F11()) ) ) > ( 0 )) implies (( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B59) ) . F10() ) = ( B59 . F10() ) & ( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B59) ) . ( DataLoc (( F7() . F10() ) , F11()) ) ) = ( ( B59 . ( DataLoc (( F7() . F10() ) , F11()) ) ) - F12() ) & F9() is_closed_on B59 , R5 & F9() is_halting_on B59 , R5 & P2[ ( Initialize ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B59) ) ) ]))))
proof
set D39 = ( (F10() , F11()) <=0_goto ( ( card F9() ) + 3 ) );
set D40 = ( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) );
set D41 = ( goto ( - ( ( card F9() ) + 2 ) ) );
set D42 = ( for-down (F10() , F11() , F12() , F9()) );
set D43 = ( stop D42 );
set D44 = ( F8() +* D43 );
set D45 = ( F8() +* ( stop D40 ) );
set D46 = ( LifeSpan (D45 , F7()) );
set D47 = ( D46 + 2 );
set D48 = ( Initialize ( IExec (D40 , F8() , F7()) ) );
set D49 = ( LifeSpan (D44 , D48) );
L159: ( stop D40 ) c= D45 by FUNCT_4:25;
L160: ( Initialize F7() ) = F7() by MEMSTR_0:44;
L161: (F9() is_closed_on F7() , F8() & F9() is_halting_on F7() , F8()) by L156 , L157 , L158;
L162: D40 is_closed_on F7() , F8() by L161 , L35;
L163: D40 is_closed_on F7() , D45 by L162 , L160 , SCMPDS_6:24;
L164: D40 is_halting_on F7() , F8() by L161 , L35;
L165: D45 halts_on F7() by L164 , L160 , SCMPDS_6:def 3;
L166: ( D45 +* ( stop D40 ) ) halts_on ( Initialize F7() ) by L164 , SCMPDS_6:def 3;
L167: D40 is_halting_on F7() , D45 by L166 , SCMPDS_6:def 3;
L168: D42 = ( D39 ';' ( D40 ';' D41 ) ) by L61;
L169: ( Comput (D44 , F7() , ( ( 0 ) + 1 )) ) = ( Following (D44 , ( Comput (D44 , F7() , ( 0 )) )) ) by EXTPRO_1:3
.= ( Following (D44 , F7()) ) by EXTPRO_1:2
.= ( Exec (D39 , F7()) ) by L168 , L160 , SCMPDS_6:11;
set D50 = ( D46 + 1 );
set D51 = ( Comput (D44 , F7() , 1) );
set D52 = D44;
set D53 = ( DataLoc (( F7() . F10() ) , F11()) );
L170: ( card D40 ) = ( ( card F9() ) + 1 ) by SCMP_GCD:4;
set D54 = ( Comput (D44 , F7() , D50) );
set D55 = D44;
set D56 = ( Comput (D52 , D51 , D46) );
set D57 = ( ( card D40 ) + 1 );
set D58 = D52;
L171: ( ( card F9() ) + 2 ) < ( ( card F9() ) + 3 ) by XREAL_1:6;
L172: D57 in ( dom D42 ) by L171 , L170 , SCMPDS_7:42;
L173: D54 = D56 by EXTPRO_1:4;
L174: (for R1 being Int_position holds ( F7() . R1 ) = ( D51 . R1 )) by L169 , SCMPDS_2:56;
L175: ( DataPart F7() ) = ( DataPart D51 ) by L174 , SCMPDS_4:8;
L176: ( IC F7() ) = ( 0 ) by MEMSTR_0:def 12;
L177: D43 c= D44 by FUNCT_4:25;
L178: D42 c= D43 by AFINSQ_1:74;
L179: D42 c= D44 by L178 , L177 , XBOOLE_1:1;
L180: ( Shift (D40 , 1) ) c= D42 by L63;
L181: ( Shift (D40 , 1) ) c= D43 by L180 , L178 , XBOOLE_1:1;
L182: ( Shift (D40 , 1) ) c= D52 by L181 , L177 , XBOOLE_1:1;
set D59 = ( LifeSpan (D44 , F7()) );
set D60 = ( D50 + 1 );
set D61 = ( Comput (D44 , F7() , D60) );
L183: ( IC D51 ) = ( succ ( IC F7() ) ) by L156 , L169 , SCMPDS_2:56
.= ( ( 0 ) + 1 ) by L176;
L184: ( IC D56 ) = D57 by L183 , L159 , L167 , L163 , L175 , L182 , SCMPDS_7:18;
L185: ( CurInstr (D55 , D54) ) = ( D52 . D57 ) by L184 , L173 , PBOOLE:143
.= ( D42 . D57 ) by L172 , L179 , GRFUNC_1:2
.= D41 by L170 , SCMPDS_7:43;
L186: D61 = ( Following (D44 , D54) ) by EXTPRO_1:3
.= ( Exec (D41 , D54) ) by L185;
L187: ( DataPart ( Comput (D45 , F7() , D46) ) ) = ( DataPart D56 ) by L159 , L167 , L163 , L183 , L175 , L182 , SCMPDS_7:18;
L188:
now
let C58 being Int_position;
L189: (not C58 in ( dom ( Start-At (( 0 ) , ( SCMPDS )) ) )) by SCMPDS_4:18;
L190: ( D48 . C58 ) = ( ( IExec (D40 , F8() , F7()) ) . C58 ) by L189 , FUNCT_4:11;
L191: ( D56 . C58 ) = ( ( Comput (D45 , F7() , D46) ) . C58 ) by L187 , SCMPDS_4:8
.= ( ( Result (D45 , F7()) ) . C58 ) by L165 , EXTPRO_1:23
.= ( ( IExec (D40 , F8() , F7()) ) . C58 ) by SCMPDS_4:def 5;
thus L192: ( D61 . C58 ) = ( D48 . C58 ) by L191 , L173 , L186 , L190 , SCMPDS_2:54;
end;
L193: ( DataPart D61 ) = ( DataPart D48 ) by L188 , SCMPDS_4:8;
L194: (for B60 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((P2[ B60 ] & ( B60 . F10() ) = ( F7() . F10() ) & ( B60 . ( DataLoc (( F7() . F10() ) , F11()) ) ) > ( 0 )) implies (( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B60) ) . F10() ) = ( B60 . F10() ) & ( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B60) ) . ( DataLoc (( F7() . F10() ) , F11()) ) ) = ( ( B60 . ( DataLoc (( F7() . F10() ) , F11()) ) ) - F12() ) & F9() is_closed_on B60 , R5 & F9() is_halting_on B60 , R5 & P2[ ( Initialize ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B60) ) ) ])))) by L158;
L195: P2[ F7() ] by L157;
L196: (( for-down (F10() , F11() , F12() , F9()) ) is_closed_on F7() , F8() & ( for-down (F10() , F11() , F12() , F9()) ) is_halting_on F7() , F8()) from ForDownHalt(L155 , L195 , L194);
L197: D44 halts_on F7() by L196 , L160 , SCMPDS_6:def 3;
set D62 = ( IExec (D40 , F8() , F7()) );
set D63 = ( DataLoc (( ( Initialize D62 ) . F10() ) , F11()) );
L198: ( ( Initialize D62 ) . F10() ) = ( D62 . F10() ) by SCMPDS_5:15
.= ( F7() . F10() ) by L156 , L157 , L158;
L199: (for B61 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((P2[ B61 ] & ( B61 . F10() ) = ( ( Initialize D62 ) . F10() ) & ( B61 . ( DataLoc (( ( Initialize D62 ) . F10() ) , F11()) ) ) > ( 0 )) implies (( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B61) ) . F10() ) = ( B61 . F10() ) & ( ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B61) ) . ( DataLoc (( ( Initialize D62 ) . F10() ) , F11()) ) ) = ( ( B61 . ( DataLoc (( ( Initialize D62 ) . F10() ) , F11()) ) ) - F12() ) & F9() is_closed_on B61 , R5 & F9() is_halting_on B61 , R5 & P2[ ( Initialize ( IExec (( F9() ';' ( AddTo (F10() , F11() , ( - F12() )) ) ) , R5 , B61) ) ) ])))) by L198 , L158;
L200: P2[ ( Initialize D62 ) ] by L156 , L157 , L158;
L201: (D42 is_closed_on ( Initialize D62 ) , F8() & D42 is_halting_on ( Initialize D62 ) , F8()) from ForDownHalt(L155 , L200 , L199);
L202: D44 halts_on ( Initialize D48 ) by L201 , SCMPDS_6:def 3;
L203: ( IC D61 ) = ( ICplusConst (D54 , ( ( 0 ) - ( ( card F9() ) + 2 ) )) ) by L186 , SCMPDS_2:54
.= ( 0 ) by L170 , L184 , L173 , SCMPDS_7:1;
L204: ( IC D48 ) = ( IC ( Comput (D44 , F7() , D47) ) ) by L203 , MEMSTR_0:47;
L205: ( Comput (D44 , F7() , D47) ) = D48 by L193 , L204 , MEMSTR_0:78;
L206: ( CurInstr (D44 , ( Comput (D44 , F7() , D47) )) ) = D39 by L205 , L168 , SCMPDS_6:11;
L207: D59 > D47 by L206 , L197 , EXTPRO_1:36 , SCMPDS_6:17;
consider C59 being Nat such that L208: D59 = ( D47 + C59 ) by L207 , NAT_1:10;
reconsider D64 = C59 as (Element of ( NAT )) by ORDINAL1:def 12;
L209: ( Comput (D44 , F7() , ( D47 + D49 )) ) = ( Comput (D44 , D48 , D49) ) by L205 , EXTPRO_1:4;
L210: ( CurInstr (D44 , ( Comput (D44 , F7() , ( D47 + D49 )) )) ) = ( halt ( SCMPDS ) ) by L209 , L202 , EXTPRO_1:def 15;
L211: ( D47 + D49 ) >= D59 by L210 , L197 , EXTPRO_1:def 15;
L212: D49 >= D64 by L211 , L208 , XREAL_1:6;
L213: ( Comput (D44 , F7() , D59) ) = ( Comput (D44 , D48 , D64) ) by L205 , L208 , EXTPRO_1:4;
L214: ( CurInstr (D44 , ( Comput (D44 , D48 , D64) )) ) = ( halt ( SCMPDS ) ) by L213 , L197 , EXTPRO_1:def 15;
L215: D64 >= D49 by L214 , L202 , EXTPRO_1:def 15;
L216: D64 = D49 by L215 , L212 , XXREAL_0:1;
L217: ( Result (D44 , F7()) ) = ( Comput (D44 , D48 , D49) ) by L216 , L197 , L213 , EXTPRO_1:23;
thus L218: ( IExec (D42 , F8() , F7()) ) = ( Comput (D44 , D48 , D49) ) by L217 , SCMPDS_4:def 5
.= ( Result (D44 , D48) ) by L202 , EXTPRO_1:23
.= ( IExec (D42 , F8() , ( Initialize ( IExec (D40 , F8() , F7()) ) )) ) by SCMPDS_4:def 5;
end;
scheme ForDownEnd { P3[set] , F13() -> ( 0 ) -started (State of ( SCMPDS )) , F14() ->  halt-free  shiftable (Program of ( SCMPDS )) , F15() -> (Instruction-Sequence of ( SCMPDS )) , F16() -> Int_position , F17() -> Integer , F18() -> (Element of ( NAT )) } : (( ( IExec (( for-down (F16() , F17() , F18() , F14()) ) , F15() , F13()) ) . ( DataLoc (( F13() . F16() ) , F17()) ) ) <= ( 0 ) & P3[ ( Initialize ( IExec (( for-down (F16() , F17() , F18() , F14()) ) , F15() , F13()) ) ) ])
provided
L219: F18() > ( 0 )
and
L220: P3[ F13() ]
and
L221: (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (for B62 being ( 0 ) -started (State of ( SCMPDS )) holds ((P3[ B62 ] & ( B62 . F16() ) = ( F13() . F16() ) & ( B62 . ( DataLoc (( F13() . F16() ) , F17()) ) ) > ( 0 )) implies (( ( IExec (( F14() ';' ( AddTo (F16() , F17() , ( - F18() )) ) ) , R5 , B62) ) . F16() ) = ( B62 . F16() ) & ( ( IExec (( F14() ';' ( AddTo (F16() , F17() , ( - F18() )) ) ) , R5 , B62) ) . ( DataLoc (( F13() . F16() ) , F17()) ) ) = ( ( B62 . ( DataLoc (( F13() . F16() ) , F17()) ) ) - F18() ) & F14() is_closed_on B62 , R5 & F14() is_halting_on B62 , R5 & P3[ ( Initialize ( IExec (( F14() ';' ( AddTo (F16() , F17() , ( - F18() )) ) ) , R5 , B62) ) ) ]))))
proof
set D65 = ( DataLoc (( F13() . F16() ) , F17()) );
set D66 = ( for-down (F16() , F17() , F18() , F14()) );
defpred S2[ Nat ] means (for B63 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B63 . D65 ) <= $1 & ( B63 . F16() ) = ( F13() . F16() ) & P3[ B63 ]) implies (( ( IExec (D66 , R5 , B63) ) . D65 ) <= ( 0 ) & P3[ ( Initialize ( IExec (D66 , R5 , B63) ) ) ]))));
L222: S2[ (( 0 ) qua Nat) ]
proof
let C60 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L223: (( C60 . D65 ) <= ( 0 ) & ( C60 . F16() ) = ( F13() . F16() ))
and
L224: P3[ C60 ];
L225: ( Initialize C60 ) = C60 by MEMSTR_0:44;
thus L226: ( ( IExec (D66 , R5 , C60) ) . D65 ) <= ( 0 ) by L225 , L223 , SCMPDS_7:47;
L227: (for B64 being Int_position holds ( ( IExec (D66 , R5 , C60) ) . B64 ) = ( C60 . B64 )) by L223 , L225 , SCMPDS_7:47;
thus L228: thesis by L227 , L224 , L31 , L225;
end;
L229:
now
let C61 being (Element of ( NAT ));
assume L230: S2[ C61 ];
thus L231: S2[ ( C61 + 1 ) ]
proof
let C62 being ( 0 ) -started (State of ( SCMPDS ));
let R6 being (Instruction-Sequence of ( SCMPDS ));
assume that
L232: ( C62 . D65 ) <= ( C61 + 1 )
and
L233: ( C62 . F16() ) = ( F13() . F16() )
and
L234: P3[ C62 ];
per cases ;
suppose L235: ( C62 . D65 ) <= ( 0 );

thus L236: (( ( IExec (D66 , R6 , C62) ) . D65 ) <= ( 0 ) & P3[ ( Initialize ( IExec (D66 , R6 , C62) ) ) ]) by L235 , L222 , L233 , L234;
end;
suppose L237: ( C62 . D65 ) > ( 0 );

set D67 = ( AddTo (F16() , F17() , ( - F18() )) );
set D68 = ( IExec (( F14() ';' D67 ) , R6 , C62) );
L238: (( D68 . F16() ) = ( F13() . F16() ) & P3[ ( Initialize D68 ) ]) by L221 , L233 , L234 , L237;
L239: ( D68 . D65 ) = ( ( C62 . D65 ) - F18() ) by L221 , L233 , L234 , L237;
L240: ( ( D68 . D65 ) + 1 ) <= ( C62 . D65 ) by L239 , L219 , INT_1:7 , XREAL_1:44;
L241: ( ( D68 . D65 ) + 1 ) <= ( C61 + 1 ) by L240 , L232 , XXREAL_0:2;
L242: ( D68 . D65 ) <= C61 by L241 , XREAL_1:6;
L243: P3[ C62 ] by L234;
L244: (for B65 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((P3[ B65 ] & ( B65 . F16() ) = ( C62 . F16() ) & ( B65 . ( DataLoc (( C62 . F16() ) , F17()) ) ) > ( 0 )) implies (( ( IExec (( F14() ';' D67 ) , R5 , B65) ) . F16() ) = ( B65 . F16() ) & ( ( IExec (( F14() ';' D67 ) , R5 , B65) ) . ( DataLoc (( C62 . F16() ) , F17()) ) ) = ( ( B65 . ( DataLoc (( C62 . F16() ) , F17()) ) ) - F18() ) & F14() is_closed_on B65 , R5 & F14() is_halting_on B65 , R5 & P3[ ( Initialize ( IExec (( F14() ';' D67 ) , R5 , B65) ) ) ])))) by L221 , L233;
L245: ( C62 . ( DataLoc (( C62 . F16() ) , F17()) ) ) > ( 0 ) by L233 , L237;
L246: ( ( Initialize D68 ) . D65 ) = ( D68 . D65 ) by SCMPDS_5:15;
L247: ( ( Initialize D68 ) . F16() ) = ( D68 . F16() ) by SCMPDS_5:15;
L248: ( IExec (D66 , R6 , C62) ) = ( IExec (D66 , R6 , ( Initialize D68 )) ) from ForDownExec(L219 , L245 , L243 , L244);
thus L249: (( ( IExec (D66 , R6 , C62) ) . D65 ) <= ( 0 ) & P3[ ( Initialize ( IExec (D66 , R6 , C62) ) ) ]) by L248 , L230 , L242 , L238 , L246 , L247;
end;
end;

end;
L232: (for B66 being (Element of ( NAT )) holds S2[ B66 ]) from NAT_1:sch 1(L222 , L229);
per cases ;
suppose L233: ( F13() . D65 ) > ( 0 );

reconsider D69 = ( F13() . D65 ) as (Element of ( NAT )) by L233 , INT_1:3;
L234: S2[ D69 ] by L232;
thus L235: thesis by L234 , L220;
end;
suppose L236: ( F13() . D65 ) <= ( 0 );

thus L237: thesis by L236 , L220 , L222;
end;
end;
theorem
L239: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B67 being ( 0 ) -started (State of ( SCMPDS )) holds (for B68 being  halt-free  shiftable (Program of ( SCMPDS )) holds (for B69 , B70 , B71 being Int_position holds (for B72 , B73 being Integer holds (for B74 being (Element of ( NAT )) holds ((B74 > ( 0 ) & ( B67 . B70 ) >= ( ( B67 . B71 ) + B73 ) & (for B75 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B75 . B70 ) >= ( ( B75 . B71 ) + B73 ) & ( B75 . B69 ) = ( B67 . B69 ) & ( B75 . ( DataLoc (( B67 . B69 ) , B72) ) ) > ( 0 )) implies (( ( IExec (( B68 ';' ( AddTo (B69 , B72 , ( - B74 )) ) ) , R5 , B75) ) . B69 ) = ( B75 . B69 ) & ( ( IExec (( B68 ';' ( AddTo (B69 , B72 , ( - B74 )) ) ) , R5 , B75) ) . ( DataLoc (( B67 . B69 ) , B72) ) ) = ( ( B75 . ( DataLoc (( B67 . B69 ) , B72) ) ) - B74 ) & B68 is_closed_on B75 , R5 & B68 is_halting_on B75 , R5 & ( ( IExec (( B68 ';' ( AddTo (B69 , B72 , ( - B74 )) ) ) , R5 , B75) ) . B70 ) >= ( ( ( IExec (( B68 ';' ( AddTo (B69 , B72 , ( - B74 )) ) ) , R5 , B75) ) . B71 ) + B73 )))))) implies (( for-down (B69 , B72 , B74 , B68) ) is_closed_on B67 , R4 & ( for-down (B69 , B72 , B74 , B68) ) is_halting_on B67 , R4))))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C63 being ( 0 ) -started (State of ( SCMPDS ));
let C64 being  halt-free  shiftable (Program of ( SCMPDS ));
let C65 , C66 , C67 being Int_position;
let C68 , C69 being Integer;
let C70 being (Element of ( NAT ));
set D70 = ( DataLoc (( C63 . C65 ) , C68) );
set D71 = ( C64 ';' ( AddTo (C65 , C68 , ( - C70 )) ) );
assume L240: C70 > ( 0 );
defpred S3[ set ] means (ex B76 being (State of ( SCMPDS )) st (B76 = $1 & ( B76 . C66 ) >= ( ( B76 . C67 ) + C69 )));
assume L241: ( C63 . C66 ) >= ( ( C63 . C67 ) + C69 );
L242: S3[ C63 ] by L241;
assume L243: (for B77 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B77 . C66 ) >= ( ( B77 . C67 ) + C69 ) & ( B77 . C65 ) = ( C63 . C65 ) & ( B77 . D70 ) > ( 0 )) implies (( ( IExec (D71 , R5 , B77) ) . C65 ) = ( B77 . C65 ) & ( ( IExec (D71 , R5 , B77) ) . D70 ) = ( ( B77 . D70 ) - C70 ) & C64 is_closed_on B77 , R5 & C64 is_halting_on B77 , R5 & ( ( IExec (D71 , R5 , B77) ) . C66 ) >= ( ( ( IExec (D71 , R5 , B77) ) . C67 ) + C69 )))));
L244:
now
let C71 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L245: S3[ C71 ]
and
L246: (( C71 . C65 ) = ( C63 . C65 ) & ( C71 . D70 ) > ( 0 ));
consider C72 being (State of ( SCMPDS )) such that L247: C72 = C71 and L248: ( C72 . C66 ) >= ( ( C72 . C67 ) + C69 ) by L245;
thus L249: (( ( IExec (D71 , R5 , C71) ) . C65 ) = ( C71 . C65 ) & ( ( IExec (D71 , R5 , C71) ) . D70 ) = ( ( C71 . D70 ) - C70 ) & C64 is_closed_on C71 , R5 & C64 is_halting_on C71 , R5) by L243 , L246 , L247 , L248;
thus L250: S3[ ( Initialize ( IExec (D71 , R5 , C71) ) ) ]
proof
take D72 = ( Initialize ( IExec (D71 , R5 , C71) ) );
thus L251: D72 = ( Initialize ( IExec (D71 , R5 , C71) ) );
L252: ( D72 . C66 ) = ( ( IExec (D71 , R5 , C71) ) . C66 ) by SCMPDS_5:15;
L253: ( D72 . C66 ) >= ( ( ( IExec (D71 , R5 , C71) ) . C67 ) + C69 ) by L252 , L243 , L246 , L247 , L248;
thus L254: thesis by L253 , SCMPDS_5:15;
end;

end;
L251: (( for-down (C65 , C68 , C70 , C64) ) is_closed_on C63 , R4 & ( for-down (C65 , C68 , C70 , C64) ) is_halting_on C63 , R4) from ForDownHalt(L240 , L242 , L244);
thus L252: thesis by L251;
end;
theorem
L253: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B78 being ( 0 ) -started (State of ( SCMPDS )) holds (for B79 being  halt-free  shiftable (Program of ( SCMPDS )) holds (for B80 , B81 , B82 being Int_position holds (for B83 , B84 being Integer holds (for B85 being (Element of ( NAT )) holds ((B85 > ( 0 ) & ( B78 . B81 ) >= ( ( B78 . B82 ) + B84 ) & ( B78 . ( DataLoc (( B78 . B80 ) , B83) ) ) > ( 0 ) & (for B86 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B86 . B81 ) >= ( ( B86 . B82 ) + B84 ) & ( B86 . B80 ) = ( B78 . B80 ) & ( B86 . ( DataLoc (( B78 . B80 ) , B83) ) ) > ( 0 )) implies (( ( IExec (( B79 ';' ( AddTo (B80 , B83 , ( - B85 )) ) ) , R5 , B86) ) . B80 ) = ( B86 . B80 ) & ( ( IExec (( B79 ';' ( AddTo (B80 , B83 , ( - B85 )) ) ) , R5 , B86) ) . ( DataLoc (( B78 . B80 ) , B83) ) ) = ( ( B86 . ( DataLoc (( B78 . B80 ) , B83) ) ) - B85 ) & B79 is_closed_on B86 , R5 & B79 is_halting_on B86 , R5 & ( ( IExec (( B79 ';' ( AddTo (B80 , B83 , ( - B85 )) ) ) , R5 , B86) ) . B81 ) >= ( ( ( IExec (( B79 ';' ( AddTo (B80 , B83 , ( - B85 )) ) ) , R5 , B86) ) . B82 ) + B84 )))))) implies ( IExec (( for-down (B80 , B83 , B85 , B79) ) , R4 , B78) ) = ( IExec (( for-down (B80 , B83 , B85 , B79) ) , R4 , ( Initialize ( IExec (( B79 ';' ( AddTo (B80 , B83 , ( - B85 )) ) ) , R4 , B78) ) )) ))))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C73 being ( 0 ) -started (State of ( SCMPDS ));
let C74 being  halt-free  shiftable (Program of ( SCMPDS ));
let C75 , C76 , C77 being Int_position;
let C78 , C79 being Integer;
let C80 being (Element of ( NAT ));
set D73 = ( DataLoc (( C73 . C75 ) , C78) );
set D74 = ( C74 ';' ( AddTo (C75 , C78 , ( - C80 )) ) );
assume L254: C80 > ( 0 );
defpred S4[ set ] means (ex B87 being (State of ( SCMPDS )) st (B87 = $1 & ( B87 . C76 ) >= ( ( B87 . C77 ) + C79 )));
assume L255: ( C73 . C76 ) >= ( ( C73 . C77 ) + C79 );
L256: S4[ C73 ] by L255;
assume L257: ( C73 . D73 ) > ( 0 );
assume L258: (for B88 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B88 . C76 ) >= ( ( B88 . C77 ) + C79 ) & ( B88 . C75 ) = ( C73 . C75 ) & ( B88 . D73 ) > ( 0 )) implies (( ( IExec (D74 , R5 , B88) ) . C75 ) = ( B88 . C75 ) & ( ( IExec (D74 , R5 , B88) ) . D73 ) = ( ( B88 . D73 ) - C80 ) & C74 is_closed_on B88 , R5 & C74 is_halting_on B88 , R5 & ( ( IExec (D74 , R5 , B88) ) . C76 ) >= ( ( ( IExec (D74 , R5 , B88) ) . C77 ) + C79 )))));
L259:
now
let C81 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L260: S4[ C81 ]
and
L261: (( C81 . C75 ) = ( C73 . C75 ) & ( C81 . D73 ) > ( 0 ));
consider C82 being (State of ( SCMPDS )) such that L262: C82 = C81 and L263: ( C82 . C76 ) >= ( ( C82 . C77 ) + C79 ) by L260;
thus L264: (( ( IExec (D74 , R5 , C81) ) . C75 ) = ( C81 . C75 ) & ( ( IExec (D74 , R5 , C81) ) . D73 ) = ( ( C81 . D73 ) - C80 ) & C74 is_closed_on C81 , R5 & C74 is_halting_on C81 , R5) by L258 , L261 , L262 , L263;
thus L265: S4[ ( Initialize ( IExec (D74 , R5 , C81) ) ) ]
proof
take D75 = ( Initialize ( IExec (D74 , R5 , C81) ) );
thus L266: D75 = ( Initialize ( IExec (D74 , R5 , C81) ) );
L267: ( D75 . C76 ) = ( ( IExec (D74 , R5 , C81) ) . C76 ) by SCMPDS_5:15;
L268: ( D75 . C76 ) >= ( ( ( IExec (D74 , R5 , C81) ) . C77 ) + C79 ) by L267 , L258 , L261 , L262 , L263;
thus L269: thesis by L268 , SCMPDS_5:15;
end;

end;
L266: ( IExec (( for-down (C75 , C78 , C80 , C74) ) , R4 , C73) ) = ( IExec (( for-down (C75 , C78 , C80 , C74) ) , R4 , ( Initialize ( IExec (( C74 ';' ( AddTo (C75 , C78 , ( - C80 )) ) ) , R4 , C73) ) )) ) from ForDownExec(L254 , L257 , L256 , L259);
thus L267: thesis by L266;
end;
theorem
L268: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B89 being ( 0 ) -started (State of ( SCMPDS )) holds (for B90 being  halt-free  shiftable (Program of ( SCMPDS )) holds (for B91 being Int_position holds (for B92 being Integer holds (for B93 being (Element of ( NAT )) holds ((( B89 . ( DataLoc (( B89 . B91 ) , B92) ) ) > ( 0 ) & B93 > ( 0 ) & B91 <> ( DataLoc (( B89 . B91 ) , B92) ) & (for B94 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (( B94 . B91 ) = ( B89 . B91 ) implies (( ( IExec (B90 , R5 , B94) ) . B91 ) = ( B94 . B91 ) & ( ( IExec (B90 , R5 , B94) ) . ( DataLoc (( B89 . B91 ) , B92) ) ) = ( B94 . ( DataLoc (( B89 . B91 ) , B92) ) ) & B90 is_closed_on B94 , R5 & B90 is_halting_on B94 , R5))))) implies (( for-down (B91 , B92 , B93 , B90) ) is_closed_on B89 , R4 & ( for-down (B91 , B92 , B93 , B90) ) is_halting_on B89 , R4))))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C83 being ( 0 ) -started (State of ( SCMPDS ));
let C84 being  halt-free  shiftable (Program of ( SCMPDS ));
let C85 being Int_position;
let C86 being Integer;
let C87 being (Element of ( NAT ));
assume that
L269: (( C83 . ( DataLoc (( C83 . C85 ) , C86) ) ) > ( 0 ) & C87 > ( 0 ) & C85 <> ( DataLoc (( C83 . C85 ) , C86) ))
and
L270: (for B95 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (( B95 . C85 ) = ( C83 . C85 ) implies (( ( IExec (C84 , R5 , B95) ) . C85 ) = ( B95 . C85 ) & ( ( IExec (C84 , R5 , B95) ) . ( DataLoc (( C83 . C85 ) , C86) ) ) = ( B95 . ( DataLoc (( C83 . C85 ) , C86) ) ) & C84 is_closed_on B95 , R5 & C84 is_halting_on B95 , R5))));
L271: (for B96 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (((for B97 being Int_position holds (B97 in ( {} ) implies ( B96 . B97 ) = ( C83 . B97 ))) & ( B96 . C85 ) = ( C83 . C85 )) implies (( ( IExec (C84 , R5 , B96) ) . C85 ) = ( B96 . C85 ) & ( ( IExec (C84 , R5 , B96) ) . ( DataLoc (( C83 . C85 ) , C86) ) ) = ( B96 . ( DataLoc (( C83 . C85 ) , C86) ) ) & C84 is_closed_on B96 , R5 & C84 is_halting_on B96 , R5 & (for B98 being Int_position holds (B98 in ( {} ) implies ( ( IExec (C84 , R5 , B96) ) . B98 ) = ( B96 . B98 ))))))) by L270;
thus L272: thesis by L271 , L269 , SCMPDS_7:48;
end;
begin
definition
let C88 , C89 being (Element of ( NAT ));
func insert-sort (C88 , C89) -> (Program of ( SCMPDS )) equals 
( ( ( ( ( ( GBP ) := ( 0 ) ) ';' ( (( GBP ) , 1) := ( 0 ) ) ) ';' ( (( GBP ) , 2) := ( C88 - 1 ) ) ) ';' ( (( GBP ) , 3) := C89 ) ) ';' ( for-down (( GBP ) , 2 , 1 , ( ( ( ( ( AddTo (( GBP ) , 3 , 1) ) ';' ( (( GBP ) , 4) := (( GBP ) , 3) ) ) ';' ( AddTo (( GBP ) , 1 , 1) ) ) ';' ( (( GBP ) , 6) := (( GBP ) , 1) ) ) ';' ( while>0 (( GBP ) , 6 , ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( SubFrom (( GBP ) , 5 , ( intpos 4 ) , ( 0 )) ) ) ';' ( if>0 (( GBP ) , 5 , ( ( ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( (( intpos 4 ) , ( - 1 )) := (( intpos 4 ) , ( 0 )) ) ) ';' ( (( intpos 4 ) , ( 0 )) := (( GBP ) , 5) ) ) ';' ( AddTo (( GBP ) , 4 , ( - 1 )) ) ) ';' ( AddTo (( GBP ) , 6 , ( - 1 )) ) ) , ( Load ( (( GBP ) , 6) := ( 0 ) ) )) ) )) ) )) ) );
coherence;
end;
set D76 = ( AddTo (( GBP ) , 3 , 1) );
set D77 = ( (( GBP ) , 4) := (( GBP ) , 3) );
set D78 = ( AddTo (( GBP ) , 1 , 1) );
set D79 = ( (( GBP ) , 6) := (( GBP ) , 1) );
set D80 = ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) );
set D81 = ( SubFrom (( GBP ) , 5 , ( intpos 4 ) , ( 0 )) );
set D82 = ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) );
set D83 = ( (( intpos 4 ) , ( - 1 )) := (( intpos 4 ) , ( 0 )) );
set D84 = ( (( intpos 4 ) , ( 0 )) := (( GBP ) , 5) );
set D85 = ( AddTo (( GBP ) , 4 , ( - 1 )) );
set D86 = ( AddTo (( GBP ) , 6 , ( - 1 )) );
set D87 = ( Load ( (( GBP ) , 6) := ( 0 ) ) );
set D88 = ( ( ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( (( intpos 4 ) , ( - 1 )) := (( intpos 4 ) , ( 0 )) ) ) ';' ( (( intpos 4 ) , ( 0 )) := (( GBP ) , 5) ) ) ';' ( AddTo (( GBP ) , 4 , ( - 1 )) ) ) ';' ( AddTo (( GBP ) , 6 , ( - 1 )) ) );
set D89 = ( if>0 (( GBP ) , 5 , D88 , D87) );
set D90 = ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( SubFrom (( GBP ) , 5 , ( intpos 4 ) , ( 0 )) ) ) ';' ( if>0 (( GBP ) , 5 , D88 , D87) ) );
set D91 = ( while>0 (( GBP ) , 6 , D90) );
set D92 = ( ( ( D76 ';' D77 ) ';' D78 ) ';' D79 );
set D93 = ( D92 ';' D91 );
set D94 = ( for-down (( GBP ) , 2 , 1 , D93) );
L274: ( card D90 ) = 10
proof
thus L275: ( card D90 ) = ( ( card ( D80 ';' D81 ) ) + ( card D89 ) ) by AFINSQ_1:17
.= ( 2 + ( card D89 ) ) by SCMP_GCD:5
.= ( 2 + ( ( ( card D88 ) + ( card D87 ) ) + 2 ) ) by SCMPDS_6:65
.= ( 2 + ( ( ( ( card ( ( ( D82 ';' D83 ) ';' D84 ) ';' D85 ) ) + 1 ) + ( card D87 ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( card ( ( D82 ';' D83 ) ';' D84 ) ) + 1 ) + 1 ) + ( card D87 ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( ( card ( D82 ';' D83 ) ) + 1 ) + 1 ) + 1 ) + ( card D87 ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( 2 + 1 ) + 1 ) + 1 ) + ( card D87 ) ) + 2 ) ) by SCMP_GCD:5
.= ( 2 + ( ( ( ( ( 2 + 1 ) + 1 ) + 1 ) + 1 ) + 2 ) ) by COMPOS_1:54
.= 10;
end;
L276: ( card D93 ) = 16
proof
thus L277: ( card D93 ) = ( ( card ( ( ( D76 ';' D77 ) ';' D78 ) ';' D79 ) ) + ( card D91 ) ) by AFINSQ_1:17
.= ( ( ( card ( ( D76 ';' D77 ) ';' D78 ) ) + 1 ) + ( card D91 ) ) by SCMP_GCD:4
.= ( ( ( ( card ( D76 ';' D77 ) ) + 1 ) + 1 ) + ( card D91 ) ) by SCMP_GCD:4
.= ( ( ( 2 + 1 ) + 1 ) + ( card D91 ) ) by SCMP_GCD:5
.= ( ( ( 2 + 1 ) + 1 ) + ( 10 + 2 ) ) by L274 , SCMPDS_8:17
.= 16;
end;
set D95 = ( intpos 1 );
set D96 = ( intpos 2 );
set D97 = ( intpos 3 );
set D98 = ( intpos 4 );
set D99 = ( intpos 5 );
set D100 = ( intpos 6 );
L278: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B99 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B99 . D98 ) >= ( 7 + ( B99 . D100 ) ) & ( B99 . ( GBP ) ) = ( 0 ) & ( B99 . D100 ) > ( 0 )) implies (( ( IExec (D90 , R4 , B99) ) . ( GBP ) ) = ( 0 ) & ( ( IExec (D90 , R4 , B99) ) . D95 ) = ( B99 . D95 )))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C90 being ( 0 ) -started (State of ( SCMPDS ));
set D101 = ( GBP );
set D102 = ( DataLoc (( C90 . D98 ) , ( - 1 )) );
set D103 = ( DataLoc (( C90 . D98 ) , ( 0 )) );
assume that
L279: ( C90 . D98 ) >= ( 7 + ( C90 . D100 ) )
and
L280: ( C90 . D101 ) = ( 0 )
and
L281: ( C90 . D100 ) > ( 0 );
L282: ( 7 + ( C90 . D100 ) ) > ( 7 + ( 0 ) ) by L281 , XREAL_1:6;
set D104 = C90;
set D105 = ( Exec (D80 , D104) );
set D106 = ( IExec (( D80 ';' D81 ) , R4 , C90) );
set D107 = R4;
L283: ( DataLoc (( D104 . D101 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L280 , SCMP_GCD:1;
L284: ( D105 . D101 ) = ( 0 ) by L283 , L280 , AMI_3:10 , SCMPDS_2:47;
L285: ( DataLoc (( D105 . D101 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L284 , SCMP_GCD:1;
L286: ( D105 . D98 ) = ( C90 . D98 ) by L283 , AMI_3:10 , SCMPDS_2:47;
L287: ( C90 . D98 ) >= ( 1 + ( 6 + ( C90 . D100 ) ) ) by L279;
L288: ( ( C90 . D98 ) - 1 ) >= ( 6 + ( C90 . D100 ) ) by L287 , XREAL_1:19;
set D108 = ( (D101 , 6) := ( 0 ) );
set D109 = ( Initialize D106 );
set D110 = D107;
set D111 = ( IExec (( ( ( D82 ';' D83 ) ';' D84 ) ';' D85 ) , D107 , ( Initialize D106 )) );
set D112 = ( IExec (( ( D82 ';' D83 ) ';' D84 ) , D107 , ( Initialize D106 )) );
set D113 = ( IExec (( D82 ';' D83 ) , D107 , ( Initialize D106 )) );
set D114 = ( Exec (D82 , D109) );
L289: ( D106 . D101 ) = ( ( Exec (D81 , D105) ) . D101 ) by SCMPDS_5:42
.= ( 0 ) by L284 , L285 , AMI_3:10 , SCMPDS_2:50;
L290: ( D109 . D101 ) = ( 0 ) by L289 , SCMPDS_5:15;
L291: ( DataLoc (( D109 . D101 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L290 , SCMP_GCD:1;
L292: ( D114 . D101 ) = ( 0 ) by L291 , L290 , AMI_3:10 , SCMPDS_2:47;
L293: ( D106 . D98 ) = ( ( Exec (D81 , D105) ) . D98 ) by SCMPDS_5:42
.= ( C90 . D98 ) by L286 , L285 , AMI_3:10 , SCMPDS_2:50;
L294: ( D109 . D98 ) = ( C90 . D98 ) by L293 , SCMPDS_5:15;
L295: ( D114 . D98 ) = ( C90 . D98 ) by L294 , L291 , AMI_3:10 , SCMPDS_2:47;
L296: ( 6 + ( C90 . D100 ) ) > ( 6 + ( 0 ) ) by L281 , XREAL_1:6;
L297: ( 0 ) <> ( abs ( ( D114 . D98 ) + ( - 1 ) ) ) by L296 , L288 , L295 , ABSVALUE:def 1;
L298: D101 <> ( DataLoc (( D114 . D98 ) , ( - 1 )) ) by L297 , XTUPLE_0:1;
L299: ( ( C90 . D98 ) - 1 ) > ( 0 ) by L281 , L287 , XREAL_1:19;
L300: ( abs ( ( D114 . D98 ) + ( - 1 ) ) ) = ( ( C90 . D98 ) - 1 ) by L299 , L295 , ABSVALUE:def 1;
L301: 4 <> ( abs ( ( D114 . D98 ) + ( - 1 ) ) ) by L300 , L288 , L296 , XXREAL_0:2;
L302: D98 <> ( DataLoc (( D114 . D98 ) , ( - 1 )) ) by L301 , XTUPLE_0:1;
L303: ( D113 . D98 ) = ( ( Exec (D83 , D114) ) . D98 ) by SCMPDS_5:42
.= ( C90 . D98 ) by L295 , L302 , SCMPDS_2:47;
L304: ( 0 ) <> ( abs ( ( D113 . D98 ) + ( 0 ) ) ) by L303 , L279 , L282 , ABSVALUE:def 1;
L305: D101 <> ( DataLoc (( D113 . D98 ) , ( 0 )) ) by L304 , XTUPLE_0:1;
L306: ( D113 . D101 ) = ( ( Exec (D83 , D114) ) . D101 ) by SCMPDS_5:42
.= ( 0 ) by L292 , L298 , SCMPDS_2:47;
L307: ( D112 . D101 ) = ( ( Exec (D84 , D113) ) . D101 ) by SCMPDS_5:41
.= ( 0 ) by L306 , L305 , SCMPDS_2:47;
L308: D101 <> ( DataLoc (( D112 . D101 ) , 4) ) by L307 , AMI_3:10 , SCMP_GCD:1;
L309: ( D105 . D95 ) = ( C90 . D95 ) by L283 , AMI_3:10 , SCMPDS_2:47;
L310: ( D106 . D95 ) = ( ( Exec (D81 , D105) ) . D95 ) by SCMPDS_5:42
.= ( C90 . D95 ) by L309 , L285 , AMI_3:10 , SCMPDS_2:50;
L311: ( D109 . D95 ) = ( C90 . D95 ) by L310 , SCMPDS_5:15;
L312: ( D114 . D95 ) = ( C90 . D95 ) by L311 , L291 , AMI_3:10 , SCMPDS_2:47;
L313: ( D111 . D101 ) = ( ( Exec (D85 , D112) ) . D101 ) by SCMPDS_5:41
.= ( 0 ) by L307 , L308 , SCMPDS_2:48;
L314: ( DataLoc (( D111 . D101 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L313 , SCMP_GCD:1;
L315: ( DataLoc (( D109 . D101 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L290 , SCMP_GCD:1;
L316:
now
per cases ;
suppose L317: ( ( Initialize D106 ) . ( DataLoc (( ( Initialize D106 ) . D101 ) , 5) ) ) <= ( 0 );

thus L318: ( ( IExec (D89 , D107 , ( Initialize D106 )) ) . D101 ) = ( ( IExec (D87 , D107 , ( Initialize D106 )) ) . D101 ) by L317 , SCMPDS_6:74
.= ( ( Exec (D108 , D109) ) . D101 ) by SCMPDS_5:40
.= ( 0 ) by L290 , L315 , AMI_3:10 , SCMPDS_2:46;
end;
suppose L319: ( ( Initialize D106 ) . ( DataLoc (( ( Initialize D106 ) . D101 ) , 5) ) ) > ( 0 );

thus L320: ( ( IExec (D89 , D107 , ( Initialize D106 )) ) . D101 ) = ( ( IExec (D88 , D107 , ( Initialize D106 )) ) . D101 ) by L319 , SCMPDS_6:73
.= ( ( Exec (D86 , D111) ) . D101 ) by SCMPDS_5:41
.= ( 0 ) by L313 , L314 , AMI_3:10 , SCMPDS_2:48;
end;
end;
thus L322: ( ( IExec (D90 , R4 , C90) ) . D101 ) = ( 0 ) by L316 , SCMPDS_5:35;
L323: D95 <> ( DataLoc (( D112 . D101 ) , 4) ) by L307 , AMI_3:10 , SCMP_GCD:1;
L324: ( abs ( ( D113 . D98 ) + ( 0 ) ) ) = ( C90 . D98 ) by L279 , L282 , L303 , ABSVALUE:def 1;
L325: 1 <> ( abs ( ( D113 . D98 ) + ( 0 ) ) ) by L324 , L279 , L282 , XXREAL_0:2;
L326: D95 <> ( DataLoc (( D113 . D98 ) , ( 0 )) ) by L325 , XTUPLE_0:1;
L327: 1 <> ( abs ( ( D114 . D98 ) + ( - 1 ) ) ) by L288 , L296 , L300 , XXREAL_0:2;
L328: D95 <> ( DataLoc (( D114 . D98 ) , ( - 1 )) ) by L327 , XTUPLE_0:1;
L329: ( D113 . D95 ) = ( ( Exec (D83 , D114) ) . D95 ) by SCMPDS_5:42
.= ( C90 . D95 ) by L312 , L328 , SCMPDS_2:47;
L330: ( D112 . D95 ) = ( ( Exec (D84 , D113) ) . D95 ) by SCMPDS_5:41
.= ( C90 . D95 ) by L329 , L326 , SCMPDS_2:47;
L331: ( D111 . D95 ) = ( ( Exec (D85 , D112) ) . D95 ) by SCMPDS_5:41
.= ( C90 . D95 ) by L330 , L323 , SCMPDS_2:48;
L332:
now
per cases ;
suppose L333: ( ( Initialize D106 ) . ( DataLoc (( ( Initialize D106 ) . D101 ) , 5) ) ) <= ( 0 );

thus L334: ( ( IExec (D89 , D107 , ( Initialize D106 )) ) . D95 ) = ( ( IExec (D87 , D107 , ( Initialize D106 )) ) . D95 ) by L333 , SCMPDS_6:74
.= ( ( Exec (D108 , D109) ) . D95 ) by SCMPDS_5:40
.= ( C90 . D95 ) by L311 , L315 , AMI_3:10 , SCMPDS_2:46;
end;
suppose L335: ( ( Initialize D106 ) . ( DataLoc (( ( Initialize D106 ) . D101 ) , 5) ) ) > ( 0 );

thus L336: ( ( IExec (D89 , D107 , ( Initialize D106 )) ) . D95 ) = ( ( IExec (D88 , D107 , ( Initialize D106 )) ) . D95 ) by L335 , SCMPDS_6:73
.= ( ( Exec (D86 , D111) ) . D95 ) by SCMPDS_5:41
.= ( C90 . D95 ) by L331 , L314 , AMI_3:10 , SCMPDS_2:48;
end;
end;
thus L338: thesis by L332 , SCMPDS_5:35;
end;
L339: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B100 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B100 . D98 ) >= ( 7 + ( B100 . D100 ) ) & ( B100 . ( GBP ) ) = ( 0 ) & ( B100 . D100 ) > ( 0 )) implies (( ( IExec (D90 , R4 , B100) ) . D96 ) = ( B100 . D96 ) & ( ( IExec (D90 , R4 , B100) ) . D97 ) = ( B100 . D97 ) & ( ( IExec (D90 , R4 , B100) ) . D100 ) < ( B100 . D100 ) & ( ( IExec (D90 , R4 , B100) ) . D98 ) >= ( 7 + ( ( IExec (D90 , R4 , B100) ) . D100 ) ) & (for B101 being Nat holds ((B101 >= 7 & B101 <> ( ( B100 . D98 ) - 1 ) & B101 <> ( B100 . D98 )) implies ( ( IExec (D90 , R4 , B100) ) . ( intpos B101 ) ) = ( B100 . ( intpos B101 ) ))) & (( B100 . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) > ( B100 . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) implies (( ( IExec (D90 , R4 , B100) ) . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) = ( B100 . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) & ( ( IExec (D90 , R4 , B100) ) . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) = ( B100 . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) & ( ( IExec (D90 , R4 , B100) ) . D100 ) = ( ( B100 . D100 ) - 1 ) & ( ( IExec (D90 , R4 , B100) ) . D98 ) = ( ( B100 . D98 ) - 1 ))) & (( B100 . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) <= ( B100 . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) implies (( ( IExec (D90 , R4 , B100) ) . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) = ( B100 . ( DataLoc (( B100 . D98 ) , ( - 1 )) ) ) & ( ( IExec (D90 , R4 , B100) ) . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) = ( B100 . ( DataLoc (( B100 . D98 ) , ( 0 )) ) ) & ( ( IExec (D90 , R4 , B100) ) . D100 ) = ( 0 )))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C91 being ( 0 ) -started (State of ( SCMPDS ));
set D115 = ( GBP );
set D116 = ( DataLoc (( C91 . D98 ) , ( - 1 )) );
set D117 = ( DataLoc (( C91 . D98 ) , ( 0 )) );
assume that
L340: ( C91 . D98 ) >= ( 7 + ( C91 . D100 ) )
and
L341: ( C91 . D115 ) = ( 0 )
and
L342: ( C91 . D100 ) > ( 0 );
set D118 = C91;
set D119 = ( Exec (D80 , D118) );
set D120 = ( IExec (( D80 ';' D81 ) , R4 , C91) );
set D121 = R4;
L343: ( 7 + ( C91 . D100 ) ) > ( 7 + ( 0 ) ) by L342 , XREAL_1:6;
L344: ( abs ( C91 . D98 ) ) = ( C91 . D98 ) by L343 , L340 , ABSVALUE:def 1;
set D122 = ( (D115 , 6) := ( 0 ) );
set D123 = ( Initialize D120 );
set D124 = D121;
set D125 = ( IExec (( ( ( D82 ';' D83 ) ';' D84 ) ';' D85 ) , D121 , ( Initialize D120 )) );
set D126 = ( IExec (( ( D82 ';' D83 ) ';' D84 ) , D121 , ( Initialize D120 )) );
set D127 = ( IExec (( D82 ';' D83 ) , D121 , ( Initialize D120 )) );
set D128 = ( Exec (D82 , D123) );
L345: ( DataLoc (( D118 . D115 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L341 , SCMP_GCD:1;
L346: ( D119 . D115 ) = ( 0 ) by L345 , L341 , AMI_3:10 , SCMPDS_2:47;
L347: ( DataLoc (( D119 . D115 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L346 , SCMP_GCD:1;
L348: ( abs ( ( D119 . D115 ) + 5 ) ) = ( ( 0 ) + 5 ) by L347 , XTUPLE_0:1;
L349: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D119 . D115 ) + 5 ) ) by L348 , L340 , L343 , L344 , XXREAL_0:2;
L350: D117 <> ( DataLoc (( D119 . D115 ) , 5) ) by L349 , XTUPLE_0:1;
L351: ( abs ( ( D118 . D115 ) + 5 ) ) = ( ( 0 ) + 5 ) by L345 , XTUPLE_0:1;
L352: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D118 . D115 ) + 5 ) ) by L351 , L340 , L343 , L344 , XXREAL_0:2;
L353: (( D118 . D117 ) = ( C91 . D117 ) & D117 <> ( DataLoc (( D118 . D115 ) , 5) )) by L352 , XTUPLE_0:1;
L354: ( D119 . D117 ) = ( C91 . D117 ) by L353 , SCMPDS_2:47;
L355: ( D119 . D99 ) = ( C91 . D116 ) by L345 , SCMPDS_2:47;
L356: ( D119 . D98 ) = ( C91 . D98 ) by L345 , AMI_3:10 , SCMPDS_2:47;
L357: ( D120 . D117 ) = ( ( Exec (D81 , D119) ) . D117 ) by SCMPDS_5:42
.= ( C91 . D117 ) by L354 , L350 , SCMPDS_2:50;
L358: ( D123 . D117 ) = ( C91 . D117 ) by L357 , SCMPDS_5:15;
L359: ( D123 . D115 ) = ( D120 . D115 ) by SCMPDS_5:15
.= ( ( Exec (D81 , D119) ) . D115 ) by SCMPDS_5:42
.= ( 0 ) by L346 , L347 , AMI_3:10 , SCMPDS_2:50;
L360: ( DataLoc (( D123 . D115 ) , 5) ) = ( intpos ( ( 0 ) + 5 ) ) by L359 , SCMP_GCD:1;
L361: ( D128 . D115 ) = ( 0 ) by L360 , L359 , AMI_3:10 , SCMPDS_2:47;
L362: ( abs ( ( D123 . D115 ) + 5 ) ) = ( ( 0 ) + 5 ) by L360 , XTUPLE_0:1;
L363: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D123 . D115 ) + 5 ) ) by L362 , L340 , L343 , L344 , XXREAL_0:2;
L364: D117 <> ( DataLoc (( D123 . D115 ) , 5) ) by L363 , XTUPLE_0:1;
L365: ( D128 . D117 ) = ( C91 . D117 ) by L364 , L358 , SCMPDS_2:47;
L366: ( D120 . D98 ) = ( ( Exec (D81 , D119) ) . D98 ) by SCMPDS_5:42
.= ( C91 . D98 ) by L356 , L347 , AMI_3:10 , SCMPDS_2:50;
L367: ( D123 . D98 ) = ( C91 . D98 ) by L366 , SCMPDS_5:15;
L368: ( D128 . D98 ) = ( C91 . D98 ) by L367 , L360 , AMI_3:10 , SCMPDS_2:47;
L369: ( D127 . D116 ) = ( ( Exec (D83 , D128) ) . ( DataLoc (( D128 . D98 ) , ( - 1 )) ) ) by L368 , SCMPDS_5:42
.= ( C91 . D117 ) by L368 , L365 , SCMPDS_2:47;
L370: ( D119 . D97 ) = ( C91 . D97 ) by L345 , AMI_3:10 , SCMPDS_2:47;
L371: ( D120 . D97 ) = ( ( Exec (D81 , D119) ) . D97 ) by SCMPDS_5:42
.= ( C91 . D97 ) by L370 , L347 , AMI_3:10 , SCMPDS_2:50;
L372: ( D123 . D97 ) = ( C91 . D97 ) by L371 , SCMPDS_5:15;
L373: ( D128 . D97 ) = ( C91 . D97 ) by L372 , L360 , AMI_3:10 , SCMPDS_2:47;
L374: ( C91 . D98 ) >= ( 1 + ( 6 + ( C91 . D100 ) ) ) by L340;
L375: ( ( C91 . D98 ) - 1 ) >= ( 6 + ( C91 . D100 ) ) by L374 , XREAL_1:19;
L376: ( D119 . D96 ) = ( C91 . D96 ) by L345 , AMI_3:10 , SCMPDS_2:47;
L377: ( D120 . D96 ) = ( ( Exec (D81 , D119) ) . D96 ) by SCMPDS_5:42
.= ( C91 . D96 ) by L376 , L347 , AMI_3:10 , SCMPDS_2:50;
L378: ( D123 . D96 ) = ( C91 . D96 ) by L377 , SCMPDS_5:15;
L379: ( D128 . D96 ) = ( C91 . D96 ) by L378 , L360 , AMI_3:10 , SCMPDS_2:47;
L380: ( D119 . D100 ) = ( C91 . D100 ) by L345 , AMI_3:10 , SCMPDS_2:47;
L381: ( D120 . D100 ) = ( ( Exec (D81 , D119) ) . D100 ) by SCMPDS_5:42
.= ( C91 . D100 ) by L380 , L347 , AMI_3:10 , SCMPDS_2:50;
L382: ( D123 . D100 ) = ( C91 . D100 ) by L381 , SCMPDS_5:15;
L383: ( D128 . D100 ) = ( C91 . D100 ) by L382 , L360 , AMI_3:10 , SCMPDS_2:47;
L384: ( DataLoc (( D123 . D115 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L359 , SCMP_GCD:1;
L385:
now
assume L386: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) <= ( 0 );
L387: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D100 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D100 ) by L386 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D100 ) by SCMPDS_5:40
.= ( 0 ) by L384 , SCMPDS_2:46;
thus L388: ( ( IExec (D90 , R4 , C91) ) . D100 ) = ( 0 ) by L387 , SCMPDS_5:35;
end;
L389: ( 6 + ( C91 . D100 ) ) > ( 6 + ( 0 ) ) by L342 , XREAL_1:6;
L390: ( 0 ) <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L389 , L375 , L368 , ABSVALUE:def 1;
L391: D115 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L390 , XTUPLE_0:1;
L392: ( ( C91 . D98 ) - 1 ) > ( 0 ) by L342 , L374 , XREAL_1:19;
L393: ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) = ( ( C91 . D98 ) - 1 ) by L392 , L368 , ABSVALUE:def 1;
L394: 4 <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L393 , L375 , L389 , XXREAL_0:2;
L395: D98 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L394 , XTUPLE_0:1;
L396: ( D127 . D98 ) = ( ( Exec (D83 , D128) ) . D98 ) by SCMPDS_5:42
.= ( C91 . D98 ) by L368 , L395 , SCMPDS_2:47;
L397: ( abs ( ( D127 . D98 ) + ( 0 ) ) ) = ( C91 . D98 ) by L396 , L340 , L343 , ABSVALUE:def 1;
L398: 4 <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L397 , L340 , L343 , XXREAL_0:2;
L399: D98 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L398 , XTUPLE_0:1;
L400: 3 <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L375 , L389 , L393 , XXREAL_0:2;
L401: D97 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L400 , XTUPLE_0:1;
L402: 3 <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L340 , L343 , L397 , XXREAL_0:2;
L403: D97 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L402 , XTUPLE_0:1;
L404: ( D127 . D97 ) = ( ( Exec (D83 , D128) ) . D97 ) by SCMPDS_5:42
.= ( C91 . D97 ) by L373 , L401 , SCMPDS_2:47;
L405: ( D126 . D97 ) = ( ( Exec (D84 , D127) ) . D97 ) by SCMPDS_5:41
.= ( C91 . D97 ) by L404 , L403 , SCMPDS_2:47;
L406: 2 <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L340 , L343 , L397 , XXREAL_0:2;
L407: D96 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L406 , XTUPLE_0:1;
L408: ( D126 . D98 ) = ( ( Exec (D84 , D127) ) . D98 ) by SCMPDS_5:41
.= ( C91 . D98 ) by L396 , L399 , SCMPDS_2:47;
L409: ( D127 . D115 ) = ( ( Exec (D83 , D128) ) . D115 ) by SCMPDS_5:42
.= ( 0 ) by L361 , L391 , SCMPDS_2:47;
L410: ( ( 2 * ( abs ( ( C91 . D98 ) + ( - 1 ) ) ) ) + 1 ) = ( ( 2 * ( ( C91 . D98 ) - 1 ) ) + 1 ) by L375 , L389 , ABSVALUE:def 1;
L411: ( abs ( ( C91 . D98 ) + ( - 1 ) ) ) <> ( abs ( ( D119 . D115 ) + 5 ) ) by L410 , L342 , L375 , L348 , XREAL_1:6;
L412: D116 <> ( DataLoc (( D119 . D115 ) , 5) ) by L411 , XTUPLE_0:1;
L413: ( 0 ) <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L340 , L343 , L396 , ABSVALUE:def 1;
L414: D115 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L413 , XTUPLE_0:1;
L415: ( D126 . D115 ) = ( ( Exec (D84 , D127) ) . D115 ) by SCMPDS_5:41
.= ( 0 ) by L409 , L414 , SCMPDS_2:47;
L416: D115 <> ( DataLoc (( D126 . D115 ) , 4) ) by L415 , AMI_3:10 , SCMP_GCD:1;
L417: 2 <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L375 , L389 , L393 , XXREAL_0:2;
L418: D96 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L417 , XTUPLE_0:1;
L419: ( D127 . D96 ) = ( ( Exec (D83 , D128) ) . D96 ) by SCMPDS_5:42
.= ( C91 . D96 ) by L379 , L418 , SCMPDS_2:47;
L420: ( D126 . D96 ) = ( ( Exec (D84 , D127) ) . D96 ) by SCMPDS_5:41
.= ( C91 . D96 ) by L419 , L407 , SCMPDS_2:47;
L421: D96 <> ( DataLoc (( D126 . D115 ) , 4) ) by L415 , AMI_3:10 , SCMP_GCD:1;
L422: ( D125 . D115 ) = ( ( Exec (D85 , D126) ) . D115 ) by SCMPDS_5:41
.= ( 0 ) by L415 , L416 , SCMPDS_2:48;
L423: ( DataLoc (( D125 . D115 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L422 , SCMP_GCD:1;
L424: ( abs ( ( D125 . D115 ) + 6 ) ) = ( ( 0 ) + 6 ) by L423 , XTUPLE_0:1;
L425: ( DataLoc (( D126 . D115 ) , 4) ) = ( intpos ( ( 0 ) + 4 ) ) by L415 , SCMP_GCD:1;
L426: ( abs ( ( D126 . D115 ) + 4 ) ) = ( ( 0 ) + 4 ) by L425 , XTUPLE_0:1;
L427: ( abs ( ( C91 . D98 ) + ( - 1 ) ) ) <> ( abs ( ( D126 . D115 ) + 4 ) ) by L426 , L375 , L389 , L410 , XXREAL_0:2;
L428: D116 <> ( DataLoc (( D126 . D115 ) , 4) ) by L427 , XTUPLE_0:1;
L429: ( D125 . D96 ) = ( ( Exec (D85 , D126) ) . D96 ) by SCMPDS_5:41
.= ( C91 . D96 ) by L420 , L421 , SCMPDS_2:48;
L430:
now
per cases ;
suppose L431: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) <= ( 0 );

thus L432: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D96 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D96 ) by L431 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D96 ) by SCMPDS_5:40
.= ( C91 . D96 ) by L378 , L384 , AMI_3:10 , SCMPDS_2:46;
end;
suppose L433: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );

thus L434: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D96 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D96 ) by L433 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D96 ) by SCMPDS_5:41
.= ( C91 . D96 ) by L429 , L423 , AMI_3:10 , SCMPDS_2:48;
end;
end;
thus L436: ( ( IExec (D90 , R4 , C91) ) . D96 ) = ( C91 . D96 ) by L430 , SCMPDS_5:35;
L437: D97 <> ( DataLoc (( D126 . D115 ) , 4) ) by L415 , AMI_3:10 , SCMP_GCD:1;
L438: ( D125 . D97 ) = ( ( Exec (D85 , D126) ) . D97 ) by SCMPDS_5:41
.= ( C91 . D97 ) by L405 , L437 , SCMPDS_2:48;
L439:
now
per cases ;
suppose L440: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) <= ( 0 );

thus L441: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D97 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D97 ) by L440 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D97 ) by SCMPDS_5:40
.= ( C91 . D97 ) by L372 , L384 , AMI_3:10 , SCMPDS_2:46;
end;
suppose L442: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );

thus L443: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D97 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D97 ) by L442 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D97 ) by SCMPDS_5:41
.= ( C91 . D97 ) by L438 , L423 , AMI_3:10 , SCMPDS_2:48;
end;
end;
thus L445: ( ( IExec (D90 , R4 , C91) ) . D97 ) = ( C91 . D97 ) by L439 , SCMPDS_5:35;
L446: D100 <> ( DataLoc (( D126 . D115 ) , 4) ) by L415 , AMI_3:10 , SCMP_GCD:1;
L447: 6 <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L374 , L389 , L393 , XREAL_1:19;
L448: D100 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L447 , XTUPLE_0:1;
L449: ( D127 . D100 ) = ( ( Exec (D83 , D128) ) . D100 ) by SCMPDS_5:42
.= ( C91 . D100 ) by L383 , L448 , SCMPDS_2:47;
L450: 6 <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L340 , L343 , L397 , XXREAL_0:2;
L451: D100 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L450 , XTUPLE_0:1;
L452: ( D126 . D100 ) = ( ( Exec (D84 , D127) ) . D100 ) by SCMPDS_5:41
.= ( C91 . D100 ) by L449 , L451 , SCMPDS_2:47;
L453: ( D125 . D100 ) = ( ( Exec (D85 , D126) ) . D100 ) by SCMPDS_5:41
.= ( C91 . D100 ) by L452 , L446 , SCMPDS_2:48;
L454: ( D125 . D98 ) = ( ( Exec (D85 , D126) ) . D98 ) by SCMPDS_5:41
.= ( ( D126 . D98 ) + ( - 1 ) ) by L425 , SCMPDS_2:48
.= ( ( C91 . D98 ) - 1 ) by L408;
L455:
now
assume L456: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );
L457: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D100 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D100 ) by L456 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D100 ) by SCMPDS_5:41
.= ( ( C91 . D100 ) + ( - 1 ) ) by L453 , L423 , SCMPDS_2:48
.= ( ( C91 . D100 ) - 1 );
thus L458: ( ( IExec (D90 , R4 , C91) ) . D100 ) = ( ( C91 . D100 ) - 1 ) by L457 , SCMPDS_5:35;
L459: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D98 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D98 ) by L456 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D98 ) by SCMPDS_5:41
.= ( ( C91 . D98 ) - 1 ) by L454 , L423 , AMI_3:10 , SCMPDS_2:48;
thus L460: ( ( IExec (D90 , R4 , C91) ) . D98 ) = ( ( C91 . D98 ) - 1 ) by L459 , SCMPDS_5:35;
end;
thus L461:now
per cases ;
suppose L462: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) <= ( 0 );

thus L463: ( ( IExec (D90 , R4 , C91) ) . D100 ) < ( C91 . D100 ) by L462 , L342 , L385;
end;
suppose L464: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );

thus L465: ( ( IExec (D90 , R4 , C91) ) . D100 ) < ( C91 . D100 ) by L464 , L455 , XREAL_1:146;
end;
end;
thus L467:now
per cases ;
suppose L468: ( D123 . ( DataLoc (( D123 . ( GBP ) ) , 5) ) ) <= ( 0 );

L469: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D98 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D98 ) by L468 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D98 ) by SCMPDS_5:40
.= ( C91 . D98 ) by L367 , L384 , AMI_3:10 , SCMPDS_2:46;
L470: ( ( IExec (D90 , R4 , C91) ) . D98 ) = ( C91 . D98 ) by L469 , SCMPDS_5:35;
thus L471: ( ( IExec (D90 , R4 , C91) ) . D98 ) >= ( 7 + ( ( IExec (D90 , R4 , C91) ) . D100 ) ) by L470 , L340 , L343 , L385 , L468 , XXREAL_0:2;
end;
suppose L472: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );

L473: ( ( C91 . D98 ) - 1 ) >= ( ( 7 + ( C91 . D100 ) ) - 1 ) by L340 , XREAL_1:9;
thus L474: ( ( IExec (D90 , R4 , C91) ) . D98 ) >= ( 7 + ( ( IExec (D90 , R4 , C91) ) . D100 ) ) by L473 , L455 , L472;
end;
end;
L476:
now
let C92 being (Element of ( NAT ));
assume that
L477: C92 >= 7
and
L478: C92 <> ( ( C91 . D98 ) - 1 )
and
L479: C92 <> ( C91 . D98 );
L480: C92 > 5 by L477 , XXREAL_0:2;
thus L481: ( D119 . ( intpos C92 ) ) = ( C91 . ( intpos C92 ) ) by L480 , L345 , AMI_3:10 , SCMPDS_2:47;
end;
L482:
now
let C93 being (Element of ( NAT ));
assume that
L483: C93 >= 7
and
L484: (C93 <> ( ( C91 . D98 ) - 1 ) & C93 <> ( C91 . D98 ));
L485: C93 > 5 by L483 , XXREAL_0:2;
thus L486: ( D120 . ( intpos C93 ) ) = ( ( Exec (D81 , D119) ) . ( intpos C93 ) ) by SCMPDS_5:42
.= ( D119 . ( intpos C93 ) ) by L347 , L485 , AMI_3:10 , SCMPDS_2:50
.= ( C91 . ( intpos C93 ) ) by L476 , L483 , L484;
end;
L487:
now
let C94 being (Element of ( NAT ));
assume that
L488: C94 >= 7
and
L489: (C94 <> ( ( C91 . D98 ) - 1 ) & C94 <> ( C91 . D98 ));
L490: C94 > 5 by L488 , XXREAL_0:2;
thus L491: ( D128 . ( intpos C94 ) ) = ( D123 . ( intpos C94 ) ) by L490 , L360 , AMI_3:10 , SCMPDS_2:47
.= ( D120 . ( intpos C94 ) ) by SCMPDS_5:15
.= ( C91 . ( intpos C94 ) ) by L482 , L488 , L489;
end;
L492:
now
let C95 being (Element of ( NAT ));
assume that
L493: C95 >= 7
and
L494: C95 <> ( ( C91 . D98 ) - 1 )
and
L495: C95 <> ( C91 . D98 );
L496: ( intpos C95 ) <> ( DataLoc (( D128 . D98 ) , ( - 1 )) )
proof
assume L497: ( intpos C95 ) = ( DataLoc (( D128 . D98 ) , ( - 1 )) );
L498: C95 = ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L497 , XTUPLE_0:1;
thus L499: contradiction by L498 , L392 , L368 , L494 , ABSVALUE:def 1;
end;
thus L500: ( D127 . ( intpos C95 ) ) = ( ( Exec (D83 , D128) ) . ( intpos C95 ) ) by SCMPDS_5:42
.= ( D128 . ( intpos C95 ) ) by L496 , SCMPDS_2:47
.= ( C91 . ( intpos C95 ) ) by L487 , L493 , L494 , L495;
end;
L501:
now
let C96 being (Element of ( NAT ));
assume that
L502: (C96 >= 7 & C96 <> ( ( C91 . D98 ) - 1 ))
and
L503: C96 <> ( C91 . D98 );
L504: ( intpos C96 ) <> ( DataLoc (( D127 . D98 ) , ( 0 )) )
proof
assume L505: ( intpos C96 ) = ( DataLoc (( D127 . D98 ) , ( 0 )) );
L506: C96 = ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L505 , XTUPLE_0:1;
thus L507: contradiction by L506 , L340 , L343 , L396 , L503 , ABSVALUE:def 1;
end;
thus L508: ( D126 . ( intpos C96 ) ) = ( ( Exec (D84 , D127) ) . ( intpos C96 ) ) by SCMPDS_5:41
.= ( D127 . ( intpos C96 ) ) by L504 , SCMPDS_2:47
.= ( C91 . ( intpos C96 ) ) by L492 , L502 , L503;
end;
L509:
now
let C97 being (Element of ( NAT ));
assume that
L510: C97 >= 7
and
L511: (C97 <> ( ( C91 . D98 ) - 1 ) & C97 <> ( C91 . D98 ));
L512: C97 > 4 by L510 , XXREAL_0:2;
L513: ( intpos C97 ) <> ( DataLoc (( D126 . D115 ) , 4) ) by L512 , L415 , AMI_3:10 , SCMP_GCD:1;
thus L514: ( D125 . ( intpos C97 ) ) = ( ( Exec (D85 , D126) ) . ( intpos C97 ) ) by SCMPDS_5:41
.= ( D126 . ( intpos C97 ) ) by L513 , SCMPDS_2:48
.= ( C91 . ( intpos C97 ) ) by L501 , L510 , L511;
end;
thus L515:now
let C98 being Nat;
L516: C98 in ( NAT ) by ORDINAL1:def 12;
set D129 = ( intpos C98 );
assume that
L517: C98 >= 7
and
L518: (C98 <> ( ( C91 . D98 ) - 1 ) & C98 <> ( C91 . D98 ));
L519: C98 > 6 by L517 , XXREAL_0:2;
per cases ;
suppose L520: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) <= ( 0 );

L521: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D129 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D129 ) by L520 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D129 ) by SCMPDS_5:40
.= ( D123 . D129 ) by L384 , L519 , AMI_3:10 , SCMPDS_2:46
.= ( D120 . D129 ) by SCMPDS_5:15
.= ( C91 . D129 ) by L482 , L516 , L517 , L518;
thus L522: ( ( IExec (D90 , R4 , C91) ) . D129 ) = ( C91 . D129 ) by L521 , SCMPDS_5:35;
end;
suppose L523: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) > ( 0 );

L524: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D129 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D129 ) by L523 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D129 ) by SCMPDS_5:41
.= ( D125 . D129 ) by L423 , L519 , AMI_3:10 , SCMPDS_2:48
.= ( C91 . D129 ) by L509 , L516 , L517 , L518;
thus L525: ( ( IExec (D90 , R4 , C91) ) . D129 ) = ( C91 . D129 ) by L524 , SCMPDS_5:35;
end;
end;
L527: ( D123 . D99 ) = ( D120 . D99 ) by SCMPDS_5:15
.= ( ( Exec (D81 , D119) ) . D99 ) by SCMPDS_5:42
.= ( ( C91 . D116 ) - ( C91 . D117 ) ) by L356 , L355 , L354 , L347 , SCMPDS_2:50;
L528: ( D123 . ( DataLoc (( D123 . D115 ) , 5) ) ) = ( ( C91 . D116 ) - ( C91 . D117 ) ) by L527 , L359 , SCMP_GCD:1;
L529: ( abs ( ( C91 . D98 ) + ( - 1 ) ) ) <> ( abs ( ( D118 . D115 ) + 5 ) ) by L342 , L375 , L410 , L351 , XREAL_1:6;
L530: D116 <> ( DataLoc (( D118 . D115 ) , 5) ) by L529 , XTUPLE_0:1;
L531: ( D119 . D116 ) = ( C91 . D116 ) by L530 , SCMPDS_2:47;
L532: ( D120 . D116 ) = ( ( Exec (D81 , D119) ) . D116 ) by SCMPDS_5:42
.= ( C91 . D116 ) by L531 , L412 , SCMPDS_2:50;
L533: ( D123 . D116 ) = ( C91 . D116 ) by L532 , SCMPDS_5:15;
L534: ( D128 . D99 ) = ( C91 . D116 ) by L533 , L367 , L360 , SCMPDS_2:47;
L535: 5 <> ( abs ( ( D128 . D98 ) + ( - 1 ) ) ) by L375 , L389 , L393 , XXREAL_0:2;
L536: D99 <> ( DataLoc (( D128 . D98 ) , ( - 1 )) ) by L535 , XTUPLE_0:1;
L537: ( D127 . D99 ) = ( ( Exec (D83 , D128) ) . D99 ) by SCMPDS_5:42
.= ( C91 . D116 ) by L534 , L536 , SCMPDS_2:47;
L538: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D126 . D115 ) + 4 ) ) by L340 , L343 , L344 , L426 , XXREAL_0:2;
L539: D117 <> ( DataLoc (( D126 . D115 ) , 4) ) by L538 , XTUPLE_0:1;
L540: ( D126 . D117 ) = ( ( Exec (D84 , D127) ) . ( DataLoc (( D127 . D98 ) , ( 0 )) ) ) by L396 , SCMPDS_5:41
.= ( D127 . ( DataLoc (( D127 . D115 ) , 5) ) ) by SCMPDS_2:47
.= ( C91 . D116 ) by L409 , L537 , SCMP_GCD:1;
L541: ( D125 . D117 ) = ( ( Exec (D85 , D126) ) . D117 ) by SCMPDS_5:41
.= ( C91 . D116 ) by L540 , L539 , SCMPDS_2:48;
L542: ( abs ( ( C91 . D98 ) + ( - 1 ) ) ) <> ( abs ( ( D127 . D98 ) + ( 0 ) ) ) by L410 , L397;
L543: D116 <> ( DataLoc (( D127 . D98 ) , ( 0 )) ) by L542 , XTUPLE_0:1;
L544: ( D126 . D116 ) = ( ( Exec (D84 , D127) ) . D116 ) by SCMPDS_5:41
.= ( C91 . D117 ) by L369 , L543 , SCMPDS_2:47;
L545: ( D125 . D116 ) = ( ( Exec (D85 , D126) ) . D116 ) by SCMPDS_5:41
.= ( C91 . D117 ) by L544 , L428 , SCMPDS_2:48;
thus L546:now
L547: D116 <> ( DataLoc (( D125 . D115 ) , 6) ) by L375 , L389 , L410 , L423 , XTUPLE_0:1;
assume L548: ( C91 . D116 ) > ( C91 . D117 );
L549: ( ( C91 . D116 ) - ( C91 . D117 ) ) > ( ( C91 . D117 ) - ( C91 . D117 ) ) by L548 , XREAL_1:9;
L550: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D116 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D116 ) by L549 , L528 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D116 ) by SCMPDS_5:41
.= ( C91 . D117 ) by L545 , L547 , SCMPDS_2:48;
thus L551: ( ( IExec (D90 , R4 , C91) ) . D116 ) = ( C91 . D117 ) by L550 , SCMPDS_5:35;
L552: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D125 . D115 ) + 6 ) ) by L340 , L343 , L344 , L424 , XXREAL_0:2;
L553: D117 <> ( DataLoc (( D125 . D115 ) , 6) ) by L552 , XTUPLE_0:1;
L554: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D117 ) = ( ( IExec (D88 , D121 , ( Initialize D120 )) ) . D117 ) by L528 , L549 , SCMPDS_6:73
.= ( ( Exec (D86 , D125) ) . D117 ) by SCMPDS_5:41
.= ( C91 . D116 ) by L541 , L553 , SCMPDS_2:48;
thus L555: ( ( IExec (D90 , R4 , C91) ) . D117 ) = ( C91 . D116 ) by L554 , SCMPDS_5:35;
thus L556: (( ( IExec (D90 , R4 , C91) ) . D100 ) = ( ( C91 . D100 ) - 1 ) & ( ( IExec (D90 , R4 , C91) ) . D98 ) = ( ( C91 . D98 ) - 1 )) by L359 , L527 , L455 , L549 , SCMP_GCD:1;
end;
L557: ( abs ( ( D123 . D115 ) + 6 ) ) = ( ( 0 ) + 6 ) by L384 , XTUPLE_0:1;
thus L558:now
L559: D116 <> ( DataLoc (( D123 . D115 ) , 6) ) by L375 , L389 , L410 , L384 , XTUPLE_0:1;
assume L560: ( C91 . D116 ) <= ( C91 . D117 );
L561: ( ( C91 . D116 ) - ( C91 . D117 ) ) <= ( ( C91 . D117 ) - ( C91 . D117 ) ) by L560 , XREAL_1:9;
L562: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D116 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D116 ) by L561 , L528 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D116 ) by SCMPDS_5:40
.= ( C91 . D116 ) by L533 , L559 , SCMPDS_2:46;
thus L563: ( ( IExec (D90 , R4 , C91) ) . D116 ) = ( C91 . D116 ) by L562 , SCMPDS_5:35;
L564: ( abs ( ( C91 . D98 ) + ( 0 ) ) ) <> ( abs ( ( D123 . D115 ) + 6 ) ) by L340 , L343 , L344 , L557 , XXREAL_0:2;
L565: D117 <> ( DataLoc (( D123 . D115 ) , 6) ) by L564 , XTUPLE_0:1;
L566: ( ( IExec (D89 , D121 , ( Initialize D120 )) ) . D117 ) = ( ( IExec (D87 , D121 , ( Initialize D120 )) ) . D117 ) by L528 , L561 , SCMPDS_6:74
.= ( ( Exec (D122 , D123) ) . D117 ) by SCMPDS_5:40
.= ( C91 . D117 ) by L358 , L565 , SCMPDS_2:46;
thus L567: ( ( IExec (D90 , R4 , C91) ) . D117 ) = ( C91 . D117 ) by L566 , SCMPDS_5:35;
thus L568: ( ( IExec (D90 , R4 , C91) ) . D100 ) = ( 0 ) by L359 , L527 , L385 , L561 , SCMP_GCD:1;
end;
end;
L559: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B102 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B102 . D98 ) >= ( 7 + ( B102 . ( DataLoc (( B102 . ( GBP ) ) , 6) ) ) ) & ( B102 . ( GBP ) ) = ( 0 )) implies (D91 is_closed_on B102 , R4 & D91 is_halting_on B102 , R4))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C99 being ( 0 ) -started (State of ( SCMPDS ));
set D130 = ( GBP );
set D131 = ( DataLoc (( C99 . D130 ) , 6) );
assume that
L560: ( C99 . D98 ) >= ( 7 + ( C99 . D131 ) )
and
L561: ( C99 . D130 ) = ( 0 );
L562: D131 = ( intpos ( ( 0 ) + 6 ) ) by L561 , SCMP_GCD:1;
L563:
now
let C100 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L564: (for R1 being Int_position holds (R1 in { D98 } implies ( C100 . R1 ) >= ( 7 + ( C100 . D131 ) )))
and
L565: (( C100 . D130 ) = ( C99 . D130 ) & ( C100 . D131 ) > ( 0 ));
set D132 = ( IExec (D90 , R5 , C100) );
L566: D98 in { D98 } by TARSKI:def 1;
L567: ( C100 . D98 ) >= ( 7 + ( C100 . D100 ) ) by L566 , L562 , L564;
thus L568: ( ( IExec (D90 , R5 , C100) ) . D130 ) = ( C100 . D130 ) by L567 , L561 , L562 , L565 , L278;
thus L569: (D90 is_closed_on C100 , R5 & D90 is_halting_on C100 , R5) by SCMPDS_6:20 , SCMPDS_6:21;
thus L570: ( ( IExec (D90 , R5 , C100) ) . D131 ) < ( C100 . D131 ) by L561 , L562 , L565 , L567 , L339;
L571: ( C100 . D98 ) >= ( 7 + ( C100 . D131 ) ) by L564 , L566;
L572: ( D132 . D98 ) >= ( 7 + ( D132 . D100 ) ) by L571 , L561 , L562 , L565 , L339;
thus L573: (for R1 being Int_position holds (R1 in { D98 } implies ( ( IExec (D90 , R5 , C100) ) . R1 ) >= ( 7 + ( ( IExec (D90 , R5 , C100) ) . D131 ) ))) by L572 , L562 , TARSKI:def 1;
end;
L574: (for R1 being Int_position holds (R1 in { D98 } implies ( C99 . R1 ) >= ( 7 + ( C99 . D131 ) ))) by L560 , TARSKI:def 1;
thus L575: thesis by L574 , L563 , SCMPDS_8:29;
end;
L576: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B103 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B103 . D98 ) >= ( 7 + ( B103 . ( DataLoc (( B103 . ( GBP ) ) , 6) ) ) ) & ( B103 . ( GBP ) ) = ( 0 )) implies (( ( IExec (D91 , R4 , B103) ) . ( GBP ) ) = ( 0 ) & ( ( IExec (D91 , R4 , B103) ) . D95 ) = ( B103 . D95 ) & ( ( IExec (D91 , R4 , B103) ) . D96 ) = ( B103 . D96 ) & ( ( IExec (D91 , R4 , B103) ) . D97 ) = ( B103 . D97 )))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C101 being ( 0 ) -started (State of ( SCMPDS ));
set D133 = ( DataLoc (( C101 . ( GBP ) ) , 6) );
set D134 = ( GBP );
assume that
L577: ( C101 . D98 ) >= ( 7 + ( C101 . D133 ) )
and
L578: ( C101 . D134 ) = ( 0 );
L579: D133 = ( intpos ( ( 0 ) + 6 ) ) by L578 , SCMP_GCD:1;
defpred S5[ Nat ] means (for B104 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds ((( B104 . D100 ) <= $1 & ( B104 . D98 ) >= ( 7 + ( B104 . D100 ) ) & ( B104 . D134 ) = ( 0 )) implies (( ( IExec (D91 , R5 , B104) ) . D134 ) = ( 0 ) & ( ( IExec (D91 , R5 , B104) ) . D95 ) = ( B104 . D95 ) & ( ( IExec (D91 , R5 , B104) ) . D96 ) = ( B104 . D96 ) & ( ( IExec (D91 , R5 , B104) ) . D97 ) = ( B104 . D97 )))));
L580: S5[ (( 0 ) qua Nat) ]
proof
let C102 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L581: ( C102 . D100 ) <= ( 0 )
and
L582: ( C102 . D98 ) >= ( 7 + ( C102 . D100 ) )
and
L583: ( C102 . D134 ) = ( 0 );
L584: ( DataLoc (( C102 . D134 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L583 , SCMP_GCD:1;
thus L585: ( ( IExec (D91 , R5 , C102) ) . D134 ) = ( 0 ) by L584 , L581 , L583 , SCMPDS_8:23;
thus L586: thesis by L581 , L584 , SCMPDS_8:23;
end;
L587: (for B105 being (Element of ( NAT )) holds (S5[ B105 ] implies S5[ ( B105 + 1 ) ]))
proof
let C103 being (Element of ( NAT ));
assume L588: S5[ C103 ];
thus L589: S5[ ( C103 + 1 ) ]
proof
let C104 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
set D135 = ( DataLoc (( C104 . D134 ) , 6) );
assume that
L590: ( C104 . D100 ) <= ( C103 + 1 )
and
L591: ( C104 . D98 ) >= ( 7 + ( C104 . D100 ) )
and
L592: ( C104 . D134 ) = ( 0 );
L593: D135 = ( intpos ( ( 0 ) + 6 ) ) by L592 , SCMP_GCD:1;
per cases ;
suppose L594: ( C104 . D135 ) <= ( 0 );

thus L595: thesis by L594 , L592 , SCMPDS_8:23;
end;
suppose L596: ( C104 . D135 ) > ( 0 );

L597: (for B106 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (((for R1 being Int_position holds (R1 in { D98 } implies ( B106 . R1 ) >= ( 7 + ( B106 . ( DataLoc (( C104 . ( GBP ) ) , 6) ) ) ))) & ( B106 . ( GBP ) ) = ( C104 . ( GBP ) ) & ( B106 . ( DataLoc (( C104 . ( GBP ) ) , 6) ) ) > ( 0 )) implies (( ( IExec (D90 , R5 , B106) ) . ( GBP ) ) = ( B106 . ( GBP ) ) & D90 is_closed_on B106 , R5 & D90 is_halting_on B106 , R5 & ( ( IExec (D90 , R5 , B106) ) . ( DataLoc (( C104 . ( GBP ) ) , 6) ) ) < ( B106 . ( DataLoc (( C104 . ( GBP ) ) , 6) ) ) & (for R1 being Int_position holds (R1 in { D98 } implies ( ( IExec (D90 , R5 , B106) ) . R1 ) >= ( 7 + ( ( IExec (D90 , R5 , B106) ) . ( DataLoc (( C104 . ( GBP ) ) , 6) ) ) )))))))
proof
let C105 being ( 0 ) -started (State of ( SCMPDS ));
let R7 being (Instruction-Sequence of ( SCMPDS ));
L598: ( Initialize C105 ) = C105 by MEMSTR_0:44;
assume that
L599: (for R1 being Int_position holds (R1 in { D98 } implies ( C105 . R1 ) >= ( 7 + ( C105 . D135 ) )))
and
L600: (( C105 . D134 ) = ( C104 . D134 ) & ( C105 . D135 ) > ( 0 ));
set D136 = ( IExec (D90 , R7 , ( Initialize ( Initialize C105 ) )) );
L601: ( C105 . D134 ) = ( ( Initialize C105 ) . D134 ) by SCMPDS_5:15;
L602: ( C105 . D98 ) = ( ( Initialize C105 ) . D98 ) by SCMPDS_5:15;
L603: ( C105 . D100 ) = ( ( Initialize C105 ) . D100 ) by SCMPDS_5:15;
L604: D98 in { D98 } by TARSKI:def 1;
L605: ( C105 . D98 ) >= ( 7 + ( C105 . D100 ) ) by L604 , L593 , L599;
thus L606: ( ( IExec (D90 , R7 , C105) ) . D134 ) = ( C105 . D134 ) by L605 , L592 , L593 , L600 , L278;
thus L607: (D90 is_closed_on C105 , R7 & D90 is_halting_on C105 , R7) by SCMPDS_6:20 , SCMPDS_6:21;
thus L608: ( ( IExec (D90 , R7 , C105) ) . D135 ) < ( C105 . D135 ) by L592 , L593 , L600 , L605 , L339;
L609: ( C105 . D98 ) >= ( 7 + ( C105 . D135 ) ) by L599 , L604;
L610: ( D136 . D98 ) >= ( 7 + ( D136 . D100 ) ) by L609 , L592 , L593 , L600 , L339 , L601 , L602 , L603;
thus L611: (for R1 being Int_position holds (R1 in { D98 } implies ( ( IExec (D90 , R7 , C105) ) . R1 ) >= ( 7 + ( ( IExec (D90 , R7 , C105) ) . D135 ) ))) by L610 , L593 , L598 , TARSKI:def 1;
end;
set D137 = ( IExec (D90 , R5 , C104) );
set D138 = R5;
L612: ( D137 . D95 ) = ( ( Initialize D137 ) . D95 ) by SCMPDS_5:15;
L613: ( D137 . D100 ) = ( ( Initialize D137 ) . D100 ) by SCMPDS_5:15;
L614: ( D137 . D98 ) = ( ( Initialize D137 ) . D98 ) by SCMPDS_5:15;
L615: ( D137 . ( GBP ) ) = ( ( Initialize D137 ) . ( GBP ) ) by SCMPDS_5:15;
L616: ( D137 . D96 ) = ( ( Initialize D137 ) . D96 ) by SCMPDS_5:15;
L617: ( D137 . D97 ) = ( ( Initialize D137 ) . D97 ) by SCMPDS_5:15;
L618: ( D137 . D100 ) < ( C104 . D100 ) by L591 , L592 , L593 , L596 , L339;
L619: ( ( D137 . D100 ) + 1 ) <= ( C104 . D100 ) by L618 , INT_1:7;
L620: ( ( D137 . D100 ) + 1 ) <= ( C103 + 1 ) by L619 , L590 , XXREAL_0:2;
L621: ( D137 . D100 ) <= C103 by L620 , XREAL_1:6;
L622: (( D137 . ( GBP ) ) = ( 0 ) & ( D137 . D98 ) >= ( 7 + ( D137 . D100 ) )) by L591 , L592 , L593 , L596 , L278 , L339;
L623: ( ( IExec (D91 , D138 , ( Initialize D137 )) ) . D95 ) = ( D137 . D95 ) by L622 , L588 , L621 , L612 , L613 , L614 , L615;
L624: ( ( IExec (D91 , D138 , ( Initialize D137 )) ) . D97 ) = ( D137 . D97 ) by L588 , L622 , L621 , L613 , L614 , L615 , L617;
L625: ( ( IExec (D91 , D138 , ( Initialize D137 )) ) . D96 ) = ( D137 . D96 ) by L588 , L622 , L621 , L613 , L614 , L615 , L616;
L626: (for R1 being Int_position holds (R1 in { D98 } implies ( C104 . R1 ) >= ( 7 + ( C104 . D135 ) ))) by L591 , L593 , TARSKI:def 1;
L627: ( ( IExec (D91 , D138 , ( Initialize D137 )) ) . D134 ) = ( 0 ) by L588 , L622 , L621 , L613 , L614 , L615;
thus L628: ( ( IExec (D91 , R5 , C104) ) . D134 ) = ( 0 ) by L627 , L596 , L626 , L597 , SCMPDS_8:29;
L629: ( D137 . D95 ) = ( C104 . D95 ) by L591 , L592 , L593 , L596 , L278;
thus L630: ( ( IExec (D91 , R5 , C104) ) . D95 ) = ( C104 . D95 ) by L629 , L596 , L626 , L597 , L623 , SCMPDS_8:29;
L631: ( D137 . D96 ) = ( C104 . D96 ) by L591 , L592 , L593 , L596 , L339;
thus L632: ( ( IExec (D91 , R5 , C104) ) . D96 ) = ( C104 . D96 ) by L631 , L596 , L626 , L597 , L625 , SCMPDS_8:29;
L633: ( D137 . D97 ) = ( C104 . D97 ) by L591 , L592 , L593 , L596 , L339;
thus L634: thesis by L633 , L596 , L626 , L597 , L624 , SCMPDS_8:29;
end;
end;

end;
per cases ;
suppose L590: ( C101 . D100 ) <= ( 0 );

thus L591: thesis by L590 , L578 , L579 , SCMPDS_8:23;
end;
suppose L592: ( C101 . D100 ) > ( 0 );

reconsider D139 = ( C101 . D100 ) as (Element of ( NAT )) by L592 , INT_1:3;
L593: (for B107 being (Element of ( NAT )) holds S5[ B107 ]) from NAT_1:sch 1(L580 , L587);
L594: S5[ D139 ] by L593;
thus L595: thesis by L594 , L577 , L578 , L579;
end;
end;
L597: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B108 being ( 0 ) -started (State of ( SCMPDS )) holds (( B108 . ( GBP ) ) = ( 0 ) implies (( ( IExec (D92 , R4 , B108) ) . ( GBP ) ) = ( 0 ) & ( ( IExec (D92 , R4 , B108) ) . D95 ) = ( ( B108 . D95 ) + 1 ) & ( ( IExec (D92 , R4 , B108) ) . D96 ) = ( B108 . D96 ) & ( ( IExec (D92 , R4 , B108) ) . D97 ) = ( ( B108 . D97 ) + 1 ) & ( ( IExec (D92 , R4 , B108) ) . D98 ) = ( ( B108 . D97 ) + 1 ) & ( ( IExec (D92 , R4 , B108) ) . D100 ) = ( ( B108 . D95 ) + 1 ) & (for B109 being (Element of ( NAT )) holds (B109 >= 7 implies ( ( IExec (D92 , R4 , B108) ) . ( intpos B109 ) ) = ( B108 . ( intpos B109 ) )))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D140 = ( GBP );
let C106 being ( 0 ) -started (State of ( SCMPDS ));
L598: ( Initialize C106 ) = C106 by MEMSTR_0:44;
set D141 = ( Initialize C106 );
set D142 = ( IExec (D92 , R4 , C106) );
set D143 = ( IExec (( ( D76 ';' D77 ) ';' D78 ) , R4 , C106) );
set D144 = ( IExec (( D76 ';' D77 ) , R4 , C106) );
set D145 = ( Exec (D76 , C106) );
assume L599: ( C106 . D140 ) = ( 0 );
L600: ( D141 . D140 ) = ( 0 ) by L599 , SCMPDS_5:15;
L601: ( DataLoc (( D141 . D140 ) , 3) ) = ( intpos ( ( 0 ) + 3 ) ) by L600 , SCMP_GCD:1;
L602: ( D145 . D140 ) = ( 0 ) by L601 , L600 , L599 , AMI_3:10 , SCMPDS_2:48;
L603: ( DataLoc (( D145 . D140 ) , 4) ) = ( intpos ( ( 0 ) + 4 ) ) by L602 , SCMP_GCD:1;
L604: ( D145 . D96 ) = ( C106 . D96 ) by L601 , L599 , L600 , AMI_3:10 , SCMPDS_2:48;
L605: ( D144 . D96 ) = ( ( Exec (D77 , D145) ) . D96 ) by SCMPDS_5:42
.= ( C106 . D96 ) by L604 , L603 , AMI_3:10 , SCMPDS_2:47;
L606: ( D145 . D95 ) = ( C106 . D95 ) by L601 , L599 , L600 , AMI_3:10 , SCMPDS_2:48;
L607: ( D144 . D95 ) = ( ( Exec (D77 , D145) ) . D95 ) by SCMPDS_5:42
.= ( C106 . D95 ) by L606 , L603 , AMI_3:10 , SCMPDS_2:47;
L608: ( D145 . D97 ) = ( ( C106 . D97 ) + 1 ) by L601 , L598 , SCMPDS_2:48;
L609: ( D144 . D140 ) = ( ( Exec (D77 , D145) ) . D140 ) by SCMPDS_5:42
.= ( 0 ) by L602 , L603 , AMI_3:10 , SCMPDS_2:47;
L610: ( DataLoc (( D144 . D140 ) , 1) ) = ( intpos ( ( 0 ) + 1 ) ) by L609 , SCMP_GCD:1;
L611: ( DataLoc (( D145 . D140 ) , 3) ) = ( intpos ( ( 0 ) + 3 ) ) by L602 , SCMP_GCD:1;
L612: ( D144 . D98 ) = ( ( Exec (D77 , D145) ) . D98 ) by SCMPDS_5:42
.= ( ( C106 . D97 ) + 1 ) by L608 , L603 , L611 , SCMPDS_2:47;
L613: ( D143 . D98 ) = ( ( Exec (D78 , D144) ) . D98 ) by SCMPDS_5:41
.= ( ( C106 . D97 ) + 1 ) by L612 , L610 , AMI_3:10 , SCMPDS_2:48;
L614: ( D143 . D96 ) = ( ( Exec (D78 , D144) ) . D96 ) by SCMPDS_5:41
.= ( C106 . D96 ) by L605 , L610 , AMI_3:10 , SCMPDS_2:48;
L615: ( D143 . D95 ) = ( ( Exec (D78 , D144) ) . D95 ) by SCMPDS_5:41
.= ( ( C106 . D95 ) + 1 ) by L607 , L610 , SCMPDS_2:48;
L616: ( D144 . D97 ) = ( ( Exec (D77 , D145) ) . D97 ) by SCMPDS_5:42
.= ( ( C106 . D97 ) + 1 ) by L608 , L603 , AMI_3:10 , SCMPDS_2:47;
L617: ( D143 . D97 ) = ( ( Exec (D78 , D144) ) . D97 ) by SCMPDS_5:41
.= ( ( C106 . D97 ) + 1 ) by L616 , L610 , AMI_3:10 , SCMPDS_2:48;
L618: ( D143 . D140 ) = ( ( Exec (D78 , D144) ) . D140 ) by SCMPDS_5:41
.= ( 0 ) by L609 , L610 , AMI_3:10 , SCMPDS_2:48;
L619: ( DataLoc (( D143 . D140 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L618 , SCMP_GCD:1;
thus L620: ( D142 . D140 ) = ( ( Exec (D79 , D143) ) . D140 ) by SCMPDS_5:41
.= ( 0 ) by L618 , L619 , AMI_3:10 , SCMPDS_2:47;
thus L621: ( D142 . D95 ) = ( ( Exec (D79 , D143) ) . D95 ) by SCMPDS_5:41
.= ( ( C106 . D95 ) + 1 ) by L615 , L619 , AMI_3:10 , SCMPDS_2:47;
thus L622: ( D142 . D96 ) = ( ( Exec (D79 , D143) ) . D96 ) by SCMPDS_5:41
.= ( C106 . D96 ) by L614 , L619 , AMI_3:10 , SCMPDS_2:47;
L623: ( DataLoc (( D143 . D140 ) , 1) ) = ( intpos ( ( 0 ) + 1 ) ) by L618 , SCMP_GCD:1;
thus L624: ( D142 . D97 ) = ( ( Exec (D79 , D143) ) . D97 ) by SCMPDS_5:41
.= ( ( C106 . D97 ) + 1 ) by L617 , L619 , AMI_3:10 , SCMPDS_2:47;
thus L625: ( D142 . D98 ) = ( ( Exec (D79 , D143) ) . D98 ) by SCMPDS_5:41
.= ( ( C106 . D97 ) + 1 ) by L613 , L619 , AMI_3:10 , SCMPDS_2:47;
thus L626: ( D142 . D100 ) = ( ( Exec (D79 , D143) ) . D100 ) by SCMPDS_5:41
.= ( ( C106 . D95 ) + 1 ) by L615 , L619 , L623 , SCMPDS_2:47;
L627:
now
let C107 being (Element of ( NAT ));
assume L628: C107 >= 7;
L629: C107 > 3 by L628 , XXREAL_0:2;
thus L630: ( D145 . ( intpos C107 ) ) = ( D141 . ( intpos C107 ) ) by L629 , L601 , L598 , AMI_3:10 , SCMPDS_2:48
.= ( C106 . ( intpos C107 ) ) by SCMPDS_5:15;
end;
L631:
now
let C108 being (Element of ( NAT ));
assume L632: C108 >= 7;
L633: C108 > 4 by L632 , XXREAL_0:2;
thus L634: ( D144 . ( intpos C108 ) ) = ( ( Exec (D77 , D145) ) . ( intpos C108 ) ) by SCMPDS_5:42
.= ( D145 . ( intpos C108 ) ) by L603 , L633 , AMI_3:10 , SCMPDS_2:47
.= ( C106 . ( intpos C108 ) ) by L627 , L632;
end;
L635:
now
let C109 being (Element of ( NAT ));
assume L636: C109 >= 7;
L637: C109 > 1 by L636 , XXREAL_0:2;
thus L638: ( D143 . ( intpos C109 ) ) = ( ( Exec (D78 , D144) ) . ( intpos C109 ) ) by SCMPDS_5:41
.= ( D144 . ( intpos C109 ) ) by L610 , L637 , AMI_3:10 , SCMPDS_2:48
.= ( C106 . ( intpos C109 ) ) by L631 , L636;
end;
thus L639:now
let C110 being (Element of ( NAT ));
assume L640: C110 >= 7;
L641: C110 > 6 by L640 , XXREAL_0:2;
thus L642: ( D142 . ( intpos C110 ) ) = ( ( Exec (D79 , D143) ) . ( intpos C110 ) ) by SCMPDS_5:41
.= ( D143 . ( intpos C110 ) ) by L619 , L641 , AMI_3:10 , SCMPDS_2:47
.= ( C106 . ( intpos C110 ) ) by L635 , L640;
end;
end;
set D146 = ( AddTo (( GBP ) , 2 , ( - 1 )) );
set D147 = ( D93 ';' D146 );
L640: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B110 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B110 . D97 ) >= ( ( B110 . D95 ) + 7 ) & ( B110 . ( GBP ) ) = ( 0 )) implies (( ( IExec (D147 , R4 , B110) ) . ( GBP ) ) = ( 0 ) & ( ( IExec (D147 , R4 , B110) ) . D96 ) = ( ( B110 . D96 ) - 1 ) & ( ( IExec (D147 , R4 , B110) ) . D97 ) = ( ( B110 . D97 ) + 1 ) & ( ( IExec (D147 , R4 , B110) ) . D95 ) = ( ( B110 . D95 ) + 1 ) & (for B111 being (Element of ( NAT )) holds (B111 <> 2 implies ( ( IExec (D147 , R4 , B110) ) . ( intpos B111 ) ) = ( ( IExec (D91 , R4 , ( Initialize ( IExec (D92 , R4 , B110) ) )) ) . ( intpos B111 ) )))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D148 = ( GBP );
let C111 being ( 0 ) -started (State of ( SCMPDS ));
set D149 = ( IExec (D92 , R4 , C111) );
set D150 = ( IExec (D93 , R4 , C111) );
set D151 = R4;
L641: ( Initialize C111 ) = C111 by MEMSTR_0:44;
L642: ( D149 . D148 ) = ( ( Initialize D149 ) . D148 ) by SCMPDS_5:15;
L643: ( D149 . D98 ) = ( ( Initialize D149 ) . D98 ) by SCMPDS_5:15;
L644: ( D149 . D100 ) = ( ( Initialize D149 ) . D100 ) by SCMPDS_5:15;
L645: ( D149 . D97 ) = ( ( Initialize D149 ) . D97 ) by SCMPDS_5:15;
L646: ( D149 . D95 ) = ( ( Initialize D149 ) . D95 ) by SCMPDS_5:15;
L647: ( D149 . D96 ) = ( ( Initialize D149 ) . D96 ) by SCMPDS_5:15;
assume that
L648: ( C111 . D97 ) >= ( ( C111 . D95 ) + 7 )
and
L649: ( C111 . D148 ) = ( 0 );
L650: ( D149 . D95 ) = ( ( C111 . D95 ) + 1 ) by L649 , L597;
L651: ( D149 . D97 ) = ( ( C111 . D97 ) + 1 ) by L649 , L597;
L652: ( D149 . D96 ) = ( C111 . D96 ) by L649 , L597;
L653: (( D149 . D100 ) = ( ( C111 . D95 ) + 1 ) & ( ( C111 . D97 ) + 1 ) >= ( ( 7 + ( C111 . D95 ) ) + 1 )) by L648 , L649 , L597 , XREAL_1:6;
L654: ( D149 . D98 ) >= ( 7 + ( D149 . D100 ) ) by L653 , L649 , L597;
L655: ( D149 . ( GBP ) ) = ( 0 ) by L649 , L597;
L656: ( DataLoc (( D149 . D148 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L655 , SCMP_GCD:1;
L657: (D91 is_closed_on ( Initialize D149 ) , D151 & D91 is_halting_on ( Initialize D149 ) , D151) by L656 , L655 , L654 , L559 , L642 , L643 , L644;
L658: (D91 is_closed_on D149 , D151 & D91 is_halting_on D149 , D151) by L657 , SCMPDS_6:125 , SCMPDS_6:126;
L659: (D92 is_closed_on C111 , R4 & D92 is_halting_on C111 , R4) by SCMPDS_6:20 , SCMPDS_6:21;
L660: ( D150 . D148 ) = ( ( IExec (D91 , D151 , ( Initialize D149 )) ) . D148 ) by L659 , L658 , SCMPDS_7:30
.= ( 0 ) by L655 , L656 , L654 , L576 , L642 , L643 , L644;
L661: ( DataLoc (( D150 . D148 ) , 2) ) = ( intpos ( ( 0 ) + 2 ) ) by L660 , SCMP_GCD:1;
L662: (D93 is_closed_on C111 , R4 & D93 is_halting_on C111 , R4) by L658 , L659 , L641 , SCMPDS_7:24;
thus L663: ( ( IExec (D147 , R4 , C111) ) . D148 ) = ( ( Exec (D146 , D150) ) . D148 ) by L662 , SCMPDS_7:31
.= ( 0 ) by L660 , L661 , AMI_3:10 , SCMPDS_2:48;
thus L664: ( ( IExec (D147 , R4 , C111) ) . D96 ) = ( ( Exec (D146 , D150) ) . D96 ) by L662 , SCMPDS_7:31
.= ( ( D150 . D96 ) + ( - 1 ) ) by L661 , SCMPDS_2:48
.= ( ( D150 . D96 ) - 1 )
.= ( ( ( IExec (D91 , D151 , ( Initialize D149 )) ) . D96 ) - 1 ) by L658 , L659 , SCMPDS_7:30
.= ( ( C111 . D96 ) - 1 ) by L655 , L652 , L656 , L654 , L576 , L642 , L643 , L644 , L647;
thus L665: ( ( IExec (D147 , R4 , C111) ) . D97 ) = ( ( Exec (D146 , D150) ) . D97 ) by L662 , SCMPDS_7:31
.= ( D150 . D97 ) by L661 , AMI_3:10 , SCMPDS_2:48
.= ( ( IExec (D91 , D151 , ( Initialize D149 )) ) . D97 ) by L658 , L659 , SCMPDS_7:30
.= ( ( C111 . D97 ) + 1 ) by L655 , L651 , L656 , L654 , L576 , L642 , L643 , L644 , L645;
thus L666: ( ( IExec (D147 , R4 , C111) ) . D95 ) = ( ( Exec (D146 , D150) ) . D95 ) by L662 , SCMPDS_7:31
.= ( D150 . D95 ) by L661 , AMI_3:10 , SCMPDS_2:48
.= ( ( IExec (D91 , D151 , ( Initialize D149 )) ) . D95 ) by L658 , L659 , SCMPDS_7:30
.= ( ( C111 . D95 ) + 1 ) by L655 , L650 , L656 , L654 , L576 , L642 , L643 , L644 , L646;
thus L667:now
let C112 being (Element of ( NAT ));
assume L668: C112 <> 2;
thus L669: ( ( IExec (D147 , R4 , C111) ) . ( intpos C112 ) ) = ( ( Exec (D146 , D150) ) . ( intpos C112 ) ) by L662 , SCMPDS_7:31
.= ( D150 . ( intpos C112 ) ) by L661 , L668 , AMI_3:10 , SCMPDS_2:48
.= ( ( IExec (D91 , D151 , ( Initialize D149 )) ) . ( intpos C112 ) ) by L658 , L659 , SCMPDS_7:30;
end;
end;
L668: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B112 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B112 . D97 ) >= ( ( B112 . D95 ) + 7 ) & ( B112 . ( GBP ) ) = ( 0 )) implies (D94 is_closed_on B112 , R4 & D94 is_halting_on B112 , R4))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C113 being ( 0 ) -started (State of ( SCMPDS ));
set D152 = ( GBP );
set D153 = ( DataLoc (( C113 . D152 ) , 2) );
assume that
L669: ( C113 . D97 ) >= ( ( C113 . D95 ) + 7 )
and
L670: ( C113 . D152 ) = ( 0 );
L671: D153 = ( intpos ( ( 0 ) + 2 ) ) by L670 , SCMP_GCD:1;
L672:
now
let C114 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
L673: ( Initialize C114 ) = C114 by MEMSTR_0:44;
assume that
L674: ( C114 . D97 ) >= ( ( C114 . D95 ) + 7 )
and
L675: ( C114 . D152 ) = ( C113 . D152 )
and
L676: ( C114 . D153 ) > ( 0 );
set D154 = ( IExec (D92 , R5 , C114) );
set D155 = R5;
L677: ( D154 . D152 ) = ( ( Initialize D154 ) . D152 ) by SCMPDS_5:15;
L678: ( D154 . D98 ) = ( ( Initialize D154 ) . D98 ) by SCMPDS_5:15;
L679: ( D154 . D100 ) = ( ( Initialize D154 ) . D100 ) by SCMPDS_5:15;
L680: ( ( C114 . D97 ) + 1 ) >= ( ( 7 + ( C114 . D95 ) ) + 1 ) by L674 , XREAL_1:6;
thus L681: ( ( IExec (D147 , R5 , C114) ) . D152 ) = ( C114 . D152 ) by L670 , L674 , L675 , L640;
thus L682: ( ( IExec (D147 , R5 , C114) ) . D153 ) = ( ( C114 . D153 ) - 1 ) by L670 , L671 , L674 , L675 , L640;
L683: (D92 is_closed_on C114 , R5 & D92 is_halting_on C114 , R5) by SCMPDS_6:20 , SCMPDS_6:21;
L684: ( D154 . D100 ) = ( ( C114 . D95 ) + 1 ) by L670 , L675 , L597;
L685: ( D154 . D98 ) >= ( 7 + ( D154 . D100 ) ) by L684 , L670 , L675 , L680 , L597;
L686: ( D154 . D152 ) = ( 0 ) by L670 , L675 , L597;
L687: ( DataLoc (( D154 . D152 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L686 , SCMP_GCD:1;
L688: (D91 is_closed_on ( Initialize D154 ) , D155 & D91 is_halting_on ( Initialize D154 ) , D155) by L687 , L686 , L685 , L559 , L678 , L679 , L677;
L689: (D91 is_closed_on D154 , D155 & D91 is_halting_on D154 , D155) by L688 , SCMPDS_6:125 , SCMPDS_6:126;
thus L690: (D93 is_closed_on C114 , R5 & D93 is_halting_on C114 , R5) by L689 , L683 , L673 , SCMPDS_7:24;
L691: ( ( IExec (D147 , R5 , C114) ) . D95 ) = ( ( C114 . D95 ) + 1 ) by L670 , L674 , L675 , L640;
thus L692: ( ( IExec (D147 , R5 , C114) ) . D97 ) >= ( ( ( IExec (D147 , R5 , C114) ) . D95 ) + 7 ) by L691 , L670 , L674 , L675 , L680 , L640;
end;
thus L693: thesis by L672 , L669 , L239;
end;
L694: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B113 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B113 . D97 ) >= ( ( B113 . D95 ) + 7 ) & ( B113 . ( GBP ) ) = ( 0 ) & ( B113 . D96 ) > ( 0 )) implies ( IExec (D94 , R4 , B113) ) = ( IExec (D94 , R4 , ( Initialize ( IExec (D147 , R4 , B113) ) )) ))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C115 being ( 0 ) -started (State of ( SCMPDS ));
set D156 = ( GBP );
set D157 = ( DataLoc (( C115 . D156 ) , 2) );
assume that
L695: ( C115 . D97 ) >= ( ( C115 . D95 ) + 7 )
and
L696: ( C115 . D156 ) = ( 0 )
and
L697: ( C115 . D96 ) > ( 0 );
L698: D157 = ( intpos ( ( 0 ) + 2 ) ) by L696 , SCMP_GCD:1;
L699:
now
let C116 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
L700: ( Initialize C116 ) = C116 by MEMSTR_0:44;
assume that
L701: ( C116 . D97 ) >= ( ( C116 . D95 ) + 7 )
and
L702: ( C116 . D156 ) = ( C115 . D156 )
and
L703: ( C116 . D157 ) > ( 0 );
set D158 = ( IExec (D92 , R5 , C116) );
set D159 = R5;
L704: ( ( C116 . D97 ) + 1 ) >= ( ( 7 + ( C116 . D95 ) ) + 1 ) by L701 , XREAL_1:6;
thus L705: ( ( IExec (D147 , R5 , C116) ) . D156 ) = ( C116 . D156 ) by L696 , L701 , L702 , L640;
thus L706: ( ( IExec (D147 , R5 , C116) ) . D157 ) = ( ( C116 . D157 ) - 1 ) by L696 , L698 , L701 , L702 , L640;
L707: (D92 is_closed_on C116 , R5 & D92 is_halting_on C116 , R5) by SCMPDS_6:20 , SCMPDS_6:21;
L708: ( D158 . D100 ) = ( ( C116 . D95 ) + 1 ) by L696 , L702 , L597;
L709: ( D158 . D98 ) >= ( 7 + ( D158 . D100 ) ) by L708 , L696 , L702 , L704 , L597;
L710: ( D158 . D156 ) = ( ( Initialize D158 ) . D156 ) by SCMPDS_5:15;
L711: ( D158 . D98 ) = ( ( Initialize D158 ) . D98 ) by SCMPDS_5:15;
L712: ( D158 . D100 ) = ( ( Initialize D158 ) . D100 ) by SCMPDS_5:15;
L713: ( D158 . D156 ) = ( 0 ) by L696 , L702 , L597;
L714: ( DataLoc (( D158 . D156 ) , 6) ) = ( intpos ( ( 0 ) + 6 ) ) by L713 , SCMP_GCD:1;
L715: (D91 is_closed_on ( Initialize D158 ) , D159 & D91 is_halting_on ( Initialize D158 ) , D159) by L714 , L713 , L709 , L559 , L710 , L711 , L712;
L716: (D91 is_closed_on D158 , D159 & D91 is_halting_on D158 , D159) by L715 , SCMPDS_6:125 , SCMPDS_6:126;
thus L717: (D93 is_closed_on C116 , R5 & D93 is_halting_on C116 , R5) by L716 , L707 , L700 , SCMPDS_7:24;
L718: ( ( IExec (D147 , R5 , C116) ) . D95 ) = ( ( C116 . D95 ) + 1 ) by L696 , L701 , L702 , L640;
thus L719: ( ( IExec (D147 , R5 , C116) ) . D97 ) >= ( ( ( IExec (D147 , R5 , C116) ) . D95 ) + 7 ) by L718 , L696 , L701 , L702 , L704 , L640;
end;
thus L720: thesis by L699 , L695 , L697 , L698 , L253;
end;
begin
theorem
L721: (for R2 being (Element of ( NAT )) holds (for R3 being (Element of ( NAT )) holds ( card ( insert-sort (R2 , R3) ) ) = 23))
proof
let R2 being (Element of ( NAT ));
let R3 being (Element of ( NAT ));
set D160 = ( ( GBP ) := ( 0 ) );
set D161 = ( (( GBP ) , 1) := ( 0 ) );
set D162 = ( (( GBP ) , 2) := ( R2 - 1 ) );
set D163 = ( (( GBP ) , 3) := R3 );
thus L722: ( card ( insert-sort (R2 , R3) ) ) = ( ( card ( ( ( D160 ';' D161 ) ';' D162 ) ';' D163 ) ) + ( card D94 ) ) by AFINSQ_1:17
.= ( ( ( card ( ( D160 ';' D161 ) ';' D162 ) ) + 1 ) + ( card D94 ) ) by SCMP_GCD:4
.= ( ( ( ( card ( D160 ';' D161 ) ) + 1 ) + 1 ) + ( card D94 ) ) by SCMP_GCD:4
.= ( ( ( 2 + 1 ) + 1 ) + ( card D94 ) ) by SCMP_GCD:5
.= ( 4 + ( ( card D93 ) + 3 ) ) by SCMPDS_7:41
.= 23 by L276;
end;
theorem
L723: (for R2 being (Element of ( NAT )) holds (for R3 being (Element of ( NAT )) holds (R3 >= 7 implies ( insert-sort (R2 , R3) ) is  parahalting)))
proof
let R2 being (Element of ( NAT ));
let R3 being (Element of ( NAT ));
set D164 = ( GBP );
set D165 = ( D164 := ( 0 ) );
set D166 = ( (D164 , 1) := ( 0 ) );
set D167 = ( (D164 , 2) := ( R2 - 1 ) );
set D168 = ( (D164 , 3) := R3 );
set D169 = ( ( ( D165 ';' D166 ) ';' D167 ) ';' D168 );
assume L724: R3 >= 7;
L725:
now
let C117 being (State of ( SCMPDS ));
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D170 = ( IExec (D169 , R4 , ( Initialize C117 )) );
set D171 = ( IExec (( ( D165 ';' D166 ) ';' D167 ) , R4 , ( Initialize C117 )) );
set D172 = R4;
set D173 = ( IExec (( D165 ';' D166 ) , R4 , ( Initialize C117 )) );
set D174 = ( Exec (D165 , ( Initialize C117 )) );
L726: ( D170 . D164 ) = ( ( Initialize D170 ) . D164 ) by SCMPDS_5:15;
L727: ( D170 . D95 ) = ( ( Initialize D170 ) . D95 ) by SCMPDS_5:15;
L728: ( D170 . D97 ) = ( ( Initialize D170 ) . D97 ) by SCMPDS_5:15;
L729: (D169 is_closed_on C117 , R4 & D169 is_halting_on C117 , R4) by SCMPDS_6:20 , SCMPDS_6:21;
L730: ( D174 . D164 ) = ( 0 ) by SCMPDS_2:45;
L731: ( DataLoc (( D174 . D164 ) , 1) ) = ( intpos ( ( 0 ) + 1 ) ) by L730 , SCMP_GCD:1;
L732: ( D173 . D164 ) = ( ( Exec (D166 , D174) ) . D164 ) by SCMPDS_5:42
.= ( 0 ) by L730 , L731 , AMI_3:10 , SCMPDS_2:46;
L733: ( DataLoc (( D173 . D164 ) , 2) ) = ( intpos ( ( 0 ) + 2 ) ) by L732 , SCMP_GCD:1;
L734: ( D173 . D95 ) = ( ( Exec (D166 , D174) ) . D95 ) by SCMPDS_5:42
.= ( 0 ) by L731 , SCMPDS_2:46;
L735: ( D171 . D95 ) = ( ( Exec (D167 , D173) ) . D95 ) by SCMPDS_5:41
.= ( 0 ) by L734 , L733 , AMI_3:10 , SCMPDS_2:46;
L736: ( D171 . D164 ) = ( ( Exec (D167 , D173) ) . D164 ) by SCMPDS_5:41
.= ( 0 ) by L732 , L733 , AMI_3:10 , SCMPDS_2:46;
L737: ( DataLoc (( D171 . D164 ) , 3) ) = ( intpos ( ( 0 ) + 3 ) ) by L736 , SCMP_GCD:1;
L738: ( D170 . D97 ) = ( ( Exec (D168 , D171) ) . D97 ) by SCMPDS_5:41
.= R3 by L737 , SCMPDS_2:46;
L739: ( D170 . D95 ) = ( ( Exec (D168 , D171) ) . D95 ) by SCMPDS_5:41
.= ( 0 ) by L735 , L737 , AMI_3:10 , SCMPDS_2:46;
L740: ( D170 . D97 ) >= ( ( D170 . D95 ) + 7 ) by L739 , L724 , L738;
L741: ( D170 . D164 ) = ( ( Exec (D168 , D171) ) . D164 ) by SCMPDS_5:41
.= ( 0 ) by L736 , L737 , AMI_3:10 , SCMPDS_2:46;
L742: (D94 is_closed_on ( Initialize D170 ) , D172 & D94 is_halting_on ( Initialize D170 ) , D172) by L741 , L740 , L668 , L726 , L727 , L728;
L743: (D94 is_closed_on D170 , D172 & D94 is_halting_on D170 , D172) by L742 , SCMPDS_6:125 , SCMPDS_6:126;
thus L744: ( insert-sort (R2 , R3) ) is_halting_on C117 , R4 by L743 , L729 , SCMPDS_7:24;
end;
thus L745: thesis by L725 , SCMPDS_6:21;
end;
L746: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B114 being ( 0 ) -started (State of ( SCMPDS )) holds ((( B114 . D98 ) >= ( 7 + ( B114 . D100 ) ) & ( B114 . ( GBP ) ) = ( 0 ) & ( B114 . D100 ) > ( 0 )) implies ( IExec (D91 , R4 , B114) ) = ( IExec (D91 , R4 , ( Initialize ( IExec (D90 , R4 , B114) ) )) ))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
let C118 being ( 0 ) -started (State of ( SCMPDS ));
set D175 = ( GBP );
set D176 = ( DataLoc (( C118 . D175 ) , 6) );
assume that
L747: ( C118 . D98 ) >= ( 7 + ( C118 . D100 ) )
and
L748: ( C118 . D175 ) = ( 0 )
and
L749: ( C118 . D100 ) > ( 0 );
L750: D176 = ( intpos ( ( 0 ) + 6 ) ) by L748 , SCMP_GCD:1;
L751:
now
let C119 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
L752: ( Initialize C119 ) = C119 by MEMSTR_0:44;
assume that
L753: (for R1 being Int_position holds (R1 in { D98 } implies ( C119 . R1 ) >= ( 7 + ( C119 . D176 ) )))
and
L754: (( C119 . D175 ) = ( C118 . D175 ) & ( C119 . D176 ) > ( 0 ));
set D177 = ( IExec (D90 , R5 , ( Initialize C119 )) );
L755: D98 in { D98 } by TARSKI:def 1;
L756: ( C119 . D98 ) >= ( 7 + ( C119 . D100 ) ) by L755 , L750 , L753;
thus L757: ( ( IExec (D90 , R5 , C119) ) . D175 ) = ( C119 . D175 ) by L756 , L748 , L750 , L754 , L278;
thus L758: (D90 is_closed_on C119 , R5 & D90 is_halting_on C119 , R5) by SCMPDS_6:20 , SCMPDS_6:21;
thus L759: ( ( IExec (D90 , R5 , C119) ) . D176 ) < ( C119 . D176 ) by L748 , L750 , L754 , L756 , L339;
L760: ( C119 . D98 ) >= ( 7 + ( C119 . D176 ) ) by L753 , L755;
L761: ( D177 . D98 ) >= ( 7 + ( D177 . D100 ) ) by L760 , L748 , L750 , L754 , L339 , L752;
thus L762: (for R1 being Int_position holds (R1 in { D98 } implies ( ( IExec (D90 , R5 , C119) ) . R1 ) >= ( 7 + ( ( IExec (D90 , R5 , C119) ) . D176 ) ))) by L761 , L750 , L752 , TARSKI:def 1;
end;
L763: (for R1 being Int_position holds (R1 in { D98 } implies ( C118 . R1 ) >= ( 7 + ( C118 . D176 ) ))) by L747 , L750 , TARSKI:def 1;
thus L764: thesis by L763 , L749 , L750 , L751 , SCMPDS_8:29;
end;
theorem
L765: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B115 being ( 0 ) -started (State of ( SCMPDS )) holds (for B116 , B117 being (FinSequence of ( INT )) holds (for B118 , B119 being (Element of ( NAT )) holds ((( B115 . ( intpos 4 ) ) >= ( 7 + ( B115 . ( intpos 6 ) ) ) & ( B115 . ( GBP ) ) = ( 0 ) & B119 = ( B115 . ( intpos 6 ) ) & B118 = ( ( ( B115 . ( intpos 4 ) ) - ( B115 . ( intpos 6 ) ) ) - 1 ) & B116 is_FinSequence_on B115 , B118 & B117 is_FinSequence_on ( IExec (( while>0 (( GBP ) , 6 , ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( SubFrom (( GBP ) , 5 , ( intpos 4 ) , ( 0 )) ) ) ';' ( if>0 (( GBP ) , 5 , ( ( ( ( ( (( GBP ) , 5) := (( intpos 4 ) , ( - 1 )) ) ';' ( (( intpos 4 ) , ( - 1 )) := (( intpos 4 ) , ( 0 )) ) ) ';' ( (( intpos 4 ) , ( 0 )) := (( GBP ) , 5) ) ) ';' ( AddTo (( GBP ) , 4 , ( - 1 )) ) ) ';' ( AddTo (( GBP ) , 6 , ( - 1 )) ) ) , ( Load ( (( GBP ) , 6) := ( 0 ) ) )) ) )) ) , R4 , B115) ) , B118 & ( len B116 ) = ( len B117 ) & ( len B116 ) > B119 & B116 is_non_decreasing_on 1 , B119) implies (B116 , B117 are_fiberwise_equipotent  & B117 is_non_decreasing_on 1 , ( B119 + 1 ) & (for B120 being (Element of ( NAT )) holds ((B120 > ( B119 + 1 ) & B120 <= ( len B116 )) implies ( B116 . B120 ) = ( B117 . B120 ))) & (for B121 being (Element of ( NAT )) holds ((1 <= B121 & B121 <= ( B119 + 1 )) implies (ex B122 being (Element of ( NAT )) st (1 <= B122 & B122 <= ( B119 + 1 ) & ( B117 . B121 ) = ( B116 . B122 )))))))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D178 = ( GBP );
let C120 being ( 0 ) -started (State of ( SCMPDS ));
let C121 , C122 being (FinSequence of ( INT ));
let C123 , C124 being (Element of ( NAT ));
assume L766: (( C120 . D98 ) >= ( 7 + ( C120 . D100 ) ) & ( C120 . D178 ) = ( 0 ) & C124 = ( C120 . D100 ) & C123 = ( ( ( C120 . D98 ) - ( C120 . D100 ) ) - 1 ));
defpred S6[ (Element of ( NAT )) ] means (for B123 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (for B124 , B125 being (FinSequence of ( INT )) holds ((( B123 . D98 ) >= ( 7 + ( B123 . D100 ) ) & ( B123 . D178 ) = ( 0 ) & $1 = ( B123 . D100 ) & C123 = ( ( ( B123 . D98 ) - ( B123 . D100 ) ) - 1 ) & B124 is_FinSequence_on B123 , C123 & B125 is_FinSequence_on ( IExec (D91 , R5 , B123) ) , C123 & ( len B124 ) = ( len B125 ) & ( len B124 ) > $1 & B124 is_non_decreasing_on 1 , $1) implies (B124 , B125 are_fiberwise_equipotent  & B125 is_non_decreasing_on 1 , ( $1 + 1 ) & (for B126 being (Element of ( NAT )) holds ((B126 > ( $1 + 1 ) & B126 <= ( len B124 )) implies ( B124 . B126 ) = ( B125 . B126 ))) & (for B127 being (Element of ( NAT )) holds ((1 <= B127 & B127 <= ( $1 + 1 )) implies (ex B128 being (Element of ( NAT )) st (1 <= B128 & B128 <= ( $1 + 1 ) & ( B125 . B127 ) = ( B124 . B128 ))))))))));
assume L767: (C121 is_FinSequence_on C120 , C123 & C122 is_FinSequence_on ( IExec (D91 , R4 , C120) ) , C123);
L768:
now
let C125 being (Element of ( NAT ));
assume L769: S6[ C125 ];
thus L770: S6[ (( C125 + 1 ) qua (Element of ( NAT ))) ]
proof
let C126 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
let C127 , C128 being (FinSequence of ( INT ));
L771: ( Initialize C126 ) = C126 by MEMSTR_0:44;
assume that
L772: ( C126 . D98 ) >= ( 7 + ( C126 . D100 ) )
and
L773: ( C126 . D178 ) = ( 0 )
and
L774: ( C125 + 1 ) = ( C126 . D100 )
and
L775: C123 = ( ( ( C126 . D98 ) - ( C126 . D100 ) ) - 1 )
and
L776: C127 is_FinSequence_on C126 , C123
and
L777: C128 is_FinSequence_on ( IExec (D91 , R5 , C126) ) , C123
and
L778: ( len C127 ) = ( len C128 )
and
L779: ( len C127 ) > ( C125 + 1 )
and
L780: C127 is_non_decreasing_on 1 , ( C125 + 1 );
set D179 = ( IExec (D90 , R5 , C126) );
set D180 = ( DataLoc (( C126 . D98 ) , ( - 1 )) );
set D181 = ( DataLoc (( C126 . D98 ) , ( 0 )) );
L781: ( D179 . D178 ) = ( 0 ) by L772 , L773 , L774 , L278;
L782: ( ( C123 + 1 ) + ( C125 + 1 ) ) >= ( 7 + ( C126 . D100 ) ) by L772 , L774 , L775;
L783: ( C123 + 1 ) >= 7 by L782 , L774 , XREAL_1:6;
L784: D180 = ( DataLoc (C123 , ( C125 + 1 )) ) by L774 , L775
.= ( intpos ( C123 + ( C125 + 1 ) ) ) by SCMP_GCD:1;
L785: ( D179 . D100 ) = ( ( Initialize D179 ) . D100 ) by SCMPDS_5:15;
L786: ( D179 . D98 ) = ( ( Initialize D179 ) . D98 ) by SCMPDS_5:15;
L787: ( ( Initialize D179 ) . D178 ) = ( D179 . D178 ) by SCMPDS_5:15;
L788: (( C126 . D180 ) > ( C126 . D181 ) implies (( D179 . D180 ) = ( C126 . D181 ) & ( D179 . D181 ) = ( C126 . D180 ) & ( D179 . D100 ) = ( ( C126 . D100 ) - 1 ) & ( D179 . D98 ) = ( ( C126 . D98 ) - 1 ))) by L772 , L773 , L774 , L339;
L789: (( C126 . D180 ) <= ( C126 . D181 ) implies (( D179 . D180 ) = ( C126 . D180 ) & ( D179 . D181 ) = ( C126 . D181 ) & ( D179 . D100 ) = ( 0 ))) by L772 , L773 , L774 , L339;
L790: D181 = ( intpos ( C123 + ( C125 + 2 ) ) ) by L774 , L775 , SCMP_GCD:1;
L791: ( D179 . D98 ) >= ( 7 + ( D179 . D100 ) ) by L772 , L773 , L774 , L339;
per cases ;
suppose L792: ( C126 . D180 ) > ( C126 . D181 );

L793:
now
let C129 being (Element of ( NAT ));
assume L794: (1 <= C129 & C129 <= ( len C128 ));
thus L795: ( C128 . C129 ) = ( ( IExec (D91 , R5 , C126) ) . ( intpos ( C123 + C129 ) ) ) by L794 , L777 , L1
.= ( ( IExec (D91 , R5 , ( Initialize D179 )) ) . ( intpos ( C123 + C129 ) ) ) by L772 , L773 , L774 , L746;
end;
L796: C128 is_FinSequence_on ( IExec (D91 , R5 , ( Initialize D179 )) ) , C123 by L793 , L1;
L797: ( C125 + 1 ) < ( C125 + 2 ) by XREAL_1:6;
consider C130 being (FinSequence of ( INT )) such that L798: ( len C130 ) = ( len C127 ) and L799: (for B129 being (Element of ( NAT )) holds ((1 <= B129 & B129 <= ( len C130 )) implies ( C130 . B129 ) = ( D179 . ( intpos ( C123 + B129 ) ) ))) by L3;
L800: ( C125 + 1 ) > C125 by XREAL_1:29;
L801: ( len C130 ) > C125 by L800 , L779 , L798 , XXREAL_0:2;
L802:
now
let C131 being (Element of ( NAT ));
assume that
L803: (C131 <> ( C125 + 1 ) & C131 <> ( C125 + 2 ))
and
L804: 1 <= C131
and
L805: C131 <= ( len C127 );
L806: (( C123 + C131 ) <> ( ( C126 . D98 ) - 1 ) & ( C123 + C131 ) <> ( C126 . D98 )) by L774 , L775 , L803;
L807: ( C123 + C131 ) >= ( C123 + 1 ) by L804 , XREAL_1:6;
L808: ( C123 + C131 ) >= 7 by L807 , L783 , XXREAL_0:2;
thus L809: ( C130 . C131 ) = ( D179 . ( intpos ( C123 + C131 ) ) ) by L798 , L799 , L804 , L805
.= ( C126 . ( intpos ( C123 + C131 ) ) ) by L772 , L773 , L774 , L808 , L806 , L339
.= ( C127 . C131 ) by L776 , L804 , L805 , L1;
end;
L810:
now
let C132 , C133 being (Element of ( NAT ));
assume that
L811: 1 <= C132
and
L812: C132 <= C133
and
L813: C133 <= C125;
L814: C133 <= ( len C127 ) by L798 , L801 , L813 , XXREAL_0:2;
L815: C132 <= ( len C127 ) by L814 , L812 , XXREAL_0:2;
L816: C125 < ( C125 + 1 ) by XREAL_1:29;
L817: C133 < ( C125 + 1 ) by L816 , L813 , XXREAL_0:2;
L818: ( C125 + 1 ) < ( ( C125 + 1 ) + 1 ) by XREAL_1:29;
L819: C125 < ( ( C125 + 1 ) + 1 ) by L818 , L816 , XXREAL_0:2;
L820: C133 >= 1 by L811 , L812 , XXREAL_0:2;
L821: ( C130 . C133 ) = ( C127 . C133 ) by L820 , L802 , L813 , L816 , L819 , L814;
L822: C133 < ( C125 + 2 ) by L813 , L819 , XXREAL_0:2;
L823: ( C130 . C132 ) = ( C127 . C132 ) by L822 , L802 , L811 , L812 , L817 , L815;
thus L824: ( C130 . C132 ) <= ( C130 . C133 ) by L823 , L780 , L811 , L812 , L817 , L821 , GRAPH_2:def 12;
end;
L825: C130 is_non_decreasing_on 1 , C125 by L810 , GRAPH_2:def 12;
L826: ( len C127 ) >= ( ( C125 + 1 ) + 1 ) by L779 , INT_1:7;
L827: 1 <= ( C125 + 1 ) by NAT_1:11;
L828: 1 <= ( C125 + 2 ) by L827 , L797 , XXREAL_0:2;
L829: ( C130 . ( C125 + 2 ) ) = ( C126 . D180 ) by L828 , L790 , L788 , L792 , L798 , L799 , L826;
L830: ( C130 . ( C125 + 2 ) ) = ( C127 . ( C125 + 1 ) ) by L829 , L776 , L779 , L784 , L827 , L1;
L831: ( ( ( D179 . D98 ) - ( D179 . D100 ) ) - 1 ) = C123 by L775 , L788 , L792;
L832: ( C130 . ( C125 + 1 ) ) = ( C126 . D181 ) by L779 , L784 , L788 , L792 , L798 , L799 , NAT_1:11;
L833: ( C130 . ( C125 + 1 ) ) = ( C127 . ( C125 + 2 ) ) by L832 , L776 , L790 , L828 , L826 , L1;
L834: C127 , C130 are_fiberwise_equipotent  by L833 , L779 , L798 , L802 , L827 , L828 , L826 , L830 , L16;
L835: C130 is_FinSequence_on ( Initialize D179 ) , C123
proof
let C134 being (Element of ( NAT ));
assume L836: (1 <= C134 & C134 <= ( len C130 ));
L837: ( C130 . C134 ) = ( D179 . ( intpos ( C123 + C134 ) ) ) by L836 , L799;
thus L838: thesis by L837 , SCMPDS_5:15;
end;
L839: C130 , C128 are_fiberwise_equipotent  by L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L796 , L801 , L825 , L835 , L785 , L786 , L787;
thus L840: C127 , C128 are_fiberwise_equipotent  by L839 , L834 , CLASSES1:76;
L841: C128 is_non_decreasing_on 1 , ( C125 + 1 ) by L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L785 , L786 , L787 , L796 , L801 , L825;
L842:
now
let C135 , C136 being (Element of ( NAT ));
assume that
L843: 1 <= C135
and
L844: C135 <= C136
and
L845: C136 <= ( ( C125 + 1 ) + 1 );
per cases  by L845 , NAT_1:8;
suppose L846: C136 <= ( C125 + 1 );

thus L847: ( C128 . C135 ) <= ( C128 . C136 ) by L846 , L841 , L843 , L844 , GRAPH_2:def 12;
end;
suppose L848: C136 = ( ( C125 + 1 ) + 1 );

thus L849:now
per cases ;
suppose L850: C135 = C136;

thus L851: ( C128 . C135 ) <= ( C128 . C136 ) by L850;
end;
suppose L852: C135 <> C136;

L853: C135 < C136 by L852 , L844 , XXREAL_0:1;
L854: C135 <= ( C125 + 1 ) by L853 , L848 , NAT_1:13;
consider C137 being (Element of ( NAT )) such that L855: 1 <= C137 and L856: C137 <= ( C125 + 1 ) and L857: ( C128 . C135 ) = ( C130 . C137 ) by L854 , L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L796 , L801 , L825 , L843 , L785 , L786 , L787;
L858: ( C128 . C136 ) = ( C130 . ( C125 + 2 ) ) by L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L796 , L801 , L825 , L797 , L826 , L848 , L785 , L786 , L787;
thus L859:now
per cases ;
suppose L860: C137 = ( C125 + 1 );

thus L861: ( C128 . C135 ) <= ( C128 . C136 ) by L860 , L779 , L784 , L788 , L789 , L798 , L799 , L829 , L855 , L857 , L858;
end;
suppose L862: C137 <> ( C125 + 1 );

L863: C137 < ( C125 + 2 ) by L797 , L856 , XXREAL_0:2;
L864: C137 < ( len C130 ) by L863 , L798 , L826 , XXREAL_0:2;
L865: ( C130 . C137 ) = ( C127 . C137 ) by L864 , L798 , L802 , L797 , L855 , L856 , L862;
L866: ( C128 . C136 ) = ( C127 . ( C125 + 1 ) ) by L776 , L779 , L784 , L827 , L829 , L858 , L1;
thus L867: ( C128 . C135 ) <= ( C128 . C136 ) by L866 , L780 , L855 , L856 , L857 , L865 , GRAPH_2:def 12;
end;
end;
end;
end;
end;
end;
thus L851: C128 is_non_decreasing_on 1 , ( ( C125 + 1 ) + 1 ) by L842 , GRAPH_2:def 12;
thus L852:now
let C138 being (Element of ( NAT ));
assume that
L853: C138 > ( ( C125 + 1 ) + 1 )
and
L854: C138 <= ( len C127 );
L855: ( C125 + 1 ) < ( ( C125 + 1 ) + 1 ) by XREAL_1:29;
L856: C138 > ( C125 + 1 ) by L855 , L853 , XXREAL_0:2;
L857: 1 <= ( C125 + 1 ) by NAT_1:11;
L858: 1 <= C138 by L857 , L856 , XXREAL_0:2;
thus L859: ( C128 . C138 ) = ( C130 . C138 ) by L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L796 , L801 , L825 , L854 , L856 , L785 , L786 , L787
.= ( C127 . C138 ) by L802 , L853 , L854 , L855 , L858;
end;
thus L860:now
let C139 being (Element of ( NAT ));
assume that
L861: 1 <= C139
and
L862: C139 <= ( ( C125 + 1 ) + 1 );
per cases ;
suppose L863: C139 = ( ( C125 + 1 ) + 1 );

take D182 = ( C125 + 1 );
thus L864: 1 <= D182 by NAT_1:11;
thus L865: D182 <= ( ( C125 + 1 ) + 1 ) by NAT_1:11;
thus L866: ( C128 . C139 ) = ( C127 . D182 ) by L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L796 , L801 , L825 , L797 , L826 , L830 , L863 , L785 , L786 , L787;
end;
suppose L867: C139 <> ( ( C125 + 1 ) + 1 );

L868: C139 < ( ( C125 + 1 ) + 1 ) by L867 , L862 , XXREAL_0:1;
L869: C139 <= ( C125 + 1 ) by L868 , NAT_1:13;
consider C140 being (Element of ( NAT )) such that L870: 1 <= C140 and L871: C140 <= ( C125 + 1 ) and L872: ( C128 . C139 ) = ( C130 . C140 ) by L869 , L769 , L774 , L778 , L781 , L791 , L788 , L792 , L798 , L831 , L835 , L796 , L801 , L825 , L861 , L785 , L786 , L787;
thus L873:now
L874: ( C125 + 2 ) = ( ( C125 + 1 ) + 1 );
per cases ;
suppose L875: C140 = ( C125 + 1 );

take D183 = ( C125 + 2 );
thus L876: 1 <= D183 by L874 , NAT_1:11;
thus L877: D183 <= ( ( C125 + 1 ) + 1 );
thus L878: ( C128 . C139 ) = ( C127 . D183 ) by L776 , L790 , L828 , L826 , L832 , L872 , L875 , L1;
end;
suppose L879: C140 <> ( C125 + 1 );

take D184 = C140;
thus L880: 1 <= D184 by L870;
thus L881: D184 <= ( ( C125 + 1 ) + 1 ) by L797 , L871 , XXREAL_0:2;
L882: D184 < ( C125 + 2 ) by L797 , L871 , XXREAL_0:2;
L883: D184 < ( len C127 ) by L882 , L826 , XXREAL_0:2;
thus L884: ( C128 . C139 ) = ( C127 . D184 ) by L883 , L802 , L797 , L870 , L871 , L872 , L879;
end;
end;
end;
end;
end;
suppose L861: ( C126 . D180 ) <= ( C126 . D181 );

L862:
now
let C141 being Nat;
assume that
L863: C141 >= 1
and
L864: C141 <= ( len C127 );
L865: C141 in ( NAT ) by ORDINAL1:def 12;
L866: ( C127 . C141 ) = ( C126 . ( intpos ( C123 + C141 ) ) ) by L865 , L776 , L863 , L864 , L1;
L867: ( D179 . ( DataLoc (( D179 . D178 ) , 6) ) ) = ( 0 ) by L781 , L789 , L861 , SCMP_GCD:1;
L868: ( ( Initialize D179 ) . ( DataLoc (( D179 . D178 ) , 6) ) ) = ( 0 ) by L867 , SCMPDS_5:15;
L869: ( C123 + C141 ) >= ( C123 + 1 ) by L863 , XREAL_1:6;
L870: ( C123 + C141 ) >= 7 by L869 , L783 , XXREAL_0:2;
L871: ( ( Initialize D179 ) . ( intpos ( C123 + C141 ) ) ) = ( D179 . ( intpos ( C123 + C141 ) ) ) by SCMPDS_5:15;
L872: ( ( Initialize D179 ) . ( DataLoc (( ( Initialize D179 ) . ( GBP ) ) , 6) ) ) <= ( 0 ) by L868 , SCMPDS_5:15;
per cases ;
suppose L873: ( C123 + C141 ) = ( ( C126 . D98 ) - 1 );

thus L874: ( C127 . C141 ) = ( ( IExec (D91 , R5 , ( Initialize D179 )) ) . D180 ) by L873 , L774 , L775 , L784 , L789 , L861 , L866 , L871 , L872 , SCMPDS_8:23
.= ( ( IExec (D91 , R5 , ( Initialize C126 )) ) . D180 ) by L772 , L773 , L774 , L746 , L771
.= ( C128 . C141 ) by L774 , L775 , L777 , L778 , L779 , L784 , L863 , L873 , L1 , L771;
end;
suppose L875: ( C123 + C141 ) = ( C126 . D98 );

thus L876: ( C127 . C141 ) = ( ( IExec (D91 , R5 , ( Initialize D179 )) ) . D181 ) by L875 , L774 , L775 , L790 , L789 , L861 , L866 , L871 , L872 , SCMPDS_8:23
.= ( ( IExec (D91 , R5 , ( Initialize C126 )) ) . D181 ) by L772 , L773 , L774 , L746 , L771
.= ( C128 . C141 ) by L774 , L775 , L777 , L778 , L790 , L863 , L864 , L875 , L1 , L771;
end;
suppose L877: (( C123 + C141 ) <> ( ( C126 . D98 ) - 1 ) & ( C123 + C141 ) <> ( C126 . D98 ));

thus L878: ( C127 . C141 ) = ( D179 . ( intpos ( C123 + C141 ) ) ) by L877 , L772 , L773 , L774 , L870 , L866 , L339
.= ( ( IExec (D91 , R5 , ( Initialize D179 )) ) . ( intpos ( C123 + C141 ) ) ) by L871 , L872 , SCMPDS_8:23
.= ( ( IExec (D91 , R5 , ( Initialize C126 )) ) . ( intpos ( C123 + C141 ) ) ) by L772 , L773 , L774 , L746 , L771
.= ( C128 . C141 ) by L777 , L778 , L865 , L863 , L864 , L1 , L771;
end;
end;
L880: C127 = C128 by L862 , L778 , FINSEQ_1:14;
thus L881: C127 , C128 are_fiberwise_equipotent  by L778 , L862 , FINSEQ_1:14;
L882:
now
let C142 , C143 being (Element of ( NAT ));
assume that
L883: 1 <= C142
and
L884: C142 <= C143
and
L885: C143 <= ( ( C125 + 1 ) + 1 );
per cases  by L885 , NAT_1:8;
suppose L886: C143 <= ( C125 + 1 );

thus L887: ( C127 . C142 ) <= ( C127 . C143 ) by L886 , L780 , L883 , L884 , GRAPH_2:def 12;
end;
suppose L888: C143 = ( ( C125 + 1 ) + 1 );

thus L889:now
per cases ;
suppose L890: C142 = C143;

thus L891: ( C127 . C142 ) <= ( C127 . C143 ) by L890;
end;
suppose L892: C142 <> C143;

L893: C142 < C143 by L892 , L884 , XXREAL_0:1;
L894: C142 <= ( C125 + 1 ) by L893 , L888 , NAT_1:13;
L895: ( C127 . C142 ) <= ( C127 . ( C125 + 1 ) ) by L894 , L780 , L883 , GRAPH_2:def 12;
L896: 1 <= ( C125 + 1 ) by NAT_1:11;
L897: ( C127 . ( C125 + 1 ) ) = ( C126 . D180 ) by L896 , L776 , L779 , L784 , L1;
L898: (1 <= ( ( C125 + 1 ) + 1 ) & C143 <= ( len C127 )) by L779 , L888 , INT_1:7 , NAT_1:11;
L899: ( C127 . C143 ) = ( C126 . D181 ) by L898 , L776 , L790 , L888 , L1;
thus L900: ( C127 . C142 ) <= ( C127 . C143 ) by L899 , L861 , L895 , L897 , XXREAL_0:2;
end;
end;
end;
end;
thus L891: C128 is_non_decreasing_on 1 , ( ( C125 + 1 ) + 1 ) by L882 , L880 , GRAPH_2:def 12;
thus L892: (for B130 being (Element of ( NAT )) holds ((B130 > ( ( C125 + 1 ) + 1 ) & B130 <= ( len C127 )) implies ( C127 . B130 ) = ( C128 . B130 ))) by L778 , L862 , FINSEQ_1:14;
thus L893: (for B131 being (Element of ( NAT )) holds ((1 <= B131 & B131 <= ( ( C125 + 1 ) + 1 )) implies (ex B132 being (Element of ( NAT )) st (1 <= B132 & B132 <= ( ( C125 + 1 ) + 1 ) & ( C128 . B131 ) = ( C127 . B132 ))))) by L880;
end;
end;

end;
L771: S6[ (( 0 ) qua (Element of ( NAT ))) ]
proof
let C144 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
let C145 , C146 being (FinSequence of ( INT ));
L772: ( Initialize C144 ) = C144 by MEMSTR_0:44;
assume that
L773: ( C144 . D98 ) >= ( 7 + ( C144 . D100 ) )
and
L774: (( C144 . D178 ) = ( 0 ) & ( 0 ) = ( C144 . D100 ))
and
L775: C123 = ( ( ( C144 . D98 ) - ( C144 . D100 ) ) - 1 )
and
L776: C145 is_FinSequence_on C144 , C123
and
L777: C146 is_FinSequence_on ( IExec (D91 , R5 , C144) ) , C123
and
L778: ( len C145 ) = ( len C146 )
and
L779: ( len C145 ) > ( 0 )
and
L780: C145 is_non_decreasing_on 1 , ( 0 );
L781: ( C144 . ( DataLoc (( C144 . D178 ) , 6) ) ) = ( 0 ) by L774 , SCMP_GCD:1;
L782:
now
let C147 being Nat;
assume L783: (1 <= C147 & C147 <= ( len C145 ));
L784: C147 in ( NAT ) by ORDINAL1:def 12;
thus L785: ( C145 . C147 ) = ( C144 . ( intpos ( C123 + C147 ) ) ) by L784 , L776 , L783 , L1
.= ( ( IExec (D91 , R5 , ( Initialize C144 )) ) . ( intpos ( C123 + C147 ) ) ) by L781 , L772 , SCMPDS_8:23
.= ( C146 . C147 ) by L777 , L778 , L784 , L783 , L1 , L772;
end;
thus L786: C145 , C146 are_fiberwise_equipotent  by L782 , L778 , FINSEQ_1:14;
thus L787: C146 is_non_decreasing_on 1 , ( ( 0 ) + 1 ) by GRAPH_2:63;
thus L788: (for B133 being (Element of ( NAT )) holds ((B133 > ( ( 0 ) + 1 ) & B133 <= ( len C145 )) implies ( C145 . B133 ) = ( C146 . B133 ))) by L782;
L789: C145 = C146 by L778 , L782 , FINSEQ_1:14;
thus L790: thesis by L789;
end;
L791: (for B134 being (Element of ( NAT )) holds S6[ B134 ]) from NAT_1:sch 1(L771 , L768);
assume L792: (( len C121 ) = ( len C122 ) & ( len C121 ) > C124 & C121 is_non_decreasing_on 1 , C124);
thus L793: thesis by L792 , L766 , L767 , L791;
end;
L794: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B135 being ( 0 ) -started (State of ( SCMPDS )) holds (for B136 , B137 being (FinSequence of ( INT )) holds (for B138 , B139 being (Element of ( NAT )) holds ((( B135 . ( GBP ) ) = ( 0 ) & ( B135 . D96 ) = ( B139 - 1 ) & ( B135 . D97 ) = ( B138 + 1 ) & ( B135 . D95 ) = ( 0 ) & B138 >= 6 & B136 is_FinSequence_on B135 , B138 & B137 is_FinSequence_on ( IExec (D94 , R4 , B135) ) , B138 & ( len B136 ) = B139 & ( len B137 ) = B139) implies (B136 , B137 are_fiberwise_equipotent  & B137 is_non_decreasing_on 1 , B139))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D185 = ( GBP );
let C148 being ( 0 ) -started (State of ( SCMPDS ));
let C149 , C150 being (FinSequence of ( INT ));
let C151 , C152 being (Element of ( NAT ));
assume that
L795: ( C148 . D185 ) = ( 0 )
and
L796: ( C148 . D96 ) = ( C152 - 1 )
and
L797: ( C148 . D97 ) = ( C151 + 1 )
and
L798: ( C148 . D95 ) = ( 0 )
and
L799: C151 >= 6
and
L800: (C149 is_FinSequence_on C148 , C151 & C150 is_FinSequence_on ( IExec (D94 , R4 , C148) ) , C151)
and
L801: ( len C149 ) = C152
and
L802: ( len C150 ) = C152;
per cases ;
suppose L803: C152 = ( 0 );

L804: C150 = ( {} ) by L803 , L802;
thus L805: C149 , C150 are_fiberwise_equipotent  by L804 , L801 , L803;
thus L806: thesis by L803 , GRAPH_2:63;
end;
suppose L807: C152 <> ( 0 );

L808: C152 >= ( 1 + ( 0 ) ) by L807 , INT_1:7;
L809: ( C152 - 1 ) >= ( 0 ) by L808 , XREAL_1:19;
reconsider D186 = ( C152 - 1 ) as (Element of ( NAT )) by L809 , INT_1:3;
defpred S7[ Nat ] means (for B140 being ( 0 ) -started (State of ( SCMPDS )) holds (for R5 being (Instruction-Sequence of ( SCMPDS )) holds (for B141 , B142 being (FinSequence of ( INT )) holds (for B143 being (Element of ( NAT )) holds ((( B140 . D185 ) = ( 0 ) & ( ( B140 . D96 ) + ( B140 . D95 ) ) = ( C152 - 1 ) & ( B140 . D96 ) = $1 & B143 = ( C152 - ( B140 . D96 ) ) & C151 = ( ( ( B140 . D97 ) - ( B140 . D95 ) ) - 1 ) & B141 is_FinSequence_on B140 , C151 & B142 is_FinSequence_on ( IExec (D94 , R5 , B140) ) , C151 & B141 is_non_decreasing_on 1 , B143 & ( len B141 ) = C152 & ( len B142 ) = C152) implies (B141 , B142 are_fiberwise_equipotent  & B142 is_non_decreasing_on 1 , C152))))));
L810: (( ( C148 . D96 ) + ( C148 . D95 ) ) = ( ( C152 - 1 ) + ( 0 ) ) & 1 = ( C152 - ( C148 . D96 ) )) by L796 , L798;
L811:
now
let C153 being (Element of ( NAT ));
assume L812: S7[ C153 ];
L813:
now
let C154 being ( 0 ) -started (State of ( SCMPDS ));
let C155 , C156 being (FinSequence of ( INT ));
let C157 being (Element of ( NAT ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
assume that
L814: ( C154 . D185 ) = ( 0 )
and
L815: ( ( C154 . D96 ) + ( C154 . D95 ) ) = ( C152 - 1 )
and
L816: ( C154 . D96 ) = ( C153 + 1 )
and
L817: C157 = ( C152 - ( C154 . D96 ) )
and
L818: C151 = ( ( ( C154 . D97 ) - ( C154 . D95 ) ) - 1 )
and
L819: C155 is_FinSequence_on C154 , C151
and
L820: C156 is_FinSequence_on ( IExec (D94 , R5 , C154) ) , C151
and
L821: (C155 is_non_decreasing_on 1 , C157 & ( len C155 ) = C152)
and
L822: ( len C156 ) = C152;
set D187 = ( IExec (D92 , R5 , C154) );
set D188 = ( IExec (D147 , R5 , C154) );
set D189 = R5;
L823: ( D187 . D185 ) = ( ( Initialize D187 ) . D185 ) by SCMPDS_5:15;
L824: ( D187 . D98 ) = ( ( Initialize D187 ) . D98 ) by SCMPDS_5:15;
L825: ( D187 . D100 ) = ( ( Initialize D187 ) . D100 ) by SCMPDS_5:15;
L826: ( D187 . D98 ) = ( ( C154 . D97 ) + 1 ) by L814 , L597;
L827: ( C151 + ( ( C154 . D95 ) + 1 ) ) = ( C154 . D97 ) by L818;
L828: ( C154 . D97 ) >= ( 6 + ( ( C154 . D95 ) + 1 ) ) by L827 , L799 , XREAL_1:6;
L829: ( C154 . D97 ) >= ( ( 6 + 1 ) + ( C154 . D95 ) ) by L828;
L830: ( D188 . D185 ) = ( 0 ) by L829 , L814 , L640;
L831: ( D188 . D96 ) = ( ( C154 . D96 ) - 1 ) by L814 , L829 , L640;
L832: ( C152 - ( D188 . D96 ) ) = ( C157 + 1 ) by L831 , L817;
L833: ( D188 . D95 ) = ( ( C154 . D95 ) + 1 ) by L814 , L829 , L640;
L834: ( ( D188 . D96 ) + ( D188 . D95 ) ) = ( C152 - 1 ) by L833 , L815 , L831;
L835: ( D188 . D97 ) = ( ( C154 . D97 ) + 1 ) by L814 , L829 , L640;
L836: ( ( ( D188 . D97 ) - ( D188 . D95 ) ) - 1 ) = C151 by L835 , L818 , L833;
L837: ( D187 . D100 ) = ( ( C154 . D95 ) + 1 ) by L814 , L597;
L838: C151 = ( ( ( D187 . D98 ) - ( D187 . D100 ) ) - 1 ) by L837 , L818 , L826;
L839:
now
let C158 being (Element of ( NAT ));
assume L840: (1 <= C158 & C158 <= ( len C156 ));
thus L841: ( C156 . C158 ) = ( ( IExec (D94 , R5 , C154) ) . ( intpos ( C151 + C158 ) ) ) by L840 , L820 , L1
.= ( ( IExec (D94 , R5 , ( Initialize D188 )) ) . ( intpos ( C151 + C158 ) ) ) by L814 , L816 , L829 , L694;
end;
L842: C156 is_FinSequence_on ( IExec (D94 , R5 , ( Initialize D188 )) ) , C151 by L839 , L1;
L843:
now
L844: ( C151 + 1 ) >= ( 6 + 1 ) by L799 , XREAL_1:6;
let C159 being (Element of ( NAT ));
assume that
L845: 1 <= C159
and
L846: C159 <= ( len C155 );
L847: ( C151 + 1 ) <= ( C151 + C159 ) by L845 , XREAL_1:6;
L848: ( C151 + C159 ) >= 7 by L847 , L844 , XXREAL_0:2;
thus L849: ( C155 . C159 ) = ( C154 . ( intpos ( C151 + C159 ) ) ) by L819 , L845 , L846 , L1
.= ( D187 . ( intpos ( C151 + C159 ) ) ) by L814 , L848 , L597;
end;
L850: ( D187 . D98 ) = ( C151 + ( ( D187 . D100 ) + 1 ) ) by L818 , L826 , L837;
L851: ( D187 . D98 ) >= ( 6 + ( ( D187 . D100 ) + 1 ) ) by L850 , L799 , XREAL_1:6;
L852: ( D187 . D98 ) >= ( ( 6 + 1 ) + ( D187 . D100 ) ) by L851;
L853: ( C157 + ( C153 + 1 ) ) = C152 by L816 , L817;
L854: C152 > ( ( 0 ) + C157 ) by L853 , XREAL_1:6;
consider C160 being (FinSequence of ( INT )) such that L855: ( len C160 ) = C152 and L856: (for B144 being (Element of ( NAT )) holds ((1 <= B144 & B144 <= ( len C160 )) implies ( C160 . B144 ) = ( ( IExec (D91 , D189 , ( Initialize D187 )) ) . ( intpos ( C151 + B144 ) ) ))) by L3;
L857: C160 is_FinSequence_on ( IExec (D91 , D189 , ( Initialize D187 )) ) , C151 by L856 , L1;
L858:
now
L859: ( C151 + 1 ) >= ( 6 + 1 ) by L799 , XREAL_1:6;
let C161 being (Element of ( NAT ));
assume that
L860: 1 <= C161
and
L861: C161 <= ( len C160 );
L862: ( C151 + 1 ) <= ( C151 + C161 ) by L860 , XREAL_1:6;
L863: ( C151 + C161 ) >= 7 by L862 , L859 , XXREAL_0:2;
L864: ( C151 + C161 ) > 2 by L863 , XXREAL_0:2;
thus L865: ( C160 . C161 ) = ( ( IExec (D91 , D189 , ( Initialize D187 )) ) . ( intpos ( C151 + C161 ) ) ) by L856 , L860 , L861
.= ( D188 . ( intpos ( C151 + C161 ) ) ) by L814 , L829 , L864 , L640;
end;
L866: C155 is_FinSequence_on ( Initialize D187 ) , C151
proof
let C162 being (Element of ( NAT ));
assume L867: (1 <= C162 & C162 <= ( len C155 ));
L868: ( C155 . C162 ) = ( D187 . ( intpos ( C151 + C162 ) ) ) by L867 , L843;
thus L869: thesis by L868 , SCMPDS_5:15;
end;
L870: ( D187 . D185 ) = ( 0 ) by L814 , L597;
L871: C155 , C160 are_fiberwise_equipotent  by L870 , L815 , L817 , L818 , L821 , L826 , L855 , L838 , L852 , L857 , L854 , L765 , L824 , L825 , L823 , L866;
L872: C160 is_non_decreasing_on 1 , ( C157 + 1 ) by L815 , L817 , L818 , L821 , L826 , L855 , L838 , L852 , L857 , L854 , L765 , L824 , L825 , L823 , L866 , L870;
L873: ( ( Initialize D188 ) . D185 ) = ( D188 . D185 ) by SCMPDS_5:15;
L874: ( ( Initialize D188 ) . D95 ) = ( D188 . D95 ) by SCMPDS_5:15;
L875: ( ( Initialize D188 ) . D96 ) = ( D188 . D96 ) by SCMPDS_5:15;
L876: ( ( Initialize D188 ) . D97 ) = ( D188 . D97 ) by SCMPDS_5:15;
L877: C160 is_FinSequence_on ( Initialize D188 ) , C151
proof
let C163 being (Element of ( NAT ));
assume that
L878: (1 <= C163 & C163 <= ( len C160 ));
thus L879: ( C160 . C163 ) = ( D188 . ( intpos ( C151 + C163 ) ) ) by L878 , L858
.= ( ( Initialize D188 ) . ( intpos ( C151 + C163 ) ) ) by SCMPDS_5:15;
end;
L880: C160 , C156 are_fiberwise_equipotent  by L877 , L812 , L816 , L817 , L822 , L855 , L830 , L834 , L832 , L836 , L842 , L872 , L873 , L874 , L875 , L876;
thus L881: C155 , C156 are_fiberwise_equipotent  by L880 , L871 , CLASSES1:76;
thus L882: C156 is_non_decreasing_on 1 , C152 by L812 , L816 , L817 , L822 , L855 , L872 , L830 , L834 , L832 , L836 , L842 , L873 , L874 , L875 , L876 , L877;
end;
thus L883: S7[ ( C153 + 1 ) ] by L813;
end;
L884: S7[ (( 0 ) qua Nat) ]
proof
let C164 being ( 0 ) -started (State of ( SCMPDS ));
let R5 being (Instruction-Sequence of ( SCMPDS ));
let C165 , C166 being (FinSequence of ( INT ));
let C167 being (Element of ( NAT ));
L885: ( Initialize C164 ) = C164 by MEMSTR_0:44;
assume that
L886: ( C164 . D185 ) = ( 0 )
and
L887: ( ( C164 . D96 ) + ( C164 . D95 ) ) = ( C152 - 1 )
and
L888: ( C164 . D96 ) = ( 0 )
and
L889: C167 = ( C152 - ( C164 . D96 ) )
and
L890: C151 = ( ( ( C164 . D97 ) - ( C164 . D95 ) ) - 1 )
and
L891: C165 is_FinSequence_on C164 , C151
and
L892: C166 is_FinSequence_on ( IExec (D94 , R5 , C164) ) , C151
and
L893: C165 is_non_decreasing_on 1 , C167
and
L894: (( len C165 ) = C152 & ( len C166 ) = C152);
L895: ( C164 . ( DataLoc (( C164 . D185 ) , 2) ) ) = ( 0 ) by L886 , L888 , SCMP_GCD:1;
L896:
now
let C168 being Nat;
assume L897: (1 <= C168 & C168 <= ( len C166 ));
L898: C168 in ( NAT ) by ORDINAL1:def 12;
thus L899: ( C166 . C168 ) = ( ( IExec (D94 , R5 , ( Initialize C164 )) ) . ( intpos ( C151 + C168 ) ) ) by L898 , L892 , L897 , L1 , L885
.= ( C164 . ( intpos ( C151 + C168 ) ) ) by L895 , SCMPDS_7:47
.= ( C165 . C168 ) by L891 , L894 , L898 , L897 , L1;
end;
thus L900: C165 , C166 are_fiberwise_equipotent  by L896 , L894 , FINSEQ_1:14;
thus L901: thesis by L888 , L889 , L893 , L894 , L896 , FINSEQ_1:14;
end;
L902: (for B145 being (Element of ( NAT )) holds S7[ B145 ]) from NAT_1:sch 1(L884 , L811);
L903: S7[ D186 ] by L902;
L904: (C151 = ( ( ( C148 . D97 ) - ( C148 . D95 ) ) - 1 ) & C149 is_non_decreasing_on 1 , 1) by L797 , L798 , GRAPH_2:63;
thus L905: thesis by L904 , L795 , L800 , L801 , L802 , L810 , L903;
end;
end;
theorem
L907: (for R4 being (Instruction-Sequence of ( SCMPDS )) holds (for B146 being ( 0 ) -started (State of ( SCMPDS )) holds (for B147 , B148 being (FinSequence of ( INT )) holds (for B149 , B150 being (Element of ( NAT )) holds ((B149 >= 6 & ( len B147 ) = B150 & ( len B148 ) = B150 & B147 is_FinSequence_on B146 , B149 & B148 is_FinSequence_on ( IExec (( insert-sort (B150 , ( B149 + 1 )) ) , R4 , B146) ) , B149) implies (B147 , B148 are_fiberwise_equipotent  & B148 is_non_decreasing_on 1 , B150))))))
proof
let R4 being (Instruction-Sequence of ( SCMPDS ));
set D190 = ( GBP );
let C169 being ( 0 ) -started (State of ( SCMPDS ));
let C170 , C171 being (FinSequence of ( INT ));
let C172 , C173 being (Element of ( NAT ));
assume that
L908: C172 >= 6
and
L909: (( len C170 ) = C173 & ( len C171 ) = C173)
and
L910: C170 is_FinSequence_on C169 , C172
and
L911: C171 is_FinSequence_on ( IExec (( insert-sort (C173 , ( C172 + 1 )) ) , R4 , C169) ) , C172;
L912: ( C172 + 1 ) >= ( 6 + 1 ) by L908 , XREAL_1:6;
set D191 = ( ( GBP ) := ( 0 ) );
set D192 = ( (( GBP ) , 1) := ( 0 ) );
set D193 = ( (( GBP ) , 2) := ( C173 - 1 ) );
set D194 = ( (( GBP ) , 3) := ( C172 + 1 ) );
set D195 = ( ( ( D191 ';' D192 ) ';' D193 ) ';' D194 );
set D196 = ( IExec (D195 , R4 , C169) );
set D197 = ( IExec (( ( D191 ';' D192 ) ';' D193 ) , R4 , C169) );
set D198 = ( IExec (( D191 ';' D192 ) , R4 , C169) );
set D199 = ( Exec (D191 , C169) );
L913: ( D199 . D190 ) = ( 0 ) by SCMPDS_2:45;
L914: ( DataLoc (( D199 . D190 ) , 1) ) = ( intpos ( ( 0 ) + 1 ) ) by L913 , SCMP_GCD:1;
L915: ( D198 . D190 ) = ( ( Exec (D192 , D199) ) . D190 ) by SCMPDS_5:42
.= ( 0 ) by L913 , L914 , AMI_3:10 , SCMPDS_2:46;
L916: ( DataLoc (( D198 . D190 ) , 2) ) = ( intpos ( ( 0 ) + 2 ) ) by L915 , SCMP_GCD:1;
L917: ( D197 . D190 ) = ( ( Exec (D193 , D198) ) . D190 ) by SCMPDS_5:41
.= ( 0 ) by L915 , L916 , AMI_3:10 , SCMPDS_2:46;
L918: ( DataLoc (( D197 . D190 ) , 3) ) = ( intpos ( ( 0 ) + 3 ) ) by L917 , SCMP_GCD:1;
L919:
now
let C174 being (Element of ( NAT ));
assume L920: C174 > 3;
L921: C174 > 1 by L920 , XXREAL_0:2;
thus L922: ( D198 . ( intpos C174 ) ) = ( ( Exec (D192 , D199) ) . ( intpos C174 ) ) by SCMPDS_5:42
.= ( D199 . ( intpos C174 ) ) by L914 , L921 , AMI_3:10 , SCMPDS_2:46
.= ( C169 . ( intpos C174 ) ) by L920 , AMI_3:10 , SCMPDS_2:45;
end;
L923:
now
let C175 being (Element of ( NAT ));
assume L924: C175 > 3;
L925: C175 > 2 by L924 , XXREAL_0:2;
thus L926: ( D197 . ( intpos C175 ) ) = ( ( Exec (D193 , D198) ) . ( intpos C175 ) ) by SCMPDS_5:41
.= ( D198 . ( intpos C175 ) ) by L916 , L925 , AMI_3:10 , SCMPDS_2:46
.= ( C169 . ( intpos C175 ) ) by L919 , L924;
end;
L927:
now
let C176 being (Element of ( NAT ));
assume that
L928: 1 <= C176
and
L929: C176 <= ( len C170 );
set D200 = ( C172 + C176 );
L930: D200 >= ( C172 + 1 ) by L928 , XREAL_1:6;
L931: D200 >= 7 by L930 , L912 , XXREAL_0:2;
L932: D200 > 3 by L931 , XXREAL_0:2;
thus L933: ( ( Initialize D196 ) . ( intpos D200 ) ) = ( D196 . ( intpos D200 ) ) by SCMPDS_5:15
.= ( ( Exec (D194 , D197) ) . ( intpos D200 ) ) by SCMPDS_5:41
.= ( D197 . ( intpos D200 ) ) by L918 , L932 , AMI_3:10 , SCMPDS_2:46
.= ( C169 . ( intpos D200 ) ) by L923 , L932
.= ( C170 . C176 ) by L910 , L928 , L929 , L1;
end;
L934: C170 is_FinSequence_on ( Initialize D196 ) , C172 by L927 , L1;
L935: ( D198 . D95 ) = ( ( Exec (D192 , D199) ) . D95 ) by SCMPDS_5:42
.= ( 0 ) by L914 , SCMPDS_2:46;
L936: ( D197 . D95 ) = ( ( Exec (D193 , D198) ) . D95 ) by SCMPDS_5:41
.= ( 0 ) by L935 , L916 , AMI_3:10 , SCMPDS_2:46;
L937: (D195 is_closed_on C169 , R4 & D195 is_halting_on C169 , R4) by SCMPDS_6:20 , SCMPDS_6:21;
L938: ( D196 . D190 ) = ( ( Exec (D194 , D197) ) . D190 ) by SCMPDS_5:41
.= ( 0 ) by L917 , L918 , AMI_3:10 , SCMPDS_2:46;
L939: ( D197 . D96 ) = ( ( Exec (D193 , D198) ) . D96 ) by SCMPDS_5:41
.= ( C173 - 1 ) by L916 , SCMPDS_2:46;
L940: ( D196 . D97 ) = ( ( Exec (D194 , D197) ) . D97 ) by SCMPDS_5:41
.= ( C172 + 1 ) by L918 , SCMPDS_2:46;
L941: ( D196 . D97 ) = ( ( Initialize D196 ) . D97 ) by SCMPDS_5:15;
L942: ( D196 . D95 ) = ( ( Initialize D196 ) . D95 ) by SCMPDS_5:15;
L943: ( D196 . D190 ) = ( ( Initialize D196 ) . D190 ) by SCMPDS_5:15;
L944: ( D196 . D96 ) = ( ( Initialize D196 ) . D96 ) by SCMPDS_5:15;
L945: ( D196 . D95 ) = ( ( Exec (D194 , D197) ) . D95 ) by SCMPDS_5:41
.= ( 0 ) by L936 , L918 , AMI_3:10 , SCMPDS_2:46;
L946: ( D196 . D97 ) >= ( ( D196 . D95 ) + 7 ) by L945 , L940 , L912;
L947: (D94 is_closed_on ( Initialize D196 ) , R4 & D94 is_halting_on ( Initialize D196 ) , R4) by L946 , L938 , L668 , L941 , L942 , L943;
L948: (D94 is_closed_on D196 , R4 & D94 is_halting_on D196 , R4) by L947 , SCMPDS_6:125 , SCMPDS_6:126;
L949:
now
let C177 being (Element of ( NAT ));
assume L950: (1 <= C177 & C177 <= ( len C171 ));
thus L951: ( C171 . C177 ) = ( ( IExec (( D195 ';' D94 ) , R4 , C169) ) . ( intpos ( C172 + C177 ) ) ) by L950 , L911 , L1
.= ( ( IExec (D94 , R4 , ( Initialize D196 )) ) . ( intpos ( C172 + C177 ) ) ) by L937 , L948 , SCMPDS_7:30;
end;
L952: C171 is_FinSequence_on ( IExec (D94 , R4 , ( Initialize D196 )) ) , C172 by L949 , L1;
L953: ( D196 . D96 ) = ( ( Exec (D194 , D197) ) . D96 ) by SCMPDS_5:41
.= ( C173 - 1 ) by L939 , L918 , AMI_3:10 , SCMPDS_2:46;
thus L954: thesis by L953 , L908 , L909 , L938 , L945 , L940 , L934 , L952 , L794 , L941 , L942 , L943 , L944;
end;
