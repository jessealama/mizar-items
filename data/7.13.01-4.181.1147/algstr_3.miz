:: Ternary Fields
::  by Micha{\l} Muzalewski and Wojciech Skaba
::
:: Received October 15, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies STRUCT_0, SUBSET_1, MULTOP_1, XBOOLE_0, VECTSP_1, FUNCT_1,
      NUMBERS, REAL_1, RELAT_1, ARYTM_3, CARD_1, ARYTM_1, MESFUNC1, SUPINF_2,
      ALGSTR_3;
 notations XBOOLE_0, SUBSET_1, NUMBERS, STRUCT_0, REAL_1, MULTOP_1;
 constructors REAL_1, MEMBERED, MULTOP_1, RLVECT_1;
 registrations NUMBERS, MEMBERED, STRUCT_0;
 requirements NUMERALS, SUBSET, ARITHM, BOOLE;
 definitions STRUCT_0;
 theorems MULTOP_1, XCMPLX_1;
 schemes MULTOP_1;

begin
definition
struct (ZeroOneStr) TernaryFieldStr(# carrier -> set , ZeroF , OneF -> (Element of the carrier) , TernOp -> (TriOp of the carrier) #);
end;
registration
cluster non  empty for TernaryFieldStr;
existence
proof
set D1 = the non  empty set;
set D2 = the (Element of D1);
set D3 = the (TriOp of D1);
take TernaryFieldStr (# D1 , D2 , D2 , D3 #);
thus L2: (the carrier of TernaryFieldStr (# D1 , D2 , D2 , D3 #)) is non  empty;
end;
end;
definition
let R1 being non  empty TernaryFieldStr;
mode Scalar of R1
 is (Element of R1);
end;
definition
let R1 being non  empty TernaryFieldStr;
let R2 being (Scalar of R1);
let R3 being (Scalar of R1);
let R4 being (Scalar of R1);
func Tern (R2 , R3 , R4) -> (Scalar of R1) equals 
( (the TernOp of R1) . (R2 , R3 , R4) );
correctness;
end;
definition
func ternaryreal -> (TriOp of ( REAL )) means 
:L6: (for B1 , B2 , B3 being Real holds ( it . (B1 , B2 , B3) ) = ( ( B1 * B2 ) + B3 ));
existence
proof
deffunc H1(Real , Real , Real) = ( ( $1 * $2 ) + $3 );
L7: (ex B4 being (TriOp of ( REAL )) st (for B5 , B6 , B7 being Real holds ( B4 . (B5 , B6 , B7) ) = H1(B5 , B6 , B7))) from MULTOP_1:sch 4;
thus L8: thesis by L7;
end;
uniqueness
proof
let C1 , C2 being (TriOp of ( REAL ));
assume that
L9: (for B8 , B9 , B10 being Real holds ( C1 . (B8 , B9 , B10) ) = ( ( B8 * B9 ) + B10 ))
and
L10: (for B11 , B12 , B13 being Real holds ( C2 . (B11 , B12 , B13) ) = ( ( B11 * B12 ) + B13 ));
L11: (for B14 , B15 , B16 being Real holds ( C1 . (B14 , B15 , B16) ) = ( C2 . (B14 , B15 , B16) ))
proof
let C3 , C4 , C5 being Real;
thus L12: ( C1 . (C3 , C4 , C5) ) = ( ( C3 * C4 ) + C5 ) by L9
.= ( C2 . (C3 , C4 , C5) ) by L10;
end;
thus L13: thesis by L11 , MULTOP_1:3;
end;
end;
definition
func TernaryFieldEx ->  strict TernaryFieldStr equals 
TernaryFieldStr (# ( REAL ) , ( 0 ) , 1 , ( ternaryreal ) #);
correctness;
end;
registration
cluster ( TernaryFieldEx ) -> non  empty;
coherence;
end;
definition
let C6 , C7 , C8 being (Scalar of ( TernaryFieldEx ));
func tern (C6 , C7 , C8) -> (Scalar of ( TernaryFieldEx )) equals 
( (the TernOp of ( TernaryFieldEx )) . (C6 , C7 , C8) );
correctness;
end;
theorem
L18: (for B17 , B18 , B19 , B20 being Real holds (B17 <> B18 implies (ex B21 being Real st ( ( B17 * B21 ) + B19 ) = ( ( B18 * B21 ) + B20 ))))
proof
let C9 , C10 , C11 , C12 being Real;
set D4 = ( ( C12 - C11 ) / ( C9 - C10 ) );
assume L19: C9 <> C10;
L20: ( C9 - C10 ) <> ( 0 ) by L19;
L21: ( ( C9 - C10 ) * D4 ) = ( C12 - C11 ) by L20 , XCMPLX_1:87;
reconsider D5 = D4 as Real;
take D5;
thus L22: thesis by L21;
end;
theorem
L23: (for B22 , B23 , B24 being (Scalar of ( TernaryFieldEx )) holds (for B25 , B26 , B27 being Real holds ((B22 = B25 & B23 = B26 & B24 = B27) implies ( Tern (B22 , B23 , B24) ) = ( ( B25 * B26 ) + B27 )))) by L6;
theorem
L24: 1 = ( 1. ( TernaryFieldEx ) );
L25: (for B28 being (Scalar of ( TernaryFieldEx )) holds ( Tern (B28 , ( 1. ( TernaryFieldEx ) ) , ( 0. ( TernaryFieldEx ) )) ) = B28)
proof
let C13 being (Scalar of ( TernaryFieldEx ));
reconsider D6 = C13 as Real;
thus L26: ( Tern (C13 , ( 1. ( TernaryFieldEx ) ) , ( 0. ( TernaryFieldEx ) )) ) = ( ( D6 * 1 ) + ( 0 ) ) by L6
.= C13;
end;
L27: (for B29 being (Scalar of ( TernaryFieldEx )) holds ( Tern (( 1. ( TernaryFieldEx ) ) , B29 , ( 0. ( TernaryFieldEx ) )) ) = B29)
proof
let C14 being (Scalar of ( TernaryFieldEx ));
reconsider D7 = C14 as Real;
thus L28: ( Tern (( 1. ( TernaryFieldEx ) ) , C14 , ( 0. ( TernaryFieldEx ) )) ) = ( ( D7 * 1 ) + ( 0 ) ) by L6
.= C14;
end;
L29: (for B30 , B31 being (Scalar of ( TernaryFieldEx )) holds ( Tern (B30 , ( 0. ( TernaryFieldEx ) ) , B31) ) = B31)
proof
let C15 , C16 being (Scalar of ( TernaryFieldEx ));
reconsider D8 = C15 , D9 = C16 as Real;
thus L30: ( Tern (C15 , ( 0. ( TernaryFieldEx ) ) , C16) ) = ( ( D8 * ( 0 ) ) + D9 ) by L6
.= C16;
end;
L31: (for B32 , B33 being (Scalar of ( TernaryFieldEx )) holds ( Tern (( 0. ( TernaryFieldEx ) ) , B32 , B33) ) = B33)
proof
let C17 , C18 being (Scalar of ( TernaryFieldEx ));
reconsider D10 = C17 , D11 = C18 as Real;
thus L32: ( Tern (( 0. ( TernaryFieldEx ) ) , C17 , C18) ) = ( ( ( 0 ) * D10 ) + D11 ) by L6
.= C18;
end;
L33: (for B34 , B35 , B36 being (Scalar of ( TernaryFieldEx )) holds (ex B37 being (Scalar of ( TernaryFieldEx )) st ( Tern (B34 , B35 , B37) ) = B36))
proof
let C19 , C20 , C21 being (Scalar of ( TernaryFieldEx ));
reconsider D12 = C19 , D13 = C20 , D14 = C21 as Real;
reconsider D15 = ( D14 - ( D12 * D13 ) ) as Real;
reconsider D16 = D15 as (Scalar of ( TernaryFieldEx ));
take D16;
L34: D14 = ( ( D12 * D13 ) + D15 );
thus L35: thesis by L34 , L6;
end;
L36: (for B38 , B39 , B40 , B41 being (Scalar of ( TernaryFieldEx )) holds (( Tern (B38 , B39 , B40) ) = ( Tern (B38 , B39 , B41) ) implies B40 = B41))
proof
let C22 , C23 , C24 , C25 being (Scalar of ( TernaryFieldEx ));
reconsider D17 = C22 , D18 = C23 , D19 = C24 , D20 = C25 as Real;
L37: (( Tern (C22 , C23 , C24) ) = ( ( D17 * D18 ) + D19 ) & ( Tern (C22 , C23 , C25) ) = ( ( D17 * D18 ) + D20 )) by L6;
thus L38: thesis by L37;
end;
L39: (for B42 , B43 being (Scalar of ( TernaryFieldEx )) holds (B42 <> B43 implies (for B44 , B45 being (Scalar of ( TernaryFieldEx )) holds (ex B46 , B47 being (Scalar of ( TernaryFieldEx )) st (( Tern (B46 , B42 , B47) ) = B44 & ( Tern (B46 , B43 , B47) ) = B45)))))
proof
let C26 , C27 being (Scalar of ( TernaryFieldEx ));
assume L40: C26 <> C27;
let C28 , C29 being (Scalar of ( TernaryFieldEx ));
reconsider D21 = C26 , D22 = C27 , D23 = C28 , D24 = C29 as Real;
L41: ( D22 - D21 ) <> ( 0 ) by L40;
set D25 = ( ( D24 - D23 ) / ( D22 - D21 ) );
set D26 = ( D23 - ( D21 * D25 ) );
reconsider D27 = D25 , D28 = D26 as (Scalar of ( TernaryFieldEx ));
take D27;
take D28;
thus L42: ( Tern (D27 , C26 , D28) ) = ( ( D25 * D21 ) + ( ( - ( D25 * D21 ) ) + D23 ) ) by L6
.= C28;
thus L43: ( Tern (D27 , C27 , D28) ) = ( ( ( ( D24 - D23 ) / ( D22 - D21 ) ) * D22 ) + ( ( - ( D21 * ( ( D24 - D23 ) / ( D22 - D21 ) ) ) ) + D23 ) ) by L6
.= ( ( ( ( D24 - D23 ) / ( D22 - D21 ) ) * ( D22 - D21 ) ) + D23 )
.= ( ( D24 - D23 ) + D23 ) by L41 , XCMPLX_1:87
.= C29;
end;
L44: (for B48 , B49 being (Scalar of ( TernaryFieldEx )) holds (B48 <> B49 implies (for B50 , B51 being (Scalar of ( TernaryFieldEx )) holds (ex B52 being (Scalar of ( TernaryFieldEx )) st ( Tern (B48 , B52 , B50) ) = ( Tern (B49 , B52 , B51) )))))
proof
let C30 , C31 being (Scalar of ( TernaryFieldEx ));
assume L45: C30 <> C31;
let C32 , C33 being (Scalar of ( TernaryFieldEx ));
reconsider D29 = C30 , D30 = C31 , D31 = C32 , D32 = C33 as Real;
consider C34 being Real such that L46: ( ( D29 * C34 ) + D31 ) = ( ( D30 * C34 ) + D32 ) by L45 , L18;
reconsider D33 = C34 as (Scalar of ( TernaryFieldEx ));
L47: (( Tern (C30 , D33 , C32) ) = ( ( D29 * C34 ) + D31 ) & ( Tern (C31 , D33 , C33) ) = ( ( D30 * C34 ) + D32 )) by L6;
thus L48: thesis by L47 , L46;
end;
L49: (for B53 , B54 , B55 , B56 , B57 , B58 being (Scalar of ( TernaryFieldEx )) holds ((( Tern (B55 , B53 , B57) ) = ( Tern (B56 , B53 , B58) ) & ( Tern (B55 , B54 , B57) ) = ( Tern (B56 , B54 , B58) )) implies (B53 = B54 or B55 = B56)))
proof
let C35 , C36 , C37 , C38 , C39 , C40 being (Scalar of ( TernaryFieldEx ));
assume L50: (( Tern (C37 , C35 , C39) ) = ( Tern (C38 , C35 , C40) ) & ( Tern (C37 , C36 , C39) ) = ( Tern (C38 , C36 , C40) ));
reconsider D34 = C35 , D35 = C36 , D36 = C37 , D37 = C38 , D38 = C39 , D39 = C40 as Real;
L51: (( Tern (C37 , C36 , C39) ) = ( ( D36 * D35 ) + D38 ) & ( Tern (C38 , C36 , C40) ) = ( ( D37 * D35 ) + D39 )) by L6;
L52: (( Tern (C37 , C35 , C39) ) = ( ( D36 * D34 ) + D38 ) & ( Tern (C38 , C35 , C40) ) = ( ( D37 * D34 ) + D39 )) by L6;
L53: ( D36 * ( D34 - D35 ) ) = ( D37 * ( D34 - D35 ) ) by L52 , L50 , L51;
L54: (D36 = D37 or ( D34 - D35 ) = ( 0 )) by L53 , XCMPLX_1:5;
thus L55: thesis by L54;
end;
definition
let C41 being non  empty TernaryFieldStr;
attr C41 is  Ternary-Field-like
means
:L56: (( 0. C41 ) <> ( 1. C41 ) & (for B59 being (Scalar of C41) holds ( Tern (B59 , ( 1. C41 ) , ( 0. C41 )) ) = B59) & (for B60 being (Scalar of C41) holds ( Tern (( 1. C41 ) , B60 , ( 0. C41 )) ) = B60) & (for B61 , B62 being (Scalar of C41) holds ( Tern (B61 , ( 0. C41 ) , B62) ) = B62) & (for B63 , B64 being (Scalar of C41) holds ( Tern (( 0. C41 ) , B63 , B64) ) = B64) & (for B65 , B66 , B67 being (Scalar of C41) holds (ex B68 being (Scalar of C41) st ( Tern (B65 , B66 , B68) ) = B67)) & (for B69 , B70 , B71 , B72 being (Scalar of C41) holds (( Tern (B69 , B70 , B71) ) = ( Tern (B69 , B70 , B72) ) implies B71 = B72)) & (for B73 , B74 being (Scalar of C41) holds (B73 <> B74 implies (for B75 , B76 being (Scalar of C41) holds (ex B77 , B78 being (Scalar of C41) st (( Tern (B77 , B73 , B78) ) = B75 & ( Tern (B77 , B74 , B78) ) = B76))))) & (for B79 , B80 being (Scalar of C41) holds (B79 <> B80 implies (for B81 , B82 being (Scalar of C41) holds (ex B83 being (Scalar of C41) st ( Tern (B79 , B83 , B81) ) = ( Tern (B80 , B83 , B82) ))))) & (for B84 , B85 , B86 , B87 , B88 , B89 being (Scalar of C41) holds ((( Tern (B86 , B84 , B88) ) = ( Tern (B87 , B84 , B89) ) & ( Tern (B86 , B85 , B88) ) = ( Tern (B87 , B85 , B89) )) implies (B84 = B85 or B86 = B87))));
end;
registration
cluster  strict  Ternary-Field-like for non  empty non  empty non  empty non  empty TernaryFieldStr;
existence
proof
L58: ( TernaryFieldEx ) is  Ternary-Field-like by L56 , L25 , L27 , L29 , L31 , L33 , L36 , L39 , L44 , L49;
thus L59: thesis by L58;
end;
end;
definition
mode Ternary-Field
 is  Ternary-Field-like non  empty TernaryFieldStr;
end;
theorem
L62: (for R5 being Ternary-Field holds (for R6 being (Scalar of R5) holds (for R7 being (Scalar of R5) holds (for R12 being (Scalar of R5) holds (for R13 being (Scalar of R5) holds (for R14 being (Scalar of R5) holds (for R15 being (Scalar of R5) holds ((R6 <> R7 & ( Tern (R12 , R6 , R14) ) = ( Tern (R13 , R6 , R15) ) & ( Tern (R12 , R7 , R14) ) = ( Tern (R13 , R7 , R15) )) implies (R12 = R13 & R14 = R15)))))))))
proof
let R5 being Ternary-Field;
let R6 being (Scalar of R5);
let R7 being (Scalar of R5);
let R12 being (Scalar of R5);
let R13 being (Scalar of R5);
let R14 being (Scalar of R5);
let R15 being (Scalar of R5);
assume that
L63: R6 <> R7
and
L64: ( Tern (R12 , R6 , R14) ) = ( Tern (R13 , R6 , R15) )
and
L65: ( Tern (R12 , R7 , R14) ) = ( Tern (R13 , R7 , R15) );
L66: R12 = R13 by L63 , L64 , L65 , L56;
thus L67: thesis by L66 , L64 , L56;
end;
theorem
L68: (for R5 being Ternary-Field holds (for R6 being (Scalar of R5) holds (R6 <> ( 0. R5 ) implies (for R8 being (Scalar of R5) holds (for R9 being (Scalar of R5) holds (ex R10 being (Scalar of R5) st ( Tern (R6 , R10 , R8) ) = R9))))))
proof
let R5 being Ternary-Field;
let R6 being (Scalar of R5);
assume L69: R6 <> ( 0. R5 );
let R8 being (Scalar of R5);
let R9 being (Scalar of R5);
consider R10 being (Scalar of R5) such that L70: ( Tern (R6 , R10 , R8) ) = ( Tern (( 0. R5 ) , R10 , R9) ) by L69 , L56;
take R10;
thus L71: thesis by L70 , L56;
end;
theorem
L72: (for R5 being Ternary-Field holds (for R6 being (Scalar of R5) holds (for R8 being (Scalar of R5) holds (for R10 being (Scalar of R5) holds (for R11 being (Scalar of R5) holds ((R6 <> ( 0. R5 ) & ( Tern (R6 , R10 , R8) ) = ( Tern (R6 , R11 , R8) )) implies R10 = R11))))))
proof
let R5 being Ternary-Field;
let R6 being (Scalar of R5);
let R8 being (Scalar of R5);
let R10 being (Scalar of R5);
let R11 being (Scalar of R5);
assume that
L73: R6 <> ( 0. R5 )
and
L74: ( Tern (R6 , R10 , R8) ) = ( Tern (R6 , R11 , R8) );
set D40 = ( Tern (R6 , R10 , R8) );
L75: ( Tern (R6 , R10 , R8) ) = ( Tern (( 0. R5 ) , R10 , D40) ) by L56;
L76: ( Tern (R6 , R11 , R8) ) = ( Tern (( 0. R5 ) , R11 , D40) ) by L74 , L56;
thus L77: thesis by L76 , L73 , L75 , L56;
end;
theorem
L78: (for R5 being Ternary-Field holds (for R6 being (Scalar of R5) holds (R6 <> ( 0. R5 ) implies (for R8 being (Scalar of R5) holds (for R9 being (Scalar of R5) holds (ex R10 being (Scalar of R5) st ( Tern (R10 , R6 , R8) ) = R9))))))
proof
let R5 being Ternary-Field;
let R6 being (Scalar of R5);
assume L79: R6 <> ( 0. R5 );
let R8 being (Scalar of R5);
let R9 being (Scalar of R5);
consider R10 being (Scalar of R5), R16 being (Scalar of R5) such that L80: (( Tern (R10 , R6 , R16) ) = R9 & ( Tern (R10 , ( 0. R5 ) , R16) ) = R8) by L79 , L56;
take R10;
thus L81: thesis by L80 , L56;
end;
theorem
L82: (for R5 being Ternary-Field holds (for R6 being (Scalar of R5) holds (for R8 being (Scalar of R5) holds (for R10 being (Scalar of R5) holds (for R11 being (Scalar of R5) holds ((R6 <> ( 0. R5 ) & ( Tern (R10 , R6 , R8) ) = ( Tern (R11 , R6 , R8) )) implies R10 = R11))))))
proof
let R5 being Ternary-Field;
let R6 being (Scalar of R5);
let R8 being (Scalar of R5);
let R10 being (Scalar of R5);
let R11 being (Scalar of R5);
assume L83: (R6 <> ( 0. R5 ) & ( Tern (R10 , R6 , R8) ) = ( Tern (R11 , R6 , R8) ));
L84: (( Tern (R10 , ( 0. R5 ) , R8) ) = R8 & ( Tern (R11 , ( 0. R5 ) , R8) ) = R8) by L56;
thus L85: thesis by L84 , L83 , L56;
end;
