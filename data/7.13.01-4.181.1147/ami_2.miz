:: On a Mathematical Model of Programs
::  by Yatsuka Nakamura and Andrzej Trybulec
::
:: Received December 29, 1992
:: Copyright (c) 1992-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, XBOOLE_0, CARD_1, ZFMISC_1, FINSEQ_1, FUNCT_1,
      CARD_3, RELAT_1, AMI_1, NAT_1, FUNCT_4, FUNCOP_1, INT_1, ORDINAL1,
      ARYTM_3, ARYTM_1, XXREAL_0, FUNCT_5, TARSKI, AMI_2, GROUP_9, PBOOLE,
      AFINSQ_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, ORDINAL1, CARD_1, NUMBERS,
      XCMPLX_0, CARD_3, RELAT_1, FUNCT_1, FUNCT_2, PBOOLE, AFINSQ_1, XXREAL_0,
      BINOP_1, MCART_1, INT_1, FUNCOP_1, FUNCT_4, CAT_2, FINSEQ_1,
      FUNCT_5, SCM_INST;
 constructors DOMAIN_1, CAT_2, CARD_3, ABIAN, RELSET_1, AFINSQ_1, VALUED_1,
      SCM_INST, FUNCT_5, XTUPLE_0;
 registrations XBOOLE_0, FUNCOP_1, NUMBERS, XXREAL_0, XREAL_0, INT_1, CARD_3,
      FINSET_1, ORDINAL2, CARD_1, FUNCT_1, RELSET_1, FUNCT_2, AFINSQ_1,
      SCM_INST, XTUPLE_0;
 requirements NUMERALS, SUBSET, BOOLE;
 definitions TARSKI, FUNCT_1, FUNCOP_1, SCM_INST, XTUPLE_0;
 theorems ZFMISC_1, FUNCT_2, TARSKI, CAT_2, FUNCOP_1, ENUMSET1, INT_1, CARD_3,
      MCART_1, FUNCT_4, XBOOLE_0, XBOOLE_1, ORDINAL1, RELAT_1, NUMBERS, CARD_1,
      AFINSQ_1, PARTFUN1, FUNCT_1, FUNCT_5, XTUPLE_0;
 schemes FUNCT_2, BINOP_1;

begin
definition
func SCM-Memory equals 
( { ( NAT ) } \/ ( SCM-Data-Loc ) );
coherence;
end;
registration
cluster ( SCM-Memory ) -> non  empty;
coherence;
end;
definition
redefine func SCM-Data-Loc -> (Subset of ( SCM-Memory ));

coherence by XBOOLE_1:7;
end;
L4:
now
let C1 being (Element of ( SCM-Memory ));
L5: (C1 in { ( NAT ) } or C1 in ( SCM-Data-Loc )) by XBOOLE_0:def 3;
thus L6: (C1 = ( NAT ) or C1 in ( SCM-Data-Loc )) by L5 , TARSKI:def 1;
end;
L7: (not ( NAT ) in ( SCM-Data-Loc ))
proof
assume L8: ( NAT ) in ( SCM-Data-Loc );
L9: (ex R1 being set st (ex R2 being set st ( NAT ) = [ R1 , R2 ])) by L8 , RELAT_1:def 1;
thus L10: contradiction by L9;
end;
definition
canceled 2;
func SCM-OK -> (Function of ( SCM-Memory ) , 2) means 
:L11: (for B1 being (Element of ( SCM-Memory )) holds ((B1 = ( NAT ) implies ( it . B1 ) = ( 0 )) & (B1 in ( SCM-Data-Loc ) implies ( it . B1 ) = 1)));
existence
proof
defpred S1[ set , set ] means (($1 = ( NAT ) & $2 = ( 0 )) or ($1 in ( SCM-Data-Loc ) & $2 = 1));
L12:
now
let C2 being (Element of ( SCM-Memory ));
L13: ( { ( 0 ) } \/ { 1 } ) = { ( 0 ) , 1 } by ENUMSET1:1;
L14: ( 0 ) in ( { 1 } \/ { ( 0 ) } ) by L13 , TARSKI:def 2;
L15: (S1[ C2 , ( 0 ) ] or S1[ C2 , 1 ]) by L4;
L16: 1 in ( { 1 } \/ { ( 0 ) } ) by L13 , TARSKI:def 2;
thus L17: (ex B2 being (Element of 2) st S1[ C2 , B2 ]) by L16 , L13 , L14 , L15 , CARD_1:50;
end;
consider C3 being (Function of ( SCM-Memory ) , 2) such that L18: (for B3 being (Element of ( SCM-Memory )) holds S1[ B3 , ( C3 . B3 ) ]) from FUNCT_2:sch 3(L12);
take C3;
let C4 being (Element of ( SCM-Memory ));
thus L19: (C4 = ( NAT ) implies ( C3 . C4 ) = ( 0 )) by L18 , L7;
thus L20: (C4 in ( SCM-Data-Loc ) implies ( C3 . C4 ) = 1) by L18 , L7;
thus L21: thesis;
end;
uniqueness
proof
let C5 , C6 being (Function of ( SCM-Memory ) , 2);
assume that
L22: (for B4 being (Element of ( SCM-Memory )) holds ((B4 = ( NAT ) implies ( C5 . B4 ) = ( 0 )) & (B4 in ( SCM-Data-Loc ) implies ( C5 . B4 ) = 1)))
and
L23: (for B5 being (Element of ( SCM-Memory )) holds ((B5 = ( NAT ) implies ( C6 . B5 ) = ( 0 )) & (B5 in ( SCM-Data-Loc ) implies ( C6 . B5 ) = 1)));
L24:
now
let C7 being (Element of ( SCM-Memory ));
L25:
now
per cases  by L4;
suppose L26: C7 = ( NAT );

thus L27: ( C5 . C7 ) = ( 0 ) by L26 , L22
.= ( C6 . C7 ) by L23 , L26;
end;
suppose L28: C7 in ( SCM-Data-Loc );

thus L29: ( C5 . C7 ) = 1 by L28 , L22
.= ( C6 . C7 ) by L23 , L28;
end;
end;
thus L31: ( C5 . C7 ) = ( C6 . C7 ) by L25;
end;
thus L32: thesis by L24 , FUNCT_2:63;
end;
end;
canceled 1;
definition
func SCM-VAL -> (ManySortedSet of 2) equals 
<% ( NAT ) , ( INT ) %>;
coherence;
end;
L35: ( NAT ) in ( SCM-Memory )
proof
L36: ( NAT ) in { ( NAT ) } by TARSKI:def 1;
thus L37: thesis by L36 , XBOOLE_0:def 3;
end;
canceled 4;
theorem
L38: ( ( ( SCM-VAL ) * ( SCM-OK ) ) . ( NAT ) ) = ( NAT )
proof
L39: ( NAT ) in ( dom ( SCM-OK ) ) by L35 , PARTFUN1:def 2;
L40: ( ( ( SCM-VAL ) * ( SCM-OK ) ) . ( NAT ) ) = ( ( SCM-VAL ) . ( ( SCM-OK ) . ( NAT ) ) ) by L39 , FUNCT_1:13;
L41: ( ( ( SCM-VAL ) * ( SCM-OK ) ) . ( NAT ) ) = ( ( SCM-VAL ) . ( 0 ) ) by L40 , L11 , L35;
thus L42: thesis by L41 , AFINSQ_1:38;
end;
theorem
L43: (for B6 being (Element of ( SCM-Memory )) holds (B6 in ( SCM-Data-Loc ) implies ( ( ( SCM-VAL ) * ( SCM-OK ) ) . B6 ) = ( INT )))
proof
let C8 being (Element of ( SCM-Memory ));
L44: C8 in ( SCM-Memory );
L45: C8 in ( dom ( SCM-OK ) ) by L44 , PARTFUN1:def 2;
L46: ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C8 ) = ( ( SCM-VAL ) . ( ( SCM-OK ) . C8 ) ) by L45 , FUNCT_1:13;
assume L47: C8 in ( SCM-Data-Loc );
L48: ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C8 ) = ( ( SCM-VAL ) . 1 ) by L47 , L46 , L11;
thus L49: thesis by L48 , AFINSQ_1:38;
end;
L50: ( dom ( SCM-OK ) ) = ( SCM-Memory ) by PARTFUN1:def 2;
L51: ( len <% ( NAT ) , ( INT ) %> ) = 2 by AFINSQ_1:38;
L52: ( rng ( SCM-OK ) ) c= ( dom ( SCM-VAL ) ) by L51 , RELAT_1:def 19;
L53: ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by L52 , L50 , RELAT_1:27;
registration
cluster ( ( SCM-VAL ) * ( SCM-OK ) ) ->  non-empty;
coherence
proof
set D1 = ( ( SCM-VAL ) * ( SCM-OK ) );
let C9 being set;
assume L54: C9 in ( dom D1 );
per cases  by L54 , L4 , L53;
suppose L55: C9 = ( NAT );

thus L56: ( D1 . C9 ) is non  empty by L55 , L38;
end;
suppose L57: C9 in ( SCM-Data-Loc );

thus L58: ( D1 . C9 ) is non  empty by L57 , L43;
end;
end;
end;
definition
mode SCM-State
 is (Element of ( product ( ( SCM-VAL ) * ( SCM-OK ) ) ));
end;
theorem
L62: (for B7 being (Element of ( SCM-Data-Loc )) holds ( ( ( SCM-VAL ) * ( SCM-OK ) ) . B7 ) = ( INT )) by L43;
theorem
L63: ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , ( NAT )) ) = ( NAT ) by L38 , L53 , L35 , CARD_3:12;
theorem
L64: (for B8 being (Element of ( SCM-Data-Loc )) holds ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , B8) ) = ( INT ))
proof
let C10 being (Element of ( SCM-Data-Loc ));
thus L65: ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , C10) ) = ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C10 ) by L53 , CARD_3:12
.= ( INT ) by L43;
end;
definition
let C11 being SCM-State;
func IC C11 -> (Element of ( NAT )) equals 
( C11 . ( NAT ) );
coherence by L63 , CARD_3:def 6;
end;
definition
let C12 being SCM-State;
let C13 being Nat;
func SCM-Chg (C12 , C13) -> SCM-State equals 
( C12 +* ( ( NAT ) .--> C13 ) );
coherence
proof
L67:
now
let C14 being set;
assume L68: C14 in ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) );
per cases ;
suppose L69: C14 = ( NAT );

L70: { ( NAT ) } = ( dom ( ( NAT ) .--> C13 ) ) by FUNCOP_1:13;
L71: ( NAT ) in ( dom ( ( NAT ) .--> C13 ) ) by L70 , TARSKI:def 1;
L72: ( ( C12 +* ( ( NAT ) .--> C13 ) ) . ( NAT ) ) = ( ( ( NAT ) .--> C13 ) . ( NAT ) ) by L71 , FUNCT_4:13
.= C13 by FUNCOP_1:72;
thus L73: ( ( C12 +* ( ( NAT ) .--> C13 ) ) . C14 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C14 ) by L72 , L69 , L38 , ORDINAL1:def 12;
end;
suppose L74: C14 <> ( NAT );

L75: { ( NAT ) } = ( dom ( ( NAT ) .--> C13 ) ) by FUNCOP_1:13;
L76: (not C14 in ( dom ( ( NAT ) .--> C13 ) )) by L75 , L74 , TARSKI:def 1;
L77: ( ( C12 +* ( ( NAT ) .--> C13 ) ) . C14 ) = ( C12 . C14 ) by L76 , FUNCT_4:11;
thus L78: ( ( C12 +* ( ( NAT ) .--> C13 ) ) . C14 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C14 ) by L77 , L68 , CARD_3:9;
end;
end;
L80: ( dom C12 ) = ( SCM-Memory ) by L53 , CARD_3:9;
L81: ( dom ( C12 +* ( ( NAT ) .--> C13 ) ) ) = ( ( SCM-Memory ) \/ ( dom ( ( NAT ) .--> C13 ) ) ) by L80 , FUNCT_4:def 1
.= ( ( SCM-Memory ) \/ { ( NAT ) } ) by FUNCOP_1:13
.= ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) by L53 , L35 , ZFMISC_1:40;
thus L82: thesis by L81 , L67 , CARD_3:9;
end;
end;
theorem
L84: (for B9 being SCM-State holds (for B10 being Nat holds ( ( SCM-Chg (B9 , B10) ) . ( NAT ) ) = B10))
proof
let C15 being SCM-State;
let C16 being Nat;
L85: { ( NAT ) } = ( dom ( ( NAT ) .--> C16 ) ) by FUNCOP_1:13;
L86: ( NAT ) in ( dom ( ( NAT ) .--> C16 ) ) by L85 , TARSKI:def 1;
thus L87: ( ( SCM-Chg (C15 , C16) ) . ( NAT ) ) = ( ( ( NAT ) .--> C16 ) . ( NAT ) ) by L86 , FUNCT_4:13
.= C16 by FUNCOP_1:72;
end;
theorem
L88: (for B11 being SCM-State holds (for B12 being Nat holds (for B13 being (Element of ( SCM-Data-Loc )) holds ( ( SCM-Chg (B11 , B12) ) . B13 ) = ( B11 . B13 ))))
proof
let C17 being SCM-State;
let C18 being Nat;
let C19 being (Element of ( SCM-Data-Loc ));
L89: { ( NAT ) } = ( dom ( ( NAT ) .--> C18 ) ) by FUNCOP_1:13;
L90: (( ( ( SCM-VAL ) * ( SCM-OK ) ) . ( NAT ) ) = ( NAT ) & ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C19 ) = ( INT )) by L38 , L43;
L91: (not C19 in ( dom ( ( NAT ) .--> C18 ) )) by L90 , L89 , NUMBERS:27 , TARSKI:def 1;
thus L92: thesis by L91 , FUNCT_4:11;
end;
theorem
L93: (for B14 being SCM-State holds (for B15 , B16 being Nat holds ( ( SCM-Chg (B14 , B15) ) . B16 ) = ( B14 . B16 )))
proof
let C20 being SCM-State;
let C21 , C22 being Nat;
L94: { ( NAT ) } = ( dom ( ( NAT ) .--> C21 ) ) by FUNCOP_1:13;
L95: (not C22 in ( dom ( ( NAT ) .--> C21 ) )) by L94 , TARSKI:def 1;
thus L96: thesis by L95 , FUNCT_4:11;
end;
definition
let C23 being SCM-State;
let C24 being (Element of ( SCM-Data-Loc ));
let C25 being Integer;
func SCM-Chg (C23 , C24 , C25) -> SCM-State equals 
( C23 +* ( C24 .--> C25 ) );
coherence
proof
L97:
now
let C26 being set;
assume L98: C26 in ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) );
per cases ;
suppose L99: C26 = C24;

L100: { C24 } = ( dom ( C24 .--> C25 ) ) by FUNCOP_1:13;
L101: C24 in ( dom ( C24 .--> C25 ) ) by L100 , TARSKI:def 1;
L102: ( ( C23 +* ( C24 .--> C25 ) ) . C24 ) = ( ( C24 .--> C25 ) . C24 ) by L101 , FUNCT_4:13
.= C25 by FUNCOP_1:72;
L103: ( ( C23 +* ( C24 .--> C25 ) ) . C24 ) in ( INT ) by L102 , INT_1:def 2;
thus L104: ( ( C23 +* ( C24 .--> C25 ) ) . C26 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C26 ) by L103 , L99 , L43;
end;
suppose L105: C26 <> C24;

L106: { C24 } = ( dom ( C24 .--> C25 ) ) by FUNCOP_1:13;
L107: (not C26 in ( dom ( C24 .--> C25 ) )) by L106 , L105 , TARSKI:def 1;
L108: ( ( C23 +* ( C24 .--> C25 ) ) . C26 ) = ( C23 . C26 ) by L107 , FUNCT_4:11;
thus L109: ( ( C23 +* ( C24 .--> C25 ) ) . C26 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C26 ) by L108 , L98 , CARD_3:9;
end;
end;
L111: ( dom C23 ) = ( SCM-Memory ) by L53 , CARD_3:9;
L112: ( dom ( C23 +* ( C24 .--> C25 ) ) ) = ( ( SCM-Memory ) \/ ( dom ( C24 .--> C25 ) ) ) by L111 , FUNCT_4:def 1
.= ( ( SCM-Memory ) \/ { C24 } ) by FUNCOP_1:13
.= ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) by L53 , ZFMISC_1:40;
thus L113: thesis by L112 , L97 , CARD_3:9;
end;
end;
theorem
L115: (for B17 being SCM-State holds (for B18 being (Element of ( SCM-Data-Loc )) holds (for B19 being Integer holds ( ( SCM-Chg (B17 , B18 , B19) ) . ( NAT ) ) = ( B17 . ( NAT ) ))))
proof
let C27 being SCM-State;
let C28 being (Element of ( SCM-Data-Loc ));
let C29 being Integer;
L116: { C28 } = ( dom ( C28 .--> C29 ) ) by FUNCOP_1:13;
L117: (( ( ( SCM-VAL ) * ( SCM-OK ) ) . ( NAT ) ) = ( NAT ) & ( ( ( SCM-VAL ) * ( SCM-OK ) ) . C28 ) = ( INT )) by L38 , L43;
L118: (not ( NAT ) in ( dom ( C28 .--> C29 ) )) by L117 , L116 , NUMBERS:27 , TARSKI:def 1;
thus L119: thesis by L118 , FUNCT_4:11;
end;
theorem
L120: (for B20 being SCM-State holds (for B21 being (Element of ( SCM-Data-Loc )) holds (for B22 being Integer holds ( ( SCM-Chg (B20 , B21 , B22) ) . B21 ) = B22)))
proof
let C30 being SCM-State;
let C31 being (Element of ( SCM-Data-Loc ));
let C32 being Integer;
L121: { C31 } = ( dom ( C31 .--> C32 ) ) by FUNCOP_1:13;
L122: C31 in ( dom ( C31 .--> C32 ) ) by L121 , TARSKI:def 1;
thus L123: ( ( SCM-Chg (C30 , C31 , C32) ) . C31 ) = ( ( C31 .--> C32 ) . C31 ) by L122 , FUNCT_4:13
.= C32 by FUNCOP_1:72;
end;
theorem
L124: (for B23 being SCM-State holds (for B24 being (Element of ( SCM-Data-Loc )) holds (for B25 being Integer holds (for B26 being (Element of ( SCM-Data-Loc )) holds (B26 <> B24 implies ( ( SCM-Chg (B23 , B24 , B25) ) . B26 ) = ( B23 . B26 ))))))
proof
let C33 being SCM-State;
let C34 being (Element of ( SCM-Data-Loc ));
let C35 being Integer;
let C36 being (Element of ( SCM-Data-Loc ));
assume that
L125: C36 <> C34;
L126: { C34 } = ( dom ( C34 .--> C35 ) ) by FUNCOP_1:13;
L127: (not C36 in ( dom ( C34 .--> C35 ) )) by L126 , L125 , TARSKI:def 1;
thus L128: thesis by L127 , FUNCT_4:11;
end;
registration
let C37 being SCM-State;
let C38 being (Element of ( SCM-Data-Loc ));
cluster ( C37 . C38 ) ->  integer;
coherence
proof
L129: ( C37 . C38 ) in ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , C38) ) by CARD_3:def 6;
L130: ( C37 . C38 ) in ( INT ) by L129 , L64;
thus L131: thesis by L130;
end;
end;
definition
canceled 5;
let C39 being (Element of ( SCM-Instr ));
let C40 being SCM-State;
func SCM-Exec-Res (C39 , C40) -> SCM-State equals 
( SCM-Chg (( SCM-Chg (C40 , ( C39 address_1 ) , ( C40 . ( C39 address_2 ) )) ) , ( succ ( IC C40 ) )) ) if (ex B27 , B28 being (Element of ( SCM-Data-Loc )) st C39 = [ 1 , ( {} ) , <* B27 , B28 *> ]) , ( SCM-Chg (( SCM-Chg (C40 , ( C39 address_1 ) , ( ( C40 . ( C39 address_1 ) ) + ( C40 . ( C39 address_2 ) ) )) ) , ( succ ( IC C40 ) )) ) if (ex B29 , B30 being (Element of ( SCM-Data-Loc )) st C39 = [ 2 , ( {} ) , <* B29 , B30 *> ]) , ( SCM-Chg (( SCM-Chg (C40 , ( C39 address_1 ) , ( ( C40 . ( C39 address_1 ) ) - ( C40 . ( C39 address_2 ) ) )) ) , ( succ ( IC C40 ) )) ) if (ex B31 , B32 being (Element of ( SCM-Data-Loc )) st C39 = [ 3 , ( {} ) , <* B31 , B32 *> ]) , ( SCM-Chg (( SCM-Chg (C40 , ( C39 address_1 ) , ( ( C40 . ( C39 address_1 ) ) * ( C40 . ( C39 address_2 ) ) )) ) , ( succ ( IC C40 ) )) ) if (ex B33 , B34 being (Element of ( SCM-Data-Loc )) st C39 = [ 4 , ( {} ) , <* B33 , B34 *> ]) , ( SCM-Chg (( SCM-Chg (( SCM-Chg (C40 , ( C39 address_1 ) , ( ( C40 . ( C39 address_1 ) ) div ( C40 . ( C39 address_2 ) ) )) ) , ( C39 address_2 ) , ( ( C40 . ( C39 address_1 ) ) mod ( C40 . ( C39 address_2 ) ) )) ) , ( succ ( IC C40 ) )) ) if (ex B35 , B36 being (Element of ( SCM-Data-Loc )) st C39 = [ 5 , ( {} ) , <* B35 , B36 *> ]) , ( SCM-Chg (C40 , ( C39 jump_address )) ) if (ex B37 being (Element of ( NAT )) st C39 = [ 6 , <* B37 *> , ( {} ) ]) , ( SCM-Chg (C40 , ( IFEQ (( C40 . ( C39 cond_address ) ) , ( 0 ) , ( C39 cjump_address ) , ( succ ( IC C40 ) )) )) ) if (ex B38 being (Element of ( NAT )) st (ex B39 being (Element of ( SCM-Data-Loc )) st C39 = [ 7 , <* B38 *> , <* B39 *> ])) , ( SCM-Chg (C40 , ( IFGT (( C40 . ( C39 cond_address ) ) , ( 0 ) , ( C39 cjump_address ) , ( succ ( IC C40 ) )) )) ) if (ex B40 being (Element of ( NAT )) st (ex B41 being (Element of ( SCM-Data-Loc )) st C39 = [ 8 , <* B40 *> , <* B41 *> ])) otherwise C40;
consistency by XTUPLE_0:3;
coherence;
end;
definition
func SCM-Exec -> (Action of ( SCM-Instr ) , ( product ( ( SCM-VAL ) * ( SCM-OK ) ) )) means 
(for B42 being (Element of ( SCM-Instr )) holds (for B43 being SCM-State holds ( ( it . B42 ) . B43 ) = ( SCM-Exec-Res (B42 , B43) )));
existence
proof
consider C41 being (Function of [: ( SCM-Instr ) , ( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) :] , ( product ( ( SCM-VAL ) * ( SCM-OK ) ) )) such that L134: (for B44 being (Element of ( SCM-Instr )) holds (for B45 being SCM-State holds ( C41 . (B44 , B45) ) = ( SCM-Exec-Res (B44 , B45) ))) from BINOP_1:sch 4;
take ( curry C41 );
let C42 being (Element of ( SCM-Instr ));
let C43 being SCM-State;
thus L135: ( ( ( curry C41 ) . C42 ) . C43 ) = ( C41 . (C42 , C43) ) by FUNCT_5:69
.= ( SCM-Exec-Res (C42 , C43) ) by L134;
end;
uniqueness
proof
let C44 , C45 being (Action of ( SCM-Instr ) , ( product ( ( SCM-VAL ) * ( SCM-OK ) ) ));
assume that
L136: (for B46 being (Element of ( SCM-Instr )) holds (for B47 being SCM-State holds ( ( C44 . B46 ) . B47 ) = ( SCM-Exec-Res (B46 , B47) )))
and
L137: (for B48 being (Element of ( SCM-Instr )) holds (for B49 being SCM-State holds ( ( C45 . B48 ) . B49 ) = ( SCM-Exec-Res (B48 , B49) )));
L138:
now
let C46 being (Element of ( SCM-Instr ));
reconsider D2 = ( C45 . C46 ) , D3 = ( C44 . C46 ) as (Function of ( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , ( product ( ( SCM-VAL ) * ( SCM-OK ) ) )) by FUNCT_2:66;
L139:
now
let C47 being SCM-State;
thus L140: ( D3 . C47 ) = ( SCM-Exec-Res (C46 , C47) ) by L136
.= ( D2 . C47 ) by L137;
end;
thus L141: ( C44 . C46 ) = ( C45 . C46 ) by L139 , FUNCT_2:63;
end;
thus L142: C44 = C45 by L138 , FUNCT_2:63;
end;
end;
begin
canceled 3;
theorem
L144: (not ( NAT ) in ( SCM-Data-Loc )) by L7;
canceled 1;
theorem
L145: ( NAT ) in ( SCM-Memory ) by L35;
theorem
L146: (for R1 being set holds (R1 in ( SCM-Data-Loc ) implies (ex B50 being (Element of ( NAT )) st R1 = [ 1 , B50 ])))
proof
let R1 being set;
assume L147: R1 in ( SCM-Data-Loc );
consider R2 being set, R3 being set such that L148: R2 in { 1 } and L149: R3 in ( NAT ) and L150: R1 = [ R2 , R3 ] by L147 , ZFMISC_1:84;
reconsider D4 = R3 as (Element of ( NAT )) by L149;
take D4;
thus L151: thesis by L148 , L150 , TARSKI:def 1;
end;
theorem
L152: (for B51 being Nat holds [ 1 , B51 ] in ( SCM-Data-Loc ))
proof
let C48 being Nat;
L153: (1 in { 1 } & C48 in ( NAT )) by ORDINAL1:def 12 , TARSKI:def 1;
thus L154: thesis by L153 , ZFMISC_1:87;
end;
canceled 1;
theorem
L155: (for B52 being (Element of ( SCM-Memory )) holds (B52 = ( NAT ) or B52 in ( SCM-Data-Loc ))) by L4;
theorem
L156: ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by L53;
theorem
L157: (for B53 being SCM-State holds ( dom B53 ) = ( SCM-Memory )) by L53 , CARD_3:9;
definition
let C49 being set;
attr C49 is  Int-like
means
C49 in ( SCM-Data-Loc );
end;
