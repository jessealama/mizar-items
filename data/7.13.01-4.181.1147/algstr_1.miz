:: From Loops to Abelian Multiplicative Groups with Zero
::  by Micha{\l} Muzalewski and Wojciech Skaba
::
:: Received July 10, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, ALGSTR_0, SUBSET_1, ARYTM_3, SUPINF_2, RLVECT_1,
      STRUCT_0, ARYTM_1, VECTSP_1, RELAT_1, MESFUNC1, GROUP_1, BINOP_1,
      NUMBERS, BINOP_2, CARD_1, REAL_1, ALGSTR_1, ZFMISC_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, NUMBERS, REAL_1, BINOP_2, STRUCT_0,
      ALGSTR_0, GROUP_1, VECTSP_1, RLVECT_1;
 constructors BINOP_1, BINOP_2, VECTSP_1, RLVECT_1, FUNCT_5, XXREAL_0, REAL_1;
 registrations NUMBERS, VECTSP_1, ALGSTR_0, REAL_1, NAT_1, XREAL_0, CARD_1,
      ORDINAL1, STRUCT_0;
 requirements NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions STRUCT_0, VECTSP_1, ALGSTR_0, RLVECT_1, GROUP_1;
 theorems RLVECT_1, VECTSP_1, TARSKI, XCMPLX_1, BINOP_2, GROUP_1, CARD_1,
      ALGSTR_0, STRUCT_0;

begin
theorem
L1: (for R1 being non  empty addLoopStr holds (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))))) implies (( R2 + R3 ) = ( 0. R1 ) implies ( R3 + R2 ) = ( 0. R1 ))))))
proof
let R1 being non  empty addLoopStr;
let R2 being (Element of R1);
let R3 being (Element of R1);
assume that
L2: (for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2)
and
L3: (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 )))
and
L4: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))));
consider R5 being (Element of R1) such that L5: ( R3 + R5 ) = ( 0. R1 ) by L3;
assume L6: ( R2 + R3 ) = ( 0. R1 );
thus L7: ( R3 + R2 ) = ( ( R3 + R2 ) + ( R3 + R5 ) ) by L2 , L5
.= ( ( ( R3 + R2 ) + R3 ) + R5 ) by L4
.= ( ( R3 + ( 0. R1 ) ) + R5 ) by L4 , L6
.= ( 0. R1 ) by L2 , L5;
end;
theorem
L8: (for R1 being non  empty addLoopStr holds (for R2 being (Element of R1) holds (((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))))) implies ( ( 0. R1 ) + R2 ) = ( R2 + ( 0. R1 ) ))))
proof
let R1 being non  empty addLoopStr;
let R2 being (Element of R1);
assume that
L9: (for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2)
and
L10: (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 )))
and
L11: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))));
consider R5 being (Element of R1) such that L12: ( R2 + R5 ) = ( 0. R1 ) by L10;
thus L13: ( ( 0. R1 ) + R2 ) = ( R2 + ( R5 + R2 ) ) by L11 , L12
.= ( R2 + ( 0. R1 ) ) by L9 , L10 , L11 , L12 , L1;
end;
theorem
L14: (for R1 being non  empty addLoopStr holds (((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))))) implies (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R5 + R2 ) = ( 0. R1 )))))
proof
let R1 being non  empty addLoopStr;
assume that
L15: (for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2)
and
L16: (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 )))
and
L17: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))));
let R2 being (Element of R1);
consider R5 being (Element of R1) such that L18: ( R2 + R5 ) = ( 0. R1 ) by L16;
L19: ( R5 + R2 ) = ( 0. R1 ) by L15 , L16 , L17 , L18 , L1;
thus L20: thesis by L19;
end;
definition
let C1 being set;
func Extract C1 -> (Element of { C1 }) equals 
C1;
coherence by TARSKI:def 1;
end;
theorem
L22: (for B1 , B2 being (Element of ( Trivial-addLoopStr )) holds B1 = B2)
proof
let C2 , C3 being (Element of ( Trivial-addLoopStr ));
thus L23: C2 = ( {} ) by CARD_1:49 , TARSKI:def 1
.= C3 by CARD_1:49 , TARSKI:def 1;
end;
theorem
L24: (for B3 , B4 being (Element of ( Trivial-addLoopStr )) holds ( B3 + B4 ) = ( 0. ( Trivial-addLoopStr ) )) by L22;
L25: ((for B5 being (Element of ( Trivial-addLoopStr )) holds ( B5 + ( 0. ( Trivial-addLoopStr ) ) ) = B5) & (for B6 being (Element of ( Trivial-addLoopStr )) holds ( ( 0. ( Trivial-addLoopStr ) ) + B6 ) = B6)) by L22;
L26: (for B7 , B8 being (Element of ( Trivial-addLoopStr )) holds (ex B9 being (Element of ( Trivial-addLoopStr )) st ( B7 + B9 ) = B8))
proof
let C4 , C5 being (Element of ( Trivial-addLoopStr ));
take ( 0. ( Trivial-addLoopStr ) );
thus L27: thesis by L22;
end;
L28: (for B10 , B11 being (Element of ( Trivial-addLoopStr )) holds (ex B12 being (Element of ( Trivial-addLoopStr )) st ( B12 + B10 ) = B11))
proof
let C6 , C7 being (Element of ( Trivial-addLoopStr ));
take ( 0. ( Trivial-addLoopStr ) );
thus L29: thesis by L22;
end;
L30: ((for B13 , B14 , B15 being (Element of ( Trivial-addLoopStr )) holds (( B13 + B14 ) = ( B13 + B15 ) implies B14 = B15)) & (for B16 , B17 , B18 being (Element of ( Trivial-addLoopStr )) holds (( B17 + B16 ) = ( B18 + B16 ) implies B17 = B18))) by L22;
definition
let C8 being non  empty addLoopStr;
attr C8 is  left_zeroed
means
:L31: (for B19 being (Element of C8) holds ( ( 0. C8 ) + B19 ) = B19);
end;
definition
let C9 being non  empty addLoopStr;
attr C9 is  add-left-invertible
means
:L33: (for B20 , B21 being (Element of C9) holds (ex B22 being (Element of C9) st ( B22 + B20 ) = B21));
attr C9 is  add-right-invertible
means
:L34: (for B23 , B24 being (Element of C9) holds (ex B25 being (Element of C9) st ( B23 + B25 ) = B24));
end;
definition
let C10 being non  empty addLoopStr;
attr C10 is  Loop-like
means
:L36: C10 is  left_add-cancelable  right_add-cancelable  add-left-invertible  add-right-invertible;
end;
registration
cluster  Loop-like ->  left_add-cancelable  right_add-cancelable  add-left-invertible  add-right-invertible for non  empty non  empty non  empty non  empty addLoopStr;
coherence by L36;
cluster  left_add-cancelable  right_add-cancelable  add-left-invertible  add-right-invertible ->  Loop-like for non  empty non  empty non  empty non  empty addLoopStr;
coherence by L36;
end;
theorem
L39: (for B26 being non  empty addLoopStr holds (B26 is  Loop-like iff ((for B27 , B28 being (Element of B26) holds (ex B29 being (Element of B26) st ( B27 + B29 ) = B28)) & (for B30 , B31 being (Element of B26) holds (ex B32 being (Element of B26) st ( B32 + B30 ) = B31)) & (for B33 , B34 , B35 being (Element of B26) holds (( B33 + B34 ) = ( B33 + B35 ) implies B34 = B35)) & (for B36 , B37 , B38 being (Element of B26) holds (( B37 + B36 ) = ( B38 + B36 ) implies B37 = B38)))))
proof
let C11 being non  empty addLoopStr;
thus L40: (C11 is  Loop-like implies ((for B39 , B40 being (Element of C11) holds (ex B41 being (Element of C11) st ( B39 + B41 ) = B40)) & (for B42 , B43 being (Element of C11) holds (ex B44 being (Element of C11) st ( B44 + B42 ) = B43)) & (for B45 , B46 , B47 being (Element of C11) holds (( B45 + B46 ) = ( B45 + B47 ) implies B46 = B47)) & (for B48 , B49 , B50 being (Element of C11) holds (( B49 + B48 ) = ( B50 + B48 ) implies B49 = B50)))) by L33 , L34 , ALGSTR_0:def 3 , ALGSTR_0:def 4;
assume that
L41: ((for B51 , B52 being (Element of C11) holds (ex B53 being (Element of C11) st ( B51 + B53 ) = B52)) & (for B54 , B55 being (Element of C11) holds (ex B56 being (Element of C11) st ( B56 + B54 ) = B55)))
and
L42: (for B57 , B58 , B59 being (Element of C11) holds (( B57 + B58 ) = ( B57 + B59 ) implies B58 = B59))
and
L43: (for B60 , B61 , B62 being (Element of C11) holds (( B61 + B60 ) = ( B62 + B60 ) implies B61 = B62));
thus L44: C11 is  left_add-cancelable
proof
let C12 , C13 , C14 being (Element of C11);
thus L45: thesis by L42;
end;

thus L46: C11 is  right_add-cancelable
proof
let C15 , C16 , C17 being (Element of C11);
thus L47: thesis by L43;
end;

thus L48: thesis by L41 , L33 , L34;
end;
L49: (for B63 , B64 , B65 being (Element of ( Trivial-addLoopStr )) holds ( ( B63 + B64 ) + B65 ) = ( B63 + ( B64 + B65 ) )) by L22;
L50: (for B66 , B67 being (Element of ( Trivial-addLoopStr )) holds ( B66 + B67 ) = ( B67 + B66 )) by L22;
registration
cluster ( Trivial-addLoopStr ) ->  add-associative  Loop-like  right_zeroed  left_zeroed;
coherence by L31 , L25 , L26 , L28 , L30 , L49 , L39 , RLVECT_1:def 3 , RLVECT_1:def 4;
end;
registration
cluster  strict  left_zeroed  right_zeroed  Loop-like for non  empty non  empty non  empty non  empty addLoopStr;
existence
proof
take ( Trivial-addLoopStr );
thus L52: thesis;
end;
end;
definition
mode Loop
 is  left_zeroed  right_zeroed  Loop-like non  empty addLoopStr;
end;
registration
cluster  strict  add-associative for Loop;
existence
proof
take ( Trivial-addLoopStr );
thus L55: thesis;
end;
end;
registration
cluster  Loop-like ->  add-left-invertible for non  empty non  empty non  empty non  empty addLoopStr;
coherence;
cluster  add-associative  right_zeroed  right_complementable ->  left_zeroed  Loop-like for non  empty non  empty non  empty non  empty addLoopStr;
coherence
proof
let R1 being non  empty addLoopStr;
assume L57: R1 is  add-associative  right_zeroed  right_complementable;
reconsider D1 = R1 as  add-associative  right_zeroed  right_complementable non  empty addLoopStr by L57;
L58: (for B68 , B69 , B70 being (Element of R1) holds (( B69 + B68 ) = ( B70 + B68 ) implies B69 = B70)) by L57 , RLVECT_1:8;
thus L59: (for R2 being (Element of R1) holds ( ( 0. R1 ) + R2 ) = R2) by L57 , RLVECT_1:4;
L60: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (ex R5 being (Element of R1) st ( R5 + R2 ) = R3)))
proof
let R2 being (Element of R1);
let R3 being (Element of R1);
reconsider D2 = R2 , D3 = R3 as (Element of D1);
reconsider D4 = ( D3 + ( - D2 ) ) as (Element of R1);
take D4;
L61: ( ( D3 + ( - D2 ) ) + D2 ) = ( D3 + ( ( - D2 ) + D2 ) ) by RLVECT_1:def 3
.= ( D3 + ( 0. D1 ) ) by RLVECT_1:5
.= R3 by RLVECT_1:4;
thus L62: thesis by L61;
end;
L63: ((for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = R3))) & (for B71 , B72 , B73 being (Element of R1) holds (( B71 + B72 ) = ( B71 + B73 ) implies B72 = B73))) by L57 , RLVECT_1:7 , RLVECT_1:8;
thus L64: thesis by L63 , L60 , L58 , L39;
end;
end;
theorem
L66: (for R1 being non  empty addLoopStr holds (R1 is AddGroup iff ((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) )))))))
proof
let R1 being non  empty addLoopStr;
thus L67: (R1 is AddGroup implies ((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) )))))) by L39 , RLVECT_1:def 3 , RLVECT_1:def 4;
assume that
L68: (for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2)
and
L69: (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 )))
and
L70: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) ))));
L71: R1 is  right_complementable
proof
let C18 being (Element of R1);
thus L72: (ex R5 being (Element of R1) st ( C18 + R5 ) = ( 0. R1 )) by L69;
end;
thus L73: thesis by L71 , L68 , L70 , RLVECT_1:def 3 , RLVECT_1:def 4;
end;
registration
cluster ( Trivial-addLoopStr ) ->  Abelian;
coherence by L50 , RLVECT_1:def 2;
end;
registration
cluster  strict  Abelian for AddGroup;
existence
proof
take ( Trivial-addLoopStr );
thus L75: thesis;
end;
end;
theorem
L77: (for R1 being non  empty addLoopStr holds (R1 is  Abelian  Abelian  Abelian  Abelian AddGroup iff ((for R2 being (Element of R1) holds ( R2 + ( 0. R1 ) ) = R2) & (for R2 being (Element of R1) holds (ex R5 being (Element of R1) st ( R2 + R5 ) = ( 0. R1 ))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) )))) & (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds ( R2 + R3 ) = ( R3 + R2 )))))) by L66 , RLVECT_1:def 2;
registration
cluster ( Trivial-multLoopStr ) -> non  empty;
coherence;
end;
theorem
L79: (for B74 , B75 being (Element of ( Trivial-multLoopStr )) holds B74 = B75)
proof
let C19 , C20 being (Element of ( Trivial-multLoopStr ));
thus L80: C19 = ( {} ) by CARD_1:49 , TARSKI:def 1
.= C20 by CARD_1:49 , TARSKI:def 1;
end;
theorem
L81: (for B76 , B77 being (Element of ( Trivial-multLoopStr )) holds ( B76 * B77 ) = ( 1. ( Trivial-multLoopStr ) )) by L79;
L82: ((for B78 being (Element of ( Trivial-multLoopStr )) holds ( B78 * ( 1. ( Trivial-multLoopStr ) ) ) = B78) & (for B79 being (Element of ( Trivial-multLoopStr )) holds ( ( 1. ( Trivial-multLoopStr ) ) * B79 ) = B79)) by L79;
L83: (for B80 , B81 being (Element of ( Trivial-multLoopStr )) holds (ex B82 being (Element of ( Trivial-multLoopStr )) st ( B80 * B82 ) = B81))
proof
let C21 , C22 being (Element of ( Trivial-multLoopStr ));
take ( 1_ ( Trivial-multLoopStr ) );
thus L84: thesis by L79;
end;
L85: (for B83 , B84 being (Element of ( Trivial-multLoopStr )) holds (ex B85 being (Element of ( Trivial-multLoopStr )) st ( B85 * B83 ) = B84))
proof
let C23 , C24 being (Element of ( Trivial-multLoopStr ));
take ( 1_ ( Trivial-multLoopStr ) );
thus L86: thesis by L79;
end;
definition
let C25 being non  empty multLoopStr;
attr C25 is  invertible
means
:L87: ((for B86 , B87 being (Element of C25) holds (ex B88 being (Element of C25) st ( B86 * B88 ) = B87)) & (for B89 , B90 being (Element of C25) holds (ex B91 being (Element of C25) st ( B91 * B89 ) = B90)));
end;
notation
let C26 being non  empty multLoopStr;
synonym C26 is  cancelable for C26 is  mult-cancelable;
end;
registration
cluster  strict  well-unital  invertible  cancelable for non  empty non  empty non  empty non  empty multLoopStr;
existence
proof
L90: ( Trivial-multLoopStr ) is  well-unital  invertible  cancelable by L87 , L82 , L83 , L85 , VECTSP_1:def 6;
thus L91: thesis by L90;
end;
end;
definition
mode multLoop
 is  well-unital  invertible  cancelable non  empty multLoopStr;
end;
registration
cluster ( Trivial-multLoopStr ) ->  well-unital  invertible  cancelable;
coherence by L87 , L82 , L83 , L85 , VECTSP_1:def 6;
end;
L95: (for B92 , B93 , B94 being (Element of ( Trivial-multLoopStr )) holds ( ( B92 * B93 ) * B94 ) = ( B92 * ( B93 * B94 ) )) by L79;
registration
cluster  strict  associative for multLoop;
existence
proof
L96: ( Trivial-multLoopStr ) is  associative by L95 , GROUP_1:def 3;
thus L97: thesis by L96;
end;
end;
definition
mode multGroup
 is  associative multLoop;
end;
L100: (for R6 being non  empty multLoopStr holds (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))))) implies (( R7 * R8 ) = ( 1. R6 ) implies ( R8 * R7 ) = ( 1. R6 ))))))
proof
let R6 being non  empty multLoopStr;
let R7 being (Element of R6);
let R8 being (Element of R6);
assume that
L101: (for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7)
and
L102: (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 )))
and
L103: (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))));
consider R10 being (Element of R6) such that L104: ( R8 * R10 ) = ( 1. R6 ) by L102;
assume L105: ( R7 * R8 ) = ( 1. R6 );
thus L106: ( R8 * R7 ) = ( ( R8 * R7 ) * ( R8 * R10 ) ) by L101 , L104
.= ( ( ( R8 * R7 ) * R8 ) * R10 ) by L103
.= ( ( R8 * ( 1. R6 ) ) * R10 ) by L103 , L105
.= ( 1. R6 ) by L101 , L104;
end;
L107: (for R6 being non  empty multLoopStr holds (for R7 being (Element of R6) holds (((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))))) implies ( ( 1. R6 ) * R7 ) = ( R7 * ( 1. R6 ) ))))
proof
let R6 being non  empty multLoopStr;
let R7 being (Element of R6);
assume that
L108: (for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7)
and
L109: (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 )))
and
L110: (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))));
consider R10 being (Element of R6) such that L111: ( R7 * R10 ) = ( 1. R6 ) by L109;
thus L112: ( ( 1. R6 ) * R7 ) = ( R7 * ( R10 * R7 ) ) by L110 , L111
.= ( R7 * ( 1. R6 ) ) by L108 , L109 , L110 , L111 , L100;
end;
L113: (for R6 being non  empty multLoopStr holds (((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))))) implies (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R10 * R7 ) = ( 1. R6 )))))
proof
let R6 being non  empty multLoopStr;
assume that
L114: (for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7)
and
L115: (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 )))
and
L116: (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))));
let R7 being (Element of R6);
consider R10 being (Element of R6) such that L117: ( R7 * R10 ) = ( 1. R6 ) by L115;
L118: ( R10 * R7 ) = ( 1. R6 ) by L114 , L115 , L116 , L117 , L100;
thus L119: thesis by L118;
end;
theorem
L120: (for R6 being non  empty multLoopStr holds (R6 is multGroup iff ((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) )))))))
proof
let R6 being non  empty multLoopStr;
thus L121: (R6 is multGroup implies ((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) )))))) by L87 , GROUP_1:def 3 , VECTSP_1:def 6;
assume that
L122: (for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7)
and
L123: (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 )))
and
L124: (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) ))));
L125: (for B95 , B96 being (Element of R6) holds (ex B97 being (Element of R6) st ( B97 * B95 ) = B96))
proof
let R7 being (Element of R6);
let R8 being (Element of R6);
consider R11 being (Element of R6) such that L126: ( R11 * R7 ) = ( 1. R6 ) by L122 , L123 , L124 , L113;
take D5 = ( R8 * R11 );
thus L127: ( D5 * R7 ) = ( R8 * ( 1. R6 ) ) by L124 , L126
.= R8 by L122;
end;
L128: (for B98 being (Element of R6) holds ( ( 1. R6 ) * B98 ) = B98)
proof
let R7 being (Element of R6);
thus L129: ( ( 1. R6 ) * R7 ) = ( R7 * ( 1. R6 ) ) by L122 , L123 , L124 , L107
.= R7 by L122;
end;
L130: R6 is  left_mult-cancelable
proof
let R7 being (Element of R6);
let R10 being (Element of R6);
let R11 being (Element of R6);
consider R12 being (Element of R6) such that L131: ( R12 * R7 ) = ( 1. R6 ) by L122 , L123 , L124 , L113;
assume L132: ( R7 * R10 ) = ( R7 * R11 );
L133: ( ( R12 * R7 ) * R10 ) = ( R12 * ( R7 * R11 ) ) by L132 , L124
.= ( ( R12 * R7 ) * R11 ) by L124;
thus L134: R10 = ( ( 1. R6 ) * R11 ) by L133 , L128 , L131
.= R11 by L128;
end;
L135: R6 is  right_mult-cancelable
proof
let R7 being (Element of R6);
let R10 being (Element of R6);
let R11 being (Element of R6);
consider R12 being (Element of R6) such that L136: ( R7 * R12 ) = ( 1. R6 ) by L123;
assume L137: ( R10 * R7 ) = ( R11 * R7 );
L138: ( R10 * ( R7 * R12 ) ) = ( ( R11 * R7 ) * R12 ) by L137 , L124
.= ( R11 * ( R7 * R12 ) ) by L124;
thus L139: R10 = ( R11 * ( 1. R6 ) ) by L138 , L122 , L136
.= R11 by L122;
end;
L140: (for B99 , B100 being (Element of R6) holds (ex B101 being (Element of R6) st ( B99 * B101 ) = B100))
proof
let R7 being (Element of R6);
let R8 being (Element of R6);
consider R11 being (Element of R6) such that L141: ( R7 * R11 ) = ( 1. R6 ) by L123;
take D6 = ( R11 * R8 );
thus L142: ( R7 * D6 ) = ( ( 1. R6 ) * R8 ) by L124 , L141
.= R8 by L128;
end;
thus L143: thesis by L140 , L122 , L124 , L128 , L125 , L130 , L135 , L87 , GROUP_1:def 3 , VECTSP_1:def 6;
end;
registration
cluster ( Trivial-multLoopStr ) ->  associative;
coherence by L95 , GROUP_1:def 3;
end;
L145: (for B102 , B103 being (Element of ( Trivial-multLoopStr )) holds ( B102 * B103 ) = ( B103 * B102 )) by L79;
registration
cluster  strict  commutative for multGroup;
existence
proof
L146: ( Trivial-multLoopStr ) is  commutative by L145 , GROUP_1:def 12;
thus L147: thesis by L146;
end;
end;
theorem
L149: (for R6 being non  empty multLoopStr holds (R6 is  commutative  commutative  commutative  commutative multGroup iff ((for R7 being (Element of R6) holds ( R7 * ( 1. R6 ) ) = R7) & (for R7 being (Element of R6) holds (ex R10 being (Element of R6) st ( R7 * R10 ) = ( 1. R6 ))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds (for R9 being (Element of R6) holds ( ( R7 * R8 ) * R9 ) = ( R7 * ( R8 * R9 ) )))) & (for R7 being (Element of R6) holds (for R8 being (Element of R6) holds ( R7 * R8 ) = ( R8 * R7 )))))) by L120 , GROUP_1:def 12;
notation
let C27 being  invertible  cancelable non  empty multLoopStr;
let C28 being (Element of C27);
synonym C28 " for / C28;
end;
registration
let C29 being  invertible  cancelable non  empty multLoopStr;
cluster  ->  left_invertible for (Element of C29);
coherence
proof
let C30 being (Element of C29);
thus L151: (ex B104 being (Element of C29) st ( B104 * C30 ) = ( 1. C29 )) by L87;
end;
end;
theorem
L153: (for R13 being multGroup holds (for R14 being (Element of R13) holds (( ( R14 " ) * R14 ) = ( 1. R13 ) & ( R14 * ( R14 " ) ) = ( 1. R13 ))))
proof
let R13 being multGroup;
let R14 being (Element of R13);
thus L154: ( ( R14 " ) * R14 ) = ( 1. R13 ) by ALGSTR_0:def 30;
L155: (for R14 being (Element of R13) holds (for R15 being (Element of R13) holds (for R16 being (Element of R13) holds ( ( R14 * R15 ) * R16 ) = ( R14 * ( R15 * R16 ) )))) by L120;
L156: ((for R14 being (Element of R13) holds ( R14 * ( 1. R13 ) ) = R14) & (for R14 being (Element of R13) holds (ex R17 being (Element of R13) st ( R14 * R17 ) = ( 1. R13 )))) by L120;
thus L157: thesis by L156 , L154 , L155 , L100;
end;
definition
let C31 being  invertible  cancelable non  empty multLoopStr;
let C32 , C33 being (Element of C31);
func C32 / C33 -> (Element of C31) equals 
( C32 * ( C33 " ) );
correctness;
end;
definition
func multEX_0 ->  strict multLoopStr_0 equals 
multLoopStr_0 (# ( REAL ) , ( multreal ) , ( 0 ) , 1 #);
correctness;
end;
registration
cluster ( multEX_0 ) -> non  empty;
coherence;
end;
L161:
now
let C34 , C35 being (Element of ( multEX_0 ));
reconsider D7 = C34 as Real;
assume L162: C35 = 1;
thus L163: ( C34 * C35 ) = ( D7 * 1 ) by L162 , BINOP_2:def 11
.= C34;
thus L164: ( C35 * C34 ) = ( 1 * D7 ) by L162 , BINOP_2:def 11
.= C34;
end;
registration
cluster ( multEX_0 ) ->  well-unital;
coherence
proof
let C36 being (Element of ( multEX_0 ));
thus L165: thesis by L161;
end;
end;
L167: ( 0 ) = ( 0. ( multEX_0 ) );
L168: 1 = ( 1_ ( multEX_0 ) );
theorem
L169: (for B105 , B106 being Real holds (B105 <> ( 0 ) implies (ex B107 being Real st B106 = ( B105 * B107 ))))
proof
let C37 , C38 being Real;
reconsider D8 = ( C38 / C37 ) as Real;
assume L170: C37 <> ( 0 );
take D8;
thus L171: thesis by L170 , XCMPLX_1:87;
end;
theorem
L172: (for B108 , B109 being Real holds (B108 <> ( 0 ) implies (ex B110 being Real st B109 = ( B110 * B108 ))))
proof
let C39 , C40 being Real;
reconsider D9 = ( C40 / C39 ) as Real;
assume L173: C39 <> ( 0 );
take D9;
thus L174: thesis by L173 , XCMPLX_1:87;
end;
L175: (for B111 , B112 being (Element of ( multEX_0 )) holds (B111 <> ( 0. ( multEX_0 ) ) implies (ex B113 being (Element of ( multEX_0 )) st ( B111 * B113 ) = B112)))
proof
let C41 , C42 being (Element of ( multEX_0 ));
assume that
L176: C41 <> ( 0. ( multEX_0 ) );
reconsider D10 = C41 , D11 = C42 as Real;
consider C43 being Real such that L177: ( D10 * C43 ) = D11 by L176 , L169;
reconsider D12 = C43 as (Element of ( multEX_0 ));
L178: ( C41 * D12 ) = C42 by L177 , BINOP_2:def 11;
thus L179: thesis by L178;
end;
L180: (for B114 , B115 being (Element of ( multEX_0 )) holds (B114 <> ( 0. ( multEX_0 ) ) implies (ex B116 being (Element of ( multEX_0 )) st ( B116 * B114 ) = B115)))
proof
let C44 , C45 being (Element of ( multEX_0 ));
assume that
L181: C44 <> ( 0. ( multEX_0 ) );
reconsider D13 = C44 , D14 = C45 as Real;
consider C46 being Real such that L182: ( C46 * D13 ) = D14 by L181 , L172;
reconsider D15 = C46 as (Element of ( multEX_0 ));
L183: ( D15 * C44 ) = C45 by L182 , BINOP_2:def 11;
thus L184: thesis by L183;
end;
L185: (for B117 , B118 , B119 being (Element of ( multEX_0 )) holds (B117 <> ( 0. ( multEX_0 ) ) implies (( B117 * B118 ) = ( B117 * B119 ) implies B118 = B119)))
proof
let C47 , C48 , C49 being (Element of ( multEX_0 ));
assume that
L186: C47 <> ( 0. ( multEX_0 ) );
reconsider D16 = C47 , D17 = C48 , D18 = C49 as Real;
assume L187: ( C47 * C48 ) = ( C47 * C49 );
L188: ( D16 * D17 ) = ( C47 * C49 ) by L187 , BINOP_2:def 11
.= ( D16 * D18 ) by BINOP_2:def 11;
thus L189: thesis by L188 , L186 , XCMPLX_1:5;
end;
L190: (for B120 , B121 , B122 being (Element of ( multEX_0 )) holds (B120 <> ( 0. ( multEX_0 ) ) implies (( B121 * B120 ) = ( B122 * B120 ) implies B121 = B122)))
proof
let C50 , C51 , C52 being (Element of ( multEX_0 ));
assume that
L191: C50 <> ( 0. ( multEX_0 ) );
reconsider D19 = C50 , D20 = C51 , D21 = C52 as Real;
assume L192: ( C51 * C50 ) = ( C52 * C50 );
L193: ( D20 * D19 ) = ( C52 * C50 ) by L192 , BINOP_2:def 11
.= ( D21 * D19 ) by BINOP_2:def 11;
thus L194: thesis by L193 , L191 , XCMPLX_1:5;
end;
L195: (for B123 being (Element of ( multEX_0 )) holds ( B123 * ( 0. ( multEX_0 ) ) ) = ( 0. ( multEX_0 ) ))
proof
let C53 being (Element of ( multEX_0 ));
reconsider D22 = C53 as Real;
thus L196: ( C53 * ( 0. ( multEX_0 ) ) ) = ( D22 * ( 0 ) ) by BINOP_2:def 11
.= ( 0. ( multEX_0 ) );
end;
L197: (for B124 being (Element of ( multEX_0 )) holds ( ( 0. ( multEX_0 ) ) * B124 ) = ( 0. ( multEX_0 ) ))
proof
let C54 being (Element of ( multEX_0 ));
reconsider D23 = C54 as Real;
thus L198: ( ( 0. ( multEX_0 ) ) * C54 ) = ( ( 0 ) * D23 ) by BINOP_2:def 11
.= ( 0. ( multEX_0 ) );
end;
definition
let C55 being non  empty multLoopStr_0;
attr C55 is  almost_invertible
means
:L199: ((for B125 , B126 being (Element of C55) holds (B125 <> ( 0. C55 ) implies (ex B127 being (Element of C55) st ( B125 * B127 ) = B126))) & (for B128 , B129 being (Element of C55) holds (B128 <> ( 0. C55 ) implies (ex B130 being (Element of C55) st ( B130 * B128 ) = B129))));
end;
definition
let C56 being non  empty multLoopStr_0;
attr C56 is  multLoop_0-like
means
:L201: (C56 is  almost_invertible  almost_cancelable & (for B131 being (Element of C56) holds ( B131 * ( 0. C56 ) ) = ( 0. C56 )) & (for B132 being (Element of C56) holds ( ( 0. C56 ) * B132 ) = ( 0. C56 )));
end;
theorem
L203: (for B133 being non  empty multLoopStr_0 holds (B133 is  multLoop_0-like iff ((for B134 , B135 being (Element of B133) holds (B134 <> ( 0. B133 ) implies (ex B136 being (Element of B133) st ( B134 * B136 ) = B135))) & (for B137 , B138 being (Element of B133) holds (B137 <> ( 0. B133 ) implies (ex B139 being (Element of B133) st ( B139 * B137 ) = B138))) & (for B140 , B141 , B142 being (Element of B133) holds (B140 <> ( 0. B133 ) implies (( B140 * B141 ) = ( B140 * B142 ) implies B141 = B142))) & (for B143 , B144 , B145 being (Element of B133) holds (B143 <> ( 0. B133 ) implies (( B144 * B143 ) = ( B145 * B143 ) implies B144 = B145))) & (for B146 being (Element of B133) holds ( B146 * ( 0. B133 ) ) = ( 0. B133 )) & (for B147 being (Element of B133) holds ( ( 0. B133 ) * B147 ) = ( 0. B133 )))))
proof
let C57 being non  empty multLoopStr_0;
thus L204:now
assume L205: C57 is  multLoop_0-like;
L206: C57 is  almost_invertible  almost_cancelable by L205 , L201;
thus L207: ((for B148 , B149 being (Element of C57) holds (B148 <> ( 0. C57 ) implies (ex B150 being (Element of C57) st ( B148 * B150 ) = B149))) & (for B151 , B152 being (Element of C57) holds (B151 <> ( 0. C57 ) implies (ex B153 being (Element of C57) st ( B153 * B151 ) = B152)))) by L206 , L199;
thus L208: (for B154 , B155 , B156 being (Element of C57) holds (B154 <> ( 0. C57 ) implies (( B154 * B155 ) = ( B154 * B156 ) implies B155 = B156)))
proof
let C58 , C59 , C60 being (Element of C57);
assume L209: C58 <> ( 0. C57 );
L210: C58 is  left_mult-cancelable by L209 , L206 , ALGSTR_0:def 36;
thus L211: thesis by L210 , ALGSTR_0:def 20;
end;

thus L212: (for B157 , B158 , B159 being (Element of C57) holds (B157 <> ( 0. C57 ) implies (( B158 * B157 ) = ( B159 * B157 ) implies B158 = B159)))
proof
let C61 , C62 , C63 being (Element of C57);
assume L213: C61 <> ( 0. C57 );
L214: C61 is  right_mult-cancelable by L213 , L206 , ALGSTR_0:def 37;
thus L215: thesis by L214 , ALGSTR_0:def 21;
end;

thus L216: ((for B160 being (Element of C57) holds ( B160 * ( 0. C57 ) ) = ( 0. C57 )) & (for B161 being (Element of C57) holds ( ( 0. C57 ) * B161 ) = ( 0. C57 ))) by L205 , L201;
end;
assume that
L217: ((for B162 , B163 being (Element of C57) holds (B162 <> ( 0. C57 ) implies (ex B164 being (Element of C57) st ( B162 * B164 ) = B163))) & (for B165 , B166 being (Element of C57) holds (B165 <> ( 0. C57 ) implies (ex B167 being (Element of C57) st ( B167 * B165 ) = B166))))
and
L218: (for B168 , B169 , B170 being (Element of C57) holds (B168 <> ( 0. C57 ) implies (( B168 * B169 ) = ( B168 * B170 ) implies B169 = B170)))
and
L219: (for B171 , B172 , B173 being (Element of C57) holds (B171 <> ( 0. C57 ) implies (( B172 * B171 ) = ( B173 * B171 ) implies B172 = B173)))
and
L220: ((for B174 being (Element of C57) holds ( B174 * ( 0. C57 ) ) = ( 0. C57 )) & (for B175 being (Element of C57) holds ( ( 0. C57 ) * B175 ) = ( 0. C57 )));
L221: C57 is  almost_right_cancelable
proof
let C64 being (Element of C57);
assume L222: C64 <> ( 0. C57 );
let C65 , C66 being (Element of C57);
assume L223: ( C65 * C64 ) = ( C66 * C64 );
thus L224: thesis by L223 , L219 , L222;
end;
L225: C57 is  almost_left_cancelable
proof
let C67 being (Element of C57);
assume L226: C67 <> ( 0. C57 );
let C68 , C69 being (Element of C57);
assume L227: ( C67 * C68 ) = ( C67 * C69 );
thus L228: thesis by L227 , L218 , L226;
end;
L229: C57 is  almost_invertible  almost_cancelable by L225 , L217 , L221 , L199;
thus L230: thesis by L229 , L220 , L201;
end;
registration
cluster  multLoop_0-like ->  almost_invertible  almost_cancelable for non  empty non  empty non  empty non  empty multLoopStr_0;
coherence by L201;
end;
registration
cluster  strict  well-unital  multLoop_0-like non  degenerated for non  empty non  empty non  empty non  empty multLoopStr_0;
existence
proof
L232: ( multEX_0 ) is  well-unital  multLoop_0-like non  degenerated by L168 , L175 , L180 , L185 , L190 , L195 , L197 , L203 , STRUCT_0:def 8;
thus L233: thesis by L232;
end;
end;
definition
mode multLoop_0
 is  well-unital non  degenerated  multLoop_0-like non  empty multLoopStr_0;
end;
registration
cluster ( multEX_0 ) ->  well-unital  multLoop_0-like;
coherence by L175 , L180 , L185 , L190 , L195 , L197 , L203;
end;
L237: (for B176 , B177 , B178 being (Element of ( multEX_0 )) holds ( ( B176 * B177 ) * B178 ) = ( B176 * ( B177 * B178 ) ))
proof
let C70 , C71 , C72 being (Element of ( multEX_0 ));
reconsider D24 = C70 , D25 = C71 , D26 = C72 as Real;
L238: ( C71 * C72 ) = ( D25 * D26 ) by BINOP_2:def 11;
L239: ( C70 * C71 ) = ( D24 * D25 ) by BINOP_2:def 11;
thus L240: ( ( C70 * C71 ) * C72 ) = ( ( D24 * D25 ) * D26 ) by L239 , BINOP_2:def 11
.= ( D24 * ( D25 * D26 ) )
.= ( C70 * ( C71 * C72 ) ) by L238 , BINOP_2:def 11;
end;
registration
cluster  strict  associative non  degenerated for multLoop_0;
existence
proof
L241: ( multEX_0 ) is  associative non  degenerated by L167 , L168 , L237 , GROUP_1:def 3 , STRUCT_0:def 8;
thus L242: thesis by L241;
end;
end;
definition
mode multGroup_0
 is  associative non  degenerated multLoop_0;
end;
registration
cluster ( multEX_0 ) ->  associative;
coherence by L237 , GROUP_1:def 3;
end;
L246: (for B179 , B180 being (Element of ( multEX_0 )) holds ( B179 * B180 ) = ( B180 * B179 ))
proof
let C73 , C74 being (Element of ( multEX_0 ));
reconsider D27 = C73 , D28 = C74 as Real;
thus L247: ( C73 * C74 ) = ( D28 * D27 ) by BINOP_2:def 11
.= ( C74 * C73 ) by BINOP_2:def 11;
end;
registration
cluster  strict  commutative for multGroup_0;
existence
proof
L248: ( multEX_0 ) is  commutative non  degenerated by L167 , L168 , L246 , GROUP_1:def 12 , STRUCT_0:def 8;
thus L249: thesis by L248;
end;
end;
definition
let C75 being  almost_invertible  almost_cancelable non  empty multLoopStr_0;
let C76 being (Element of C75);
assume L251: C76 <> ( 0. C75 );
redefine func C76 " means 
:L252: ( it * C76 ) = ( 1. C75 );
compatibility
proof
let C77 being (Element of C75);
L253: (ex B181 being (Element of C75) st ( B181 * C76 ) = ( 1. C75 )) by L251 , L199;
L254: C76 is  left_invertible by L253 , ALGSTR_0:def 27;
L255: C76 is  right_mult-cancelable by L251 , ALGSTR_0:def 37;
thus L256: thesis by L255 , L254 , ALGSTR_0:def 35;
end;
end;
theorem
L258: (for R18 being  associative  almost_invertible  almost_cancelable  well-unital non  empty multLoopStr_0 holds (for R19 being (Element of R18) holds (R19 <> ( 0. R18 ) implies (( ( R19 " ) * R19 ) = ( 1. R18 ) & ( R19 * ( R19 " ) ) = ( 1. R18 )))))
proof
let R18 being  associative  almost_invertible  almost_cancelable  well-unital non  empty multLoopStr_0;
let R19 being (Element of R18);
assume L259: R19 <> ( 0. R18 );
thus L260: ( ( R19 " ) * R19 ) = ( 1. R18 ) by L259 , L252;
consider R20 being (Element of R18) such that L261: ( R19 * R20 ) = ( 1. R18 ) by L259 , L199;
L262: ( ( ( R19 " ) * R19 ) * R20 ) = ( ( R19 " ) * ( 1. R18 ) ) by L261 , GROUP_1:def 3;
L263: R20 = ( ( R19 " ) * ( 1. R18 ) ) by L262 , L260 , VECTSP_1:def 8;
thus L264: thesis by L263 , L261 , VECTSP_1:def 4;
end;
definition
let C78 being  almost_invertible  almost_cancelable non  empty multLoopStr_0;
let C79 , C80 being (Element of C78);
func C79 / C80 -> (Element of C78) equals 
( C79 * ( C80 " ) );
correctness;
end;
registration
cluster  ->  Abelian  add-associative  right_zeroed  right_complementable for 1 -element 1 -element 1 -element 1 -element addLoopStr;
coherence
proof
let C81 being 1 -element addLoopStr;
thus L266: ((for B182 , B183 being (Element of C81) holds ( B182 + B183 ) = ( B183 + B182 )) & (for B184 , B185 , B186 being (Element of C81) holds ( ( B184 + B185 ) + B186 ) = ( B184 + ( B185 + B186 ) )) & (for B187 being (Element of C81) holds ( B187 + ( 0. C81 ) ) = B187)) by STRUCT_0:def 10;
let C82 being (Element of C81);
take C82;
thus L267: thesis by STRUCT_0:def 10;
end;
cluster  trivial ->  well-unital  right-distributive for non  empty non  empty non  empty non  empty doubleLoopStr;
coherence
proof
let C83 being non  empty doubleLoopStr;
assume that
L268: C83 is  trivial;
thus L269: (for B188 being (Element of C83) holds (( B188 * ( 1. C83 ) ) = B188 & ( ( 1. C83 ) * B188 ) = B188)) by L268 , STRUCT_0:def 10;
let C84 , C85 , C86 being (Element of C83);
thus L270: thesis by L268 , STRUCT_0:def 10;
end;
end;
registration
cluster  ->  Group-like  associative  commutative for 1 -element 1 -element 1 -element 1 -element multMagma;
coherence
proof
let C87 being 1 -element multMagma;
thus L272:now
set D29 = the (Element of C87);
take D30 = D29;
let C88 being (Element of C87);
thus L273: (( C88 * D30 ) = C88 & ( D30 * C88 ) = C88) by STRUCT_0:def 10;
take D31 = D30;
thus L274: (( C88 * D31 ) = D30 & ( D31 * C88 ) = D30) by STRUCT_0:def 10;
end;
thus L275: (for B189 , B190 , B191 being (Element of C87) holds ( ( B189 * B190 ) * B191 ) = ( B189 * ( B190 * B191 ) )) by STRUCT_0:def 10;
let C89 , C90 being (Element of C87);
thus L276: thesis by STRUCT_0:def 10;
end;
end;
