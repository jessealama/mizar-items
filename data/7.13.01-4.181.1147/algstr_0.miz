:: Basic Algebraic Structures
::  by Library Committee
::
:: Received December 8, 2007
:: Copyright (c) 2007-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, SUBSET_1, BINOP_1, ZFMISC_1, STRUCT_0, ARYTM_3,
      FUNCT_1, FUNCT_5, SUPINF_2, ARYTM_1, RELAT_1, MESFUNC1, ALGSTR_0, CARD_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, ZFMISC_1, BINOP_1, FUNCT_5, CARD_1,
      STRUCT_0;
 constructors BINOP_1, STRUCT_0, ZFMISC_1, FUNCT_5;
 registrations ZFMISC_1, CARD_1, ORDINAL1, STRUCT_0;
 requirements BOOLE, SUBSET, NUMERALS;
 definitions STRUCT_0;
 theorems CARD_1, STRUCT_0;

begin
definition
struct (1-sorted) addMagma(# carrier -> set , addF -> (BinOp of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
cluster addMagma (# R1 , R4 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
cluster addMagma (# R6 , R9 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
cluster addMagma (# R11 , R14 #) -> non  trivial;
coherence;
end;
definition
let C1 being addMagma;
let C2 , C3 being (Element of C1);
func C2 + C3 -> (Element of C1) equals 
( (the addF of C1) . (C2 , C3) );
coherence;
end;
definition
func Trivial-addMagma -> addMagma equals 
addMagma (# 1 , ( op2 ) #);
coherence;
end;
registration
cluster ( Trivial-addMagma ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for addMagma;
existence
proof
take ( Trivial-addMagma );
thus L8: thesis;
end;
end;
definition
let C4 being addMagma;
let C5 being (Element of C4);
attr C5 is  left_add-cancelable
means
(for B1 , B2 being (Element of C4) holds (( C5 + B1 ) = ( C5 + B2 ) implies B1 = B2));
attr C5 is  right_add-cancelable
means
:L10: (for B3 , B4 being (Element of C4) holds (( B3 + C5 ) = ( B4 + C5 ) implies B3 = B4));
end;
definition
let C6 being addMagma;
let C7 being (Element of C6);
attr C7 is  add-cancelable
means
:L12: C7 is  right_add-cancelable  left_add-cancelable;
end;
registration
let C8 being addMagma;
cluster  right_add-cancelable  left_add-cancelable ->  add-cancelable for (Element of C8);
coherence by L12;
cluster  add-cancelable ->  right_add-cancelable  left_add-cancelable for (Element of C8);
coherence by L12;
end;
definition
let C9 being addMagma;
attr C9 is  left_add-cancelable
means
:L15: (for B5 being (Element of C9) holds B5 is  left_add-cancelable);
attr C9 is  right_add-cancelable
means
:L16: (for B6 being (Element of C9) holds B6 is  right_add-cancelable);
end;
definition
let C10 being addMagma;
attr C10 is  add-cancelable
means
:L18: C10 is  right_add-cancelable  left_add-cancelable;
end;
registration
cluster  right_add-cancelable  left_add-cancelable ->  add-cancelable for addMagma;
coherence by L18;
cluster  add-cancelable ->  right_add-cancelable  left_add-cancelable for addMagma;
coherence by L18;
end;
registration
cluster ( Trivial-addMagma ) ->  add-cancelable;
coherence
proof
set D1 = ( Trivial-addMagma );
thus L21: D1 is  right_add-cancelable
proof
let C11 , C12 , C13 being (Element of D1);
assume L22: ( C12 + C11 ) = ( C13 + C11 );
thus L23: thesis by STRUCT_0:def 10;
end;

let C14 , C15 , C16 being (Element of D1);
assume L24: ( C14 + C15 ) = ( C14 + C16 );
thus L25: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  add-cancelable  strict 1 -element for addMagma;
existence
proof
take ( Trivial-addMagma );
thus L27: thesis;
end;
end;
registration
let C17 being  left_add-cancelable addMagma;
cluster  ->  left_add-cancelable for (Element of C17);
coherence by L15;
end;
registration
let C18 being  right_add-cancelable addMagma;
cluster  ->  right_add-cancelable for (Element of C18);
coherence by L16;
end;
definition
struct (ZeroStr , addMagma) addLoopStr(# carrier -> set , addF -> (BinOp of the carrier) , ZeroF -> (Element of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
let R2 being (Element of R1);
cluster addLoopStr (# R1 , R4 , R2 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
let R8 being (Element of R6);
cluster addLoopStr (# R6 , R9 , R8 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
let R13 being (Element of R11);
cluster addLoopStr (# R11 , R14 , R13 #) -> non  trivial;
coherence;
end;
definition
func Trivial-addLoopStr -> addLoopStr equals 
addLoopStr (# 1 , ( op2 ) , ( op0 ) #);
coherence;
end;
registration
cluster ( Trivial-addLoopStr ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for addLoopStr;
existence
proof
take ( Trivial-addLoopStr );
thus L37: thesis;
end;
end;
definition
let C19 being addLoopStr;
let C20 being (Element of C19);
attr C20 is  left_complementable
means
:L39: (ex B7 being (Element of C19) st ( B7 + C20 ) = ( 0. C19 ));
attr C20 is  right_complementable
means
(ex B8 being (Element of C19) st ( C20 + B8 ) = ( 0. C19 ));
end;
definition
let C21 being addLoopStr;
let C22 being (Element of C21);
attr C22 is  complementable
means
:L41: C22 is  right_complementable  left_complementable;
end;
registration
let C23 being addLoopStr;
cluster  right_complementable  left_complementable ->  complementable for (Element of C23);
coherence by L41;
cluster  complementable ->  right_complementable  left_complementable for (Element of C23);
coherence by L41;
end;
definition
let C24 being addLoopStr;
let C25 being (Element of C24);
assume L44: C25 is  left_complementable  right_add-cancelable;
func - C25 -> (Element of C24) means 
( it + C25 ) = ( 0. C24 );
existence by L44 , L39;
uniqueness by L44 , L10;
end;
definition
let C26 being addLoopStr;
let C27 , C28 being (Element of C26);
func C27 - C28 -> (Element of C26) equals 
( C27 + ( - C28 ) );
correctness;
end;
registration
cluster ( Trivial-addLoopStr ) ->  add-cancelable;
coherence
proof
set D2 = ( Trivial-addLoopStr );
thus L47: D2 is  right_add-cancelable
proof
let C29 , C30 , C31 being (Element of D2);
assume L48: ( C30 + C29 ) = ( C31 + C29 );
thus L49: thesis by STRUCT_0:def 10;
end;

let C32 , C33 , C34 being (Element of D2);
assume L50: ( C32 + C33 ) = ( C32 + C34 );
thus L51: thesis by STRUCT_0:def 10;
end;
end;
definition
let C35 being addLoopStr;
attr C35 is  left_complementable
means
:L53: (for B9 being (Element of C35) holds B9 is  left_complementable);
attr C35 is  right_complementable
means
:L54: (for B10 being (Element of C35) holds B10 is  right_complementable);
end;
definition
let C36 being addLoopStr;
attr C36 is  complementable
means
:L56: C36 is  right_complementable  left_complementable;
end;
registration
cluster  right_complementable  left_complementable ->  complementable for addLoopStr;
coherence by L56;
cluster  complementable ->  right_complementable  left_complementable for addLoopStr;
coherence by L56;
end;
registration
cluster ( Trivial-addLoopStr ) ->  complementable;
coherence
proof
set D3 = ( Trivial-addLoopStr );
thus L59: D3 is  right_complementable
proof
let C37 being (Element of D3);
take C37;
thus L60: thesis by STRUCT_0:def 10;
end;

let C38 being (Element of D3);
take C38;
thus L61: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  complementable  add-cancelable  strict 1 -element for addLoopStr;
existence
proof
take ( Trivial-addLoopStr );
thus L63: thesis;
end;
end;
registration
let C39 being  left_complementable addLoopStr;
cluster  ->  left_complementable for (Element of C39);
coherence by L53;
end;
registration
let C40 being  right_complementable addLoopStr;
cluster  ->  right_complementable for (Element of C40);
coherence by L54;
end;
begin
definition
struct (1-sorted) multMagma(# carrier -> set , multF -> (BinOp of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
cluster multMagma (# R1 , R4 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
cluster multMagma (# R6 , R9 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
cluster multMagma (# R11 , R14 #) -> non  trivial;
coherence;
end;
definition
let C41 being multMagma;
let C42 , C43 being (Element of C41);
func C42 * C43 -> (Element of C41) equals 
( (the multF of C41) . (C42 , C43) );
coherence;
end;
definition
func Trivial-multMagma -> multMagma equals 
multMagma (# 1 , ( op2 ) #);
coherence;
end;
registration
cluster ( Trivial-multMagma ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for multMagma;
existence
proof
take ( Trivial-multMagma );
thus L74: thesis;
end;
end;
definition
let C44 being multMagma;
let C45 being (Element of C44);
attr C45 is  left_mult-cancelable
means
(for B11 , B12 being (Element of C44) holds (( C45 * B11 ) = ( C45 * B12 ) implies B11 = B12));
attr C45 is  right_mult-cancelable
means
:L76: (for B13 , B14 being (Element of C44) holds (( B13 * C45 ) = ( B14 * C45 ) implies B13 = B14));
end;
definition
let C46 being multMagma;
let C47 being (Element of C46);
attr C47 is  mult-cancelable
means
:L78: C47 is  right_mult-cancelable  left_mult-cancelable;
end;
registration
let C48 being multMagma;
cluster  right_mult-cancelable  left_mult-cancelable ->  mult-cancelable for (Element of C48);
coherence by L78;
cluster  mult-cancelable ->  right_mult-cancelable  left_mult-cancelable for (Element of C48);
coherence by L78;
end;
definition
let C49 being multMagma;
attr C49 is  left_mult-cancelable
means
:L81: (for B15 being (Element of C49) holds B15 is  left_mult-cancelable);
attr C49 is  right_mult-cancelable
means
:L82: (for B16 being (Element of C49) holds B16 is  right_mult-cancelable);
end;
definition
let C50 being multMagma;
attr C50 is  mult-cancelable
means
:L84: C50 is  left_mult-cancelable  right_mult-cancelable;
end;
registration
cluster  right_mult-cancelable  left_mult-cancelable ->  mult-cancelable for multMagma;
coherence by L84;
cluster  mult-cancelable ->  right_mult-cancelable  left_mult-cancelable for multMagma;
coherence by L84;
end;
registration
cluster ( Trivial-multMagma ) ->  mult-cancelable;
coherence
proof
set D4 = ( Trivial-multMagma );
thus L87: D4 is  left_mult-cancelable
proof
let C51 , C52 , C53 being (Element of D4);
assume L88: ( C51 * C52 ) = ( C51 * C53 );
thus L89: thesis by STRUCT_0:def 10;
end;

let C54 , C55 , C56 being (Element of D4);
assume L90: ( C55 * C54 ) = ( C56 * C54 );
thus L91: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  mult-cancelable  strict 1 -element for multMagma;
existence
proof
take ( Trivial-multMagma );
thus L93: thesis;
end;
end;
registration
let C57 being  left_mult-cancelable multMagma;
cluster  ->  left_mult-cancelable for (Element of C57);
coherence by L81;
end;
registration
let C58 being  right_mult-cancelable multMagma;
cluster  ->  right_mult-cancelable for (Element of C58);
coherence by L82;
end;
definition
struct (OneStr , multMagma) multLoopStr(# carrier -> set , multF -> (BinOp of the carrier) , OneF -> (Element of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
let R2 being (Element of R1);
cluster multLoopStr (# R1 , R4 , R2 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
let R8 being (Element of R6);
cluster multLoopStr (# R6 , R9 , R8 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
let R13 being (Element of R11);
cluster multLoopStr (# R11 , R14 , R13 #) -> non  trivial;
coherence;
end;
definition
func Trivial-multLoopStr -> multLoopStr equals 
multLoopStr (# 1 , ( op2 ) , ( op0 ) #);
coherence;
end;
registration
cluster ( Trivial-multLoopStr ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for multLoopStr;
existence
proof
take ( Trivial-multLoopStr );
thus L103: thesis;
end;
end;
registration
cluster ( Trivial-multLoopStr ) ->  mult-cancelable;
coherence
proof
set D5 = ( Trivial-multLoopStr );
thus L105: D5 is  left_mult-cancelable
proof
let C59 , C60 , C61 being (Element of D5);
assume L106: ( C59 * C60 ) = ( C59 * C61 );
thus L107: thesis by STRUCT_0:def 10;
end;

let C62 , C63 , C64 being (Element of D5);
assume L108: ( C63 * C62 ) = ( C64 * C62 );
thus L109: thesis by STRUCT_0:def 10;
end;
end;
definition
let C65 being multLoopStr;
let C66 being (Element of C65);
attr C66 is  left_invertible
means
:L111: (ex B17 being (Element of C65) st ( B17 * C66 ) = ( 1. C65 ));
attr C66 is  right_invertible
means
(ex B18 being (Element of C65) st ( C66 * B18 ) = ( 1. C65 ));
end;
definition
let C67 being multLoopStr;
let C68 being (Element of C67);
attr C68 is  invertible
means
:L113: C68 is  right_invertible  left_invertible;
end;
registration
let C69 being multLoopStr;
cluster  right_invertible  left_invertible ->  invertible for (Element of C69);
coherence by L113;
cluster  invertible ->  right_invertible  left_invertible for (Element of C69);
coherence by L113;
end;
definition
let C70 being multLoopStr;
let C71 being (Element of C70);
assume L116: C71 is  left_invertible  right_mult-cancelable;
func / C71 -> (Element of C70) means 
( it * C71 ) = ( 1. C70 );
existence by L116 , L111;
uniqueness by L116 , L76;
end;
definition
let C72 being multLoopStr;
attr C72 is  left_invertible
means
:L118: (for B19 being (Element of C72) holds B19 is  left_invertible);
attr C72 is  right_invertible
means
:L119: (for B20 being (Element of C72) holds B20 is  right_invertible);
end;
definition
let C73 being multLoopStr;
attr C73 is  invertible
means
:L121: C73 is  right_invertible  left_invertible;
end;
registration
cluster  right_invertible  left_invertible ->  invertible for multLoopStr;
coherence by L121;
cluster  invertible ->  right_invertible  left_invertible for multLoopStr;
coherence by L121;
end;
registration
cluster ( Trivial-multLoopStr ) ->  invertible;
coherence
proof
set D6 = ( Trivial-multLoopStr );
thus L124: D6 is  right_invertible
proof
let C74 being (Element of D6);
take C74;
thus L125: thesis by STRUCT_0:def 10;
end;

let C75 being (Element of D6);
take C75;
thus L126: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  invertible  mult-cancelable  strict 1 -element for multLoopStr;
existence
proof
take ( Trivial-multLoopStr );
thus L128: thesis;
end;
end;
registration
let C76 being  left_invertible multLoopStr;
cluster  ->  left_invertible for (Element of C76);
coherence by L118;
end;
registration
let C77 being  right_invertible multLoopStr;
cluster  ->  right_invertible for (Element of C77);
coherence by L119;
end;
begin
definition
struct (multLoopStr , ZeroOneStr) multLoopStr_0(# carrier -> set , multF -> (BinOp of the carrier) , ZeroF , OneF -> (Element of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
let R2 being (Element of R1);
let R3 being (Element of R1);
cluster multLoopStr_0 (# R1 , R4 , R2 , R3 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
let R7 being (Element of R6);
let R8 being (Element of R6);
cluster multLoopStr_0 (# R6 , R9 , R7 , R8 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
let R13 being (Element of R11);
let R12 being (Element of R11);
cluster multLoopStr_0 (# R11 , R14 , R13 , R12 #) -> non  trivial;
coherence;
end;
definition
func Trivial-multLoopStr_0 -> multLoopStr_0 equals 
multLoopStr_0 (# 1 , ( op2 ) , ( op0 ) , ( op0 ) #);
coherence;
end;
registration
cluster ( Trivial-multLoopStr_0 ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for multLoopStr_0;
existence
proof
take ( Trivial-multLoopStr_0 );
thus L138: thesis;
end;
end;
definition
let C78 being multLoopStr_0;
let C79 being (Element of C78);
func C79 " -> (Element of C78) means 
( it * C79 ) = ( 1. C78 ) if C79 is  left_invertible  right_mult-cancelable otherwise it = ( 0. C78 );
existence by L111;
uniqueness by L76;
consistency;
end;
definition
let C80 being multLoopStr_0;
attr C80 is  almost_left_cancelable
means
(for B21 being (Element of C80) holds (B21 <> ( 0. C80 ) implies B21 is  left_mult-cancelable));
attr C80 is  almost_right_cancelable
means
(for B22 being (Element of C80) holds (B22 <> ( 0. C80 ) implies B22 is  right_mult-cancelable));
end;
definition
let C81 being multLoopStr_0;
attr C81 is  almost_cancelable
means
:L142: C81 is  almost_left_cancelable  almost_right_cancelable;
end;
registration
cluster  almost_right_cancelable  almost_left_cancelable ->  almost_cancelable for multLoopStr_0;
coherence by L142;
cluster  almost_cancelable ->  almost_right_cancelable  almost_left_cancelable for multLoopStr_0;
coherence by L142;
end;
registration
cluster ( Trivial-multLoopStr_0 ) ->  almost_cancelable;
coherence
proof
set D7 = ( Trivial-multLoopStr_0 );
thus L145: D7 is  almost_left_cancelable
proof
let C82 being (Element of D7);
assume L146: C82 <> ( 0. D7 );
let C83 , C84 being (Element of D7);
assume L147: ( C82 * C83 ) = ( C82 * C84 );
thus L148: thesis by STRUCT_0:def 10;
end;

let C85 being (Element of D7);
assume L149: C85 <> ( 0. D7 );
let C86 , C87 being (Element of D7);
assume L150: ( C86 * C85 ) = ( C87 * C85 );
thus L151: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  almost_cancelable  strict 1 -element for multLoopStr_0;
existence
proof
take ( Trivial-multLoopStr_0 );
thus L153: thesis;
end;
end;
definition
let C88 being multLoopStr_0;
attr C88 is  almost_left_invertible
means
(for B23 being (Element of C88) holds (B23 <> ( 0. C88 ) implies B23 is  left_invertible));
attr C88 is  almost_right_invertible
means
(for B24 being (Element of C88) holds (B24 <> ( 0. C88 ) implies B24 is  right_invertible));
end;
definition
let C89 being multLoopStr_0;
attr C89 is  almost_invertible
means
:L156: C89 is  almost_right_invertible  almost_left_invertible;
end;
registration
cluster  almost_right_invertible  almost_left_invertible ->  almost_invertible for multLoopStr_0;
coherence by L156;
cluster  almost_invertible ->  almost_right_invertible  almost_left_invertible for multLoopStr_0;
coherence by L156;
end;
registration
cluster ( Trivial-multLoopStr_0 ) ->  almost_invertible;
coherence
proof
set D8 = ( Trivial-multLoopStr_0 );
thus L159: D8 is  almost_right_invertible
proof
let C90 being (Element of D8);
assume L160: C90 <> ( 0. D8 );
take C90;
thus L161: thesis by STRUCT_0:def 10;
end;

let C91 being (Element of D8);
assume L162: C91 <> ( 0. D8 );
take C91;
thus L163: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  almost_invertible  almost_cancelable  strict 1 -element for multLoopStr_0;
existence
proof
take ( Trivial-multLoopStr_0 );
thus L165: thesis;
end;
end;
begin
definition
struct (addLoopStr , multLoopStr_0) doubleLoopStr(# carrier -> set , addF , multF -> (BinOp of the carrier) , OneF , ZeroF -> (Element of the carrier) #);
end;
registration
let R1 being non  empty set;
let R4 being (BinOp of R1);
let R5 being (BinOp of R1);
let R2 being (Element of R1);
let R3 being (Element of R1);
cluster doubleLoopStr (# R1 , R4 , R5 , R2 , R3 #) -> non  empty;
coherence;
end;
registration
let R6 being  trivial set;
let R9 being (BinOp of R6);
let R10 being (BinOp of R6);
let R7 being (Element of R6);
let R8 being (Element of R6);
cluster doubleLoopStr (# R6 , R9 , R10 , R7 , R8 #) ->  trivial;
coherence;
end;
registration
let R11 being non  trivial set;
let R14 being (BinOp of R11);
let R15 being (BinOp of R11);
let R13 being (Element of R11);
let R12 being (Element of R11);
cluster doubleLoopStr (# R11 , R14 , R15 , R13 , R12 #) -> non  trivial;
coherence;
end;
definition
func Trivial-doubleLoopStr -> doubleLoopStr equals 
doubleLoopStr (# 1 , ( op2 ) , ( op2 ) , ( op0 ) , ( op0 ) #);
coherence;
end;
registration
cluster ( Trivial-doubleLoopStr ) -> 1 -element  strict;
coherence by CARD_1:49;
end;
registration
cluster  strict 1 -element for doubleLoopStr;
existence
proof
take ( Trivial-doubleLoopStr );
thus L173: thesis;
end;
end;
