:: Introduction to Lattice Theory
::  by Stanis{\l}aw \.Zukowski
::
:: Received April 14, 1989
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies STRUCT_0, BINOP_1, XBOOLE_0, ZFMISC_1, SUBSET_1, EQREL_1,
      FUNCT_1, PBOOLE, XXREAL_2, CAT_1, LATTICES, CARD_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, CARD_1, STRUCT_0, BINOP_1;
 constructors BINOP_1, STRUCT_0;
 registrations XBOOLE_0, SUBSET_1, CARD_1, ORDINAL1, STRUCT_0;
 requirements SUBSET, BOOLE, NUMERALS;
 definitions STRUCT_0;
 theorems ZFMISC_1, SUBSET_1, STRUCT_0;

begin
definition
struct (1-sorted) /\-SemiLattStr(# carrier -> set , L_meet -> (BinOp of the carrier) #);
end;
definition
struct (1-sorted) \/-SemiLattStr(# carrier -> set , L_join -> (BinOp of the carrier) #);
end;
definition
struct (/\-SemiLattStr , \/-SemiLattStr) LattStr(# carrier -> set , L_join , L_meet -> (BinOp of the carrier) #);
end;
registration
let C1 being non  empty set;
let C2 being (BinOp of C1);
cluster \/-SemiLattStr (# C1 , C2 #) -> non  empty;
coherence;
cluster /\-SemiLattStr (# C1 , C2 #) -> non  empty;
coherence;
end;
registration
let C3 being non  empty set;
let C4 , C5 being (BinOp of C3);
cluster LattStr (# C3 , C4 , C5 #) -> non  empty;
coherence;
end;
registration
cluster 1 -element  strict for \/-SemiLattStr;
existence
proof
set D1 = the (BinOp of ( bool ( {} ) ));
take D2 = \/-SemiLattStr (# ( bool ( {} ) ) , D1 #);
thus L6: thesis by STRUCT_0:def 19 , ZFMISC_1:1;
end;
cluster 1 -element  strict for /\-SemiLattStr;
existence
proof
set D3 = the (BinOp of ( bool ( {} ) ));
take D4 = /\-SemiLattStr (# ( bool ( {} ) ) , D3 #);
thus L7: thesis by STRUCT_0:def 19 , ZFMISC_1:1;
end;
cluster 1 -element  strict for LattStr;
existence
proof
set D5 = the (BinOp of ( bool ( {} ) ));
take D6 = LattStr (# ( bool ( {} ) ) , D5 , D5 #);
thus L8: thesis by STRUCT_0:def 19 , ZFMISC_1:1;
end;
end;
definition
let C6 being non  empty \/-SemiLattStr;
let C7 , C8 being (Element of C6);
func C7 "\/" C8 -> (Element of C6) equals 
( (the L_join of C6) . (C7 , C8) );
coherence;
end;
definition
let C9 being non  empty /\-SemiLattStr;
let C10 , C11 being (Element of C9);
func C10 "/\" C11 -> (Element of C9) equals 
( (the L_meet of C9) . (C10 , C11) );
coherence;
end;
definition
let C12 being non  empty \/-SemiLattStr;
let C13 , C14 being (Element of C12);
pred C13 [= C14
means
:L12: ( C13 "\/" C14 ) = C14
;end;
L14: (for B1 , B2 being (BinOp of ( bool ( {} ) )) holds (for B3 , B4 being (Element of LattStr (# ( bool ( {} ) ) , B1 , B2 #)) holds B3 = B4))
proof
let C15 , C16 being (BinOp of ( bool ( {} ) ));
let C17 , C18 being (Element of LattStr (# ( bool ( {} ) ) , C15 , C16 #));
L15: C17 = ( {} );
thus L16: thesis by L15;
end;
L17: (for B5 being (BinOp of ( bool ( {} ) )) holds (for B6 , B7 being (Element of \/-SemiLattStr (# ( bool ( {} ) ) , B5 #)) holds B6 = B7))
proof
let C19 being (BinOp of ( bool ( {} ) ));
let C20 , C21 being (Element of \/-SemiLattStr (# ( bool ( {} ) ) , C19 #));
L18: C20 = ( {} );
thus L19: thesis by L18;
end;
L20: (for B8 being (BinOp of ( bool ( {} ) )) holds (for B9 , B10 being (Element of /\-SemiLattStr (# ( bool ( {} ) ) , B8 #)) holds B9 = B10))
proof
let C22 being (BinOp of ( bool ( {} ) ));
let C23 , C24 being (Element of /\-SemiLattStr (# ( bool ( {} ) ) , C22 #));
L21: C23 = ( {} );
thus L22: thesis by L21;
end;
definition
let C25 being non  empty \/-SemiLattStr;
attr C25 is  join-commutative
means
:L23: (for B11 , B12 being (Element of C25) holds ( B11 "\/" B12 ) = ( B12 "\/" B11 ));
attr C25 is  join-associative
means
:L24: (for B13 , B14 , B15 being (Element of C25) holds ( B13 "\/" ( B14 "\/" B15 ) ) = ( ( B13 "\/" B14 ) "\/" B15 ));
end;
definition
let C26 being non  empty /\-SemiLattStr;
attr C26 is  meet-commutative
means
:L26: (for B16 , B17 being (Element of C26) holds ( B16 "/\" B17 ) = ( B17 "/\" B16 ));
attr C26 is  meet-associative
means
:L27: (for B18 , B19 , B20 being (Element of C26) holds ( B18 "/\" ( B19 "/\" B20 ) ) = ( ( B18 "/\" B19 ) "/\" B20 ));
end;
definition
let C27 being non  empty LattStr;
attr C27 is  meet-absorbing
means
:L29: (for B21 , B22 being (Element of C27) holds ( ( B21 "/\" B22 ) "\/" B22 ) = B22);
attr C27 is  join-absorbing
means
:L30: (for B23 , B24 being (Element of C27) holds ( B23 "/\" ( B23 "\/" B24 ) ) = B23);
end;
definition
let C28 being non  empty LattStr;
attr C28 is  Lattice-like
means
:L32: C28 is  join-commutative  join-associative  meet-absorbing  meet-commutative  meet-associative  join-absorbing;
end;
registration
cluster  Lattice-like ->  join-commutative  join-associative  meet-absorbing  meet-commutative  meet-associative  join-absorbing for non  empty non  empty non  empty non  empty LattStr;
coherence by L32;
cluster  join-commutative  join-associative  meet-absorbing  meet-commutative  meet-associative  join-absorbing ->  Lattice-like for non  empty non  empty non  empty non  empty LattStr;
coherence by L32;
end;
registration
cluster  strict  join-commutative  join-associative for non  empty non  empty non  empty non  empty \/-SemiLattStr;
existence
proof
set D7 = the (BinOp of ( bool ( {} ) ));
take D8 = \/-SemiLattStr (# ( bool ( {} ) ) , D7 #);
L35: ((for B25 , B26 being (Element of D8) holds ( B25 "\/" B26 ) = ( B26 "\/" B25 )) & (for B27 , B28 , B29 being (Element of D8) holds ( B27 "\/" ( B28 "\/" B29 ) ) = ( ( B27 "\/" B28 ) "\/" B29 ))) by L17;
thus L36: thesis by L35 , L23 , L24;
end;
cluster  strict  meet-commutative  meet-associative for non  empty non  empty non  empty non  empty /\-SemiLattStr;
existence
proof
set D9 = the (BinOp of ( bool ( {} ) ));
take D10 = /\-SemiLattStr (# ( bool ( {} ) ) , D9 #);
L37: ((for B30 , B31 being (Element of D10) holds ( B30 "/\" B31 ) = ( B31 "/\" B30 )) & (for B32 , B33 , B34 being (Element of D10) holds ( B32 "/\" ( B33 "/\" B34 ) ) = ( ( B32 "/\" B33 ) "/\" B34 ))) by L20;
thus L38: thesis by L37 , L26 , L27;
end;
cluster  strict  Lattice-like for non  empty non  empty non  empty non  empty LattStr;
existence
proof
set D11 = the (BinOp of ( bool ( {} ) ));
take D12 = LattStr (# ( bool ( {} ) ) , D11 , D11 #);
L39: ((for B35 , B36 being (Element of D12) holds ( ( B35 "/\" B36 ) "\/" B36 ) = B36) & (for B37 , B38 being (Element of D12) holds ( B37 "/\" B38 ) = ( B38 "/\" B37 ))) by L14;
L40: ((for B39 , B40 , B41 being (Element of D12) holds ( B39 "/\" ( B40 "/\" B41 ) ) = ( ( B39 "/\" B40 ) "/\" B41 )) & (for B42 , B43 being (Element of D12) holds ( B42 "/\" ( B42 "\/" B43 ) ) = B42)) by L14;
L41: ((for B44 , B45 being (Element of D12) holds ( B44 "\/" B45 ) = ( B45 "\/" B44 )) & (for B46 , B47 , B48 being (Element of D12) holds ( B46 "\/" ( B47 "\/" B48 ) ) = ( ( B46 "\/" B47 ) "\/" B48 ))) by L14;
L42: D12 is  join-commutative  join-associative  meet-absorbing  meet-commutative  meet-associative  join-absorbing by L41 , L39 , L40 , L23 , L24 , L26 , L27 , L29 , L30;
thus L43: thesis by L42;
end;
end;
definition
mode Lattice
 is  Lattice-like non  empty LattStr;
end;
definition
let C29 being  join-commutative non  empty \/-SemiLattStr;
let C30 , C31 being (Element of C29);
redefine func C30 "\/" C31;

commutativity
 by L23;
end;
definition
let C32 being  meet-commutative non  empty /\-SemiLattStr;
let C33 , C34 being (Element of C32);
redefine func C33 "/\" C34;

commutativity
 by L26;
end;
definition
let C35 being non  empty LattStr;
attr C35 is  distributive
means
:L48: (for B49 , B50 , B51 being (Element of C35) holds ( B49 "/\" ( B50 "\/" B51 ) ) = ( ( B49 "/\" B50 ) "\/" ( B49 "/\" B51 ) ));
end;
definition
let C36 being non  empty LattStr;
attr C36 is  modular
means
:L50: (for B52 , B53 , B54 being (Element of C36) holds (B52 [= B54 implies ( B52 "\/" ( B53 "/\" B54 ) ) = ( ( B52 "\/" B53 ) "/\" B54 )));
end;
definition
let C37 being non  empty /\-SemiLattStr;
attr C37 is  lower-bounded
means
:L52: (ex B55 being (Element of C37) st (for B56 being (Element of C37) holds (( B55 "/\" B56 ) = B55 & ( B56 "/\" B55 ) = B55)));
end;
definition
let C38 being non  empty \/-SemiLattStr;
attr C38 is  upper-bounded
means
:L54: (ex B57 being (Element of C38) st (for B58 being (Element of C38) holds (( B57 "\/" B58 ) = B57 & ( B58 "\/" B57 ) = B57)));
end;
L56: (for B59 , B60 being (BinOp of ( bool ( {} ) )) holds LattStr (# ( bool ( {} ) ) , B59 , B60 #) is Lattice)
proof
let C39 , C40 being (BinOp of ( bool ( {} ) ));
set D13 = LattStr (# ( bool ( {} ) ) , C39 , C40 #);
L57: (for B61 , B62 , B63 being (Element of D13) holds ( B61 "\/" ( B62 "\/" B63 ) ) = ( ( B61 "\/" B62 ) "\/" B63 )) by L14;
L58: D13 is  join-associative by L57 , L24;
L59: (for B64 , B65 being (Element of D13) holds ( ( B64 "/\" B65 ) "\/" B65 ) = B65) by L14;
L60: D13 is  meet-absorbing by L59 , L29;
L61: (for B66 , B67 being (Element of D13) holds ( B66 "/\" ( B66 "\/" B67 ) ) = B66) by L14;
L62: D13 is  join-absorbing by L61 , L30;
L63: (for B68 , B69 , B70 being (Element of D13) holds ( B68 "/\" ( B69 "/\" B70 ) ) = ( ( B68 "/\" B69 ) "/\" B70 )) by L14;
L64: D13 is  meet-associative by L63 , L27;
L65: (for B71 , B72 being (Element of D13) holds ( B71 "/\" B72 ) = ( B72 "/\" B71 )) by L14;
L66: D13 is  meet-commutative by L65 , L26;
L67: (for B73 , B74 being (Element of D13) holds ( B73 "\/" B74 ) = ( B74 "\/" B73 )) by L14;
L68: D13 is  join-commutative by L67 , L23;
thus L69: thesis by L68 , L58 , L60 , L66 , L64 , L62;
end;
registration
cluster  strict  distributive  lower-bounded  upper-bounded  modular for Lattice;
existence
proof
set D14 = the (BinOp of ( bool ( {} ) ));
set D15 = LattStr (# ( bool ( {} ) ) , D14 , D14 #);
reconsider D16 = D15 as Lattice by L56;
reconsider D17 = ( {} ) , D18 = ( {} ) as (Element of D16) by ZFMISC_1:def 1;
L70: (for B75 being (Element of D16) holds (( D17 "/\" B75 ) = D17 & ( B75 "/\" D17 ) = D17));
L71: D16 is  lower-bounded by L70 , L52;
L72: (for B76 being (Element of D16) holds (( D18 "\/" B76 ) = D18 & ( B76 "\/" D18 ) = D18));
L73: D16 is  upper-bounded by L72 , L54;
L74: (for B77 , B78 , B79 being (Element of D16) holds ( B77 "/\" ( B78 "\/" B79 ) ) = ( ( B77 "/\" B78 ) "\/" ( B77 "/\" B79 ) )) by L14;
L75: D16 is  distributive by L74 , L48;
L76: (for B80 , B81 , B82 being (Element of D16) holds (B80 [= B82 implies ( B80 "\/" ( B81 "/\" B82 ) ) = ( ( B80 "\/" B81 ) "/\" B82 ))) by L14;
L77: D16 is  modular by L76 , L50;
thus L78: thesis by L77 , L71 , L75 , L73;
end;
end;
definition
mode D_Lattice
 is  distributive Lattice;
mode M_Lattice
 is  modular Lattice;
mode 0_Lattice
 is  lower-bounded Lattice;
mode 1_Lattice
 is  upper-bounded Lattice;
end;
L81: (for B83 , B84 being (BinOp of ( bool ( {} ) )) holds LattStr (# ( bool ( {} ) ) , B83 , B84 #) is 0_Lattice)
proof
let C41 , C42 being (BinOp of ( bool ( {} ) ));
set D19 = LattStr (# ( bool ( {} ) ) , C41 , C42 #);
reconsider D20 = D19 as Lattice by L56;
reconsider D21 = ( {} ) as (Element of D20) by ZFMISC_1:def 1;
L82: (for B85 being (Element of D20) holds (( D21 "/\" B85 ) = D21 & ( B85 "/\" D21 ) = D21));
thus L83: thesis by L82 , L52;
end;
L84: (for B86 , B87 being (BinOp of ( bool ( {} ) )) holds LattStr (# ( bool ( {} ) ) , B86 , B87 #) is 1_Lattice)
proof
let C43 , C44 being (BinOp of ( bool ( {} ) ));
set D22 = LattStr (# ( bool ( {} ) ) , C43 , C44 #);
reconsider D23 = D22 as Lattice by L56;
reconsider D24 = ( {} ) as (Element of D23) by ZFMISC_1:def 1;
L85: (for B88 being (Element of D23) holds (( D24 "\/" B88 ) = D24 & ( B88 "\/" D24 ) = D24));
thus L86: thesis by L85 , L54;
end;
definition
let C45 being non  empty LattStr;
attr C45 is  bounded
means
:L87: C45 is  lower-bounded  upper-bounded;
end;
registration
cluster  lower-bounded  upper-bounded ->  bounded for non  empty non  empty non  empty non  empty LattStr;
coherence by L87;
cluster  bounded ->  lower-bounded  upper-bounded for non  empty non  empty non  empty non  empty LattStr;
coherence by L87;
end;
registration
cluster  bounded  strict for Lattice;
existence
proof
set D25 = the (BinOp of ( bool ( {} ) ));
set D26 = LattStr (# ( bool ( {} ) ) , D25 , D25 #);
reconsider D27 = D26 as Lattice by L56;
L90: (D27 is 0_Lattice & D27 is 1_Lattice) by L81 , L84;
thus L91: thesis by L90;
end;
end;
definition
mode 01_Lattice
 is  bounded Lattice;
end;
definition
let C46 being non  empty /\-SemiLattStr;
assume L94: C46 is  lower-bounded;
func Bottom C46 -> (Element of C46) means 
:L95: (for B89 being (Element of C46) holds (( it "/\" B89 ) = it & ( B89 "/\" it ) = it));
existence by L94 , L52;
uniqueness
proof
let C47 , C48 being (Element of C46);
assume that
L96: (for B90 being (Element of C46) holds (( C47 "/\" B90 ) = C47 & ( B90 "/\" C47 ) = C47))
and
L97: (for B91 being (Element of C46) holds (( C48 "/\" B91 ) = C48 & ( B91 "/\" C48 ) = C48));
thus L98: C47 = ( C48 "/\" C47 ) by L96
.= C48 by L97;
end;
end;
definition
let C49 being non  empty \/-SemiLattStr;
assume L100: C49 is  upper-bounded;
func Top C49 -> (Element of C49) means 
:L101: (for B92 being (Element of C49) holds (( it "\/" B92 ) = it & ( B92 "\/" it ) = it));
existence by L100 , L54;
uniqueness
proof
let C50 , C51 being (Element of C49);
assume that
L102: (for B93 being (Element of C49) holds (( C50 "\/" B93 ) = C50 & ( B93 "\/" C50 ) = C50))
and
L103: (for B94 being (Element of C49) holds (( C51 "\/" B94 ) = C51 & ( B94 "\/" C51 ) = C51));
thus L104: C50 = ( C51 "\/" C50 ) by L102
.= C51 by L103;
end;
end;
definition
let C52 being non  empty LattStr;
let C53 , C54 being (Element of C52);
pred C53 is_a_complement_of C54
means
:L106: (( C53 "\/" C54 ) = ( Top C52 ) & ( C54 "\/" C53 ) = ( Top C52 ) & ( C53 "/\" C54 ) = ( Bottom C52 ) & ( C54 "/\" C53 ) = ( Bottom C52 ))
;end;
definition
let C55 being non  empty LattStr;
attr C55 is  complemented
means
:L108: (for B95 being (Element of C55) holds (ex B96 being (Element of C55) st B96 is_a_complement_of B95));
end;
registration
cluster  bounded  complemented  strict for Lattice;
existence
proof
set D28 = the (BinOp of ( bool ( {} ) ));
reconsider D29 = LattStr (# ( bool ( {} ) ) , D28 , D28 #) as  strict Lattice by L56;
take D29;
L110: (D29 is 0_Lattice & D29 is 1_Lattice) by L81 , L84;
thus L111: D29 is  bounded by L110;
thus L112: D29 is  complemented
proof
set D30 = the (Element of D29);
let C56 being (Element of D29);
take D30;
thus L113: (( D30 "\/" C56 ) = ( Top D29 ) & ( C56 "\/" D30 ) = ( Top D29 )) by L14;
thus L114: (( D30 "/\" C56 ) = ( Bottom D29 ) & ( C56 "/\" D30 ) = ( Bottom D29 )) by L14;
end;

thus L115: thesis;
end;
end;
definition
mode C_Lattice
 is  complemented 01_Lattice;
end;
definition
let C57 being non  empty LattStr;
attr C57 is  Boolean
means
:L118: C57 is  bounded  complemented  distributive;
end;
registration
cluster  Boolean ->  bounded  complemented  distributive for non  empty non  empty non  empty non  empty LattStr;
coherence by L118;
cluster  bounded  complemented  distributive ->  Boolean for non  empty non  empty non  empty non  empty LattStr;
coherence by L118;
end;
registration
cluster  Boolean  strict for Lattice;
existence
proof
set D31 = the (BinOp of ( bool ( {} ) ));
reconsider D32 = LattStr (# ( bool ( {} ) ) , D31 , D31 #) as  strict Lattice by L56;
L121: D32 is  complemented
proof
let C58 being (Element of D32);
take C58;
thus L122: (( C58 "\/" C58 ) = ( Top D32 ) & ( C58 "\/" C58 ) = ( Top D32 )) by L14;
thus L123: (( C58 "/\" C58 ) = ( Bottom D32 ) & ( C58 "/\" C58 ) = ( Bottom D32 )) by L14;
end;
L124: (D32 is 0_Lattice & D32 is 1_Lattice) by L81 , L84;
reconsider D33 = D32 as C_Lattice by L124 , L121;
L125: (for B97 , B98 , B99 being (Element of D33) holds ( B97 "/\" ( B98 "\/" B99 ) ) = ( ( B97 "/\" B98 ) "\/" ( B97 "/\" B99 ) )) by L14;
L126: D33 is  distributive by L125 , L48;
thus L127: thesis by L126;
end;
end;
definition
mode B_Lattice
 is  Boolean Lattice;
end;
registration
let C59 being  meet-absorbing  join-absorbing  meet-commutative non  empty LattStr;
let C60 being (Element of C59);
reduce ( C60 "\/" C60 ) to C60;
reducibility
proof
thus L130: ( C60 "\/" C60 ) = ( ( C60 "/\" ( C60 "\/" C60 ) ) "\/" C60 ) by L30
.= C60 by L29;
end;
end;
registration
let C61 being  meet-absorbing  join-absorbing  meet-commutative non  empty LattStr;
let C62 being (Element of C61);
reduce ( C62 "/\" C62 ) to C62;
reducibility
proof
L132: ( C62 "/\" ( C62 "\/" C62 ) ) = C62 by L30;
thus L133: thesis by L132;
end;
end;
canceled 2;
theorem
L135: (for B100 being Lattice holds ((for B101 , B102 , B103 being (Element of B100) holds ( B101 "/\" ( B102 "\/" B103 ) ) = ( ( B101 "/\" B102 ) "\/" ( B101 "/\" B103 ) )) iff (for B104 , B105 , B106 being (Element of B100) holds ( B104 "\/" ( B105 "/\" B106 ) ) = ( ( B104 "\/" B105 ) "/\" ( B104 "\/" B106 ) ))))
proof
let C63 being Lattice;
thus L136:now
assume L137: (for B107 , B108 , B109 being (Element of C63) holds ( B107 "/\" ( B108 "\/" B109 ) ) = ( ( B107 "/\" B108 ) "\/" ( B107 "/\" B109 ) ));
let C64 , C65 , C66 being (Element of C63);
thus L138: ( C64 "\/" ( C65 "/\" C66 ) ) = ( ( C64 "\/" ( C66 "/\" C64 ) ) "\/" ( C66 "/\" C65 ) ) by L29
.= ( C64 "\/" ( ( C66 "/\" C64 ) "\/" ( C66 "/\" C65 ) ) ) by L24
.= ( C64 "\/" ( ( C64 "\/" C65 ) "/\" C66 ) ) by L137
.= ( ( ( C64 "\/" C65 ) "/\" C64 ) "\/" ( ( C64 "\/" C65 ) "/\" C66 ) ) by L30
.= ( ( C64 "\/" C65 ) "/\" ( C64 "\/" C66 ) ) by L137;
end;
assume L139: (for B110 , B111 , B112 being (Element of C63) holds ( B110 "\/" ( B111 "/\" B112 ) ) = ( ( B110 "\/" B111 ) "/\" ( B110 "\/" B112 ) ));
let C67 , C68 , C69 being (Element of C63);
thus L140: ( C67 "/\" ( C68 "\/" C69 ) ) = ( ( C67 "/\" ( C69 "\/" C67 ) ) "/\" ( C69 "\/" C68 ) ) by L30
.= ( C67 "/\" ( ( C69 "\/" C67 ) "/\" ( C69 "\/" C68 ) ) ) by L27
.= ( C67 "/\" ( ( C67 "/\" C68 ) "\/" C69 ) ) by L139
.= ( ( ( C67 "/\" C68 ) "\/" C67 ) "/\" ( ( C67 "/\" C68 ) "\/" C69 ) ) by L29
.= ( ( C67 "/\" C68 ) "\/" ( C67 "/\" C69 ) ) by L139;
end;
theorem
L141: (for B113 being  meet-absorbing  join-absorbing non  empty LattStr holds (for B114 , B115 being (Element of B113) holds (B114 [= B115 iff ( B114 "/\" B115 ) = B114)))
proof
let C70 being  meet-absorbing  join-absorbing non  empty LattStr;
let C71 , C72 being (Element of C70);
L142: (C71 [= C72 iff ( C71 "\/" C72 ) = C72) by L12;
thus L143: thesis by L142 , L29 , L30;
end;
theorem
L144: (for B116 being  meet-absorbing  join-absorbing  join-associative  meet-commutative non  empty LattStr holds (for B117 , B118 being (Element of B116) holds B117 [= ( B117 "\/" B118 )))
proof
let C73 being  meet-absorbing  join-absorbing  join-associative  meet-commutative non  empty LattStr;
let C74 , C75 being (Element of C73);
thus L145: ( C74 "\/" ( C74 "\/" C75 ) ) = ( ( C74 "\/" C74 ) "\/" C75 ) by L24
.= ( C74 "\/" C75 );
end;
theorem
L146: (for B119 being  meet-absorbing  meet-commutative non  empty LattStr holds (for B120 , B121 being (Element of B119) holds ( B120 "/\" B121 ) [= B120))
proof
let C76 being  meet-absorbing  meet-commutative non  empty LattStr;
let C77 , C78 being (Element of C76);
thus L147: ( ( C77 "/\" C78 ) "\/" C77 ) = C77 by L29;
end;
definition
let C79 being  meet-absorbing  join-absorbing  meet-commutative non  empty LattStr;
let C80 , C81 being (Element of C79);
redefine pred C80 [= C81
;
reflexivity
proof
let C82 being (Element of C79);
thus L148: ( C82 "\/" C82 ) = C82;
end;
end;
theorem
L150: (for B122 being  join-associative non  empty \/-SemiLattStr holds (for B123 , B124 , B125 being (Element of B122) holds ((B123 [= B124 & B124 [= B125) implies B123 [= B125)))
proof
let C83 being  join-associative non  empty \/-SemiLattStr;
let C84 , C85 , C86 being (Element of C83);
assume L151: (( C84 "\/" C85 ) = C85 & ( C85 "\/" C86 ) = C86);
thus L152: ( C84 "\/" C86 ) = C86 by L151 , L24;
end;
theorem
L153: (for B126 being  join-commutative non  empty \/-SemiLattStr holds (for B127 , B128 being (Element of B126) holds ((B127 [= B128 & B128 [= B127) implies B127 = B128)))
proof
let C87 being  join-commutative non  empty \/-SemiLattStr;
let C88 , C89 being (Element of C87);
assume L154: (( C88 "\/" C89 ) = C89 & ( C89 "\/" C88 ) = C88);
thus L155: thesis by L154;
end;
theorem
L156: (for B129 being  meet-absorbing  join-absorbing  meet-associative non  empty LattStr holds (for B130 , B131 , B132 being (Element of B129) holds (B130 [= B131 implies ( B130 "/\" B132 ) [= ( B131 "/\" B132 ))))
proof
let C90 being  meet-absorbing  join-absorbing  meet-associative non  empty LattStr;
let C91 , C92 , C93 being (Element of C90);
assume L157: C91 [= C92;
thus L158: ( ( C91 "/\" C93 ) "\/" ( C92 "/\" C93 ) ) = ( ( ( C91 "/\" C92 ) "/\" C93 ) "\/" ( C92 "/\" C93 ) ) by L157 , L141
.= ( ( C91 "/\" ( C92 "/\" C93 ) ) "\/" ( C92 "/\" C93 ) ) by L27
.= ( C92 "/\" C93 ) by L29;
end;
theorem
L159: (for B133 being Lattice holds ((for B134 , B135 , B136 being (Element of B133) holds ( ( ( B134 "/\" B135 ) "\/" ( B135 "/\" B136 ) ) "\/" ( B136 "/\" B134 ) ) = ( ( ( B134 "\/" B135 ) "/\" ( B135 "\/" B136 ) ) "/\" ( B136 "\/" B134 ) )) implies B133 is  distributive))
proof
let C94 being Lattice;
assume L160: (for B137 , B138 , B139 being (Element of C94) holds ( ( ( B137 "/\" B138 ) "\/" ( B138 "/\" B139 ) ) "\/" ( B139 "/\" B137 ) ) = ( ( ( B137 "\/" B138 ) "/\" ( B138 "\/" B139 ) ) "/\" ( B139 "\/" B137 ) ));
L161:
now
let C95 , C96 , C97 being (Element of C94);
assume L162: C97 [= C95;
thus L163: ( C95 "/\" ( C96 "\/" C97 ) ) = ( ( C96 "\/" C97 ) "/\" ( C95 "/\" ( C95 "\/" C96 ) ) ) by L30
.= ( ( C95 "\/" C96 ) "/\" ( ( C96 "\/" C97 ) "/\" C95 ) ) by L27
.= ( ( C95 "\/" C96 ) "/\" ( ( C96 "\/" C97 ) "/\" ( C97 "\/" C95 ) ) ) by L162 , L12
.= ( ( ( C95 "\/" C96 ) "/\" ( C96 "\/" C97 ) ) "/\" ( C97 "\/" C95 ) ) by L27
.= ( ( ( C95 "/\" C96 ) "\/" ( C96 "/\" C97 ) ) "\/" ( C97 "/\" C95 ) ) by L160
.= ( ( C95 "/\" C96 ) "\/" ( ( C96 "/\" C97 ) "\/" ( C97 "/\" C95 ) ) ) by L24
.= ( ( C95 "/\" C96 ) "\/" ( ( C96 "/\" C97 ) "\/" C97 ) ) by L162 , L141
.= ( ( C95 "/\" C96 ) "\/" C97 ) by L29;
end;
let C98 , C99 , C100 being (Element of C94);
L164: ( ( ( C98 "/\" C99 ) "\/" ( C100 "/\" C98 ) ) "\/" C98 ) = ( ( C98 "/\" C99 ) "\/" ( ( C100 "/\" C98 ) "\/" C98 ) ) by L24
.= ( ( C98 "/\" C99 ) "\/" C98 ) by L29
.= C98 by L29;
thus L165: ( C98 "/\" ( C99 "\/" C100 ) ) = ( ( C98 "/\" ( C100 "\/" C98 ) ) "/\" ( C99 "\/" C100 ) ) by L30
.= ( C98 "/\" ( ( C100 "\/" C98 ) "/\" ( C99 "\/" C100 ) ) ) by L27
.= ( ( C98 "/\" ( C98 "\/" C99 ) ) "/\" ( ( C100 "\/" C98 ) "/\" ( C99 "\/" C100 ) ) ) by L30
.= ( C98 "/\" ( ( C98 "\/" C99 ) "/\" ( ( C99 "\/" C100 ) "/\" ( C100 "\/" C98 ) ) ) ) by L27
.= ( C98 "/\" ( ( ( C98 "\/" C99 ) "/\" ( C99 "\/" C100 ) ) "/\" ( C100 "\/" C98 ) ) ) by L27
.= ( C98 "/\" ( ( ( C99 "/\" C100 ) "\/" ( C98 "/\" C99 ) ) "\/" ( C100 "/\" C98 ) ) ) by L160
.= ( C98 "/\" ( ( C99 "/\" C100 ) "\/" ( ( C98 "/\" C99 ) "\/" ( C100 "/\" C98 ) ) ) ) by L24
.= ( ( C98 "/\" ( C99 "/\" C100 ) ) "\/" ( ( C98 "/\" C99 ) "\/" ( C100 "/\" C98 ) ) ) by L161 , L164 , L12
.= ( ( ( C98 "/\" C99 ) "/\" C100 ) "\/" ( ( C98 "/\" C99 ) "\/" ( C100 "/\" C98 ) ) ) by L27
.= ( ( ( ( C98 "/\" C99 ) "/\" C100 ) "\/" ( C98 "/\" C99 ) ) "\/" ( C100 "/\" C98 ) ) by L24
.= ( ( C98 "/\" C99 ) "\/" ( C98 "/\" C100 ) ) by L29;
end;
theorem
L166: (for R1 being D_Lattice holds (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( R2 "\/" ( R3 "/\" R4 ) ) = ( ( R2 "\/" R3 ) "/\" ( R2 "\/" R4 ) )))))
proof
let R1 being D_Lattice;
let R2 being (Element of R1);
let R3 being (Element of R1);
let R4 being (Element of R1);
L167: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( R2 "/\" ( R3 "\/" R4 ) ) = ( ( R2 "/\" R3 ) "\/" ( R2 "/\" R4 ) )))) by L48;
thus L168: thesis by L167 , L135;
end;
theorem
L169: (for R1 being D_Lattice holds (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ((( R4 "/\" R2 ) = ( R4 "/\" R3 ) & ( R4 "\/" R2 ) = ( R4 "\/" R3 )) implies R2 = R3)))))
proof
let R1 being D_Lattice;
let R2 being (Element of R1);
let R3 being (Element of R1);
let R4 being (Element of R1);
assume that
L170: ( R4 "/\" R2 ) = ( R4 "/\" R3 )
and
L171: ( R4 "\/" R2 ) = ( R4 "\/" R3 );
thus L172: R2 = ( R2 "/\" ( R4 "\/" R2 ) ) by L30
.= ( ( R3 "/\" R4 ) "\/" ( R3 "/\" R2 ) ) by L170 , L171 , L48
.= ( R3 "/\" ( R4 "\/" R2 ) ) by L48
.= R3 by L171 , L30;
end;
theorem
L173: (for R1 being D_Lattice holds (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) "/\" ( R4 "\/" R2 ) ) = ( ( ( R2 "/\" R3 ) "\/" ( R3 "/\" R4 ) ) "\/" ( R4 "/\" R2 ) )))))
proof
let R1 being D_Lattice;
let R2 being (Element of R1);
let R3 being (Element of R1);
let R4 being (Element of R1);
thus L174: ( ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) "/\" ( R4 "\/" R2 ) ) = ( ( ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) "/\" R4 ) "\/" ( ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) "/\" R2 ) ) by L48
.= ( ( ( R2 "\/" R3 ) "/\" ( ( R3 "\/" R4 ) "/\" R4 ) ) "\/" ( ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) "/\" R2 ) ) by L27
.= ( ( ( R2 "\/" R3 ) "/\" R4 ) "\/" ( R2 "/\" ( ( R2 "\/" R3 ) "/\" ( R3 "\/" R4 ) ) ) ) by L30
.= ( ( ( R2 "\/" R3 ) "/\" R4 ) "\/" ( ( R2 "/\" ( R2 "\/" R3 ) ) "/\" ( R3 "\/" R4 ) ) ) by L27
.= ( ( R4 "/\" ( R2 "\/" R3 ) ) "\/" ( R2 "/\" ( R3 "\/" R4 ) ) ) by L30
.= ( ( ( R4 "/\" R2 ) "\/" ( R4 "/\" R3 ) ) "\/" ( R2 "/\" ( R3 "\/" R4 ) ) ) by L48
.= ( ( ( R2 "/\" R3 ) "\/" ( R4 "/\" R2 ) ) "\/" ( ( R4 "/\" R2 ) "\/" ( R3 "/\" R4 ) ) ) by L48
.= ( ( R2 "/\" R3 ) "\/" ( ( R4 "/\" R2 ) "\/" ( ( R4 "/\" R2 ) "\/" ( R3 "/\" R4 ) ) ) ) by L24
.= ( ( R2 "/\" R3 ) "\/" ( ( ( R4 "/\" R2 ) "\/" ( R4 "/\" R2 ) ) "\/" ( R3 "/\" R4 ) ) ) by L24
.= ( ( ( R2 "/\" R3 ) "\/" ( R3 "/\" R4 ) ) "\/" ( R4 "/\" R2 ) ) by L24;
end;
registration
cluster  distributive ->  modular for Lattice;
coherence
proof
let C101 being Lattice;
assume L175: C101 is  distributive;
let C102 , C103 , C104 being (Element of C101);
assume L176: ( C102 "\/" C104 ) = C104;
thus L177: ( C102 "\/" ( C103 "/\" C104 ) ) = ( ( C102 "\/" C103 ) "/\" C104 ) by L176 , L175 , L166;
end;
end;
registration
let C105 being 0_Lattice;
let C106 being (Element of C105);
reduce ( ( Bottom C105 ) "\/" C106 ) to C106;
reducibility
proof
thus L179: ( ( Bottom C105 ) "\/" C106 ) = ( ( ( Bottom C105 ) "/\" C106 ) "\/" C106 ) by L95
.= C106 by L29;
end;
reduce ( ( Bottom C105 ) "/\" C106 ) to ( Bottom C105 );
reducibility by L95;
end;
theorem
L181: (for B140 being 0_Lattice holds (for B141 being (Element of B140) holds ( ( Bottom B140 ) "\/" B141 ) = B141));
theorem
L182: (for B142 being 0_Lattice holds (for B143 being (Element of B142) holds ( ( Bottom B142 ) "/\" B143 ) = ( Bottom B142 )));
theorem
L183: (for B144 being 0_Lattice holds (for B145 being (Element of B144) holds ( Bottom B144 ) [= B145))
proof
let C107 being 0_Lattice;
let C108 being (Element of C107);
L184: ( Bottom C107 ) [= ( ( Bottom C107 ) "\/" C108 ) by L144;
thus L185: thesis by L184;
end;
registration
let C109 being 1_Lattice;
let C110 being (Element of C109);
reduce ( ( Top C109 ) "/\" C110 ) to C110;
reducibility
proof
thus L186: ( ( Top C109 ) "/\" C110 ) = ( ( ( Top C109 ) "\/" C110 ) "/\" C110 ) by L101
.= C110 by L30;
end;
reduce ( ( Top C109 ) "\/" C110 ) to ( Top C109 );
reducibility by L101;
end;
theorem
L188: (for B146 being 1_Lattice holds (for B147 being (Element of B146) holds ( ( Top B146 ) "/\" B147 ) = B147));
theorem
L189: (for B148 being 1_Lattice holds (for B149 being (Element of B148) holds ( ( Top B148 ) "\/" B149 ) = ( Top B148 )));
theorem
L190: (for B150 being 1_Lattice holds (for B151 being (Element of B150) holds B151 [= ( Top B150 )))
proof
let C111 being 1_Lattice;
let C112 being (Element of C111);
L191: ( ( Top C111 ) "/\" C112 ) [= ( Top C111 ) by L146;
thus L192: thesis by L191;
end;
definition
let C113 being non  empty LattStr;
let C114 being (Element of C113);
assume L193: C113 is  complemented  complemented  complemented  complemented D_Lattice;
func C114 ` -> (Element of C113) means 
:L194: it is_a_complement_of C114;
existence by L193 , L108;
uniqueness
proof
let C115 , C116 being (Element of C113);
assume that
L195: C115 is_a_complement_of C114
and
L196: C116 is_a_complement_of C114;
L197: (( C114 "\/" C116 ) = ( Top C113 ) & ( C114 "/\" C116 ) = ( Bottom C113 )) by L196 , L106;
L198: (( C114 "\/" C115 ) = ( Top C113 ) & ( C114 "/\" C115 ) = ( Bottom C113 )) by L195 , L106;
thus L199: thesis by L198 , L193 , L197 , L169;
end;
end;
theorem
L201: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds ( ( R6 ` ) "/\" R6 ) = ( Bottom R5 )))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
L202: ( R6 ` ) is_a_complement_of R6 by L194;
thus L203: thesis by L202 , L106;
end;
theorem
L204: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds ( ( R6 ` ) "\/" R6 ) = ( Top R5 )))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
L205: ( R6 ` ) is_a_complement_of R6 by L194;
thus L206: thesis by L205 , L106;
end;
registration
let R5 being B_Lattice;
let R6 being (Element of R5);
reduce ( ( R6 ` ) ` ) to R6;
reducibility
proof
L207: ( R6 ` ) is_a_complement_of R6 by L194;
L208: (( R6 "\/" ( R6 ` ) ) = ( Top R5 ) & ( R6 "/\" ( R6 ` ) ) = ( Bottom R5 )) by L207 , L106;
L209: ( ( R6 ` ) ` ) is_a_complement_of ( R6 ` ) by L194;
L210: (( ( ( R6 ` ) ` ) "\/" ( R6 ` ) ) = ( Top R5 ) & ( ( ( R6 ` ) ` ) "/\" ( R6 ` ) ) = ( Bottom R5 )) by L209 , L106;
thus L211: thesis by L210 , L208 , L169;
end;
end;
theorem
L213: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds ( ( R6 ` ) ` ) = R6));
theorem
L214: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds (for R7 being (Element of R5) holds ( ( R6 "/\" R7 ) ` ) = ( ( R6 ` ) "\/" ( R7 ` ) ))))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
let R7 being (Element of R5);
L215: ( ( ( R6 ` ) "\/" ( R7 ` ) ) "/\" ( R6 "/\" R7 ) ) = ( ( ( ( R6 ` ) "\/" ( R7 ` ) ) "/\" R6 ) "/\" R7 ) by L27
.= ( ( ( ( R6 ` ) "/\" R6 ) "\/" ( ( R7 ` ) "/\" R6 ) ) "/\" R7 ) by L48
.= ( ( ( Bottom R5 ) "\/" ( ( R7 ` ) "/\" R6 ) ) "/\" R7 ) by L201
.= ( ( R7 "/\" ( R7 ` ) ) "/\" R6 ) by L27
.= ( ( Bottom R5 ) "/\" R6 ) by L201
.= ( Bottom R5 );
L216: ( ( ( R6 ` ) "\/" ( R7 ` ) ) "\/" ( R6 "/\" R7 ) ) = ( ( R6 ` ) "\/" ( ( R7 ` ) "\/" ( R6 "/\" R7 ) ) ) by L24
.= ( ( R6 ` ) "\/" ( ( ( R7 ` ) "\/" R6 ) "/\" ( ( R7 ` ) "\/" R7 ) ) ) by L166
.= ( ( R6 ` ) "\/" ( ( ( R7 ` ) "\/" R6 ) "/\" ( Top R5 ) ) ) by L204
.= ( ( R7 ` ) "\/" ( R6 "\/" ( R6 ` ) ) ) by L24
.= ( ( R7 ` ) "\/" ( Top R5 ) ) by L204
.= ( Top R5 );
L217: ( ( R6 ` ) "\/" ( R7 ` ) ) is_a_complement_of ( R6 "/\" R7 ) by L216 , L215 , L106;
thus L218: thesis by L217 , L194;
end;
theorem
L219: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds (for R7 being (Element of R5) holds ( ( R6 "\/" R7 ) ` ) = ( ( R6 ` ) "/\" ( R7 ` ) ))))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
let R7 being (Element of R5);
thus L220: ( ( R6 "\/" R7 ) ` ) = ( ( ( ( R6 ` ) ` ) "\/" ( ( R7 ` ) ` ) ) ` )
.= ( ( ( ( R6 ` ) "/\" ( R7 ` ) ) ` ) ` ) by L214
.= ( ( R6 ` ) "/\" ( R7 ` ) );
end;
theorem
L221: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds (for R7 being (Element of R5) holds (( R7 "/\" R6 ) = ( Bottom R5 ) iff R7 [= ( R6 ` )))))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
let R7 being (Element of R5);
thus L222: (( R7 "/\" R6 ) = ( Bottom R5 ) implies R7 [= ( R6 ` ))
proof
assume L223: ( R7 "/\" R6 ) = ( Bottom R5 );
L224: R7 = ( R7 "/\" ( Top R5 ) )
.= ( R7 "/\" ( R6 "\/" ( R6 ` ) ) ) by L204
.= ( ( Bottom R5 ) "\/" ( R7 "/\" ( R6 ` ) ) ) by L223 , L48
.= ( R7 "/\" ( R6 ` ) );
L225: ( R7 "\/" ( R6 ` ) ) = ( R6 ` ) by L224 , L29;
thus L226: thesis by L225 , L12;
end;

thus L227: thesis
proof
assume L228: R7 [= ( R6 ` );
L229: ( R7 "/\" R6 ) [= ( ( R6 ` ) "/\" R6 ) by L228 , L156;
L230: ( R7 "/\" R6 ) [= ( Bottom R5 ) by L229 , L201;
L231: ( Bottom R5 ) [= ( R7 "/\" R6 ) by L183;
thus L232: thesis by L231 , L230 , L153;
end;

end;
theorem
L228: (for R5 being B_Lattice holds (for R6 being (Element of R5) holds (for R7 being (Element of R5) holds (R6 [= R7 implies ( R7 ` ) [= ( R6 ` )))))
proof
let R5 being B_Lattice;
let R6 being (Element of R5);
let R7 being (Element of R5);
assume L229: R6 [= R7;
L230: ( ( R7 ` ) "/\" R6 ) [= ( ( R7 ` ) "/\" R7 ) by L229 , L156;
L231: ( ( R7 ` ) "/\" R6 ) [= ( Bottom R5 ) by L230 , L201;
L232: ( Bottom R5 ) [= ( ( R7 ` ) "/\" R6 ) by L183;
L233: ( ( R7 ` ) "/\" R6 ) = ( Bottom R5 ) by L232 , L231 , L153;
thus L234: thesis by L233 , L221;
end;
begin
definition
let C117 being Lattice;
let C118 being (Subset of C117);
attr C118 is  initial
means
:L235: (for B152 , B153 being (Element of C117) holds ((B152 [= B153 & B153 in C118) implies B152 in C118));
attr C118 is  final
means
:L236: (for B154 , B155 being (Element of C117) holds ((B154 [= B155 & B154 in C118) implies B155 in C118));
attr C118 is  meet-closed
means
(for B156 , B157 being (Element of C117) holds ((B156 in C118 & B157 in C118) implies ( B156 "/\" B157 ) in C118));
attr C118 is  join-closed
means
(for B158 , B159 being (Element of C117) holds ((B158 in C118 & B159 in C118) implies ( B158 "\/" B159 ) in C118));
end;
registration
let C119 being Lattice;
cluster ( [#] C119 ) ->  initial  final non  empty;
coherence
proof
thus L238: ( [#] C119 ) is  initial
proof
let C120 , C121 being (Element of C119);
thus L239: thesis;
end;

thus L240: ( [#] C119 ) is  final
proof
let C122 , C123 being (Element of C119);
thus L241: thesis;
end;

thus L242: ( [#] C119 ) is non  empty;
end;
end;
registration
let C124 being Lattice;
cluster  initial  final non  empty for (Subset of C124);
existence
proof
take ( [#] C124 );
thus L244: thesis;
end;
cluster  empty ->  initial  final for (Subset of C124);
coherence
proof
let C125 being (Subset of C124);
assume L245: C125 is  empty;
thus L246: C125 is  initial
proof
let C126 being (Element of C124);
thus L247: thesis by L245;
end;

let C127 being (Element of C124);
thus L248: thesis by L245;
end;
cluster  initial ->  meet-closed for (Subset of C124);
coherence
proof
let C128 being (Subset of C124);
assume that
L249: C128 is  initial;
let C129 , C130 being (Element of C124);
assume that
L250: C129 in C128
and
L251: C130 in C128;
thus L252: ( C129 "/\" C130 ) in C128 by L249 , L251 , L235 , L146;
end;
cluster  final ->  join-closed for (Subset of C124);
coherence
proof
let C131 being (Subset of C124);
assume that
L253: C131 is  final;
let C132 , C133 being (Element of C124);
assume that
L254: C132 in C131
and
L255: C133 in C131;
thus L256: ( C132 "\/" C133 ) in C131 by L253 , L255 , L236 , L144;
end;
end;
theorem
L258: (for B160 being Lattice holds (for B161 being  initial  final non  empty (Subset of B160) holds B161 = ( [#] B160 )))
proof
let C134 being Lattice;
let C135 being  initial  final non  empty (Subset of C134);
consider C136 being (Element of C134) such that L259: C136 in C135 by SUBSET_1:4;
L260: (for B162 being (Element of C134) holds (B162 in C135 iff B162 in ( [#] C134 )))
proof
let C137 being (Element of C134);
thus L261: (C137 in C135 implies C137 in ( [#] C134 ));
assume L262: C137 in ( [#] C134 );
L263: ( C137 "/\" C136 ) in C135 by L259 , L235 , L146;
thus L264: C137 in C135 by L263 , L236 , L146;
end;
thus L265: C135 = ( [#] C134 ) by L260 , SUBSET_1:3;
end;
