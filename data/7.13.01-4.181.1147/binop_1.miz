:: Binary Operations
::  by Czes{\l}aw Byli\'nski
::
:: Received April 14, 1989
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies FUNCT_1, XBOOLE_0, ZFMISC_1, SUBSET_1, TARSKI, RELAT_1, PARTFUN1,
      BINOP_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1, RELSET_1,
      PARTFUN1, FUNCT_2;
 constructors FUNCT_2, RELSET_1;
 registrations XBOOLE_0, SUBSET_1, FUNCT_1, RELSET_1;
 requirements SUBSET, BOOLE;
 definitions FUNCT_1;
 theorems RELAT_1, FUNCT_1, FUNCT_2, ZFMISC_1, SUBSET_1, XTUPLE_0;
 schemes FUNCT_2, PARTFUN1;

begin
definition
let C1 being Function;
let C2 , C3 being set;
func C1 . (C2 , C3) -> set equals 
( C1 . [ C2 , C3 ] );
correctness;
end;
definition
let C4 , C5 being non  empty set;
let C6 being set;
let C7 being (Function of [: C4 , C5 :] , C6);
let C8 being (Element of C4);
let C9 being (Element of C5);
redefine func C7 . (C8 , C9) -> (Element of C6);

coherence
proof
reconsider D1 = [ C8 , C9 ] as (Element of [: C4 , C5 :]) by ZFMISC_1:def 2;
L2: ( C7 . D1 ) is (Element of C6);
thus L3: thesis by L2;
end;
end;
theorem
L5: (for B1 , B2 , B3 being set holds (for B4 , B5 being (Function of [: B1 , B2 :] , B3) holds ((for B6 , B7 being set holds ((B6 in B1 & B7 in B2) implies ( B4 . (B6 , B7) ) = ( B5 . (B6 , B7) ))) implies B4 = B5)))
proof
let C10 , C11 , C12 being set;
let C13 , C14 being (Function of [: C10 , C11 :] , C12);
assume that
L6: (for B8 , B9 being set holds ((B8 in C10 & B9 in C11) implies ( C13 . (B8 , B9) ) = ( C14 . (B8 , B9) )));
L7: (for B10 being set holds (B10 in [: C10 , C11 :] implies ( C13 . B10 ) = ( C14 . B10 )))
proof
let C15 being set;
assume L8: C15 in [: C10 , C11 :];
consider C16 , C17 being set such that L9: (C16 in C10 & C17 in C11) and L10: C15 = [ C16 , C17 ] by L8 , ZFMISC_1:def 2;
L11: (( C13 . (C16 , C17) ) = ( C13 . C15 ) & ( C14 . (C16 , C17) ) = ( C14 . C15 )) by L10;
thus L12: thesis by L11 , L6 , L9;
end;
thus L13: thesis by L7 , FUNCT_2:12;
end;
theorem
L14: (for R2 being set holds (for R3 being set holds (for R4 being set holds (for B11 , B12 being (Function of [: R2 , R3 :] , R4) holds ((for B13 being (Element of R2) holds (for B14 being (Element of R3) holds ( B11 . (B13 , B14) ) = ( B12 . (B13 , B14) ))) implies B11 = B12)))))
proof
let R2 being set;
let R3 being set;
let R4 being set;
let C18 , C19 being (Function of [: R2 , R3 :] , R4);
assume L15: (for B15 being (Element of R2) holds (for B16 being (Element of R3) holds ( C18 . (B15 , B16) ) = ( C19 . (B15 , B16) )));
L16: (for B17 , B18 being set holds ((B17 in R2 & B18 in R3) implies ( C18 . (B17 , B18) ) = ( C19 . (B17 , B18) ))) by L15;
thus L17: thesis by L16 , L5;
end;
definition
let C20 being set;
mode UnOp of C20
 is (Function of C20 , C20);
mode BinOp of C20
 is (Function of [: C20 , C20 :] , C20);
end;
definition
let C21 being set;
let C22 being (BinOp of C21);
let C23 , C24 being (Element of C21);
redefine func C22 . (C23 , C24) -> (Element of C21);

coherence
proof
per cases ;
suppose L19: C21 <> ( {} );

reconsider D2 = C21 as non  empty set by L19;
reconsider D3 = C22 as (BinOp of D2);
reconsider D4 = [ C23 , C24 ] as (Element of [: D2 , D2 :]) by ZFMISC_1:def 2;
L20: ( D3 . D4 ) is (Element of D2);
thus L21: thesis by L20;
end;
suppose L22: C21 = ( {} );

L23: (not [ C23 , C24 ] in ( dom C22 )) by L22;
L24: ( C22 . (C23 , C24) ) = ( {} ) by L23 , FUNCT_1:def 2;
thus L25: thesis by L24 , L22 , SUBSET_1:def 1;
end;
end;
end;
scheme FuncEx2 { F1 , F2 , F3() -> set , P1[set , set , set] } : (ex B19 being (Function of [: F1() , F2() :] , F3()) st (for R5 being set holds (for R8 being set holds ((R5 in F1() & R8 in F2()) implies P1[ R5 , R8 , ( B19 . (R5 , R8) ) ]))))
provided
L28: (for R5 being set holds (for R8 being set holds ((R5 in F1() & R8 in F2()) implies (ex R11 being set st (R11 in F3() & P1[ R5 , R8 , R11 ])))))
proof
defpred S1[ set , set ] means (for R6 being set holds (for R9 being set holds ($1 = [ R6 , R9 ] implies P1[ R6 , R9 , $2 ])));
L29: (for R5 being set holds (R5 in [: F1() , F2() :] implies (ex R11 being set st (R11 in F3() & S1[ R5 , R11 ]))))
proof
let R5 being set;
assume L30: R5 in [: F1() , F2() :];
consider R6 being set, R9 being set such that L31: (R6 in F1() & R9 in F2()) and L32: R5 = [ R6 , R9 ] by L30 , ZFMISC_1:def 2;
consider R11 being set such that L33: R11 in F3() and L34: P1[ R6 , R9 , R11 ] by L28 , L31;
take R11;
thus L35: R11 in F3() by L33;
let R7 being set;
let R10 being set;
assume L36: R5 = [ R7 , R10 ];
L37: R6 = R7 by L36 , L32 , XTUPLE_0:1;
thus L38: thesis by L37 , L32 , L34 , L36 , XTUPLE_0:1;
end;
consider C25 being (Function of [: F1() , F2() :] , F3()) such that L39: (for R5 being set holds (R5 in [: F1() , F2() :] implies S1[ R5 , ( C25 . R5 ) ])) from FUNCT_2:sch 1(L29);
take C25;
let R5 being set;
let R8 being set;
assume L40: (R5 in F1() & R8 in F2());
L41: [ R5 , R8 ] in [: F1() , F2() :] by L40 , ZFMISC_1:def 2;
thus L42: thesis by L41 , L39;
end;
scheme Lambda2 { F4 , F5 , F6() -> set , F7(set , set) -> set } : (ex B20 being (Function of [: F4() , F5() :] , F6()) st (for R5 being set holds (for R8 being set holds ((R5 in F4() & R8 in F5()) implies ( B20 . (R5 , R8) ) = F7(R5 , R8)))))
provided
L43: (for R5 being set holds (for R8 being set holds ((R5 in F4() & R8 in F5()) implies F7(R5 , R8) in F6())))
proof
defpred S2[ set , set , set ] means $3 = F7($1 , $2);
L44: (for R5 being set holds (for R8 being set holds ((R5 in F4() & R8 in F5()) implies (ex R11 being set st (R11 in F6() & S2[ R5 , R8 , R11 ]))))) by L43;
thus L45: (ex B21 being (Function of [: F4() , F5() :] , F6()) st (for R5 being set holds (for R8 being set holds ((R5 in F4() & R8 in F5()) implies S2[ R5 , R8 , ( B21 . (R5 , R8) ) ])))) from FuncEx2(L44);
end;
scheme FuncEx2D { F8 , F9 , F10() -> non  empty set , P2[set , set , set] } : (ex B22 being (Function of [: F8() , F9() :] , F10()) st (for B23 being (Element of F8()) holds (for B24 being (Element of F9()) holds P2[ B23 , B24 , ( B22 . (B23 , B24) ) ])))
provided
L46: (for B25 being (Element of F8()) holds (for B26 being (Element of F9()) holds (ex B27 being (Element of F10()) st P2[ B25 , B26 , B27 ])))
proof
defpred S3[ set , set ] means (for B28 being (Element of F8()) holds (for B29 being (Element of F9()) holds ($1 = [ B28 , B29 ] implies P2[ B28 , B29 , $2 ])));
L47: (for B30 being (Element of [: F8() , F9() :]) holds (ex B31 being (Element of F10()) st S3[ B30 , B31 ]))
proof
let C26 being (Element of [: F8() , F9() :]);
consider R6 being set, R9 being set such that L48: R6 in F8() and L49: R9 in F9() and L50: C26 = [ R6 , R9 ] by ZFMISC_1:def 2;
reconsider D5 = R9 as (Element of F9()) by L49;
reconsider D6 = R6 as (Element of F8()) by L48;
consider C27 being (Element of F10()) such that L51: P2[ D6 , D5 , C27 ] by L46;
take C27;
let C28 being (Element of F8());
let C29 being (Element of F9());
assume L52: C26 = [ C28 , C29 ];
L53: D6 = C28 by L52 , L50 , XTUPLE_0:1;
thus L54: thesis by L53 , L50 , L51 , L52 , XTUPLE_0:1;
end;
consider C30 being (Function of [: F8() , F9() :] , F10()) such that L55: (for B32 being (Element of [: F8() , F9() :]) holds S3[ B32 , ( C30 . B32 ) ]) from FUNCT_2:sch 3(L47);
take C30;
let C31 being (Element of F8());
let C32 being (Element of F9());
reconsider D7 = [ C31 , C32 ] as (Element of [: F8() , F9() :]) by ZFMISC_1:def 2;
L56: P2[ C31 , C32 , ( C30 . D7 ) ] by L55;
thus L57: thesis by L56;
end;
scheme Lambda2D { F11 , F12 , F13() -> non  empty set , F14((Element of F11()) , (Element of F12())) -> (Element of F13()) } : (ex B33 being (Function of [: F11() , F12() :] , F13()) st (for B34 being (Element of F11()) holds (for B35 being (Element of F12()) holds ( B33 . (B34 , B35) ) = F14(B34 , B35))))
proof
defpred S4[ (Element of F11()) , (Element of F12()) , set ] means $3 = F14($1 , $2);
L58: (for B36 being (Element of F11()) holds (for B37 being (Element of F12()) holds (ex B38 being (Element of F13()) st S4[ B36 , B37 , B38 ])));
thus L59: (ex B39 being (Function of [: F11() , F12() :] , F13()) st (for B40 being (Element of F11()) holds (for B41 being (Element of F12()) holds S4[ B40 , B41 , ( B39 . (B40 , B41) ) ]))) from FuncEx2D(L58);
end;
definition
let R1 being set;
let R15 being (BinOp of R1);
attr R15 is  commutative
means
:L60: (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds ( R15 . (R17 , R18) ) = ( R15 . (R18 , R17) )));
attr R15 is  associative
means
(for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds ( R15 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R15 . (R17 , R18) ) , R19) ))));
attr R15 is  idempotent
means
(for R17 being (Element of R1) holds ( R15 . (R17 , R17) ) = R17);
end;
registration
cluster  ->  empty  associative  commutative for (BinOp of ( {} ));
coherence
proof
let C33 being (BinOp of ( {} ));
thus L62: C33 is  empty;
L63: C33 c= [: ( dom C33 ) , ( rng C33 ) :];
thus L64:now
let C34 , C35 , C36 being (Element of ( {} ));
thus L65: ( C33 . (C34 , ( C33 . (C35 , C36) )) ) = ( {} ) by L63 , FUNCT_1:def 2
.= ( C33 . (( C33 . (C34 , C35) ) , C36) ) by L63 , FUNCT_1:def 2;
end;
let C37 , C38 being (Element of ( {} ));
thus L66: ( C33 . (C37 , C38) ) = ( {} ) by L63 , FUNCT_1:def 2
.= ( C33 . (C38 , C37) ) by L63 , FUNCT_1:def 2;
end;
end;
definition
let R1 being set;
let R20 being (Element of R1);
let R15 being (BinOp of R1);
pred R20 is_a_left_unity_wrt R15
means
:L68: (for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17)
;pred R20 is_a_right_unity_wrt R15
means
:L69: (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17)
;end;
definition
let R1 being set;
let R20 being (Element of R1);
let R15 being (BinOp of R1);
pred R20 is_a_unity_wrt R15
means
(R20 is_a_left_unity_wrt R15 & R20 is_a_right_unity_wrt R15)
;end;
theorem
L72: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R20 is_a_unity_wrt R15 iff (for R17 being (Element of R1) holds (( R15 . (R20 , R17) ) = R17 & ( R15 . (R17 , R20) ) = R17))))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
thus L73: (R20 is_a_unity_wrt R15 implies (for R17 being (Element of R1) holds (( R15 . (R20 , R17) ) = R17 & ( R15 . (R17 , R20) ) = R17)))
proof
assume L74: (R20 is_a_left_unity_wrt R15 & R20 is_a_right_unity_wrt R15);
thus L75: thesis by L74 , L68 , L69;
end;

assume L76: (for R17 being (Element of R1) holds (( R15 . (R20 , R17) ) = R17 & ( R15 . (R17 , R20) ) = R17));
thus L77: ((for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17) & (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17)) by L76;
end;
theorem
L78: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R15 is  commutative implies (R20 is_a_unity_wrt R15 iff (for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17))))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
assume L79: R15 is  commutative;
L80:
now
thus L81: ((for R17 being (Element of R1) holds (( R15 . (R20 , R17) ) = R17 & ( R15 . (R17 , R20) ) = R17)) implies (for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17));
assume L82: (for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17);
let R17 being (Element of R1);
thus L83: ( R15 . (R20 , R17) ) = R17 by L82;
thus L84: ( R15 . (R17 , R20) ) = ( R15 . (R20 , R17) ) by L79 , L60
.= R17 by L82;
end;
thus L85: thesis by L80 , L72;
end;
theorem
L86: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R15 is  commutative implies (R20 is_a_unity_wrt R15 iff (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17))))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
assume L87: R15 is  commutative;
L88:
now
thus L89: ((for R17 being (Element of R1) holds (( R15 . (R20 , R17) ) = R17 & ( R15 . (R17 , R20) ) = R17)) implies (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17));
assume L90: (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17);
let R17 being (Element of R1);
thus L91: ( R15 . (R20 , R17) ) = ( R15 . (R17 , R20) ) by L87 , L60
.= R17 by L90;
thus L92: ( R15 . (R17 , R20) ) = R17 by L90;
end;
thus L93: thesis by L88 , L72;
end;
theorem
L94: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R15 is  commutative implies (R20 is_a_unity_wrt R15 iff R20 is_a_left_unity_wrt R15)))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
L95: (R20 is_a_left_unity_wrt R15 iff (for R17 being (Element of R1) holds ( R15 . (R20 , R17) ) = R17)) by L68;
thus L96: thesis by L95 , L78;
end;
theorem
L97: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R15 is  commutative implies (R20 is_a_unity_wrt R15 iff R20 is_a_right_unity_wrt R15)))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
L98: (R20 is_a_right_unity_wrt R15 iff (for R17 being (Element of R1) holds ( R15 . (R17 , R20) ) = R17)) by L69;
thus L99: thesis by L98 , L86;
end;
theorem
L100: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R20 being (Element of R1) holds (R15 is  commutative implies (R20 is_a_left_unity_wrt R15 iff R20 is_a_right_unity_wrt R15)))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R20 being (Element of R1);
assume L101: R15 is  commutative;
L102: (R20 is_a_unity_wrt R15 iff R20 is_a_left_unity_wrt R15) by L101 , L94;
thus L103: thesis by L102 , L101 , L97;
end;
theorem
L104: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R21 being (Element of R1) holds (for R22 being (Element of R1) holds ((R21 is_a_left_unity_wrt R15 & R22 is_a_right_unity_wrt R15) implies R21 = R22)))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R21 being (Element of R1);
let R22 being (Element of R1);
assume that
L105: R21 is_a_left_unity_wrt R15
and
L106: R22 is_a_right_unity_wrt R15;
thus L107: R21 = ( R15 . (R21 , R22) ) by L106 , L69
.= R22 by L105 , L68;
end;
theorem
L108: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R21 being (Element of R1) holds (for R22 being (Element of R1) holds ((R21 is_a_unity_wrt R15 & R22 is_a_unity_wrt R15) implies R21 = R22)))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R21 being (Element of R1);
let R22 being (Element of R1);
assume that
L109: R21 is_a_left_unity_wrt R15
and
L110: (R21 is_a_right_unity_wrt R15 & R22 is_a_left_unity_wrt R15)
and
L111: R22 is_a_right_unity_wrt R15;
thus L112: thesis by L110 , L104;
end;
definition
let R1 being set;
let R15 being (BinOp of R1);
assume L113: (ex R20 being (Element of R1) st R20 is_a_unity_wrt R15);
func the_unity_wrt R15 -> (Element of R1) means 
it is_a_unity_wrt R15;
existence by L113;
uniqueness by L108;
end;
definition
let R1 being set;
let R16 being (BinOp of R1);
let R15 being (BinOp of R1);
pred R16 is_left_distributive_wrt R15
means
:L115: (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds ( R16 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R16 . (R17 , R18) ) , ( R16 . (R17 , R19) )) ))))
;pred R16 is_right_distributive_wrt R15
means
:L116: (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds ( R16 . (( R15 . (R17 , R18) ) , R19) ) = ( R15 . (( R16 . (R17 , R19) ) , ( R16 . (R18 , R19) )) ))))
;end;
definition
let R1 being set;
let R16 being (BinOp of R1);
let R15 being (BinOp of R1);
pred R16 is_distributive_wrt R15
means
(R16 is_left_distributive_wrt R15 & R16 is_right_distributive_wrt R15)
;end;
theorem
L119: (for R1 being set holds (for R15 being (BinOp of R1) holds (for R16 being (BinOp of R1) holds (R16 is_distributive_wrt R15 iff (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds (( R16 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R16 . (R17 , R18) ) , ( R16 . (R17 , R19) )) ) & ( R16 . (( R15 . (R17 , R18) ) , R19) ) = ( R15 . (( R16 . (R17 , R19) ) , ( R16 . (R18 , R19) )) )))))))))
proof
let R1 being set;
let R15 being (BinOp of R1);
let R16 being (BinOp of R1);
thus L120: (R16 is_distributive_wrt R15 implies (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds (( R16 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R16 . (R17 , R18) ) , ( R16 . (R17 , R19) )) ) & ( R16 . (( R15 . (R17 , R18) ) , R19) ) = ( R15 . (( R16 . (R17 , R19) ) , ( R16 . (R18 , R19) )) ))))))
proof
assume L121: (R16 is_left_distributive_wrt R15 & R16 is_right_distributive_wrt R15);
thus L122: thesis by L121 , L115 , L116;
end;

assume L123: (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds (( R16 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R16 . (R17 , R18) ) , ( R16 . (R17 , R19) )) ) & ( R16 . (( R15 . (R17 , R18) ) , R19) ) = ( R15 . (( R16 . (R17 , R19) ) , ( R16 . (R18 , R19) )) )))));
thus L124: ((for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds ( R16 . (R17 , ( R15 . (R18 , R19) )) ) = ( R15 . (( R16 . (R17 , R18) ) , ( R16 . (R17 , R19) )) )))) & (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds (for R19 being (Element of R1) holds ( R16 . (( R15 . (R17 , R18) ) , R19) ) = ( R15 . (( R16 . (R17 , R19) ) , ( R16 . (R18 , R19) )) ))))) by L123;
end;
theorem
L125: (for B42 being non  empty set holds (for B43 , B44 being (BinOp of B42) holds (B44 is  commutative implies (B44 is_distributive_wrt B43 iff (for B45 , B46 , B47 being (Element of B42) holds ( B44 . (B45 , ( B43 . (B46 , B47) )) ) = ( B43 . (( B44 . (B45 , B46) ) , ( B44 . (B45 , B47) )) ))))))
proof
let C39 being non  empty set;
let C40 , C41 being (BinOp of C39);
assume L126: C41 is  commutative;
L127: ((for B48 , B49 , B50 being (Element of C39) holds (( C41 . (B48 , ( C40 . (B49 , B50) )) ) = ( C40 . (( C41 . (B48 , B49) ) , ( C41 . (B48 , B50) )) ) & ( C41 . (( C40 . (B48 , B49) ) , B50) ) = ( C40 . (( C41 . (B48 , B50) ) , ( C41 . (B49 , B50) )) ))) iff (for B51 , B52 , B53 being (Element of C39) holds ( C41 . (B51 , ( C40 . (B52 , B53) )) ) = ( C40 . (( C41 . (B51 , B52) ) , ( C41 . (B51 , B53) )) )))
proof
thus L128: ((for B54 , B55 , B56 being (Element of C39) holds (( C41 . (B54 , ( C40 . (B55 , B56) )) ) = ( C40 . (( C41 . (B54 , B55) ) , ( C41 . (B54 , B56) )) ) & ( C41 . (( C40 . (B54 , B55) ) , B56) ) = ( C40 . (( C41 . (B54 , B56) ) , ( C41 . (B55 , B56) )) ))) implies (for B57 , B58 , B59 being (Element of C39) holds ( C41 . (B57 , ( C40 . (B58 , B59) )) ) = ( C40 . (( C41 . (B57 , B58) ) , ( C41 . (B57 , B59) )) )));
assume L129: (for B60 , B61 , B62 being (Element of C39) holds ( C41 . (B60 , ( C40 . (B61 , B62) )) ) = ( C40 . (( C41 . (B60 , B61) ) , ( C41 . (B60 , B62) )) ));
let C42 , C43 , C44 being (Element of C39);
thus L130: ( C41 . (C42 , ( C40 . (C43 , C44) )) ) = ( C40 . (( C41 . (C42 , C43) ) , ( C41 . (C42 , C44) )) ) by L129;
thus L131: ( C41 . (( C40 . (C42 , C43) ) , C44) ) = ( C41 . (C44 , ( C40 . (C42 , C43) )) ) by L126 , L60
.= ( C40 . (( C41 . (C44 , C42) ) , ( C41 . (C44 , C43) )) ) by L129
.= ( C40 . (( C41 . (C42 , C44) ) , ( C41 . (C44 , C43) )) ) by L126 , L60
.= ( C40 . (( C41 . (C42 , C44) ) , ( C41 . (C43 , C44) )) ) by L126 , L60;
end;
thus L132: thesis by L127 , L119;
end;
theorem
L133: (for B63 being non  empty set holds (for B64 , B65 being (BinOp of B63) holds (B65 is  commutative implies (B65 is_distributive_wrt B64 iff (for B66 , B67 , B68 being (Element of B63) holds ( B65 . (( B64 . (B66 , B67) ) , B68) ) = ( B64 . (( B65 . (B66 , B68) ) , ( B65 . (B67 , B68) )) ))))))
proof
let C45 being non  empty set;
let C46 , C47 being (BinOp of C45);
assume L134: C47 is  commutative;
L135: ((for B69 , B70 , B71 being (Element of C45) holds (( C47 . (B69 , ( C46 . (B70 , B71) )) ) = ( C46 . (( C47 . (B69 , B70) ) , ( C47 . (B69 , B71) )) ) & ( C47 . (( C46 . (B69 , B70) ) , B71) ) = ( C46 . (( C47 . (B69 , B71) ) , ( C47 . (B70 , B71) )) ))) iff (for B72 , B73 , B74 being (Element of C45) holds ( C47 . (( C46 . (B72 , B73) ) , B74) ) = ( C46 . (( C47 . (B72 , B74) ) , ( C47 . (B73 , B74) )) )))
proof
thus L136: ((for B75 , B76 , B77 being (Element of C45) holds (( C47 . (B75 , ( C46 . (B76 , B77) )) ) = ( C46 . (( C47 . (B75 , B76) ) , ( C47 . (B75 , B77) )) ) & ( C47 . (( C46 . (B75 , B76) ) , B77) ) = ( C46 . (( C47 . (B75 , B77) ) , ( C47 . (B76 , B77) )) ))) implies (for B78 , B79 , B80 being (Element of C45) holds ( C47 . (( C46 . (B78 , B79) ) , B80) ) = ( C46 . (( C47 . (B78 , B80) ) , ( C47 . (B79 , B80) )) )));
assume L137: (for B81 , B82 , B83 being (Element of C45) holds ( C47 . (( C46 . (B81 , B82) ) , B83) ) = ( C46 . (( C47 . (B81 , B83) ) , ( C47 . (B82 , B83) )) ));
let C48 , C49 , C50 being (Element of C45);
thus L138: ( C47 . (C48 , ( C46 . (C49 , C50) )) ) = ( C47 . (( C46 . (C49 , C50) ) , C48) ) by L134 , L60
.= ( C46 . (( C47 . (C49 , C48) ) , ( C47 . (C50 , C48) )) ) by L137
.= ( C46 . (( C47 . (C48 , C49) ) , ( C47 . (C50 , C48) )) ) by L134 , L60
.= ( C46 . (( C47 . (C48 , C49) ) , ( C47 . (C48 , C50) )) ) by L134 , L60;
thus L139: thesis by L137;
end;
thus L140: thesis by L135 , L119;
end;
theorem
L141: (for B84 being non  empty set holds (for B85 , B86 being (BinOp of B84) holds (B86 is  commutative implies (B86 is_distributive_wrt B85 iff B86 is_left_distributive_wrt B85))))
proof
let C51 being non  empty set;
let C52 , C53 being (BinOp of C51);
L142: (C53 is_left_distributive_wrt C52 iff (for B87 , B88 , B89 being (Element of C51) holds ( C53 . (B87 , ( C52 . (B88 , B89) )) ) = ( C52 . (( C53 . (B87 , B88) ) , ( C53 . (B87 , B89) )) ))) by L115;
thus L143: thesis by L142 , L125;
end;
theorem
L144: (for B90 being non  empty set holds (for B91 , B92 being (BinOp of B90) holds (B92 is  commutative implies (B92 is_distributive_wrt B91 iff B92 is_right_distributive_wrt B91))))
proof
let C54 being non  empty set;
let C55 , C56 being (BinOp of C54);
L145: (C56 is_right_distributive_wrt C55 iff (for B93 , B94 , B95 being (Element of C54) holds ( C56 . (( C55 . (B93 , B94) ) , B95) ) = ( C55 . (( C56 . (B93 , B95) ) , ( C56 . (B94 , B95) )) ))) by L116;
thus L146: thesis by L145 , L133;
end;
theorem
L147: (for B96 being non  empty set holds (for B97 , B98 being (BinOp of B96) holds (B98 is  commutative implies (B98 is_right_distributive_wrt B97 iff B98 is_left_distributive_wrt B97))))
proof
let C57 being non  empty set;
let C58 , C59 being (BinOp of C57);
assume L148: C59 is  commutative;
L149: (C59 is_distributive_wrt C58 iff C59 is_left_distributive_wrt C58) by L148 , L141;
thus L150: thesis by L149 , L148 , L144;
end;
definition
let R1 being set;
let R14 being (UnOp of R1);
let R15 being (BinOp of R1);
pred R14 is_distributive_wrt R15
means
:L151: (for R17 being (Element of R1) holds (for R18 being (Element of R1) holds ( R14 . ( R15 . (R17 , R18) ) ) = ( R15 . (( R14 . R17 ) , ( R14 . R18 )) )))
;end;
definition
canceled 3;
let C60 being non  empty set;
let C61 being (Element of C60);
let C62 being (BinOp of C60);
redefine pred C61 is_a_left_unity_wrt C62
means
(for B99 being (Element of C60) holds ( C62 . (C61 , B99) ) = B99)
;correctness by L68;
redefine pred C61 is_a_right_unity_wrt C62
means
(for B100 being (Element of C60) holds ( C62 . (B100 , C61) ) = B100)
;correctness by L69;
end;
definition
let C63 being non  empty set;
let C64 , C65 being (BinOp of C63);
redefine pred C64 is_left_distributive_wrt C65
means
(for B101 , B102 , B103 being (Element of C63) holds ( C64 . (B101 , ( C65 . (B102 , B103) )) ) = ( C65 . (( C64 . (B101 , B102) ) , ( C64 . (B101 , B103) )) ))
;correctness by L115;
redefine pred C64 is_right_distributive_wrt C65
means
(for B104 , B105 , B106 being (Element of C63) holds ( C64 . (( C65 . (B104 , B105) ) , B106) ) = ( C65 . (( C64 . (B104 , B106) ) , ( C64 . (B105 , B106) )) ))
;correctness by L116;
end;
definition
let C66 being non  empty set;
let C67 being (UnOp of C66);
let C68 being (BinOp of C66);
redefine pred C67 is_distributive_wrt C68
means
(for B107 , B108 being (Element of C66) holds ( C67 . ( C68 . (B107 , B108) ) ) = ( C68 . (( C67 . B107 ) , ( C67 . B108 )) ))
;correctness by L151;
end;
theorem
L156: (for R2 being set holds (for R3 being set holds (for R4 being set holds (for R5 being set holds (for R8 being set holds (for B109 being (Function of [: R2 , R3 :] , R4) holds ((R5 in R2 & R8 in R3 & R4 <> ( {} )) implies ( B109 . (R5 , R8) ) in R4)))))))
proof
let R2 being set;
let R3 being set;
let R4 being set;
let R5 being set;
let R8 being set;
let C69 being (Function of [: R2 , R3 :] , R4);
assume L157: (R5 in R2 & R8 in R3);
L158: [ R5 , R8 ] in [: R2 , R3 :] by L157 , ZFMISC_1:87;
thus L159: thesis by L158 , FUNCT_2:5;
end;
theorem
L160: (for B110 , B111 , B112 , B113 , B114 being set holds (for B115 being (Function of [: B112 , B113 :] , B114) holds (for B116 being Function holds ((B114 <> ( {} ) & B110 in B112 & B111 in B113) implies ( ( B116 * B115 ) . (B110 , B111) ) = ( B116 . ( B115 . (B110 , B111) ) )))))
proof
let C70 , C71 , C72 , C73 , C74 being set;
let C75 being (Function of [: C72 , C73 :] , C74);
let C76 being Function;
assume that
L161: C74 <> ( {} );
assume L162: (C70 in C72 & C71 in C73);
L163: [ C70 , C71 ] in [: C72 , C73 :] by L162 , ZFMISC_1:87;
thus L164: thesis by L163 , L161 , FUNCT_2:15;
end;
theorem
L165: (for R2 being set holds (for R3 being set holds (for B117 being Function holds (( dom B117 ) = [: R2 , R3 :] implies (B117 is  constant iff (for R6 being set holds (for R7 being set holds (for R9 being set holds (for R10 being set holds ((R6 in R2 & R7 in R2 & R9 in R3 & R10 in R3) implies ( B117 . (R6 , R9) ) = ( B117 . (R7 , R10) )))))))))))
proof
let R2 being set;
let R3 being set;
let C77 being Function;
assume that
L166: ( dom C77 ) = [: R2 , R3 :];
thus L167:now
assume L168: C77 is  constant;
let R6 being set;
let R7 being set;
let R9 being set;
let R10 being set;
assume L169: (R6 in R2 & R7 in R2 & R9 in R3 & R10 in R3);
L170: ([ R6 , R9 ] in [: R2 , R3 :] & [ R7 , R10 ] in [: R2 , R3 :]) by L169 , ZFMISC_1:87;
thus L171: ( C77 . (R6 , R9) ) = ( C77 . (R7 , R10) ) by L170 , L166 , L168 , FUNCT_1:def 10;
end;
assume L172: (for R6 being set holds (for R7 being set holds (for R9 being set holds (for R10 being set holds ((R6 in R2 & R7 in R2 & R9 in R3 & R10 in R3) implies ( C77 . (R6 , R9) ) = ( C77 . (R7 , R10) ))))));
let R5 being set;
let R8 being set;
assume L173: R5 in ( dom C77 );
consider R6 being set, R9 being set such that L174: (R6 in R2 & R9 in R3) and L175: R5 = [ R6 , R9 ] by L173 , L166 , ZFMISC_1:84;
assume L176: R8 in ( dom C77 );
consider R7 being set, R10 being set such that L177: (R7 in R2 & R10 in R3) and L178: R8 = [ R7 , R10 ] by L176 , L166 , ZFMISC_1:84;
thus L179: ( C77 . R5 ) = ( C77 . (R6 , R9) ) by L175
.= ( C77 . (R7 , R10) ) by L172 , L174 , L177
.= ( C77 . R8 ) by L178;
end;
theorem
L180: (for R2 being set holds (for R3 being set holds (for R4 being set holds (for B118 , B119 being (PartFunc of [: R2 , R3 :] , R4) holds ((( dom B118 ) = ( dom B119 ) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B118 ) implies ( B118 . (R5 , R8) ) = ( B119 . (R5 , R8) ))))) implies B118 = B119)))))
proof
let R2 being set;
let R3 being set;
let R4 being set;
let C78 , C79 being (PartFunc of [: R2 , R3 :] , R4);
assume that
L181: ( dom C78 ) = ( dom C79 )
and
L182: (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C78 ) implies ( C78 . (R5 , R8) ) = ( C79 . (R5 , R8) ))));
L183: (for R11 being set holds (R11 in ( dom C78 ) implies ( C78 . R11 ) = ( C79 . R11 )))
proof
let R11 being set;
assume L184: R11 in ( dom C78 );
consider R5 being set, R8 being set such that L185: R11 = [ R5 , R8 ] by L184 , RELAT_1:def 1;
L186: ( C78 . (R5 , R8) ) = ( C79 . (R5 , R8) ) by L182 , L184 , L185;
thus L187: thesis by L186 , L185;
end;
thus L188: thesis by L183 , L181 , FUNCT_1:2;
end;
scheme PartFuncEx2 { F15 , F16 , F17() -> set , P3[set , set , set] } : (ex B120 being (PartFunc of [: F15() , F16() :] , F17()) st ((for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B120 ) iff (R5 in F15() & R8 in F16() & (ex R11 being set st P3[ R5 , R8 , R11 ]))))) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B120 ) implies P3[ R5 , R8 , ( B120 . (R5 , R8) ) ])))))
provided
L189: (for R5 being set holds (for R8 being set holds (for R11 being set holds ((R5 in F15() & R8 in F16() & P3[ R5 , R8 , R11 ]) implies R11 in F17()))))
and
L190: (for R5 being set holds (for R8 being set holds (for R12 being set holds (for R13 being set holds ((R5 in F15() & R8 in F16() & P3[ R5 , R8 , R12 ] & P3[ R5 , R8 , R13 ]) implies R12 = R13)))))
proof
defpred S5[ set , set ] means (for R6 being set holds (for R9 being set holds ($1 = [ R6 , R9 ] implies P3[ R6 , R9 , $2 ])));
L191: (for R5 being set holds (for R11 being set holds ((R5 in [: F15() , F16() :] & S5[ R5 , R11 ]) implies R11 in F17())))
proof
let R5 being set;
let R11 being set;
assume L192: R5 in [: F15() , F16() :];
L193: (ex R6 being set st (ex R9 being set st (R6 in F15() & R9 in F16() & R5 = [ R6 , R9 ]))) by L192 , ZFMISC_1:def 2;
assume L194: (for R6 being set holds (for R9 being set holds (R5 = [ R6 , R9 ] implies P3[ R6 , R9 , R11 ])));
thus L195: thesis by L194 , L189 , L193;
end;
L196: (for R5 being set holds (for R12 being set holds (for R13 being set holds ((R5 in [: F15() , F16() :] & S5[ R5 , R12 ] & S5[ R5 , R13 ]) implies R12 = R13))))
proof
let R5 being set;
let R12 being set;
let R13 being set;
assume that
L197: R5 in [: F15() , F16() :]
and
L198: ((for R6 being set holds (for R9 being set holds (R5 = [ R6 , R9 ] implies P3[ R6 , R9 , R12 ]))) & (for R6 being set holds (for R9 being set holds (R5 = [ R6 , R9 ] implies P3[ R6 , R9 , R13 ]))));
consider R6 being set, R9 being set such that L199: (R6 in F15() & R9 in F16()) and L200: R5 = [ R6 , R9 ] by L197 , ZFMISC_1:def 2;
L201: (P3[ R6 , R9 , R12 ] & P3[ R6 , R9 , R13 ]) by L198 , L200;
thus L202: thesis by L201 , L190 , L199;
end;
consider C80 being (PartFunc of [: F15() , F16() :] , F17()) such that L203: (for R5 being set holds (R5 in ( dom C80 ) iff (R5 in [: F15() , F16() :] & (ex R11 being set st S5[ R5 , R11 ])))) and L204: (for R5 being set holds (R5 in ( dom C80 ) implies S5[ R5 , ( C80 . R5 ) ])) from PARTFUN1:sch 2(L191 , L196);
take C80;
thus L205: (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C80 ) iff (R5 in F15() & R8 in F16() & (ex R11 being set st P3[ R5 , R8 , R11 ])))))
proof
let R5 being set;
let R8 being set;
thus L206: ([ R5 , R8 ] in ( dom C80 ) implies (R5 in F15() & R8 in F16() & (ex R11 being set st P3[ R5 , R8 , R11 ])))
proof
assume L207: [ R5 , R8 ] in ( dom C80 );
thus L208: (R5 in F15() & R8 in F16()) by L207 , ZFMISC_1:87;
consider R11 being set such that L209: (for R6 being set holds (for R9 being set holds ([ R5 , R8 ] = [ R6 , R9 ] implies P3[ R6 , R9 , R11 ]))) by L203 , L207;
take R11;
thus L210: thesis by L209;
end;

assume L211: (R5 in F15() & R8 in F16());
L212: [ R5 , R8 ] in [: F15() , F16() :] by L211 , ZFMISC_1:def 2;
given R11 being set such that
L213: P3[ R5 , R8 , R11 ];

L214:
now
take D8 = R11;
let R6 being set;
let R9 being set;
assume L215: [ R5 , R8 ] = [ R6 , R9 ];
L216: R5 = R6 by L215 , XTUPLE_0:1;
thus L217: P3[ R6 , R9 , D8 ] by L216 , L213 , L215 , XTUPLE_0:1;
end;
thus L218: thesis by L214 , L203 , L212;
end;

thus L219: thesis by L204;
end;
scheme LambdaR2 { F18 , F19 , F20() -> set , F21(set , set) -> set , P4[set , set] } : (ex B121 being (PartFunc of [: F18() , F19() :] , F20()) st ((for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B121 ) iff (R5 in F18() & R8 in F19() & P4[ R5 , R8 ])))) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B121 ) implies ( B121 . (R5 , R8) ) = F21(R5 , R8))))))
provided
L220: (for R5 being set holds (for R8 being set holds (P4[ R5 , R8 ] implies F21(R5 , R8) in F20())))
proof
defpred S6[ set , set , set ] means (P4[ $1 , $2 ] & $3 = F21($1 , $2));
L221: (for R5 being set holds (for R8 being set holds (for R12 being set holds (for R13 being set holds ((R5 in F18() & R8 in F19() & S6[ R5 , R8 , R12 ] & S6[ R5 , R8 , R13 ]) implies R12 = R13)))));
L222: (for R5 being set holds (for R8 being set holds (for R11 being set holds ((R5 in F18() & R8 in F19() & S6[ R5 , R8 , R11 ]) implies R11 in F20())))) by L220;
consider C81 being (PartFunc of [: F18() , F19() :] , F20()) such that L223: (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C81 ) iff (R5 in F18() & R8 in F19() & (ex R11 being set st S6[ R5 , R8 , R11 ]))))) and L224: (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C81 ) implies S6[ R5 , R8 , ( C81 . (R5 , R8) ) ]))) from PartFuncEx2(L222 , L221);
take C81;
thus L225: (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C81 ) iff (R5 in F18() & R8 in F19() & P4[ R5 , R8 ]))))
proof
let R5 being set;
let R8 being set;
thus L226: ([ R5 , R8 ] in ( dom C81 ) implies (R5 in F18() & R8 in F19() & P4[ R5 , R8 ]))
proof
assume L227: [ R5 , R8 ] in ( dom C81 );
L228: (ex R11 being set st (P4[ R5 , R8 ] & R11 = F21(R5 , R8))) by L227 , L223;
thus L229: thesis by L228 , L223 , L227;
end;

assume that
L230: (R5 in F18() & R8 in F19())
and
L231: P4[ R5 , R8 ];
L232: (ex R11 being set st (P4[ R5 , R8 ] & R11 = F21(R5 , R8))) by L231;
thus L233: thesis by L232 , L223 , L230;
end;

thus L234: thesis by L224;
end;
scheme PartLambda2 { F22 , F23 , F24() -> set , F25(set , set) -> set , P5[set , set] } : (ex B122 being (PartFunc of [: F22() , F23() :] , F24()) st ((for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B122 ) iff (R5 in F22() & R8 in F23() & P5[ R5 , R8 ])))) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom B122 ) implies ( B122 . (R5 , R8) ) = F25(R5 , R8))))))
provided
L235: (for R5 being set holds (for R8 being set holds ((R5 in F22() & R8 in F23() & P5[ R5 , R8 ]) implies F25(R5 , R8) in F24())))
proof
defpred S7[ set , set ] means ($1 in F22() & $2 in F23() & P5[ $1 , $2 ]);
L236: (for R5 being set holds (for R8 being set holds (S7[ R5 , R8 ] implies F25(R5 , R8) in F24()))) by L235;
consider C82 being (PartFunc of [: F22() , F23() :] , F24()) such that L237: ((for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C82 ) iff (R5 in F22() & R8 in F23() & S7[ R5 , R8 ])))) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C82 ) implies ( C82 . (R5 , R8) ) = F25(R5 , R8))))) from LambdaR2(L236);
take C82;
thus L238: thesis by L237;
end;
scheme  { F26 , F27() -> non  empty set , F28() -> set , F29(set , set) -> set , P6[set , set] } : (ex B123 being (PartFunc of [: F26() , F27() :] , F28()) st ((for B124 being (Element of F26()) holds (for B125 being (Element of F27()) holds ([ B124 , B125 ] in ( dom B123 ) iff P6[ B124 , B125 ]))) & (for B126 being (Element of F26()) holds (for B127 being (Element of F27()) holds ([ B126 , B127 ] in ( dom B123 ) implies ( B123 . (B126 , B127) ) = F29(B126 , B127))))))
provided
L239: (for B128 being (Element of F26()) holds (for B129 being (Element of F27()) holds (P6[ B128 , B129 ] implies F29(B128 , B129) in F28())))
proof
L240: (for R5 being set holds (for R8 being set holds ((R5 in F26() & R8 in F27() & P6[ R5 , R8 ]) implies F29(R5 , R8) in F28()))) by L239;
consider C83 being (PartFunc of [: F26() , F27() :] , F28()) such that L241: ((for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C83 ) iff (R5 in F26() & R8 in F27() & P6[ R5 , R8 ])))) & (for R5 being set holds (for R8 being set holds ([ R5 , R8 ] in ( dom C83 ) implies ( C83 . (R5 , R8) ) = F29(R5 , R8))))) from PartLambda2(L240);
take C83;
thus L242: thesis by L241;
end;
definition
let C84 being set;
let C85 being (BinOp of C84);
let C86 , C87 being (Element of C84);
redefine func C85 . (C86 , C87) -> (Element of C84);

coherence
proof
per cases ;
suppose L243: C84 = ( {} );

L244: ( dom C85 ) = ( {} ) by L243;
L245: ( C85 . (C86 , C87) ) = ( {} ) by L244 , FUNCT_1:def 2;
thus L246: thesis by L245;
end;
suppose L247: C84 <> ( {} );

reconsider D9 = C84 as non  empty set by L247;
reconsider D10 = C85 as (BinOp of D9);
reconsider D11 = C86 , D12 = C87 as (Element of D9);
L248: ( D10 . (D11 , D12) ) is (Element of D9);
thus L249: thesis by L248;
end;
end;
end;
definition
let C88 , C89 , C90 being set;
let C91 , C92 being (Function of [: C88 , C89 :] , C90);
redefine pred C91 = C92
means
(for B130 , B131 being set holds ((B130 in C88 & B131 in C89) implies ( C91 . (B130 , B131) ) = ( C92 . (B130 , B131) )))
;compatibility by L5;
end;
