:: Development of Terminology for {\bf SCM}
::  by Grzegorz Bancerek and Piotr Rudnicki
::
:: Received October 8, 1993
:: Copyright (c) 1993-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, INT_1, FINSEQ_1, SUBSET_1, FSM_1, AMI_3, PARTFUN1,
      AMI_1, EXTPRO_1, RELAT_1, FUNCT_1, CIRCUIT2, MSUALG_1, ARYTM_3, XXREAL_0,
      CARD_1, TARSKI, AFINSQ_1, ORDINAL4, GRAPHSP, ARYTM_1, SCM_1, STRUCT_0,
      ORDINAL1, RECDEF_2, FUNCT_4, CAT_1, GOBRD13, MEMSTR_0;
 notations TARSKI,
      XTUPLE_0, SUBSET_1, NUMBERS, XCMPLX_0, NAT_1, INT_1, RELAT_1, FUNCT_1,
      PARTFUN1, FINSEQ_1, XXREAL_0, AFINSQ_1, FUNCT_4, RECDEF_2, STRUCT_0,
      MEMSTR_0, COMPOS_1, EXTPRO_1, AMI_3;
 constructors AMI_3, RELSET_1, PRE_POLY, XTUPLE_0;
 registrations XBOOLE_0, ORDINAL1, NUMBERS, XXREAL_0, XREAL_0, NAT_1, INT_1,
      AMI_3, AFINSQ_1, RELAT_1, PBOOLE, FINSEQ_1, STRUCT_0, VALUED_0, FUNCT_4,
      COMPOS_0, XTUPLE_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions TARSKI, AFINSQ_1, EXTPRO_1, NAT_1, AMI_3, FUNCOP_1, RELAT_1,
      FUNCT_1, MEMSTR_0, XTUPLE_0;
 theorems NAT_1, INT_1, FINSEQ_1, AMI_3, AFINSQ_1, PARTFUN1, RECDEF_2, FUNCT_4,
      FUNCOP_1, TARSKI, EXTPRO_1, GRFUNC_1, CARD_1, MEMSTR_0;
 schemes PARTFUN1;

begin
definition
let C1 being Integer;
redefine func <*C1 *> -> (FinSequence of ( INT ));

coherence
proof
reconsider D1 = C1 as (Element of ( INT )) by INT_1:def 2;
L1: <* D1 *> is (FinSequence of ( INT ));
thus L2: thesis by L1;
end;
end;
registration
let C2 being Integer;
cluster <% C2 %> -> ( INT ) -valued;
coherence;
let C3 being Integer;
cluster <% C2 , C3 %> -> ( INT ) -valued;
coherence;
let C4 being Integer;
cluster <% C2 , C3 , C4 %> -> ( INT ) -valued;
coherence;
let C5 being Integer;
cluster <% C2 , C3 , C4 , C5 %> -> ( INT ) -valued;
coherence;
end;
definition
let C6 being (XFinSequence of ( INT ));
mode State-consisting of C6
 -> (State of ( SCM ))
means :L5: (for B1 being (Element of ( NAT )) holds (B1 < ( len C6 ) implies ( it . ( dl. B1 ) ) = ( C6 . B1 )));
existence
proof
defpred S1[ set , set ] means (ex B2 being (Element of ( NAT )) st ($1 = ( dl. B2 ) & $2 = ( C6 . B2 )));
L6: (for B3 , B4 being set holds ((B3 in (the carrier of ( SCM )) & S1[ B3 , B4 ]) implies B4 in ( INT ))) by INT_1:def 2;
L7: (for B5 , B6 , B7 being set holds ((B5 in (the carrier of ( SCM )) & S1[ B5 , B6 ] & S1[ B5 , B7 ]) implies B6 = B7)) by AMI_3:10;
consider C7 being (PartFunc of ( SCM ) , ( INT )) such that L8: (for B8 being set holds (B8 in ( dom C7 ) iff (B8 in (the carrier of ( SCM )) & (ex B9 being set st S1[ B8 , B9 ])))) and L9: (for B10 being set holds (B10 in ( dom C7 ) implies S1[ B10 , ( C7 . B10 ) ])) from PARTFUN1:sch 2(L6 , L7);
L10: C7 is (the carrier of ( SCM )) -defined
proof
let C8 being set;
thus L11: thesis by L8;
end;
L12: C7 is ( the_Values_of ( SCM ) ) -compatible
proof
let C9 being set;
assume L13: C9 in ( dom C7 );
L14: (ex B11 being set st S1[ C9 , B11 ]) by L13 , L8;
reconsider D2 = C9 as (Object of ( SCM )) by L13 , L8;
L15: ( Values D2 ) = ( INT ) by L14 , AMI_3:11;
consider C10 being (Element of ( NAT )) such that L16: (D2 = ( dl. C10 ) & ( C7 . D2 ) = ( C6 . C10 )) by L9 , L13;
thus L17: ( C7 . C9 ) in ( ( the_Values_of ( SCM ) ) . C9 ) by L15 , L16 , INT_1:def 2;
end;
reconsider D3 = C7 as (PartState of ( SCM )) by L12 , L10;
take D4 = ( the (State of ( SCM )) +* D3 );
let C11 being (Element of ( NAT ));
assume L18: C11 < ( len C6 );
L19: (ex B12 being (Element of ( NAT )) st (( dl. C11 ) = ( dl. B12 ) & ( C6 . C11 ) = ( C6 . B12 )));
L20: ( dl. C11 ) in ( dom D3 ) by L19 , L8;
consider C12 being (Element of ( NAT )) such that L21: (( dl. C11 ) = ( dl. C12 ) & ( D3 . ( dl. C11 ) ) = ( C6 . C12 )) by L20 , L9;
L22: C11 = C12 by L21 , AMI_3:10;
L23: D3 c= D4 by FUNCT_4:25;
thus L24: ( D4 . ( dl. C11 ) ) = ( C6 . C11 ) by L23 , L22 , L21 , L20 , GRFUNC_1:2;
end;
end;
registration
let C13 being (XFinSequence of ( INT ));
let C14 being (Element of ( NAT ));
cluster C14 -started for (State-consisting of C13);
existence
proof
set D5 = the (State-consisting of C13);
set D6 = ( D5 +* ( Start-At (C14 , ( SCM )) ) );
L26: (for B13 being (Element of ( NAT )) holds (B13 < ( len C13 ) implies ( D6 . ( dl. B13 ) ) = ( C13 . B13 )))
proof
let C15 being (Element of ( NAT ));
assume L27: C15 < ( len C13 );
L28: ( dom ( Start-At (C14 , ( SCM )) ) ) = { ( IC ( SCM ) ) } by FUNCOP_1:13;
L29: ( dl. C15 ) <> ( IC ( SCM ) ) by AMI_3:13;
L30: (not ( dl. C15 ) in ( dom ( Start-At (C14 , ( SCM )) ) )) by L29 , L28 , TARSKI:def 1;
thus L31: ( D6 . ( dl. C15 ) ) = ( D5 . ( dl. C15 ) ) by L30 , FUNCT_4:11
.= ( C13 . C15 ) by L27 , L5;
end;
reconsider D7 = D6 as (State-consisting of C13) by L26 , L5;
take D7;
thus L32: ( IC D7 ) = C14 by MEMSTR_0:16;
end;
end;
theorem
L34: (for B14 , B15 , B16 , B17 being Integer holds (for B18 being (Element of ( NAT )) holds (for B19 being B18 -started (State-consisting of <% B14 , B15 , B16 , B17 %>) holds (( B19 . ( dl. ( 0 ) ) ) = B14 & ( B19 . ( dl. 1 ) ) = B15 & ( B19 . ( dl. 2 ) ) = B16 & ( B19 . ( dl. 3 ) ) = B17))))
proof
let C16 , C17 , C18 , C19 being Integer;
let C20 being (Element of ( NAT ));
let C21 being C20 -started (State-consisting of <% C16 , C17 , C18 , C19 %>);
set D8 = <% C16 , C17 , C18 , C19 %>;
L35: (( D8 . 2 ) = C18 & ( D8 . 3 ) = C19) by AFINSQ_1:85;
L36: (( len D8 ) = 4 & ( ( 0 ) + ( 0 ) ) = ( 0 )) by AFINSQ_1:84;
L37: (( D8 . ( 0 ) ) = C16 & ( D8 . 1 ) = C17) by AFINSQ_1:85;
thus L38: thesis by L37 , L35 , L36 , L5;
end;
theorem
L39: (for B20 , B21 being Integer holds (for B22 being (Element of ( NAT )) holds (for B23 being B22 -started (State-consisting of <% B20 , B21 %>) holds (( B23 . ( dl. ( 0 ) ) ) = B20 & ( B23 . ( dl. 1 ) ) = B21))))
proof
let C22 , C23 being Integer;
let C24 being (Element of ( NAT ));
let C25 being C24 -started (State-consisting of <% C22 , C23 %>);
set D9 = <% C22 , C23 %>;
L40: (( len D9 ) = 2 & ( D9 . ( 0 ) ) = C22) by AFINSQ_1:38;
L41: ( D9 . 1 ) = C23 by AFINSQ_1:38;
thus L42: thesis by L41 , L40 , L5;
end;
theorem
L43: (for B24 , B25 being (Instruction of ( SCM )) holds (for B26 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% B24 %> ^ <% B25 %> ) c= B26 implies (( B26 . ( 0 ) ) = B24 & ( B26 . 1 ) = B25))))
proof
let C26 , C27 being (Instruction of ( SCM ));
let C28 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L44: ( <% C26 %> ^ <% C27 %> ) c= C28;
set D10 = ( <% C26 %> ^ <% C27 %> );
L45: D10 = <% C26 , C27 %>;
L46: ( D10 . 1 ) = C27 by L45 , AFINSQ_1:38;
L47: ( D10 . ( 0 ) ) = C26 by L45 , AFINSQ_1:38;
L48: ( len D10 ) = 2 by L45 , AFINSQ_1:38;
L49: (( 0 ) in ( dom D10 ) & 1 in ( dom D10 )) by L48 , CARD_1:50 , TARSKI:def 2;
thus L50: thesis by L49 , L44 , L46 , L47 , GRFUNC_1:2;
end;
L51: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B27 being (Element of ( NAT )) holds (for B28 being (State of ( SCM )) holds ( Comput (R1 , B28 , ( B27 + 1 )) ) = ( Exec (( CurInstr (R1 , ( Comput (R1 , B28 , B27) )) ) , ( Comput (R1 , B28 , B27) )) ))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C29 being (Element of ( NAT ));
let C30 being (State of ( SCM ));
thus L52: ( Comput (R1 , C30 , ( C29 + 1 )) ) = ( Following (R1 , ( Comput (R1 , C30 , C29) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (R1 , ( Comput (R1 , C30 , C29) )) ) , ( Comput (R1 , C30 , C29) )) );
end;
L53:
now
let C31 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C32 , C33 being (Element of ( NAT ));
let C34 being (State of ( SCM ));
let C35 , C36 being Data-Location;
assume L54: ( IC ( Comput (C31 , C34 , C32) ) ) = C33;
set D11 = ( Comput (C31 , C34 , ( C32 + 1 )) );
set D12 = ( Comput (C31 , C34 , C32) );
assume L55: (( C31 . C33 ) = ( C35 := C36 ) or ( C31 . C33 ) = ( AddTo (C35 , C36) ) or ( C31 . C33 ) = ( SubFrom (C35 , C36) ) or ( C31 . C33 ) = ( MultBy (C35 , C36) ) or (C35 <> C36 & ( C31 . C33 ) = ( Divide (C35 , C36) )));
L56: ( dom C31 ) = ( NAT ) by PARTFUN1:def 2;
thus L57: D11 = ( Exec (( CurInstr (C31 , D12) ) , D12) ) by L51
.= ( Exec (( C31 . C33 ) , D12) ) by L54 , L56 , PARTFUN1:def 6;
thus L58: ( IC D11 ) = ( succ ( IC D12 ) ) by L57 , L55 , AMI_3:2 , AMI_3:3 , AMI_3:4 , AMI_3:5 , AMI_3:6
.= ( C33 + 1 ) by L54;
end;
theorem
L59: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B29 , B30 being (Element of ( NAT )) holds (for B31 being (State of ( SCM )) holds (for B32 , B33 being Data-Location holds ((( IC ( Comput (R1 , B31 , B29) ) ) = B30 & ( R1 . B30 ) = ( B32 := B33 )) implies (( IC ( Comput (R1 , B31 , ( B29 + 1 )) ) ) = ( B30 + 1 ) & ( ( Comput (R1 , B31 , ( B29 + 1 )) ) . B32 ) = ( ( Comput (R1 , B31 , B29) ) . B33 ) & (for B34 being Data-Location holds (B34 <> B32 implies ( ( Comput (R1 , B31 , ( B29 + 1 )) ) . B34 ) = ( ( Comput (R1 , B31 , B29) ) . B34 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C37 , C38 being (Element of ( NAT ));
let C39 being (State of ( SCM ));
let C40 , C41 being Data-Location;
assume L60: ( IC ( Comput (R1 , C39 , C37) ) ) = C38;
assume L61: ( R1 . C38 ) = ( C40 := C41 );
L62: ( Comput (R1 , C39 , ( C37 + 1 )) ) = ( Exec (( C40 := C41 ) , ( Comput (R1 , C39 , C37) )) ) by L61 , L60 , L53;
thus L63: thesis by L62 , L60 , L61 , L53 , AMI_3:2;
end;
theorem
L64: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B35 , B36 being (Element of ( NAT )) holds (for B37 being (State of ( SCM )) holds (for B38 , B39 being Data-Location holds ((( IC ( Comput (R1 , B37 , B35) ) ) = B36 & ( R1 . B36 ) = ( AddTo (B38 , B39) )) implies (( IC ( Comput (R1 , B37 , ( B35 + 1 )) ) ) = ( B36 + 1 ) & ( ( Comput (R1 , B37 , ( B35 + 1 )) ) . B38 ) = ( ( ( Comput (R1 , B37 , B35) ) . B38 ) + ( ( Comput (R1 , B37 , B35) ) . B39 ) ) & (for B40 being Data-Location holds (B40 <> B38 implies ( ( Comput (R1 , B37 , ( B35 + 1 )) ) . B40 ) = ( ( Comput (R1 , B37 , B35) ) . B40 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C42 , C43 being (Element of ( NAT ));
let C44 being (State of ( SCM ));
let C45 , C46 being Data-Location;
assume L65: ( IC ( Comput (R1 , C44 , C42) ) ) = C43;
assume L66: ( R1 . C43 ) = ( AddTo (C45 , C46) );
L67: ( Comput (R1 , C44 , ( C42 + 1 )) ) = ( Exec (( AddTo (C45 , C46) ) , ( Comput (R1 , C44 , C42) )) ) by L66 , L65 , L53;
thus L68: thesis by L67 , L65 , L66 , L53 , AMI_3:3;
end;
theorem
L69: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B41 , B42 being (Element of ( NAT )) holds (for B43 being (State of ( SCM )) holds (for B44 , B45 being Data-Location holds ((( IC ( Comput (R1 , B43 , B41) ) ) = B42 & ( R1 . B42 ) = ( SubFrom (B44 , B45) )) implies (( IC ( Comput (R1 , B43 , ( B41 + 1 )) ) ) = ( B42 + 1 ) & ( ( Comput (R1 , B43 , ( B41 + 1 )) ) . B44 ) = ( ( ( Comput (R1 , B43 , B41) ) . B44 ) - ( ( Comput (R1 , B43 , B41) ) . B45 ) ) & (for B46 being Data-Location holds (B46 <> B44 implies ( ( Comput (R1 , B43 , ( B41 + 1 )) ) . B46 ) = ( ( Comput (R1 , B43 , B41) ) . B46 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C47 , C48 being (Element of ( NAT ));
let C49 being (State of ( SCM ));
let C50 , C51 being Data-Location;
assume L70: ( IC ( Comput (R1 , C49 , C47) ) ) = C48;
assume L71: ( R1 . C48 ) = ( SubFrom (C50 , C51) );
L72: ( Comput (R1 , C49 , ( C47 + 1 )) ) = ( Exec (( SubFrom (C50 , C51) ) , ( Comput (R1 , C49 , C47) )) ) by L71 , L70 , L53;
thus L73: thesis by L72 , L70 , L71 , L53 , AMI_3:4;
end;
theorem
L74: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B47 , B48 being (Element of ( NAT )) holds (for B49 being (State of ( SCM )) holds (for B50 , B51 being Data-Location holds ((( IC ( Comput (R1 , B49 , B47) ) ) = B48 & ( R1 . B48 ) = ( MultBy (B50 , B51) )) implies (( IC ( Comput (R1 , B49 , ( B47 + 1 )) ) ) = ( B48 + 1 ) & ( ( Comput (R1 , B49 , ( B47 + 1 )) ) . B50 ) = ( ( ( Comput (R1 , B49 , B47) ) . B50 ) * ( ( Comput (R1 , B49 , B47) ) . B51 ) ) & (for B52 being Data-Location holds (B52 <> B50 implies ( ( Comput (R1 , B49 , ( B47 + 1 )) ) . B52 ) = ( ( Comput (R1 , B49 , B47) ) . B52 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C52 , C53 being (Element of ( NAT ));
let C54 being (State of ( SCM ));
let C55 , C56 being Data-Location;
assume L75: ( IC ( Comput (R1 , C54 , C52) ) ) = C53;
assume L76: ( R1 . C53 ) = ( MultBy (C55 , C56) );
L77: ( Comput (R1 , C54 , ( C52 + 1 )) ) = ( Exec (( MultBy (C55 , C56) ) , ( Comput (R1 , C54 , C52) )) ) by L76 , L75 , L53;
thus L78: thesis by L77 , L75 , L76 , L53 , AMI_3:5;
end;
theorem
L79: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B53 , B54 being (Element of ( NAT )) holds (for B55 being (State of ( SCM )) holds (for B56 , B57 being Data-Location holds ((( IC ( Comput (R1 , B55 , B53) ) ) = B54 & ( R1 . B54 ) = ( Divide (B56 , B57) ) & B56 <> B57) implies (( IC ( Comput (R1 , B55 , ( B53 + 1 )) ) ) = ( B54 + 1 ) & ( ( Comput (R1 , B55 , ( B53 + 1 )) ) . B56 ) = ( ( ( Comput (R1 , B55 , B53) ) . B56 ) div ( ( Comput (R1 , B55 , B53) ) . B57 ) ) & ( ( Comput (R1 , B55 , ( B53 + 1 )) ) . B57 ) = ( ( ( Comput (R1 , B55 , B53) ) . B56 ) mod ( ( Comput (R1 , B55 , B53) ) . B57 ) ) & (for B58 being Data-Location holds ((B58 <> B56 & B58 <> B57) implies ( ( Comput (R1 , B55 , ( B53 + 1 )) ) . B58 ) = ( ( Comput (R1 , B55 , B53) ) . B58 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C57 , C58 being (Element of ( NAT ));
let C59 being (State of ( SCM ));
let C60 , C61 being Data-Location;
assume L80: ( IC ( Comput (R1 , C59 , C57) ) ) = C58;
assume L81: (( R1 . C58 ) = ( Divide (C60 , C61) ) & C60 <> C61);
L82: ( Comput (R1 , C59 , ( C57 + 1 )) ) = ( Exec (( Divide (C60 , C61) ) , ( Comput (R1 , C59 , C57) )) ) by L81 , L80 , L53;
thus L83: thesis by L82 , L80 , L81 , L53 , AMI_3:6;
end;
theorem
L84: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B59 , B60 being (Element of ( NAT )) holds (for B61 being (State of ( SCM )) holds (for B62 being (Element of ( NAT )) holds ((( IC ( Comput (R1 , B61 , B59) ) ) = B60 & ( R1 . B60 ) = ( SCM-goto B62 )) implies (( IC ( Comput (R1 , B61 , ( B59 + 1 )) ) ) = B62 & (for B63 being Data-Location holds ( ( Comput (R1 , B61 , ( B59 + 1 )) ) . B63 ) = ( ( Comput (R1 , B61 , B59) ) . B63 ))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C62 , C63 being (Element of ( NAT ));
let C64 being (State of ( SCM ));
let C65 being (Element of ( NAT ));
assume L85: (( IC ( Comput (R1 , C64 , C62) ) ) = C63 & ( R1 . C63 ) = ( SCM-goto C65 ));
set D13 = ( Comput (R1 , C64 , ( C62 + 1 )) );
set D14 = ( Comput (R1 , C64 , C62) );
L86: ( dom R1 ) = ( NAT ) by PARTFUN1:def 2;
L87: D13 = ( Exec (( CurInstr (R1 , D14) ) , D14) ) by L51
.= ( Exec (( SCM-goto C65 ) , D14) ) by L85 , L86 , PARTFUN1:def 6;
thus L88: ( IC D13 ) = C65 by L87 , AMI_3:7;
thus L89: thesis by L87 , AMI_3:7;
end;
theorem
L90: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B64 , B65 being (Element of ( NAT )) holds (for B66 being (State of ( SCM )) holds (for B67 being Data-Location holds (for B68 being (Element of ( NAT )) holds ((( IC ( Comput (R1 , B66 , B64) ) ) = B65 & ( R1 . B65 ) = ( B67 =0_goto B68 )) implies ((( ( Comput (R1 , B66 , B64) ) . B67 ) = ( 0 ) implies ( IC ( Comput (R1 , B66 , ( B64 + 1 )) ) ) = B68) & (( ( Comput (R1 , B66 , B64) ) . B67 ) <> ( 0 ) implies ( IC ( Comput (R1 , B66 , ( B64 + 1 )) ) ) = ( B65 + 1 )) & (for B69 being Data-Location holds ( ( Comput (R1 , B66 , ( B64 + 1 )) ) . B69 ) = ( ( Comput (R1 , B66 , B64) ) . B69 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C66 , C67 being (Element of ( NAT ));
let C68 being (State of ( SCM ));
let C69 being Data-Location;
let C70 being (Element of ( NAT ));
assume that
L91: ( IC ( Comput (R1 , C68 , C66) ) ) = C67
and
L92: ( R1 . C67 ) = ( C69 =0_goto C70 );
set D15 = ( Comput (R1 , C68 , ( C66 + 1 )) );
set D16 = ( Comput (R1 , C68 , C66) );
L93: ( dom R1 ) = ( NAT ) by PARTFUN1:def 2;
L94: D15 = ( Exec (( CurInstr (R1 , D16) ) , D16) ) by L51
.= ( Exec (( C69 =0_goto C70 ) , D16) ) by L91 , L92 , L93 , PARTFUN1:def 6;
thus L95: (( D16 . C69 ) = ( 0 ) implies ( IC D15 ) = C70) by L94 , AMI_3:8;
thus L96:now
assume L97: ( D16 . C69 ) <> ( 0 );
thus L98: ( IC D15 ) = ( succ C67 ) by L97 , L91 , L94 , AMI_3:8
.= ( C67 + 1 );
end;
thus L99: thesis by L94 , AMI_3:8;
end;
theorem
L100: (for R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (for B70 , B71 being (Element of ( NAT )) holds (for B72 being (State of ( SCM )) holds (for B73 being Data-Location holds (for B74 being (Element of ( NAT )) holds ((( IC ( Comput (R1 , B72 , B70) ) ) = B71 & ( R1 . B71 ) = ( B73 >0_goto B74 )) implies ((( ( Comput (R1 , B72 , B70) ) . B73 ) > ( 0 ) implies ( IC ( Comput (R1 , B72 , ( B70 + 1 )) ) ) = B74) & (( ( Comput (R1 , B72 , B70) ) . B73 ) <= ( 0 ) implies ( IC ( Comput (R1 , B72 , ( B70 + 1 )) ) ) = ( B71 + 1 )) & (for B75 being Data-Location holds ( ( Comput (R1 , B72 , ( B70 + 1 )) ) . B75 ) = ( ( Comput (R1 , B72 , B70) ) . B75 )))))))))
proof
let R1 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
let C71 , C72 being (Element of ( NAT ));
let C73 being (State of ( SCM ));
let C74 being Data-Location;
let C75 being (Element of ( NAT ));
assume that
L101: ( IC ( Comput (R1 , C73 , C71) ) ) = C72
and
L102: ( R1 . C72 ) = ( C74 >0_goto C75 );
set D17 = ( Comput (R1 , C73 , ( C71 + 1 )) );
set D18 = ( Comput (R1 , C73 , C71) );
L103: ( dom R1 ) = ( NAT ) by PARTFUN1:def 2;
L104: D17 = ( Exec (( CurInstr (R1 , D18) ) , D18) ) by L51
.= ( Exec (( C74 >0_goto C75 ) , D18) ) by L101 , L102 , L103 , PARTFUN1:def 6;
thus L105: (( D18 . C74 ) > ( 0 ) implies ( IC D17 ) = C75) by L104 , AMI_3:9;
thus L106:now
assume L107: ( D18 . C74 ) <= ( 0 );
thus L108: ( IC D17 ) = ( succ C72 ) by L107 , L101 , L104 , AMI_3:9
.= ( C72 + 1 );
end;
thus L109: thesis by L104 , AMI_3:9;
end;
theorem
L110: (( ( halt ( SCM ) ) `1_3 ) = ( 0 ) & (for B76 , B77 being Data-Location holds ( ( B76 := B77 ) `1_3 ) = 1) & (for B78 , B79 being Data-Location holds ( ( AddTo (B78 , B79) ) `1_3 ) = 2) & (for B80 , B81 being Data-Location holds ( ( SubFrom (B80 , B81) ) `1_3 ) = 3) & (for B82 , B83 being Data-Location holds ( ( MultBy (B82 , B83) ) `1_3 ) = 4) & (for B84 , B85 being Data-Location holds ( ( Divide (B84 , B85) ) `1_3 ) = 5) & (for B86 being (Element of ( NAT )) holds ( ( SCM-goto B86 ) `1_3 ) = 6) & (for B87 being Data-Location holds (for B88 being (Element of ( NAT )) holds ( ( B87 =0_goto B88 ) `1_3 ) = 7)) & (for B89 being Data-Location holds (for B90 being (Element of ( NAT )) holds ( ( B89 >0_goto B90 ) `1_3 ) = 8))) by AMI_3:26 , RECDEF_2:def 1;
theorem
L111: (for B91 , B92 , B93 , B94 being Integer holds (for B95 being (State of ( SCM )) holds ((( B95 . ( dl. ( 0 ) ) ) = B91 & ( B95 . ( dl. 1 ) ) = B92 & ( B95 . ( dl. 2 ) ) = B93 & ( B95 . ( dl. 3 ) ) = B94) implies B95 is (State-consisting of <% B91 , B92 , B93 , B94 %>))))
proof
let C76 , C77 , C78 , C79 being Integer;
let C80 being (State of ( SCM ));
assume that
L112: (( C80 . ( dl. ( 0 ) ) ) = C76 & ( C80 . ( dl. 1 ) ) = C77 & ( C80 . ( dl. 2 ) ) = C78 & ( C80 . ( dl. 3 ) ) = C79);
set D19 = <% C76 , C77 , C78 , C79 %>;
L113:
now
let C81 being (Element of ( NAT ));
L114: (( len D19 ) = 4 & 4 = ( 3 + 1 )) by AFINSQ_1:84;
assume L115: C81 < ( len D19 );
L116: C81 <= 3 by L115 , L114 , NAT_1:13;
L117: (C81 = ( 0 ) or C81 = 1 or C81 = 2 or C81 = 3) by L116 , NAT_1:27;
thus L118: ( C80 . ( dl. C81 ) ) = ( D19 . C81 ) by L117 , L112 , AFINSQ_1:85;
end;
thus L119: thesis by L113 , L5;
end;
theorem
L120: (for B96 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (<% ( halt ( SCM ) ) %> c= B96 implies (for B97 being ( 0 ) -started (State-consisting of ( <*> ( INT ) )) holds (B96 halts_on B97 & ( LifeSpan (B96 , B97) ) = ( 0 ) & ( Result (B96 , B97) ) = B97))))
proof
let C82 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L121: <% ( halt ( SCM ) ) %> c= C82;
let C83 being ( 0 ) -started (State-consisting of ( <*> ( INT ) ));
L122: 1 = ( dom <% ( halt ( SCM ) ) %> ) by AFINSQ_1:33;
L123: ( 0 ) in ( dom <% ( halt ( SCM ) ) %> ) by L122 , CARD_1:49 , TARSKI:def 1;
L124: ( C82 . ( ( 0 ) + ( 0 ) ) ) = ( <% ( halt ( SCM ) ) %> . ( 0 ) ) by L123 , L121 , GRFUNC_1:2
.= ( halt ( SCM ) ) by AFINSQ_1:34;
L125: C83 = ( Comput (C82 , C83 , ( 0 )) ) by EXTPRO_1:2;
L126: ( C82 . ( IC C83 ) ) = ( halt ( SCM ) ) by L124 , MEMSTR_0:def 11;
thus L127: C82 halts_on C83 by L126 , L125 , EXTPRO_1:30;
L128: ( dom C82 ) = ( NAT ) by PARTFUN1:def 2;
L129: ( CurInstr (C82 , C83) ) = ( C82 . ( IC C83 ) ) by L128 , PARTFUN1:def 6
.= ( halt ( SCM ) ) by L124 , MEMSTR_0:def 11;
thus L130: ( LifeSpan (C82 , C83) ) = ( 0 ) by L129 , L127 , L125 , EXTPRO_1:def 15;
L131: ( IC C83 ) = ( 0 ) by MEMSTR_0:def 11;
thus L132: thesis by L131 , L124 , L125 , EXTPRO_1:31;
end;
theorem
L133: (for B98 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( ( dl. ( 0 ) ) := ( dl. 1 ) ) %> ^ <% ( halt ( SCM ) ) %> ) c= B98 implies (for B99 , B100 being Integer holds (for B101 being ( 0 ) -started (State-consisting of <% B99 , B100 %>) holds (B98 halts_on B101 & ( LifeSpan (B98 , B101) ) = 1 & ( ( Result (B98 , B101) ) . ( dl. ( 0 ) ) ) = B100 & (for B102 being Data-Location holds (B102 <> ( dl. ( 0 ) ) implies ( ( Result (B98 , B101) ) . B102 ) = ( B101 . B102 ))))))))
proof
let C84 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L134: ( <% ( ( dl. ( 0 ) ) := ( dl. 1 ) ) %> ^ <% ( halt ( SCM ) ) %> ) c= C84;
let C85 , C86 being Integer;
let C87 being ( 0 ) -started (State-consisting of <% C85 , C86 %>);
set D20 = ( Comput (C84 , C87 , ( ( 0 ) + 1 )) );
L135: ( C87 . ( dl. 1 ) ) = C86 by L39;
L136: (( IC C87 ) = ( 0 ) & C87 = ( Comput (C84 , C87 , ( 0 )) )) by EXTPRO_1:2 , MEMSTR_0:def 11;
L137: ( C84 . ( 0 ) ) = ( ( dl. ( 0 ) ) := ( dl. 1 ) ) by L134 , L43;
L138: ( IC D20 ) = ( ( 0 ) + 1 ) by L137 , L136 , L59;
L139: ( C84 . 1 ) = ( halt ( SCM ) ) by L134 , L43;
thus L140: C84 halts_on C87 by L139 , L138 , EXTPRO_1:30;
thus L141: ( LifeSpan (C84 , C87) ) = 1 by L139 , L136 , L138 , EXTPRO_1:33;
L142: ( D20 . ( dl. ( 0 ) ) ) = ( C87 . ( dl. 1 ) ) by L137 , L136 , L59;
thus L143: ( ( Result (C84 , C87) ) . ( dl. ( 0 ) ) ) = C86 by L142 , L139 , L135 , L138 , EXTPRO_1:31;
let C88 being Data-Location;
assume L144: C88 <> ( dl. ( 0 ) );
thus L145: ( ( Result (C84 , C87) ) . C88 ) = ( D20 . C88 ) by L139 , L138 , EXTPRO_1:31
.= ( C87 . C88 ) by L137 , L136 , L144 , L59;
end;
theorem
L146: (for B103 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( AddTo (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= B103 implies (for B104 , B105 being Integer holds (for B106 being ( 0 ) -started (State-consisting of <% B104 , B105 %>) holds (B103 halts_on B106 & ( LifeSpan (B103 , B106) ) = 1 & ( ( Result (B103 , B106) ) . ( dl. ( 0 ) ) ) = ( B104 + B105 ) & (for B107 being Data-Location holds (B107 <> ( dl. ( 0 ) ) implies ( ( Result (B103 , B106) ) . B107 ) = ( B106 . B107 ))))))))
proof
let C89 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L147: ( <% ( AddTo (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= C89;
let C90 , C91 being Integer;
let C92 being ( 0 ) -started (State-consisting of <% C90 , C91 %>);
set D21 = ( Comput (C89 , C92 , ( 0 )) );
set D22 = ( Comput (C89 , C92 , ( ( 0 ) + 1 )) );
L148: C92 = D21 by EXTPRO_1:2;
L149: (( C92 . ( dl. ( 0 ) ) ) = C90 & ( C92 . ( dl. 1 ) ) = C91) by L39;
L150: ( IC C92 ) = ( 0 ) by MEMSTR_0:def 11;
L151: ( C89 . ( 0 ) ) = ( AddTo (( dl. ( 0 ) ) , ( dl. 1 )) ) by L147 , L43;
L152: ( IC D22 ) = ( ( 0 ) + 1 ) by L151 , L150 , L148 , L64;
L153: ( C89 . 1 ) = ( halt ( SCM ) ) by L147 , L43;
thus L154: C89 halts_on C92 by L153 , L152 , EXTPRO_1:30;
thus L155: ( LifeSpan (C89 , C92) ) = 1 by L150 , L153 , L148 , L152 , EXTPRO_1:33;
L156: ( D22 . ( dl. ( 0 ) ) ) = ( ( D21 . ( dl. ( 0 ) ) ) + ( D21 . ( dl. 1 ) ) ) by L150 , L151 , L148 , L64;
thus L157: ( ( Result (C89 , C92) ) . ( dl. ( 0 ) ) ) = ( C90 + C91 ) by L156 , L153 , L149 , L148 , L152 , EXTPRO_1:31;
let C93 being Data-Location;
assume L158: C93 <> ( dl. ( 0 ) );
thus L159: ( ( Result (C89 , C92) ) . C93 ) = ( D22 . C93 ) by L153 , L152 , EXTPRO_1:31
.= ( C92 . C93 ) by L150 , L151 , L148 , L158 , L64;
end;
theorem
L160: (for B108 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( SubFrom (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= B108 implies (for B109 , B110 being Integer holds (for B111 being ( 0 ) -started (State-consisting of <% B109 , B110 %>) holds (B108 halts_on B111 & ( LifeSpan (B108 , B111) ) = 1 & ( ( Result (B108 , B111) ) . ( dl. ( 0 ) ) ) = ( B109 - B110 ) & (for B112 being Data-Location holds (B112 <> ( dl. ( 0 ) ) implies ( ( Result (B108 , B111) ) . B112 ) = ( B111 . B112 ))))))))
proof
let C94 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L161: ( <% ( SubFrom (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= C94;
let C95 , C96 being Integer;
let C97 being ( 0 ) -started (State-consisting of <% C95 , C96 %>);
set D23 = ( Comput (C94 , C97 , ( 0 )) );
set D24 = ( Comput (C94 , C97 , ( ( 0 ) + 1 )) );
L162: C97 = D23 by EXTPRO_1:2;
L163: (( C97 . ( dl. ( 0 ) ) ) = C95 & ( C97 . ( dl. 1 ) ) = C96) by L39;
L164: ( IC C97 ) = ( 0 ) by MEMSTR_0:def 11;
L165: ( C94 . ( 0 ) ) = ( SubFrom (( dl. ( 0 ) ) , ( dl. 1 )) ) by L161 , L43;
L166: ( IC D24 ) = ( ( 0 ) + 1 ) by L165 , L164 , L162 , L69;
L167: ( C94 . 1 ) = ( halt ( SCM ) ) by L161 , L43;
thus L168: C94 halts_on C97 by L167 , L166 , EXTPRO_1:30;
thus L169: ( LifeSpan (C94 , C97) ) = 1 by L164 , L167 , L162 , L166 , EXTPRO_1:33;
L170: ( D24 . ( dl. ( 0 ) ) ) = ( ( D23 . ( dl. ( 0 ) ) ) - ( D23 . ( dl. 1 ) ) ) by L164 , L165 , L162 , L69;
thus L171: ( ( Result (C94 , C97) ) . ( dl. ( 0 ) ) ) = ( C95 - C96 ) by L170 , L167 , L163 , L162 , L166 , EXTPRO_1:31;
let C98 being Data-Location;
assume L172: C98 <> ( dl. ( 0 ) );
thus L173: ( ( Result (C94 , C97) ) . C98 ) = ( D24 . C98 ) by L167 , L166 , EXTPRO_1:31
.= ( C97 . C98 ) by L164 , L165 , L162 , L172 , L69;
end;
theorem
L174: (for B113 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( MultBy (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= B113 implies (for B114 , B115 being Integer holds (for B116 being ( 0 ) -started (State-consisting of <% B114 , B115 %>) holds (B113 halts_on B116 & ( LifeSpan (B113 , B116) ) = 1 & ( ( Result (B113 , B116) ) . ( dl. ( 0 ) ) ) = ( B114 * B115 ) & (for B117 being Data-Location holds (B117 <> ( dl. ( 0 ) ) implies ( ( Result (B113 , B116) ) . B117 ) = ( B116 . B117 ))))))))
proof
let C99 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L175: ( <% ( MultBy (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= C99;
let C100 , C101 being Integer;
let C102 being ( 0 ) -started (State-consisting of <% C100 , C101 %>);
set D25 = ( Comput (C99 , C102 , ( 0 )) );
set D26 = ( Comput (C99 , C102 , ( ( 0 ) + 1 )) );
L176: C102 = D25 by EXTPRO_1:2;
L177: (( C102 . ( dl. ( 0 ) ) ) = C100 & ( C102 . ( dl. 1 ) ) = C101) by L39;
L178: ( IC C102 ) = ( 0 ) by MEMSTR_0:def 11;
L179: ( C99 . ( 0 ) ) = ( MultBy (( dl. ( 0 ) ) , ( dl. 1 )) ) by L175 , L43;
L180: ( IC D26 ) = ( ( 0 ) + 1 ) by L179 , L178 , L176 , L74;
L181: ( C99 . 1 ) = ( halt ( SCM ) ) by L175 , L43;
thus L182: C99 halts_on C102 by L181 , L180 , EXTPRO_1:30;
thus L183: ( LifeSpan (C99 , C102) ) = 1 by L178 , L181 , L176 , L180 , EXTPRO_1:33;
L184: ( D26 . ( dl. ( 0 ) ) ) = ( ( D25 . ( dl. ( 0 ) ) ) * ( D25 . ( dl. 1 ) ) ) by L178 , L179 , L176 , L74;
thus L185: ( ( Result (C99 , C102) ) . ( dl. ( 0 ) ) ) = ( C100 * C101 ) by L184 , L181 , L177 , L176 , L180 , EXTPRO_1:31;
let C103 being Data-Location;
assume L186: C103 <> ( dl. ( 0 ) );
thus L187: ( ( Result (C99 , C102) ) . C103 ) = ( D26 . C103 ) by L181 , L180 , EXTPRO_1:31
.= ( C102 . C103 ) by L178 , L179 , L176 , L186 , L74;
end;
theorem
L188: (for B118 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( Divide (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= B118 implies (for B119 , B120 being Integer holds (for B121 being ( 0 ) -started (State-consisting of <% B119 , B120 %>) holds (B118 halts_on B121 & ( LifeSpan (B118 , B121) ) = 1 & ( ( Result (B118 , B121) ) . ( dl. ( 0 ) ) ) = ( B119 div B120 ) & ( ( Result (B118 , B121) ) . ( dl. 1 ) ) = ( B119 mod B120 ) & (for B122 being Data-Location holds ((B122 <> ( dl. ( 0 ) ) & B122 <> ( dl. 1 )) implies ( ( Result (B118 , B121) ) . B122 ) = ( B121 . B122 ))))))))
proof
let C104 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L189: ( <% ( Divide (( dl. ( 0 ) ) , ( dl. 1 )) ) %> ^ <% ( halt ( SCM ) ) %> ) c= C104;
let C105 , C106 being Integer;
let C107 being ( 0 ) -started (State-consisting of <% C105 , C106 %>);
set D27 = ( Comput (C104 , C107 , ( ( 0 ) + 1 )) );
L190: ( dl. ( 0 ) ) <> ( dl. 1 ) by AMI_3:10;
L191: (( IC C107 ) = ( 0 ) & ( C104 . ( 0 ) ) = ( Divide (( dl. ( 0 ) ) , ( dl. 1 )) )) by L189 , L43 , MEMSTR_0:def 11;
L192: (( C107 . ( dl. ( 0 ) ) ) = C105 & ( C107 . ( dl. 1 ) ) = C106) by L39;
L193: C107 = ( Comput (C104 , C107 , ( 0 )) ) by EXTPRO_1:2;
L194: ( C104 . 1 ) = ( halt ( SCM ) ) by L189 , L43;
L195: ( C104 . ( IC D27 ) ) = ( halt ( SCM ) ) by L194 , L191 , L190 , L193 , L79;
thus L196: C104 halts_on C107 by L195 , EXTPRO_1:30;
L197: ( Divide (( dl. ( 0 ) ) , ( dl. 1 )) ) <> ( halt ( SCM ) ) by L110;
thus L198: ( LifeSpan (C104 , C107) ) = 1 by L197 , L191 , L193 , L195 , EXTPRO_1:32;
thus L199: ( ( Result (C104 , C107) ) . ( dl. ( 0 ) ) ) = ( D27 . ( dl. ( 0 ) ) ) by L195 , EXTPRO_1:31
.= ( C105 div C106 ) by L191 , L192 , L190 , L193 , L79;
thus L200: ( ( Result (C104 , C107) ) . ( dl. 1 ) ) = ( D27 . ( dl. 1 ) ) by L195 , EXTPRO_1:31
.= ( C105 mod C106 ) by L191 , L192 , L190 , L193 , L79;
let C108 being Data-Location;
assume L201: (C108 <> ( dl. ( 0 ) ) & C108 <> ( dl. 1 ));
thus L202: ( ( Result (C104 , C107) ) . C108 ) = ( D27 . C108 ) by L195 , EXTPRO_1:31
.= ( C107 . C108 ) by L191 , L190 , L193 , L201 , L79;
end;
theorem
L203: (for B123 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( SCM-goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= B123 implies (for B124 , B125 being Integer holds (for B126 being ( 0 ) -started (State-consisting of <% B124 , B125 %>) holds (B123 halts_on B126 & ( LifeSpan (B123 , B126) ) = 1 & (for B127 being Data-Location holds ( ( Result (B123 , B126) ) . B127 ) = ( B126 . B127 )))))))
proof
let C109 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L204: ( <% ( SCM-goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= C109;
let C110 , C111 being Integer;
let C112 being ( 0 ) -started (State-consisting of <% C110 , C111 %>);
set D28 = ( Comput (C109 , C112 , ( ( 0 ) + 1 )) );
L205: (( IC C112 ) = ( 0 ) & C112 = ( Comput (C109 , C112 , ( 0 )) )) by EXTPRO_1:2 , MEMSTR_0:def 11;
L206: ( C109 . ( 0 ) ) = ( SCM-goto 1 ) by L204 , L43;
L207: ( IC D28 ) = ( ( 0 ) + 1 ) by L206 , L205 , L84;
L208: ( C109 . 1 ) = ( halt ( SCM ) ) by L204 , L43;
thus L209: C109 halts_on C112 by L208 , L207 , EXTPRO_1:30;
thus L210: ( LifeSpan (C109 , C112) ) = 1 by L208 , L205 , L207 , EXTPRO_1:33;
let C113 being Data-Location;
thus L211: ( ( Result (C109 , C112) ) . C113 ) = ( D28 . C113 ) by L208 , L207 , EXTPRO_1:31
.= ( C112 . C113 ) by L206 , L205 , L84;
end;
theorem
L212: (for B128 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( ( dl. ( 0 ) ) =0_goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= B128 implies (for B129 , B130 being Integer holds (for B131 being ( 0 ) -started (State-consisting of <% B129 , B130 %>) holds (B128 halts_on B131 & ( LifeSpan (B128 , B131) ) = 1 & (for B132 being Data-Location holds ( ( Result (B128 , B131) ) . B132 ) = ( B131 . B132 )))))))
proof
let C114 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L213: ( <% ( ( dl. ( 0 ) ) =0_goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= C114;
let C115 , C116 being Integer;
let C117 being ( 0 ) -started (State-consisting of <% C115 , C116 %>);
set D29 = ( Comput (C114 , C117 , ( ( 0 ) + 1 )) );
L214: ( C114 . ( 0 ) ) = ( ( dl. ( 0 ) ) =0_goto 1 ) by L213 , L43;
L215: ( C114 . 1 ) = ( halt ( SCM ) ) by L213 , L43;
L216: (( IC C117 ) = ( 0 ) & C117 = ( Comput (C114 , C117 , ( 0 )) )) by EXTPRO_1:2 , MEMSTR_0:def 11;
L217: ( C117 . ( dl. ( 0 ) ) ) = C115 by L39;
L218: ( IC D29 ) = ( ( 0 ) + 1 ) by L217 , L214 , L216 , L90;
thus L219: C114 halts_on C117 by L218 , L215 , EXTPRO_1:30;
thus L220: ( LifeSpan (C114 , C117) ) = 1 by L215 , L216 , L218 , EXTPRO_1:33;
let C118 being Data-Location;
thus L221: ( ( Result (C114 , C117) ) . C118 ) = ( D29 . C118 ) by L215 , L218 , EXTPRO_1:31
.= ( C117 . C118 ) by L214 , L216 , L90;
end;
theorem
L222: (for B133 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function holds (( <% ( ( dl. ( 0 ) ) >0_goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= B133 implies (for B134 , B135 being Integer holds (for B136 being ( 0 ) -started (State-consisting of <% B134 , B135 %>) holds (B133 halts_on B136 & ( LifeSpan (B133 , B136) ) = 1 & (for B137 being Data-Location holds ( ( Result (B133 , B136) ) . B137 ) = ( B136 . B137 )))))))
proof
let C119 being  total ( NAT ) -defined (the InstructionsF of ( SCM )) -valued Function;
assume that
L223: ( <% ( ( dl. ( 0 ) ) >0_goto 1 ) %> ^ <% ( halt ( SCM ) ) %> ) c= C119;
let C120 , C121 being Integer;
let C122 being ( 0 ) -started (State-consisting of <% C120 , C121 %>);
set D30 = ( Comput (C119 , C122 , ( ( 0 ) + 1 )) );
L224: ( C119 . ( 0 ) ) = ( ( dl. ( 0 ) ) >0_goto 1 ) by L223 , L43;
L225: ( C119 . 1 ) = ( halt ( SCM ) ) by L223 , L43;
L226: (( IC C122 ) = ( 0 ) & C122 = ( Comput (C119 , C122 , ( 0 )) )) by EXTPRO_1:2 , MEMSTR_0:def 11;
L227: ( C122 . ( dl. ( 0 ) ) ) = C120 by L39;
L228: ( IC D30 ) = ( ( 0 ) + 1 ) by L227 , L224 , L226 , L100;
thus L229: C119 halts_on C122 by L228 , L225 , EXTPRO_1:30;
thus L230: ( LifeSpan (C119 , C122) ) = 1 by L225 , L226 , L228 , EXTPRO_1:33;
let C123 being Data-Location;
thus L231: ( ( Result (C119 , C122) ) . C123 ) = ( D30 . C123 ) by L225 , L228 , EXTPRO_1:31
.= ( C122 . C123 ) by L224 , L226 , L100;
end;
theorem
L232: (for B138 being (State of ( SCM )) holds B138 is (State-consisting of ( <*> ( INT ) )))
proof
let C124 being (State of ( SCM ));
let C125 being (Element of ( NAT ));
thus L233: thesis;
end;
