:: The Construction of { \bf SCM } over Ring
::  by Artur Korni{\l}owicz
::
:: Received November 29, 1998
:: Copyright (c) 1998-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, CARD_1, AMI_2, XBOOLE_0, STRUCT_0, ZFMISC_1,
      ARYTM_3, SUPINF_2, RELAT_1, FINSEQ_1, FUNCSDOM, FUNCT_1, CARD_3, AMI_1,
      NAT_1, FUNCT_4, FUNCOP_1, ORDINAL1, ARYTM_1, FUNCT_5, TARSKI, SCMRING1,
      GROUP_9, AFINSQ_1, PBOOLE;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, RELAT_1, FUNCT_1, FUNCT_2,
      BINOP_1, PBOOLE, AFINSQ_1, CARD_1, ORDINAL1, NUMBERS, STRUCT_0, ALGSTR_0,
      FUNCSDOM, MCART_1, CARD_3, FINSEQ_1, FUNCOP_1, FUNCT_4, FUNCT_5, AMI_2,
      SCMRINGI;
 constructors REALSET2, FUNCT_5, RELSET_1, AMI_2, FUNCOP_1, COMPOS_1, SCMRINGI,
      BINOP_1, FUNCT_4, XTUPLE_0;
 registrations XBOOLE_0, ORDINAL1, FUNCOP_1, FINSEQ_1, CARD_3, STRUCT_0, AMI_2,
      CARD_1, ORDINAL2, FUNCT_1, FUNCT_2, RELSET_1, AFINSQ_1, SCM_INST,
      XTUPLE_0;
 requirements NUMERALS, SUBSET, BOOLE;
 definitions TARSKI, FINSEQ_1, FUNCOP_1, FUNCT_1, XTUPLE_0;
 theorems AMI_2, CARD_3, FUNCOP_1, FINSEQ_1, FUNCT_1, FUNCT_2, FUNCT_4,
      MCART_1, TARSKI, ZFMISC_1, XBOOLE_0, ORDINAL1, RELAT_1, PARTFUN1,
      AFINSQ_1, FUNCT_5, XTUPLE_0;
 schemes BINOP_1;

begin
definition
canceled 2;
let C1 being non  empty 1-sorted;
func SCM-VAL C1 -> (ManySortedSet of 2) equals 
<% ( NAT ) , (the carrier of C1) %>;
coherence;
end;
L2: (for R11 being non  empty 1-sorted holds ( dom ( ( SCM-VAL R11 ) * ( SCM-OK ) ) ) = ( SCM-Memory ))
proof
let R11 being non  empty 1-sorted;
L3: ( dom ( SCM-OK ) ) = ( SCM-Memory ) by PARTFUN1:def 2;
L4: ( len <% ( NAT ) , (the carrier of R11) %> ) = 2 by AFINSQ_1:38;
L5: ( rng ( SCM-OK ) ) c= ( dom ( SCM-VAL R11 ) ) by L4 , RELAT_1:def 19;
thus L6: ( dom ( ( SCM-VAL R11 ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by L5 , L3 , RELAT_1:27;
end;
canceled 1;
theorem
L7: (for R12 being non  empty 1-sorted holds ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . ( NAT ) ) = ( NAT ))
proof
let R12 being non  empty 1-sorted;
L8: ( NAT ) in ( SCM-Memory ) by AMI_2:22;
L9: ( NAT ) in ( dom ( SCM-OK ) ) by L8 , PARTFUN1:def 2;
L10: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . ( NAT ) ) = ( ( SCM-VAL R12 ) . ( ( SCM-OK ) . ( NAT ) ) ) by L9 , FUNCT_1:13;
L11: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . ( NAT ) ) = ( ( SCM-VAL R12 ) . ( 0 ) ) by L10 , L8 , AMI_2:def 4;
thus L12: thesis by L11 , AFINSQ_1:38;
end;
theorem
L13: (for R12 being non  empty 1-sorted holds (for B1 being (Element of ( SCM-Memory )) holds (B1 in ( SCM-Data-Loc ) implies ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . B1 ) = (the carrier of R12))))
proof
let R12 being non  empty 1-sorted;
let C2 being (Element of ( SCM-Memory ));
L14: C2 in ( SCM-Memory );
L15: C2 in ( dom ( SCM-OK ) ) by L14 , PARTFUN1:def 2;
L16: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . C2 ) = ( ( SCM-VAL R12 ) . ( ( SCM-OK ) . C2 ) ) by L15 , FUNCT_1:13;
assume L17: C2 in ( SCM-Data-Loc );
L18: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . C2 ) = ( ( SCM-VAL R12 ) . 1 ) by L17 , L16 , AMI_2:def 4;
thus L19: thesis by L18 , AFINSQ_1:38;
end;
registration
let R12 being non  empty 1-sorted;
cluster ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ->  non-empty;
coherence
proof
set D1 = ( ( SCM-VAL R12 ) * ( SCM-OK ) );
let C3 being set;
assume L20: C3 in ( dom D1 );
L21: ( dom D1 ) = ( SCM-Memory ) by L2;
per cases  by L21 , L20 , AMI_2:26;
suppose L22: C3 = ( NAT );

L23: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . C3 ) = ( NAT ) by L22 , L7;
thus L24: ( D1 . C3 ) is non  empty by L23;
end;
suppose L25: C3 in ( SCM-Data-Loc );

L26: ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . C3 ) = (the carrier of R12) by L25 , L13;
thus L27: ( D1 . C3 ) is non  empty by L26;
end;
end;
end;
definition
let C4 being non  empty 1-sorted;
mode SCM-State of C4
 is (Element of ( product ( ( SCM-VAL C4 ) * ( SCM-OK ) ) ));
end;
theorem
L31: (for R7 being (Element of ( SCM-Data-Loc )) holds (for R12 being non  empty 1-sorted holds ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . R7 ) = (the carrier of R12))) by L13;
theorem
L32: (for R12 being non  empty 1-sorted holds ( pi (( product ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) , ( NAT )) ) = ( NAT ))
proof
let R12 being non  empty 1-sorted;
L33: ( NAT ) in ( dom ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) by L2 , AMI_2:22;
thus L34: ( pi (( product ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) , ( NAT )) ) = ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . ( NAT ) ) by L33 , CARD_3:12
.= ( NAT ) by L7;
end;
theorem
L35: (for R12 being non  empty 1-sorted holds (for B2 being (Element of ( SCM-Data-Loc )) holds ( pi (( product ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) , B2) ) = (the carrier of R12)))
proof
let R12 being non  empty 1-sorted;
let C5 being (Element of ( SCM-Data-Loc ));
L36: C5 in ( SCM-Memory );
L37: C5 in ( dom ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) by L36 , L2;
thus L38: ( pi (( product ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) , C5) ) = ( ( ( SCM-VAL R12 ) * ( SCM-OK ) ) . C5 ) by L37 , CARD_3:12
.= (the carrier of R12) by L13;
end;
definition
let R12 being non  empty 1-sorted;
let C6 being (SCM-State of R12);
func IC C6 -> (Element of ( NAT )) equals 
( C6 . ( NAT ) );
coherence
proof
L39: ( C6 . ( NAT ) ) in ( pi (( product ( ( SCM-VAL R12 ) * ( SCM-OK ) ) ) , ( NAT )) ) by CARD_3:def 6;
thus L40: thesis by L39 , L32;
end;
end;
definition
let C7 being non  empty 1-sorted;
let C8 being (SCM-State of C7);
let C9 being Nat;
func SCM-Chg (C8 , C9) -> (SCM-State of C7) equals 
( C8 +* ( ( NAT ) .--> C9 ) );
coherence
proof
L42:
now
let C10 being set;
assume L43: C10 in ( dom ( ( SCM-VAL C7 ) * ( SCM-OK ) ) );
per cases ;
suppose L44: C10 = ( NAT );

L45: { ( NAT ) } = ( dom ( ( NAT ) .--> C9 ) ) by FUNCOP_1:13;
L46: ( NAT ) in ( dom ( ( NAT ) .--> C9 ) ) by L45 , TARSKI:def 1;
L47: ( ( C8 +* ( ( NAT ) .--> C9 ) ) . ( NAT ) ) = ( ( ( NAT ) .--> C9 ) . ( NAT ) ) by L46 , FUNCT_4:13
.= C9 by FUNCOP_1:72;
L48: ( ( C8 +* ( ( NAT ) .--> C9 ) ) . ( NAT ) ) in ( NAT ) by L47 , ORDINAL1:def 12;
thus L49: ( ( C8 +* ( ( NAT ) .--> C9 ) ) . C10 ) in ( ( ( SCM-VAL C7 ) * ( SCM-OK ) ) . C10 ) by L48 , L44 , L7;
end;
suppose L50: C10 <> ( NAT );

L51: { ( NAT ) } = ( dom ( ( NAT ) .--> C9 ) ) by FUNCOP_1:13;
L52: (not C10 in ( dom ( ( NAT ) .--> C9 ) )) by L51 , L50 , TARSKI:def 1;
L53: ( ( C8 +* ( ( NAT ) .--> C9 ) ) . C10 ) = ( C8 . C10 ) by L52 , FUNCT_4:11;
thus L54: ( ( C8 +* ( ( NAT ) .--> C9 ) ) . C10 ) in ( ( ( SCM-VAL C7 ) * ( SCM-OK ) ) . C10 ) by L53 , L43 , CARD_3:9;
end;
end;
L56: ( dom ( ( SCM-VAL C7 ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by L2;
L57: ( dom C8 ) = ( SCM-Memory ) by L56 , CARD_3:9;
L58: ( dom ( C8 +* ( ( NAT ) .--> C9 ) ) ) = ( ( SCM-Memory ) \/ ( dom ( ( NAT ) .--> C9 ) ) ) by L57 , FUNCT_4:def 1
.= ( ( SCM-Memory ) \/ { ( NAT ) } ) by FUNCOP_1:13
.= ( dom ( ( SCM-VAL C7 ) * ( SCM-OK ) ) ) by L56 , AMI_2:22 , ZFMISC_1:40;
thus L59: thesis by L58 , L42 , CARD_3:9;
end;
end;
theorem
L61: (for R12 being non  empty 1-sorted holds (for B3 being (SCM-State of R12) holds (for B4 being Nat holds ( ( SCM-Chg (B3 , B4) ) . ( NAT ) ) = B4)))
proof
let R12 being non  empty 1-sorted;
let C11 being (SCM-State of R12);
let C12 being Nat;
L62: { ( NAT ) } = ( dom ( ( NAT ) .--> C12 ) ) by FUNCOP_1:13;
L63: ( NAT ) in ( dom ( ( NAT ) .--> C12 ) ) by L62 , TARSKI:def 1;
thus L64: ( ( SCM-Chg (C11 , C12) ) . ( NAT ) ) = ( ( ( NAT ) .--> C12 ) . ( NAT ) ) by L63 , FUNCT_4:13
.= C12 by FUNCOP_1:72;
end;
theorem
L65: (for R12 being non  empty 1-sorted holds (for B5 being (SCM-State of R12) holds (for B6 being Nat holds (for B7 being (Element of ( SCM-Data-Loc )) holds ( ( SCM-Chg (B5 , B6) ) . B7 ) = ( B5 . B7 )))))
proof
let R12 being non  empty 1-sorted;
let C13 being (SCM-State of R12);
let C14 being Nat;
let C15 being (Element of ( SCM-Data-Loc ));
L66: { ( NAT ) } = ( dom ( ( NAT ) .--> C14 ) ) by FUNCOP_1:13;
L67: ( NAT ) in ( SCM-Memory ) by AMI_2:22;
L68: (( ( SCM-OK ) . ( NAT ) ) = ( 0 ) & ( ( SCM-OK ) . C15 ) = 1) by L67 , AMI_2:def 4;
L69: (not C15 in ( dom ( ( NAT ) .--> C14 ) )) by L68 , L66 , TARSKI:def 1;
thus L70: thesis by L69 , FUNCT_4:11;
end;
theorem
L71: (for R12 being non  empty 1-sorted holds (for B8 being (SCM-State of R12) holds (for B9 , B10 being Nat holds ( ( SCM-Chg (B8 , B9) ) . B10 ) = ( B8 . B10 ))))
proof
let R12 being non  empty 1-sorted;
let C16 being (SCM-State of R12);
let C17 , C18 being Nat;
L72: { ( NAT ) } = ( dom ( ( NAT ) .--> C17 ) ) by FUNCOP_1:13;
L73: (not C18 in ( dom ( ( NAT ) .--> C17 ) )) by L72 , TARSKI:def 1;
thus L74: thesis by L73 , FUNCT_4:11;
end;
definition
let C19 being non  empty 1-sorted;
let C20 being (SCM-State of C19);
let C21 being (Element of ( SCM-Data-Loc ));
let C22 being (Element of C19);
func SCM-Chg (C20 , C21 , C22) -> (SCM-State of C19) equals 
( C20 +* ( C21 .--> C22 ) );
coherence
proof
L75:
now
let C23 being set;
assume L76: C23 in ( dom ( ( SCM-VAL C19 ) * ( SCM-OK ) ) );
per cases ;
suppose L77: C23 = C21;

L78: { C21 } = ( dom ( C21 .--> C22 ) ) by FUNCOP_1:13;
L79: C21 in ( dom ( C21 .--> C22 ) ) by L78 , TARSKI:def 1;
L80: ( ( C20 +* ( C21 .--> C22 ) ) . C21 ) = ( ( C21 .--> C22 ) . C21 ) by L79 , FUNCT_4:13
.= C22 by FUNCOP_1:72;
L81: ( ( C20 +* ( C21 .--> C22 ) ) . C21 ) in (the carrier of C19) by L80;
thus L82: ( ( C20 +* ( C21 .--> C22 ) ) . C23 ) in ( ( ( SCM-VAL C19 ) * ( SCM-OK ) ) . C23 ) by L81 , L77 , L13;
end;
suppose L83: C23 <> C21;

L84: { C21 } = ( dom ( C21 .--> C22 ) ) by FUNCOP_1:13;
L85: (not C23 in ( dom ( C21 .--> C22 ) )) by L84 , L83 , TARSKI:def 1;
L86: ( ( C20 +* ( C21 .--> C22 ) ) . C23 ) = ( C20 . C23 ) by L85 , FUNCT_4:11;
thus L87: ( ( C20 +* ( C21 .--> C22 ) ) . C23 ) in ( ( ( SCM-VAL C19 ) * ( SCM-OK ) ) . C23 ) by L86 , L76 , CARD_3:9;
end;
end;
L89: ( dom ( ( SCM-VAL C19 ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by L2;
L90: ( dom C20 ) = ( SCM-Memory ) by L89 , CARD_3:9;
L91: ( dom ( C20 +* ( C21 .--> C22 ) ) ) = ( ( SCM-Memory ) \/ ( dom ( C21 .--> C22 ) ) ) by L90 , FUNCT_4:def 1
.= ( ( SCM-Memory ) \/ { C21 } ) by FUNCOP_1:13
.= ( dom ( ( SCM-VAL C19 ) * ( SCM-OK ) ) ) by L89 , ZFMISC_1:40;
thus L92: thesis by L91 , L75 , CARD_3:9;
end;
end;
theorem
L94: (for R12 being non  empty 1-sorted holds (for B11 being (SCM-State of R12) holds (for B12 being (Element of ( SCM-Data-Loc )) holds (for B13 being (Element of R12) holds ( ( SCM-Chg (B11 , B12 , B13) ) . ( NAT ) ) = ( B11 . ( NAT ) )))))
proof
let R12 being non  empty 1-sorted;
let C24 being (SCM-State of R12);
let C25 being (Element of ( SCM-Data-Loc ));
let C26 being (Element of R12);
L95: { C25 } = ( dom ( C25 .--> C26 ) ) by FUNCOP_1:13;
L96: ( NAT ) in ( SCM-Memory ) by AMI_2:22;
L97: (( ( SCM-OK ) . ( NAT ) ) = ( 0 ) & ( ( SCM-OK ) . C25 ) = 1) by L96 , AMI_2:def 4;
L98: (not ( NAT ) in ( dom ( C25 .--> C26 ) )) by L97 , L95 , TARSKI:def 1;
thus L99: thesis by L98 , FUNCT_4:11;
end;
theorem
L100: (for R12 being non  empty 1-sorted holds (for B14 being (SCM-State of R12) holds (for B15 being (Element of ( SCM-Data-Loc )) holds (for B16 being (Element of R12) holds ( ( SCM-Chg (B14 , B15 , B16) ) . B15 ) = B16))))
proof
let R12 being non  empty 1-sorted;
let C27 being (SCM-State of R12);
let C28 being (Element of ( SCM-Data-Loc ));
let C29 being (Element of R12);
L101: { C28 } = ( dom ( C28 .--> C29 ) ) by FUNCOP_1:13;
L102: C28 in ( dom ( C28 .--> C29 ) ) by L101 , TARSKI:def 1;
thus L103: ( ( SCM-Chg (C27 , C28 , C29) ) . C28 ) = ( ( C28 .--> C29 ) . C28 ) by L102 , FUNCT_4:13
.= C29 by FUNCOP_1:72;
end;
theorem
L104: (for R12 being non  empty 1-sorted holds (for B17 being (SCM-State of R12) holds (for B18 being (Element of ( SCM-Data-Loc )) holds (for B19 being (Element of R12) holds (for B20 being (Element of ( SCM-Data-Loc )) holds (B20 <> B18 implies ( ( SCM-Chg (B17 , B18 , B19) ) . B20 ) = ( B17 . B20 )))))))
proof
let R12 being non  empty 1-sorted;
let C30 being (SCM-State of R12);
let C31 being (Element of ( SCM-Data-Loc ));
let C32 being (Element of R12);
let C33 being (Element of ( SCM-Data-Loc ));
assume that
L105: C33 <> C31;
L106: { C31 } = ( dom ( C31 .--> C32 ) ) by FUNCOP_1:13;
L107: (not C33 in ( dom ( C31 .--> C32 ) )) by L106 , L105 , TARSKI:def 1;
thus L108: thesis by L107 , FUNCT_4:11;
end;
definition
let C34 being non  empty 1-sorted;
let C35 being (SCM-State of C34);
let C36 being (Element of ( SCM-Data-Loc ));
redefine func C35 . C36 -> (Element of C34);

coherence
proof
L109: ( C35 . C36 ) in ( pi (( product ( ( SCM-VAL C34 ) * ( SCM-OK ) ) ) , C36) ) by CARD_3:def 6;
thus L110: thesis by L109 , L35;
end;
end;
definition
let C37 being non  empty 1-sorted;
let C38 being (Element of ( SCM-Data-Loc ));
let C39 being (Element of C37);
redefine func <*C38 , C39 *> -> (FinSequence of ( ( SCM-Data-Loc ) \/ (the carrier of C37) ));

coherence
proof
let C40 being set;
L112: ( dom <* C38 , C39 *> ) = { 1 , 2 } by FINSEQ_1:2 , FINSEQ_1:89;
assume L113: C40 in ( rng <* C38 , C39 *> );
consider C41 being set such that L114: C41 in ( dom <* C38 , C39 *> ) and L115: ( <* C38 , C39 *> . C41 ) = C40 by L113 , FUNCT_1:def 3;
per cases  by L114 , L112 , TARSKI:def 2;
suppose L116: C41 = 1;

L117: C40 = C38 by L116 , L115 , FINSEQ_1:44;
thus L118: thesis by L117 , XBOOLE_0:def 3;
end;
suppose L119: C41 = 2;

L120: C40 = C39 by L119 , L115 , FINSEQ_1:44;
thus L121: thesis by L120 , XBOOLE_0:def 3;
end;
end;
end;
definition
canceled 7;
let C42 being Ring;
let C43 being (Element of ( SCM-Instr C42 ));
let C44 being (SCM-State of C42);
func SCM-Exec-Res (C43 , C44) -> (SCM-State of C42) equals 
( SCM-Chg (( SCM-Chg (C44 , ( C43 address_1 ) , ( C44 . ( C43 address_2 ) )) ) , ( succ ( IC C44 ) )) ) if (ex B21 , B22 being (Element of ( SCM-Data-Loc )) st C43 = [ 1 , ( {} ) , <* B21 , B22 *> ]) , ( SCM-Chg (( SCM-Chg (C44 , ( C43 address_1 ) , ( ( C44 . ( C43 address_1 ) ) + ( C44 . ( C43 address_2 ) ) )) ) , ( succ ( IC C44 ) )) ) if (ex B23 , B24 being (Element of ( SCM-Data-Loc )) st C43 = [ 2 , ( {} ) , <* B23 , B24 *> ]) , ( SCM-Chg (( SCM-Chg (C44 , ( C43 address_1 ) , ( ( C44 . ( C43 address_1 ) ) - ( C44 . ( C43 address_2 ) ) )) ) , ( succ ( IC C44 ) )) ) if (ex B25 , B26 being (Element of ( SCM-Data-Loc )) st C43 = [ 3 , ( {} ) , <* B25 , B26 *> ]) , ( SCM-Chg (( SCM-Chg (C44 , ( C43 address_1 ) , ( ( C44 . ( C43 address_1 ) ) * ( C44 . ( C43 address_2 ) ) )) ) , ( succ ( IC C44 ) )) ) if (ex B27 , B28 being (Element of ( SCM-Data-Loc )) st C43 = [ 4 , ( {} ) , <* B27 , B28 *> ]) , ( SCM-Chg (C44 , ( C43 jump_address )) ) if (ex B29 being (Element of ( NAT )) st C43 = [ 6 , <* B29 *> , ( {} ) ]) , ( SCM-Chg (C44 , ( IFEQ (( C44 . ( C43 cond_address ) ) , ( 0. C42 ) , ( C43 cjump_address ) , ( succ ( IC C44 ) )) )) ) if (ex B30 being (Element of ( NAT )) st (ex B31 being (Element of ( SCM-Data-Loc )) st C43 = [ 7 , <* B30 *> , <* B31 *> ])) , ( SCM-Chg (( SCM-Chg (C44 , ( C43 const_address ) , ( C43 const_value )) ) , ( succ ( IC C44 ) )) ) if (ex B32 being (Element of ( SCM-Data-Loc )) st (ex B33 being (Element of C42) st C43 = [ 5 , ( {} ) , <* B32 , B33 *> ])) otherwise C44;
coherence;
consistency by XTUPLE_0:3;
end;
definition
let C45 being Ring;
func SCM-Exec C45 -> (Action of ( SCM-Instr C45 ) , ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) )) means 
(for B34 being (Element of ( SCM-Instr C45 )) holds (for B35 being (SCM-State of C45) holds ( ( it . B34 ) . B35 ) = ( SCM-Exec-Res (B34 , B35) )));
existence
proof
deffunc H1((Element of ( SCM-Instr C45 )) , (SCM-State of C45)) = ( SCM-Exec-Res ($1 , $2) );
consider C46 being (Function of [: ( SCM-Instr C45 ) , ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) ) :] , ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) )) such that L125: (for B36 being (Element of ( SCM-Instr C45 )) holds (for B37 being (SCM-State of C45) holds ( C46 . (B36 , B37) ) = H1(B36 , B37))) from BINOP_1:sch 4;
take ( curry C46 );
let C47 being (Element of ( SCM-Instr C45 ));
let C48 being (SCM-State of C45);
thus L126: ( ( ( curry C46 ) . C47 ) . C48 ) = ( C46 . (C47 , C48) ) by FUNCT_5:69
.= ( SCM-Exec-Res (C47 , C48) ) by L125;
end;
uniqueness
proof
let C49 , C50 being (Action of ( SCM-Instr C45 ) , ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) ));
assume that
L127: (for B38 being (Element of ( SCM-Instr C45 )) holds (for B39 being (SCM-State of C45) holds ( ( C49 . B38 ) . B39 ) = ( SCM-Exec-Res (B38 , B39) )))
and
L128: (for B40 being (Element of ( SCM-Instr C45 )) holds (for B41 being (SCM-State of C45) holds ( ( C50 . B40 ) . B41 ) = ( SCM-Exec-Res (B40 , B41) )));
L129:
now
let C51 being (Element of ( SCM-Instr C45 ));
reconsider D2 = ( C50 . C51 ) , D3 = ( C49 . C51 ) as (Function of ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) ) , ( product ( ( SCM-VAL C45 ) * ( SCM-OK ) ) )) by FUNCT_2:66;
L130:
now
let C52 being (SCM-State of C45);
thus L131: ( D3 . C52 ) = ( SCM-Exec-Res (C51 , C52) ) by L127
.= ( D2 . C52 ) by L128;
end;
thus L132: ( C49 . C51 ) = ( C50 . C51 ) by L130 , FUNCT_2:63;
end;
thus L133: C49 = C50 by L129 , FUNCT_2:63;
end;
end;
canceled 6;
theorem
L135: (for R11 being non  empty 1-sorted holds (for B42 being (SCM-State of R11) holds ( dom B42 ) = ( SCM-Memory )))
proof
let R11 being non  empty 1-sorted;
let C53 being (SCM-State of R11);
L136: ( dom C53 ) = ( dom ( ( SCM-VAL R11 ) * ( SCM-OK ) ) ) by CARD_3:9;
thus L137: thesis by L136 , L2;
end;
