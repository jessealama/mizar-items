:: Calculus of Quantifiers. Deduction Theorem
::  by Agata Darmochwa\l
::
:: Received October 24, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies SUBSET_1, CQC_LANG, QC_LANG1, FINSEQ_1, ZFMISC_1, CQC_THE1,
      NUMBERS, XBOOLEAN, BVFUNC_2, XBOOLE_0, FUNCT_1, TARSKI, RCOMP_1, MCART_1,
      NAT_1, XXREAL_0, ARYTM_3, CARD_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, ORDINAL1, NAT_1,
      FINSEQ_1, FUNCT_1, XTUPLE_0, MCART_1, DOMAIN_1, QC_LANG1, QC_LANG2,
      CQC_LANG, CQC_THE1, XXREAL_0;
 constructors DOMAIN_1, XXREAL_0, XREAL_0, CQC_THE1, XTUPLE_0;
 registrations XBOOLE_0, RELSET_1, XREAL_0, CQC_LANG, ORDINAL1, LUKASI_1,
      XTUPLE_0;
 requirements NUMERALS, SUBSET, BOOLE;
 definitions CQC_THE1, XTUPLE_0;
 theorems TARSKI, ZFMISC_1, LUKASI_1, CQC_LANG, CQC_THE1, ENUMSET1, QC_LANG1,
      QC_LANG2, QC_LANG3, PROCAL_1, XBOOLE_0, XBOOLE_1, XXREAL_0, ORDINAL1;
 schemes NAT_1;

begin
theorem
L1: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( R7 => ( R8 => R9 ) ) is  valid implies ( ( R7 '&' R8 ) => R9 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
L2: ( ( R7 => ( R8 => R9 ) ) => ( ( R7 '&' R8 ) => R9 ) ) in ( TAUT R1 ) by PROCAL_1:32;
assume L3: ( R7 => ( R8 => R9 ) ) in ( TAUT R1 );
thus L4: ( ( R7 '&' R8 ) => R9 ) in ( TAUT R1 ) by L3 , L2 , CQC_THE1:46;
end;
theorem
L5: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( R7 => ( R8 => R9 ) ) is  valid implies ( ( R8 '&' R7 ) => R9 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
assume L6: ( R7 => ( R8 => R9 ) ) in ( TAUT R1 );
L7: ( R7 => ( R8 => R9 ) ) is  valid by L6 , CQC_THE1:def 10;
L8: ( ( R7 '&' R8 ) => R9 ) is  valid by L7 , L1;
L9: ( ( R7 '&' R8 ) => R9 ) in ( TAUT R1 ) by L8 , CQC_THE1:def 10;
L10: ( ( R8 '&' R7 ) => ( R7 '&' R8 ) ) in ( TAUT R1 ) by CQC_THE1:45;
thus L11: ( ( R8 '&' R7 ) => R9 ) in ( TAUT R1 ) by L10 , L9 , LUKASI_1:3;
end;
theorem
L12: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( ( R7 '&' R8 ) => R9 ) is  valid implies ( R7 => ( R8 => R9 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
L13: ( ( ( R7 '&' R8 ) => R9 ) => ( R7 => ( R8 => R9 ) ) ) in ( TAUT R1 ) by PROCAL_1:31;
assume L14: ( ( R7 '&' R8 ) => R9 ) in ( TAUT R1 );
thus L15: ( R7 => ( R8 => R9 ) ) in ( TAUT R1 ) by L14 , L13 , CQC_THE1:46;
end;
theorem
L16: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( ( R7 '&' R8 ) => R9 ) is  valid implies ( R8 => ( R7 => R9 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
L17: ( ( R8 '&' R7 ) => ( R7 '&' R8 ) ) in ( TAUT R1 ) by CQC_THE1:45;
assume L18: ( ( R7 '&' R8 ) => R9 ) in ( TAUT R1 );
L19: ( ( R8 '&' R7 ) => R9 ) in ( TAUT R1 ) by L18 , L17 , LUKASI_1:3;
L20: ( ( R8 '&' R7 ) => R9 ) is  valid by L19 , CQC_THE1:def 10;
L21: ( R8 => ( R7 => R9 ) ) is  valid by L20 , L12;
thus L22: ( R8 => ( R7 => R9 ) ) in ( TAUT R1 ) by L21 , CQC_THE1:def 10;
end;
L23: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (( ( R7 '&' R8 ) => R7 ) is  valid & ( ( R7 '&' R8 ) => R8 ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
thus L24: (( ( R7 '&' R8 ) => R7 ) in ( TAUT R1 ) & ( ( R7 '&' R8 ) => R8 ) in ( TAUT R1 )) by PROCAL_1:19 , PROCAL_1:21;
end;
L25: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (( R7 '&' R8 ) is  valid implies (R7 is  valid & R8 is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
assume L26: ( R7 '&' R8 ) is  valid;
L27: (( ( R7 '&' R8 ) => R7 ) is  valid & ( ( R7 '&' R8 ) => R8 ) is  valid) by L23;
thus L28: thesis by L27 , L26 , CQC_THE1:65;
end;
L29: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((( R7 => R8 ) is  valid & ( R7 => R9 ) is  valid) implies ( R7 => ( R8 '&' R9 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
assume L30: (( R7 => R8 ) in ( TAUT R1 ) & ( R7 => R9 ) in ( TAUT R1 ));
thus L31: ( R7 => ( R8 '&' R9 ) ) in ( TAUT R1 ) by L30 , PROCAL_1:52;
end;
L32: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds ((( R7 => R8 ) is  valid & ( R9 => R10 ) is  valid) implies ( ( R7 'or' R9 ) => ( R8 'or' R10 ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
assume L33: (( R7 => R8 ) in ( TAUT R1 ) & ( R9 => R10 ) in ( TAUT R1 ));
thus L34: ( ( R7 'or' R9 ) => ( R8 'or' R10 ) ) in ( TAUT R1 ) by L33 , PROCAL_1:57;
end;
L35: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds ((( R7 => R8 ) is  valid & ( R9 => R10 ) is  valid) implies ( ( R7 '&' R9 ) => ( R8 '&' R10 ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
assume L36: (( R7 => R8 ) in ( TAUT R1 ) & ( R9 => R10 ) in ( TAUT R1 ));
thus L37: ( ( R7 '&' R9 ) => ( R8 '&' R10 ) ) in ( TAUT R1 ) by L36 , PROCAL_1:56;
end;
L38: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (( R7 => ( R7 'or' R8 ) ) is  valid & ( R7 => ( R8 'or' R7 ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
thus L39: (( R7 => ( R7 'or' R8 ) ) in ( TAUT R1 ) & ( R7 => ( R8 'or' R7 ) ) in ( TAUT R1 )) by PROCAL_1:3 , PROCAL_1:4;
end;
L40: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((( R7 => R8 ) is  valid & ( R9 => R8 ) is  valid) implies ( ( R7 'or' R9 ) => R8 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
assume L41: (( R7 => R8 ) in ( TAUT R1 ) & ( R9 => R8 ) in ( TAUT R1 ));
thus L42: ( ( R7 'or' R9 ) => R8 ) in ( TAUT R1 ) by L41 , PROCAL_1:53;
end;
L43: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds ((R7 is  valid & R8 is  valid) implies ( R7 '&' R8 ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
assume L44: (R7 in ( TAUT R1 ) & R8 in ( TAUT R1 ));
thus L45: ( R7 '&' R8 ) in ( TAUT R1 ) by L44 , PROCAL_1:47;
end;
L46: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( R7 => R8 ) is  valid implies ( ( R9 '&' R7 ) => ( R9 '&' R8 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
assume L47: ( R7 => R8 ) in ( TAUT R1 );
thus L48: ( ( R9 '&' R7 ) => ( R9 '&' R8 ) ) in ( TAUT R1 ) by L47 , PROCAL_1:50;
end;
L49: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (( R7 => R8 ) is  valid implies ( ( R7 'or' R9 ) => ( R8 'or' R9 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
assume L50: ( R7 => R8 ) in ( TAUT R1 );
thus L51: ( ( R7 'or' R9 ) => ( R8 'or' R9 ) ) in ( TAUT R1 ) by L50 , PROCAL_1:48;
end;
L52: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds ( ( R7 'or' R8 ) => ( ( 'not' R7 ) => R8 ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
thus L53: ( ( R7 'or' R8 ) => ( ( 'not' R7 ) => R8 ) ) in ( TAUT R1 ) by PROCAL_1:5;
end;
L54: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds ( ( ( 'not' R7 ) => R8 ) => ( R7 'or' R8 ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
L55: ( ( 'not' ( 'not' R7 ) ) => R7 ) in ( TAUT R1 ) by LUKASI_1:25;
L56: (( ( ( 'not' R7 ) => R8 ) => ( ( 'not' ( 'not' R7 ) ) 'or' R8 ) ) in ( TAUT R1 ) & ( ( ( 'not' ( 'not' R7 ) ) 'or' R8 ) => ( R7 'or' R8 ) ) in ( TAUT R1 )) by L55 , PROCAL_1:14 , PROCAL_1:48;
thus L57: ( ( ( 'not' R7 ) => R8 ) => ( R7 'or' R8 ) ) in ( TAUT R1 ) by L56 , LUKASI_1:3;
end;
L58: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds ( R7 <=> R7 ) is  valid))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
L59: ( ( R7 => R7 ) '&' ( R7 => R7 ) ) is  valid by L43;
thus L60: thesis by L59 , QC_LANG2:def 4;
end;
L61: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds ((( R7 => R8 ) is  valid & ( R8 => R7 ) is  valid) iff ( R7 <=> R8 ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
thus L62: ((( R7 => R8 ) is  valid & ( R8 => R7 ) is  valid) implies ( R7 <=> R8 ) is  valid)
proof
assume L63: (( R7 => R8 ) is  valid & ( R8 => R7 ) is  valid);
L64: ( ( R7 => R8 ) '&' ( R8 => R7 ) ) is  valid by L63 , L43;
thus L65: thesis by L64 , QC_LANG2:def 4;
end;

assume L66: ( R7 <=> R8 ) is  valid;
L67: ( ( R7 => R8 ) '&' ( R8 => R7 ) ) is  valid by L66 , QC_LANG2:def 4;
thus L68: thesis by L67 , L25;
end;
L69: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (( R7 <=> R8 ) is  valid implies (R7 is  valid iff R8 is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
assume L70: ( R7 <=> R8 ) in ( TAUT R1 );
L71: ( ( R7 <=> R8 ) => ( R7 => R8 ) ) in ( TAUT R1 ) by PROCAL_1:23;
L72: ( R7 => R8 ) in ( TAUT R1 ) by L71 , L70 , CQC_THE1:46;
thus L73: (R7 is  valid implies R8 is  valid)
proof
assume L74: R7 in ( TAUT R1 );
thus L75: R8 in ( TAUT R1 ) by L74 , L72 , CQC_THE1:46;
end;

assume L76: R8 in ( TAUT R1 );
L77: ( ( R7 <=> R8 ) => ( R8 => R7 ) ) in ( TAUT R1 ) by PROCAL_1:24;
L78: ( R8 => R7 ) in ( TAUT R1 ) by L77 , L70 , CQC_THE1:46;
thus L79: R7 in ( TAUT R1 ) by L78 , L76 , CQC_THE1:46;
end;
L80: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds ((( R7 => ( R8 => R9 ) ) is  valid & ( R9 => R10 ) is  valid) implies ( R7 => ( R8 => R10 ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
assume that
L81: ( R7 => ( R8 => R9 ) ) is  valid
and
L82: ( R9 => R10 ) is  valid;
L83: ( ( R7 '&' R8 ) => R9 ) is  valid by L81 , L1;
L84: ( ( R7 '&' R8 ) => R10 ) is  valid by L83 , L82 , LUKASI_1:42;
thus L85: thesis by L84 , L12;
end;
theorem
L86: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (R14 in ( still_not-bound_in ( All (R13 , R11) ) ) iff (R14 in ( still_not-bound_in R11 ) & R14 <> R13))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L87: ( still_not-bound_in ( All (R13 , R11) ) ) = ( ( still_not-bound_in R11 ) \ { R13 } ) by QC_LANG3:12;
thus L88: thesis by L87 , ZFMISC_1:56;
end;
theorem
L89: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (R14 in ( still_not-bound_in ( Ex (R13 , R11) ) ) iff (R14 in ( still_not-bound_in R11 ) & R14 <> R13))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L90: ( still_not-bound_in ( Ex (R13 , R11) ) ) = ( ( still_not-bound_in R11 ) \ { R13 } ) by QC_LANG3:19;
thus L91: thesis by L90 , ZFMISC_1:56;
end;
theorem
L92: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R12 being (QC-formula of R1) holds (for R14 being (bound_QC-variable of R1) holds (R14 in ( still_not-bound_in ( R11 => R12 ) ) iff (R14 in ( still_not-bound_in R11 ) or R14 in ( still_not-bound_in R12 )))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R12 being (QC-formula of R1);
let R14 being (bound_QC-variable of R1);
L93: ( still_not-bound_in ( R11 => R12 ) ) = ( ( still_not-bound_in R11 ) \/ ( still_not-bound_in R12 ) ) by QC_LANG3:16;
thus L94: thesis by L93 , XBOOLE_0:def 3;
end;
theorem
L95: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R12 being (QC-formula of R1) holds (for R14 being (bound_QC-variable of R1) holds (R14 in ( still_not-bound_in ( R11 '&' R12 ) ) iff (R14 in ( still_not-bound_in R11 ) or R14 in ( still_not-bound_in R12 )))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R12 being (QC-formula of R1);
let R14 being (bound_QC-variable of R1);
L96: ( still_not-bound_in ( R11 '&' R12 ) ) = ( ( still_not-bound_in R11 ) \/ ( still_not-bound_in R12 ) ) by QC_LANG3:10;
thus L97: thesis by L96 , XBOOLE_0:def 3;
end;
theorem
L98: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R12 being (QC-formula of R1) holds (for R14 being (bound_QC-variable of R1) holds (R14 in ( still_not-bound_in ( R11 'or' R12 ) ) iff (R14 in ( still_not-bound_in R11 ) or R14 in ( still_not-bound_in R12 )))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R12 being (QC-formula of R1);
let R14 being (bound_QC-variable of R1);
L99: ( still_not-bound_in ( R11 'or' R12 ) ) = ( ( still_not-bound_in R11 ) \/ ( still_not-bound_in R12 ) ) by QC_LANG3:14;
thus L100: thesis by L99 , XBOOLE_0:def 3;
end;
theorem
L101: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in ( All (R13 , R14 , R11) ) )) & (not R14 in ( still_not-bound_in ( All (R13 , R14 , R11) ) )))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L102: (not R14 in ( still_not-bound_in ( All (R14 , R11) ) )) by L86;
L103: (not R14 in ( still_not-bound_in ( All (R13 , ( All (R14 , R11) )) ) )) by L102 , L86;
L104: (not R13 in ( still_not-bound_in ( All (R13 , ( All (R14 , R11) )) ) )) by L86;
thus L105: thesis by L104 , L103 , QC_LANG2:14;
end;
theorem
L106: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in ( Ex (R13 , R14 , R11) ) )) & (not R14 in ( still_not-bound_in ( Ex (R13 , R14 , R11) ) )))))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L107: (not R14 in ( still_not-bound_in ( Ex (R14 , R11) ) )) by L89;
L108: (not R14 in ( still_not-bound_in ( Ex (R13 , ( Ex (R14 , R11) )) ) )) by L107 , L89;
L109: (not R13 in ( still_not-bound_in ( Ex (R13 , ( Ex (R14 , R11) )) ) )) by L89;
thus L110: thesis by L109 , L108 , QC_LANG2:14;
end;
theorem
L111: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds ( ( R11 => R12 ) . R13 ) = ( ( R11 . R13 ) => ( R12 . R13 ) )))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
L112: ( R11 => R12 ) = ( 'not' ( R11 '&' ( 'not' R12 ) ) ) by QC_LANG2:def 2;
thus L113: ( ( R11 => R12 ) . R13 ) = ( 'not' ( ( R11 '&' ( 'not' R12 ) ) . R13 ) ) by L112 , CQC_LANG:19
.= ( 'not' ( ( R11 . R13 ) '&' ( ( 'not' R12 ) . R13 ) ) ) by CQC_LANG:21
.= ( 'not' ( ( R11 . R13 ) '&' ( 'not' ( R12 . R13 ) ) ) ) by CQC_LANG:19
.= ( ( R11 . R13 ) => ( R12 . R13 ) ) by QC_LANG2:def 2;
end;
theorem
L114: (for R1 being QC-alphabet holds (for R11 being (QC-formula of R1) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds ( ( R11 'or' R12 ) . R13 ) = ( ( R11 . R13 ) 'or' ( R12 . R13 ) )))))
proof
let R1 being QC-alphabet;
let R11 being (QC-formula of R1);
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
thus L115: ( ( R11 'or' R12 ) . R13 ) = ( ( 'not' ( ( 'not' R11 ) '&' ( 'not' R12 ) ) ) . R13 ) by QC_LANG2:def 3
.= ( 'not' ( ( ( 'not' R11 ) '&' ( 'not' R12 ) ) . R13 ) ) by CQC_LANG:19
.= ( 'not' ( ( ( 'not' R11 ) . R13 ) '&' ( ( 'not' R12 ) . R13 ) ) ) by CQC_LANG:21
.= ( 'not' ( ( 'not' ( R11 . R13 ) ) '&' ( ( 'not' R12 ) . R13 ) ) ) by CQC_LANG:19
.= ( 'not' ( ( 'not' ( R11 . R13 ) ) '&' ( 'not' ( R12 . R13 ) ) ) ) by CQC_LANG:19
.= ( ( R11 . R13 ) 'or' ( R12 . R13 ) ) by QC_LANG2:def 3;
end;
theorem
L116: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (R13 <> R14 implies ( ( Ex (R13 , R7) ) . R14 ) = ( Ex (R13 , ( R7 . R14 )) ))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L117: R13 <> R14;
thus L118: ( ( Ex (R13 , R7) ) . R14 ) = ( ( 'not' ( All (R13 , ( 'not' R7 )) ) ) . R14 ) by QC_LANG2:def 5
.= ( 'not' ( ( All (R13 , ( 'not' R7 )) ) . R14 ) ) by CQC_LANG:19
.= ( 'not' ( All (R13 , ( ( 'not' R7 ) . R14 )) ) ) by L117 , CQC_LANG:25
.= ( 'not' ( All (R13 , ( 'not' ( R7 . R14 ) )) ) ) by CQC_LANG:19
.= ( Ex (R13 , ( R7 . R14 )) ) by QC_LANG2:def 5;
end;
theorem
L119: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( R7 => ( Ex (R13 , R7) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L120: ( ( All (R13 , ( 'not' R7 )) ) => ( 'not' R7 ) ) is  valid by CQC_THE1:66;
L121: ( ( 'not' ( 'not' R7 ) ) => ( 'not' ( All (R13 , ( 'not' R7 )) ) ) ) is  valid by L120 , LUKASI_1:52;
L122: ( ( 'not' ( 'not' R7 ) ) => ( Ex (R13 , R7) ) ) is  valid by L121 , QC_LANG2:def 5;
L123: ( ( ( 'not' ( 'not' R7 ) ) => ( Ex (R13 , R7) ) ) => ( R7 => ( Ex (R13 , R7) ) ) ) is  valid;
thus L124: thesis by L123 , L122 , CQC_THE1:65;
end;
theorem
L125: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (R7 is  valid implies ( Ex (R13 , R7) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L126: R7 is  valid;
L127: ( R7 => ( Ex (R13 , R7) ) ) is  valid by L119;
thus L128: thesis by L127 , L126 , CQC_THE1:65;
end;
theorem
L129: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , R7) ) => ( Ex (R13 , R7) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L130: (( ( All (R13 , R7) ) => R7 ) is  valid & ( R7 => ( Ex (R13 , R7) ) ) is  valid) by L119 , CQC_THE1:66;
thus L131: thesis by L130 , LUKASI_1:42;
end;
theorem
L132: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ( ( All (R13 , R7) ) => ( Ex (R14 , R7) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L133: (( ( All (R13 , R7) ) => R7 ) is  valid & ( R7 => ( Ex (R14 , R7) ) ) is  valid) by L119 , CQC_THE1:66;
thus L134: thesis by L133 , LUKASI_1:42;
end;
theorem
L135: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((( R7 => R8 ) is  valid & (not R13 in ( still_not-bound_in R8 ))) implies ( ( Ex (R13 , R7) ) => R8 ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L136: (( R7 => R8 ) is  valid & (not R13 in ( still_not-bound_in R8 )));
L137: (( ( 'not' R8 ) => ( 'not' R7 ) ) is  valid & (not R13 in ( still_not-bound_in ( 'not' R8 ) ))) by L136 , LUKASI_1:52 , QC_LANG3:7;
L138: ( ( 'not' R8 ) => ( All (R13 , ( 'not' R7 )) ) ) is  valid by L137 , CQC_THE1:67;
L139: ( ( 'not' ( All (R13 , ( 'not' R7 )) ) ) => ( 'not' ( 'not' R8 ) ) ) is  valid by L138 , LUKASI_1:52;
L140: ( ( Ex (R13 , R7) ) => ( 'not' ( 'not' R8 ) ) ) is  valid by L139 , QC_LANG2:def 5;
thus L141: thesis by L140 , LUKASI_1:55;
end;
theorem
L142: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( Ex (R13 , R7) ) => R7 ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L143: ( R7 => R7 ) is  valid;
assume L144: (not R13 in ( still_not-bound_in R7 ));
thus L145: thesis by L144 , L143 , L135;
end;
theorem
L146: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (((not R13 in ( still_not-bound_in R7 )) & ( Ex (R13 , R7) ) is  valid) implies R7 is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume that
L147: (not R13 in ( still_not-bound_in R7 ))
and
L148: ( Ex (R13 , R7) ) is  valid;
L149: ( ( Ex (R13 , R7) ) => R7 ) is  valid by L147 , L142;
thus L150: thesis by L149 , L148 , CQC_THE1:65;
end;
theorem
L151: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R14 in ( still_not-bound_in R12 ))) implies ( R7 => ( Ex (R14 , R8) ) ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume that
L152: R7 = ( R12 . R13 )
and
L153: R8 = ( R12 . R14 )
and
L154: (not R14 in ( still_not-bound_in R12 ));
L155: ( ( R12 => ( Ex (R14 , R8) ) ) . R13 ) = ( ( R12 . R13 ) => ( ( Ex (R14 , R8) ) . R13 ) ) by L111
.= ( R7 => ( Ex (R14 , R8) ) ) by L152 , CQC_LANG:27;
L156: (not R14 in ( still_not-bound_in ( Ex (R14 , R8) ) )) by L89;
L157: (not R14 in ( still_not-bound_in ( R12 => ( Ex (R14 , R8) ) ) )) by L156 , L154 , L92;
L158: ( R8 => ( Ex (R14 , R8) ) ) is  valid by L119;
L159: ( ( R12 => ( Ex (R14 , R8) ) ) . R14 ) = ( ( R12 . R14 ) => ( ( Ex (R14 , R8) ) . R14 ) ) by L111
.= ( R8 => ( Ex (R14 , R8) ) ) by L153 , CQC_LANG:27;
thus L160: thesis by L159 , L158 , L155 , L157 , CQC_THE1:68;
end;
theorem
L161: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (R7 is  valid implies ( All (R13 , R7) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L162: ( R7 => ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => R7 ) ) is  valid;
L163: (not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) by L86;
L164: (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) )) by L163 , L92;
assume L165: R7 is  valid;
L166: ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => R7 ) is  valid by L165 , L162 , CQC_THE1:65;
L167: ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => ( All (R13 , R7) ) ) is  valid by L166 , L164 , CQC_THE1:67;
thus L168: thesis by L167 , CQC_THE1:65;
end;
theorem
L169: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( R7 => ( All (R13 , R7) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L170: ( R7 => R7 ) is  valid;
assume L171: (not R13 in ( still_not-bound_in R7 ));
thus L172: thesis by L171 , L170 , CQC_THE1:67;
end;
theorem
L173: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R13 in ( still_not-bound_in R12 ))) implies ( ( All (R13 , R7) ) => R8 ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume that
L174: R7 = ( R12 . R13 )
and
L175: R8 = ( R12 . R14 )
and
L176: (not R13 in ( still_not-bound_in R12 ));
L177: ( ( ( All (R13 , R7) ) => R12 ) . R14 ) = ( ( ( All (R13 , R7) ) . R14 ) => R8 ) by L175 , L111
.= ( ( All (R13 , R7) ) => R8 ) by CQC_LANG:27;
L178: (not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) by L86;
L179: (( ( All (R13 , R7) ) => R7 ) is  valid & (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) => R12 ) ))) by L178 , L176 , L92 , CQC_THE1:66;
L180: ( ( ( All (R13 , R7) ) => R12 ) . R13 ) = ( ( ( All (R13 , R7) ) . R13 ) => R7 ) by L174 , L111
.= ( ( All (R13 , R7) ) => R7 ) by CQC_LANG:27;
thus L181: thesis by L180 , L177 , L179 , CQC_THE1:68;
end;
theorem
L182: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((not R14 in ( still_not-bound_in R7 )) implies ( ( All (R13 , R7) ) => ( All (R14 , R7) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L183: (not R14 in ( still_not-bound_in R7 ));
L184: (( ( All (R13 , R7) ) => R7 ) is  valid & (not R14 in ( still_not-bound_in ( All (R13 , R7) ) ))) by L183 , L86 , CQC_THE1:66;
thus L185: thesis by L184 , CQC_THE1:67;
end;
theorem
L186: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R13 in ( still_not-bound_in R12 )) & (not R14 in ( still_not-bound_in R7 ))) implies ( ( All (R13 , R7) ) => ( All (R14 , R8) ) ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L187: (R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R13 in ( still_not-bound_in R12 )) & (not R14 in ( still_not-bound_in R7 )));
L188: ((not R14 in ( still_not-bound_in ( All (R13 , R7) ) )) & ( ( All (R13 , R7) ) => R8 ) is  valid) by L187 , L86 , L173;
thus L189: thesis by L188 , CQC_THE1:67;
end;
theorem
L190: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( Ex (R13 , R7) ) => ( Ex (R14 , R7) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L191: (not R13 in ( still_not-bound_in R7 ));
L192: (not R13 in ( still_not-bound_in ( Ex (R14 , R7) ) )) by L191 , L89;
L193: ( R7 => ( Ex (R14 , R7) ) ) is  valid by L119;
thus L194: thesis by L193 , L192 , L135;
end;
theorem
L195: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R13 in ( still_not-bound_in R8 )) & (not R14 in ( still_not-bound_in R12 ))) implies ( ( Ex (R13 , R7) ) => ( Ex (R14 , R8) ) ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L196: (R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R13 in ( still_not-bound_in R8 )) & (not R14 in ( still_not-bound_in R12 )));
L197: ((not R13 in ( still_not-bound_in ( Ex (R14 , R8) ) )) & ( R7 => ( Ex (R14 , R8) ) ) is  valid) by L196 , L89 , L151;
thus L198: thesis by L197 , L135;
end;
theorem
L199: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L200: ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => R8 ) ) is  valid by CQC_THE1:66;
L201: ( R7 => ( ( All (R13 , ( R7 => R8 )) ) => R8 ) ) is  valid by L200 , LUKASI_1:44;
L202: ( ( All (R13 , R7) ) => R7 ) is  valid by CQC_THE1:66;
L203: ( ( All (R13 , R7) ) => ( ( All (R13 , ( R7 => R8 )) ) => R8 ) ) is  valid by L202 , L201 , LUKASI_1:42;
L204: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , R7) ) ) => R8 ) is  valid by L203 , L5;
L205: ((not R13 in ( still_not-bound_in ( All (R13 , ( R7 => R8 )) ) )) & (not R13 in ( still_not-bound_in ( All (R13 , R7) ) ))) by L86;
L206: (not R13 in ( still_not-bound_in ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , R7) ) ) )) by L205 , L95;
L207: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , R7) ) ) => ( All (R13 , R8) ) ) is  valid by L206 , L204 , CQC_THE1:67;
thus L208: thesis by L207 , L12;
end;
theorem
L209: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( All (R13 , ( R7 => R8 )) ) is  valid implies ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L210: ( All (R13 , ( R7 => R8 )) ) is  valid;
L211: ( ( All (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) ) is  valid by L199;
thus L212: thesis by L211 , L210 , CQC_THE1:65;
end;
theorem
L213: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 <=> R8 )) ) => ( ( All (R13 , R7) ) <=> ( All (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L214: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( ( R7 => R8 ) '&' ( R8 => R7 ) ) ) is  valid by CQC_THE1:66;
L215: ( ( R7 <=> R8 ) => ( R7 <=> R8 ) ) is  valid;
L216: ( ( R7 <=> R8 ) => ( ( R7 => R8 ) '&' ( R8 => R7 ) ) ) is  valid by L215 , QC_LANG2:def 4;
L217: ( All (R13 , ( ( R7 <=> R8 ) => ( ( R7 => R8 ) '&' ( R8 => R7 ) ) )) ) is  valid by L216 , L161;
L218: ( ( All (R13 , ( R7 <=> R8 )) ) => ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) ) is  valid by L217 , L209;
L219: (( ( All (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) ) is  valid & ( ( All (R13 , ( R8 => R7 )) ) => ( ( All (R13 , R8) ) => ( All (R13 , R7) ) ) ) is  valid) by L199;
L220: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , ( R8 => R7 )) ) ) => ( ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) '&' ( ( All (R13 , R8) ) => ( All (R13 , R7) ) ) ) ) is  valid by L219 , L35;
L221: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , ( R8 => R7 )) ) ) => ( ( All (R13 , R7) ) <=> ( All (R13 , R8) ) ) ) is  valid by L220 , QC_LANG2:def 4;
L222: (not R13 in ( still_not-bound_in ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) )) by L86;
L223: ( ( ( R7 => R8 ) '&' ( R8 => R7 ) ) => ( R8 => R7 ) ) is  valid by L23;
L224: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( R8 => R7 ) ) is  valid by L223 , L214 , LUKASI_1:42;
L225: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( All (R13 , ( R8 => R7 )) ) ) is  valid by L224 , L222 , CQC_THE1:67;
L226: ( ( ( R7 => R8 ) '&' ( R8 => R7 ) ) => ( R7 => R8 ) ) is  valid by L23;
L227: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( R7 => R8 ) ) is  valid by L226 , L214 , LUKASI_1:42;
L228: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid by L227 , L222 , CQC_THE1:67;
L229: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( ( All (R13 , ( R7 => R8 )) ) '&' ( All (R13 , ( R8 => R7 )) ) ) ) is  valid by L228 , L225 , L29;
L230: ( ( All (R13 , ( ( R7 => R8 ) '&' ( R8 => R7 ) )) ) => ( ( All (R13 , R7) ) <=> ( All (R13 , R8) ) ) ) is  valid by L229 , L221 , LUKASI_1:42;
thus L231: thesis by L230 , L218 , LUKASI_1:42;
end;
theorem
L232: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( All (R13 , ( R7 <=> R8 )) ) is  valid implies ( ( All (R13 , R7) ) <=> ( All (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L233: ( All (R13 , ( R7 <=> R8 )) ) is  valid;
L234: ( ( All (R13 , ( R7 <=> R8 )) ) => ( ( All (R13 , R7) ) <=> ( All (R13 , R8) ) ) ) is  valid by L213;
thus L235: thesis by L234 , L233 , CQC_THE1:65;
end;
theorem
L236: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 => R8 )) ) => ( ( Ex (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L237: ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => R8 ) ) is  valid by CQC_THE1:66;
L238: ( ( R7 '&' ( All (R13 , ( R7 => R8 )) ) ) => R8 ) is  valid by L237 , L5;
L239: ( R8 => ( Ex (R13 , R8) ) ) is  valid by L119;
L240: ( ( R7 '&' ( All (R13 , ( R7 => R8 )) ) ) => ( Ex (R13 , R8) ) ) is  valid by L239 , L238 , LUKASI_1:42;
L241: ( R7 => ( ( All (R13 , ( R7 => R8 )) ) => ( Ex (R13 , R8) ) ) ) is  valid by L240 , L12;
L242: ((not R13 in ( still_not-bound_in ( All (R13 , ( R7 => R8 )) ) )) & (not R13 in ( still_not-bound_in ( Ex (R13 , R8) ) ))) by L86 , L89;
L243: (not R13 in ( still_not-bound_in ( ( All (R13 , ( R7 => R8 )) ) => ( Ex (R13 , R8) ) ) )) by L242 , L92;
L244: ( ( Ex (R13 , R7) ) => ( ( All (R13 , ( R7 => R8 )) ) => ( Ex (R13 , R8) ) ) ) is  valid by L243 , L241 , L135;
thus L245: thesis by L244 , LUKASI_1:44;
end;
theorem
L246: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( All (R13 , ( R7 => R8 )) ) is  valid implies ( ( Ex (R13 , R7) ) => ( Ex (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L247: ( All (R13 , ( R7 => R8 )) ) is  valid;
L248: ( ( All (R13 , ( R7 => R8 )) ) => ( ( Ex (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid by L236;
thus L249: thesis by L248 , L247 , CQC_THE1:65;
end;
theorem
L250: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( All (R13 , ( R7 '&' R8 )) ) => ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) ) is  valid & ( ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 '&' R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L251: (( ( All (R13 , R7) ) => R7 ) is  valid & ( ( All (R13 , R8) ) => R8 ) is  valid) by CQC_THE1:66;
L252: ( ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) => ( R7 '&' R8 ) ) is  valid by L251 , L35;
L253: (( All (R13 , ( ( R7 '&' R8 ) => R8 )) ) is  valid & ( ( All (R13 , ( ( R7 '&' R8 ) => R8 )) ) => ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , R8) ) ) ) is  valid) by L23 , L161 , L199;
L254: ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , R8) ) ) is  valid by L253 , CQC_THE1:65;
L255: (( All (R13 , ( ( R7 '&' R8 ) => R7 )) ) is  valid & ( ( All (R13 , ( ( R7 '&' R8 ) => R7 )) ) => ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , R7) ) ) ) is  valid) by L23 , L161 , L199;
L256: ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , R7) ) ) is  valid by L255 , CQC_THE1:65;
thus L257: ( ( All (R13 , ( R7 '&' R8 )) ) => ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) ) is  valid by L256 , L254 , L29;
L258: ((not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) & (not R13 in ( still_not-bound_in ( All (R13 , R8) ) ))) by L86;
L259: (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) )) by L258 , L95;
thus L260: thesis by L259 , L252 , CQC_THE1:67;
end;
theorem
L261: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 '&' R8 )) ) <=> ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L262: (( ( All (R13 , ( R7 '&' R8 )) ) => ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) ) is  valid & ( ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 '&' R8 )) ) ) is  valid) by L250;
thus L263: thesis by L262 , L61;
end;
theorem
L264: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( All (R13 , ( R7 '&' R8 )) ) is  valid iff ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L265: ( ( All (R13 , ( R7 '&' R8 )) ) <=> ( ( All (R13 , R7) ) '&' ( All (R13 , R8) ) ) ) is  valid by L261;
thus L266: thesis by L265 , L69;
end;
theorem
L267: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( ( All (R13 , R7) ) 'or' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L268: (( All (R13 , ( R8 => ( R7 'or' R8 ) )) ) is  valid & ( ( All (R13 , ( R8 => ( R7 'or' R8 ) )) ) => ( ( All (R13 , R8) ) => ( All (R13 , ( R7 'or' R8 )) ) ) ) is  valid) by L38 , L161 , L199;
L269: ( ( All (R13 , R8) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid by L268 , CQC_THE1:65;
L270: (( All (R13 , ( R7 => ( R7 'or' R8 ) )) ) is  valid & ( ( All (R13 , ( R7 => ( R7 'or' R8 ) )) ) => ( ( All (R13 , R7) ) => ( All (R13 , ( R7 'or' R8 )) ) ) ) is  valid) by L38 , L161 , L199;
L271: ( ( All (R13 , R7) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid by L270 , CQC_THE1:65;
thus L272: thesis by L271 , L269 , L40;
end;
theorem
L273: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( Ex (R13 , ( R7 'or' R8 )) ) => ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid & ( ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L274: ((not R13 in ( still_not-bound_in ( Ex (R13 , R7) ) )) & (not R13 in ( still_not-bound_in ( Ex (R13 , R8) ) ))) by L89;
L275: (not R13 in ( still_not-bound_in ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) )) by L274 , L98;
L276: (( R7 => ( Ex (R13 , R7) ) ) is  valid & ( R8 => ( Ex (R13 , R8) ) ) is  valid) by L119;
L277: ( ( R7 'or' R8 ) => ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid by L276 , L32;
thus L278: ( ( Ex (R13 , ( R7 'or' R8 )) ) => ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid by L277 , L275 , L135;
L279: (( All (R13 , ( R8 => ( R7 'or' R8 ) )) ) is  valid & ( ( All (R13 , ( R8 => ( R7 'or' R8 ) )) ) => ( ( Ex (R13 , R8) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) ) is  valid) by L38 , L161 , L236;
L280: ( ( Ex (R13 , R8) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) is  valid by L279 , CQC_THE1:65;
L281: (( All (R13 , ( R7 => ( R7 'or' R8 ) )) ) is  valid & ( ( All (R13 , ( R7 => ( R7 'or' R8 ) )) ) => ( ( Ex (R13 , R7) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) ) is  valid) by L38 , L161 , L236;
L282: ( ( Ex (R13 , R7) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) is  valid by L281 , CQC_THE1:65;
thus L283: thesis by L282 , L280 , L40;
end;
theorem
L284: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( Ex (R13 , ( R7 'or' R8 )) ) <=> ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L285: (( ( Ex (R13 , ( R7 'or' R8 )) ) => ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid & ( ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 'or' R8 )) ) ) is  valid) by L273;
thus L286: thesis by L285 , L61;
end;
theorem
L287: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( Ex (R13 , ( R7 'or' R8 )) ) is  valid iff ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L288: ( ( Ex (R13 , ( R7 'or' R8 )) ) <=> ( ( Ex (R13 , R7) ) 'or' ( Ex (R13 , R8) ) ) ) is  valid by L284;
thus L289: thesis by L288 , L69;
end;
theorem
L290: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( ( Ex (R13 , R7) ) '&' ( Ex (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L291: ( All (R13 , ( ( R7 '&' R8 ) => R8 )) ) is  valid by L23 , L161;
L292: ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( Ex (R13 , R8) ) ) is  valid by L291 , L246;
L293: ( All (R13 , ( ( R7 '&' R8 ) => R7 )) ) is  valid by L23 , L161;
L294: ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( Ex (R13 , R7) ) ) is  valid by L293 , L246;
thus L295: thesis by L294 , L292 , L29;
end;
theorem
L296: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( Ex (R13 , ( R7 '&' R8 )) ) is  valid implies ( ( Ex (R13 , R7) ) '&' ( Ex (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L297: ( Ex (R13 , ( R7 '&' R8 )) ) is  valid;
L298: ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( ( Ex (R13 , R7) ) '&' ( Ex (R13 , R8) ) ) ) is  valid by L290;
thus L299: thesis by L298 , L297 , CQC_THE1:65;
end;
theorem
L300: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) => ( All (R13 , R7) ) ) is  valid & ( ( All (R13 , R7) ) => ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L301: (( All (R13 , ( ( 'not' ( 'not' R7 ) ) => R7 )) ) is  valid & ( All (R13 , ( R7 => ( 'not' ( 'not' R7 ) ) )) ) is  valid) by L161;
thus L302: thesis by L301 , L209;
end;
theorem
L303: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) <=> ( All (R13 , R7) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L304: (( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) => ( All (R13 , R7) ) ) is  valid & ( ( All (R13 , R7) ) => ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid) by L300;
thus L305: thesis by L304 , L61;
end;
theorem
L306: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( Ex (R13 , ( 'not' ( 'not' R7 ) )) ) => ( Ex (R13 , R7) ) ) is  valid & ( ( Ex (R13 , R7) ) => ( Ex (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L307: (( All (R13 , ( ( 'not' ( 'not' R7 ) ) => R7 )) ) is  valid & ( All (R13 , ( R7 => ( 'not' ( 'not' R7 ) ) )) ) is  valid) by L161;
thus L308: thesis by L307 , L246;
end;
theorem
L309: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( Ex (R13 , ( 'not' ( 'not' R7 ) )) ) <=> ( Ex (R13 , R7) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L310: (( ( Ex (R13 , ( 'not' ( 'not' R7 ) )) ) => ( Ex (R13 , R7) ) ) is  valid & ( ( Ex (R13 , R7) ) => ( Ex (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid) by L306;
thus L311: thesis by L310 , L61;
end;
theorem
L312: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) => ( All (R13 , R7) ) ) is  valid & ( ( All (R13 , R7) ) => ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L313: ( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) => ( All (R13 , R7) ) ) is  valid by L300;
L314: ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) = ( 'not' ( 'not' ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) ) by QC_LANG2:def 5;
L315: ( ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) => ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid by L314;
thus L316: ( ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) => ( All (R13 , R7) ) ) is  valid by L315 , L313 , LUKASI_1:42;
L317: (( ( All (R13 , R7) ) => ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid & ( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) => ( 'not' ( 'not' ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) ) ) is  valid) by L300;
thus L318: thesis by L317 , L314 , LUKASI_1:42;
end;
theorem
L319: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) <=> ( All (R13 , R7) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L320: (( ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) => ( All (R13 , R7) ) ) is  valid & ( ( All (R13 , R7) ) => ( 'not' ( Ex (R13 , ( 'not' R7 )) ) ) ) is  valid) by L312;
thus L321: thesis by L320 , L61;
end;
theorem
L322: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( 'not' ( All (R13 , R7) ) ) => ( Ex (R13 , ( 'not' R7 )) ) ) is  valid & ( ( Ex (R13 , ( 'not' R7 )) ) => ( 'not' ( All (R13 , R7) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L323: ( Ex (R13 , ( 'not' R7 )) ) = ( 'not' ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) by QC_LANG2:def 5;
L324: ( ( All (R13 , ( 'not' ( 'not' R7 ) )) ) => ( All (R13 , R7) ) ) is  valid by L300;
thus L325: ( ( 'not' ( All (R13 , R7) ) ) => ( Ex (R13 , ( 'not' R7 )) ) ) is  valid by L324 , L323 , LUKASI_1:52;
L326: ( ( All (R13 , R7) ) => ( All (R13 , ( 'not' ( 'not' R7 ) )) ) ) is  valid by L300;
thus L327: thesis by L326 , L323 , LUKASI_1:52;
end;
theorem
L328: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( 'not' ( All (R13 , R7) ) ) <=> ( Ex (R13 , ( 'not' R7 )) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L329: (( ( 'not' ( All (R13 , R7) ) ) => ( Ex (R13 , ( 'not' R7 )) ) ) is  valid & ( ( Ex (R13 , ( 'not' R7 )) ) => ( 'not' ( All (R13 , R7) ) ) ) is  valid) by L322;
thus L330: thesis by L329 , L61;
end;
theorem
L331: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( 'not' ( Ex (R13 , R7) ) ) => ( All (R13 , ( 'not' R7 )) ) ) is  valid & ( ( All (R13 , ( 'not' R7 )) ) => ( 'not' ( Ex (R13 , R7) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L332: ( 'not' ( Ex (R13 , R7) ) ) = ( 'not' ( 'not' ( All (R13 , ( 'not' R7 )) ) ) ) by QC_LANG2:def 5;
thus L333: ( ( 'not' ( Ex (R13 , R7) ) ) => ( All (R13 , ( 'not' R7 )) ) ) is  valid by L332;
thus L334: thesis by L332;
end;
theorem
L335: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( 'not' R7 )) ) <=> ( 'not' ( Ex (R13 , R7) ) ) ) is  valid)))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L336: ( ( 'not' ( 'not' ( All (R13 , ( 'not' R7 )) ) ) ) => ( All (R13 , ( 'not' R7 )) ) ) is  valid;
L337: ( ( 'not' ( Ex (R13 , R7) ) ) => ( All (R13 , ( 'not' R7 )) ) ) is  valid by L336 , QC_LANG2:def 5;
L338: ( ( All (R13 , ( 'not' R7 )) ) => ( 'not' ( 'not' ( All (R13 , ( 'not' R7 )) ) ) ) ) is  valid;
L339: ( ( All (R13 , ( 'not' R7 )) ) => ( 'not' ( Ex (R13 , R7) ) ) ) is  valid by L338 , QC_LANG2:def 5;
thus L340: thesis by L339 , L337 , L61;
end;
theorem
L341: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (( ( All (R13 , ( All (R14 , R7) )) ) => ( All (R14 , ( All (R13 , R7) )) ) ) is  valid & ( ( All (R13 , R14 , R7) ) => ( All (R14 , R13 , R7) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L342: (not R14 in ( still_not-bound_in ( All (R14 , R7) ) )) by L86;
L343: (not R14 in ( still_not-bound_in ( All (R13 , ( All (R14 , R7) )) ) )) by L342 , L86;
L344: (( All (R13 , ( ( All (R14 , R7) ) => R7 )) ) is  valid & ( ( All (R13 , ( ( All (R14 , R7) ) => R7 )) ) => ( ( All (R13 , ( All (R14 , R7) )) ) => ( All (R13 , R7) ) ) ) is  valid) by L161 , L199 , CQC_THE1:66;
L345: ( ( All (R13 , ( All (R14 , R7) )) ) => ( All (R13 , R7) ) ) is  valid by L344 , CQC_THE1:65;
thus L346: ( ( All (R13 , ( All (R14 , R7) )) ) => ( All (R14 , ( All (R13 , R7) )) ) ) is  valid by L345 , L343 , CQC_THE1:67;
L347: ( ( All (R13 , R14 , R7) ) => ( All (R14 , ( All (R13 , R7) )) ) ) is  valid by L346 , QC_LANG2:14;
thus L348: thesis by L347 , QC_LANG2:14;
end;
theorem
L349: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R14 in ( still_not-bound_in R12 ))) implies ( ( All (R13 , ( All (R14 , R8) )) ) => ( All (R13 , R7) ) ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L350: (R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R14 in ( still_not-bound_in R12 )));
L351: ( All (R13 , ( ( All (R14 , R8) ) => R7 )) ) is  valid by L350 , L161 , L173;
thus L352: thesis by L351 , L209;
end;
theorem
L353: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (( ( Ex (R13 , ( Ex (R14 , R7) )) ) => ( Ex (R14 , ( Ex (R13 , R7) )) ) ) is  valid & ( ( Ex (R13 , R14 , R7) ) => ( Ex (R14 , R13 , R7) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L354: (not R13 in ( still_not-bound_in ( Ex (R13 , R7) ) )) by L89;
L355: (not R13 in ( still_not-bound_in ( Ex (R14 , ( Ex (R13 , R7) )) ) )) by L354 , L89;
L356: (( All (R14 , ( R7 => ( Ex (R13 , R7) ) )) ) is  valid & ( ( All (R14 , ( R7 => ( Ex (R13 , R7) ) )) ) => ( ( Ex (R14 , R7) ) => ( Ex (R14 , ( Ex (R13 , R7) )) ) ) ) is  valid) by L119 , L161 , L236;
L357: ( ( Ex (R14 , R7) ) => ( Ex (R14 , ( Ex (R13 , R7) )) ) ) is  valid by L356 , CQC_THE1:65;
thus L358: ( ( Ex (R13 , ( Ex (R14 , R7) )) ) => ( Ex (R14 , ( Ex (R13 , R7) )) ) ) is  valid by L357 , L355 , L135;
L359: ( ( Ex (R13 , R14 , R7) ) => ( Ex (R14 , ( Ex (R13 , R7) )) ) ) is  valid by L358 , QC_LANG2:14;
thus L360: thesis by L359 , QC_LANG2:14;
end;
theorem
L361: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R12 being (QC-formula of R1) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ((R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R14 in ( still_not-bound_in R12 ))) implies ( ( Ex (R13 , R7) ) => ( Ex (R13 , R14 , R8) ) ) is  valid)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R12 being (QC-formula of R1);
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
assume L362: (R7 = ( R12 . R13 ) & R8 = ( R12 . R14 ) & (not R14 in ( still_not-bound_in R12 )));
L363: ( All (R13 , ( R7 => ( Ex (R14 , R8) ) )) ) is  valid by L362 , L151 , L161;
L364: ( ( Ex (R13 , R7) ) => ( Ex (R13 , ( Ex (R14 , R8) )) ) ) is  valid by L363 , L246;
thus L365: thesis by L364 , QC_LANG2:14;
end;
theorem
L366: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ( ( Ex (R13 , ( All (R14 , R7) )) ) => ( All (R14 , ( Ex (R13 , R7) )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
L367: (not R13 in ( still_not-bound_in ( Ex (R13 , R7) ) )) by L89;
L368: (not R13 in ( still_not-bound_in ( All (R14 , ( Ex (R13 , R7) )) ) )) by L367 , L86;
L369: (( All (R14 , ( R7 => ( Ex (R13 , R7) ) )) ) is  valid & ( ( All (R14 , ( R7 => ( Ex (R13 , R7) ) )) ) => ( ( All (R14 , R7) ) => ( All (R14 , ( Ex (R13 , R7) )) ) ) ) is  valid) by L119 , L161 , L199;
L370: ( ( All (R14 , R7) ) => ( All (R14 , ( Ex (R13 , R7) )) ) ) is  valid by L369 , CQC_THE1:65;
thus L371: thesis by L370 , L368 , L135;
end;
theorem
L372: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( Ex (R13 , ( R7 <=> R7 )) ) is  valid))) by L58 , L125;
theorem
L373: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( ( Ex (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid & ( ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L374: ( ( All (R13 , R7) ) => R7 ) is  valid by CQC_THE1:66;
L375: ( ( R7 => R8 ) => ( ( All (R13 , R7) ) => R8 ) ) is  valid by L374 , LUKASI_1:41;
L376: ((not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) & (not R13 in ( still_not-bound_in ( Ex (R13 , R8) ) ))) by L86 , L89;
L377: (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) )) by L376 , L92;
L378: ( R8 => ( Ex (R13 , R8) ) ) is  valid by L119;
L379: ( ( R7 => R8 ) => ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid by L378 , L375 , L80;
thus L380: ( ( Ex (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid by L379 , L377 , L135;
L381: ( ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) => ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) ) is  valid by L250;
L382: ( ( 'not' ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L381 , LUKASI_1:52;
L383: ( ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) => ( Ex (R13 , ( 'not' ( R7 '&' ( 'not' R8 ) ) )) ) ) is  valid by L322;
L384: ( ( 'not' ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) ) => ( Ex (R13 , ( 'not' ( R7 '&' ( 'not' R8 ) ) )) ) ) is  valid by L383 , L382 , LUKASI_1:42;
L385: ( ( 'not' ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid by L384 , QC_LANG2:def 2;
L386: ( ( All (R13 , ( 'not' R8 )) ) => ( 'not' ( 'not' ( All (R13 , ( 'not' R8 )) ) ) ) ) is  valid;
L387: ( ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) => ( ( All (R13 , R7) ) '&' ( 'not' ( 'not' ( All (R13 , ( 'not' R8 )) ) ) ) ) ) is  valid by L386 , L46;
L388: ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) = ( ( All (R13 , R7) ) => ( 'not' ( All (R13 , ( 'not' R8 )) ) ) ) by QC_LANG2:def 5
.= ( 'not' ( ( All (R13 , R7) ) '&' ( 'not' ( 'not' ( All (R13 , ( 'not' R8 )) ) ) ) ) ) by QC_LANG2:def 2;
L389: ( ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) => ( 'not' ( ( All (R13 , R7) ) '&' ( All (R13 , ( 'not' R8 )) ) ) ) ) is  valid by L388 , L387 , LUKASI_1:52;
thus L390: thesis by L389 , L385 , LUKASI_1:42;
end;
theorem
L391: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( Ex (R13 , ( R7 => R8 )) ) <=> ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L392: (( ( Ex (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid & ( ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid) by L373;
thus L393: thesis by L392 , L61;
end;
theorem
L394: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (( Ex (R13 , ( R7 => R8 )) ) is  valid iff ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L395: ( ( Ex (R13 , ( R7 => R8 )) ) <=> ( ( All (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid by L391;
thus L396: thesis by L395 , L69;
end;
theorem
L397: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 '&' R8 )) ) => ( R7 '&' ( All (R13 , R8) ) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L398: ( ( All (R13 , ( R7 '&' R8 )) ) => ( R7 '&' R8 ) ) is  valid by CQC_THE1:66;
L399: (not R13 in ( still_not-bound_in ( All (R13 , ( R7 '&' R8 )) ) )) by L86;
L400: ( ( R7 '&' R8 ) => R8 ) is  valid by L23;
L401: ( ( All (R13 , ( R7 '&' R8 )) ) => R8 ) is  valid by L400 , L398 , LUKASI_1:42;
L402: ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , R8) ) ) is  valid by L401 , L399 , CQC_THE1:67;
L403: ( ( R7 '&' R8 ) => R7 ) is  valid by L23;
L404: ( ( All (R13 , ( R7 '&' R8 )) ) => R7 ) is  valid by L403 , L398 , LUKASI_1:42;
thus L405: thesis by L404 , L402 , L29;
end;
theorem
L406: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( All (R13 , ( R7 '&' R8 )) ) => ( ( All (R13 , R7) ) '&' R8 ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L407: ( ( R8 '&' ( All (R13 , R7) ) ) => ( ( All (R13 , R7) ) '&' R8 ) ) is  valid by CQC_THE1:64;
L408: (( All (R13 , ( ( R7 '&' R8 ) => ( R8 '&' R7 ) )) ) is  valid & ( ( All (R13 , ( ( R7 '&' R8 ) => ( R8 '&' R7 ) )) ) => ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , ( R8 '&' R7 )) ) ) ) is  valid) by L161 , L199 , CQC_THE1:64;
L409: ( ( All (R13 , ( R7 '&' R8 )) ) => ( All (R13 , ( R8 '&' R7 )) ) ) is  valid by L408 , CQC_THE1:65;
L410: ( ( All (R13 , ( R8 '&' R7 )) ) => ( R8 '&' ( All (R13 , R7) ) ) ) is  valid by L397;
L411: ( ( All (R13 , ( R7 '&' R8 )) ) => ( R8 '&' ( All (R13 , R7) ) ) ) is  valid by L410 , L409 , LUKASI_1:42;
thus L412: thesis by L411 , L407 , LUKASI_1:42;
end;
theorem
L413: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( R7 '&' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 '&' R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L414: (not R13 in ( still_not-bound_in R7 ));
L415: ( ( All (R13 , R8) ) => R8 ) is  valid by CQC_THE1:66;
L416: ( ( R7 '&' ( All (R13 , R8) ) ) => ( R7 '&' R8 ) ) is  valid by L415 , L46;
L417: (not R13 in ( still_not-bound_in ( All (R13 , R8) ) )) by L86;
L418: (not R13 in ( still_not-bound_in ( R7 '&' ( All (R13 , R8) ) ) )) by L417 , L414 , L95;
thus L419: thesis by L418 , L416 , CQC_THE1:67;
end;
theorem
L420: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (((not R13 in ( still_not-bound_in R7 )) & ( R7 '&' ( All (R13 , R8) ) ) is  valid) implies ( All (R13 , ( R7 '&' R8 )) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume that
L421: (not R13 in ( still_not-bound_in R7 ))
and
L422: ( R7 '&' ( All (R13 , R8) ) ) is  valid;
L423: ( ( R7 '&' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 '&' R8 )) ) ) is  valid by L421 , L413;
thus L424: thesis by L423 , L422 , CQC_THE1:65;
end;
theorem
L425: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( ( R7 'or' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid & ( ( All (R13 , ( R7 'or' R8 )) ) => ( R7 'or' ( All (R13 , R8) ) ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L426: (not R13 in ( still_not-bound_in ( All (R13 , ( R7 'or' R8 )) ) )) by L86;
L427: (( ( All (R13 , ( R7 'or' R8 )) ) => ( R7 'or' R8 ) ) is  valid & ( ( R7 'or' R8 ) => ( ( 'not' R7 ) => R8 ) ) is  valid) by L52 , CQC_THE1:66;
L428: ( ( All (R13 , ( R7 'or' R8 )) ) => ( ( 'not' R7 ) => R8 ) ) is  valid by L427 , LUKASI_1:42;
L429: ( ( ( All (R13 , ( R7 'or' R8 )) ) '&' ( 'not' R7 ) ) => R8 ) is  valid by L428 , L1;
assume L430: (not R13 in ( still_not-bound_in R7 ));
L431: (not R13 in ( still_not-bound_in ( 'not' R7 ) )) by L430 , QC_LANG3:7;
L432: (not R13 in ( still_not-bound_in ( ( All (R13 , ( R7 'or' R8 )) ) '&' ( 'not' R7 ) ) )) by L431 , L426 , L95;
L433: ( ( ( All (R13 , ( R7 'or' R8 )) ) '&' ( 'not' R7 ) ) => ( All (R13 , R8) ) ) is  valid by L432 , L429 , CQC_THE1:67;
L434: ( ( All (R13 , ( R7 'or' R8 )) ) => ( ( 'not' R7 ) => ( All (R13 , R8) ) ) ) is  valid by L433 , L12;
L435: ( R7 => R7 ) is  valid;
L436: ( R7 => ( All (R13 , R7) ) ) is  valid by L435 , L430 , CQC_THE1:67;
L437: ( ( R7 'or' ( All (R13 , R8) ) ) => ( ( All (R13 , R7) ) 'or' ( All (R13 , R8) ) ) ) is  valid by L436 , L49;
L438: ( ( ( All (R13 , R7) ) 'or' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid by L267;
thus L439: ( ( R7 'or' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid by L438 , L437 , LUKASI_1:42;
L440: ( ( ( 'not' R7 ) => ( All (R13 , R8) ) ) => ( R7 'or' ( All (R13 , R8) ) ) ) is  valid by L54;
thus L441: thesis by L440 , L434 , LUKASI_1:42;
end;
theorem
L442: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( R7 'or' ( All (R13 , R8) ) ) <=> ( All (R13 , ( R7 'or' R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L443: (not R13 in ( still_not-bound_in R7 ));
L444: (( ( R7 'or' ( All (R13 , R8) ) ) => ( All (R13 , ( R7 'or' R8 )) ) ) is  valid & ( ( All (R13 , ( R7 'or' R8 )) ) => ( R7 'or' ( All (R13 , R8) ) ) ) is  valid) by L443 , L425;
thus L445: thesis by L444 , L61;
end;
theorem
L446: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( R7 'or' ( All (R13 , R8) ) ) is  valid iff ( All (R13 , ( R7 'or' R8 )) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L447: (not R13 in ( still_not-bound_in R7 ));
L448: ( ( R7 'or' ( All (R13 , R8) ) ) <=> ( All (R13 , ( R7 'or' R8 )) ) ) is  valid by L447 , L442;
thus L449: thesis by L448 , L69;
end;
theorem
L450: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( ( R7 '&' ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid & ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( R7 '&' ( Ex (R13 , R8) ) ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L451: (not R13 in ( still_not-bound_in R7 ));
L452: ( ( R7 '&' R8 ) => ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid by L119;
L453: ( R8 => ( R7 => ( Ex (R13 , ( R7 '&' R8 )) ) ) ) is  valid by L452 , L16;
L454: (not R13 in ( still_not-bound_in ( Ex (R13 , ( R7 '&' R8 )) ) )) by L89;
L455: (not R13 in ( still_not-bound_in ( R7 => ( Ex (R13 , ( R7 '&' R8 )) ) ) )) by L454 , L451 , L92;
L456: ( ( Ex (R13 , R8) ) => ( R7 => ( Ex (R13 , ( R7 '&' R8 )) ) ) ) is  valid by L455 , L453 , L135;
thus L457: ( ( R7 '&' ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid by L456 , L5;
L458: ( R8 => ( Ex (R13 , R8) ) ) is  valid by L119;
L459: ( ( R7 '&' R8 ) => ( R7 '&' ( Ex (R13 , R8) ) ) ) is  valid by L458 , L46;
L460: (not R13 in ( still_not-bound_in ( Ex (R13 , R8) ) )) by L89;
L461: (not R13 in ( still_not-bound_in ( R7 '&' ( Ex (R13 , R8) ) ) )) by L460 , L451 , L95;
thus L462: thesis by L461 , L459 , L135;
end;
theorem
L463: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( R7 '&' ( Ex (R13 , R8) ) ) <=> ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L464: (not R13 in ( still_not-bound_in R7 ));
L465: (( ( R7 '&' ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid & ( ( Ex (R13 , ( R7 '&' R8 )) ) => ( R7 '&' ( Ex (R13 , R8) ) ) ) is  valid) by L464 , L450;
thus L466: thesis by L465 , L61;
end;
theorem
L467: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( R7 '&' ( Ex (R13 , R8) ) ) is  valid iff ( Ex (R13 , ( R7 '&' R8 )) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L468: (not R13 in ( still_not-bound_in R7 ));
L469: ( ( R7 '&' ( Ex (R13 , R8) ) ) <=> ( Ex (R13 , ( R7 '&' R8 )) ) ) is  valid by L468 , L463;
thus L470: thesis by L469 , L69;
end;
L471: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L472: (not R13 in ( still_not-bound_in R7 ));
L473: ( R7 => ( All (R13 , R7) ) ) is  valid by L472 , L169;
L474: ( ( All (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => ( All (R13 , R8) ) ) ) is  valid by L199;
L475: ( ( All (R13 , R7) ) => ( ( All (R13 , ( R7 => R8 )) ) => ( All (R13 , R8) ) ) ) is  valid by L474 , LUKASI_1:44;
L476: ( R7 => ( ( All (R13 , ( R7 => R8 )) ) => ( All (R13 , R8) ) ) ) is  valid by L475 , L473 , LUKASI_1:42;
thus L477: thesis by L476 , LUKASI_1:44;
end;
theorem
L478: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ) is  valid & ( ( R7 => ( All (R13 , R8) ) ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L479: (not R13 in ( still_not-bound_in R7 ));
thus L480: ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ) is  valid by L479 , L471;
L481: (not R13 in ( still_not-bound_in ( All (R13 , R8) ) )) by L86;
L482: (not R13 in ( still_not-bound_in ( R7 => ( All (R13 , R8) ) ) )) by L481 , L479 , L92;
L483: ( ( All (R13 , ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) )) ) => ( ( R7 => ( All (R13 , R8) ) ) => ( All (R13 , ( R7 => R8 )) ) ) ) is  valid by L482 , L471;
L484: (( All (R13 , ( ( ( All (R13 , R8) ) => R8 ) => ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) ) )) ) is  valid & ( ( All (R13 , ( ( ( All (R13 , R8) ) => R8 ) => ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) ) )) ) => ( ( All (R13 , ( ( All (R13 , R8) ) => R8 )) ) => ( All (R13 , ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) )) ) ) ) is  valid) by L161 , L199;
L485: ( ( All (R13 , ( ( All (R13 , R8) ) => R8 )) ) => ( All (R13 , ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) )) ) ) is  valid by L484 , CQC_THE1:65;
L486: ( All (R13 , ( ( All (R13 , R8) ) => R8 )) ) is  valid by L161 , CQC_THE1:66;
L487: ( All (R13 , ( ( R7 => ( All (R13 , R8) ) ) => ( R7 => R8 ) )) ) is  valid by L486 , L485 , CQC_THE1:65;
thus L488: thesis by L487 , L483 , CQC_THE1:65;
end;
theorem
L489: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( R7 => ( All (R13 , R8) ) ) <=> ( All (R13 , ( R7 => R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L490: (not R13 in ( still_not-bound_in R7 ));
L491: (( ( R7 => ( All (R13 , R8) ) ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid & ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ) is  valid) by L490 , L478;
thus L492: thesis by L491 , L61;
end;
theorem
L493: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( All (R13 , ( R7 => R8 )) ) is  valid iff ( R7 => ( All (R13 , R8) ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L494: (not R13 in ( still_not-bound_in R7 ));
L495: ( ( R7 => ( All (R13 , R8) ) ) <=> ( All (R13 , ( R7 => R8 )) ) ) is  valid by L494 , L489;
thus L496: thesis by L495 , L69;
end;
theorem
L497: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R8 )) implies ( ( Ex (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => R8 ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L498: (not R13 in ( still_not-bound_in R8 ));
L499: (not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) by L86;
L500: (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) => R8 ) )) by L499 , L498 , L92;
L501: ( ( Ex (R13 , ( ( All (R13 , R7) ) => R8 )) ) => ( ( All (R13 , R7) ) => R8 ) ) is  valid by L500 , L142;
L502: ( ( All (R13 , R7) ) => R7 ) is  valid by CQC_THE1:66;
L503: ( All (R13 , ( ( R7 => R8 ) => ( ( All (R13 , R7) ) => R8 ) )) ) is  valid by L502 , L161 , LUKASI_1:41;
L504: ( ( All (R13 , ( ( R7 => R8 ) => ( ( All (R13 , R7) ) => R8 ) )) ) => ( ( Ex (R13 , ( R7 => R8 )) ) => ( Ex (R13 , ( ( All (R13 , R7) ) => R8 )) ) ) ) is  valid by L236;
L505: ( ( Ex (R13 , ( R7 => R8 )) ) => ( Ex (R13 , ( ( All (R13 , R7) ) => R8 )) ) ) is  valid by L504 , L503 , CQC_THE1:65;
thus L506: thesis by L505 , L501 , LUKASI_1:42;
end;
theorem
L507: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( ( All (R13 , R7) ) => R8 ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L508: ( ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) => ( ( All (R13 , R7) ) '&' ( 'not' R8 ) ) ) is  valid by L406;
L509: ( ( 'not' ( ( All (R13 , R7) ) '&' ( 'not' R8 ) ) ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L508 , LUKASI_1:52;
L510: ( ( ( All (R13 , R7) ) => R8 ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L509 , QC_LANG2:def 2;
L511: (( All (R13 , ( ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) ) => ( R7 '&' ( 'not' R8 ) ) )) ) is  valid & ( ( All (R13 , ( ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) ) => ( R7 '&' ( 'not' R8 ) ) )) ) => ( ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) => ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid) by L161 , L199;
L512: ( ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) => ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) is  valid by L511 , CQC_THE1:65;
L513: ( ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) => ( 'not' ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) ) ) is  valid by L512 , LUKASI_1:52;
L514: ( ( ( All (R13 , R7) ) => R8 ) => ( 'not' ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) ) ) is  valid by L513 , L510 , LUKASI_1:42;
L515: ( ( ( All (R13 , R7) ) => R8 ) => ( Ex (R13 , ( 'not' ( R7 '&' ( 'not' R8 ) ) )) ) ) is  valid by L514 , QC_LANG2:def 5;
thus L516: thesis by L515 , QC_LANG2:def 2;
end;
theorem
L517: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R8 )) implies (( ( All (R13 , R7) ) => R8 ) is  valid iff ( Ex (R13 , ( R7 => R8 )) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L518: (not R13 in ( still_not-bound_in R8 ));
L519: ( ( Ex (R13 , ( R7 => R8 )) ) => ( ( All (R13 , R7) ) => R8 ) ) is  valid by L518 , L497;
L520: ( ( ( All (R13 , R7) ) => R8 ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid by L507;
L521: ( ( ( All (R13 , R7) ) => R8 ) <=> ( Ex (R13 , ( R7 => R8 )) ) ) is  valid by L520 , L519 , L61;
thus L522: thesis by L521 , L69;
end;
theorem
L523: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R8 )) implies (( ( ( Ex (R13 , R7) ) => R8 ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid & ( ( All (R13 , ( R7 => R8 )) ) => ( ( Ex (R13 , R7) ) => R8 ) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L524: (not R13 in ( still_not-bound_in R8 ));
L525: ( R7 => ( Ex (R13 , R7) ) ) is  valid by L119;
L526: ( ( ( Ex (R13 , R7) ) => R8 ) => ( R7 => R8 ) ) is  valid by L525 , LUKASI_1:41;
L527: (not R13 in ( still_not-bound_in ( Ex (R13 , R7) ) )) by L89;
L528: (not R13 in ( still_not-bound_in ( ( Ex (R13 , R7) ) => R8 ) )) by L527 , L524 , L92;
thus L529: ( ( ( Ex (R13 , R7) ) => R8 ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid by L528 , L526 , CQC_THE1:67;
L530: ( ( All (R13 , ( R7 => R8 )) ) => ( ( Ex (R13 , R7) ) => ( Ex (R13 , R8) ) ) ) is  valid by L236;
L531: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( Ex (R13 , R7) ) ) => ( Ex (R13 , R8) ) ) is  valid by L530 , L1;
L532: ( ( Ex (R13 , R8) ) => R8 ) is  valid by L524 , L142;
L533: ( ( ( All (R13 , ( R7 => R8 )) ) '&' ( Ex (R13 , R7) ) ) => R8 ) is  valid by L532 , L531 , LUKASI_1:42;
thus L534: thesis by L533 , L12;
end;
theorem
L535: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R8 )) implies ( ( ( Ex (R13 , R7) ) => R8 ) <=> ( All (R13 , ( R7 => R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L536: (not R13 in ( still_not-bound_in R8 ));
L537: (( ( ( Ex (R13 , R7) ) => R8 ) => ( All (R13 , ( R7 => R8 )) ) ) is  valid & ( ( All (R13 , ( R7 => R8 )) ) => ( ( Ex (R13 , R7) ) => R8 ) ) is  valid) by L536 , L523;
thus L538: thesis by L537 , L61;
end;
theorem
L539: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R8 )) implies (( ( Ex (R13 , R7) ) => R8 ) is  valid iff ( All (R13 , ( R7 => R8 )) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L540: (not R13 in ( still_not-bound_in R8 ));
L541: ( ( ( Ex (R13 , R7) ) => R8 ) <=> ( All (R13 , ( R7 => R8 )) ) ) is  valid by L540 , L535;
thus L542: thesis by L541 , L69;
end;
theorem
L543: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( Ex (R13 , ( R7 => R8 )) ) => ( R7 => ( Ex (R13 , R8) ) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L544: (not R13 in ( still_not-bound_in R7 ));
L545: (not R13 in ( still_not-bound_in ( Ex (R13 , R8) ) )) by L89;
L546: (not R13 in ( still_not-bound_in ( R7 => ( Ex (R13 , R8) ) ) )) by L545 , L544 , L92;
L547: ( ( Ex (R13 , ( R7 => ( Ex (R13 , R8) ) )) ) => ( R7 => ( Ex (R13 , R8) ) ) ) is  valid by L546 , L142;
L548: ( R8 => ( Ex (R13 , R8) ) ) is  valid by L119;
L549: ( All (R13 , ( ( R7 => R8 ) => ( R7 => ( Ex (R13 , R8) ) ) )) ) is  valid by L548 , L161 , LUKASI_1:51;
L550: ( ( All (R13 , ( ( R7 => R8 ) => ( R7 => ( Ex (R13 , R8) ) ) )) ) => ( ( Ex (R13 , ( R7 => R8 )) ) => ( Ex (R13 , ( R7 => ( Ex (R13 , R8) ) )) ) ) ) is  valid by L236;
L551: ( ( Ex (R13 , ( R7 => R8 )) ) => ( Ex (R13 , ( R7 => ( Ex (R13 , R8) ) )) ) ) is  valid by L550 , L549 , CQC_THE1:65;
thus L552: thesis by L551 , L547 , LUKASI_1:42;
end;
theorem
L553: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ( ( R7 => ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L554: (( All (R13 , ( ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) ) => ( R7 '&' ( 'not' R8 ) ) )) ) is  valid & ( ( All (R13 , ( ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) ) => ( R7 '&' ( 'not' R8 ) ) )) ) => ( ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) => ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid) by L161 , L199;
L555: ( ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) => ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) is  valid by L554 , CQC_THE1:65;
L556: ( ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) => ( 'not' ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) ) ) is  valid by L555 , LUKASI_1:52;
L557: ( ( All (R13 , ( 'not' R8 )) ) <=> ( 'not' ( Ex (R13 , R8) ) ) ) is  valid by L335;
L558: ( ( All (R13 , ( 'not' R8 )) ) => ( 'not' ( Ex (R13 , R8) ) ) ) is  valid by L557 , L61;
L559: ( ( R7 '&' ( All (R13 , ( 'not' R8 )) ) ) => ( R7 '&' ( 'not' ( Ex (R13 , R8) ) ) ) ) is  valid by L558 , L46;
L560: ( ( 'not' ( R7 '&' ( 'not' ( Ex (R13 , R8) ) ) ) ) => ( 'not' ( R7 '&' ( All (R13 , ( 'not' R8 )) ) ) ) ) is  valid by L559 , LUKASI_1:52;
L561: ( ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) => ( R7 '&' ( All (R13 , ( 'not' R8 )) ) ) ) is  valid by L397;
L562: ( ( 'not' ( R7 '&' ( All (R13 , ( 'not' R8 )) ) ) ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L561 , LUKASI_1:52;
L563: ( ( 'not' ( R7 '&' ( 'not' ( Ex (R13 , R8) ) ) ) ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L562 , L560 , LUKASI_1:42;
L564: ( ( R7 => ( Ex (R13 , R8) ) ) => ( 'not' ( All (R13 , ( R7 '&' ( 'not' R8 ) )) ) ) ) is  valid by L563 , QC_LANG2:def 2;
L565: ( ( R7 => ( Ex (R13 , R8) ) ) => ( 'not' ( All (R13 , ( 'not' ( 'not' ( R7 '&' ( 'not' R8 ) ) ) )) ) ) ) is  valid by L564 , L556 , LUKASI_1:42;
L566: ( ( R7 => ( Ex (R13 , R8) ) ) => ( 'not' ( All (R13 , ( 'not' ( R7 => R8 ) )) ) ) ) is  valid by L565 , QC_LANG2:def 2;
thus L567: thesis by L566 , QC_LANG2:def 5;
end;
theorem
L568: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies ( ( R7 => ( Ex (R13 , R8) ) ) <=> ( Ex (R13 , ( R7 => R8 )) ) ) is  valid)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L569: (not R13 in ( still_not-bound_in R7 ));
L570: ( ( Ex (R13 , ( R7 => R8 )) ) => ( R7 => ( Ex (R13 , R8) ) ) ) is  valid by L569 , L543;
L571: ( ( R7 => ( Ex (R13 , R8) ) ) => ( Ex (R13 , ( R7 => R8 )) ) ) is  valid by L553;
thus L572: thesis by L571 , L570 , L61;
end;
theorem
L573: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies (( R7 => ( Ex (R13 , R8) ) ) is  valid iff ( Ex (R13 , ( R7 => R8 )) ) is  valid))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L574: (not R13 in ( still_not-bound_in R7 ));
L575: ( ( R7 => ( Ex (R13 , R8) ) ) <=> ( Ex (R13 , ( R7 => R8 )) ) ) is  valid by L574 , L568;
thus L576: thesis by L575 , L69;
end;
theorem
L577: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds { R7 } |- R7))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
L578: (R7 in { R7 } & { R7 } c= ( Cn { R7 } )) by CQC_THE1:17 , TARSKI:def 1;
thus L579: R7 in ( Cn { R7 } ) by L578;
end;
theorem
L580: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds ( Cn ( { R7 } \/ { R8 } ) ) = ( Cn { ( R7 '&' R8 ) } ))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
L581: (for R10 being (Element of ( CQC-WFF R1 )) holds (R10 in ( Cn ( { R7 } \/ { R8 } ) ) iff (for R3 being (Subset of ( CQC-WFF R1 )) holds ((R3 is  being_a_theory & { ( R7 '&' R8 ) } c= R3) implies R10 in R3))))
proof
let R10 being (Element of ( CQC-WFF R1 ));
thus L582: (R10 in ( Cn ( { R7 } \/ { R8 } ) ) implies (for R3 being (Subset of ( CQC-WFF R1 )) holds ((R3 is  being_a_theory & { ( R7 '&' R8 ) } c= R3) implies R10 in R3)))
proof
assume L583: R10 in ( Cn ( { R7 } \/ { R8 } ) );
let R3 being (Subset of ( CQC-WFF R1 ));
assume that
L584: R3 is  being_a_theory
and
L585: { ( R7 '&' R8 ) } c= R3;
L586: (( R7 '&' R8 ) in R3 & ( TAUT R1 ) c= R3) by L584 , L585 , CQC_THE1:38 , ZFMISC_1:31;
L587: ( ( R7 '&' R8 ) => R8 ) in ( TAUT R1 ) by PROCAL_1:21;
L588: R8 in R3 by L587 , L584 , L586 , CQC_THE1:def 1;
L589: { R8 } c= R3 by L588 , ZFMISC_1:31;
L590: ( ( R7 '&' R8 ) => R7 ) in ( TAUT R1 ) by PROCAL_1:19;
L591: R7 in R3 by L590 , L584 , L586 , CQC_THE1:def 1;
L592: { R7 } c= R3 by L591 , ZFMISC_1:31;
L593: ( { R7 } \/ { R8 } ) c= R3 by L592 , L589 , XBOOLE_1:8;
thus L594: thesis by L593 , L583 , L584 , CQC_THE1:def 2;
end;

thus L595: ((for R3 being (Subset of ( CQC-WFF R1 )) holds ((R3 is  being_a_theory & { ( R7 '&' R8 ) } c= R3) implies R10 in R3)) implies R10 in ( Cn ( { R7 } \/ { R8 } ) ))
proof
assume L596: (for R3 being (Subset of ( CQC-WFF R1 )) holds ((R3 is  being_a_theory & { ( R7 '&' R8 ) } c= R3) implies R10 in R3));
L597: (for R3 being (Subset of ( CQC-WFF R1 )) holds ((R3 is  being_a_theory & ( { R7 } \/ { R8 } ) c= R3) implies R10 in R3))
proof
let R3 being (Subset of ( CQC-WFF R1 ));
assume that
L598: R3 is  being_a_theory
and
L599: ( { R7 } \/ { R8 } ) c= R3;
L600: { R7 } c= ( { R7 } \/ { R8 } ) by XBOOLE_1:7;
L601: { R7 } c= R3 by L600 , L599 , XBOOLE_1:1;
L602: R7 in R3 by L601 , ZFMISC_1:31;
L603: { R8 } c= ( { R7 } \/ { R8 } ) by XBOOLE_1:7;
L604: { R8 } c= R3 by L603 , L599 , XBOOLE_1:1;
L605: R8 in R3 by L604 , ZFMISC_1:31;
L606: (( R7 => ( R8 => ( R7 '&' R8 ) ) ) in ( TAUT R1 ) & ( TAUT R1 ) c= R3) by L598 , CQC_THE1:38 , PROCAL_1:28;
L607: ( R8 => ( R7 '&' R8 ) ) in R3 by L606 , L598 , L602 , CQC_THE1:def 1;
L608: ( R7 '&' R8 ) in R3 by L607 , L598 , L605 , CQC_THE1:def 1;
L609: { ( R7 '&' R8 ) } c= R3 by L608 , ZFMISC_1:31;
thus L610: thesis by L609 , L596 , L598;
end;
thus L611: thesis by L597 , CQC_THE1:def 2;
end;

end;
thus L596: thesis by L581 , CQC_THE1:def 2;
end;
theorem
L597: (for R1 being QC-alphabet holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds ({ R7 , R8 } |- R9 iff { ( R7 '&' R8 ) } |- R9)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( CQC-WFF R1 ));
let R8 being (Element of ( CQC-WFF R1 ));
let R9 being (Element of ( CQC-WFF R1 ));
thus L598: ({ R7 , R8 } |- R9 implies { ( R7 '&' R8 ) } |- R9)
proof
assume L599: R9 in ( Cn { R7 , R8 } );
L600: R9 in ( Cn ( { R7 } \/ { R8 } ) ) by L599 , ENUMSET1:1;
thus L601: R9 in ( Cn { ( R7 '&' R8 ) } ) by L600 , L580;
end;

assume L602: R9 in ( Cn { ( R7 '&' R8 ) } );
L603: R9 in ( Cn ( { R7 } \/ { R8 } ) ) by L602 , L580;
thus L604: R9 in ( Cn { R7 , R8 } ) by L603 , ENUMSET1:1;
end;
theorem
L605: (for R1 being QC-alphabet holds (for R2 being (Subset of ( CQC-WFF R1 )) holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (R2 |- R7 implies R2 |- ( All (R13 , R7) ))))))
proof
let R1 being QC-alphabet;
let R2 being (Subset of ( CQC-WFF R1 ));
let R7 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
L606: R2 |- ( R7 => ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => R7 ) ) by CQC_THE1:59;
L607: (not R13 in ( still_not-bound_in ( All (R13 , R7) ) )) by L86;
L608: (not R13 in ( still_not-bound_in ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) )) by L607 , L92;
assume L609: R2 |- R7;
L610: R2 |- ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => R7 ) by L609 , L606 , CQC_THE1:55;
L611: R2 |- ( ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) => ( All (R13 , R7) ) ) by L610 , L608 , CQC_THE1:57;
L612: R2 |- ( ( All (R13 , R7) ) => ( All (R13 , R7) ) ) by CQC_THE1:59;
thus L613: thesis by L612 , L611 , CQC_THE1:55;
end;
theorem
L614: (for R1 being QC-alphabet holds (for R2 being (Subset of ( CQC-WFF R1 )) holds (for R7 being (Element of ( CQC-WFF R1 )) holds (for R8 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((not R13 in ( still_not-bound_in R7 )) implies R2 |- ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ))))))) by L478 , CQC_THE1:59;
::$N Deduction Theorem
theorem
L615: (for R1 being QC-alphabet holds (for R2 being (Subset of ( CQC-WFF R1 )) holds (for R4 being (Element of ( CQC-WFF R1 )) holds (for R5 being (Element of ( CQC-WFF R1 )) holds ((R4 is  closed & ( R2 \/ { R4 } ) |- R5) implies R2 |- ( R4 => R5 ))))))
proof
let R1 being QC-alphabet;
let R2 being (Subset of ( CQC-WFF R1 ));
let R4 being (Element of ( CQC-WFF R1 ));
let R5 being (Element of ( CQC-WFF R1 ));
assume that
L616: R4 is  closed
and
L617: ( R2 \/ { R4 } ) |- R5;
L618: R5 in ( Cn ( R2 \/ { R4 } ) ) by L617 , CQC_THE1:def 8;
consider R15 being (FinSequence of [: ( CQC-WFF R1 ) , ( Proof_Step_Kinds ) :]) such that L619: R15 is_a_proof_wrt ( R2 \/ { R4 } ) and L620: ( Effect R15 ) = R5 by L618 , CQC_THE1:36;
L621: R15 <> ( {} ) by L619 , CQC_THE1:def 5;
L622: R5 = ( ( R15 . ( len R15 ) ) `1 ) by L621 , L620 , CQC_THE1:def 6;
defpred S1[ Nat ] means ((1 <= $1 & $1 <= ( len R15 )) implies (for R6 being (Element of ( CQC-WFF R1 )) holds (R6 = ( ( R15 . $1 ) `1 ) implies R2 |- ( R4 => R6 ))));
L623: (for B1 being Nat holds ((for B2 being Nat holds (B2 < B1 implies S1[ B2 ])) implies S1[ B1 ]))
proof
let C1 being Nat;
assume that
L624: (for B3 being Nat holds (B3 < C1 implies ((1 <= B3 & B3 <= ( len R15 )) implies (for R6 being (Element of ( CQC-WFF R1 )) holds (R6 = ( ( R15 . B3 ) `1 ) implies R2 |- ( R4 => R6 ))))));
assume that
L625: 1 <= C1
and
L626: C1 <= ( len R15 );
L627: C1 in ( NAT ) by ORDINAL1:def 12;
L628: R15 , C1 is_a_correct_step_wrt ( R2 \/ { R4 } ) by L627 , L619 , L625 , L626 , CQC_THE1:def 5;
let R6 being (Element of ( CQC-WFF R1 ));
assume that
L629: R6 = ( ( R15 . C1 ) `1 );
L630:
now
per cases  by L625 , L626 , CQC_THE1:23;
suppose L631: ( ( R15 . C1 ) `2 ) = ( 0 );

L632: R6 in ( R2 \/ { R4 } ) by L631 , L629 , L628 , CQC_THE1:def 4;
L633: (R6 in R2 or R6 in { R4 }) by L632 , XBOOLE_0:def 3;
L634:
now
per cases  by L633 , TARSKI:def 1;
suppose L635: R6 in R2;

L636: R2 c= ( Cn R2 ) by CQC_THE1:17;
L637: R2 |- R6 by L636 , L635 , CQC_THE1:def 8;
L638: R2 |- ( R6 => ( R4 => R6 ) ) by CQC_THE1:59;
thus L639: thesis by L638 , L637 , CQC_THE1:55;
end;
suppose L640: R6 = R4;

thus L641: thesis by L640 , CQC_THE1:59;
end;
end;
thus L643: thesis by L634;
end;
suppose L644: ( ( R15 . C1 ) `2 ) = 1;

L645: R6 = ( VERUM R1 ) by L644 , L629 , L628 , CQC_THE1:def 4;
thus L646: thesis by L645 , CQC_THE1:59 , LUKASI_1:46;
end;
suppose L647: ( ( R15 . C1 ) `2 ) = 2;

L648: (ex R7 being (Element of ( CQC-WFF R1 )) st R6 = ( ( ( 'not' R7 ) => R7 ) => R7 )) by L647 , L629 , L628 , CQC_THE1:def 4;
L649: R6 is  valid by L648 , CQC_THE1:61;
thus L650: thesis by L649 , CQC_THE1:59 , LUKASI_1:61;
end;
suppose L651: ( ( R15 . C1 ) `2 ) = 3;

L652: (ex R7 being (Element of ( CQC-WFF R1 )) st (ex R8 being (Element of ( CQC-WFF R1 )) st R6 = ( R7 => ( ( 'not' R7 ) => R8 ) ))) by L651 , L629 , L628 , CQC_THE1:def 4;
L653: R6 is  valid by L652 , CQC_THE1:62;
thus L654: thesis by L653 , CQC_THE1:59 , LUKASI_1:61;
end;
suppose L655: ( ( R15 . C1 ) `2 ) = 4;

L656: (ex R7 being (Element of ( CQC-WFF R1 )) st (ex R8 being (Element of ( CQC-WFF R1 )) st (ex R9 being (Element of ( CQC-WFF R1 )) st R6 = ( ( R7 => R8 ) => ( ( 'not' ( R8 '&' R9 ) ) => ( 'not' ( R7 '&' R9 ) ) ) )))) by L655 , L629 , L628 , CQC_THE1:def 4;
L657: R6 is  valid by L656 , CQC_THE1:63;
thus L658: thesis by L657 , CQC_THE1:59 , LUKASI_1:61;
end;
suppose L659: ( ( R15 . C1 ) `2 ) = 5;

L660: (ex R7 being (Element of ( CQC-WFF R1 )) st (ex R8 being (Element of ( CQC-WFF R1 )) st R6 = ( ( R7 '&' R8 ) => ( R8 '&' R7 ) ))) by L659 , L629 , L628 , CQC_THE1:def 4;
L661: R6 is  valid by L660 , CQC_THE1:64;
thus L662: thesis by L661 , CQC_THE1:59 , LUKASI_1:61;
end;
suppose L663: ( ( R15 . C1 ) `2 ) = 6;

L664: (ex R7 being (Element of ( CQC-WFF R1 )) st (ex R13 being (bound_QC-variable of R1) st R6 = ( ( All (R13 , R7) ) => R7 ))) by L663 , L629 , L628 , CQC_THE1:def 4;
L665: R6 is  valid by L664 , CQC_THE1:66;
thus L666: thesis by L665 , CQC_THE1:59 , LUKASI_1:61;
end;
suppose L667: ( ( R15 . C1 ) `2 ) = 7;

consider R16 being (Element of ( NAT )), R17 being (Element of ( NAT )), R7 being (Element of ( CQC-WFF R1 )), R8 being (Element of ( CQC-WFF R1 )) such that L668: 1 <= R16 and L669: R16 < C1 and L670: 1 <= R17 and L671: R17 < R16 and L672: R7 = ( ( R15 . R17 ) `1 ) and L673: R8 = R6 and L674: ( ( R15 . R16 ) `1 ) = ( R7 => R8 ) by L667 , L629 , L628 , CQC_THE1:def 4;
L675: R16 <= ( len R15 ) by L626 , L669 , XXREAL_0:2;
L676: R2 |- ( R4 => ( R7 => R8 ) ) by L675 , L624 , L668 , L669 , L674;
L677: R2 |- ( ( R4 => ( R7 => R8 ) ) => ( ( R4 => R7 ) => ( R4 => R8 ) ) ) by CQC_THE1:59;
L678: R2 |- ( ( R4 => R7 ) => ( R4 => R8 ) ) by L677 , L676 , CQC_THE1:55;
L679: R17 < C1 by L669 , L671 , XXREAL_0:2;
L680: R17 <= ( len R15 ) by L679 , L626 , XXREAL_0:2;
L681: R17 < C1 by L669 , L671 , XXREAL_0:2;
L682: R2 |- ( R4 => R7 ) by L681 , L624 , L670 , L672 , L680;
thus L683: thesis by L682 , L673 , L678 , CQC_THE1:55;
end;
suppose L684: ( ( R15 . C1 ) `2 ) = 8;

consider R16 being (Element of ( NAT )), R7 being (Element of ( CQC-WFF R1 )), R8 being (Element of ( CQC-WFF R1 )), R13 being (bound_QC-variable of R1) such that L685: 1 <= R16 and L686: R16 < C1 and L687: ( ( R15 . R16 ) `1 ) = ( R7 => R8 ) and L688: (not R13 in ( still_not-bound_in R7 )) and L689: R6 = ( R7 => ( All (R13 , R8) ) ) by L684 , L629 , L628 , CQC_THE1:def 4;
L690: R2 |- ( ( All (R13 , ( R7 => R8 )) ) => ( R7 => ( All (R13 , R8) ) ) ) by L688 , L478 , CQC_THE1:59;
L691: (not R13 in ( still_not-bound_in R4 )) by L616 , QC_LANG1:def 31;
L692: R2 |- ( ( All (R13 , ( R4 => ( R7 => R8 ) )) ) => ( R4 => ( All (R13 , ( R7 => R8 )) ) ) ) by L691 , L478 , CQC_THE1:59;
L693: R16 <= ( len R15 ) by L626 , L686 , XXREAL_0:2;
L694: R2 |- ( All (R13 , ( R4 => ( R7 => R8 ) )) ) by L693 , L624 , L685 , L686 , L687 , L605;
L695: R2 |- ( R4 => ( All (R13 , ( R7 => R8 )) ) ) by L694 , L692 , CQC_THE1:55;
thus L696: thesis by L695 , L689 , L690 , LUKASI_1:59;
end;
suppose L697: ( ( R15 . C1 ) `2 ) = 9;

consider R16 being (Element of ( NAT )), R13 being (bound_QC-variable of R1), R14 being (bound_QC-variable of R1), R11 being (QC-formula of R1) such that L698: 1 <= R16 and L699: R16 < C1 and L700: (( R11 . R13 ) in ( CQC-WFF R1 ) & ( R11 . R14 ) in ( CQC-WFF R1 )) and L701: (not R13 in ( still_not-bound_in R11 )) and L702: ( R11 . R13 ) = ( ( R15 . R16 ) `1 ) and L703: R6 = ( R11 . R14 ) by L697 , L629 , L628 , CQC_THE1:def 4;
reconsider D1 = ( R11 . R13 ) , D2 = ( R11 . R14 ) as (Element of ( CQC-WFF R1 )) by L700;
L704: R2 |- ( ( All (R13 , D1) ) => D2 ) by L701 , L173 , CQC_THE1:59;
L705: (not R13 in ( still_not-bound_in R4 )) by L616 , QC_LANG1:def 31;
L706: R2 |- ( ( All (R13 , ( R4 => D1 )) ) => ( R4 => ( All (R13 , D1) ) ) ) by L705 , L478 , CQC_THE1:59;
L707: R16 <= ( len R15 ) by L626 , L699 , XXREAL_0:2;
L708: R2 |- ( All (R13 , ( R4 => D1 )) ) by L707 , L624 , L698 , L699 , L702 , L605;
L709: R2 |- ( R4 => ( All (R13 , D1) ) ) by L708 , L706 , CQC_THE1:55;
thus L710: thesis by L709 , L703 , L704 , LUKASI_1:59;
end;
end;
thus L712: thesis by L630;
end;
L713: (for B4 being Nat holds S1[ B4 ]) from NAT_1:sch 4(L623);
L714: 1 <= ( len R15 ) by L619 , CQC_THE1:25;
thus L715: thesis by L714 , L713 , L622;
end;
