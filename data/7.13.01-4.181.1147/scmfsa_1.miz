:: An Extension of { \bf SCM }
::  by Andrzej Trybulec , Yatsuka Nakamura and Piotr Rudnicki
::
:: Received February 3, 1996
:: Copyright (c) 1996-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, AMI_2, XBOOLE_0, TARSKI, CARD_1, FINSEQ_1,
      ZFMISC_1, RELAT_1, AMI_1, ORDINAL1, XXREAL_0, FUNCT_1, FUNCOP_1, FUNCT_4,
      INT_1, CARD_3, PBOOLE, NAT_1, PARTFUN1, COMPLEX1, FINSEQ_2, FUNCT_2,
      FUNCT_5, SCMFSA_1, GROUP_9, RECDEF_2, AFINSQ_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, ORDINAL1, CARD_1, NUMBERS,
      INT_2, PBOOLE, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2, BINOP_1, INT_1,
      AFINSQ_1, FINSEQ_1, FUNCT_4, FUNCT_5, FINSEQ_2, CARD_3, FUNCOP_1,
      FUNCT_7, XXREAL_0, RECDEF_2, SCM_INST, AMI_2, SCMFSA_I;
 constructors INT_2, FUNCT_5, RELSET_1, FUNCT_7, PRE_POLY, AMI_3, SCMFSA_I,
      BINOP_1, XTUPLE_0;
 registrations XBOOLE_0, FUNCT_1, ORDINAL1, FUNCOP_1, XREAL_0, INT_1, FINSEQ_1,
      CARD_3, AMI_2, RELAT_1, FINSET_1, CARD_1, CARD_2, RELSET_1, FUNCT_2,
      AFINSQ_1, COMPOS_0, SCM_INST, SCMFSA_I, XTUPLE_0;
 requirements NUMERALS, REAL, BOOLE, SUBSET;
 definitions TARSKI, FUNCOP_1, AMI_2, FUNCT_1, SCMFSA_I, XTUPLE_0;
 theorems ZFMISC_1, FUNCT_2, TARSKI, CAT_2, FUNCOP_1, INT_1, CARD_3, FINSEQ_1,
      FUNCT_4, RELAT_1, FUNCT_1, FINSEQ_2, PRE_CIRC, AMI_2, FUNCT_7, RELSET_1,
      ORDINAL1, XBOOLE_0, XBOOLE_1, NUMBERS, PARTFUN1, AFINSQ_1, SCMFSA_I,
      FUNCT_5, XTUPLE_0;
 schemes BINOP_1;

begin
notation
synonym SCM+FSA-Data-Loc for SCM-Data-Loc;
end;
definition
canceled 1;
func SCM+FSA-Memory equals 
( ( SCM-Memory ) \/ ( SCM+FSA-Data*-Loc ) );
coherence;
end;
registration
cluster ( SCM+FSA-Memory ) -> non  empty;
coherence;
end;
theorem
L4: ( SCM-Memory ) c= ( SCM+FSA-Memory ) by XBOOLE_1:7;
definition
redefine func SCM+FSA-Data-Loc -> (Subset of ( SCM+FSA-Memory ));

coherence
proof
L5: ( SCM-Data-Loc ) c= ( SCM-Memory );
thus L6: thesis by L5 , L4 , XBOOLE_1:1;
end;
end;
definition
redefine func SCM+FSA-Data*-Loc -> (Subset of ( SCM+FSA-Memory ));

coherence by XBOOLE_1:7;
end;
registration
cluster ( SCM+FSA-Data*-Loc ) -> non  empty;
coherence;
end;
definition
canceled 1;
func SCM+FSA-OK -> (Function of ( SCM+FSA-Memory ) , 3) equals 
( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) );
coherence
proof
L10: ( rng ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) c= 3
proof
L11: ( rng ( ( SCM+FSA-Memory ) --> 2 ) ) = { 2 } by FUNCOP_1:8;
L12: ( rng ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) c= ( { 2 } \/ ( rng ( SCM-OK ) ) ) by L11 , FUNCT_4:17;
L13: ( rng ( SCM-OK ) ) c= 2 by RELAT_1:def 19;
L14: ( { 2 } \/ ( rng ( SCM-OK ) ) ) c= ( 2 \/ { 2 } ) by L13 , XBOOLE_1:9;
L15: ( rng ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) c= ( 2 \/ { 2 } ) by L14 , L12 , XBOOLE_1:1;
L16: ( rng ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) c= ( succ 2 ) by L15 , ORDINAL1:def 1;
thus L17: thesis by L16;
end;
L18: ( dom ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) = ( ( dom ( ( SCM+FSA-Memory ) --> 2 ) ) \/ ( dom ( SCM-OK ) ) ) by FUNCT_4:def 1
.= ( ( SCM+FSA-Memory ) \/ ( dom ( SCM-OK ) ) ) by FUNCOP_1:13
.= ( ( SCM+FSA-Memory ) \/ ( SCM-Memory ) ) by FUNCT_2:def 1
.= ( SCM+FSA-Memory ) by XBOOLE_1:7 , XBOOLE_1:12;
L19: ( dom ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) ) = ( SCM+FSA-Memory ) by L18
.= ( SCM+FSA-Memory );
thus L20: thesis by L19 , L10 , FUNCT_2:def 1 , RELSET_1:4;
end;
end;
canceled 3;
theorem
L22: ( NAT ) in ( SCM+FSA-Memory )
proof
L23: ( NAT ) in { ( NAT ) } by TARSKI:def 1;
L24: ( NAT ) in ( { ( NAT ) } \/ ( SCM-Data-Loc ) ) by L23 , XBOOLE_0:def 3;
L25: ( NAT ) in ( SCM-Memory ) by L24;
thus L26: thesis by L25 , XBOOLE_0:def 3;
end;
canceled 2;
theorem
L27: ( SCM+FSA-Memory ) = ( ( { ( NAT ) } \/ ( SCM+FSA-Data-Loc ) ) \/ ( SCM+FSA-Data*-Loc ) );
definition
func SCM*-VAL -> (ManySortedSet of 3) equals 
<% ( NAT ) , ( INT ) , ( ( INT ) * ) %>;
coherence;
end;
L29: ( SCM+FSA-Data*-Loc ) misses ( SCM-Memory )
proof
assume L30: ( SCM+FSA-Data*-Loc ) meets ( SCM-Memory );
consider R1 being set such that L31: R1 in ( SCM+FSA-Data*-Loc ) and L32: R1 in ( SCM-Memory ) by L30 , XBOOLE_0:3;
L33: (R1 in ( { ( NAT ) } \/ ( SCM-Data-Loc ) ) or R1 in ( NAT )) by L32;
L34: R1 in ( ( ( NAT ) \/ [: { ( 0 ) } , ( NAT ) :] ) \ { [ ( 0 ) , ( 0 ) ] } ) by L31 , NUMBERS:def 4;
L35: (R1 in ( NAT ) or R1 in [: { ( 0 ) } , ( NAT ) :]) by L34 , XBOOLE_0:def 3;
per cases  by L33 , XBOOLE_0:def 3;
suppose L36: R1 in { ( NAT ) };

L37: (ex R2 being set st (ex R3 being set st R1 = [ R2 , R3 ])) by L36 , L35 , RELAT_1:def 1 , TARSKI:def 1;
thus L38: contradiction by L37 , L36 , TARSKI:def 1;
end;
suppose L39: R1 in ( SCM-Data-Loc );

L40: (ex R4 being (Element of ( NAT )) st R1 = [ 1 , R4 ]) by L39 , AMI_2:23;
consider R2 being set, R3 being set such that L41: R2 in { ( 0 ) } and L42: R3 in ( NAT ) and L43: R1 = [ R2 , R3 ] by L40 , L35 , ZFMISC_1:84;
L44: R2 = ( 0 ) by L41 , TARSKI:def 1;
thus L45: contradiction by L44 , L40 , L43 , XTUPLE_0:1;
end;
suppose L46: R1 in ( NAT );

thus L47: contradiction by L46 , L31 , XBOOLE_0:def 5;
end;
end;
L49: ( dom ( SCM-OK ) ) c= ( dom ( SCM+FSA-OK ) )
proof
L50: ( dom ( SCM+FSA-OK ) ) = ( ( dom ( ( SCM+FSA-Memory ) --> 2 ) ) \/ ( dom ( SCM-OK ) ) ) by FUNCT_4:def 1;
thus L51: ( dom ( SCM-OK ) ) c= ( dom ( SCM+FSA-OK ) ) by L50 , XBOOLE_1:7;
end;
L52: ( NAT ) in ( dom ( SCM+FSA-OK ) )
proof
L53: ( NAT ) in ( dom ( SCM-OK ) ) by AMI_2:22 , FUNCT_2:def 1;
L54: ( dom ( SCM-OK ) ) c= ( dom ( SCM+FSA-OK ) ) by L49;
thus L55: thesis by L54 , L53;
end;
L56: ( ( SCM+FSA-OK ) . ( NAT ) ) = ( 0 )
proof
L57: ( NAT ) in ( dom ( SCM-OK ) ) by AMI_2:22 , FUNCT_2:def 1;
thus L58: ( ( SCM+FSA-OK ) . ( NAT ) ) = ( ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) . ( NAT ) )
.= ( ( SCM-OK ) . ( NAT ) ) by L57 , FUNCT_4:13
.= ( 0 ) by AMI_2:22 , AMI_2:def 4;
end;
theorem
L59: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . ( NAT ) ) = ( NAT )
proof
L60: ( ( SCM+FSA-OK ) . ( NAT ) ) = ( 0 ) by L56;
thus L61: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . ( NAT ) ) = ( ( SCM*-VAL ) . ( ( SCM+FSA-OK ) . ( NAT ) ) ) by L52 , FUNCT_1:13
.= ( NAT ) by L60 , AFINSQ_1:39;
end;
L62: (for R9 being (Element of ( SCM+FSA-Data-Loc )) holds ( ( SCM+FSA-OK ) . R9 ) = 1)
proof
let R9 being (Element of ( SCM+FSA-Data-Loc ));
L63: R9 in ( SCM-Data-Loc );
L64: R9 in ( SCM-Memory ) by L63;
L65: R9 in ( dom ( SCM-OK ) ) by L64 , FUNCT_2:def 1;
thus L66: ( ( SCM+FSA-OK ) . R9 ) = ( ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) . R9 )
.= ( ( SCM-OK ) . R9 ) by L65 , FUNCT_4:13
.= 1 by L63 , AMI_2:def 4;
end;
theorem
L67: (for R9 being (Element of ( SCM+FSA-Data-Loc )) holds ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . R9 ) = ( INT ))
proof
let R9 being (Element of ( SCM+FSA-Data-Loc ));
L68: R9 in ( SCM-Data-Loc );
L69: R9 in ( SCM-Memory ) by L68;
L70: R9 in ( dom ( SCM-OK ) ) by L69 , FUNCT_2:def 1;
L71: ( ( SCM+FSA-OK ) . R9 ) = 1 by L62;
L72: R9 in ( dom ( SCM+FSA-OK ) ) by L70 , L49;
thus L73: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . R9 ) = ( ( SCM*-VAL ) . ( ( SCM+FSA-OK ) . R9 ) ) by L72 , FUNCT_1:13
.= ( ( SCM*-VAL ) . 1 ) by L71
.= ( INT ) by AFINSQ_1:39;
end;
L74: (for R15 being (Element of ( SCM+FSA-Data*-Loc )) holds ( ( SCM+FSA-OK ) . R15 ) = 2)
proof
let R15 being (Element of ( SCM+FSA-Data*-Loc ));
L75: (not R15 in ( SCM-Memory )) by L29 , XBOOLE_0:3;
L76: (not R15 in ( dom ( SCM-OK ) )) by L75 , FUNCT_2:def 1;
thus L77: ( ( SCM+FSA-OK ) . R15 ) = ( ( ( ( SCM+FSA-Memory ) --> 2 ) +* ( SCM-OK ) ) . R15 )
.= ( ( ( SCM+FSA-Memory ) --> 2 ) . R15 ) by L76 , FUNCT_4:11
.= 2 by FUNCOP_1:7;
end;
theorem
L78: (for R15 being (Element of ( SCM+FSA-Data*-Loc )) holds ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . R15 ) = ( ( INT ) * ))
proof
let R15 being (Element of ( SCM+FSA-Data*-Loc ));
L79: ( ( SCM+FSA-OK ) . R15 ) = 2 by L74;
L80: R15 in ( SCM+FSA-Memory );
L81: R15 in ( dom ( SCM+FSA-OK ) ) by L80 , FUNCT_2:def 1;
thus L82: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . R15 ) = ( ( SCM*-VAL ) . ( ( SCM+FSA-OK ) . R15 ) ) by L81 , FUNCT_1:13
.= ( ( SCM*-VAL ) . 2 ) by L79
.= ( ( INT ) * ) by AFINSQ_1:39;
end;
L83: ( dom ( SCM+FSA-OK ) ) = ( SCM+FSA-Memory ) by PARTFUN1:def 2;
L84: ( len <% ( NAT ) , ( INT ) , ( ( INT ) * ) %> ) = 3 by AFINSQ_1:39;
L85: ( rng ( SCM+FSA-OK ) ) c= ( dom ( SCM*-VAL ) ) by L84 , RELAT_1:def 19;
L86: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L85 , L83 , RELAT_1:27;
registration
cluster ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ->  non-empty;
coherence
proof
set D1 = ( ( SCM*-VAL ) * ( SCM+FSA-OK ) );
let C1 being set;
assume L87: C1 in ( dom D1 );
L88: ( dom D1 ) = ( SCM+FSA-Memory ) by L86;
L89: (C1 in ( SCM-Memory ) or C1 in ( SCM+FSA-Data*-Loc )) by L88 , L87 , XBOOLE_0:def 3;
per cases  by L89 , AMI_2:26;
suppose L90: C1 = ( NAT );

L91: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C1 ) = ( NAT ) by L90 , L59;
thus L92: ( D1 . C1 ) is non  empty by L91;
end;
suppose L93: C1 in ( SCM-Data-Loc );

L94: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C1 ) = ( INT ) by L93 , L67;
thus L95: ( D1 . C1 ) is non  empty by L94;
end;
suppose L96: C1 in ( SCM+FSA-Data*-Loc );

L97: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C1 ) = ( ( INT ) * ) by L96 , L78;
thus L98: ( D1 . C1 ) is non  empty by L97;
end;
end;
end;
definition
mode SCM+FSA-State
 is (Element of ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ));
end;
canceled 5;
theorem
L102: (for B1 being SCM+FSA-State holds (for B2 being (Element of ( SCM-Instr )) holds ( B1 | ( SCM-Memory ) ) is SCM-State))
proof
let C2 being SCM+FSA-State;
let C3 being (Element of ( SCM-Instr ));
L103: ( dom ( C2 | ( SCM-Memory ) ) ) = ( ( dom C2 ) /\ ( SCM-Memory ) ) by RELAT_1:61
.= ( ( SCM+FSA-Memory ) /\ ( SCM-Memory ) ) by L86 , CARD_3:9
.= ( SCM-Memory ) by XBOOLE_1:21;
L104:
now
let R1 being set;
assume L105: R1 in ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) );
L106: R1 in ( SCM-Memory ) by L105 , AMI_2:27;
L107: R1 in ( { ( NAT ) } \/ ( SCM-Data-Loc ) ) by L106;
per cases  by L107 , XBOOLE_0:def 3;
suppose L108: R1 in { ( NAT ) };

L109: ( ( C2 | ( SCM-Memory ) ) . R1 ) = ( ( C2 | ( SCM-Memory ) ) . R1 )
.= ( C2 . R1 ) by L103 , L106 , FUNCT_1:47;
reconsider D2 = R1 as (Element of ( SCM+FSA-Memory )) by L106 , L4;
L110: ( C2 . D2 ) in ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , D2) ) by CARD_3:def 6;
L111: R1 = ( NAT ) by L108 , TARSKI:def 1;
L112: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L113: ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , D2) ) = ( NAT ) by L112 , L111 , L59 , CARD_3:12;
thus L114: ( ( C2 | ( SCM-Memory ) ) . R1 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . R1 ) by L113 , L111 , L109 , L110 , AMI_2:6;
end;
suppose L115: R1 in ( SCM-Data-Loc );

L116: ( ( C2 | ( SCM-Memory ) ) . R1 ) = ( ( C2 | ( SCM-Memory ) ) . R1 )
.= ( C2 . R1 ) by L103 , L106 , FUNCT_1:47;
reconsider D3 = R1 as (Element of ( SCM+FSA-Memory )) by L106 , L4;
L117: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L118: ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , D3) ) = ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . D3 ) by L117 , CARD_3:12
.= ( INT ) by L115 , L67;
L119: ( C2 . D3 ) in ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , D3) ) by CARD_3:def 6;
thus L120: ( ( C2 | ( SCM-Memory ) ) . R1 ) in ( ( ( SCM-VAL ) * ( SCM-OK ) ) . R1 ) by L119 , L115 , L116 , L118 , AMI_2:8;
end;
end;
L122: ( dom ( C2 | ( SCM-Memory ) ) ) = ( dom ( C2 | ( SCM-Memory ) ) )
.= ( SCM-Memory ) by L103
.= ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) by AMI_2:27;
thus L123: thesis by L122 , L104 , CARD_3:9;
end;
theorem
L124: (for B3 being SCM+FSA-State holds (for B4 being SCM-State holds ( B3 +* B4 ) is SCM+FSA-State))
proof
let C4 being SCM+FSA-State;
let C5 being SCM-State;
L125: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
reconsider D4 = ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) as  non-empty (ManySortedSet of ( SCM+FSA-Memory )) by L125 , PARTFUN1:def 2;
L126: ( dom C5 ) = ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) by CARD_3:9
.= ( SCM-Memory ) by AMI_2:27;
L127:
now
let C6 being set;
assume L128: C6 in ( dom C5 );
L129: C6 in ( { ( NAT ) } \/ ( SCM-Data-Loc ) ) by L128 , L126;
per cases  by L129 , XBOOLE_0:def 3;
suppose L130: C6 in { ( NAT ) };

reconsider D5 = C6 as (Element of ( SCM-Memory )) by L126 , L128;
L131: ( C5 . D5 ) in ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , D5) ) by CARD_3:def 6;
L132: C6 = ( NAT ) by L130 , TARSKI:def 1;
L133: ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by AMI_2:27;
L134: ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , D5) ) = ( ( ( SCM-VAL ) * ( SCM-OK ) ) . D5 ) by L133 , CARD_3:12
.= ( NAT ) by L132 , AMI_2:6;
thus L135: ( C5 . C6 ) in ( D4 . C6 ) by L134 , L130 , L131 , L59 , TARSKI:def 1;
end;
suppose L136: C6 in ( SCM-Data-Loc );

reconsider D6 = C6 as (Element of ( SCM-Memory )) by L126 , L128;
L137: ( C5 . D6 ) in ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , D6) ) by CARD_3:def 6;
L138: ( dom ( ( SCM-VAL ) * ( SCM-OK ) ) ) = ( SCM-Memory ) by AMI_2:27;
L139: ( pi (( product ( ( SCM-VAL ) * ( SCM-OK ) ) ) , D6) ) = ( ( ( SCM-VAL ) * ( SCM-OK ) ) . D6 ) by L138 , CARD_3:12;
L140: ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C6 ) = ( INT ) by L136 , L67;
thus L141: ( C5 . C6 ) in ( D4 . C6 ) by L140 , L136 , L139 , L137 , AMI_2:8;
end;
end;
L143: ( C4 +* C5 ) is SCM+FSA-State by L127 , L125 , L126 , PRE_CIRC:6 , XBOOLE_1:7;
thus L144: thesis by L143;
end;
definition
let C7 being SCM+FSA-State;
let C8 being Nat;
func SCM+FSA-Chg (C7 , C8) -> SCM+FSA-State equals 
( C7 +* ( ( NAT ) .--> C8 ) );
coherence
proof
L145:
now
let C9 being set;
assume L146: C9 in ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) );
per cases ;
suppose L147: C9 = ( NAT );

L148: { ( NAT ) } = ( dom ( ( NAT ) .--> C8 ) ) by FUNCOP_1:13;
L149: ( NAT ) in ( dom ( ( NAT ) .--> C8 ) ) by L148 , TARSKI:def 1;
L150: ( ( C7 +* ( ( NAT ) .--> C8 ) ) . ( NAT ) ) = ( ( ( NAT ) .--> C8 ) . ( NAT ) ) by L149 , FUNCT_4:13
.= C8 by FUNCOP_1:72;
thus L151: ( ( C7 +* ( ( NAT ) .--> C8 ) ) . C9 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C9 ) by L150 , L147 , L59 , ORDINAL1:def 12;
end;
suppose L152: C9 <> ( NAT );

L153: { ( NAT ) } = ( dom ( ( NAT ) .--> C8 ) ) by FUNCOP_1:13;
L154: (not C9 in ( dom ( ( NAT ) .--> C8 ) )) by L153 , L152 , TARSKI:def 1;
L155: ( ( C7 +* ( ( NAT ) .--> C8 ) ) . C9 ) = ( C7 . C9 ) by L154 , FUNCT_4:11;
thus L156: ( ( C7 +* ( ( NAT ) .--> C8 ) ) . C9 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C9 ) by L155 , L146 , CARD_3:9;
end;
end;
L158: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L159: ( dom C7 ) = ( SCM+FSA-Memory ) by L158 , CARD_3:9;
L160: ( dom ( C7 +* ( ( NAT ) .--> C8 ) ) ) = ( ( SCM+FSA-Memory ) \/ ( dom ( ( NAT ) .--> C8 ) ) ) by L159 , FUNCT_4:def 1
.= ( ( SCM+FSA-Memory ) \/ { ( NAT ) } ) by FUNCOP_1:13
.= ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) by L158 , L22 , ZFMISC_1:40;
thus L161: thesis by L160 , L145 , CARD_3:9;
end;
end;
definition
let C10 being SCM+FSA-State;
let C11 being (Element of ( SCM+FSA-Data-Loc ));
let C12 being Integer;
func SCM+FSA-Chg (C10 , C11 , C12) -> SCM+FSA-State equals 
( C10 +* ( C11 .--> C12 ) );
coherence
proof
L163:
now
let C13 being set;
assume L164: C13 in ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) );
per cases ;
suppose L165: C13 = C11;

L166: { C11 } = ( dom ( C11 .--> C12 ) ) by FUNCOP_1:13;
L167: C11 in ( dom ( C11 .--> C12 ) ) by L166 , TARSKI:def 1;
L168: ( ( C10 +* ( C11 .--> C12 ) ) . C11 ) = ( ( C11 .--> C12 ) . C11 ) by L167 , FUNCT_4:13
.= C12 by FUNCOP_1:72;
L169: ( ( C10 +* ( C11 .--> C12 ) ) . C11 ) in ( INT ) by L168 , INT_1:def 2;
thus L170: ( ( C10 +* ( C11 .--> C12 ) ) . C13 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C13 ) by L169 , L165 , L67;
end;
suppose L171: C13 <> C11;

L172: { C11 } = ( dom ( C11 .--> C12 ) ) by FUNCOP_1:13;
L173: (not C13 in ( dom ( C11 .--> C12 ) )) by L172 , L171 , TARSKI:def 1;
L174: ( ( C10 +* ( C11 .--> C12 ) ) . C13 ) = ( C10 . C13 ) by L173 , FUNCT_4:11;
thus L175: ( ( C10 +* ( C11 .--> C12 ) ) . C13 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C13 ) by L174 , L164 , CARD_3:9;
end;
end;
L177: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L178: ( dom C10 ) = ( SCM+FSA-Memory ) by L177 , CARD_3:9;
L179: ( dom ( C10 +* ( C11 .--> C12 ) ) ) = ( ( SCM+FSA-Memory ) \/ ( dom ( C11 .--> C12 ) ) ) by L178 , FUNCT_4:def 1
.= ( ( SCM+FSA-Memory ) \/ { C11 } ) by FUNCOP_1:13
.= ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) by L177 , ZFMISC_1:40;
thus L180: thesis by L179 , L163 , CARD_3:9;
end;
end;
definition
let C14 being SCM+FSA-State;
let C15 being (Element of ( SCM+FSA-Data*-Loc ));
let C16 being (FinSequence of ( INT ));
func SCM+FSA-Chg (C14 , C15 , C16) -> SCM+FSA-State equals 
( C14 +* ( C15 .--> C16 ) );
coherence
proof
L182:
now
let C17 being set;
assume L183: C17 in ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) );
per cases ;
suppose L184: C17 = C15;

L185: { C15 } = ( dom ( C15 .--> C16 ) ) by FUNCOP_1:13;
L186: C15 in ( dom ( C15 .--> C16 ) ) by L185 , TARSKI:def 1;
L187: ( ( C14 +* ( C15 .--> C16 ) ) . C15 ) = ( ( C15 .--> C16 ) . C15 ) by L186 , FUNCT_4:13
.= C16 by FUNCOP_1:72;
L188: ( ( C14 +* ( C15 .--> C16 ) ) . C15 ) in ( ( INT ) * ) by L187 , FINSEQ_1:def 11;
thus L189: ( ( C14 +* ( C15 .--> C16 ) ) . C17 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C17 ) by L188 , L184 , L78;
end;
suppose L190: C17 <> C15;

L191: { C15 } = ( dom ( C15 .--> C16 ) ) by FUNCOP_1:13;
L192: (not C17 in ( dom ( C15 .--> C16 ) )) by L191 , L190 , TARSKI:def 1;
L193: ( ( C14 +* ( C15 .--> C16 ) ) . C17 ) = ( C14 . C17 ) by L192 , FUNCT_4:11;
thus L194: ( ( C14 +* ( C15 .--> C16 ) ) . C17 ) in ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C17 ) by L193 , L183 , CARD_3:9;
end;
end;
L196: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L197: ( dom C14 ) = ( SCM+FSA-Memory ) by L196 , CARD_3:9;
L198: ( dom ( C14 +* ( C15 .--> C16 ) ) ) = ( ( SCM+FSA-Memory ) \/ ( dom ( C15 .--> C16 ) ) ) by L197 , FUNCT_4:def 1
.= ( ( SCM+FSA-Memory ) \/ { C15 } ) by FUNCOP_1:13
.= ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) by L196 , ZFMISC_1:40;
thus L199: thesis by L198 , L182 , CARD_3:9;
end;
end;
registration
let C18 being SCM+FSA-State;
let C19 being (Element of ( SCM+FSA-Data-Loc ));
cluster ( C18 . C19 ) ->  integer;
coherence
proof
L201: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L202: ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , C19) ) = ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C19 ) by L201 , CARD_3:12
.= ( INT ) by L67;
L203: ( C18 . C19 ) in ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , C19) ) by CARD_3:def 6;
thus L204: thesis by L203 , L202;
end;
end;
definition
let C20 being SCM+FSA-State;
let C21 being (Element of ( SCM+FSA-Data*-Loc ));
redefine func C20 . C21 -> (FinSequence of ( INT ));

coherence
proof
L206: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L207: ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , C21) ) = ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C21 ) by L206 , CARD_3:12
.= ( ( INT ) * ) by L78;
L208: ( C20 . C21 ) in ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , C21) ) by CARD_3:def 6;
thus L209: thesis by L208 , L207 , FINSEQ_1:def 11;
end;
end;
definition
canceled 6;
let C22 being SCM+FSA-State;
func IC C22 -> (Element of ( NAT )) equals 
( C22 . ( NAT ) );
coherence
proof
reconsider D7 = ( NAT ) as (Element of ( SCM+FSA-Memory )) by L22;
L211: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
L212: ( pi (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , ( NAT )) ) = ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . D7 ) by L211 , CARD_3:12
.= ( NAT ) by L59;
thus L213: thesis by L212 , CARD_3:def 6;
end;
end;
definition
let C23 being (Element of ( SCM+FSA-Instr ));
let C24 being SCM+FSA-State;
func SCM+FSA-Exec-Res (C23 , C24) -> SCM+FSA-State means 
(ex B5 being (Element of ( SCM-Instr )) st (ex B6 being SCM-State st (C23 = B5 & B6 = ( C24 | ( SCM-Memory ) ) & it = ( C24 +* ( SCM-Exec-Res (B5 , B6) ) )))) if ( C23 `1_3 ) <= 8 , (ex B7 being Integer st (ex R4 being (Element of ( NAT )) st (R4 = ( abs ( C24 . ( C23 int_addr2 ) ) ) & B7 = ( ( C24 . ( C23 coll_addr1 ) ) /. R4 ) & it = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr1 ) , B7) ) , ( succ ( IC C24 ) )) )))) if ( C23 `1_3 ) = 9 , (ex B8 being (FinSequence of ( INT )) st (ex R4 being (Element of ( NAT )) st (R4 = ( abs ( C24 . ( C23 int_addr2 ) ) ) & B8 = ( ( C24 . ( C23 coll_addr1 ) ) +* (R4 , ( C24 . ( C23 int_addr1 ) )) ) & it = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr1 ) , B8) ) , ( succ ( IC C24 ) )) )))) if ( C23 `1_3 ) = 10 , it = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr3 ) , ( len ( C24 . ( C23 coll_addr2 ) ) )) ) , ( succ ( IC C24 ) )) ) if ( C23 `1_3 ) = 11 , (ex B9 being (FinSequence of ( INT )) st (ex R4 being (Element of ( NAT )) st (R4 = ( abs ( C24 . ( C23 int_addr3 ) ) ) & B9 = ( R4 |-> ( 0 ) ) & it = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr2 ) , B9) ) , ( succ ( IC C24 ) )) )))) if ( C23 `1_3 ) = 12 , (ex B10 being Integer st (B10 = 1 & it = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr ) , B10) ) , ( succ ( IC C24 ) )) ))) if ( C23 `1_3 ) = 13 otherwise it = C24;
existence
proof
thus L215:now
assume L216: ( C23 `1_3 ) <= 8;
reconsider D8 = C23 as (Element of ( SCM-Instr )) by L216 , SCMFSA_I:2;
reconsider D9 = ( C24 | ( SCM-Memory ) ) as SCM-State by L102;
reconsider D10 = ( C24 +* ( SCM-Exec-Res (D8 , D9) ) ) as SCM+FSA-State by L124;
take D11 = D10;
take D12 = D8;
take D13 = D9;
thus L217: C23 = D12;
thus L218: D13 = ( C24 | ( SCM-Memory ) );
thus L219: D11 = ( C24 +* ( SCM-Exec-Res (D12 , D13) ) );
end;
thus L220:now
reconsider D14 = ( abs ( C24 . ( C23 int_addr2 ) ) ) as (Element of ( NAT ));
assume L221: ( C23 `1_3 ) = 9;
reconsider D15 = ( ( C24 . ( C23 coll_addr1 ) ) /. D14 ) as Integer;
take D16 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr1 ) , D15) ) , ( succ ( IC C24 ) )) );
take D17 = D15;
take D18 = D14;
thus L222: (D18 = ( abs ( C24 . ( C23 int_addr2 ) ) ) & D17 = ( ( C24 . ( C23 coll_addr1 ) ) /. D18 ) & D16 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr1 ) , D17) ) , ( succ ( IC C24 ) )) ));
end;
thus L223:now
reconsider D19 = ( abs ( C24 . ( C23 int_addr2 ) ) ) as (Element of ( NAT ));
assume L224: ( C23 `1_3 ) = 10;
per cases ;
suppose L225: D19 in ( dom ( C24 . ( C23 coll_addr1 ) ) );

set D20 = ( ( C24 . ( C23 coll_addr1 ) ) +* ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) );
L226: { D19 } c= ( dom ( C24 . ( C23 coll_addr1 ) ) ) by L225 , ZFMISC_1:31;
L227: ( dom D20 ) = ( ( dom ( C24 . ( C23 coll_addr1 ) ) ) \/ ( dom ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) ) ) by FUNCT_4:def 1
.= ( ( dom ( C24 . ( C23 coll_addr1 ) ) ) \/ { D19 } ) by FUNCOP_1:13
.= ( dom ( C24 . ( C23 coll_addr1 ) ) ) by L226 , XBOOLE_1:12
.= ( Seg ( len ( C24 . ( C23 coll_addr1 ) ) ) ) by FINSEQ_1:def 3;
reconsider D21 = D20 as FinSequence by L227 , FINSEQ_1:def 2;
L228: (( C24 . ( C23 int_addr1 ) ) in ( INT ) & ( rng ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) ) = { ( C24 . ( C23 int_addr1 ) ) }) by FUNCOP_1:8 , INT_1:def 2;
L229: (( rng ( C24 . ( C23 coll_addr1 ) ) ) c= ( INT ) & ( rng ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) ) c= ( INT )) by L228 , FINSEQ_1:def 4 , ZFMISC_1:31;
L230: (( rng D21 ) c= ( ( rng ( C24 . ( C23 coll_addr1 ) ) ) \/ ( rng ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) ) ) & ( ( rng ( C24 . ( C23 coll_addr1 ) ) ) \/ ( rng ( D19 .--> ( C24 . ( C23 int_addr1 ) ) ) ) ) c= ( INT )) by L229 , FUNCT_4:17 , XBOOLE_1:8;
L231: ( rng D21 ) c= ( INT ) by L230 , XBOOLE_1:1;
reconsider D22 = D21 as (FinSequence of ( INT )) by L231 , FINSEQ_1:def 4;
take D23 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr1 ) , D22) ) , ( succ ( IC C24 ) )) );
take D24 = D22;
take D25 = D19;
thus L232: D25 = ( abs ( C24 . ( C23 int_addr2 ) ) );
thus L233: D24 = ( ( C24 . ( C23 coll_addr1 ) ) +* (D25 , ( C24 . ( C23 int_addr1 ) )) ) by L225 , FUNCT_7:def 3;
thus L234: D23 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr1 ) , D24) ) , ( succ ( IC C24 ) )) );
end;
suppose L235: (not D19 in ( dom ( C24 . ( C23 coll_addr1 ) ) ));

reconsider D26 = ( C24 . ( C23 coll_addr1 ) ) as (FinSequence of ( INT ));
take D27 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr1 ) , D26) ) , ( succ ( IC C24 ) )) );
take D28 = D26;
take D29 = D19;
thus L236: D29 = ( abs ( C24 . ( C23 int_addr2 ) ) );
thus L237: D28 = ( ( C24 . ( C23 coll_addr1 ) ) +* (D29 , ( C24 . ( C23 int_addr1 ) )) ) by L235 , FUNCT_7:def 3;
thus L238: D27 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr1 ) , D28) ) , ( succ ( IC C24 ) )) );
end;
end;
thus L240: (( C23 `1_3 ) = 11 implies (ex B11 being SCM+FSA-State st B11 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr3 ) , ( len ( C24 . ( C23 coll_addr2 ) ) )) ) , ( succ ( IC C24 ) )) )));
thus L241:now
reconsider D30 = ( abs ( C24 . ( C23 int_addr3 ) ) ) as (Element of ( NAT ));
assume L242: ( C23 `1_3 ) = 12;
L243: ( 0 ) in ( INT ) by INT_1:def 2;
L244: { ( 0 ) } c= ( INT ) by L243 , ZFMISC_1:31;
L245: ( D30 |-> ( 0 ) ) = ( ( Seg D30 ) --> ( 0 ) ) by FINSEQ_2:def 2;
L246: ( rng ( D30 |-> ( 0 ) ) ) c= { ( 0 ) } by L245 , FUNCOP_1:13;
L247: ( rng ( D30 |-> ( 0 ) ) ) c= ( INT ) by L246 , L244 , XBOOLE_1:1;
reconsider D31 = ( D30 |-> ( 0 ) ) as (FinSequence of ( INT )) by L247 , FINSEQ_1:def 4;
take D32 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr2 ) , D31) ) , ( succ ( IC C24 ) )) );
take D33 = D31;
take D34 = D30;
thus L248: (D34 = ( abs ( C24 . ( C23 int_addr3 ) ) ) & D33 = ( D34 |-> ( 0 ) ) & D32 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 coll_addr2 ) , D33) ) , ( succ ( IC C24 ) )) ));
end;
thus L249:now
assume L250: ( C23 `1_3 ) = 13;
reconsider D35 = 1 as Integer;
take D36 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr ) , D35) ) , ( succ ( IC C24 ) )) );
take D37 = D35;
thus L251: (D37 = 1 & D36 = ( SCM+FSA-Chg (( SCM+FSA-Chg (C24 , ( C23 int_addr ) , D37) ) , ( succ ( IC C24 ) )) ));
end;
thus L252: thesis;
end;
uniqueness;
consistency;
end;
definition
func SCM+FSA-Exec -> (Action of ( SCM+FSA-Instr ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) )) means 
(for B12 being (Element of ( SCM+FSA-Instr )) holds (for B13 being SCM+FSA-State holds ( ( it . B12 ) . B13 ) = ( SCM+FSA-Exec-Res (B12 , B13) )));
existence
proof
deffunc H1((Element of ( SCM+FSA-Instr )) , SCM+FSA-State) = ( SCM+FSA-Exec-Res ($1 , $2) );
consider C25 being (Function of [: ( SCM+FSA-Instr ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) :] , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) )) such that L254: (for B14 being (Element of ( SCM+FSA-Instr )) holds (for B15 being SCM+FSA-State holds ( C25 . (B14 , B15) ) = H1(B14 , B15))) from BINOP_1:sch 4;
take ( curry C25 );
let C26 being (Element of ( SCM+FSA-Instr ));
let C27 being SCM+FSA-State;
thus L255: ( ( ( curry C25 ) . C26 ) . C27 ) = ( C25 . (C26 , C27) ) by FUNCT_5:69
.= ( SCM+FSA-Exec-Res (C26 , C27) ) by L254;
end;
uniqueness
proof
let C28 , C29 being (Function of ( SCM+FSA-Instr ) , ( Funcs (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) )) ));
assume that
L256: (for B16 being (Element of ( SCM+FSA-Instr )) holds (for B17 being SCM+FSA-State holds ( (( C28 . B16 ) qua (Element of ( Funcs (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) )) ))) . B17 ) = ( SCM+FSA-Exec-Res (B16 , B17) )))
and
L257: (for B18 being (Element of ( SCM+FSA-Instr )) holds (for B19 being SCM+FSA-State holds ( (( C29 . B18 ) qua (Element of ( Funcs (( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) )) ))) . B19 ) = ( SCM+FSA-Exec-Res (B18 , B19) )));
L258:
now
let C30 being (Element of ( SCM+FSA-Instr ));
reconsider D38 = ( C29 . C30 ) , D39 = ( C28 . C30 ) as (Function of ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) , ( product ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ));
L259:
now
let C31 being SCM+FSA-State;
thus L260: ( D39 . C31 ) = ( SCM+FSA-Exec-Res (C30 , C31) ) by L256
.= ( D38 . C31 ) by L257;
end;
thus L261: ( C28 . C30 ) = ( C29 . C30 ) by L259 , FUNCT_2:63;
end;
thus L262: C28 = C29 by L258 , FUNCT_2:63;
end;
end;
theorem
L264: (for B20 being SCM+FSA-State holds (for B21 being (Element of ( NAT )) holds ( ( SCM+FSA-Chg (B20 , B21) ) . ( NAT ) ) = B21))
proof
let C32 being SCM+FSA-State;
let C33 being (Element of ( NAT ));
L265: { ( NAT ) } = ( dom ( ( NAT ) .--> C33 ) ) by FUNCOP_1:13;
L266: ( NAT ) in ( dom ( ( NAT ) .--> C33 ) ) by L265 , TARSKI:def 1;
thus L267: ( ( SCM+FSA-Chg (C32 , C33) ) . ( NAT ) ) = ( ( ( NAT ) .--> C33 ) . ( NAT ) ) by L266 , FUNCT_4:13
.= C33 by FUNCOP_1:72;
end;
theorem
L268: (for B22 being SCM+FSA-State holds (for B23 being (Element of ( NAT )) holds (for B24 being (Element of ( SCM+FSA-Data-Loc )) holds ( ( SCM+FSA-Chg (B22 , B23) ) . B24 ) = ( B22 . B24 ))))
proof
let C34 being SCM+FSA-State;
let C35 being (Element of ( NAT ));
let C36 being (Element of ( SCM+FSA-Data-Loc ));
L269: (( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C36 ) = ( INT ) & { ( NAT ) } = ( dom ( ( NAT ) .--> C35 ) )) by L67 , FUNCOP_1:13;
L270: (not C36 in ( dom ( ( NAT ) .--> C35 ) )) by L269 , L59 , NUMBERS:27 , TARSKI:def 1;
thus L271: thesis by L270 , FUNCT_4:11;
end;
theorem
L272: (for B25 being SCM+FSA-State holds (for B26 being (Element of ( NAT )) holds (for B27 being (Element of ( SCM+FSA-Data*-Loc )) holds ( ( SCM+FSA-Chg (B25 , B26) ) . B27 ) = ( B25 . B27 ))))
proof
let C37 being SCM+FSA-State;
let C38 being (Element of ( NAT ));
let C39 being (Element of ( SCM+FSA-Data*-Loc ));
L273: { ( NAT ) } = ( dom ( ( NAT ) .--> C38 ) ) by FUNCOP_1:13;
L274: ( ( SCM+FSA-OK ) . ( NAT ) ) = ( 0 ) by L56;
L275: ( ( SCM+FSA-OK ) . C39 ) = 2 by L74;
L276: ( NAT ) <> C39 by L275 , L274;
L277: (not C39 in ( dom ( ( NAT ) .--> C38 ) )) by L276 , L273 , TARSKI:def 1;
thus L278: thesis by L277 , FUNCT_4:11;
end;
theorem
L279: (for B28 being SCM+FSA-State holds (for B29 , B30 being (Element of ( NAT )) holds ( ( SCM+FSA-Chg (B28 , B29) ) . B30 ) = ( B28 . B30 )))
proof
let C40 being SCM+FSA-State;
let C41 , C42 being (Element of ( NAT ));
L280: { ( NAT ) } = ( dom ( ( NAT ) .--> C41 ) ) by FUNCOP_1:13;
L281: (not C42 in ( dom ( ( NAT ) .--> C41 ) )) by L280 , TARSKI:def 1;
thus L282: thesis by L281 , FUNCT_4:11;
end;
theorem
L283: (for B31 being SCM+FSA-State holds (for B32 being (Element of ( SCM+FSA-Data-Loc )) holds (for B33 being Integer holds ( ( SCM+FSA-Chg (B31 , B32 , B33) ) . ( NAT ) ) = ( B31 . ( NAT ) ))))
proof
let C43 being SCM+FSA-State;
let C44 being (Element of ( SCM+FSA-Data-Loc ));
let C45 being Integer;
L284: (( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C44 ) = ( INT ) & { C44 } = ( dom ( C44 .--> C45 ) )) by L67 , FUNCOP_1:13;
L285: (not ( NAT ) in ( dom ( C44 .--> C45 ) )) by L284 , L59 , NUMBERS:27 , TARSKI:def 1;
thus L286: thesis by L285 , FUNCT_4:11;
end;
theorem
L287: (for B34 being SCM+FSA-State holds (for B35 being (Element of ( SCM+FSA-Data-Loc )) holds (for B36 being Integer holds ( ( SCM+FSA-Chg (B34 , B35 , B36) ) . B35 ) = B36)))
proof
let C46 being SCM+FSA-State;
let C47 being (Element of ( SCM+FSA-Data-Loc ));
let C48 being Integer;
L288: { C47 } = ( dom ( C47 .--> C48 ) ) by FUNCOP_1:13;
L289: C47 in ( dom ( C47 .--> C48 ) ) by L288 , TARSKI:def 1;
thus L290: ( ( SCM+FSA-Chg (C46 , C47 , C48) ) . C47 ) = ( ( C47 .--> C48 ) . C47 ) by L289 , FUNCT_4:13
.= C48 by FUNCOP_1:72;
end;
theorem
L291: (for B37 being SCM+FSA-State holds (for B38 being (Element of ( SCM+FSA-Data-Loc )) holds (for B39 being Integer holds (for B40 being (Element of ( SCM+FSA-Data-Loc )) holds (B40 <> B38 implies ( ( SCM+FSA-Chg (B37 , B38 , B39) ) . B40 ) = ( B37 . B40 ))))))
proof
let C49 being SCM+FSA-State;
let C50 being (Element of ( SCM+FSA-Data-Loc ));
let C51 being Integer;
let C52 being (Element of ( SCM+FSA-Data-Loc ));
assume that
L292: C52 <> C50;
L293: { C50 } = ( dom ( C50 .--> C51 ) ) by FUNCOP_1:13;
L294: (not C52 in ( dom ( C50 .--> C51 ) )) by L293 , L292 , TARSKI:def 1;
thus L295: thesis by L294 , FUNCT_4:11;
end;
theorem
L296: (for B41 being SCM+FSA-State holds (for B42 being (Element of ( SCM+FSA-Data-Loc )) holds (for B43 being Integer holds (for B44 being (Element of ( SCM+FSA-Data*-Loc )) holds ( ( SCM+FSA-Chg (B41 , B42 , B43) ) . B44 ) = ( B41 . B44 )))))
proof
let C53 being SCM+FSA-State;
let C54 being (Element of ( SCM+FSA-Data-Loc ));
let C55 being Integer;
let C56 being (Element of ( SCM+FSA-Data*-Loc ));
L297: { C54 } = ( dom ( C54 .--> C55 ) ) by FUNCOP_1:13;
L298: (( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C54 ) = ( INT ) & ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C56 ) = ( ( INT ) * )) by L67 , L78;
L299: (not C56 in ( dom ( C54 .--> C55 ) )) by L298 , L297 , FUNCT_7:16 , TARSKI:def 1;
thus L300: thesis by L299 , FUNCT_4:11;
end;
theorem
L301: (for B45 being SCM+FSA-State holds (for B46 being (Element of ( SCM+FSA-Data*-Loc )) holds (for B47 being (FinSequence of ( INT )) holds ( ( SCM+FSA-Chg (B45 , B46 , B47) ) . B46 ) = B47)))
proof
let C57 being SCM+FSA-State;
let C58 being (Element of ( SCM+FSA-Data*-Loc ));
let C59 being (FinSequence of ( INT ));
L302: { C58 } = ( dom ( C58 .--> C59 ) ) by FUNCOP_1:13;
L303: C58 in ( dom ( C58 .--> C59 ) ) by L302 , TARSKI:def 1;
thus L304: ( ( SCM+FSA-Chg (C57 , C58 , C59) ) . C58 ) = ( ( C58 .--> C59 ) . C58 ) by L303 , FUNCT_4:13
.= C59 by FUNCOP_1:72;
end;
theorem
L305: (for B48 being SCM+FSA-State holds (for B49 being (Element of ( SCM+FSA-Data*-Loc )) holds (for B50 being (FinSequence of ( INT )) holds (for B51 being (Element of ( SCM+FSA-Data*-Loc )) holds (B51 <> B49 implies ( ( SCM+FSA-Chg (B48 , B49 , B50) ) . B51 ) = ( B48 . B51 ))))))
proof
let C60 being SCM+FSA-State;
let C61 being (Element of ( SCM+FSA-Data*-Loc ));
let C62 being (FinSequence of ( INT ));
let C63 being (Element of ( SCM+FSA-Data*-Loc ));
assume that
L306: C63 <> C61;
L307: { C61 } = ( dom ( C61 .--> C62 ) ) by FUNCOP_1:13;
L308: (not C63 in ( dom ( C61 .--> C62 ) )) by L307 , L306 , TARSKI:def 1;
thus L309: thesis by L308 , FUNCT_4:11;
end;
theorem
L310: (for B52 being SCM+FSA-State holds (for B53 being (Element of ( SCM+FSA-Data*-Loc )) holds (for B54 being (FinSequence of ( INT )) holds (for B55 being (Element of ( SCM+FSA-Data-Loc )) holds ( ( SCM+FSA-Chg (B52 , B53 , B54) ) . B55 ) = ( B52 . B55 )))))
proof
let C64 being SCM+FSA-State;
let C65 being (Element of ( SCM+FSA-Data*-Loc ));
let C66 being (FinSequence of ( INT ));
let C67 being (Element of ( SCM+FSA-Data-Loc ));
L311: { C65 } = ( dom ( C65 .--> C66 ) ) by FUNCOP_1:13;
L312: (( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C65 ) = ( ( INT ) * ) & ( ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) . C67 ) = ( INT )) by L67 , L78;
L313: (not C67 in ( dom ( C65 .--> C66 ) )) by L312 , L311 , FUNCT_7:16 , TARSKI:def 1;
thus L314: thesis by L313 , FUNCT_4:11;
end;
theorem
L315: ( SCM+FSA-Data*-Loc ) misses ( SCM-Memory ) by L29;
canceled 1;
theorem
L316: ( dom ( ( SCM*-VAL ) * ( SCM+FSA-OK ) ) ) = ( SCM+FSA-Memory ) by L86;
theorem
L317: (for B56 being SCM+FSA-State holds ( dom B56 ) = ( SCM+FSA-Memory )) by L86 , CARD_3:9;
