:: On the Two Short Axiomatizations of Ortholattices
::  by Wioletta Truszkowska and Adam Grabowski
::
:: Received June 28, 2003
:: Copyright (c) 2003-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, ROBBINS1, SUBSET_1, ARYTM_3, LATTICES, ROBBINS2;
 notations STRUCT_0, LATTICES, ROBBINS1;
 constructors ROBBINS1;
 registrations LATTICES, ROBBINS1, STRUCT_0;
 theorems ROBBINS1, LATTICES, STRUCT_0;

begin
definition
let C1 being non  empty ComplLLattStr;
attr C1 is  satisfying_DN_1
means
:L1: (for B1 , B2 , B3 , B4 being (Element of C1) holds ( ( ( ( ( ( B1 + B2 ) ` ) + B3 ) ` ) + ( ( B1 + ( ( ( B3 ` ) + ( ( B3 + B4 ) ` ) ) ` ) ) ` ) ) ` ) = B3);
end;
registration
cluster ( TrivComplLat ) ->  satisfying_DN_1;
coherence
proof
let C2 , C3 , C4 , C5 being (Element of ( TrivComplLat ));
thus L3: thesis by STRUCT_0:def 10;
end;
cluster ( TrivOrtLat ) ->  satisfying_DN_1;
coherence
proof
let C6 , C7 , C8 , C9 being (Element of ( TrivOrtLat ));
thus L4: thesis by STRUCT_0:def 10;
end;
end;
registration
cluster  join-commutative  join-associative  satisfying_DN_1 for non  empty non  empty non  empty non  empty ComplLLattStr;
existence
proof
take ( TrivComplLat );
thus L6: thesis;
end;
end;
theorem
L8: (for B5 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B6 , B7 , B8 , B9 , B10 being (Element of B5) holds ( ( ( ( B6 + B7 ) ` ) + ( ( ( ( ( ( B8 + B9 ) ` ) + B6 ) ` ) + ( ( ( B7 ` ) + ( ( B7 + B10 ) ` ) ) ` ) ) ` ) ) ` ) = B7))
proof
let C10 being  satisfying_DN_1 non  empty ComplLLattStr;
let C11 , C12 , C13 , C14 , C15 being (Element of C10);
set D1 = ( ( ( ( C13 + C14 ) ` ) + C11 ) ` );
set D2 = ( ( C13 + ( ( ( C11 ` ) + ( ( C11 + C14 ) ` ) ) ` ) ) ` );
set D3 = C12;
set D4 = C15;
L9: ( ( ( ( ( ( D1 + D2 ) ` ) + D3 ) ` ) + ( ( D1 + ( ( ( D3 ` ) + ( ( D3 + D4 ) ` ) ) ` ) ) ` ) ) ` ) = D3 by L1;
thus L10: thesis by L9 , L1;
end;
theorem
L11: (for B11 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B12 , B13 , B14 , B15 being (Element of B11) holds ( ( ( ( B12 + B13 ) ` ) + ( ( ( ( B14 + B12 ) ` ) + ( ( ( B13 ` ) + ( ( B13 + B15 ) ` ) ) ` ) ) ` ) ) ` ) = B13))
proof
let C16 being  satisfying_DN_1 non  empty ComplLLattStr;
let C17 , C18 , C19 , C20 being (Element of C16);
set D5 = the (Element of C16);
L12: ( ( ( ( C17 + C19 ) ` ) + ( ( ( ( ( ( C18 + C20 ) ` ) + C17 ) ` ) + ( ( ( C19 ` ) + ( ( C19 + D5 ) ` ) ) ` ) ) ` ) ) ` ) = C19 by L8;
thus L13: thesis by L12 , L8;
end;
theorem
L14: (for B16 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B17 being (Element of B16) holds ( ( ( ( B17 + ( B17 ` ) ) ` ) + B17 ) ` ) = ( B17 ` )))
proof
let C21 being  satisfying_DN_1 non  empty ComplLLattStr;
let C22 being (Element of C21);
set D6 = the (Element of C21);
set D7 = ( ( C22 + D6 ) ` );
L15: ( ( ( ( C22 + ( C22 ` ) ) ` ) + ( ( ( ( ( ( ( ( C22 ` ) ` ) + D6 ) ` ) + C22 ) ` ) + ( ( ( ( C22 ` ) ` ) + ( ( ( C22 ` ) + D7 ) ` ) ) ` ) ) ` ) ) ` ) = ( C22 ` ) by L8;
thus L16: thesis by L15 , L1;
end;
theorem
L17: (for B18 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B19 , B20 , B21 , B22 being (Element of B18) holds ( ( ( ( B19 + B20 ) ` ) + ( ( ( ( B21 + B19 ) ` ) + ( ( ( ( ( ( B20 + ( B20 ` ) ) ` ) + B20 ) ` ) + ( ( B20 + B22 ) ` ) ) ` ) ) ` ) ) ` ) = B20))
proof
let C23 being  satisfying_DN_1 non  empty ComplLLattStr;
let C24 , C25 , C26 , C27 being (Element of C23);
L18: ( ( ( ( C25 + ( C25 ` ) ) ` ) + C25 ) ` ) = ( C25 ` ) by L14;
thus L19: thesis by L18 , L11;
end;
theorem
L20: (for B23 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B24 , B25 , B26 being (Element of B23) holds ( ( ( ( B24 + B25 ) ` ) + ( ( ( ( B26 + B24 ) ` ) + B25 ) ` ) ) ` ) = B25))
proof
let C28 being  satisfying_DN_1 non  empty ComplLLattStr;
let C29 , C30 , C31 being (Element of C28);
set D8 = the (Element of C28);
set D9 = ( ( ( C30 ` ) + ( ( C30 + D8 ) ` ) ) ` );
L21: ( ( ( ( C29 + C30 ) ` ) + ( ( ( ( C31 + C29 ) ` ) + ( ( ( ( ( ( C30 + ( C30 ` ) ) ` ) + C30 ) ` ) + ( ( C30 + D9 ) ` ) ) ` ) ) ` ) ) ` ) = C30 by L17;
thus L22: thesis by L21 , L1;
end;
theorem
L23: (for B27 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B28 , B29 being (Element of B27) holds ( ( ( ( B28 + B29 ) ` ) + ( ( ( B28 ` ) + B29 ) ` ) ) ` ) = B29))
proof
let C32 being  satisfying_DN_1 non  empty ComplLLattStr;
let C33 , C34 being (Element of C32);
set D10 = ( ( C33 + ( C33 ` ) ) ` );
L24: ( ( ( ( C33 + C34 ) ` ) + ( ( ( ( D10 + C33 ) ` ) + C34 ) ` ) ) ` ) = C34 by L20;
thus L25: thesis by L24 , L14;
end;
theorem
L26: (for B30 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B31 , B32 being (Element of B30) holds ( ( ( ( ( ( B31 + B32 ) ` ) + B31 ) ` ) + ( ( B31 + B32 ) ` ) ) ` ) = B31))
proof
let C35 being  satisfying_DN_1 non  empty ComplLLattStr;
let C36 , C37 being (Element of C35);
set D11 = ( ( C36 + C37 ) ` );
L27: ( ( ( ( D11 + C36 ) ` ) + ( ( ( ( C36 + D11 ) ` ) + ( ( ( ( ( ( C36 + ( C36 ` ) ) ` ) + C36 ) ` ) + ( ( C36 + C37 ) ` ) ) ` ) ) ` ) ) ` ) = C36 by L17;
thus L28: thesis by L27 , L20;
end;
theorem
L29: (for B33 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B34 , B35 being (Element of B33) holds ( ( B34 + ( ( ( ( B34 + B35 ) ` ) + B34 ) ` ) ) ` ) = ( ( B34 + B35 ) ` )))
proof
let C38 being  satisfying_DN_1 non  empty ComplLLattStr;
let C39 , C40 being (Element of C38);
set D12 = ( ( C39 + C40 ) ` );
set D13 = C39;
L30: ( ( ( ( ( ( D12 + D13 ) ` ) + D12 ) ` ) + ( ( D12 + D13 ) ` ) ) ` ) = D12 by L26;
thus L31: thesis by L30 , L26;
end;
theorem
L32: (for B36 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B37 , B38 , B39 being (Element of B36) holds ( ( ( ( ( ( B37 + B38 ) ` ) + B39 ) ` ) + ( ( B37 + B39 ) ` ) ) ` ) = B39))
proof
let C41 being  satisfying_DN_1 non  empty ComplLLattStr;
let C42 , C43 , C44 being (Element of C41);
set D14 = ( ( C42 + C43 ) ` );
set D15 = C44;
set D16 = ( ( ( ( C42 + C43 ) ` ) + C42 ) ` );
L33: ( ( ( ( D14 + D15 ) ` ) + ( ( ( ( D16 + D14 ) ` ) + D15 ) ` ) ) ` ) = D15 by L20;
thus L34: thesis by L33 , L26;
end;
theorem
L35: (for B40 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B41 , B42 , B43 being (Element of B40) holds ( ( B41 + ( ( ( ( B42 + B43 ) ` ) + ( ( B42 + B41 ) ` ) ) ` ) ) ` ) = ( ( B42 + B41 ) ` )))
proof
let C45 being  satisfying_DN_1 non  empty ComplLLattStr;
let C46 , C47 , C48 being (Element of C45);
set D17 = ( ( C47 + C46 ) ` );
set D18 = ( ( C47 + C48 ) ` );
set D19 = C46;
L36: ( ( ( ( ( ( D18 + D19 ) ` ) + D17 ) ` ) + ( ( D18 + D17 ) ` ) ) ` ) = D17 by L32;
thus L37: thesis by L36 , L32;
end;
theorem
L38: (for B44 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B45 , B46 , B47 being (Element of B44) holds ( ( ( ( ( ( ( ( B45 + B46 ) ` ) + B47 ) ` ) + ( ( ( B45 ` ) + B46 ) ` ) ) ` ) + B46 ) ` ) = ( ( ( B45 ` ) + B46 ) ` )))
proof
let C49 being  satisfying_DN_1 non  empty ComplLLattStr;
let C50 , C51 , C52 being (Element of C49);
set D20 = ( ( C50 + C51 ) ` );
set D21 = ( ( ( C50 ` ) + C51 ) ` );
set D22 = C52;
L39: ( ( ( ( ( ( D20 + D22 ) ` ) + D21 ) ` ) + ( ( D20 + D21 ) ` ) ) ` ) = D21 by L32;
thus L40: thesis by L39 , L23;
end;
theorem
L41: (for B48 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B49 , B50 , B51 being (Element of B48) holds ( ( B49 + ( ( ( ( B50 + B51 ) ` ) + ( ( B51 + B49 ) ` ) ) ` ) ) ` ) = ( ( B51 + B49 ) ` )))
proof
let C53 being  satisfying_DN_1 non  empty ComplLLattStr;
let C54 , C55 , C56 being (Element of C53);
set D23 = C56;
set D24 = ( ( ( ( C55 + C54 ) ` ) + ( ( C55 + C56 ) ` ) ) ` );
L42: ( ( C54 + ( ( ( ( D23 + D24 ) ` ) + ( ( D23 + C54 ) ` ) ) ` ) ) ` ) = ( ( D23 + C54 ) ` ) by L35;
thus L43: thesis by L42 , L35;
end;
theorem
L44: (for B52 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B53 , B54 , B55 , B56 being (Element of B52) holds ( ( ( ( B53 + B54 ) ` ) + ( ( ( ( B55 + B53 ) ` ) + ( ( ( B54 ` ) + ( ( B56 + B54 ) ` ) ) ` ) ) ` ) ) ` ) = B54))
proof
let C57 being  satisfying_DN_1 non  empty ComplLLattStr;
let C58 , C59 , C60 , C61 being (Element of C57);
set D25 = ( ( ( ( C61 + C60 ) ` ) + ( ( C61 + C59 ) ` ) ) ` );
L45: ( ( ( ( C58 + C59 ) ` ) + ( ( ( ( C60 + C58 ) ` ) + ( ( ( C59 ` ) + ( ( C59 + D25 ) ` ) ) ` ) ) ` ) ) ` ) = C59 by L11;
thus L46: thesis by L45 , L35;
end;
theorem
L47: (for B57 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B58 , B59 being (Element of B57) holds ( ( B58 + B59 ) ` ) = ( ( B59 + B58 ) ` )))
proof
let C62 being  satisfying_DN_1 non  empty ComplLLattStr;
let C63 , C64 being (Element of C62);
set D26 = C64;
set D27 = C63;
set D28 = ( ( C64 + C63 ) ` );
L48: ( ( ( ( D28 + D26 ) ` ) + ( ( D26 + D27 ) ` ) ) ` ) = C64 by L26;
thus L49: thesis by L48 , L41;
end;
theorem
L50: (for B60 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B61 , B62 , B63 being (Element of B60) holds ( ( ( ( ( ( B61 + B62 ) ` ) + ( ( B62 + B63 ) ` ) ) ` ) + B63 ) ` ) = ( ( B62 + B63 ) ` )))
proof
let C65 being  satisfying_DN_1 non  empty ComplLLattStr;
let C66 , C67 , C68 being (Element of C65);
set D29 = ( ( ( ( C66 + C67 ) ` ) + ( ( C67 + C68 ) ` ) ) ` );
L51: ( ( C68 + D29 ) ` ) = ( ( D29 + C68 ) ` ) by L47;
thus L52: thesis by L51 , L41;
end;
theorem
L53: (for B64 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B65 , B66 , B67 being (Element of B64) holds ( ( ( ( B65 + ( ( ( ( B65 + B66 ) ` ) + B67 ) ` ) ) ` ) + B67 ) ` ) = ( ( ( ( B65 + B66 ) ` ) + B67 ) ` )))
proof
let C69 being  satisfying_DN_1 non  empty ComplLLattStr;
let C70 , C71 , C72 being (Element of C69);
set D30 = ( ( ( ( C70 + C71 ) ` ) + C70 ) ` );
set D31 = ( ( C70 + C71 ) ` );
L54: ( ( D30 + D31 ) ` ) = C70 by L26;
thus L55: thesis by L54 , L50;
end;
theorem
L56: (for B68 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B69 , B70 being (Element of B68) holds ( ( ( ( ( ( B69 + B70 ) ` ) + B69 ) ` ) + B70 ) ` ) = ( ( B70 + B70 ) ` )))
proof
let C73 being  satisfying_DN_1 non  empty ComplLLattStr;
let C74 , C75 being (Element of C73);
set D32 = ( ( C74 + C75 ) ` );
L57: ( ( D32 + ( ( ( ( D32 + C74 ) ` ) + C75 ) ` ) ) ` ) = C75 by L20;
thus L58: thesis by L57 , L53;
end;
theorem
L59: (for B71 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B72 , B73 being (Element of B71) holds ( ( ( B72 ` ) + ( ( B73 + B72 ) ` ) ) ` ) = B72))
proof
let C76 being  satisfying_DN_1 non  empty ComplLLattStr;
let C77 , C78 being (Element of C76);
set D33 = ( ( C78 + C77 ) ` );
L60: ( ( D33 + ( ( ( ( ( C77 ` ) + C78 ) ` ) + ( ( ( C77 ` ) + D33 ) ` ) ) ` ) ) ` ) = C77 by L44;
thus L61: thesis by L60 , L35;
end;
theorem
L62: (for B74 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B75 , B76 being (Element of B74) holds ( ( ( ( B75 + B76 ) ` ) + ( B76 ` ) ) ` ) = B76))
proof
let C79 being  satisfying_DN_1 non  empty ComplLLattStr;
let C80 , C81 being (Element of C79);
L63: ( ( ( C81 ` ) + ( ( C80 + C81 ) ` ) ) ` ) = C81 by L59;
thus L64: thesis by L63 , L47;
end;
theorem
L65: (for B77 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B78 , B79 being (Element of B77) holds ( ( B78 + ( ( B79 + ( B78 ` ) ) ` ) ) ` ) = ( B78 ` )))
proof
let C82 being  satisfying_DN_1 non  empty ComplLLattStr;
let C83 , C84 being (Element of C82);
set D34 = ( C83 ` );
set D35 = C84;
set D36 = C83;
L66: ( ( ( ( ( ( D35 + D36 ) ` ) + D34 ) ` ) + ( ( D35 + D34 ) ` ) ) ` ) = D34 by L32;
thus L67: thesis by L66 , L62;
end;
theorem
L68: (for B80 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B81 being (Element of B80) holds ( ( B81 + B81 ) ` ) = ( B81 ` )))
proof
let C85 being  satisfying_DN_1 non  empty ComplLLattStr;
let C86 being (Element of C85);
set D37 = the (Element of C85);
set D38 = ( ( D37 + C86 ) ` );
L69: ( ( C86 + ( ( D38 + ( C86 ` ) ) ` ) ) ` ) = ( C86 ` ) by L65;
thus L70: thesis by L69 , L62;
end;
theorem
L71: (for B82 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B83 , B84 being (Element of B82) holds ( ( ( ( ( ( B83 + B84 ) ` ) + B83 ) ` ) + B84 ) ` ) = ( B84 ` )))
proof
let C87 being  satisfying_DN_1 non  empty ComplLLattStr;
let C88 , C89 being (Element of C87);
L72: ( C89 ` ) = ( ( C89 + C89 ) ` ) by L68
.= ( ( ( ( ( ( C88 + C89 ) ` ) + C88 ) ` ) + C89 ) ` ) by L56;
thus L73: thesis by L72;
end;
theorem
L74: (for B85 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B86 being (Element of B85) holds ( ( B86 ` ) ` ) = B86))
proof
let C90 being  satisfying_DN_1 non  empty ComplLLattStr;
let C91 being (Element of C90);
L75: ( ( C91 ` ) ` ) = ( ( ( ( ( ( C91 + ( C91 ` ) ) ` ) + C91 ) ` ) + ( C91 ` ) ) ` ) by L71
.= C91 by L62;
thus L76: thesis by L75;
end;
theorem
L77: (for B87 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B88 , B89 being (Element of B87) holds ( ( ( ( ( B88 + B89 ) ` ) + B88 ) ` ) + B89 ) = ( ( B89 ` ) ` )))
proof
let C92 being  satisfying_DN_1 non  empty ComplLLattStr;
let C93 , C94 being (Element of C92);
L78: ( ( ( ( ( ( ( C93 + C94 ) ` ) + C93 ) ` ) + C94 ) ` ) ` ) = ( ( C94 ` ) ` ) by L71;
thus L79: thesis by L78 , L74;
end;
theorem
L80: (for B90 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B91 , B92 being (Element of B90) holds ( ( ( B91 + B92 ) ` ) ` ) = ( B92 + B91 )))
proof
let C95 being  satisfying_DN_1 non  empty ComplLLattStr;
let C96 , C97 being (Element of C95);
L81: ( ( ( C96 + C97 ) ` ) ` ) = ( ( ( C97 + C96 ) ` ) ` ) by L47
.= ( C97 + C96 ) by L74;
thus L82: thesis by L81;
end;
theorem
L83: (for B93 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B94 , B95 , B96 being (Element of B93) holds ( B94 + ( ( ( ( B95 + B96 ) ` ) + ( ( B95 + B94 ) ` ) ) ` ) ) = ( ( ( B95 + B94 ) ` ) ` )))
proof
let C98 being  satisfying_DN_1 non  empty ComplLLattStr;
let C99 , C100 , C101 being (Element of C98);
L84: ( ( ( C99 + ( ( ( ( C100 + C101 ) ` ) + ( ( C100 + C99 ) ` ) ) ` ) ) ` ) ` ) = ( ( ( C100 + C99 ) ` ) ` ) by L35;
thus L85: thesis by L84 , L74;
end;
theorem
L86: (for B97 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B98 , B99 being (Element of B97) holds ( B98 + B99 ) = ( B99 + B98 )))
proof
let C102 being  satisfying_DN_1 non  empty ComplLLattStr;
let C103 , C104 being (Element of C102);
L87: ( C103 + C104 ) = ( ( ( C103 + C104 ) ` ) ` ) by L74
.= ( C104 + C103 ) by L80;
thus L88: thesis by L87;
end;
L89: (for B100 being  satisfying_DN_1 non  empty ComplLLattStr holds B100 is  join-commutative)
proof
let R1 being  satisfying_DN_1 non  empty ComplLLattStr;
L90: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds ( R2 + R3 ) = ( R3 + R2 ))) by L86;
thus L91: thesis by L90 , LATTICES:def 4;
end;
registration
cluster  satisfying_DN_1 ->  join-commutative for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence by L89;
end;
theorem
L93: (for B101 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B102 , B103 being (Element of B101) holds ( ( ( ( ( B102 + B103 ) ` ) + B102 ) ` ) + B103 ) = B103))
proof
let C105 being  satisfying_DN_1 non  empty ComplLLattStr;
let C106 , C107 being (Element of C105);
L94: ( ( ( ( ( C106 + C107 ) ` ) + C106 ) ` ) + C107 ) = ( ( C107 ` ) ` ) by L77;
thus L95: thesis by L94 , L74;
end;
theorem
L96: (for B104 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B105 , B106 being (Element of B104) holds ( ( ( ( ( B105 + B106 ) ` ) + B106 ) ` ) + B105 ) = B105)) by L93;
theorem
L97: (for B107 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B108 , B109 being (Element of B107) holds ( B108 + ( ( ( ( B109 + B108 ) ` ) + B109 ) ` ) ) = B108)) by L93;
theorem
L98: (for B110 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B111 , B112 being (Element of B110) holds ( ( ( B111 + ( B112 ` ) ) ` ) + ( ( ( B112 ` ) + B112 ) ` ) ) = ( ( B111 + ( B112 ` ) ) ` )))
proof
let C108 being  satisfying_DN_1 non  empty ComplLLattStr;
let C109 , C110 being (Element of C108);
set D39 = ( ( C109 + ( C110 ` ) ) ` );
L99: ( D39 + ( ( ( ( C110 + D39 ) ` ) + C110 ) ` ) ) = D39 by L93;
thus L100: thesis by L99 , L65;
end;
theorem
L101: (for B113 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B114 , B115 being (Element of B113) holds ( ( ( B114 + B115 ) ` ) + ( ( B115 + ( B115 ` ) ) ` ) ) = ( ( B114 + B115 ) ` )))
proof
let C111 being  satisfying_DN_1 non  empty ComplLLattStr;
let C112 , C113 being (Element of C111);
set D40 = ( ( C112 + C113 ) ` );
set D41 = ( C113 ` );
L102: ( D40 + ( ( ( ( D41 + D40 ) ` ) + D41 ) ` ) ) = D40 by L93;
thus L103: thesis by L102 , L59;
end;
theorem
L104: (for B116 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B117 , B118 being (Element of B116) holds ( ( ( B117 + B118 ) ` ) + ( ( ( B118 ` ) + B118 ) ` ) ) = ( ( B117 + B118 ) ` ))) by L101;
theorem
L105: (for B119 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B120 , B121 being (Element of B119) holds ( ( ( ( ( B120 + ( B121 ` ) ) ` ) ` ) + B121 ) ` ) = ( ( ( B121 ` ) + B121 ) ` )))
proof
let C114 being  satisfying_DN_1 non  empty ComplLLattStr;
let C115 , C116 being (Element of C114);
set D42 = ( C116 ` );
set D43 = C116;
L106: ( ( ( ( ( ( C115 + D42 ) ` ) + ( ( D42 + D43 ) ` ) ) ` ) + D43 ) ` ) = ( ( D42 + D43 ) ` ) by L50;
thus L107: thesis by L106 , L98;
end;
theorem
L108: (for B122 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B123 , B124 being (Element of B122) holds ( ( ( B123 + ( B124 ` ) ) + B124 ) ` ) = ( ( ( B124 ` ) + B124 ) ` )))
proof
let C117 being  satisfying_DN_1 non  empty ComplLLattStr;
let C118 , C119 being (Element of C117);
L109: ( ( ( ( ( C118 + ( C119 ` ) ) ` ) ` ) + C119 ) ` ) = ( ( ( C119 ` ) + C119 ) ` ) by L105;
thus L110: thesis by L109 , L74;
end;
theorem
L111: (for B125 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B126 , B127 , B128 being (Element of B125) holds ( ( ( ( ( ( ( B126 + ( B127 ` ) ) + B128 ) ` ) + B127 ) ` ) + ( ( ( B127 ` ) + B127 ) ` ) ) ` ) = B127))
proof
let C120 being  satisfying_DN_1 non  empty ComplLLattStr;
let C121 , C122 , C123 being (Element of C120);
L112: ( ( ( C121 + ( C122 ` ) ) + C122 ) ` ) = ( ( ( C122 ` ) + C122 ) ` ) by L108;
thus L113: thesis by L112 , L32;
end;
theorem
L114: (for B129 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B130 , B131 , B132 being (Element of B129) holds ( B130 + ( ( ( ( B131 + B132 ) ` ) + ( ( B131 + B130 ) ` ) ) ` ) ) = ( B131 + B130 )))
proof
let C124 being  satisfying_DN_1 non  empty ComplLLattStr;
let C125 , C126 , C127 being (Element of C124);
L115: ( C125 + ( ( ( ( C126 + C127 ) ` ) + ( ( C126 + C125 ) ` ) ) ` ) ) = ( ( ( C126 + C125 ) ` ) ` ) by L83;
thus L116: thesis by L115 , L74;
end;
theorem
L117: (for B133 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B134 , B135 , B136 being (Element of B133) holds ( B134 + ( ( B135 + ( ( ( ( B136 + B135 ) ` ) + B134 ) ` ) ) ` ) ) = ( ( ( B136 + B135 ) ` ) + B134 )))
proof
let C128 being  satisfying_DN_1 non  empty ComplLLattStr;
let C129 , C130 , C131 being (Element of C128);
set D44 = ( ( C131 + C130 ) ` );
set D45 = ( C130 ` );
L118: ( C129 + ( ( ( ( D44 + D45 ) ` ) + ( ( D44 + C129 ) ` ) ) ` ) ) = ( D44 + C129 ) by L114;
thus L119: thesis by L118 , L62;
end;
theorem
L120: (for B137 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B138 , B139 , B140 being (Element of B137) holds ( B138 + ( ( ( ( B139 + B138 ) ` ) + ( ( B139 + B140 ) ` ) ) ` ) ) = ( B139 + B138 ))) by L114;
theorem
L121: (for B141 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B142 , B143 , B144 being (Element of B141) holds ( ( ( ( ( B142 + B143 ) ` ) + ( ( ( ( B142 + B143 ) ` ) + ( ( B142 + B144 ) ` ) ) ` ) ) ` ) + B143 ) = B143))
proof
let C132 being  satisfying_DN_1 non  empty ComplLLattStr;
let C133 , C134 , C135 being (Element of C132);
set D46 = ( ( ( ( C133 + C134 ) ` ) + ( ( C133 + C135 ) ` ) ) ` );
L122: ( ( ( ( ( C134 + D46 ) ` ) + D46 ) ` ) + C134 ) = C134 by L93;
thus L123: thesis by L122 , L114;
end;
theorem
L124: (for B145 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B146 , B147 , B148 being (Element of B145) holds ( ( ( ( ( ( B146 + ( B147 ` ) ) + B148 ) ` ) + B147 ) ` ) ` ) = B147))
proof
let C136 being  satisfying_DN_1 non  empty ComplLLattStr;
let C137 , C138 , C139 being (Element of C136);
L125: ( ( ( ( ( ( C137 + ( C138 ` ) ) + C139 ) ` ) + C138 ) ` ) + ( ( ( C138 ` ) + C138 ) ` ) ) = ( ( ( ( ( C137 + ( C138 ` ) ) + C139 ) ` ) + C138 ) ` ) by L101;
thus L126: thesis by L125 , L111;
end;
theorem
L127: (for B149 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B150 , B151 , B152 being (Element of B149) holds ( B150 + ( ( ( B151 + ( B150 ` ) ) + B152 ) ` ) ) = B150))
proof
let C140 being  satisfying_DN_1 non  empty ComplLLattStr;
let C141 , C142 , C143 being (Element of C140);
L128: ( ( ( ( ( ( C142 + ( C141 ` ) ) + C143 ) ` ) + C141 ) ` ) ` ) = C141 by L124;
thus L129: thesis by L128 , L80;
end;
theorem
L130: (for B153 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B154 , B155 , B156 being (Element of B153) holds ( ( B154 ` ) + ( ( ( B155 + B154 ) + B156 ) ` ) ) = ( B154 ` )))
proof
let C144 being  satisfying_DN_1 non  empty ComplLLattStr;
let C145 , C146 , C147 being (Element of C144);
set D47 = ( C145 ` );
L131: ( D47 + ( ( ( C146 + ( D47 ` ) ) + C147 ) ` ) ) = D47 by L127;
thus L132: thesis by L131 , L74;
end;
theorem
L133: (for B157 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B158 , B159 being (Element of B157) holds ( ( ( B158 + B159 ) ` ) + B158 ) = ( B158 + ( B159 ` ) )))
proof
let C148 being  satisfying_DN_1 non  empty ComplLLattStr;
let C149 , C150 being (Element of C148);
set D48 = C149;
L134: ( C149 + ( ( C150 + ( ( ( ( D48 + C150 ) ` ) + C149 ) ` ) ) ` ) ) = ( ( ( D48 + C150 ) ` ) + C149 ) by L117;
thus L135: thesis by L134 , L93;
end;
theorem
L136: (for B160 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B161 , B162 being (Element of B160) holds ( ( B161 + ( ( B161 + ( B162 ` ) ) ` ) ) ` ) = ( ( B161 + B162 ) ` )))
proof
let C151 being  satisfying_DN_1 non  empty ComplLLattStr;
let C152 , C153 being (Element of C151);
L137: ( ( C152 + ( ( ( ( C152 + C153 ) ` ) + C152 ) ` ) ) ` ) = ( ( C152 + C153 ) ` ) by L29;
thus L138: thesis by L137 , L133;
end;
theorem
L139: (for B163 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B164 , B165 , B166 being (Element of B163) holds ( ( ( ( ( B164 + B165 ) ` ) + ( B164 + B166 ) ) ` ) + B165 ) = B165))
proof
let C154 being  satisfying_DN_1 non  empty ComplLLattStr;
let C155 , C156 , C157 being (Element of C154);
L140: ( ( ( ( C155 + C156 ) ` ) + ( ( ( ( C155 + C156 ) ` ) + ( ( C155 + C157 ) ` ) ) ` ) ) ` ) = ( ( ( ( C155 + C156 ) ` ) + ( C155 + C157 ) ) ` ) by L136;
thus L141: thesis by L140 , L121;
end;
theorem
L142: (for B167 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B168 , B169 , B170 being (Element of B167) holds ( ( ( ( ( ( ( B168 + B169 ) ` ) + B170 ) ` ) + ( ( ( B168 ` ) + B169 ) ` ) ) ` ) + B169 ) = ( ( ( ( B168 ` ) + B169 ) ` ) ` )))
proof
let C158 being  satisfying_DN_1 non  empty ComplLLattStr;
let C159 , C160 , C161 being (Element of C158);
L143: ( ( ( ( ( ( ( ( ( C159 + C160 ) ` ) + C161 ) ` ) + ( ( ( C159 ` ) + C160 ) ` ) ) ` ) + C160 ) ` ) ` ) = ( ( ( ( C159 ` ) + C160 ) ` ) ` ) by L38;
thus L144: thesis by L143 , L74;
end;
theorem
L145: (for B171 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B172 , B173 , B174 being (Element of B171) holds ( ( ( ( ( ( ( B172 + B173 ) ` ) + B174 ) ` ) + ( ( ( B172 ` ) + B173 ) ` ) ) ` ) + B173 ) = ( ( B172 ` ) + B173 )))
proof
let C162 being  satisfying_DN_1 non  empty ComplLLattStr;
let C163 , C164 , C165 being (Element of C162);
L146: ( ( ( ( ( ( ( C163 + C164 ) ` ) + C165 ) ` ) + ( ( ( C163 ` ) + C164 ) ` ) ) ` ) + C164 ) = ( ( ( ( C163 ` ) + C164 ) ` ) ` ) by L142;
thus L147: thesis by L146 , L74;
end;
theorem
L148: (for B175 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B176 , B177 , B178 being (Element of B175) holds ( ( ( ( B176 ` ) + ( ( ( ( ( B177 + B176 ) ` ) ` ) + ( B177 + B178 ) ) ` ) ) ` ) + ( B177 + B178 ) ) = ( ( ( ( B177 + B176 ) ` ) ` ) + ( B177 + B178 ) )))
proof
let C166 being  satisfying_DN_1 non  empty ComplLLattStr;
let C167 , C168 , C169 being (Element of C166);
set D49 = ( ( C168 + C167 ) ` );
set D50 = ( C168 + C169 );
set D51 = C167;
L149: ( ( ( ( ( ( ( D49 + D50 ) ` ) + D51 ) ` ) + ( ( ( D49 ` ) + D50 ) ` ) ) ` ) + D50 ) = ( ( D49 ` ) + D50 ) by L145;
thus L150: thesis by L149 , L139;
end;
theorem
L151: (for B179 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B180 , B181 , B182 being (Element of B179) holds ( ( ( ( B180 ` ) + ( ( ( B181 + B180 ) + ( B181 + B182 ) ) ` ) ) ` ) + ( B181 + B182 ) ) = ( ( ( ( B181 + B180 ) ` ) ` ) + ( B181 + B182 ) )))
proof
let C170 being  satisfying_DN_1 non  empty ComplLLattStr;
let C171 , C172 , C173 being (Element of C170);
L152: ( ( ( ( C171 ` ) + ( ( ( ( ( C172 + C171 ) ` ) ` ) + ( C172 + C173 ) ) ` ) ) ` ) + ( C172 + C173 ) ) = ( ( ( ( C172 + C171 ) ` ) ` ) + ( C172 + C173 ) ) by L148;
thus L153: thesis by L152 , L74;
end;
theorem
L154: (for B183 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B184 , B185 , B186 being (Element of B183) holds ( ( ( ( B184 ` ) + ( ( ( B185 + B184 ) + ( B185 + B186 ) ) ` ) ) ` ) + ( B185 + B186 ) ) = ( ( B185 + B184 ) + ( B185 + B186 ) )))
proof
let C174 being  satisfying_DN_1 non  empty ComplLLattStr;
let C175 , C176 , C177 being (Element of C174);
L155: ( ( ( ( C175 ` ) + ( ( ( C176 + C175 ) + ( C176 + C177 ) ) ` ) ) ` ) + ( C176 + C177 ) ) = ( ( ( ( C176 + C175 ) ` ) ` ) + ( C176 + C177 ) ) by L151;
thus L156: thesis by L155 , L74;
end;
theorem
L157: (for B187 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B188 , B189 , B190 being (Element of B187) holds ( ( ( B188 ` ) ` ) + ( B189 + B190 ) ) = ( ( B189 + B188 ) + ( B189 + B190 ) )))
proof
let C178 being  satisfying_DN_1 non  empty ComplLLattStr;
let C179 , C180 , C181 being (Element of C178);
L158: ( ( C179 ` ) + ( ( ( C180 + C179 ) + ( C180 + C181 ) ) ` ) ) = ( C179 ` ) by L130;
thus L159: thesis by L158 , L154;
end;
theorem
L160: (for B191 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B192 , B193 , B194 being (Element of B191) holds ( ( B192 + B193 ) + ( B192 + B194 ) ) = ( B193 + ( B192 + B194 ) )))
proof
let C182 being  satisfying_DN_1 non  empty ComplLLattStr;
let C183 , C184 , C185 being (Element of C182);
set D52 = C183;
set D53 = C184;
L161: ( ( ( D53 ` ) ` ) + ( D52 + C185 ) ) = ( ( D52 + D53 ) + ( D52 + C185 ) ) by L157;
thus L162: thesis by L161 , L74;
end;
theorem
L163: (for B195 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B196 , B197 , B198 being (Element of B195) holds ( ( B196 + B197 ) + ( B196 + B198 ) ) = ( B198 + ( B196 + B197 ) ))) by L160;
theorem
L164: (for B199 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B200 , B201 , B202 being (Element of B199) holds ( B200 + ( B201 + B202 ) ) = ( B202 + ( B201 + B200 ) )))
proof
let C186 being  satisfying_DN_1 non  empty ComplLLattStr;
let C187 , C188 , C189 being (Element of C186);
L165: ( ( C188 + C187 ) + ( C188 + C189 ) ) = ( C189 + ( C188 + C187 ) ) by L160;
thus L166: thesis by L165 , L160;
end;
theorem
L167: (for B203 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B204 , B205 , B206 being (Element of B203) holds ( B204 + ( B205 + B206 ) ) = ( B205 + ( B206 + B204 ) ))) by L164;
theorem
L168: (for B207 being  satisfying_DN_1 non  empty ComplLLattStr holds (for B208 , B209 , B210 being (Element of B207) holds ( ( B208 + B209 ) + B210 ) = ( B208 + ( B209 + B210 ) ))) by L164;
L169: (for B211 being  satisfying_DN_1 non  empty ComplLLattStr holds B211 is  join-associative)
proof
let R1 being  satisfying_DN_1 non  empty ComplLLattStr;
L170: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds (for R4 being (Element of R1) holds ( ( R2 + R3 ) + R4 ) = ( R2 + ( R3 + R4 ) )))) by L164;
thus L171: thesis by L170 , LATTICES:def 5;
end;
L172: (for R1 being  satisfying_DN_1 non  empty ComplLLattStr holds R1 is  Robbins)
proof
let R1 being  satisfying_DN_1 non  empty ComplLLattStr;
L173: (for R2 being (Element of R1) holds (for R3 being (Element of R1) holds ( ( ( ( R2 + R3 ) ` ) + ( ( R2 + ( R3 ` ) ) ` ) ) ` ) = R2)) by L23;
thus L174: thesis by L173 , ROBBINS1:def 5;
end;
registration
cluster  satisfying_DN_1 ->  join-associative for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence by L169;
cluster  satisfying_DN_1 ->  Robbins for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence by L172;
end;
theorem
L176: (for B212 being non  empty ComplLLattStr holds (for B213 , B214 being (Element of B212) holds (B212 is  join-commutative  join-associative  Huntington implies ( ( B214 + B213 ) *' ( B214 + ( B213 ` ) ) ) = B214)))
proof
let C190 being non  empty ComplLLattStr;
let C191 , C192 being (Element of C190);
assume L177: C190 is  join-commutative  join-associative  Huntington;
reconsider D54 = C190 as  join-commutative  join-associative  Huntington non  empty ComplLLattStr by L177;
reconsider D55 = C192 , D56 = C191 as (Element of D54);
L178: ( ( D55 + D56 ) *' ( D55 + ( D56 ` ) ) ) = ( D55 + ( D56 *' ( D56 ` ) ) ) by ROBBINS1:31
.= ( D55 + ( Bot D54 ) ) by ROBBINS1:15
.= D55 by ROBBINS1:13;
thus L179: thesis by L178;
end;
theorem
L180: (for B215 being  join-commutative  join-associative non  empty ComplLLattStr holds (B215 is  Robbins implies B215 is  satisfying_DN_1))
proof
let C193 being  join-commutative  join-associative non  empty ComplLLattStr;
assume L181: C193 is  Robbins;
reconsider D57 = C193 as  join-commutative  join-associative  Robbins non  empty ComplLLattStr by L181;
let C194 , C195 , C196 , C197 being (Element of C193);
L182: D57 is  Huntington;
L183: ( ( C196 + C194 ) *' ( C196 + ( C194 ` ) ) ) = C196 by L182 , L176;
L184: ( ( ( ( C194 + C195 ) ` ) + C196 ) *' C196 ) = ( ( C196 + ( ( C194 + C195 ) ` ) ) *' C196 )
.= ( C196 *' ( C196 + ( ( C194 + C195 ) ` ) ) )
.= C196 by L182 , ROBBINS1:21;
L185: ( ( ( ( ( C194 + C195 ) ` ) + C196 ) *' C194 ) + C196 ) = ( C196 + ( ( ( ( C194 + C195 ) ` ) + C196 ) *' C194 ) )
.= ( ( C196 + ( ( ( C194 + C195 ) ` ) + C196 ) ) *' ( C196 + C194 ) ) by L182 , ROBBINS1:31
.= ( ( ( ( ( C194 + C195 ) ` ) + C196 ) + C196 ) *' ( C196 + C194 ) )
.= ( ( ( ( C194 + C195 ) ` ) + ( C196 + C196 ) ) *' ( C196 + C194 ) ) by LATTICES:def 5
.= ( ( ( ( C194 + C195 ) ` ) + C196 ) *' ( C196 + C194 ) ) by L182 , ROBBINS1:12
.= ( ( ( ( ( ( C194 ` ) *' ( C195 ` ) ) ` ) ` ) + C196 ) *' ( C196 + C194 ) ) by L182 , ROBBINS1:17
.= ( ( ( ( C194 ` ) *' ( C195 ` ) ) + C196 ) *' ( C196 + C194 ) ) by L182 , ROBBINS1:3
.= ( ( C196 + ( ( C194 ` ) *' ( C195 ` ) ) ) *' ( C196 + C194 ) )
.= ( ( ( C196 + ( C194 ` ) ) *' ( C196 + ( C195 ` ) ) ) *' ( C196 + C194 ) ) by L182 , ROBBINS1:31
.= ( ( C196 + C194 ) *' ( ( C196 + ( C194 ` ) ) *' ( C196 + ( C195 ` ) ) ) )
.= ( ( C196 + C194 ) *' ( ( ( C194 ` ) + C196 ) *' ( C196 + ( C195 ` ) ) ) )
.= ( ( C196 + C194 ) *' ( ( ( C194 ` ) + C196 ) *' ( ( C195 ` ) + C196 ) ) )
.= ( ( ( C196 + C194 ) *' ( ( C194 ` ) + C196 ) ) *' ( ( C195 ` ) + C196 ) ) by L182 , ROBBINS1:16
.= ( ( ( C196 + C194 ) *' ( C196 + ( C194 ` ) ) ) *' ( ( C195 ` ) + C196 ) )
.= ( C196 *' ( C196 + ( C195 ` ) ) ) by L183
.= C196 by L182 , ROBBINS1:21;
L186: ( ( ( ( ( ( C194 + C195 ) ` ) + C196 ) ` ) + ( ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ` ) ) ` ) = ( ( ( ( ( ( ( ( C194 + C195 ) ` ) + C196 ) ` ) ` ) *' ( ( ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ` ) ` ) ) ` ) ` ) by L182 , ROBBINS1:17
.= ( ( ( ( ( ( C194 + C195 ) ` ) + C196 ) ` ) ` ) *' ( ( ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ` ) ` ) ) by L182 , ROBBINS1:3
.= ( ( ( ( ( ( C194 + C195 ) ` ) + C196 ) ` ) ` ) *' ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( C194 + C195 ) ` ) + C196 ) *' ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( ( ( C194 + C195 ) ` ) ` ) *' ( C196 ` ) ) ` ) *' ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ) by L182 , ROBBINS1:17
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + ( ( ( C196 ` ) + ( ( C196 + C197 ) ` ) ) ` ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + ( ( ( ( ( C196 ` ) ` ) *' ( ( ( C196 + C197 ) ` ) ` ) ) ` ) ` ) ) ) by L182 , ROBBINS1:17
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + ( ( ( C196 *' ( ( ( C196 + C197 ) ` ) ` ) ) ` ) ` ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + ( C196 *' ( ( ( C196 + C197 ) ` ) ` ) ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + ( C196 *' ( C196 + C197 ) ) ) ) by L182 , ROBBINS1:3
.= ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' ( C194 + C196 ) ) by L182 , ROBBINS1:21
.= ( ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' C194 ) + ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' C196 ) ) by L182 , ROBBINS1:30
.= ( ( ( ( ( ( ( C194 + C195 ) ` ) ` ) *' ( C196 ` ) ) ` ) *' C194 ) + ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' C196 ) ) by L182 , ROBBINS1:3
.= ( ( ( ( ( C194 + C195 ) ` ) + C196 ) *' C194 ) + ( ( ( ( C194 + C195 ) *' ( C196 ` ) ) ` ) *' C196 ) ) by L182 , ROBBINS1:17
.= ( ( ( ( ( C194 + C195 ) ` ) + C196 ) *' C194 ) + ( ( ( ( ( ( C194 + C195 ) ` ) ` ) *' ( C196 ` ) ) ` ) *' C196 ) ) by L182 , ROBBINS1:3
.= C196 by L182 , L184 , L185 , ROBBINS1:17;
thus L187: thesis by L186;
end;
registration
cluster  join-commutative  join-associative  Robbins ->  satisfying_DN_1 for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence by L180;
end;
registration
cluster  satisfying_DN_1  de_Morgan for preOrthoLattice;
existence
proof
take ( TrivOrtLat );
thus L189: thesis;
end;
end;
registration
cluster  satisfying_DN_1  de_Morgan ->  Boolean for preOrthoLattice;
coherence;
cluster  Boolean ->  satisfying_DN_1 for  well-complemented  well-complemented  well-complemented  well-complemented preOrthoLattice;
coherence;
end;
begin
definition
let C198 being non  empty ComplLLattStr;
attr C198 is  satisfying_MD_1
means
:L192: (for B216 , B217 being (Element of C198) holds ( ( ( ( B216 ` ) + B217 ) ` ) + B216 ) = B216);
attr C198 is  satisfying_MD_2
means
:L193: (for B218 , B219 , B220 being (Element of C198) holds ( ( ( ( B218 ` ) + B219 ) ` ) + ( B220 + B219 ) ) = ( B219 + ( B220 + B218 ) ));
end;
L195:
now
let C199 being non  empty ComplLLattStr;
assume L196: C199 is  satisfying_MD_1  satisfying_MD_2;
L197: (for B221 , B222 being (Element of C199) holds ( ( B221 ` ) + ( ( B221 ` ) + B222 ) ) = ( ( B221 ` ) + B222 ))
proof
let C200 , C201 being (Element of C199);
set D58 = ( ( C200 ` ) + C201 );
L198: ( ( D58 ` ) + C200 ) = C200 by L196 , L192;
thus L199: thesis by L198 , L196 , L192;
end;
L200: (for B223 , B224 being (Element of C199) holds ( ( ( ( B223 ` ) + B224 ) ` ) + B224 ) = ( B224 + B223 ))
proof
let C202 , C203 being (Element of C199);
set D59 = ( ( C202 ` ) + C203 );
L201: ( ( D59 ` ) + ( ( D59 ` ) + C203 ) ) = ( C203 + ( ( D59 ` ) + C202 ) ) by L196 , L193;
L202: ( ( ( ( C202 ` ) + C203 ) ` ) + C203 ) = ( ( D59 ` ) + ( ( D59 ` ) + C203 ) ) by L197
.= ( C203 + C202 ) by L196 , L201 , L192;
thus L203: thesis by L202;
end;
L204: (for B225 being (Element of C199) holds ( B225 + B225 ) = B225)
proof
let C204 being (Element of C199);
L205: ( C204 + C204 ) = ( ( ( ( C204 ` ) + C204 ) ` ) + C204 ) by L200
.= C204 by L196 , L192;
thus L206: thesis by L205;
end;
L207: (for B226 , B227 being (Element of C199) holds ( B226 + ( B226 + B227 ) ) = ( B226 + B227 ))
proof
let C205 , C206 being (Element of C199);
L208: ( C205 + ( C205 + C206 ) ) = ( ( ( ( C206 ` ) + C205 ) ` ) + ( C205 + C205 ) ) by L196 , L193
.= ( ( ( ( C206 ` ) + C205 ) ` ) + C205 ) by L204
.= ( C205 + C206 ) by L200;
thus L209: thesis by L208;
end;
L210: (for B228 , B229 being (Element of C199) holds ( ( B228 + B229 ) + B229 ) = ( B228 + B229 ))
proof
let C207 , C208 being (Element of C199);
set D60 = ( C207 + C208 );
L211: ( ( C207 + C208 ) + C208 ) = ( ( ( ( C208 ` ) + ( C207 + C208 ) ) ` ) + ( C207 + C208 ) ) by L200
.= ( ( ( ( C208 ` ) + ( C207 + C208 ) ) ` ) + ( C207 + ( C207 + C208 ) ) ) by L207
.= ( D60 + ( C207 + C208 ) ) by L196 , L193
.= ( C207 + C208 ) by L204;
thus L212: thesis by L211;
end;
L213: (for B230 , B231 being (Element of C199) holds ( ( B230 + B231 ) + B230 ) = ( B230 + B231 ))
proof
let C209 , C210 being (Element of C199);
L214: ( ( C209 + C210 ) + C209 ) = ( ( ( ( ( C210 ` ) + C209 ) ` ) + C209 ) + C209 ) by L200
.= ( ( ( ( C210 ` ) + C209 ) ` ) + C209 ) by L210
.= ( C209 + C210 ) by L200;
thus L215: thesis by L214;
end;
L216: (for B232 , B233 being (Element of C199) holds ( B232 + ( B233 + ( B233 + B232 ) ) ) = ( B233 + B232 ))
proof
let C211 , C212 being (Element of C199);
set D61 = ( C212 + C211 );
L217: ( C211 + ( C212 + ( C212 + C211 ) ) ) = ( ( ( ( D61 ` ) + C211 ) ` ) + ( C212 + C211 ) ) by L196 , L193
.= ( C212 + C211 ) by L196 , L192;
thus L218: thesis by L217;
end;
L219: (for B234 , B235 being (Element of C199) holds ( B234 + ( B235 + B234 ) ) = ( B235 + B234 ))
proof
let C213 , C214 being (Element of C199);
L220: ( C213 + ( C214 + C213 ) ) = ( C213 + ( C214 + ( C214 + C213 ) ) ) by L207
.= ( C214 + C213 ) by L216;
thus L221: thesis by L220;
end;
L222: (for B236 , B237 being (Element of C199) holds ( ( ( B236 + ( B237 ` ) ) ` ) + B237 ) = B237)
proof
let C215 , C216 being (Element of C199);
L223: ( ( ( C215 + ( C216 ` ) ) ` ) + C216 ) = ( ( ( ( C216 ` ) + ( C215 + ( C216 ` ) ) ) ` ) + C216 ) by L219
.= C216 by L196 , L192;
thus L224: thesis by L223;
end;
L225: (for B238 being (Element of C199) holds ( ( ( B238 ` ) ` ) + B238 ) = B238)
proof
let C217 being (Element of C199);
L226: ( ( ( ( C217 ` ) + ( C217 ` ) ) ` ) + C217 ) = C217 by L196 , L192;
thus L227: thesis by L226 , L204;
end;
L228: (for B239 being (Element of C199) holds ( B239 + ( ( B239 ` ) ` ) ) = B239)
proof
let C218 being (Element of C199);
L229: ( C218 + ( ( C218 ` ) ` ) ) = ( ( ( ( C218 ` ) ` ) + C218 ) + ( ( C218 ` ) ` ) ) by L225
.= ( ( ( C218 ` ) ` ) + C218 ) by L213
.= C218 by L225;
thus L230: thesis by L229;
end;
L231: (for B240 , B241 being (Element of C199) holds ( B240 + ( ( ( B240 ` ) ` ) + B241 ) ) = ( B240 + B241 ))
proof
let C219 , C220 being (Element of C199);
L232: ( C219 + ( ( ( C219 ` ) ` ) + C220 ) ) = ( ( ( ( C220 ` ) + C219 ) ` ) + ( ( ( C219 ` ) ` ) + C219 ) ) by L196 , L193
.= ( ( ( ( C220 ` ) + C219 ) ` ) + C219 ) by L225
.= ( C219 + C220 ) by L200;
thus L233: thesis by L232;
end;
L234: (for B242 being (Element of C199) holds ( B242 + ( ( ( ( B242 ` ) ` ) ` ) ` ) ) = B242)
proof
let C221 being (Element of C199);
L235: ( C221 + ( ( ( ( C221 ` ) ` ) ` ) ` ) ) = ( C221 + ( ( ( C221 ` ) ` ) + ( ( ( ( C221 ` ) ` ) ` ) ` ) ) ) by L231
.= ( C221 + ( ( C221 ` ) ` ) ) by L228
.= C221 by L228;
thus L236: thesis by L235;
end;
L237: (for B243 being (Element of C199) holds ( ( ( B243 ` ) ` ) ` ) = ( B243 ` ))
proof
let C222 being (Element of C199);
L238: ( ( ( C222 ` ) ` ) ` ) = ( ( ( C222 + ( ( ( ( C222 ` ) ` ) ` ) ` ) ) ` ) + ( ( ( C222 ` ) ` ) ` ) ) by L222
.= ( ( C222 ` ) + ( ( ( C222 ` ) ` ) ` ) ) by L234
.= ( C222 ` ) by L228;
thus L239: thesis by L238;
end;
L240: (for B244 , B245 , B246 being (Element of C199) holds ( ( ( ( B244 ` ) + B245 ) ` ) + ( ( ( ( B244 ` ) + B246 ) ` ) + B245 ) ) = ( B245 + B244 ))
proof
let C223 , C224 , C225 being (Element of C199);
L241: ( ( ( ( C223 ` ) + C224 ) ` ) + ( ( ( ( C223 ` ) + C225 ) ` ) + C224 ) ) = ( C224 + ( ( ( ( C223 ` ) + C225 ) ` ) + C223 ) ) by L196 , L193
.= ( C224 + C223 ) by L196 , L192;
thus L242: thesis by L241;
end;
L243: (for B247 , B248 being (Element of C199) holds ( B247 + ( ( B248 ` ) ` ) ) = ( B247 + B248 ))
proof
let C226 , C227 being (Element of C199);
L244: ( C226 + C227 ) = ( ( ( ( C227 ` ) + C226 ) ` ) + ( ( ( ( C227 ` ) + C226 ) ` ) + C226 ) ) by L240
.= ( ( ( ( C227 ` ) + C226 ) ` ) + ( ( ( ( ( ( C227 ` ) ` ) ` ) + C226 ) ` ) + C226 ) ) by L237
.= ( ( ( ( ( ( C227 ` ) ` ) ` ) + C226 ) ` ) + ( ( ( ( ( ( C227 ` ) ` ) ` ) + C226 ) ` ) + C226 ) ) by L237
.= ( C226 + ( ( C227 ` ) ` ) ) by L240;
thus L245: thesis by L244;
end;
L246: (for B249 being (Element of C199) holds ( ( B249 ` ) ` ) = B249)
proof
let C228 being (Element of C199);
L247: ( ( C228 ` ) ` ) = ( ( ( ( ( ( C228 ` ) ` ) ` ) + ( ( C228 ` ) ` ) ) ` ) + ( ( C228 ` ) ` ) ) by L196 , L192
.= ( ( ( ( C228 ` ) + ( ( C228 ` ) ` ) ) ` ) + ( ( C228 ` ) ` ) ) by L237
.= ( ( ( ( C228 ` ) + ( ( C228 ` ) ` ) ) ` ) + C228 ) by L243
.= C228 by L196 , L192;
thus L248: thesis by L247;
end;
L249: (for B250 , B251 , B252 being (Element of C199) holds ( ( ( ( B250 ` ) + ( ( ( ( B251 + B250 ) ` ) + B252 ) ` ) ) ` ) + ( B251 + ( ( ( ( B251 + B250 ) ` ) + B252 ) ` ) ) ) = ( B251 + B250 ))
proof
let C229 , C230 , C231 being (Element of C199);
set D62 = ( ( ( ( C230 + C229 ) ` ) + C231 ) ` );
L250: ( ( ( ( C229 ` ) + D62 ) ` ) + ( C230 + D62 ) ) = ( D62 + ( C230 + C229 ) ) by L196 , L193
.= ( C230 + C229 ) by L196 , L192;
thus L251: thesis by L250;
end;
L252: (for B253 , B254 being (Element of C199) holds ( ( ( ( B253 ` ) + ( ( B253 + B254 ) ` ) ) ` ) + ( ( B254 ` ) + ( ( B253 + B254 ) ` ) ) ) = ( ( B254 ` ) + B253 ))
proof
let C232 , C233 being (Element of C199);
L253: ( ( ( ( C232 ` ) + ( ( C232 + C233 ) ` ) ) ` ) + ( ( C233 ` ) + ( ( C232 + C233 ) ` ) ) ) = ( ( ( ( C232 ` ) + ( ( C232 + C233 ) ` ) ) ` ) + ( ( C233 ` ) + ( ( ( ( ( C233 ` ) + C232 ) ` ) + C232 ) ` ) ) ) by L200
.= ( ( ( ( C232 ` ) + ( ( ( ( ( C233 ` ) + C232 ) ` ) + C232 ) ` ) ) ` ) + ( ( C233 ` ) + ( ( ( ( ( C233 ` ) + C232 ) ` ) + C232 ) ` ) ) ) by L200
.= ( ( C233 ` ) + C232 ) by L249;
thus L254: thesis by L253;
end;
L255: (for B255 , B256 being (Element of C199) holds ( B255 + ( ( ( B255 ` ) + B256 ) ` ) ) = B255)
proof
let C234 , C235 being (Element of C199);
L256: ( C234 + ( ( ( C234 ` ) + C235 ) ` ) ) = ( ( ( ( ( C234 ` ) + C235 ) ` ) + C234 ) + ( ( ( C234 ` ) + C235 ) ` ) ) by L196 , L192
.= ( ( ( ( C234 ` ) + C235 ) ` ) + C234 ) by L213
.= C234 by L196 , L192;
thus L257: thesis by L256;
end;
L258: (for B257 , B258 being (Element of C199) holds ( ( B257 ` ) + ( ( B257 + B258 ) ` ) ) = ( B257 ` ))
proof
let C236 , C237 being (Element of C199);
L259: ( C236 ` ) = ( ( C236 ` ) + ( ( ( ( C236 ` ) ` ) + C237 ) ` ) ) by L255
.= ( ( C236 ` ) + ( ( C236 + C237 ) ` ) ) by L246;
thus L260: thesis by L259;
end;
L261: (for B259 , B260 being (Element of C199) holds ( B259 + ( ( B260 + ( B259 ` ) ) ` ) ) = B259)
proof
let C238 , C239 being (Element of C199);
L262: ( C238 + ( ( C239 + ( C238 ` ) ) ` ) ) = ( ( ( ( C239 + ( C238 ` ) ) ` ) + C238 ) + ( ( C239 + ( C238 ` ) ) ` ) ) by L222
.= ( ( ( C239 + ( C238 ` ) ) ` ) + C238 ) by L213
.= C238 by L222;
thus L263: thesis by L262;
end;
L264: (for B261 , B262 being (Element of C199) holds ( ( B261 ` ) + ( ( B262 + B261 ) ` ) ) = ( B261 ` ))
proof
let C240 , C241 being (Element of C199);
L265: ( C240 ` ) = ( ( C240 ` ) + ( ( C241 + ( ( C240 ` ) ` ) ) ` ) ) by L261
.= ( ( C240 ` ) + ( ( C241 + C240 ) ` ) ) by L246;
thus L266: thesis by L265;
end;
L267: (for B263 , B264 being (Element of C199) holds ( B263 + ( B264 ` ) ) = ( ( B264 ` ) + B263 ))
proof
let C242 , C243 being (Element of C199);
L268: ( ( C243 ` ) + C242 ) = ( ( ( ( C242 ` ) + ( ( C242 + C243 ) ` ) ) ` ) + ( ( C243 ` ) + ( ( C242 + C243 ) ` ) ) ) by L252
.= ( ( ( C242 ` ) ` ) + ( ( C243 ` ) + ( ( C242 + C243 ) ` ) ) ) by L258
.= ( ( ( C242 ` ) ` ) + ( C243 ` ) ) by L264
.= ( C242 + ( C243 ` ) ) by L246;
thus L269: thesis by L268;
end;
L270: (for B265 , B266 being (Element of C199) holds ( B265 + B266 ) = ( B266 + B265 ))
proof
let C244 , C245 being (Element of C199);
L271: ( ( C245 ` ) ` ) = C245 by L246;
thus L272: thesis by L271 , L267;
end;
thus L273: C199 is  join-commutative by L270 , LATTICES:def 4;
L274: (for B267 , B268 , B269 being (Element of C199) holds ( ( ( ( ( ( B267 ` ) + B268 ) ` ) + B269 ) ` ) + ( ( B267 ` ) + B269 ) ) = ( B269 + ( ( B267 ` ) + B268 ) ))
proof
let C246 , C247 , C248 being (Element of C199);
L275: ( ( ( ( ( ( C246 ` ) + C247 ) ` ) + C248 ) ` ) + ( ( C246 ` ) + C248 ) ) = ( C248 + ( ( C246 ` ) + ( ( C246 ` ) + C247 ) ) ) by L196 , L193
.= ( C248 + ( ( C246 ` ) + C247 ) ) by L197;
thus L276: thesis by L275;
end;
L277: (for B270 , B271 being (Element of C199) holds ( B270 + ( ( B271 ` ) + B270 ) ) = ( ( B271 ` ) + B270 ))
proof
let C249 , C250 being (Element of C199);
L278: ( C249 + ( ( C250 ` ) + C249 ) ) = ( ( ( ( ( ( C250 ` ) + C249 ) ` ) + C249 ) ` ) + ( ( C250 ` ) + C249 ) ) by L274
.= ( ( C250 ` ) + C249 ) by L196 , L192;
thus L279: thesis by L278;
end;
L280: (for B272 , B273 being (Element of C199) holds ( ( ( B272 + B273 ) ` ) + B272 ) = ( ( B273 ` ) + B272 ))
proof
let C251 , C252 being (Element of C199);
set D63 = ( ( C252 ` ) + C251 );
L281: ( ( C252 ` ) + C251 ) = ( C251 + ( ( C252 ` ) + C251 ) ) by L277
.= ( ( ( ( D63 ` ) + C251 ) ` ) + C251 ) by L200
.= ( ( ( C251 + C252 ) ` ) + C251 ) by L200;
thus L282: thesis by L281;
end;
L283: (for B274 , B275 being (Element of C199) holds ( ( ( B274 + B275 ) ` ) + ( ( ( B275 ` ) + B274 ) ` ) ) = ( ( B274 ` ) + ( ( ( B275 ` ) + B274 ) ` ) ))
proof
let C253 , C254 being (Element of C199);
L284: ( ( ( C253 + C254 ) ` ) + ( ( ( C254 ` ) + C253 ) ` ) ) = ( ( ( ( ( ( C254 ` ) + C253 ) ` ) + C253 ) ` ) + ( ( ( C254 ` ) + C253 ) ` ) ) by L200
.= ( ( C253 ` ) + ( ( ( C254 ` ) + C253 ) ` ) ) by L280;
thus L285: thesis by L284;
end;
L286: (for B276 , B277 being (Element of C199) holds ( ( ( ( B276 ` ) + ( B277 ` ) ) ` ) + ( ( ( B276 ` ) + B277 ) ` ) ) = B276)
proof
let C255 , C256 being (Element of C199);
L287: ( ( ( ( C255 ` ) + ( C256 ` ) ) ` ) + ( ( ( C255 ` ) + C256 ) ` ) ) = ( ( ( ( C256 ` ) + ( C255 ` ) ) ` ) + ( ( ( C255 ` ) + C256 ) ` ) ) by L270
.= ( ( ( ( C255 ` ) + C256 ) ` ) + ( ( ( C256 ` ) + ( C255 ` ) ) ` ) ) by L270
.= ( ( ( C255 ` ) ` ) + ( ( ( C256 ` ) + ( C255 ` ) ) ` ) ) by L283
.= ( C255 + ( ( ( C256 ` ) + ( C255 ` ) ) ` ) ) by L246
.= C255 by L261;
thus L288: thesis by L287;
end;
thus L289: C199 is  Huntington by L286 , ROBBINS1:def 6;
L290: (for B278 , B279 , B280 being (Element of C199) holds ( ( B278 + B279 ) + ( B279 + B280 ) ) = ( ( B278 + B279 ) + B280 ))
proof
let C257 , C258 , C259 being (Element of C199);
set D64 = ( C257 + C258 );
L291: ( ( C257 + C258 ) + C259 ) = ( ( ( ( C259 ` ) + D64 ) ` ) + D64 ) by L200
.= ( ( ( ( C259 ` ) + D64 ) ` ) + ( C258 + D64 ) ) by L219
.= ( D64 + ( C258 + C259 ) ) by L196 , L193;
thus L292: thesis by L291;
end;
L293: (for B281 , B282 , B283 being (Element of C199) holds ( ( B281 + B282 ) + B283 ) = ( B281 + ( B282 + B283 ) ))
proof
let C260 , C261 , C262 being (Element of C199);
L294: (for B284 , B285 , B286 being (Element of C199) holds ( ( B284 + B285 ) + ( B286 + B284 ) ) = ( B285 + ( B284 + B286 ) ))
proof
let C263 , C264 , C265 being (Element of C199);
L295: ( ( C263 + C264 ) + ( C265 + C263 ) ) = ( ( C265 + C263 ) + ( C263 + C264 ) ) by L270
.= ( ( C265 + C263 ) + C264 ) by L290
.= ( ( C263 + C265 ) + C264 ) by L270
.= ( C264 + ( C263 + C265 ) ) by L270;
thus L296: thesis by L295;
end;
L297: ( ( C261 + C260 ) + ( C262 + C261 ) ) = ( C260 + ( C261 + C262 ) ) by L294;
L298: ( ( C260 + C261 ) + ( C262 + C261 ) ) = ( C260 + ( C261 + C262 ) ) by L297 , L270;
L299: ( ( C260 + C261 ) + C262 ) = ( ( C260 + C261 ) + ( C261 + C262 ) ) by L290
.= ( C260 + ( C261 + C262 ) ) by L270 , L298;
thus L300: thesis by L299;
end;
thus L301: C199 is  join-associative by L293 , LATTICES:def 5;
end;
registration
cluster  satisfying_MD_1  satisfying_MD_2 ->  join-commutative  join-associative  Huntington for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence by L195;
cluster  join-commutative  join-associative  Huntington ->  satisfying_MD_1  satisfying_MD_2 for non  empty non  empty non  empty non  empty ComplLLattStr;
coherence
proof
let C266 being non  empty ComplLLattStr;
assume L302: C266 is  join-commutative  join-associative  Huntington;
reconsider D65 = C266 as  join-commutative  join-associative  Huntington non  empty ComplLLattStr by L302;
L303: D65 is  satisfying_MD_2
proof
let C267 , C268 , C269 being (Element of D65);
set D66 = ( C269 + C268 );
L304: ( D66 + ( C268 ` ) ) = ( C269 + ( C268 + ( C268 ` ) ) ) by LATTICES:def 5
.= ( C269 + ( Top D65 ) ) by ROBBINS1:def 8
.= ( Top D65 ) by ROBBINS1:19;
L305: ( ( ( ( C267 ` ) + C268 ) ` ) + ( C269 + C268 ) ) = ( ( ( ( C267 ` ) + ( ( C268 ` ) ` ) ) ` ) + ( C269 + C268 ) ) by ROBBINS1:3
.= ( ( C267 *' ( C268 ` ) ) + ( C269 + C268 ) ) by ROBBINS1:def 4
.= ( ( D66 + C267 ) *' ( D66 + ( C268 ` ) ) ) by ROBBINS1:31
.= ( D66 + C267 ) by L304 , ROBBINS1:14
.= ( C268 + ( C269 + C267 ) ) by LATTICES:def 5;
thus L306: thesis by L305;
end;
L307: D65 is  satisfying_MD_1
proof
let C270 , C271 being (Element of D65);
L308: ( ( ( ( C270 ` ) + C271 ) ` ) + C270 ) = ( ( ( ( C270 ` ) + ( ( C271 ` ) ` ) ) ` ) + C270 ) by ROBBINS1:3
.= ( ( C270 *' ( C271 ` ) ) + C270 ) by ROBBINS1:def 4
.= C270 by ROBBINS1:20;
thus L309: thesis by L308;
end;
thus L310: thesis by L307 , L303;
end;
end;
registration
cluster  satisfying_MD_1  satisfying_MD_2  satisfying_DN_1  de_Morgan for preOrthoLattice;
existence
proof
take ( TrivOrtLat );
thus L312: thesis;
end;
end;
registration
cluster  satisfying_MD_1  satisfying_MD_2  de_Morgan ->  Boolean for preOrthoLattice;
coherence;
cluster  Boolean ->  satisfying_MD_1  satisfying_MD_2 for  well-complemented  well-complemented  well-complemented  well-complemented preOrthoLattice;
coherence;
end;
