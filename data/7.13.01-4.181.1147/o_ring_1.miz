:: Ordered Rings - Part I
::  by Micha{\l} Muzalewski and Les{\l}aw W. Szczerba
::
:: Received October 11, 1990
:: Copyright (c) 1990-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NAT_1, XBOOLE_0, ALGSTR_0, VECTSP_1, FINSEQ_1, ORDINAL4, RELAT_1,
      ARYTM_3, PARTFUN1, XXREAL_0, CARD_1, FUNCT_1, SQUARE_1, O_RING_1;
 notations ORDINAL1, NAT_1, FUNCT_1, FINSEQ_1, PARTFUN1, NUMBERS, STRUCT_0,
      ALGSTR_0, VECTSP_1, XXREAL_0;
 constructors RLVECT_1, PARTFUN1, XXREAL_0, NAT_1, VECTSP_1, RELSET_1;
 registrations RELSET_1, XREAL_0, STRUCT_0, VECTSP_1, ORDINAL1, FINSEQ_1;
 requirements NUMERALS, SUBSET, ARITHM, BOOLE;
 theorems NAT_1, FINSEQ_1, FINSEQ_3, XREAL_1, FINSEQ_4, XXREAL_0, PARTFUN1;
 schemes NAT_1;

begin
L1: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds (for R11 being (FinSequence of R6) holds (R11 = ( R9 ^ R10 ) iff (( dom R11 ) = ( Seg ( ( len R9 ) + ( len R10 ) ) ) & (for B1 being Nat holds (B1 in ( dom R9 ) implies ( R11 /. B1 ) = ( R9 /. B1 ))) & (for B2 being Nat holds (B2 in ( dom R10 ) implies ( R11 /. ( ( len R9 ) + B2 ) ) = ( R10 /. B2 )))))))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
let R11 being (FinSequence of R6);
L2: ( len R9 ) >= ( 0 ) by NAT_1:2;
thus L3: (R11 = ( R9 ^ R10 ) implies (( dom R11 ) = ( Seg ( ( len R9 ) + ( len R10 ) ) ) & (for B3 being Nat holds (B3 in ( dom R9 ) implies ( R11 /. B3 ) = ( R9 /. B3 ))) & (for B4 being Nat holds (B4 in ( dom R10 ) implies ( R11 /. ( ( len R9 ) + B4 ) ) = ( R10 /. B4 )))))
proof
assume L4: R11 = ( R9 ^ R10 );
thus L5: ( dom R11 ) = ( Seg ( ( len R9 ) + ( len R10 ) ) ) by L4 , FINSEQ_1:def 7;
L6: ( len R11 ) = ( ( len R9 ) + ( len R10 ) ) by L5 , FINSEQ_1:def 3;
thus L7: (for B5 being Nat holds (B5 in ( dom R9 ) implies ( R11 /. B5 ) = ( R9 /. B5 )))
proof
let C1 being Nat;
assume that
L8: C1 in ( dom R9 );
L9: (( len R9 ) <= ( ( len R9 ) + ( len R10 ) ) & C1 <= ( len R9 )) by L8 , FINSEQ_3:25 , NAT_1:11;
L10: C1 <= ( len R11 ) by L9 , L6 , XXREAL_0:2;
L11: 1 <= C1 by L8 , FINSEQ_3:25;
L12: C1 in ( dom R11 ) by L11 , L10 , FINSEQ_3:25;
L13: ( R11 /. C1 ) = ( R11 . C1 ) by L12 , PARTFUN1:def 6
.= ( R9 . C1 ) by L4 , L8 , FINSEQ_1:def 7
.= ( R9 /. C1 ) by L8 , PARTFUN1:def 6;
thus L14: thesis by L13;
end;

thus L15: (for B6 being Nat holds (B6 in ( dom R10 ) implies ( R11 /. ( ( len R9 ) + B6 ) ) = ( R10 /. B6 )))
proof
let C2 being Nat;
assume L16: C2 in ( dom R10 );
L17: C2 <= ( len R10 ) by L16 , FINSEQ_3:25;
L18: ( ( len R9 ) + C2 ) <= ( ( len R9 ) + ( len R10 ) ) by L17 , XREAL_1:7;
L19: 1 <= C2 by L16 , FINSEQ_3:25;
L20: ( ( 0 ) + 1 ) <= ( ( len R9 ) + C2 ) by L19 , L2 , XREAL_1:7;
L21: ( ( len R9 ) + C2 ) in ( dom R11 ) by L20 , L6 , L18 , FINSEQ_3:25;
L22: ( R11 /. ( ( len R9 ) + C2 ) ) = ( R11 . ( ( len R9 ) + C2 ) ) by L21 , PARTFUN1:def 6
.= ( R10 . C2 ) by L4 , L16 , FINSEQ_1:def 7
.= ( R10 /. C2 ) by L16 , PARTFUN1:def 6;
thus L23: thesis by L22;
end;

end;

assume that
L16: ( dom R11 ) = ( Seg ( ( len R9 ) + ( len R10 ) ) )
and
L17: (for B7 being Nat holds (B7 in ( dom R9 ) implies ( R11 /. B7 ) = ( R9 /. B7 )))
and
L18: (for B8 being Nat holds (B8 in ( dom R10 ) implies ( R11 /. ( ( len R9 ) + B8 ) ) = ( R10 /. B8 )));
L19: ( len R11 ) = ( ( len R9 ) + ( len R10 ) ) by L16 , FINSEQ_1:def 3;
L20: (for B9 being Nat holds (B9 in ( dom R10 ) implies ( R11 . ( ( len R9 ) + B9 ) ) = ( R10 . B9 )))
proof
let C3 being Nat;
assume L21: C3 in ( dom R10 );
L22: C3 <= ( len R10 ) by L21 , FINSEQ_3:25;
L23: ( ( len R9 ) + C3 ) <= ( ( len R9 ) + ( len R10 ) ) by L22 , XREAL_1:7;
L24: 1 <= C3 by L21 , FINSEQ_3:25;
L25: ( ( 0 ) + 1 ) <= ( ( len R9 ) + C3 ) by L24 , L2 , XREAL_1:7;
L26: ( ( len R9 ) + C3 ) in ( dom R11 ) by L25 , L19 , L23 , FINSEQ_3:25;
L27: ( R11 . ( ( len R9 ) + C3 ) ) = ( R11 /. ( ( len R9 ) + C3 ) ) by L26 , PARTFUN1:def 6
.= ( R10 /. C3 ) by L18 , L21
.= ( R10 . C3 ) by L21 , PARTFUN1:def 6;
thus L28: thesis by L27;
end;
L29: (for B10 being Nat holds (B10 in ( dom R9 ) implies ( R11 . B10 ) = ( R9 . B10 )))
proof
let C4 being Nat;
assume that
L30: C4 in ( dom R9 );
L31: (( len R9 ) <= ( ( len R9 ) + ( len R10 ) ) & C4 <= ( len R9 )) by L30 , FINSEQ_3:25 , NAT_1:11;
L32: C4 <= ( len R11 ) by L31 , L19 , XXREAL_0:2;
L33: 1 <= C4 by L30 , FINSEQ_3:25;
L34: C4 in ( dom R11 ) by L33 , L32 , FINSEQ_3:25;
L35: ( R11 . C4 ) = ( R11 /. C4 ) by L34 , PARTFUN1:def 6
.= ( R9 /. C4 ) by L17 , L30
.= ( R9 . C4 ) by L30 , PARTFUN1:def 6;
thus L36: thesis by L35;
end;
thus L37: thesis by L29 , L16 , L20 , FINSEQ_1:def 7;
end;
L38: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds (R9 = <* R7 *> iff (( len R9 ) = 1 & ( R9 /. 1 ) = R7)))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
thus L39: (R9 = <* R7 *> implies (( len R9 ) = 1 & ( R9 /. 1 ) = R7)) by FINSEQ_1:40 , FINSEQ_4:16;
assume that
L40: ( len R9 ) = 1
and
L41: ( R9 /. 1 ) = R7;
L42: 1 in ( dom R9 ) by L40 , FINSEQ_3:25;
L43: ( R9 . 1 ) = R7 by L42 , L41 , PARTFUN1:def 6;
thus L44: thesis by L43 , L40 , FINSEQ_1:40;
end;
L45: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = R7)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
L46: 1 <= ( ( len R9 ) + 1 ) by NAT_1:11;
L47: ( ( len R9 ) + 1 ) = ( ( len R9 ) + ( len <* R7 *> ) ) by FINSEQ_1:39
.= ( len ( R9 ^ <* R7 *> ) ) by FINSEQ_1:22;
L48: ( ( len R9 ) + 1 ) in ( dom ( R9 ^ <* R7 *> ) ) by L47 , L46 , FINSEQ_3:25;
L49: ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = ( ( R9 ^ <* R7 *> ) . ( ( len R9 ) + 1 ) ) by L48 , PARTFUN1:def 6
.= R7 by FINSEQ_1:42;
thus L50: thesis by L49;
end;
L51: (for R1 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R1 <> ( 0 ) & R1 <= ( len R9 )) implies ( ( R9 ^ R10 ) /. R1 ) = ( R9 /. R1 ))))))
proof
let R1 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L52: R1 <> ( 0 )
and
L53: R1 <= ( len R9 );
L54: ( 0 ) <= R1 by NAT_1:2;
L55: ( 0 ) < R1 by L54 , L52 , XXREAL_0:1;
L56: ( ( 0 ) + 1 ) <= R1 by L55 , NAT_1:13;
L57: R1 in ( dom R9 ) by L56 , L53 , FINSEQ_3:25;
thus L58: thesis by L57 , L1;
end;
L59: (for R1 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R1 <> ( 0 ) & R1 <= ( len R10 )) implies ( ( R9 ^ R10 ) /. ( ( len R9 ) + R1 ) ) = ( R10 /. R1 ))))))
proof
let R1 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L60: R1 <> ( 0 )
and
L61: R1 <= ( len R10 );
L62: ( 0 ) <= R1 by NAT_1:2;
L63: ( 0 ) < R1 by L62 , L60 , XXREAL_0:1;
L64: ( ( 0 ) + 1 ) <= R1 by L63 , NAT_1:13;
L65: R1 in ( dom R10 ) by L64 , L61 , FINSEQ_3:25;
thus L66: thesis by L65 , L1;
end;
definition
let C5 being non  empty doubleLoopStr;
let C6 being (Scalar of C5);
func C6 ^2 -> (Scalar of C5) equals 
( C6 * C6 );
coherence;
end;
definition
let C7 being non  empty doubleLoopStr;
let C8 being (Scalar of C7);
attr C8 is  being_a_square
means
(ex B11 being (Scalar of C7) st C8 = ( B11 ^2 ));
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_a_Sum_of_squares
means
:L69: (( len R9 ) <> ( 0 ) & ( R9 /. 1 ) is  being_a_square & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))))));
end;
definition
let C9 being non  empty doubleLoopStr;
let C10 being (Scalar of C9);
attr C10 is  being_a_sum_of_squares
means
:L71: (ex B12 being (FinSequence of C9) st (B12 is  being_a_Sum_of_squares & C10 = ( B12 /. ( len B12 ) )));
end;
L73: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_a_Sum_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L74: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L75: R5 <> ( 0 )
and
L76: R5 < ( len <* R7 *> );
L77: R5 < 1 by L76 , L38;
thus L78: thesis by L77 , L75 , NAT_1:25;
end;
assume L79: R7 is  being_a_square;
L80: ( <* R7 *> /. 1 ) is  being_a_square by L79 , L38;
L81: ( len <* R7 *> ) = 1 by L38;
thus L82: thesis by L81 , L80 , L74 , L69;
end;
L83: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  being_a_sum_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L84: R7 is  being_a_square;
L85: <* R7 *> is  being_a_Sum_of_squares by L84 , L73;
L86: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L87: thesis by L86 , L85 , L71;
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_a_Product_of_squares
means
:L88: (( len R9 ) <> ( 0 ) & ( R9 /. 1 ) is  being_a_square & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) * R8 ))))));
end;
definition
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
attr R7 is  being_a_product_of_squares
means
:L90: (ex R9 being (FinSequence of R6) st (R9 is  being_a_Product_of_squares & R7 = ( R9 /. ( len R9 ) )));
end;
L92: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_a_Product_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L93: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) * R8 )))))
proof
let R5 being Nat;
assume that
L94: R5 <> ( 0 )
and
L95: R5 < ( len <* R7 *> );
L96: R5 < 1 by L95 , L38;
thus L97: thesis by L96 , L94 , NAT_1:25;
end;
assume L98: R7 is  being_a_square;
L99: ( <* R7 *> /. 1 ) is  being_a_square by L98 , L38;
L100: ( len <* R7 *> ) = 1 by L38;
thus L101: thesis by L100 , L99 , L93 , L88;
end;
L102: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  being_a_product_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L103: R7 is  being_a_square;
L104: <* R7 *> is  being_a_Product_of_squares by L103 , L92;
L105: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L106: thesis by L105 , L104 , L90;
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_a_Sum_of_products_of_squares
means
:L107: (( len R9 ) <> ( 0 ) & ( R9 /. 1 ) is  being_a_product_of_squares & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))))));
end;
definition
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
attr R7 is  being_a_sum_of_products_of_squares
means
:L109: (ex R9 being (FinSequence of R6) st (R9 is  being_a_Sum_of_products_of_squares & R7 = ( R9 /. ( len R9 ) )));
end;
L111: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_a_Sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L112: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L113: R5 <> ( 0 )
and
L114: R5 < ( len <* R7 *> );
L115: R5 < 1 by L114 , L38;
thus L116: thesis by L115 , L113 , NAT_1:25;
end;
assume L117: R7 is  being_a_square;
L118: R7 is  being_a_product_of_squares by L117 , L102;
L119: ( <* R7 *> /. 1 ) is  being_a_product_of_squares by L118 , L38;
L120: ( len <* R7 *> ) = 1 by L38;
thus L121: thesis by L120 , L119 , L112 , L107;
end;
L122: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  being_a_sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L123: R7 is  being_a_square;
L124: <* R7 *> is  being_a_Sum_of_products_of_squares by L123 , L111;
L125: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L126: thesis by L125 , L124 , L109;
end;
L127: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies <* R7 *> is  being_a_Sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L128: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L129: R5 <> ( 0 )
and
L130: R5 < ( len <* R7 *> );
L131: R5 < 1 by L130 , L38;
thus L132: thesis by L131 , L129 , NAT_1:25;
end;
assume L133: R7 is  being_a_product_of_squares;
L134: ( <* R7 *> /. 1 ) is  being_a_product_of_squares by L133 , L38;
L135: ( len <* R7 *> ) = 1 by L38;
thus L136: thesis by L135 , L134 , L128 , L107;
end;
L137: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies R7 is  being_a_sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L138: R7 is  being_a_product_of_squares;
L139: <* R7 *> is  being_a_Sum_of_products_of_squares by L138 , L127;
L140: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L141: thesis by L140 , L139 , L109;
end;
L142: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (R9 is  being_a_Sum_of_squares implies R9 is  being_a_Sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume L143: R9 is  being_a_Sum_of_squares;
L144: ( R9 /. 1 ) is  being_a_square by L143 , L69;
L145: ( R9 /. 1 ) is  being_a_product_of_squares by L144 , L102;
L146: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume L147: (R5 <> ( 0 ) & R5 < ( len R9 ));
L148: (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))) by L147 , L143 , L69;
thus L149: thesis by L148 , L102;
end;
L150: ( len R9 ) <> ( 0 ) by L143 , L69;
thus L151: thesis by L150 , L145 , L146 , L107;
end;
L152: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_squares implies R7 is  being_a_sum_of_products_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L153: R7 is  being_a_sum_of_squares;
consider R9 being (FinSequence of R6) such that L154: R9 is  being_a_Sum_of_squares and L155: R7 = ( R9 /. ( len R9 ) ) by L153 , L71;
L156: R9 is  being_a_Sum_of_products_of_squares by L154 , L142;
thus L157: thesis by L156 , L155 , L109;
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_an_Amalgam_of_squares
means
:L158: (( len R9 ) <> ( 0 ) & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len R9 )) implies (( R9 /. R5 ) is  being_a_product_of_squares or (ex R1 being Nat st (ex R2 being Nat st (( R9 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5)))))));
end;
definition
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
attr R7 is  being_an_amalgam_of_squares
means
:L160: (ex R9 being (FinSequence of R6) st (R9 is  being_an_Amalgam_of_squares & R7 = ( R9 /. ( len R9 ) )));
end;
L162: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_an_Amalgam_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L163: R7 is  being_a_square;
L164: R7 is  being_a_product_of_squares by L163 , L102;
L165: ( <* R7 *> /. 1 ) is  being_a_product_of_squares by L164 , L38;
L166: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len <* R7 *> )) implies (( <* R7 *> /. R5 ) is  being_a_product_of_squares or (ex R1 being Nat st (ex R2 being Nat st (( <* R7 *> /. R5 ) = ( ( <* R7 *> /. R1 ) * ( <* R7 *> /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L167: R5 <> ( 0 )
and
L168: R5 <= ( len <* R7 *> );
L169: R5 <= 1 by L168 , L38;
thus L170: thesis by L169 , L165 , L167 , NAT_1:25;
end;
L171: ( len <* R7 *> ) = 1 by L38;
thus L172: thesis by L171 , L166 , L158;
end;
L173: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  being_an_amalgam_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L174: R7 is  being_a_square;
L175: <* R7 *> is  being_an_Amalgam_of_squares by L174 , L162;
L176: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L177: thesis by L176 , L175 , L160;
end;
L178: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies <* R7 *> is  being_an_Amalgam_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L179: R7 is  being_a_product_of_squares;
L180: ( <* R7 *> /. 1 ) is  being_a_product_of_squares by L179 , L38;
L181: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len <* R7 *> )) implies (( <* R7 *> /. R5 ) is  being_a_product_of_squares or (ex R1 being Nat st (ex R2 being Nat st (( <* R7 *> /. R5 ) = ( ( <* R7 *> /. R1 ) * ( <* R7 *> /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L182: R5 <> ( 0 )
and
L183: R5 <= ( len <* R7 *> );
L184: R5 <= 1 by L183 , L38;
thus L185: thesis by L184 , L180 , L182 , NAT_1:25;
end;
L186: ( len <* R7 *> ) = 1 by L38;
thus L187: thesis by L186 , L181 , L158;
end;
L188: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies R7 is  being_an_amalgam_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L189: R7 is  being_a_product_of_squares;
L190: <* R7 *> is  being_an_Amalgam_of_squares by L189 , L178;
L191: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L192: thesis by L191 , L190 , L160;
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_a_Sum_of_amalgams_of_squares
means
:L193: (( len R9 ) <> ( 0 ) & ( R9 /. 1 ) is  being_an_amalgam_of_squares & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))))));
end;
definition
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
attr R7 is  being_a_sum_of_amalgams_of_squares
means
:L195: (ex R9 being (FinSequence of R6) st (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )));
end;
L197: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_a_Sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L198: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L199: R5 <> ( 0 )
and
L200: R5 < ( len <* R7 *> );
L201: R5 < 1 by L200 , L38;
thus L202: thesis by L201 , L199 , NAT_1:25;
end;
assume L203: R7 is  being_a_square;
L204: R7 is  being_an_amalgam_of_squares by L203 , L173;
L205: ( <* R7 *> /. 1 ) is  being_an_amalgam_of_squares by L204 , L38;
L206: ( len <* R7 *> ) = 1 by L38;
thus L207: thesis by L206 , L205 , L198 , L193;
end;
L208: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  being_a_sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L209: R7 is  being_a_square;
L210: <* R7 *> is  being_a_Sum_of_amalgams_of_squares by L209 , L197;
L211: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L212: thesis by L211 , L210 , L195;
end;
L213: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (R9 is  being_a_Sum_of_squares implies R9 is  being_a_Sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume L214: R9 is  being_a_Sum_of_squares;
L215: ( R9 /. 1 ) is  being_a_square by L214 , L69;
L216: ( R9 /. 1 ) is  being_an_amalgam_of_squares by L215 , L173;
L217: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume L218: (R5 <> ( 0 ) & R5 < ( len R9 ));
L219: (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))) by L218 , L214 , L69;
thus L220: thesis by L219 , L173;
end;
L221: ( len R9 ) <> ( 0 ) by L214 , L69;
thus L222: thesis by L221 , L216 , L217 , L193;
end;
L223: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_squares implies R7 is  being_a_sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L224: R7 is  being_a_sum_of_squares;
consider R9 being (FinSequence of R6) such that L225: R9 is  being_a_Sum_of_squares and L226: R7 = ( R9 /. ( len R9 ) ) by L224 , L71;
L227: R9 is  being_a_Sum_of_amalgams_of_squares by L225 , L213;
thus L228: thesis by L227 , L226 , L195;
end;
L229: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies <* R7 *> is  being_a_Sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L230: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L231: R5 <> ( 0 )
and
L232: R5 < ( len <* R7 *> );
L233: R5 < 1 by L232 , L38;
thus L234: thesis by L233 , L231 , NAT_1:25;
end;
assume L235: R7 is  being_a_product_of_squares;
L236: R7 is  being_an_amalgam_of_squares by L235 , L188;
L237: ( <* R7 *> /. 1 ) is  being_an_amalgam_of_squares by L236 , L38;
L238: ( len <* R7 *> ) = 1 by L38;
thus L239: thesis by L238 , L237 , L230 , L193;
end;
L240: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies R7 is  being_a_sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L241: R7 is  being_a_product_of_squares;
L242: <* R7 *> is  being_a_Sum_of_amalgams_of_squares by L241 , L229;
L243: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L244: thesis by L243 , L242 , L195;
end;
L245: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (R9 is  being_a_Sum_of_products_of_squares implies R9 is  being_a_Sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume L246: R9 is  being_a_Sum_of_products_of_squares;
L247: ( R9 /. 1 ) is  being_a_product_of_squares by L246 , L107;
L248: ( R9 /. 1 ) is  being_an_amalgam_of_squares by L247 , L188;
L249: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len R9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume L250: (R5 <> ( 0 ) & R5 < ( len R9 ));
L251: (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( R9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R8 ))) by L250 , L246 , L107;
thus L252: thesis by L251 , L188;
end;
L253: ( len R9 ) <> ( 0 ) by L246 , L107;
thus L254: thesis by L253 , L248 , L249 , L193;
end;
L255: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_products_of_squares implies R7 is  being_a_sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L256: R7 is  being_a_sum_of_products_of_squares;
consider R9 being (FinSequence of R6) such that L257: R9 is  being_a_Sum_of_products_of_squares and L258: R7 = ( R9 /. ( len R9 ) ) by L256 , L109;
L259: R9 is  being_a_Sum_of_amalgams_of_squares by L257 , L245;
thus L260: thesis by L259 , L258 , L195;
end;
L261: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_an_amalgam_of_squares implies <* R7 *> is  being_a_Sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
L262: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len <* R7 *> )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( <* R7 *> /. ( R5 + 1 ) ) = ( ( <* R7 *> /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L263: R5 <> ( 0 )
and
L264: R5 < ( len <* R7 *> );
L265: R5 < 1 by L264 , L38;
thus L266: thesis by L265 , L263 , NAT_1:25;
end;
assume L267: R7 is  being_an_amalgam_of_squares;
L268: ( <* R7 *> /. 1 ) is  being_an_amalgam_of_squares by L267 , L38;
L269: ( len <* R7 *> ) = 1 by L38;
thus L270: thesis by L269 , L268 , L262 , L193;
end;
L271: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_an_amalgam_of_squares implies R7 is  being_a_sum_of_amalgams_of_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L272: R7 is  being_an_amalgam_of_squares;
L273: <* R7 *> is  being_a_Sum_of_amalgams_of_squares by L272 , L261;
L274: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L275: thesis by L274 , L273 , L195;
end;
definition
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
attr R9 is  being_a_generation_from_squares
means
:L276: (( len R9 ) <> ( 0 ) & (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len R9 )) implies (( R9 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( R9 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) or ( R9 /. R5 ) = ( ( R9 /. R1 ) + ( R9 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5)))))));
end;
definition
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
attr R7 is  generated_from_squares
means
:L278: (ex R9 being (FinSequence of R6) st (R9 is  being_a_generation_from_squares & R7 = ( R9 /. ( len R9 ) )));
end;
L280: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies <* R7 *> is  being_a_generation_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L281: R7 is  being_a_square;
L282: R7 is  being_an_amalgam_of_squares by L281 , L173;
L283: ( <* R7 *> /. 1 ) is  being_an_amalgam_of_squares by L282 , L38;
L284: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len <* R7 *> )) implies (( <* R7 *> /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( <* R7 *> /. R5 ) = ( ( <* R7 *> /. R1 ) * ( <* R7 *> /. R2 ) ) or ( <* R7 *> /. R5 ) = ( ( <* R7 *> /. R1 ) + ( <* R7 *> /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L285: R5 <> ( 0 )
and
L286: R5 <= ( len <* R7 *> );
L287: R5 <= 1 by L286 , L38;
thus L288: thesis by L287 , L283 , L285 , NAT_1:25;
end;
L289: ( len <* R7 *> ) = 1 by L38;
thus L290: thesis by L289 , L284 , L276;
end;
L291: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L292: R7 is  being_a_square;
L293: <* R7 *> is  being_a_generation_from_squares by L292 , L280;
L294: (( len <* R7 *> ) = 1 & ( <* R7 *> /. 1 ) = R7) by L38;
thus L295: thesis by L294 , L293 , L278;
end;
L296: (for R1 being Nat holds (for R2 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R1 <> ( 0 ) & R1 <= ( len R9 ) & R2 <> ( 0 ) & R2 <= ( len R9 )) implies ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) is  being_a_generation_from_squares)))))
proof
let R1 being Nat;
let R2 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L297: R9 is  being_a_generation_from_squares
and
L298: R1 <> ( 0 )
and
L299: R1 <= ( len R9 )
and
L300: R2 <> ( 0 )
and
L301: R2 <= ( len R9 );
set D1 = ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> );
L302: ( len D1 ) = ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L303: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D1 )) implies (( D1 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D1 /. R5 ) = ( ( D1 /. R1 ) * ( D1 /. R2 ) ) or ( D1 /. R5 ) = ( ( D1 /. R1 ) + ( D1 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L304: R5 <> ( 0 )
and
L305: R5 <= ( len D1 );
L306:
now
assume L307: R5 < ( len D1 );
L308: R5 <= ( len R9 ) by L307 , L302 , NAT_1:13;
L309: ( D1 /. R5 ) = ( R9 /. R5 ) by L308 , L304 , L51;
L310:
now
given R3 being Nat , R4 being Nat such that
L311: (( R9 /. R5 ) = ( ( R9 /. R3 ) * ( R9 /. R4 ) ) or ( R9 /. R5 ) = ( ( R9 /. R3 ) + ( R9 /. R4 ) ))
and
L312: (R3 <> ( 0 ) & R3 < R5 & R4 <> ( 0 ) & R4 < R5);

L313: (( R9 /. R3 ) = ( D1 /. R3 ) & ( R9 /. R4 ) = ( D1 /. R4 )) by L308 , L312 , L51 , XXREAL_0:2;
thus L314: thesis by L313 , L309 , L311 , L312;
end;
L315: (( R9 /. R5 ) is  being_an_amalgam_of_squares implies thesis) by L304 , L308 , L51;
thus L316: thesis by L315 , L297 , L304 , L308 , L310 , L276;
end;
L317:
now
assume L318: R5 = ( len D1 );
L319: (R1 < R5 & R2 < R5) by L318 , L299 , L301 , L302 , NAT_1:13;
L320: ( D1 /. R5 ) = ( ( R9 /. R1 ) + ( R9 /. R2 ) ) by L302 , L318 , L45
.= ( ( D1 /. R1 ) + ( R9 /. R2 ) ) by L298 , L299 , L51
.= ( ( D1 /. R1 ) + ( D1 /. R2 ) ) by L300 , L301 , L51;
thus L321: thesis by L320 , L298 , L300 , L319;
end;
thus L322: thesis by L317 , L305 , L306 , XXREAL_0:1;
end;
L323: ( len R9 ) <> ( 0 ) by L297 , L276;
L324: ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L323 , NAT_1:7;
L325: ( len ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L324 , FINSEQ_1:22;
thus L326: thesis by L325 , L303 , L276;
end;
L327: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R10 is  being_a_generation_from_squares) implies ( R9 ^ R10 ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L328: R9 is  being_a_generation_from_squares
and
L329: R10 is  being_a_generation_from_squares;
L330: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len ( R9 ^ R10 ) )) implies (( ( R9 ^ R10 ) /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( ( R9 ^ R10 ) /. R5 ) = ( ( ( R9 ^ R10 ) /. R1 ) * ( ( R9 ^ R10 ) /. R2 ) ) or ( ( R9 ^ R10 ) /. R5 ) = ( ( ( R9 ^ R10 ) /. R1 ) + ( ( R9 ^ R10 ) /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L331: R5 <> ( 0 )
and
L332: R5 <= ( len ( R9 ^ R10 ) );
L333: R5 <= ( ( len R9 ) + ( len R10 ) ) by L332 , FINSEQ_1:22;
L334:
now
assume L335: ( len R9 ) < R5;
consider C11 being Nat such that L336: R5 = ( ( len R9 ) + C11 ) by L335 , NAT_1:10;
L337: ( ( len R9 ) + C11 ) <= ( ( len R9 ) + ( len R10 ) ) by L332 , L336 , FINSEQ_1:22;
L338: C11 <= ( len R10 ) by L337 , XREAL_1:6;
L339: C11 <> ( 0 ) by L335 , L336;
L340: C11 <= ( len R10 ) by L333 , L336 , XREAL_1:6;
L341:
now
given C12 , C13 being Nat such that
L342: (( R10 /. C11 ) = ( ( R10 /. C12 ) * ( R10 /. C13 ) ) or ( R10 /. C11 ) = ( ( R10 /. C12 ) + ( R10 /. C13 ) ))
and
L343: C12 <> ( 0 )
and
L344: C12 < C11
and
L345: C13 <> ( 0 )
and
L346: C13 < C11;

L347: (( ( len R9 ) + C12 ) <> ( 0 ) & ( ( len R9 ) + C13 ) <> ( 0 )) by L343 , L345 , NAT_1:7;
L348: (( ( R9 ^ R10 ) /. R5 ) = ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) * ( ( R9 ^ R10 ) /. ( ( len R9 ) + C13 ) ) ) or ( ( R9 ^ R10 ) /. R5 ) = ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) + ( ( R9 ^ R10 ) /. ( ( len R9 ) + C13 ) ) ))
proof
L349:
now
assume L350: ( R10 /. C11 ) = ( ( R10 /. C12 ) + ( R10 /. C13 ) );
L351: ( ( R9 ^ R10 ) /. R5 ) = ( ( R10 /. C12 ) + ( R10 /. C13 ) ) by L350 , L336 , L339 , L338 , L59
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) + ( R10 /. C13 ) ) by L340 , L343 , L344 , L59 , XXREAL_0:2
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) + ( ( R9 ^ R10 ) /. ( ( len R9 ) + C13 ) ) ) by L340 , L345 , L346 , L59 , XXREAL_0:2;
thus L352: thesis by L351;
end;
L353:
now
assume L354: ( R10 /. C11 ) = ( ( R10 /. C12 ) * ( R10 /. C13 ) );
L355: ( ( R9 ^ R10 ) /. R5 ) = ( ( R10 /. C12 ) * ( R10 /. C13 ) ) by L354 , L336 , L339 , L338 , L59
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) * ( R10 /. C13 ) ) by L340 , L343 , L344 , L59 , XXREAL_0:2
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C12 ) ) * ( ( R9 ^ R10 ) /. ( ( len R9 ) + C13 ) ) ) by L340 , L345 , L346 , L59 , XXREAL_0:2;
thus L356: thesis by L355;
end;
thus L357: thesis by L353 , L342 , L349;
end;
L358: (( ( len R9 ) + C12 ) < R5 & ( ( len R9 ) + C13 ) < R5) by L336 , L344 , L346 , XREAL_1:6;
thus L359: thesis by L358 , L348 , L347;
end;
L360: (( R10 /. C11 ) is  being_an_amalgam_of_squares implies thesis) by L336 , L339 , L338 , L59;
thus L361: thesis by L360 , L329 , L339 , L338 , L341 , L276;
end;
L362:
now
assume L363: R5 <= ( len R9 );
L364: ( ( R9 ^ R10 ) /. R5 ) = ( R9 /. R5 ) by L363 , L331 , L51;
L365:
now
given C14 , C15 being Nat such that
L366: (( R9 /. R5 ) = ( ( R9 /. C14 ) * ( R9 /. C15 ) ) or ( R9 /. R5 ) = ( ( R9 /. C14 ) + ( R9 /. C15 ) ))
and
L367: (C14 <> ( 0 ) & C14 < R5 & C15 <> ( 0 ) & C15 < R5);

L368: (( ( R9 ^ R10 ) /. C14 ) = ( R9 /. C14 ) & ( ( R9 ^ R10 ) /. C15 ) = ( R9 /. C15 )) by L363 , L367 , L51 , XXREAL_0:2;
thus L369: thesis by L368 , L364 , L366 , L367;
end;
L370: (( R9 /. R5 ) is  being_an_amalgam_of_squares implies thesis) by L331 , L363 , L51;
thus L371: thesis by L370 , L328 , L331 , L363 , L365 , L276;
end;
thus L372: thesis by L362 , L334;
end;
L373: ( len R9 ) <> ( 0 ) by L328 , L276;
L374: ( ( len R9 ) + ( len R10 ) ) <> ( 0 ) by L373 , NAT_1:7;
L375: ( len ( R9 ^ R10 ) ) <> ( 0 ) by L374 , FINSEQ_1:22;
thus L376: thesis by L375 , L330 , L276;
end;
L377: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R7 is  being_a_square) implies ( R9 ^ <* R7 *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L378: R9 is  being_a_generation_from_squares
and
L379: R7 is  being_a_square;
L380: <* R7 *> is  being_a_generation_from_squares by L379 , L280;
thus L381: thesis by L380 , L378 , L327;
end;
L382: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R7 is  being_a_square) implies ( ( R9 ^ <* R7 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L383: R9 is  being_a_generation_from_squares
and
L384: R7 is  being_a_square;
L385: ( R9 ^ <* R7 *> ) is  being_a_generation_from_squares by L383 , L384 , L377;
L386: ( len <* R7 *> ) = 1 by L38;
L387: ( ( len R9 ) + 1 ) = ( len ( R9 ^ <* R7 *> ) ) by L386 , FINSEQ_1:22;
L388: (( len R9 ) <= ( ( len R9 ) + 1 ) & ( ( len R9 ) + 1 ) <> ( 0 )) by NAT_1:5 , NAT_1:11;
L389: ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = R7 by L45;
L390: ( len R9 ) <> ( 0 ) by L383 , L276;
L391: ( ( R9 ^ <* R7 *> ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) ) by L390 , L51;
thus L392: thesis by L391 , L385 , L390 , L388 , L387 , L389 , L296;
end;
L393: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L394: R7 is  generated_from_squares
and
L395: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L396: (R9 is  being_a_generation_from_squares & R7 = ( R9 /. ( len R9 ) )) by L394 , L278;
take D2 = ( ( R9 ^ <* R8 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R8 ) *> );
L397: ( len D2 ) = ( ( len ( R9 ^ <* R8 *> ) ) + ( len <* ( ( R9 /. ( len R9 ) ) + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ <* R8 *> ) ) + 1 ) by L38;
thus L398: thesis by L397 , L395 , L396 , L45 , L382;
end;
L399: (for R1 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Sum_of_squares & ( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares))))
proof
let R1 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L400: R9 is  being_a_Sum_of_squares
and
L401: (( 0 ) <> R1 & R1 <= ( len R9 ));
defpred S1[ Nat ] means ((( 0 ) <> $1 & $1 <= ( len R9 )) implies ( R9 /. $1 ) is  generated_from_squares);
L402: (for R1 being Nat holds (S1[ R1 ] implies S1[ ( R1 + 1 ) ]))
proof
let R1 being Nat;
assume that
L403: ((( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares);
assume that
L404: ( 0 ) <> ( R1 + 1 )
and
L405: ( R1 + 1 ) <= ( len R9 );
L406: R1 < ( len R9 ) by L405 , NAT_1:13;
L407:
now
assume L408: R1 <> ( 0 );
L409: (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R1 + 1 ) ) = ( ( R9 /. R1 ) + R8 ))) by L408 , L400 , L406 , L69;
thus L410: thesis by L409 , L403 , L405 , L408 , L393 , NAT_1:13;
end;
L411:
now
assume L412: R1 = ( 0 );
L413: ( R9 /. ( R1 + 1 ) ) is  being_a_square by L412 , L400 , L69;
thus L414: thesis by L413 , L291;
end;
thus L415: thesis by L411 , L407;
end;
L416: S1[ ( 0 ) ];
L417: (for R1 being Nat holds S1[ R1 ]) from NAT_1:sch 2(L416 , L402);
thus L418: thesis by L417 , L401;
end;
L419: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_squares implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L420: R7 is  being_a_sum_of_squares;
consider R9 being (FinSequence of R6) such that L421: R9 is  being_a_Sum_of_squares and L422: R7 = ( R9 /. ( len R9 ) ) by L420 , L71;
L423: ( 0 ) <> ( len R9 ) by L421 , L69;
thus L424: thesis by L423 , L421 , L422 , L399;
end;
L425: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (R9 is  being_an_Amalgam_of_squares implies R9 is  being_a_generation_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume L426: R9 is  being_an_Amalgam_of_squares;
thus L427: ( len R9 ) <> ( 0 ) by L426 , L158;
let R5 being Nat;
assume that
L428: (R5 <> ( 0 ) & R5 <= ( len R9 ));
L429: ((ex R1 being Nat st (ex R2 being Nat st (( R9 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))) implies thesis);
L430: (( R9 /. R5 ) is  being_a_product_of_squares implies thesis) by L188;
thus L431: thesis by L430 , L426 , L428 , L429 , L158;
end;
L432: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_an_amalgam_of_squares implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L433: R7 is  being_an_amalgam_of_squares;
consider R9 being (FinSequence of R6) such that L434: R9 is  being_an_Amalgam_of_squares and L435: R7 = ( R9 /. ( len R9 ) ) by L433 , L160;
L436: R9 is  being_a_generation_from_squares by L434 , L425;
thus L437: thesis by L436 , L435 , L278;
end;
L438: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_an_amalgam_of_squares implies <* R7 *> is  being_a_generation_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
set D3 = <* R7 *>;
assume L439: R7 is  being_an_amalgam_of_squares;
L440: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D3 )) implies (( D3 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D3 /. R5 ) = ( ( D3 /. R1 ) * ( D3 /. R2 ) ) or ( D3 /. R5 ) = ( ( D3 /. R1 ) + ( D3 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L441: R5 <> ( 0 )
and
L442: R5 <= ( len D3 );
L443: R5 <= 1 by L442 , L38;
L444: R5 < ( 1 + 1 ) by L443 , NAT_1:13;
L445: R5 = 1 by L444 , L441 , NAT_1:23;
thus L446: thesis by L445 , L439 , L38;
end;
L447: ( len D3 ) = 1 by L38;
thus L448: thesis by L447 , L440 , L276;
end;
L449: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R7 is  being_an_amalgam_of_squares) implies ( ( R9 ^ <* R7 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L450: R9 is  being_a_generation_from_squares
and
L451: R7 is  being_an_amalgam_of_squares;
L452: <* R7 *> is  being_a_generation_from_squares by L451 , L438;
L453: ( R9 ^ <* R7 *> ) is  being_a_generation_from_squares by L452 , L450 , L327;
L454: ( len <* R7 *> ) = 1 by L38;
L455: ( ( len R9 ) + 1 ) = ( len ( R9 ^ <* R7 *> ) ) by L454 , FINSEQ_1:22;
L456: (( len R9 ) <= ( ( len R9 ) + 1 ) & ( ( len R9 ) + 1 ) <> ( 0 )) by NAT_1:5 , NAT_1:11;
L457: ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = R7 by L45;
L458: ( len R9 ) <> ( 0 ) by L450 , L276;
L459: ( ( R9 ^ <* R7 *> ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) ) by L458 , L51;
thus L460: thesis by L459 , L453 , L458 , L456 , L455 , L457 , L296;
end;
L461: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L462: R7 is  generated_from_squares
and
L463: R8 is  being_an_amalgam_of_squares;
consider R9 being (FinSequence of R6) such that L464: (R9 is  being_a_generation_from_squares & R7 = ( R9 /. ( len R9 ) )) by L462 , L278;
take D4 = ( ( R9 ^ <* R8 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R8 ) *> );
L465: ( len D4 ) = ( ( len ( R9 ^ <* R8 *> ) ) + ( len <* ( ( R9 /. ( len R9 ) ) + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ <* R8 *> ) ) + 1 ) by L38;
thus L466: thesis by L465 , L463 , L464 , L45 , L449;
end;
L467: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (R9 is  being_a_Sum_of_amalgams_of_squares implies (for R1 being Nat holds ((R1 <> ( 0 ) & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares)))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
defpred S2[ Nat ] means (($1 <> ( 0 ) & $1 <= ( len R9 )) implies ( R9 /. $1 ) is  generated_from_squares);
assume L468: R9 is  being_a_Sum_of_amalgams_of_squares;
L469: (for R1 being Nat holds (S2[ R1 ] implies S2[ ( R1 + 1 ) ]))
proof
let R1 being Nat;
assume that
L470: ((R1 <> ( 0 ) & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares);
assume that
L471: ( R1 + 1 ) <> ( 0 )
and
L472: ( R1 + 1 ) <= ( len R9 );
L473:
now
assume L474: R1 <> ( 0 );
L475: R1 < ( len R9 ) by L472 , NAT_1:13;
L476: (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( R9 /. ( R1 + 1 ) ) = ( ( R9 /. R1 ) + R8 ))) by L475 , L468 , L474 , L193;
thus L477: thesis by L476 , L470 , L472 , L474 , L461 , NAT_1:13;
end;
L478:
now
assume L479: R1 = ( 0 );
L480: ( R9 /. ( R1 + 1 ) ) is  being_an_amalgam_of_squares by L479 , L468 , L193;
thus L481: thesis by L480 , L432;
end;
thus L482: thesis by L478 , L473;
end;
L483: S2[ ( 0 ) ];
thus L484: (for R1 being Nat holds S2[ R1 ]) from NAT_1:sch 2(L483 , L469);
end;
theorem
L485: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_amalgams_of_squares implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L486: R7 is  being_a_sum_of_amalgams_of_squares;
consider R9 being (FinSequence of R6) such that L487: R9 is  being_a_Sum_of_amalgams_of_squares and L488: R7 = ( R9 /. ( len R9 ) ) by L486 , L195;
L489: ( len R9 ) <> ( 0 ) by L487 , L193;
thus L490: thesis by L489 , L487 , L488 , L467;
end;
L491: (for R1 being Nat holds (for R2 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R1 <> ( 0 ) & R1 <= ( len R9 ) & R2 <> ( 0 ) & R2 <= ( len R9 )) implies ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) is  being_a_generation_from_squares)))))
proof
let R1 being Nat;
let R2 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L492: R9 is  being_a_generation_from_squares
and
L493: R1 <> ( 0 )
and
L494: R1 <= ( len R9 )
and
L495: R2 <> ( 0 )
and
L496: R2 <= ( len R9 );
set D5 = ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> );
L497: ( len D5 ) = ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L498: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D5 )) implies (( D5 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D5 /. R5 ) = ( ( D5 /. R1 ) * ( D5 /. R2 ) ) or ( D5 /. R5 ) = ( ( D5 /. R1 ) + ( D5 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L499: R5 <> ( 0 )
and
L500: R5 <= ( len D5 );
L501:
now
assume L502: R5 < ( len D5 );
L503: R5 <= ( len R9 ) by L502 , L497 , NAT_1:13;
L504: ( D5 /. R5 ) = ( R9 /. R5 ) by L503 , L499 , L51;
L505:
now
given R3 being Nat , R4 being Nat such that
L506: (( R9 /. R5 ) = ( ( R9 /. R3 ) * ( R9 /. R4 ) ) or ( R9 /. R5 ) = ( ( R9 /. R3 ) + ( R9 /. R4 ) ))
and
L507: (R3 <> ( 0 ) & R3 < R5 & R4 <> ( 0 ) & R4 < R5);

L508: (( R9 /. R3 ) = ( D5 /. R3 ) & ( R9 /. R4 ) = ( D5 /. R4 )) by L503 , L507 , L51 , XXREAL_0:2;
thus L509: thesis by L508 , L504 , L506 , L507;
end;
L510: (( R9 /. R5 ) is  being_an_amalgam_of_squares implies thesis) by L499 , L503 , L51;
thus L511: thesis by L510 , L492 , L499 , L503 , L505 , L276;
end;
L512:
now
assume L513: R5 = ( len D5 );
L514: (R1 < R5 & R2 < R5) by L513 , L494 , L496 , L497 , NAT_1:13;
L515: ( D5 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) by L497 , L513 , L45
.= ( ( D5 /. R1 ) * ( R9 /. R2 ) ) by L493 , L494 , L51
.= ( ( D5 /. R1 ) * ( D5 /. R2 ) ) by L495 , L496 , L51;
thus L516: thesis by L515 , L493 , L495 , L514;
end;
thus L517: thesis by L512 , L500 , L501 , XXREAL_0:1;
end;
L518: ( len R9 ) <> ( 0 ) by L492 , L276;
L519: ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L518 , NAT_1:7;
L520: ( len ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L519 , FINSEQ_1:22;
thus L521: thesis by L520 , L498 , L276;
end;
L522: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R7 is  being_a_square) implies ( ( R9 ^ <* R7 *> ) ^ <* ( ( R9 /. ( len R9 ) ) * R7 ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L523: R9 is  being_a_generation_from_squares
and
L524: R7 is  being_a_square;
L525: ( R9 ^ <* R7 *> ) is  being_a_generation_from_squares by L523 , L524 , L377;
L526: ( len <* R7 *> ) = 1 by L38;
L527: ( ( len R9 ) + 1 ) = ( len ( R9 ^ <* R7 *> ) ) by L526 , FINSEQ_1:22;
L528: (( len R9 ) <= ( ( len R9 ) + 1 ) & ( ( len R9 ) + 1 ) <> ( 0 )) by NAT_1:5 , NAT_1:11;
L529: ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = R7 by L45;
L530: ( len R9 ) <> ( 0 ) by L523 , L276;
L531: ( ( R9 ^ <* R7 *> ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) ) by L530 , L51;
thus L532: thesis by L531 , L525 , L530 , L528 , L527 , L529 , L491;
end;
L533: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L534: R7 is  generated_from_squares
and
L535: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L536: (R9 is  being_a_generation_from_squares & R7 = ( R9 /. ( len R9 ) )) by L534 , L278;
take D6 = ( ( R9 ^ <* R8 *> ) ^ <* ( ( R9 /. ( len R9 ) ) * R8 ) *> );
L537: ( len D6 ) = ( ( len ( R9 ^ <* R8 *> ) ) + ( len <* ( ( R9 /. ( len R9 ) ) * R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ <* R8 *> ) ) + 1 ) by L38;
thus L538: thesis by L537 , L535 , L536 , L45 , L522;
end;
L539: (for R1 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Product_of_squares & ( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares))))
proof
let R1 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L540: R9 is  being_a_Product_of_squares
and
L541: (( 0 ) <> R1 & R1 <= ( len R9 ));
defpred S3[ Nat ] means ((( 0 ) <> $1 & $1 <= ( len R9 )) implies ( R9 /. $1 ) is  generated_from_squares);
L542: (for R1 being Nat holds (S3[ R1 ] implies S3[ ( R1 + 1 ) ]))
proof
let R1 being Nat;
assume that
L543: ((( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares);
assume that
L544: ( 0 ) <> ( R1 + 1 )
and
L545: ( R1 + 1 ) <= ( len R9 );
L546: R1 < ( len R9 ) by L545 , NAT_1:13;
L547:
now
assume L548: R1 <> ( 0 );
L549: (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( R9 /. ( R1 + 1 ) ) = ( ( R9 /. R1 ) * R8 ))) by L548 , L540 , L546 , L88;
thus L550: thesis by L549 , L543 , L545 , L548 , L533 , NAT_1:13;
end;
L551:
now
assume L552: R1 = ( 0 );
L553: ( R9 /. ( R1 + 1 ) ) is  being_a_square by L552 , L540 , L88;
thus L554: thesis by L553 , L291;
end;
thus L555: thesis by L551 , L547;
end;
L556: S3[ ( 0 ) ];
L557: (for R1 being Nat holds S3[ R1 ]) from NAT_1:sch 2(L556 , L542);
thus L558: thesis by L557 , L541;
end;
L559: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L560: R7 is  being_a_product_of_squares;
consider R9 being (FinSequence of R6) such that L561: R9 is  being_a_Product_of_squares and L562: R7 = ( R9 /. ( len R9 ) ) by L560 , L90;
L563: ( 0 ) <> ( len R9 ) by L561 , L88;
thus L564: thesis by L563 , L561 , L562 , L539;
end;
L565: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies <* R7 *> is  being_a_generation_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
set D7 = <* R7 *>;
L566: ( len D7 ) = 1 by L38;
assume L567: R7 is  being_a_product_of_squares;
L568: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D7 )) implies (( D7 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D7 /. R5 ) = ( ( D7 /. R1 ) * ( D7 /. R2 ) ) or ( D7 /. R5 ) = ( ( D7 /. R1 ) + ( D7 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L569: R5 <> ( 0 )
and
L570: R5 <= ( len D7 );
L571: R5 < ( 1 + 1 ) by L566 , L570 , NAT_1:13;
L572: R5 = 1 by L571 , L569 , NAT_1:23;
L573: ( D7 /. R5 ) = R7 by L572 , L38;
thus L574: thesis by L573 , L567 , L188;
end;
thus L575: thesis by L568 , L566 , L276;
end;
L576: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R7 is  being_a_product_of_squares) implies ( ( R9 ^ <* R7 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L577: R9 is  being_a_generation_from_squares
and
L578: R7 is  being_a_product_of_squares;
L579: <* R7 *> is  being_a_generation_from_squares by L578 , L565;
L580: ( R9 ^ <* R7 *> ) is  being_a_generation_from_squares by L579 , L577 , L327;
L581: ( len <* R7 *> ) = 1 by L38;
L582: ( ( len R9 ) + 1 ) = ( len ( R9 ^ <* R7 *> ) ) by L581 , FINSEQ_1:22;
L583: (( len R9 ) <= ( ( len R9 ) + 1 ) & ( ( len R9 ) + 1 ) <> ( 0 )) by NAT_1:5 , NAT_1:11;
L584: ( ( R9 ^ <* R7 *> ) /. ( ( len R9 ) + 1 ) ) = R7 by L45;
L585: ( len R9 ) <> ( 0 ) by L577 , L276;
L586: ( ( R9 ^ <* R7 *> ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) ) by L585 , L51;
thus L587: thesis by L586 , L580 , L585 , L583 , L582 , L584 , L296;
end;
L588: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L589: R7 is  generated_from_squares
and
L590: R8 is  being_a_product_of_squares;
consider R9 being (FinSequence of R6) such that L591: (R9 is  being_a_generation_from_squares & R7 = ( R9 /. ( len R9 ) )) by L589 , L278;
take D8 = ( ( R9 ^ <* R8 *> ) ^ <* ( ( R9 /. ( len R9 ) ) + R8 ) *> );
L592: ( len D8 ) = ( ( len ( R9 ^ <* R8 *> ) ) + ( len <* ( ( R9 /. ( len R9 ) ) + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ <* R8 *> ) ) + 1 ) by L38;
thus L593: thesis by L592 , L590 , L591 , L45 , L576;
end;
L594: (for R1 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Sum_of_products_of_squares & ( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares))))
proof
let R1 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L595: R9 is  being_a_Sum_of_products_of_squares
and
L596: (( 0 ) <> R1 & R1 <= ( len R9 ));
defpred S4[ Nat ] means ((( 0 ) <> $1 & $1 <= ( len R9 )) implies ( R9 /. $1 ) is  generated_from_squares);
L597: (for R1 being Nat holds (S4[ R1 ] implies S4[ ( R1 + 1 ) ]))
proof
let R1 being Nat;
assume that
L598: ((( 0 ) <> R1 & R1 <= ( len R9 )) implies ( R9 /. R1 ) is  generated_from_squares);
assume that
L599: ( 0 ) <> ( R1 + 1 )
and
L600: ( R1 + 1 ) <= ( len R9 );
L601: R1 < ( len R9 ) by L600 , NAT_1:13;
L602:
now
assume L603: R1 <> ( 0 );
L604: (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( R9 /. ( R1 + 1 ) ) = ( ( R9 /. R1 ) + R8 ))) by L603 , L595 , L601 , L107;
thus L605: thesis by L604 , L598 , L600 , L603 , L588 , NAT_1:13;
end;
L606:
now
assume L607: R1 = ( 0 );
L608: ( R9 /. ( R1 + 1 ) ) is  being_a_product_of_squares by L607 , L595 , L107;
thus L609: thesis by L608 , L559;
end;
thus L610: thesis by L606 , L602;
end;
L611: S4[ ( 0 ) ];
L612: (for R1 being Nat holds S4[ R1 ]) from NAT_1:sch 2(L611 , L597);
thus L613: thesis by L612 , L596;
end;
L614: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_products_of_squares implies R7 is  generated_from_squares)))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
assume L615: R7 is  being_a_sum_of_products_of_squares;
consider R9 being (FinSequence of R6) such that L616: R9 is  being_a_Sum_of_products_of_squares and L617: R7 = ( R9 /. ( len R9 ) ) by L615 , L109;
L618: ( 0 ) <> ( len R9 ) by L616 , L107;
thus L619: thesis by L618 , L616 , L617 , L594;
end;
theorem
L620: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_square implies (R7 is  being_a_sum_of_squares & R7 is  being_a_product_of_squares & R7 is  being_a_sum_of_products_of_squares & R7 is  being_an_amalgam_of_squares & R7 is  being_a_sum_of_amalgams_of_squares & R7 is  generated_from_squares)))) by L83 , L102 , L122 , L173 , L208 , L291;
theorem
L621: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_squares implies (R7 is  being_a_sum_of_products_of_squares & R7 is  being_a_sum_of_amalgams_of_squares & R7 is  generated_from_squares)))) by L152 , L223 , L419;
theorem
L622: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_product_of_squares implies (R7 is  being_a_sum_of_products_of_squares & R7 is  being_an_amalgam_of_squares & R7 is  being_a_sum_of_amalgams_of_squares & R7 is  generated_from_squares)))) by L137 , L188 , L240 , L559;
theorem
L623: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_a_sum_of_products_of_squares implies (R7 is  being_a_sum_of_amalgams_of_squares & R7 is  generated_from_squares)))) by L255 , L614;
theorem
L624: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (R7 is  being_an_amalgam_of_squares implies (R7 is  being_a_sum_of_amalgams_of_squares & R7 is  generated_from_squares)))) by L271 , L432;
begin
L625: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Sum_of_squares & R7 is  being_a_square) implies ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_Sum_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L626: R9 is  being_a_Sum_of_squares
and
L627: R7 is  being_a_square;
set D9 = ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> );
L628: ( len D9 ) = ( ( len R9 ) + ( len <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L629: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D9 )) implies ( R9 /. R5 ) = ( D9 /. R5 )))
proof
let R5 being Nat;
assume L630: (R5 <> ( 0 ) & R5 < ( len D9 ));
L631: (1 <= R5 & R5 <= ( len R9 )) by L630 , L628 , NAT_1:13 , NAT_1:25;
L632: R5 in ( dom R9 ) by L631 , FINSEQ_3:25;
thus L633: thesis by L632 , L1;
end;
L634: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D9 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( D9 /. ( R5 + 1 ) ) = ( ( D9 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L635: R5 <> ( 0 )
and
L636: R5 < ( len D9 );
L637:
now
L638: ( R9 /. R5 ) = ( D9 /. R5 ) by L629 , L635 , L636;
assume L639: R5 < ( len R9 );
L640: (( R5 + 1 ) <> ( 0 ) & ( R5 + 1 ) < ( len D9 )) by L639 , L628 , NAT_1:5 , XREAL_1:6;
L641: ( R9 /. ( R5 + 1 ) ) = ( D9 /. ( R5 + 1 ) ) by L640 , L629;
thus L642: thesis by L641 , L626 , L635 , L639 , L638 , L69;
end;
L643:
now
assume L644: R5 = ( len R9 );
L645: 1 <= R5 by L635 , NAT_1:25;
L646: R5 in ( dom R9 ) by L645 , L644 , FINSEQ_3:25;
L647: ( D9 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R7 ) by L644 , L45;
L648: ( D9 /. ( R5 + 1 ) ) = ( ( D9 /. R5 ) + R7 ) by L647 , L646 , L1;
thus L649: thesis by L648 , L627;
end;
L650: R5 <= ( len R9 ) by L628 , L636 , NAT_1:13;
thus L651: thesis by L650 , L637 , L643 , XXREAL_0:1;
end;
L652: ( len R9 ) <> ( 0 ) by L626 , L69;
L653: 1 <= ( len R9 ) by L652 , NAT_1:25;
L654: 1 < ( len D9 ) by L653 , L628 , NAT_1:13;
L655: ( D9 /. 1 ) = ( R9 /. 1 ) by L654 , L629;
L656: ( D9 /. 1 ) is  being_a_square by L655 , L626 , L69;
L657: ( len D9 ) <> ( 0 ) by L628 , NAT_1:5;
thus L658: thesis by L657 , L656 , L634 , L69;
end;
L659: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  being_a_sum_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L660: R7 is  being_a_sum_of_squares
and
L661: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L662: (R9 is  being_a_Sum_of_squares & R7 = ( R9 /. ( len R9 ) )) by L660 , L71;
take D10 = ( R9 ^ <* ( R7 + R8 ) *> );
L663: ( len D10 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L664: thesis by L663 , L661 , L662 , L45 , L625;
end;
L665: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Sum_of_products_of_squares & R7 is  being_a_product_of_squares) implies ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_Sum_of_products_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L666: R9 is  being_a_Sum_of_products_of_squares
and
L667: R7 is  being_a_product_of_squares;
set D11 = ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> );
L668: ( len D11 ) = ( ( len R9 ) + ( len <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L669: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D11 )) implies ( R9 /. R5 ) = ( D11 /. R5 )))
proof
let R5 being Nat;
assume L670: (R5 <> ( 0 ) & R5 < ( len D11 ));
L671: (1 <= R5 & R5 <= ( len R9 )) by L670 , L668 , NAT_1:13 , NAT_1:25;
L672: R5 in ( dom R9 ) by L671 , FINSEQ_3:25;
thus L673: thesis by L672 , L1;
end;
L674: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D11 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_product_of_squares & ( D11 /. ( R5 + 1 ) ) = ( ( D11 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L675: R5 <> ( 0 )
and
L676: R5 < ( len D11 );
L677:
now
L678: ( R9 /. R5 ) = ( D11 /. R5 ) by L669 , L675 , L676;
assume L679: R5 < ( len R9 );
L680: (( R5 + 1 ) <> ( 0 ) & ( R5 + 1 ) < ( len D11 )) by L679 , L668 , NAT_1:5 , XREAL_1:6;
L681: ( R9 /. ( R5 + 1 ) ) = ( D11 /. ( R5 + 1 ) ) by L680 , L669;
thus L682: thesis by L681 , L666 , L675 , L679 , L678 , L107;
end;
L683:
now
assume L684: R5 = ( len R9 );
L685: 1 <= R5 by L675 , NAT_1:25;
L686: R5 in ( dom R9 ) by L685 , L684 , FINSEQ_3:25;
L687: ( D11 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R7 ) by L684 , L45;
L688: ( D11 /. ( R5 + 1 ) ) = ( ( D11 /. R5 ) + R7 ) by L687 , L686 , L1;
thus L689: thesis by L688 , L667;
end;
L690: R5 <= ( len R9 ) by L668 , L676 , NAT_1:13;
thus L691: thesis by L690 , L677 , L683 , XXREAL_0:1;
end;
L692: ( len R9 ) <> ( 0 ) by L666 , L107;
L693: 1 <= ( len R9 ) by L692 , NAT_1:25;
L694: 1 < ( len D11 ) by L693 , L668 , NAT_1:13;
L695: ( D11 /. 1 ) = ( R9 /. 1 ) by L694 , L669;
L696: ( D11 /. 1 ) is  being_a_product_of_squares by L695 , L666 , L107;
L697: ( len D11 ) <> ( 0 ) by L668 , NAT_1:5;
thus L698: thesis by L697 , L696 , L674 , L107;
end;
L699: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  being_a_sum_of_products_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L700: R7 is  being_a_sum_of_products_of_squares
and
L701: R8 is  being_a_product_of_squares;
consider R9 being (FinSequence of R6) such that L702: (R9 is  being_a_Sum_of_products_of_squares & R7 = ( R9 /. ( len R9 ) )) by L700 , L109;
take D12 = ( R9 ^ <* ( R7 + R8 ) *> );
L703: ( len D12 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L704: thesis by L703 , L701 , L702 , L45 , L665;
end;
L705: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Sum_of_amalgams_of_squares & R7 is  being_an_amalgam_of_squares) implies ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) is  being_a_Sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L706: R9 is  being_a_Sum_of_amalgams_of_squares
and
L707: R7 is  being_an_amalgam_of_squares;
set D13 = ( R9 ^ <* ( ( R9 /. ( len R9 ) ) + R7 ) *> );
L708: ( len D13 ) = ( ( len R9 ) + ( len <* ( ( R9 /. ( len R9 ) ) + R7 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L709: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D13 )) implies ( R9 /. R5 ) = ( D13 /. R5 )))
proof
let R5 being Nat;
assume L710: (R5 <> ( 0 ) & R5 < ( len D13 ));
L711: (1 <= R5 & R5 <= ( len R9 )) by L710 , L708 , NAT_1:13 , NAT_1:25;
L712: R5 in ( dom R9 ) by L711 , FINSEQ_3:25;
thus L713: thesis by L712 , L1;
end;
L714: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D13 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_an_amalgam_of_squares & ( D13 /. ( R5 + 1 ) ) = ( ( D13 /. R5 ) + R8 )))))
proof
let R5 being Nat;
assume that
L715: R5 <> ( 0 )
and
L716: R5 < ( len D13 );
L717:
now
L718: ( R9 /. R5 ) = ( D13 /. R5 ) by L709 , L715 , L716;
assume L719: R5 < ( len R9 );
L720: (( R5 + 1 ) <> ( 0 ) & ( R5 + 1 ) < ( len D13 )) by L719 , L708 , NAT_1:5 , XREAL_1:6;
L721: ( R9 /. ( R5 + 1 ) ) = ( D13 /. ( R5 + 1 ) ) by L720 , L709;
thus L722: thesis by L721 , L706 , L715 , L719 , L718 , L193;
end;
L723:
now
assume L724: R5 = ( len R9 );
L725: 1 <= R5 by L715 , NAT_1:25;
L726: R5 in ( dom R9 ) by L725 , L724 , FINSEQ_3:25;
L727: ( D13 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) + R7 ) by L724 , L45;
L728: ( D13 /. ( R5 + 1 ) ) = ( ( D13 /. R5 ) + R7 ) by L727 , L726 , L1;
thus L729: thesis by L728 , L707;
end;
L730: R5 <= ( len R9 ) by L708 , L716 , NAT_1:13;
thus L731: thesis by L730 , L717 , L723 , XXREAL_0:1;
end;
L732: ( len R9 ) <> ( 0 ) by L706 , L193;
L733: 1 <= ( len R9 ) by L732 , NAT_1:25;
L734: 1 < ( len D13 ) by L733 , L708 , NAT_1:13;
L735: ( D13 /. 1 ) = ( R9 /. 1 ) by L734 , L709;
L736: ( D13 /. 1 ) is  being_an_amalgam_of_squares by L735 , L706 , L193;
L737: ( len D13 ) <> ( 0 ) by L708 , NAT_1:5;
thus L738: thesis by L737 , L736 , L714 , L193;
end;
L739: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L740: R7 is  being_a_sum_of_amalgams_of_squares
and
L741: R8 is  being_an_amalgam_of_squares;
consider R9 being (FinSequence of R6) such that L742: (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )) by L740 , L195;
take D14 = ( R9 ^ <* ( R7 + R8 ) *> );
L743: ( len D14 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L744: thesis by L743 , L741 , L742 , L45 , L705;
end;
L745: (for R1 being Nat holds (for R2 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R1 <> ( 0 ) & R1 <= ( len R9 ) & R2 <> ( 0 ) & R2 <= ( len R9 )) implies ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) is  being_a_generation_from_squares)))))
proof
let R1 being Nat;
let R2 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L746: R9 is  being_a_generation_from_squares
and
L747: R1 <> ( 0 )
and
L748: R1 <= ( len R9 )
and
L749: R2 <> ( 0 )
and
L750: R2 <= ( len R9 );
set D15 = ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> );
L751: ( len D15 ) = ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L752: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D15 )) implies (( D15 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D15 /. R5 ) = ( ( D15 /. R1 ) * ( D15 /. R2 ) ) or ( D15 /. R5 ) = ( ( D15 /. R1 ) + ( D15 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L753: R5 <> ( 0 )
and
L754: R5 <= ( len D15 );
L755:
now
assume L756: R5 < ( len D15 );
L757: R5 <= ( len R9 ) by L756 , L751 , NAT_1:13;
L758: ( D15 /. R5 ) = ( R9 /. R5 ) by L757 , L753 , L51;
L759:
now
given R3 being Nat , R4 being Nat such that
L760: (( R9 /. R5 ) = ( ( R9 /. R3 ) * ( R9 /. R4 ) ) or ( R9 /. R5 ) = ( ( R9 /. R3 ) + ( R9 /. R4 ) ))
and
L761: (R3 <> ( 0 ) & R3 < R5 & R4 <> ( 0 ) & R4 < R5);

L762: (( R9 /. R3 ) = ( D15 /. R3 ) & ( R9 /. R4 ) = ( D15 /. R4 )) by L757 , L761 , L51 , XXREAL_0:2;
thus L763: thesis by L762 , L758 , L760 , L761;
end;
L764: (( R9 /. R5 ) is  being_an_amalgam_of_squares implies thesis) by L753 , L757 , L51;
thus L765: thesis by L764 , L746 , L753 , L757 , L759 , L276;
end;
L766:
now
assume L767: R5 = ( len D15 );
L768: (R1 < R5 & R2 < R5) by L767 , L748 , L750 , L751 , NAT_1:13;
L769: ( D15 /. R5 ) = ( ( R9 /. R1 ) + ( R9 /. R2 ) ) by L751 , L767 , L45
.= ( ( D15 /. R1 ) + ( R9 /. R2 ) ) by L747 , L748 , L51
.= ( ( D15 /. R1 ) + ( D15 /. R2 ) ) by L749 , L750 , L51;
thus L770: thesis by L769 , L747 , L749 , L768;
end;
thus L771: thesis by L766 , L754 , L755 , XXREAL_0:1;
end;
L772: ( len R9 ) <> ( 0 ) by L746 , L276;
L773: ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L772 , NAT_1:7;
L774: ( len ( R9 ^ <* ( ( R9 /. R1 ) + ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L773 , FINSEQ_1:22;
thus L775: thesis by L774 , L752 , L276;
end;
L776: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_square) implies ( R7 + R8 ) is  being_a_sum_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L777: (R7 is  being_a_square & R8 is  being_a_square);
take D16 = ( <* R7 *> ^ <* ( R7 + R8 ) *> );
L778: ( len <* R7 *> ) = 1 by L38;
L779: ( <* R7 *> /. ( len <* R7 *> ) ) = R7 by L778 , L38;
L780: ( len D16 ) = ( ( len <* R7 *> ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len <* R7 *> ) + 1 ) by L38;
thus L781: thesis by L780 , L777 , L779 , L45 , L73 , L625;
end;
L782: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R10 is  being_a_generation_from_squares) implies ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) + ( R10 /. ( len R10 ) ) ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L783: R9 is  being_a_generation_from_squares
and
L784: R10 is  being_a_generation_from_squares;
L785: ( len R10 ) <> ( 0 ) by L784 , L276;
L786: ( ( len R9 ) + ( len R10 ) ) <> ( 0 ) by L785 , NAT_1:7;
L787: ( len R9 ) <> ( 0 ) by L783 , L276;
L788: 1 <= ( len R9 ) by L787 , NAT_1:25;
L789: ( len R9 ) in ( dom R9 ) by L788 , FINSEQ_3:25;
L790: (( ( len R9 ) + ( len R10 ) ) <= ( len ( R9 ^ R10 ) ) & ( ( R9 ^ R10 ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) )) by L789 , L1 , FINSEQ_1:22;
L791: ( len R9 ) <= ( ( len R9 ) + ( len R10 ) ) by NAT_1:11;
L792: ( len R9 ) <= ( len ( R9 ^ R10 ) ) by L791 , FINSEQ_1:22;
L793: 1 <= ( len R10 ) by L785 , NAT_1:25;
L794: ( len R10 ) in ( dom R10 ) by L793 , FINSEQ_3:25;
L795: ( ( R9 ^ R10 ) /. ( ( len R9 ) + ( len R10 ) ) ) = ( R10 /. ( len R10 ) ) by L794 , L1;
L796: (( R9 ^ R10 ) is  being_a_generation_from_squares & ( len R9 ) <> ( 0 )) by L783 , L784 , L276 , L327;
thus L797: thesis by L796 , L792 , L786 , L790 , L795 , L745;
end;
L798: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L799: R7 is  generated_from_squares
and
L800: R8 is  generated_from_squares;
consider R9 being (FinSequence of R6) such that L801: R9 is  being_a_generation_from_squares and L802: R7 = ( R9 /. ( len R9 ) ) by L799 , L278;
consider R10 being (FinSequence of R6) such that L803: R10 is  being_a_generation_from_squares and L804: R8 = ( R10 /. ( len R10 ) ) by L800 , L278;
set D17 = ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) + ( R10 /. ( len R10 ) ) ) *> );
L805: ( len D17 ) = ( ( len ( R9 ^ R10 ) ) + ( len <* ( ( R9 /. ( len R9 ) ) + ( R10 /. ( len R10 ) ) ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ R10 ) ) + 1 ) by L38;
L806: ( D17 /. ( len D17 ) ) = ( R7 + ( R10 /. ( len R10 ) ) ) by L805 , L802 , L45;
L807: D17 is  being_a_generation_from_squares by L801 , L803 , L782;
thus L808: thesis by L807 , L804 , L806 , L278;
end;
theorem
L809: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds (((R7 is  being_a_square & R8 is  being_a_square) or (R7 is  being_a_sum_of_squares & R8 is  being_a_square)) implies ( R7 + R8 ) is  being_a_sum_of_squares)))) by L659 , L776;
L810: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  being_a_sum_of_products_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L811: R7 is  being_a_sum_of_products_of_squares
and
L812: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L813: (R9 is  being_a_Sum_of_products_of_squares & R7 = ( R9 /. ( len R9 ) )) by L811 , L109;
take D18 = ( R9 ^ <* ( R7 + R8 ) *> );
L814: ( len D18 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L815: thesis by L814 , L812 , L813 , L45 , L102 , L665;
end;
theorem
L816: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds (((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_square) or (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_product_of_squares)) implies ( R7 + R8 ) is  being_a_sum_of_products_of_squares)))) by L699 , L810;
L817: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L818: R7 is  being_an_amalgam_of_squares
and
L819: R8 is  being_a_product_of_squares;
L820: R7 is  being_a_sum_of_amalgams_of_squares by L818 , L271;
consider R9 being (FinSequence of R6) such that L821: (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )) by L820 , L195;
take D19 = ( R9 ^ <* ( R7 + R8 ) *> );
L822: ( len D19 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L823: thesis by L822 , L819 , L821 , L45 , L188 , L705;
end;
L824: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L825: R7 is  being_an_amalgam_of_squares
and
L826: R8 is  being_an_amalgam_of_squares;
L827: R7 is  being_a_sum_of_amalgams_of_squares by L825 , L271;
consider R9 being (FinSequence of R6) such that L828: (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )) by L827 , L195;
take D20 = ( R9 ^ <* ( R7 + R8 ) *> );
L829: ( len D20 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L830: thesis by L829 , L826 , L828 , L45 , L705;
end;
L831: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L832: R7 is  being_a_sum_of_amalgams_of_squares
and
L833: R8 is  being_a_product_of_squares;
consider R9 being (FinSequence of R6) such that L834: (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )) by L832 , L195;
take D21 = ( R9 ^ <* ( R7 + R8 ) *> );
L835: ( len D21 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L836: thesis by L835 , L833 , L834 , L45 , L188 , L705;
end;
L837: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L838: R7 is  being_a_sum_of_amalgams_of_squares
and
L839: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L840: (R9 is  being_a_Sum_of_amalgams_of_squares & R7 = ( R9 /. ( len R9 ) )) by L838 , L195;
take D22 = ( R9 ^ <* ( R7 + R8 ) *> );
L841: ( len D22 ) = ( ( len R9 ) + ( len <* ( R7 + R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L842: thesis by L841 , L839 , L840 , L45 , L173 , L705;
end;
theorem
L843: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds (((R7 is  being_an_amalgam_of_squares & (R8 is  being_a_product_of_squares or R8 is  being_an_amalgam_of_squares)) or (R7 is  being_a_sum_of_amalgams_of_squares & (R8 is  being_a_square or R8 is  being_a_product_of_squares or R8 is  being_an_amalgam_of_squares))) implies ( R7 + R8 ) is  being_a_sum_of_amalgams_of_squares)))) by L739 , L817 , L824 , L831 , L837;
L844: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L845: (R7 is  being_a_square & R8 is  being_a_sum_of_squares);
L846: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L845 , L291 , L419;
thus L847: thesis by L846 , L798;
end;
L848: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L849: (R7 is  being_a_square & R8 is  being_a_product_of_squares);
L850: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L849 , L291 , L559;
thus L851: thesis by L850 , L798;
end;
L852: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L853: R7 is  being_a_square
and
L854: R8 is  generated_from_squares;
L855: R7 is  generated_from_squares by L853 , L291;
thus L856: thesis by L855 , L854 , L798;
end;
L857: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L858: (R7 is  being_a_square & R8 is  being_a_sum_of_products_of_squares);
L859: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L858 , L291 , L614;
thus L860: thesis by L859 , L798;
end;
L861: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  generated_from_squares)))) by L432 , L852;
L862: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares)))) by L852 , L485;
theorem
L863: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & (R8 is  being_a_sum_of_squares or R8 is  being_a_product_of_squares or R8 is  being_a_sum_of_products_of_squares or R8 is  being_an_amalgam_of_squares or R8 is  being_a_sum_of_amalgams_of_squares or R8 is  generated_from_squares)) implies ( R7 + R8 ) is  generated_from_squares)))) by L844 , L848 , L852 , L857 , L861 , L862;
theorem
L864: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L865: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_squares);
L866: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L865 , L419;
thus L867: thesis by L866 , L798;
end;
theorem
L868: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L869: (R7 is  being_a_sum_of_squares & R8 is  being_a_product_of_squares);
L870: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L869 , L419 , L559;
thus L871: thesis by L870 , L798;
end;
theorem
L872: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L873: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_products_of_squares);
L874: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L873 , L419 , L614;
thus L875: thesis by L874 , L798;
end;
theorem
L876: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L877: (R7 is  being_a_sum_of_squares & R8 is  being_an_amalgam_of_squares);
L878: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L877 , L419 , L432;
thus L879: thesis by L878 , L798;
end;
theorem
L880: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L881: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L882: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L881 , L419 , L485;
thus L883: thesis by L882 , L798;
end;
theorem
L884: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L885: R7 is  being_a_sum_of_squares
and
L886: R8 is  generated_from_squares;
L887: R7 is  generated_from_squares by L885 , L419;
thus L888: thesis by L887 , L886 , L798;
end;
theorem
L889: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L890: R7 is  being_a_product_of_squares
and
L891: R8 is  generated_from_squares;
L892: R7 is  generated_from_squares by L890 , L559;
thus L893: thesis by L892 , L891 , L798;
end;
theorem
L894: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L895: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L896: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L895 , L559 , L485;
thus L897: thesis by L896 , L798;
end;
theorem
L898: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L899: (R7 is  being_a_product_of_squares & R8 is  being_an_amalgam_of_squares);
L900: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L899 , L432 , L559;
thus L901: thesis by L900 , L798;
end;
theorem
L902: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L903: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_products_of_squares);
L904: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L903 , L559 , L614;
thus L905: thesis by L904 , L798;
end;
theorem
L906: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L907: (R7 is  being_a_product_of_squares & R8 is  being_a_product_of_squares);
L908: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L907 , L559;
thus L909: thesis by L908 , L798;
end;
theorem
L910: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L911: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_squares);
L912: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L911 , L419 , L559;
thus L913: thesis by L912 , L798;
end;
theorem
L914: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L915: (R7 is  being_a_product_of_squares & R8 is  being_a_square);
L916: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L915 , L291 , L559;
thus L917: thesis by L916 , L798;
end;
theorem
L918: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L919: R7 is  being_a_sum_of_products_of_squares
and
L920: R8 is  generated_from_squares;
L921: R7 is  generated_from_squares by L919 , L614;
thus L922: thesis by L921 , L920 , L798;
end;
theorem
L923: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L924: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_squares);
L925: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L924 , L419 , L614;
thus L926: thesis by L925 , L798;
end;
theorem
L927: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L928: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_products_of_squares);
L929: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L928 , L614;
thus L930: thesis by L929 , L798;
end;
theorem
L931: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L932: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_an_amalgam_of_squares);
L933: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L932 , L432 , L614;
thus L934: thesis by L933 , L798;
end;
theorem
L935: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L936: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L937: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L936 , L614 , L485;
thus L938: thesis by L937 , L798;
end;
theorem
L939: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L940: R7 is  being_an_amalgam_of_squares
and
L941: R8 is  generated_from_squares;
L942: R7 is  generated_from_squares by L940 , L432;
thus L943: thesis by L942 , L941 , L798;
end;
theorem
L944: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_square) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L945: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_square);
L946: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L945 , L291 , L432;
thus L947: thesis by L946 , L798;
end;
theorem
L948: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L949: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_squares);
L950: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L949 , L419 , L432;
thus L951: thesis by L950 , L798;
end;
theorem
L952: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L953: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_products_of_squares);
L954: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L953 , L432 , L614;
thus L955: thesis by L954 , L798;
end;
theorem
L956: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L957: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L958: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L957 , L432 , L485;
thus L959: thesis by L958 , L798;
end;
theorem
L960: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L961: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_squares);
L962: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L961 , L419 , L485;
thus L963: thesis by L962 , L798;
end;
theorem
L964: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L965: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_products_of_squares);
L966: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L965 , L614 , L485;
thus L967: thesis by L966 , L798;
end;
theorem
L968: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L969: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L970: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L969 , L485;
thus L971: thesis by L970 , L798;
end;
theorem
L972: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  generated_from_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L973: R7 is  being_a_sum_of_amalgams_of_squares
and
L974: R8 is  generated_from_squares;
L975: R7 is  generated_from_squares by L973 , L485;
thus L976: thesis by L975 , L974 , L798;
end;
L977: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L978: R7 is  generated_from_squares
and
L979: R8 is  being_a_sum_of_squares;
L980: R8 is  generated_from_squares by L979 , L419;
thus L981: thesis by L980 , L978 , L798;
end;
L982: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_product_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L983: R7 is  generated_from_squares
and
L984: R8 is  being_a_product_of_squares;
L985: R8 is  generated_from_squares by L984 , L559;
thus L986: thesis by L985 , L983 , L798;
end;
L987: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L988: R7 is  generated_from_squares
and
L989: R8 is  being_a_sum_of_products_of_squares;
L990: R8 is  generated_from_squares by L989 , L614;
thus L991: thesis by L990 , L988 , L798;
end;
L992: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 + R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L993: R7 is  generated_from_squares
and
L994: R8 is  being_a_sum_of_amalgams_of_squares;
L995: R8 is  generated_from_squares by L994 , L485;
thus L996: thesis by L995 , L993 , L798;
end;
theorem
L997: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds (((R7 is  generated_from_squares & R8 is  being_a_square) or (R7 is  generated_from_squares & R8 is  being_a_sum_of_squares) or (R7 is  generated_from_squares & R8 is  being_a_product_of_squares) or (R7 is  generated_from_squares & R8 is  being_a_sum_of_products_of_squares) or (R7 is  generated_from_squares & R8 is  being_an_amalgam_of_squares) or (R7 is  generated_from_squares & R8 is  being_a_sum_of_amalgams_of_squares) or (R7 is  generated_from_squares & R8 is  generated_from_squares)) implies ( R7 + R8 ) is  generated_from_squares)))) by L393 , L461 , L798 , L977 , L982 , L987 , L992;
begin
L998: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R9 is  being_an_Amalgam_of_squares & R10 is  being_an_Amalgam_of_squares) implies ( R9 ^ R10 ) is  being_an_Amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L999: R9 is  being_an_Amalgam_of_squares
and
L1000: R10 is  being_an_Amalgam_of_squares;
L1001: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len ( R9 ^ R10 ) )) implies (( ( R9 ^ R10 ) /. R5 ) is  being_a_product_of_squares or (ex R1 being Nat st (ex R2 being Nat st (( ( R9 ^ R10 ) /. R5 ) = ( ( ( R9 ^ R10 ) /. R1 ) * ( ( R9 ^ R10 ) /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L1002: R5 <> ( 0 )
and
L1003: R5 <= ( len ( R9 ^ R10 ) );
L1004: R5 <= ( ( len R9 ) + ( len R10 ) ) by L1003 , FINSEQ_1:22;
L1005:
now
assume L1006: ( len R9 ) < R5;
consider C16 being Nat such that L1007: R5 = ( ( len R9 ) + C16 ) by L1006 , NAT_1:10;
L1008: ( ( len R9 ) + C16 ) <= ( ( len R9 ) + ( len R10 ) ) by L1003 , L1007 , FINSEQ_1:22;
L1009: C16 <= ( len R10 ) by L1008 , XREAL_1:6;
L1010: C16 <> ( 0 ) by L1006 , L1007;
L1011: C16 <= ( len R10 ) by L1004 , L1007 , XREAL_1:6;
L1012:
now
given C17 , C18 being Nat such that
L1013: ( R10 /. C16 ) = ( ( R10 /. C17 ) * ( R10 /. C18 ) )
and
L1014: C17 <> ( 0 )
and
L1015: C17 < C16
and
L1016: C18 <> ( 0 )
and
L1017: C18 < C16;

L1018: (( ( len R9 ) + C17 ) <> ( 0 ) & ( ( len R9 ) + C18 ) <> ( 0 )) by L1014 , L1016 , NAT_1:7;
L1019: (( ( len R9 ) + C17 ) < R5 & ( ( len R9 ) + C18 ) < R5) by L1007 , L1015 , L1017 , XREAL_1:6;
L1020: ( ( R9 ^ R10 ) /. R5 ) = ( ( R10 /. C17 ) * ( R10 /. C18 ) ) by L1007 , L1010 , L1009 , L1013 , L59
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C17 ) ) * ( R10 /. C18 ) ) by L1011 , L1014 , L1015 , L59 , XXREAL_0:2
.= ( ( ( R9 ^ R10 ) /. ( ( len R9 ) + C17 ) ) * ( ( R9 ^ R10 ) /. ( ( len R9 ) + C18 ) ) ) by L1011 , L1016 , L1017 , L59 , XXREAL_0:2;
thus L1021: thesis by L1020 , L1018 , L1019;
end;
L1022: (( R10 /. C16 ) is  being_a_product_of_squares implies thesis) by L1007 , L1010 , L1009 , L59;
thus L1023: thesis by L1022 , L1000 , L1010 , L1009 , L1012 , L158;
end;
L1024:
now
assume L1025: R5 <= ( len R9 );
L1026:
now
given C19 , C20 being Nat such that
L1027: ( R9 /. R5 ) = ( ( R9 /. C19 ) * ( R9 /. C20 ) )
and
L1028: (C19 <> ( 0 ) & C19 < R5)
and
L1029: (C20 <> ( 0 ) & C20 < R5);

L1030: ( ( R9 ^ R10 ) /. R5 ) = ( ( R9 /. C19 ) * ( R9 /. C20 ) ) by L1002 , L1025 , L1027 , L51
.= ( ( ( R9 ^ R10 ) /. C19 ) * ( R9 /. C20 ) ) by L1025 , L1028 , L51 , XXREAL_0:2
.= ( ( ( R9 ^ R10 ) /. C19 ) * ( ( R9 ^ R10 ) /. C20 ) ) by L1025 , L1029 , L51 , XXREAL_0:2;
thus L1031: thesis by L1030 , L1028 , L1029;
end;
L1032: (( R9 /. R5 ) is  being_a_product_of_squares implies thesis) by L1002 , L1025 , L51;
thus L1033: thesis by L1032 , L999 , L1002 , L1025 , L1026 , L158;
end;
thus L1034: thesis by L1024 , L1005;
end;
L1035: ( len R9 ) <> ( 0 ) by L999 , L158;
L1036: ( ( len R9 ) + ( len R10 ) ) <> ( 0 ) by L1035 , NAT_1:7;
L1037: ( len ( R9 ^ R10 ) ) <> ( 0 ) by L1036 , FINSEQ_1:22;
thus L1038: thesis by L1037 , L1001 , L158;
end;
L1039: (for R1 being Nat holds (for R2 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_an_Amalgam_of_squares & R1 <> ( 0 ) & R1 <= ( len R9 ) & R2 <> ( 0 ) & R2 <= ( len R9 )) implies ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) is  being_an_Amalgam_of_squares)))))
proof
let R1 being Nat;
let R2 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L1040: R9 is  being_an_Amalgam_of_squares
and
L1041: R1 <> ( 0 )
and
L1042: R1 <= ( len R9 )
and
L1043: R2 <> ( 0 )
and
L1044: R2 <= ( len R9 );
set D23 = ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> );
L1045: ( len D23 ) = ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L1046: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D23 )) implies (( D23 /. R5 ) is  being_a_product_of_squares or (ex R1 being Nat st (ex R2 being Nat st (( D23 /. R5 ) = ( ( D23 /. R1 ) * ( D23 /. R2 ) ) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L1047: R5 <> ( 0 )
and
L1048: R5 <= ( len D23 );
L1049:
now
assume L1050: R5 < ( len D23 );
L1051: R5 <= ( len R9 ) by L1050 , L1045 , NAT_1:13;
L1052:
now
given C21 , C22 being Nat such that
L1053: ( R9 /. R5 ) = ( ( R9 /. C21 ) * ( R9 /. C22 ) )
and
L1054: (C21 <> ( 0 ) & C21 < R5)
and
L1055: (C22 <> ( 0 ) & C22 < R5);

L1056: ( D23 /. R5 ) = ( ( R9 /. C21 ) * ( R9 /. C22 ) ) by L1047 , L1051 , L1053 , L51
.= ( ( D23 /. C21 ) * ( R9 /. C22 ) ) by L1051 , L1054 , L51 , XXREAL_0:2
.= ( ( D23 /. C21 ) * ( D23 /. C22 ) ) by L1051 , L1055 , L51 , XXREAL_0:2;
thus L1057: thesis by L1056 , L1054 , L1055;
end;
L1058: (( R9 /. R5 ) is  being_a_product_of_squares implies thesis) by L1047 , L1051 , L51;
thus L1059: thesis by L1058 , L1040 , L1047 , L1051 , L1052 , L158;
end;
L1060:
now
assume L1061: R5 = ( len D23 );
L1062: (R1 < R5 & R2 < R5) by L1061 , L1042 , L1044 , L1045 , NAT_1:13;
L1063: ( D23 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) by L1045 , L1061 , L45
.= ( ( D23 /. R1 ) * ( R9 /. R2 ) ) by L1041 , L1042 , L51
.= ( ( D23 /. R1 ) * ( D23 /. R2 ) ) by L1043 , L1044 , L51;
thus L1064: thesis by L1063 , L1041 , L1043 , L1062;
end;
thus L1065: thesis by L1060 , L1048 , L1049 , XXREAL_0:1;
end;
L1066: ( len R9 ) <> ( 0 ) by L1040 , L158;
L1067: ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L1066 , NAT_1:7;
L1068: ( len ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L1067 , FINSEQ_1:22;
thus L1069: thesis by L1068 , L1046 , L158;
end;
L1070: (for R1 being Nat holds (for R2 being Nat holds (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R1 <> ( 0 ) & R1 <= ( len R9 ) & R2 <> ( 0 ) & R2 <= ( len R9 )) implies ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) is  being_a_generation_from_squares)))))
proof
let R1 being Nat;
let R2 being Nat;
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
assume that
L1071: R9 is  being_a_generation_from_squares
and
L1072: R1 <> ( 0 )
and
L1073: R1 <= ( len R9 )
and
L1074: R2 <> ( 0 )
and
L1075: R2 <= ( len R9 );
set D24 = ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> );
L1076: ( len D24 ) = ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L1077: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 <= ( len D24 )) implies (( D24 /. R5 ) is  being_an_amalgam_of_squares or (ex R1 being Nat st (ex R2 being Nat st ((( D24 /. R5 ) = ( ( D24 /. R1 ) * ( D24 /. R2 ) ) or ( D24 /. R5 ) = ( ( D24 /. R1 ) + ( D24 /. R2 ) )) & R1 <> ( 0 ) & R1 < R5 & R2 <> ( 0 ) & R2 < R5))))))
proof
let R5 being Nat;
assume that
L1078: R5 <> ( 0 )
and
L1079: R5 <= ( len D24 );
L1080:
now
assume L1081: R5 < ( len D24 );
L1082: R5 <= ( len R9 ) by L1081 , L1076 , NAT_1:13;
L1083: ( D24 /. R5 ) = ( R9 /. R5 ) by L1082 , L1078 , L51;
L1084:
now
given C23 , C24 being Nat such that
L1085: (( R9 /. R5 ) = ( ( R9 /. C23 ) * ( R9 /. C24 ) ) or ( R9 /. R5 ) = ( ( R9 /. C23 ) + ( R9 /. C24 ) ))
and
L1086: (C23 <> ( 0 ) & C23 < R5 & C24 <> ( 0 ) & C24 < R5);

L1087: (( R9 /. C23 ) = ( D24 /. C23 ) & ( R9 /. C24 ) = ( D24 /. C24 )) by L1082 , L1086 , L51 , XXREAL_0:2;
thus L1088: thesis by L1087 , L1083 , L1085 , L1086;
end;
L1089: (( R9 /. R5 ) is  being_an_amalgam_of_squares implies thesis) by L1078 , L1082 , L51;
thus L1090: thesis by L1089 , L1071 , L1078 , L1082 , L1084 , L276;
end;
L1091:
now
assume L1092: R5 = ( len D24 );
L1093: (R1 < R5 & R2 < R5) by L1092 , L1073 , L1075 , L1076 , NAT_1:13;
L1094: ( D24 /. R5 ) = ( ( R9 /. R1 ) * ( R9 /. R2 ) ) by L1076 , L1092 , L45
.= ( ( D24 /. R1 ) * ( R9 /. R2 ) ) by L1072 , L1073 , L51
.= ( ( D24 /. R1 ) * ( D24 /. R2 ) ) by L1074 , L1075 , L51;
thus L1095: thesis by L1094 , L1072 , L1074 , L1093;
end;
thus L1096: thesis by L1091 , L1079 , L1080 , XXREAL_0:1;
end;
L1097: ( len R9 ) <> ( 0 ) by L1071 , L276;
L1098: ( ( len R9 ) + ( len <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L1097 , NAT_1:7;
L1099: ( len ( R9 ^ <* ( ( R9 /. R1 ) * ( R9 /. R2 ) ) *> ) ) <> ( 0 ) by L1098 , FINSEQ_1:22;
thus L1100: thesis by L1099 , L1077 , L276;
end;
L1101: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R9 being (FinSequence of R6) holds ((R9 is  being_a_Product_of_squares & R7 is  being_a_square) implies ( R9 ^ <* ( ( R9 /. ( len R9 ) ) * R7 ) *> ) is  being_a_Product_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R9 being (FinSequence of R6);
assume that
L1102: R9 is  being_a_Product_of_squares
and
L1103: R7 is  being_a_square;
set D25 = ( R9 ^ <* ( ( R9 /. ( len R9 ) ) * R7 ) *> );
L1104: ( len D25 ) = ( ( len R9 ) + ( len <* ( ( R9 /. ( len R9 ) ) * R7 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
L1105: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D25 )) implies ( R9 /. R5 ) = ( D25 /. R5 )))
proof
let R5 being Nat;
assume L1106: (R5 <> ( 0 ) & R5 < ( len D25 ));
L1107: (1 <= R5 & R5 <= ( len R9 )) by L1106 , L1104 , NAT_1:13 , NAT_1:25;
L1108: R5 in ( dom R9 ) by L1107 , FINSEQ_3:25;
thus L1109: thesis by L1108 , L1;
end;
L1110: (for R5 being Nat holds ((R5 <> ( 0 ) & R5 < ( len D25 )) implies (ex R8 being (Scalar of R6) st (R8 is  being_a_square & ( D25 /. ( R5 + 1 ) ) = ( ( D25 /. R5 ) * R8 )))))
proof
let R5 being Nat;
assume that
L1111: R5 <> ( 0 )
and
L1112: R5 < ( len D25 );
L1113:
now
L1114: ( R9 /. R5 ) = ( D25 /. R5 ) by L1105 , L1111 , L1112;
assume L1115: R5 < ( len R9 );
L1116: (( R5 + 1 ) <> ( 0 ) & ( R5 + 1 ) < ( len D25 )) by L1115 , L1104 , NAT_1:5 , XREAL_1:6;
L1117: ( R9 /. ( R5 + 1 ) ) = ( D25 /. ( R5 + 1 ) ) by L1116 , L1105;
thus L1118: thesis by L1117 , L1102 , L1111 , L1115 , L1114 , L88;
end;
L1119:
now
assume L1120: R5 = ( len R9 );
L1121: 1 <= R5 by L1111 , NAT_1:25;
L1122: R5 in ( dom R9 ) by L1121 , L1120 , FINSEQ_3:25;
L1123: ( D25 /. ( R5 + 1 ) ) = ( ( R9 /. R5 ) * R7 ) by L1120 , L45;
L1124: ( D25 /. ( R5 + 1 ) ) = ( ( D25 /. R5 ) * R7 ) by L1123 , L1122 , L1;
thus L1125: thesis by L1124 , L1103;
end;
L1126: R5 <= ( len R9 ) by L1104 , L1112 , NAT_1:13;
thus L1127: thesis by L1126 , L1113 , L1119 , XXREAL_0:1;
end;
L1128: ( len R9 ) <> ( 0 ) by L1102 , L88;
L1129: 1 <= ( len R9 ) by L1128 , NAT_1:25;
L1130: 1 < ( len D25 ) by L1129 , L1104 , NAT_1:13;
L1131: ( D25 /. 1 ) = ( R9 /. 1 ) by L1130 , L1105;
L1132: ( D25 /. 1 ) is  being_a_square by L1131 , L1102 , L88;
L1133: ( len D25 ) <> ( 0 ) by L1104 , NAT_1:5;
thus L1134: thesis by L1133 , L1132 , L1110 , L88;
end;
L1135: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R9 is  being_an_Amalgam_of_squares & R10 is  being_an_Amalgam_of_squares) implies ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> ) is  being_an_Amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L1136: R9 is  being_an_Amalgam_of_squares
and
L1137: R10 is  being_an_Amalgam_of_squares;
L1138: ( len R9 ) <> ( 0 ) by L1136 , L158;
L1139: (( ( len R9 ) + ( len R10 ) ) <= ( len ( R9 ^ R10 ) ) & ( ( R9 ^ R10 ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) )) by L1138 , L51 , FINSEQ_1:22;
L1140: ( len R10 ) <> ( 0 ) by L1137 , L158;
L1141: (( ( len R9 ) + ( len R10 ) ) <> ( 0 ) & ( ( R9 ^ R10 ) /. ( ( len R9 ) + ( len R10 ) ) ) = ( R10 /. ( len R10 ) )) by L1140 , L59 , NAT_1:7;
L1142: ( len R9 ) <= ( ( len R9 ) + ( len R10 ) ) by NAT_1:11;
L1143: ( len R9 ) <= ( len ( R9 ^ R10 ) ) by L1142 , FINSEQ_1:22;
L1144: (( len R9 ) <> ( 0 ) & ( R9 ^ R10 ) is  being_an_Amalgam_of_squares) by L1136 , L1137 , L158 , L998;
thus L1145: thesis by L1144 , L1143 , L1139 , L1141 , L1039;
end;
L1146: (for R6 being non  empty doubleLoopStr holds (for R9 being (FinSequence of R6) holds (for R10 being (FinSequence of R6) holds ((R9 is  being_a_generation_from_squares & R10 is  being_a_generation_from_squares) implies ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> ) is  being_a_generation_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R9 being (FinSequence of R6);
let R10 being (FinSequence of R6);
assume that
L1147: R9 is  being_a_generation_from_squares
and
L1148: R10 is  being_a_generation_from_squares;
L1149: ( len R10 ) <> ( 0 ) by L1148 , L276;
L1150: ( ( len R9 ) + ( len R10 ) ) <> ( 0 ) by L1149 , NAT_1:7;
L1151: ( len R9 ) <> ( 0 ) by L1147 , L276;
L1152: 1 <= ( len R9 ) by L1151 , NAT_1:25;
L1153: ( len R9 ) in ( dom R9 ) by L1152 , FINSEQ_3:25;
L1154: (( ( len R9 ) + ( len R10 ) ) <= ( len ( R9 ^ R10 ) ) & ( ( R9 ^ R10 ) /. ( len R9 ) ) = ( R9 /. ( len R9 ) )) by L1153 , L1 , FINSEQ_1:22;
L1155: ( len R9 ) <= ( ( len R9 ) + ( len R10 ) ) by NAT_1:11;
L1156: ( len R9 ) <= ( len ( R9 ^ R10 ) ) by L1155 , FINSEQ_1:22;
L1157: 1 <= ( len R10 ) by L1149 , NAT_1:25;
L1158: ( len R10 ) in ( dom R10 ) by L1157 , FINSEQ_3:25;
L1159: ( ( R9 ^ R10 ) /. ( ( len R9 ) + ( len R10 ) ) ) = ( R10 /. ( len R10 ) ) by L1158 , L1;
L1160: (( R9 ^ R10 ) is  being_a_generation_from_squares & ( len R9 ) <> ( 0 )) by L1147 , L1148 , L276 , L327;
thus L1161: thesis by L1160 , L1156 , L1150 , L1154 , L1159 , L1070;
end;
theorem
L1162: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  being_a_product_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1163: R7 is  being_a_product_of_squares
and
L1164: R8 is  being_a_square;
consider R9 being (FinSequence of R6) such that L1165: (R9 is  being_a_Product_of_squares & R7 = ( R9 /. ( len R9 ) )) by L1163 , L90;
take D26 = ( R9 ^ <* ( R7 * R8 ) *> );
L1166: ( len D26 ) = ( ( len R9 ) + ( len <* ( R7 * R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L1167: thesis by L1166 , L1164 , L1165 , L45 , L1101;
end;
theorem
L1168: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_square) implies ( R7 * R8 ) is  being_a_product_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1169: R7 is  being_a_square
and
L1170: R8 is  being_a_square;
L1171: R7 is  being_a_product_of_squares by L1169 , L102;
consider R9 being (FinSequence of R6) such that L1172: (R9 is  being_a_Product_of_squares & R7 = ( R9 /. ( len R9 ) )) by L1171 , L90;
take D27 = ( R9 ^ <* ( R7 * R8 ) *> );
L1173: ( len D27 ) = ( ( len R9 ) + ( len <* ( R7 * R8 ) *> ) ) by FINSEQ_1:22
.= ( ( len R9 ) + 1 ) by L38;
thus L1174: thesis by L1173 , L1170 , L1172 , L45 , L1101;
end;
L1175: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1176: R7 is  being_an_amalgam_of_squares
and
L1177: R8 is  being_an_amalgam_of_squares;
consider R9 being (FinSequence of R6) such that L1178: (R9 is  being_an_Amalgam_of_squares & R7 = ( R9 /. ( len R9 ) )) by L1176 , L160;
consider R10 being (FinSequence of R6) such that L1179: (R10 is  being_an_Amalgam_of_squares & R8 = ( R10 /. ( len R10 ) )) by L1177 , L160;
take D28 = ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> );
L1180: ( len D28 ) = ( ( len ( R9 ^ R10 ) ) + ( len <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ R10 ) ) + 1 ) by L38;
thus L1181: thesis by L1180 , L1178 , L1179 , L45 , L1135;
end;
theorem
L1182: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1183: (R7 is  being_a_square & R8 is  being_a_product_of_squares);
L1184: (R7 is  being_an_amalgam_of_squares & R8 is  being_an_amalgam_of_squares) by L1183 , L173 , L188;
thus L1185: thesis by L1184 , L1175;
end;
theorem
L1186: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1187: R7 is  being_a_square
and
L1188: R8 is  being_an_amalgam_of_squares;
L1189: R7 is  being_an_amalgam_of_squares by L1187 , L173;
thus L1190: thesis by L1189 , L1188 , L1175;
end;
theorem
L1191: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1192: (R7 is  being_a_product_of_squares & R8 is  being_a_product_of_squares);
L1193: (R7 is  being_an_amalgam_of_squares & R8 is  being_an_amalgam_of_squares) by L1192 , L188;
thus L1194: thesis by L1193 , L1175;
end;
theorem
L1195: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1196: R7 is  being_a_product_of_squares
and
L1197: R8 is  being_an_amalgam_of_squares;
L1198: R7 is  being_an_amalgam_of_squares by L1196 , L188;
thus L1199: thesis by L1198 , L1197 , L1175;
end;
theorem
L1200: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1201: R7 is  being_an_amalgam_of_squares
and
L1202: R8 is  being_a_square;
L1203: R8 is  being_an_amalgam_of_squares by L1202 , L173;
thus L1204: thesis by L1203 , L1201 , L1175;
end;
theorem
L1205: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1206: R7 is  being_an_amalgam_of_squares
and
L1207: R8 is  being_a_product_of_squares;
L1208: R8 is  being_an_amalgam_of_squares by L1207 , L188;
thus L1209: thesis by L1208 , L1206 , L1175;
end;
theorem
L1210: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  being_an_amalgam_of_squares)))) by L1175;
L1211: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1212: R7 is  generated_from_squares
and
L1213: R8 is  generated_from_squares;
consider R9 being (FinSequence of R6) such that L1214: R9 is  being_a_generation_from_squares and L1215: R7 = ( R9 /. ( len R9 ) ) by L1212 , L278;
consider R10 being (FinSequence of R6) such that L1216: R10 is  being_a_generation_from_squares and L1217: R8 = ( R10 /. ( len R10 ) ) by L1213 , L278;
set D29 = ( ( R9 ^ R10 ) ^ <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> );
L1218: ( len D29 ) = ( ( len ( R9 ^ R10 ) ) + ( len <* ( ( R9 /. ( len R9 ) ) * ( R10 /. ( len R10 ) ) ) *> ) ) by FINSEQ_1:22
.= ( ( len ( R9 ^ R10 ) ) + 1 ) by L38;
L1219: ( D29 /. ( len D29 ) ) = ( R7 * ( R10 /. ( len R10 ) ) ) by L1218 , L1215 , L45;
L1220: D29 is  being_a_generation_from_squares by L1214 , L1216 , L1146;
thus L1221: thesis by L1220 , L1217 , L1219 , L278;
end;
theorem
L1222: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1223: (R7 is  being_a_square & R8 is  being_a_sum_of_squares);
L1224: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1223 , L291 , L419;
thus L1225: thesis by L1224 , L1211;
end;
theorem
L1226: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1227: (R7 is  being_a_square & R8 is  being_a_sum_of_products_of_squares);
L1228: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1227 , L291 , L614;
thus L1229: thesis by L1228 , L1211;
end;
theorem
L1230: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1231: (R7 is  being_a_square & R8 is  being_a_sum_of_amalgams_of_squares);
L1232: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1231 , L291 , L485;
thus L1233: thesis by L1232 , L1211;
end;
theorem
L1234: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_square & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1235: R7 is  being_a_square
and
L1236: R8 is  generated_from_squares;
L1237: R7 is  generated_from_squares by L1235 , L291;
thus L1238: thesis by L1237 , L1236 , L1211;
end;
theorem
L1239: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1240: (R7 is  being_a_sum_of_squares & R8 is  being_a_square);
L1241: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1240 , L291 , L419;
thus L1242: thesis by L1241 , L1211;
end;
theorem
L1243: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1244: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_squares);
L1245: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1244 , L419;
thus L1246: thesis by L1245 , L1211;
end;
theorem
L1247: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1248: (R7 is  being_a_sum_of_squares & R8 is  being_a_product_of_squares);
L1249: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1248 , L419 , L559;
thus L1250: thesis by L1249 , L1211;
end;
theorem
L1251: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1252: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_products_of_squares);
L1253: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1252 , L419 , L614;
thus L1254: thesis by L1253 , L1211;
end;
theorem
L1255: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1256: (R7 is  being_a_sum_of_squares & R8 is  being_an_amalgam_of_squares);
L1257: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1256 , L419 , L432;
thus L1258: thesis by L1257 , L1211;
end;
theorem
L1259: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1260: (R7 is  being_a_sum_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L1261: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1260 , L419 , L485;
thus L1262: thesis by L1261 , L1211;
end;
theorem
L1263: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1264: R7 is  being_a_sum_of_squares
and
L1265: R8 is  generated_from_squares;
L1266: R7 is  generated_from_squares by L1264 , L419;
thus L1267: thesis by L1266 , L1265 , L1211;
end;
theorem
L1268: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1269: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_squares);
L1270: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1269 , L419 , L559;
thus L1271: thesis by L1270 , L1211;
end;
theorem
L1272: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1273: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_products_of_squares);
L1274: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1273 , L559 , L614;
thus L1275: thesis by L1274 , L1211;
end;
theorem
L1276: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1277: (R7 is  being_a_product_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L1278: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1277 , L559 , L485;
thus L1279: thesis by L1278 , L1211;
end;
theorem
L1280: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_product_of_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1281: R7 is  being_a_product_of_squares
and
L1282: R8 is  generated_from_squares;
L1283: R7 is  generated_from_squares by L1281 , L559;
thus L1284: thesis by L1283 , L1282 , L1211;
end;
theorem
L1285: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1286: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_square);
L1287: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1286 , L291 , L614;
thus L1288: thesis by L1287 , L1211;
end;
theorem
L1289: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1290: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_squares);
L1291: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1290 , L419 , L614;
thus L1292: thesis by L1291 , L1211;
end;
theorem
L1293: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1294: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_product_of_squares);
L1295: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1294 , L559 , L614;
thus L1296: thesis by L1295 , L1211;
end;
theorem
L1297: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1298: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_products_of_squares);
L1299: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1298 , L614;
thus L1300: thesis by L1299 , L1211;
end;
theorem
L1301: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1302: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_an_amalgam_of_squares);
L1303: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1302 , L432 , L614;
thus L1304: thesis by L1303 , L1211;
end;
theorem
L1305: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1306: (R7 is  being_a_sum_of_products_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L1307: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1306 , L614 , L485;
thus L1308: thesis by L1307 , L1211;
end;
theorem
L1309: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_products_of_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1310: R7 is  being_a_sum_of_products_of_squares
and
L1311: R8 is  generated_from_squares;
L1312: R7 is  generated_from_squares by L1310 , L614;
thus L1313: thesis by L1312 , L1311 , L1211;
end;
theorem
L1314: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1315: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_squares);
L1316: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1315 , L419 , L432;
thus L1317: thesis by L1316 , L1211;
end;
theorem
L1318: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1319: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_products_of_squares);
L1320: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1319 , L432 , L614;
thus L1321: thesis by L1320 , L1211;
end;
theorem
L1322: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1323: (R7 is  being_an_amalgam_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L1324: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1323 , L432 , L485;
thus L1325: thesis by L1324 , L1211;
end;
theorem
L1326: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_an_amalgam_of_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1327: R7 is  being_an_amalgam_of_squares
and
L1328: R8 is  generated_from_squares;
L1329: R7 is  generated_from_squares by L1327 , L432;
thus L1330: thesis by L1329 , L1328 , L1211;
end;
theorem
L1331: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1332: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_square);
L1333: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1332 , L291 , L485;
thus L1334: thesis by L1333 , L1211;
end;
theorem
L1335: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1336: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_squares);
L1337: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1336 , L419 , L485;
thus L1338: thesis by L1337 , L1211;
end;
theorem
L1339: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1340: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_product_of_squares);
L1341: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1340 , L559 , L485;
thus L1342: thesis by L1341 , L1211;
end;
theorem
L1343: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1344: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_products_of_squares);
L1345: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1344 , L614 , L485;
thus L1346: thesis by L1345 , L1211;
end;
theorem
L1347: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1348: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_an_amalgam_of_squares);
L1349: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1348 , L432 , L485;
thus L1350: thesis by L1349 , L1211;
end;
theorem
L1351: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume L1352: (R7 is  being_a_sum_of_amalgams_of_squares & R8 is  being_a_sum_of_amalgams_of_squares);
L1353: (R7 is  generated_from_squares & R8 is  generated_from_squares) by L1352 , L485;
thus L1354: thesis by L1353 , L1211;
end;
theorem
L1355: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  being_a_sum_of_amalgams_of_squares & R8 is  generated_from_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1356: R7 is  being_a_sum_of_amalgams_of_squares
and
L1357: R8 is  generated_from_squares;
L1358: R7 is  generated_from_squares by L1356 , L485;
thus L1359: thesis by L1358 , L1357 , L1211;
end;
theorem
L1360: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_square) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1361: R7 is  generated_from_squares
and
L1362: R8 is  being_a_square;
L1363: R8 is  generated_from_squares by L1362 , L291;
thus L1364: thesis by L1363 , L1361 , L1211;
end;
theorem
L1365: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_an_amalgam_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1366: R7 is  generated_from_squares
and
L1367: R8 is  being_an_amalgam_of_squares;
L1368: R8 is  generated_from_squares by L1367 , L432;
thus L1369: thesis by L1368 , L1366 , L1211;
end;
theorem
L1370: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1371: R7 is  generated_from_squares
and
L1372: R8 is  being_a_sum_of_squares;
L1373: R8 is  generated_from_squares by L1372 , L419;
thus L1374: thesis by L1373 , L1371 , L1211;
end;
theorem
L1375: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_product_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1376: R7 is  generated_from_squares
and
L1377: R8 is  being_a_product_of_squares;
L1378: R8 is  generated_from_squares by L1377 , L559;
thus L1379: thesis by L1378 , L1376 , L1211;
end;
theorem
L1380: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_products_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1381: R7 is  generated_from_squares
and
L1382: R8 is  being_a_sum_of_products_of_squares;
L1383: R8 is  generated_from_squares by L1382 , L614;
thus L1384: thesis by L1383 , L1381 , L1211;
end;
theorem
L1385: (for R6 being non  empty doubleLoopStr holds (for R7 being (Scalar of R6) holds (for R8 being (Scalar of R6) holds ((R7 is  generated_from_squares & R8 is  being_a_sum_of_amalgams_of_squares) implies ( R7 * R8 ) is  generated_from_squares))))
proof
let R6 being non  empty doubleLoopStr;
let R7 being (Scalar of R6);
let R8 being (Scalar of R6);
assume that
L1386: R7 is  generated_from_squares
and
L1387: R8 is  being_a_sum_of_amalgams_of_squares;
L1388: R8 is  generated_from_squares by L1387 , L485;
thus L1389: thesis by L1388 , L1386 , L1211;
end;
