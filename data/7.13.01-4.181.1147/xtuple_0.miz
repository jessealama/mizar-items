:: Kuratowski Pairs. {T}uples and Projections
::  by Grzegorz Bancerek, Artur Korni\l owicz and Andrzej Trybulec
::
:: Received December 9, 2011
:: Copyright (c) 2011-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies MCART_1, RECDEF_2, XTUPLE_0, FACIRC_1, RELAT_1, TARSKI,
    XBOOLE_0;
 notations TARSKI, XBOOLE_0;
 constructors TARSKI, XBOOLE_0;
 registrations XBOOLE_0;
 definitions TARSKI, XBOOLE_0;
 theorems ENUMSET1, TARSKI, XBOOLE_0, XBOOLE_1;
 schemes XBOOLE_0;
 requirements BOOLE;

begin
definition
let R1 being set;
attr R1 is  pair
means
:L1: (ex R2 being set st (ex R3 being set st R1 = [ R2 , R3 ]));
end;
registration
let R2 being set;
let R3 being set;
cluster [ R2 , R3 ] ->  pair;
coherence by L1;
end;
L4: (for R1 being set holds (for R7 being set holds (for R8 being set holds ({ R1 } = { R7 , R8 } implies R1 = R7))))
proof
let R1 being set;
let R7 being set;
let R8 being set;
assume L5: { R1 } = { R7 , R8 };
L6: R7 in { R1 } by L5 , TARSKI:def 2;
thus L7: thesis by L6 , TARSKI:def 1;
end;
L8: (for R1 being set holds (for R7 being set holds (for R8 being set holds ({ R1 } = { R7 , R8 } implies R7 = R8))))
proof
let R1 being set;
let R7 being set;
let R8 being set;
assume L9: { R1 } = { R7 , R8 };
L10: R1 = R7 by L9 , L4;
thus L11: thesis by L10 , L9 , L4;
end;
L12: (for R2 being set holds (for R3 being set holds (for R7 being set holds (for R8 being set holds ({ R2 , R3 } = { R7 , R8 } implies (R2 = R7 or R2 = R8))))))
proof
let R2 being set;
let R3 being set;
let R7 being set;
let R8 being set;
L13: R2 in { R2 , R3 } by TARSKI:def 2;
thus L14: thesis by L13 , TARSKI:def 2;
end;
theorem
L15: (for R2 being set holds (for R3 being set holds (for R7 being set holds (for R8 being set holds ([ R2 , R3 ] = [ R7 , R8 ] implies (R2 = R7 & R3 = R8))))))
proof
let R2 being set;
let R3 being set;
let R7 being set;
let R8 being set;
assume L16: [ R2 , R3 ] = [ R7 , R8 ];
per cases ;
suppose L17: R7 <> R8;

L18: { R2 } <> { R7 , R8 } by L17 , L8;
L19: { R2 } = { R7 } by L18 , L16 , L12;
L20: R2 in { R7 } by L19 , TARSKI:def 1;
thus L21: R2 = R7 by L20 , TARSKI:def 1;
L22: { R7 , R8 } = { R2 , R3 } by L16 , L18 , L12;
thus L23: thesis by L22 , L17 , L21 , L12;
end;
suppose L24: R7 = R8;

L25: { { R2 , R3 } , { R2 } } = { { R7 } , { R7 } } by L24 , L16 , ENUMSET1:29
.= { { R7 } } by ENUMSET1:29;
L26: { R7 } = { R2 , R3 } by L25 , L4;
thus L27: thesis by L26 , L24 , L4;
end;
end;
definition
let R1 being set;
assume L29: R1 is  pair;
consider R2 being set, R3 being set such that L30: R1 = [ R2 , R3 ] by L29 , L1;
func R1 `1 means 
:L31: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies it = R7)));
existence
proof
take R2;
thus L32: thesis by L30 , L15;
end;
uniqueness
proof
let R12 being set;
let R14 being set;
assume that
L33: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies R12 = R7)))
and
L34: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies R14 = R7)));
thus L35: R12 = R2 by L30 , L33
.= R14 by L30 , L34;
end;
func R1 `2 means 
:L36: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies it = R8)));
existence
proof
take R3;
thus L37: thesis by L30 , L15;
end;
uniqueness
proof
let R12 being set;
let R14 being set;
assume that
L38: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies R12 = R8)))
and
L39: (for R7 being set holds (for R8 being set holds (R1 = [ R7 , R8 ] implies R14 = R8)));
thus L40: R12 = R3 by L30 , L38
.= R14 by L30 , L39;
end;
end;
registration
let R2 being set;
let R3 being set;
reduce ( [ R2 , R3 ] `1 ) to R2;
reducibility by L31;
reduce ( [ R2 , R3 ] `2 ) to R3;
reducibility by L36;
end;
registration
cluster  pair for set;
existence
proof
take [ the set , the set ];
take the set;
take the set;
thus L43: thesis;
end;
end;
registration
let C1 being  pair set;
reduce [ ( C1 `1 ) , ( C1 `2 ) ] to C1;
reducibility
proof
consider R2 being set, R3 being set such that L45: C1 = [ R2 , R3 ] by L1;
thus L46: [ ( C1 `1 ) , ( C1 `2 ) ] = [ R2 , ( C1 `2 ) ] by L45 , L31
.= C1 by L45 , L36;
end;
end;
theorem
L48: (for B1 , B2 being  pair set holds ((( B1 `1 ) = ( B2 `1 ) & ( B1 `2 ) = ( B2 `2 )) implies B1 = B2))
proof
let C2 , C3 being  pair set;
assume that
L49: (( C2 `1 ) = ( C3 `1 ) & ( C2 `2 ) = ( C3 `2 ));
L50: (C2 = [ ( C2 `1 ) , ( C2 `2 ) ] & C3 = [ ( C3 `1 ) , ( C3 `2 ) ]);
thus L51: C2 = C3 by L50 , L49;
end;
begin
definition
let R2 being set;
let R3 being set;
let R4 being set;
func [R2 , R3 , R4 ] equals 
[ [ R2 , R3 ] , R4 ];
coherence;
end;
definition
let R1 being set;
attr R1 is  triple
means
:L53: (ex R2 being set st (ex R3 being set st (ex R4 being set st R1 = [ R2 , R3 , R4 ])));
end;
registration
let R2 being set;
let R3 being set;
let R4 being set;
cluster [ R2 , R3 , R4 ] ->  triple;
coherence by L53;
end;
theorem
L56: (for R2 being set holds (for R3 being set holds (for R4 being set holds (for R7 being set holds (for R8 being set holds (for R9 being set holds ([ R2 , R3 , R4 ] = [ R7 , R8 , R9 ] implies (R2 = R7 & R3 = R8 & R4 = R9))))))))
proof
let R2 being set;
let R3 being set;
let R4 being set;
let R7 being set;
let R8 being set;
let R9 being set;
assume L57: [ R2 , R3 , R4 ] = [ R7 , R8 , R9 ];
L58: [ R2 , R3 ] = [ R7 , R8 ] by L57 , L15;
thus L59: thesis by L58 , L57 , L15;
end;
registration
cluster  triple for set;
existence
proof
take [ the set , the set , the set ];
take the set;
take the set;
take the set;
thus L60: thesis;
end;
cluster  triple ->  pair for set;
coherence
proof
let C4 being set;
assume L61: (ex R2 being set st (ex R3 being set st (ex R4 being set st C4 = [ R2 , R3 , R4 ])));
thus L62: thesis by L61;
end;
end;
definition
let C5 being set;
func C5 `1_3 equals 
( ( C5 `1 ) `1 );
coherence;
func C5 `2_3 equals 
( ( C5 `1 ) `2 );
coherence;
end;
notation
let C6 being set;
synonym C6 `3_3 for C6 `2;
end;
registration
let R2 being set;
let R3 being set;
let R4 being set;
reduce ( [ R2 , R3 , R4 ] `1_3 ) to R2;
reducibility
proof
thus L66: ( [ R2 , R3 , R4 ] `1_3 ) = ( ( [ [ R2 , R3 ] , R4 ] `1 ) `1 )
.= R2;
end;
reduce ( [ R2 , R3 , R4 ] `2_3 ) to R3;
reducibility
proof
thus L67: ( [ R2 , R3 , R4 ] `2_3 ) = ( ( [ [ R2 , R3 ] , R4 ] `1 ) `2 )
.= R3;
end;
reduce ( [ R2 , R3 , R4 ] `3_3 ) to R4;
reducibility
proof
thus L68: ( [ R2 , R3 , R4 ] `3_3 ) = ( [ [ R2 , R3 ] , R4 ] `2 )
.= R4;
end;
end;
registration
let C7 being  triple set;
reduce [ ( C7 `1_3 ) , ( C7 `2_3 ) , ( C7 `3_3 ) ] to C7;
reducibility
proof
consider R2 being set, R3 being set, R4 being set such that L70: C7 = [ R2 , R3 , R4 ] by L53;
L71: (( [ R2 , R3 , R4 ] `1_3 ) = R2 & ( [ R2 , R3 , R4 ] `2_3 ) = R3 & ( [ R2 , R3 , R4 ] `3_3 ) = R4);
thus L72: thesis by L71 , L70;
end;
end;
theorem
L74: (for B3 , B4 being  triple set holds ((( B3 `1_3 ) = ( B4 `1_3 ) & ( B3 `2_3 ) = ( B4 `2_3 ) & ( B3 `3_3 ) = ( B4 `3_3 )) implies B3 = B4))
proof
let C8 , C9 being  triple set;
assume that
L75: (( C8 `1_3 ) = ( C9 `1_3 ) & ( C8 `2_3 ) = ( C9 `2_3 ) & ( C8 `3_3 ) = ( C9 `3_3 ));
L76: (C8 = [ ( C8 `1_3 ) , ( C8 `2_3 ) , ( C8 `3_3 ) ] & C9 = [ ( C9 `1_3 ) , ( C9 `2_3 ) , ( C9 `3_3 ) ]);
thus L77: C8 = C9 by L76 , L75;
end;
begin
definition
let R2 being set;
let R3 being set;
let R4 being set;
let R5 being set;
func [R2 , R3 , R4 , R5 ] equals 
[ [ R2 , R3 , R4 ] , R5 ];
coherence;
end;
definition
let R1 being set;
attr R1 is  quadruple
means
:L79: (ex R2 being set st (ex R3 being set st (ex R4 being set st (ex R5 being set st R1 = [ R2 , R3 , R4 , R5 ]))));
end;
registration
let R2 being set;
let R3 being set;
let R4 being set;
let R5 being set;
cluster [ R2 , R3 , R4 , R5 ] ->  quadruple;
coherence by L79;
end;
theorem
L82: (for R2 being set holds (for R3 being set holds (for R4 being set holds (for R5 being set holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (for R10 being set holds ([ R2 , R3 , R4 , R5 ] = [ R7 , R8 , R9 , R10 ] implies (R2 = R7 & R3 = R8 & R4 = R9 & R5 = R10))))))))))
proof
let R2 being set;
let R3 being set;
let R4 being set;
let R5 being set;
let R7 being set;
let R8 being set;
let R9 being set;
let R10 being set;
assume L83: [ R2 , R3 , R4 , R5 ] = [ R7 , R8 , R9 , R10 ];
L84: [ R2 , R3 , R4 ] = [ R7 , R8 , R9 ] by L83 , L15;
thus L85: thesis by L84 , L83 , L56 , L15;
end;
registration
cluster  quadruple for set;
existence
proof
take [ the set , the set , the set , the set ];
take the set;
take the set;
take the set;
take the set;
thus L86: thesis;
end;
cluster  quadruple ->  triple for set;
coherence
proof
let R1 being set;
given R2 being set , R3 being set , R4 being set , R5 being set such that
L87: R1 = [ R2 , R3 , R4 , R5 ];

L88: R1 = [ [ R2 , R3 ] , R4 , R5 ] by L87;
thus L89: thesis by L88;
end;
end;
definition
let C10 being set;
func C10 `1_4 equals 
( ( ( C10 `1 ) `1 ) `1 );
coherence;
func C10 `2_4 equals 
( ( ( C10 `1 ) `1 ) `2 );
coherence;
end;
notation
let C11 being set;
synonym C11 `3_4 for C11 `2_3;
synonym C11 `4_4 for C11 `2;
end;
registration
let R2 being set;
let R3 being set;
let R4 being set;
let R5 being set;
reduce ( [ R2 , R3 , R4 , R5 ] `1_4 ) to R2;
reducibility
proof
thus L93: ( [ R2 , R3 , R4 , R5 ] `1_4 ) = ( ( ( [ [ R2 , R3 , R4 ] , R5 ] `1 ) `1 ) `1 )
.= ( [ R2 , R3 , R4 ] `1_3 )
.= R2;
end;
reduce ( [ R2 , R3 , R4 , R5 ] `2_4 ) to R3;
reducibility
proof
thus L94: ( [ R2 , R3 , R4 , R5 ] `2_4 ) = ( ( ( [ [ R2 , R3 , R4 ] , R5 ] `1 ) `1 ) `2 )
.= ( [ R2 , R3 , R4 ] `2_3 )
.= R3;
end;
reduce ( [ R2 , R3 , R4 , R5 ] `3_4 ) to R4;
reducibility
proof
thus L95: ( [ R2 , R3 , R4 , R5 ] `3_4 ) = ( ( [ [ R2 , R3 , R4 ] , R5 ] `1 ) `2 )
.= R4;
end;
reduce ( [ R2 , R3 , R4 , R5 ] `4_4 ) to R5;
reducibility
proof
thus L96: ( [ R2 , R3 , R4 , R5 ] `4_4 ) = ( [ [ R2 , R3 , R4 ] , R5 ] `2 )
.= R5;
end;
end;
registration
let C12 being  quadruple set;
reduce [ ( C12 `1_4 ) , ( C12 `2_4 ) , ( C12 `3_4 ) , ( C12 `4_4 ) ] to C12;
reducibility
proof
consider R2 being set, R3 being set, R4 being set, R5 being set such that L98: C12 = [ R2 , R3 , R4 , R5 ] by L79;
L99: (( [ R2 , R3 , R4 , R5 ] `1_4 ) = R2 & ( [ R2 , R3 , R4 , R5 ] `2_4 ) = R3 & ( [ R2 , R3 , R4 , R5 ] `3_4 ) = R4 & ( [ R2 , R3 , R4 , R5 ] `4_4 ) = R5);
thus L100: thesis by L99 , L98;
end;
end;
theorem
L102: (for R1 being set holds (for R6 being set holds (for R18 being set holds ([ R1 , R6 ] in R18 implies R1 in ( union ( union R18 ) )))))
proof
let R1 being set;
let R6 being set;
let R18 being set;
assume L103: [ R1 , R6 ] in R18;
L104: { R1 } in [ R1 , R6 ] by TARSKI:def 2;
L105: { R1 } in ( union R18 ) by L104 , L103 , TARSKI:def 4;
L106: R1 in { R1 } by TARSKI:def 1;
thus L107: R1 in ( union ( union R18 ) ) by L106 , L105 , TARSKI:def 4;
end;
theorem
L108: (for R1 being set holds (for R6 being set holds (for R18 being set holds ([ R1 , R6 ] in R18 implies R6 in ( union ( union R18 ) )))))
proof
let R1 being set;
let R6 being set;
let R18 being set;
assume L109: [ R1 , R6 ] in R18;
L110: { R1 , R6 } in [ R1 , R6 ] by TARSKI:def 2;
L111: { R1 , R6 } in ( union R18 ) by L110 , L109 , TARSKI:def 4;
L112: R6 in { R1 , R6 } by TARSKI:def 2;
thus L113: R6 in ( union ( union R18 ) ) by L112 , L111 , TARSKI:def 4;
end;
definition
let C13 being set;
func proj1 C13 -> set means 
:L114: (for R1 being set holds (R1 in it iff (ex R6 being set st [ R1 , R6 ] in C13)));
existence
proof
defpred S1[ set ] means (ex R6 being set st [ $1 , R6 ] in C13);
consider R23 being set such that L115: (for R1 being set holds (R1 in R23 iff (R1 in ( union ( union C13 ) ) & S1[ R1 ]))) from XBOOLE_0:sch 1;
take R23;
let R1 being set;
thus L116: (R1 in R23 implies (ex R6 being set st [ R1 , R6 ] in C13)) by L115;
given R6 being set such that
L117: [ R1 , R6 ] in C13;

L118: R1 in ( union ( union C13 ) ) by L117 , L102;
thus L119: thesis by L118 , L117 , L115;
end;
uniqueness
proof
let R19 being set;
let R20 being set;
assume that
L120: (for R1 being set holds (R1 in R19 iff (ex R6 being set st [ R1 , R6 ] in C13)))
and
L121: (for R1 being set holds (R1 in R20 iff (ex R6 being set st [ R1 , R6 ] in C13)));
L122:
now
let R1 being set;
L123: (R1 in R19 iff (ex R6 being set st [ R1 , R6 ] in C13)) by L120;
thus L124: (R1 in R19 iff R1 in R20) by L123 , L121;
end;
thus L125: thesis by L122 , TARSKI:1;
end;
func proj2 C13 -> set means 
:L126: (for R1 being set holds (R1 in it iff (ex R6 being set st [ R6 , R1 ] in C13)));
existence
proof
defpred S2[ set ] means (ex R6 being set st [ R6 , $1 ] in C13);
consider R23 being set such that L127: (for R1 being set holds (R1 in R23 iff (R1 in ( union ( union C13 ) ) & S2[ R1 ]))) from XBOOLE_0:sch 1;
take R23;
let R1 being set;
thus L128: (R1 in R23 implies (ex R6 being set st [ R6 , R1 ] in C13)) by L127;
given R6 being set such that
L129: [ R6 , R1 ] in C13;

L130: R1 in ( union ( union C13 ) ) by L129 , L108;
thus L131: thesis by L130 , L129 , L127;
end;
uniqueness
proof
let R19 being set;
let R20 being set;
assume that
L132: (for R1 being set holds (R1 in R19 iff (ex R6 being set st [ R6 , R1 ] in C13)))
and
L133: (for R1 being set holds (R1 in R20 iff (ex R6 being set st [ R6 , R1 ] in C13)));
L134:
now
let R1 being set;
L135: (R1 in R19 iff (ex R6 being set st [ R6 , R1 ] in C13)) by L132;
thus L136: (R1 in R19 iff R1 in R20) by L135 , L133;
end;
thus L137: thesis by L134 , TARSKI:1;
end;
end;
theorem
L139: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj1 R18 ) c= ( proj1 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L140: R18 c= R23;
let R1 being set;
assume L141: R1 in ( proj1 R18 );
consider R6 being set such that L142: [ R1 , R6 ] in R18 by L141 , L114;
L143: [ R1 , R6 ] in R23 by L140 , L142 , TARSKI:def 3;
thus L144: thesis by L143 , L114;
end;
theorem
L145: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj2 R18 ) c= ( proj2 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L146: R18 c= R23;
let R1 being set;
assume L147: R1 in ( proj2 R18 );
consider R6 being set such that L148: [ R6 , R1 ] in R18 by L147 , L126;
L149: [ R6 , R1 ] in R23 by L146 , L148 , TARSKI:def 3;
thus L150: thesis by L149 , L126;
end;
definition
let C14 being set;
func proj1_3 C14 -> set equals 
( proj1 ( proj1 C14 ) );
coherence;
func proj2_3 C14 -> set equals 
( proj2 ( proj1 C14 ) );
coherence;
end;
notation
let C15 being set;
synonym proj3_3 C15 for proj2 C15;
end;
theorem
L153: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj1_3 R18 ) c= ( proj1_3 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L154: R18 c= R23;
L155: ( proj1 R18 ) c= ( proj1 R23 ) by L154 , L139;
thus L156: thesis by L155 , L139;
end;
theorem
L157: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj2_3 R18 ) c= ( proj2_3 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L158: R18 c= R23;
L159: ( proj1 R18 ) c= ( proj1 R23 ) by L158 , L139;
thus L160: thesis by L159 , L145;
end;
theorem
L161: (for R1 being set holds (for R18 being set holds (R1 in ( proj1_3 R18 ) implies (ex R6 being set st (ex R11 being set st [ R1 , R6 , R11 ] in R18)))))
proof
let R1 being set;
let R18 being set;
assume L162: R1 in ( proj1_3 R18 );
consider R6 being set such that L163: [ R1 , R6 ] in ( proj1 R18 ) by L162 , L114;
consider R11 being set such that L164: [ [ R1 , R6 ] , R11 ] in R18 by L163 , L114;
take R6;
take R11;
thus L165: thesis by L164;
end;
theorem
L166: (for R1 being set holds (for R6 being set holds (for R11 being set holds (for R18 being set holds ([ R1 , R6 , R11 ] in R18 implies R1 in ( proj1_3 R18 ))))))
proof
let R1 being set;
let R6 being set;
let R11 being set;
let R18 being set;
assume L167: [ R1 , R6 , R11 ] in R18;
L168: [ R1 , R6 ] in ( proj1 R18 ) by L167 , L114;
thus L169: thesis by L168 , L114;
end;
theorem
L170: (for R1 being set holds (for R18 being set holds (R1 in ( proj2_3 R18 ) implies (ex R6 being set st (ex R11 being set st [ R6 , R1 , R11 ] in R18)))))
proof
let R1 being set;
let R18 being set;
assume L171: R1 in ( proj2_3 R18 );
consider R6 being set such that L172: [ R6 , R1 ] in ( proj1 R18 ) by L171 , L126;
consider R11 being set such that L173: [ [ R6 , R1 ] , R11 ] in R18 by L172 , L114;
take R6;
take R11;
thus L174: thesis by L173;
end;
theorem
L175: (for R1 being set holds (for R6 being set holds (for R11 being set holds (for R18 being set holds ([ R1 , R6 , R11 ] in R18 implies R6 in ( proj2_3 R18 ))))))
proof
let R1 being set;
let R6 being set;
let R11 being set;
let R18 being set;
assume L176: [ R1 , R6 , R11 ] in R18;
L177: [ R1 , R6 ] in ( proj1 R18 ) by L176 , L114;
thus L178: thesis by L177 , L126;
end;
definition
let C16 being set;
func proj1_4 C16 -> set equals 
( proj1 ( proj1_3 C16 ) );
coherence;
func proj2_4 C16 -> set equals 
( proj2 ( proj1_3 C16 ) );
coherence;
end;
notation
let C17 being set;
synonym proj3_4 C17 for proj2_3 C17;
synonym proj4_4 C17 for proj2 C17;
end;
theorem
L181: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj1_4 R18 ) c= ( proj1_4 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L182: R18 c= R23;
L183: ( proj1_3 R18 ) c= ( proj1_3 R23 ) by L182 , L153;
thus L184: thesis by L183 , L139;
end;
theorem
L185: (for R18 being set holds (for R23 being set holds (R18 c= R23 implies ( proj2_4 R18 ) c= ( proj2_4 R23 ))))
proof
let R18 being set;
let R23 being set;
assume L186: R18 c= R23;
L187: ( proj1_3 R18 ) c= ( proj1_3 R23 ) by L186 , L153;
thus L188: thesis by L187 , L145;
end;
theorem
L189: (for R1 being set holds (for R18 being set holds (R1 in ( proj1_4 R18 ) implies (ex R2 being set st (ex R3 being set st (ex R4 being set st [ R1 , R2 , R3 , R4 ] in R18))))))
proof
let R1 being set;
let R18 being set;
assume L190: R1 in ( proj1_4 R18 );
consider R2 being set such that L191: [ R1 , R2 ] in ( proj1_3 R18 ) by L190 , L114;
consider R3 being set such that L192: [ [ R1 , R2 ] , R3 ] in ( proj1 R18 ) by L191 , L114;
consider R4 being set such that L193: [ [ [ R1 , R2 ] , R3 ] , R4 ] in R18 by L192 , L114;
take R2;
take R3;
take R4;
thus L194: thesis by L193;
end;
theorem
L195: (for R1 being set holds (for R2 being set holds (for R3 being set holds (for R4 being set holds (for R18 being set holds ([ R1 , R2 , R3 , R4 ] in R18 implies R1 in ( proj1_4 R18 )))))))
proof
let R1 being set;
let R2 being set;
let R3 being set;
let R4 being set;
let R18 being set;
assume L196: [ R1 , R2 , R3 , R4 ] in R18;
L197: [ [ R1 , R2 ] , R3 , R4 ] in R18 by L196;
L198: [ R1 , R2 ] in ( proj1_3 R18 ) by L197 , L166;
thus L199: thesis by L198 , L114;
end;
theorem
L200: (for R1 being set holds (for R18 being set holds (R1 in ( proj2_4 R18 ) implies (ex R2 being set st (ex R3 being set st (ex R4 being set st [ R2 , R1 , R3 , R4 ] in R18))))))
proof
let R1 being set;
let R18 being set;
assume L201: R1 in ( proj2_4 R18 );
consider R2 being set such that L202: [ R2 , R1 ] in ( proj1_3 R18 ) by L201 , L126;
consider R3 being set such that L203: [ [ R2 , R1 ] , R3 ] in ( proj1 R18 ) by L202 , L114;
consider R4 being set such that L204: [ [ [ R2 , R1 ] , R3 ] , R4 ] in R18 by L203 , L114;
take R2;
take R3;
take R4;
thus L205: thesis by L204;
end;
theorem
L206: (for R1 being set holds (for R2 being set holds (for R3 being set holds (for R4 being set holds (for R18 being set holds ([ R2 , R1 , R3 , R4 ] in R18 implies R1 in ( proj2_4 R18 )))))))
proof
let R1 being set;
let R2 being set;
let R3 being set;
let R4 being set;
let R18 being set;
assume L207: [ R2 , R1 , R3 , R4 ] in R18;
L208: [ [ R2 , R1 ] , R3 , R4 ] in R18 by L207;
L209: [ R2 , R1 ] in ( proj1_3 R18 ) by L208 , L166;
thus L210: thesis by L209 , L126;
end;
theorem
L211: (for B5 , B6 being  quadruple set holds ((( B5 `1_4 ) = ( B6 `1_4 ) & ( B5 `2_4 ) = ( B6 `2_4 ) & ( B5 `3_4 ) = ( B6 `3_4 ) & ( B5 `4_4 ) = ( B6 `4_4 )) implies B5 = B6))
proof
let C18 , C19 being  quadruple set;
assume that
L212: (( C18 `1_4 ) = ( C19 `1_4 ) & ( C18 `2_4 ) = ( C19 `2_4 ) & ( C18 `3_4 ) = ( C19 `3_4 ) & ( C18 `4_4 ) = ( C19 `4_4 ));
L213: (C18 = [ ( C18 `1_4 ) , ( C18 `2_4 ) , ( C18 `3_4 ) , ( C18 `4_4 ) ] & C19 = [ ( C19 `1_4 ) , ( C19 `2_4 ) , ( C19 `3_4 ) , ( C19 `4_4 ) ]);
thus L214: C18 = C19 by L213 , L212;
end;
begin
registration
let C20 being  empty set;
cluster ( proj1 C20 ) ->  empty;
coherence
proof
assume L215: ( proj1 C20 ) is non  empty;
consider R1 being set such that L216: R1 in ( proj1 C20 ) by L215 , XBOOLE_0:def 1;
L217: (ex R6 being set st [ R1 , R6 ] in C20) by L216 , L114;
thus L218: contradiction by L217;
end;
end;
registration
let C21 being  empty set;
cluster ( proj2 C21 ) ->  empty;
coherence
proof
assume L220: ( proj2 C21 ) is non  empty;
consider R1 being set such that L221: R1 in ( proj2 C21 ) by L220 , XBOOLE_0:def 1;
L222: (ex R6 being set st [ R6 , R1 ] in C21) by L221 , L126;
thus L223: contradiction by L222;
end;
end;
registration
let C22 being  empty set;
cluster ( proj1_3 C22 ) ->  empty;
coherence;
end;
registration
let C23 being  empty set;
cluster ( proj2_3 C23 ) ->  empty;
coherence;
end;
registration
let C24 being  empty set;
cluster ( proj1_4 C24 ) ->  empty;
coherence;
end;
registration
let C25 being  empty set;
cluster ( proj2_4 C25 ) ->  empty;
coherence;
end;
theorem
L229: (for R18 being set holds (for R23 being set holds ( proj1 ( R18 \/ R23 ) ) = ( ( proj1 R18 ) \/ ( proj1 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L230: ( proj1 ( R18 \/ R23 ) ) c= ( ( proj1 R18 ) \/ ( proj1 R23 ) )
proof
let R1 being set;
assume L231: R1 in ( proj1 ( R18 \/ R23 ) );
consider R6 being set such that L232: [ R1 , R6 ] in ( R18 \/ R23 ) by L231 , L114;
L233: ([ R1 , R6 ] in R18 or [ R1 , R6 ] in R23) by L232 , XBOOLE_0:def 3;
L234: (R1 in ( proj1 R18 ) or R1 in ( proj1 R23 )) by L233 , L114;
thus L235: thesis by L234 , XBOOLE_0:def 3;
end;

L236: ( proj1 R23 ) c= ( proj1 ( R18 \/ R23 ) ) by L139 , XBOOLE_1:7;
L237: ( proj1 R18 ) c= ( proj1 ( R18 \/ R23 ) ) by L139 , XBOOLE_1:7;
thus L238: ( ( proj1 R18 ) \/ ( proj1 R23 ) ) c= ( proj1 ( R18 \/ R23 ) ) by L237 , L236 , XBOOLE_1:8;
end;
theorem
L239: (for R18 being set holds (for R23 being set holds ( proj1 ( R18 /\ R23 ) ) c= ( ( proj1 R18 ) /\ ( proj1 R23 ) )))
proof
let R18 being set;
let R23 being set;
L240: (( proj1 ( R18 /\ R23 ) ) c= ( proj1 R18 ) & ( proj1 ( R18 /\ R23 ) ) c= ( proj1 R23 )) by L139 , XBOOLE_1:17;
thus L241: thesis by L240 , XBOOLE_1:19;
end;
theorem
L242: (for R18 being set holds (for R23 being set holds ( ( proj1 R18 ) \ ( proj1 R23 ) ) c= ( proj1 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R1 being set;
assume L243: R1 in ( ( proj1 R18 ) \ ( proj1 R23 ) );
L244: R1 in ( proj1 R18 ) by L243 , XBOOLE_0:def 5;
consider R6 being set such that L245: [ R1 , R6 ] in R18 by L244 , L114;
L246: (not R1 in ( proj1 R23 )) by L243 , XBOOLE_0:def 5;
L247: (not [ R1 , R6 ] in R23) by L246 , L114;
L248: [ R1 , R6 ] in ( R18 \ R23 ) by L247 , L245 , XBOOLE_0:def 5;
thus L249: thesis by L248 , L114;
end;
theorem
L250: (for R18 being set holds (for R23 being set holds ( ( proj1 R18 ) \+\ ( proj1 R23 ) ) c= ( proj1 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L251: (( ( proj1 R18 ) \ ( proj1 R23 ) ) c= ( proj1 ( R18 \ R23 ) ) & ( ( proj1 R23 ) \ ( proj1 R18 ) ) c= ( proj1 ( R23 \ R18 ) )) by L242;
L252: ( ( proj1 R18 ) \+\ ( proj1 R23 ) ) c= ( ( proj1 ( R18 \ R23 ) ) \/ ( proj1 ( R23 \ R18 ) ) ) by L251 , XBOOLE_1:13;
thus L253: thesis by L252 , L229;
end;
theorem
L254: (for R18 being set holds (for R23 being set holds ( proj2 ( R18 \/ R23 ) ) = ( ( proj2 R18 ) \/ ( proj2 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L255: ( proj2 ( R18 \/ R23 ) ) c= ( ( proj2 R18 ) \/ ( proj2 R23 ) )
proof
let R6 being set;
assume L256: R6 in ( proj2 ( R18 \/ R23 ) );
consider R1 being set such that L257: [ R1 , R6 ] in ( R18 \/ R23 ) by L256 , L126;
L258: ([ R1 , R6 ] in R18 or [ R1 , R6 ] in R23) by L257 , XBOOLE_0:def 3;
L259: (R6 in ( proj2 R18 ) or R6 in ( proj2 R23 )) by L258 , L126;
thus L260: thesis by L259 , XBOOLE_0:def 3;
end;

L261: ( proj2 R23 ) c= ( proj2 ( R18 \/ R23 ) ) by L145 , XBOOLE_1:7;
L262: ( proj2 R18 ) c= ( proj2 ( R18 \/ R23 ) ) by L145 , XBOOLE_1:7;
thus L263: ( ( proj2 R18 ) \/ ( proj2 R23 ) ) c= ( proj2 ( R18 \/ R23 ) ) by L262 , L261 , XBOOLE_1:8;
end;
theorem
L264: (for R18 being set holds (for R23 being set holds ( proj2 ( R18 /\ R23 ) ) c= ( ( proj2 R18 ) /\ ( proj2 R23 ) )))
proof
let R18 being set;
let R23 being set;
let R6 being set;
assume L265: R6 in ( proj2 ( R18 /\ R23 ) );
consider R1 being set such that L266: [ R1 , R6 ] in ( R18 /\ R23 ) by L265 , L126;
L267: [ R1 , R6 ] in R23 by L266 , XBOOLE_0:def 4;
L268: R6 in ( proj2 R23 ) by L267 , L126;
L269: [ R1 , R6 ] in R18 by L266 , XBOOLE_0:def 4;
L270: R6 in ( proj2 R18 ) by L269 , L126;
thus L271: thesis by L270 , L268 , XBOOLE_0:def 4;
end;
theorem
L272: (for R18 being set holds (for R23 being set holds ( ( proj2 R18 ) \ ( proj2 R23 ) ) c= ( proj2 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R6 being set;
assume L273: R6 in ( ( proj2 R18 ) \ ( proj2 R23 ) );
L274: R6 in ( proj2 R18 ) by L273 , XBOOLE_0:def 5;
consider R1 being set such that L275: [ R1 , R6 ] in R18 by L274 , L126;
L276: (not R6 in ( proj2 R23 )) by L273 , XBOOLE_0:def 5;
L277: (not [ R1 , R6 ] in R23) by L276 , L126;
L278: [ R1 , R6 ] in ( R18 \ R23 ) by L277 , L275 , XBOOLE_0:def 5;
thus L279: thesis by L278 , L126;
end;
theorem
L280: (for R18 being set holds (for R23 being set holds ( ( proj2 R18 ) \+\ ( proj2 R23 ) ) c= ( proj2 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L281: (( ( proj2 R18 ) \ ( proj2 R23 ) ) c= ( proj2 ( R18 \ R23 ) ) & ( ( proj2 R23 ) \ ( proj2 R18 ) ) c= ( proj2 ( R23 \ R18 ) )) by L272;
L282: ( ( proj2 R18 ) \+\ ( proj2 R23 ) ) c= ( ( proj2 ( R18 \ R23 ) ) \/ ( proj2 ( R23 \ R18 ) ) ) by L281 , XBOOLE_1:13;
thus L283: thesis by L282 , L254;
end;
theorem
L284: (for R18 being set holds (for R23 being set holds ( proj1_3 ( R18 \/ R23 ) ) = ( ( proj1_3 R18 ) \/ ( proj1_3 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L285: ( proj1_3 ( R18 \/ R23 ) ) = ( proj1 ( ( proj1 R18 ) \/ ( proj1 R23 ) ) ) by L229
.= ( ( proj1_3 R18 ) \/ ( proj1_3 R23 ) ) by L229;
end;
theorem
L286: (for R18 being set holds (for R23 being set holds ( proj1_3 ( R18 /\ R23 ) ) c= ( ( proj1_3 R18 ) /\ ( proj1_3 R23 ) )))
proof
let R18 being set;
let R23 being set;
L287: (( proj1_3 ( R18 /\ R23 ) ) c= ( proj1_3 R18 ) & ( proj1_3 ( R18 /\ R23 ) ) c= ( proj1_3 R23 )) by L153 , XBOOLE_1:17;
thus L288: thesis by L287 , XBOOLE_1:19;
end;
theorem
L289: (for R18 being set holds (for R23 being set holds ( ( proj1_3 R18 ) \ ( proj1_3 R23 ) ) c= ( proj1_3 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R1 being set;
assume L290: R1 in ( ( proj1_3 R18 ) \ ( proj1_3 R23 ) );
L291: R1 in ( proj1_3 R18 ) by L290 , XBOOLE_0:def 5;
consider R6 being set, R11 being set such that L292: [ R1 , R6 , R11 ] in R18 by L291 , L161;
L293: (not R1 in ( proj1_3 R23 )) by L290 , XBOOLE_0:def 5;
L294: (not [ R1 , R6 , R11 ] in R23) by L293 , L166;
L295: [ R1 , R6 , R11 ] in ( R18 \ R23 ) by L294 , L292 , XBOOLE_0:def 5;
thus L296: thesis by L295 , L166;
end;
theorem
L297: (for R18 being set holds (for R23 being set holds ( ( proj1_3 R18 ) \+\ ( proj1_3 R23 ) ) c= ( proj1_3 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L298: (( ( proj1_3 R18 ) \ ( proj1_3 R23 ) ) c= ( proj1_3 ( R18 \ R23 ) ) & ( ( proj1_3 R23 ) \ ( proj1_3 R18 ) ) c= ( proj1_3 ( R23 \ R18 ) )) by L289;
L299: ( ( proj1_3 R18 ) \+\ ( proj1_3 R23 ) ) c= ( ( proj1_3 ( R18 \ R23 ) ) \/ ( proj1_3 ( R23 \ R18 ) ) ) by L298 , XBOOLE_1:13;
thus L300: thesis by L299 , L284;
end;
theorem
L301: (for R18 being set holds (for R23 being set holds ( proj2_3 ( R18 \/ R23 ) ) = ( ( proj2_3 R18 ) \/ ( proj2_3 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L302: ( proj2_3 ( R18 \/ R23 ) ) = ( proj2 ( ( proj1 R18 ) \/ ( proj1 R23 ) ) ) by L229
.= ( ( proj2_3 R18 ) \/ ( proj2_3 R23 ) ) by L254;
end;
theorem
L303: (for R18 being set holds (for R23 being set holds ( proj2_3 ( R18 /\ R23 ) ) c= ( ( proj2_3 R18 ) /\ ( proj2_3 R23 ) )))
proof
let R18 being set;
let R23 being set;
L304: (( proj2_3 ( R18 /\ R23 ) ) c= ( proj2_3 R18 ) & ( proj2_3 ( R18 /\ R23 ) ) c= ( proj2_3 R23 )) by L157 , XBOOLE_1:17;
thus L305: thesis by L304 , XBOOLE_1:19;
end;
theorem
L306: (for R18 being set holds (for R23 being set holds ( ( proj2_3 R18 ) \ ( proj2_3 R23 ) ) c= ( proj2_3 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R1 being set;
assume L307: R1 in ( ( proj2_3 R18 ) \ ( proj2_3 R23 ) );
L308: R1 in ( proj2_3 R18 ) by L307 , XBOOLE_0:def 5;
consider R6 being set, R11 being set such that L309: [ R6 , R1 , R11 ] in R18 by L308 , L170;
L310: (not R1 in ( proj2_3 R23 )) by L307 , XBOOLE_0:def 5;
L311: (not [ R6 , R1 , R11 ] in R23) by L310 , L175;
L312: [ R6 , R1 , R11 ] in ( R18 \ R23 ) by L311 , L309 , XBOOLE_0:def 5;
thus L313: thesis by L312 , L175;
end;
theorem
L314: (for R18 being set holds (for R23 being set holds ( ( proj2_3 R18 ) \+\ ( proj2_3 R23 ) ) c= ( proj2_3 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L315: (( ( proj2_3 R18 ) \ ( proj2_3 R23 ) ) c= ( proj2_3 ( R18 \ R23 ) ) & ( ( proj2_3 R23 ) \ ( proj2_3 R18 ) ) c= ( proj2_3 ( R23 \ R18 ) )) by L306;
L316: ( ( proj2_3 R18 ) \+\ ( proj2_3 R23 ) ) c= ( ( proj2_3 ( R18 \ R23 ) ) \/ ( proj2_3 ( R23 \ R18 ) ) ) by L315 , XBOOLE_1:13;
thus L317: thesis by L316 , L301;
end;
theorem
L318: (for R18 being set holds (for R23 being set holds ( proj1_4 ( R18 \/ R23 ) ) = ( ( proj1_4 R18 ) \/ ( proj1_4 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L319: ( proj1_4 ( R18 \/ R23 ) ) = ( proj1 ( ( proj1_3 R18 ) \/ ( proj1_3 R23 ) ) ) by L284
.= ( ( proj1_4 R18 ) \/ ( proj1_4 R23 ) ) by L229;
end;
theorem
L320: (for R18 being set holds (for R23 being set holds ( proj1_4 ( R18 /\ R23 ) ) c= ( ( proj1_4 R18 ) /\ ( proj1_4 R23 ) )))
proof
let R18 being set;
let R23 being set;
L321: (( proj1_4 ( R18 /\ R23 ) ) c= ( proj1_4 R18 ) & ( proj1_4 ( R18 /\ R23 ) ) c= ( proj1_4 R23 )) by L181 , XBOOLE_1:17;
thus L322: thesis by L321 , XBOOLE_1:19;
end;
theorem
L323: (for R18 being set holds (for R23 being set holds ( ( proj1_4 R18 ) \ ( proj1_4 R23 ) ) c= ( proj1_4 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R1 being set;
assume L324: R1 in ( ( proj1_4 R18 ) \ ( proj1_4 R23 ) );
L325: R1 in ( proj1_4 R18 ) by L324 , XBOOLE_0:def 5;
consider R2 being set, R3 being set, R4 being set such that L326: [ R1 , R2 , R3 , R4 ] in R18 by L325 , L189;
L327: (not R1 in ( proj1_4 R23 )) by L324 , XBOOLE_0:def 5;
L328: (not [ R1 , R2 , R3 , R4 ] in R23) by L327 , L195;
L329: [ R1 , R2 , R3 , R4 ] in ( R18 \ R23 ) by L328 , L326 , XBOOLE_0:def 5;
thus L330: thesis by L329 , L195;
end;
theorem
L331: (for R18 being set holds (for R23 being set holds ( ( proj1_4 R18 ) \+\ ( proj1_4 R23 ) ) c= ( proj1_4 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L332: (( ( proj1_4 R18 ) \ ( proj1_4 R23 ) ) c= ( proj1_4 ( R18 \ R23 ) ) & ( ( proj1_4 R23 ) \ ( proj1_4 R18 ) ) c= ( proj1_4 ( R23 \ R18 ) )) by L323;
L333: ( ( proj1_4 R18 ) \+\ ( proj1_4 R23 ) ) c= ( ( proj1_4 ( R18 \ R23 ) ) \/ ( proj1_4 ( R23 \ R18 ) ) ) by L332 , XBOOLE_1:13;
thus L334: thesis by L333 , L318;
end;
theorem
L335: (for R18 being set holds (for R23 being set holds ( proj2_4 ( R18 \/ R23 ) ) = ( ( proj2_4 R18 ) \/ ( proj2_4 R23 ) )))
proof
let R18 being set;
let R23 being set;
thus L336: ( proj2_4 ( R18 \/ R23 ) ) = ( proj2 ( ( proj1_3 R18 ) \/ ( proj1_3 R23 ) ) ) by L284
.= ( ( proj2_4 R18 ) \/ ( proj2_4 R23 ) ) by L254;
end;
theorem
L337: (for R18 being set holds (for R23 being set holds ( proj2_4 ( R18 /\ R23 ) ) c= ( ( proj2_4 R18 ) /\ ( proj2_4 R23 ) )))
proof
let R18 being set;
let R23 being set;
L338: (( proj2_4 ( R18 /\ R23 ) ) c= ( proj2_4 R18 ) & ( proj2_4 ( R18 /\ R23 ) ) c= ( proj2_4 R23 )) by L185 , XBOOLE_1:17;
thus L339: thesis by L338 , XBOOLE_1:19;
end;
theorem
L340: (for R18 being set holds (for R23 being set holds ( ( proj2_4 R18 ) \ ( proj2_4 R23 ) ) c= ( proj2_4 ( R18 \ R23 ) )))
proof
let R18 being set;
let R23 being set;
let R1 being set;
assume L341: R1 in ( ( proj2_4 R18 ) \ ( proj2_4 R23 ) );
L342: R1 in ( proj2_4 R18 ) by L341 , XBOOLE_0:def 5;
consider R2 being set, R3 being set, R4 being set such that L343: [ R2 , R1 , R3 , R4 ] in R18 by L342 , L200;
L344: (not R1 in ( proj2_4 R23 )) by L341 , XBOOLE_0:def 5;
L345: (not [ R2 , R1 , R3 , R4 ] in R23) by L344 , L206;
L346: [ R2 , R1 , R3 , R4 ] in ( R18 \ R23 ) by L345 , L343 , XBOOLE_0:def 5;
thus L347: thesis by L346 , L206;
end;
theorem
L348: (for R18 being set holds (for R23 being set holds ( ( proj2_4 R18 ) \+\ ( proj2_4 R23 ) ) c= ( proj2_4 ( R18 \+\ R23 ) )))
proof
let R18 being set;
let R23 being set;
L349: (( ( proj2_4 R18 ) \ ( proj2_4 R23 ) ) c= ( proj2_4 ( R18 \ R23 ) ) & ( ( proj2_4 R23 ) \ ( proj2_4 R18 ) ) c= ( proj2_4 ( R23 \ R18 ) )) by L340;
L350: ( ( proj2_4 R18 ) \+\ ( proj2_4 R23 ) ) c= ( ( proj2_4 ( R18 \ R23 ) ) \/ ( proj2_4 ( R23 \ R18 ) ) ) by L349 , XBOOLE_1:13;
thus L351: thesis by L350 , L335;
end;
