:: Substitution in First-Order Formulas -- Part II. {T}he Construction of
:: First-Order Formulas
::  by Patrick Braselmann and Peter Koepke
::
:: Received September 25, 2004
:: Copyright (c) 2004-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, CQC_LANG, QC_LANG1, SUBSTUT1, MCART_1,
      MARGREL1, REALSET1, FINSEQ_1, ORDINAL4, XBOOLEAN, CARD_1, ZFMISC_1,
      RELAT_1, BVFUNC_2, XBOOLE_0, FUNCT_1, TARSKI, ZF_LANG, FUNCT_4, FUNCOP_1,
      CLASSES2, SUBLEMMA, PARTFUN1, CQC_SIM1, ARYTM_3, XXREAL_0, ARYTM_1,
      SUBSTUT2;
 notations TARSKI, XBOOLE_0, ZFMISC_1,
      XTUPLE_0, SUBSET_1, FINSEQ_1, FUNCT_1, QC_LANG1,
      QC_LANG2, QC_LANG3, PARTFUN1, NUMBERS, XCMPLX_0, XXREAL_0, NAT_1,
      CQC_LANG, FUNCOP_1, RELAT_1, FUNCT_4, FUNCT_2, CQC_SIM1, DOMAIN_1,
      MCART_1, SUBSTUT1, SUBLEMMA;
 constructors PARTFUN1, DOMAIN_1, XXREAL_0, NAT_1, INT_1, QC_LANG3, CQC_SIM1,
      SUBLEMMA, RELSET_1, XTUPLE_0;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, ORDINAL1, FUNCOP_1,
      XXREAL_0, XREAL_0, NAT_1, INT_1, QC_LANG1, CQC_LANG, SUBSTUT1, SUBLEMMA,
      CARD_1, XTUPLE_0;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions TARSKI, FUNCOP_1, XTUPLE_0;
 theorems TARSKI, FUNCT_1, MCART_1, XBOOLE_0, XBOOLE_1, CQC_LANG, QC_LANG1,
      ZFMISC_1, RELAT_1, QC_LANG3, PARTFUN1, RELSET_1, QC_LANG2, SUBSTUT1,
      FUNCT_4, SUBLEMMA, CQC_SIM1, FUNCT_2, NAT_1, INT_1, XREAL_1, XXREAL_0,
      FUNCOP_1, CARD_1, XTUPLE_0;
 schemes CQC_LANG, NAT_1;

begin
theorem
L1: (for R1 being QC-alphabet holds (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = ( VERUM R1 ) & ( R21 `2 ) = R19))))
proof
let R1 being QC-alphabet;
let R19 being (CQC_Substitution of R1);
L2: ( VERUM R1 ) = <* [ ( 0 ) , ( 0 ) ] *> by QC_LANG1:def 14;
reconsider D1 = [ ( VERUM R1 ) , R19 ] as (Element of ( QC-Sub-WFF R1 )) by L2 , SUBSTUT1:def 16;
take D1;
set D2 = { B1 where B1 is (Element of ( QC-Sub-WFF R1 )) : ( B1 `1 ) is (Element of ( CQC-WFF R1 )) };
L3: D2 = ( CQC-Sub-WFF R1 ) by SUBSTUT1:def 39;
L4: (for B2 being (Element of ( QC-Sub-WFF R1 )) holds (( B2 `1 ) is (Element of ( CQC-WFF R1 )) implies B2 in ( CQC-Sub-WFF R1 ))) by L3;
L5: ( D1 `1 ) = ( VERUM R1 ) by MCART_1:7;
reconsider D3 = D1 as (Element of ( CQC-Sub-WFF R1 )) by L5 , L4;
L6: ( D3 `2 ) = R19 by MCART_1:7;
thus L7: thesis by L6 , MCART_1:7;
end;
L8: (for R1 being QC-alphabet holds (for R7 being (Element of ( NAT )) holds (for R16 being (QC-pred_symbol of R7 , R1) holds (for B3 , B4 being (Element of ( NAT )) holds ((R16 is (QC-pred_symbol of B3 , R1) & R16 is (QC-pred_symbol of B4 , R1)) implies B3 = B4)))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( NAT ));
let R16 being (QC-pred_symbol of R7 , R1);
let C1 , C2 being (Element of ( NAT ));
assume L9: (R16 is (QC-pred_symbol of C1 , R1) & R16 is (QC-pred_symbol of C2 , R1));
L10: R16 in ( C2 -ary_QC-pred_symbols R1 ) by L9;
L11: R16 in { R25 where R25 is (Element of ( QC-pred_symbols R1 )) : ( the_arity_of R25 ) = C2 } by L10 , QC_LANG1:def 9;
L12: (ex R25 being (Element of ( QC-pred_symbols R1 )) st (R25 = R16 & ( the_arity_of R25 ) = C2)) by L11;
L13: R16 in ( C1 -ary_QC-pred_symbols R1 ) by L9;
L14: R16 in { R24 where R24 is (Element of ( QC-pred_symbols R1 )) : ( the_arity_of R24 ) = C1 } by L13 , QC_LANG1:def 9;
L15: (ex R24 being (Element of ( QC-pred_symbols R1 )) st (R24 = R16 & ( the_arity_of R24 ) = C1)) by L14;
thus L16: thesis by L15 , L12;
end;
theorem
L17: (for R1 being QC-alphabet holds (for R7 being (Element of ( NAT )) holds (for R16 being (QC-pred_symbol of R7 , R1) holds (for R18 being (CQC-variable_list of R7 , R1) holds (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = ( R16 ! R18 ) & ( R21 `2 ) = R19)))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( NAT ));
let R16 being (QC-pred_symbol of R7 , R1);
let R18 being (CQC-variable_list of R7 , R1);
let R19 being (CQC_Substitution of R1);
L18: R16 is (QC-pred_symbol of ( the_arity_of R16 ) , R1) by QC_LANG3:1;
L19: R7 = ( the_arity_of R16 ) by L18 , L8;
L20: ([ ( <* R16 *> ^ R18 ) , R19 ] in ( QC-Sub-WFF R1 ) & ( len R18 ) = ( the_arity_of R16 )) by L19 , CARD_1:def 7 , SUBSTUT1:def 16;
reconsider D4 = [ ( R16 ! R18 ) , R19 ] as (Element of ( QC-Sub-WFF R1 )) by L20 , QC_LANG1:def 12;
set D5 = { B5 where B5 is (Element of ( QC-Sub-WFF R1 )) : ( B5 `1 ) is (Element of ( CQC-WFF R1 )) };
L21: D5 = ( CQC-Sub-WFF R1 ) by SUBSTUT1:def 39;
L22: (for B6 being (Element of ( QC-Sub-WFF R1 )) holds (( B6 `1 ) is (Element of ( CQC-WFF R1 )) implies B6 in ( CQC-Sub-WFF R1 ))) by L21;
take D4;
L23: ( D4 `1 ) = ( R16 ! R18 ) by MCART_1:7;
reconsider D6 = D4 as (Element of ( CQC-Sub-WFF R1 )) by L23 , L22;
L24: ( D6 `2 ) = R19 by MCART_1:7;
thus L25: thesis by L24 , MCART_1:7;
end;
theorem
L26: (for R1 being QC-alphabet holds (for R7 being (Element of ( NAT )) holds (for R16 being (QC-pred_symbol of R7 , R1) holds (for B7 , B8 being (Element of ( NAT )) holds ((R16 is (QC-pred_symbol of B7 , R1) & R16 is (QC-pred_symbol of B8 , R1)) implies B7 = B8))))) by L8;
theorem
L27: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19))) implies (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = ( 'not' R9 ) & ( R21 `2 ) = R19))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
assume L28: (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19)));
let R19 being (CQC_Substitution of R1);
consider R21 being (Element of ( CQC-Sub-WFF R1 )) such that L29: (( R21 `1 ) = R9 & ( R21 `2 ) = R19) by L28;
L30: R21 = [ R9 , R19 ] by L29 , SUBSTUT1:10;
L31: [ R9 , R19 ] in ( QC-Sub-WFF R1 ) by L30;
L32: [ ( @ R9 ) , R19 ] in ( QC-Sub-WFF R1 ) by L31 , QC_LANG1:def 13;
L33: [ ( <* [ 1 , ( 0 ) ] *> ^ ( @ R9 ) ) , R19 ] in ( QC-Sub-WFF R1 ) by L32 , SUBSTUT1:def 16;
reconsider D7 = [ ( 'not' R9 ) , R19 ] as (Element of ( QC-Sub-WFF R1 )) by L33 , QC_LANG1:def 15;
set D8 = { B9 where B9 is (Element of ( QC-Sub-WFF R1 )) : ( B9 `1 ) is (Element of ( CQC-WFF R1 )) };
L34: D8 = ( CQC-Sub-WFF R1 ) by SUBSTUT1:def 39;
L35: (for B10 being (Element of ( QC-Sub-WFF R1 )) holds (( B10 `1 ) is (Element of ( CQC-WFF R1 )) implies B10 in ( CQC-Sub-WFF R1 ))) by L34;
take D7;
L36: ( D7 `1 ) = ( 'not' R9 ) by MCART_1:7;
reconsider D9 = D7 as (Element of ( CQC-Sub-WFF R1 )) by L36 , L35;
L37: ( D9 `2 ) = R19 by MCART_1:7;
thus L38: thesis by L37 , MCART_1:7;
end;
theorem
L39: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (((for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19))) & (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R10 & ( R21 `2 ) = R19)))) implies (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = ( R9 '&' R10 ) & ( R21 `2 ) = R19)))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
assume that
L40: (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19)))
and
L41: (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R10 & ( R21 `2 ) = R19)));
let R19 being (CQC_Substitution of R1);
consider R22 being (Element of ( CQC-Sub-WFF R1 )) such that L42: (( R22 `1 ) = R9 & ( R22 `2 ) = R19) by L40;
consider R23 being (Element of ( CQC-Sub-WFF R1 )) such that L43: (( R23 `1 ) = R10 & ( R23 `2 ) = R19) by L41;
L44: R23 = [ R10 , R19 ] by L43 , SUBSTUT1:10;
L45: [ R10 , R19 ] in ( QC-Sub-WFF R1 ) by L44;
L46: [ ( @ R10 ) , R19 ] in ( QC-Sub-WFF R1 ) by L45 , QC_LANG1:def 13;
L47: R22 = [ R9 , R19 ] by L42 , SUBSTUT1:10;
L48: [ R9 , R19 ] in ( QC-Sub-WFF R1 ) by L47;
L49: [ ( @ R9 ) , R19 ] in ( QC-Sub-WFF R1 ) by L48 , QC_LANG1:def 13;
L50: [ ( ( <* [ 2 , ( 0 ) ] *> ^ ( @ R9 ) ) ^ ( @ R10 ) ) , R19 ] in ( QC-Sub-WFF R1 ) by L49 , L46 , SUBSTUT1:def 16;
reconsider D10 = [ ( R9 '&' R10 ) , R19 ] as (Element of ( QC-Sub-WFF R1 )) by L50 , QC_LANG1:def 16;
set D11 = { B11 where B11 is (Element of ( QC-Sub-WFF R1 )) : ( B11 `1 ) is (Element of ( CQC-WFF R1 )) };
L51: D11 = ( CQC-Sub-WFF R1 ) by SUBSTUT1:def 39;
L52: (for B12 being (Element of ( QC-Sub-WFF R1 )) holds (( B12 `1 ) is (Element of ( CQC-WFF R1 )) implies B12 in ( CQC-Sub-WFF R1 ))) by L51;
take D10;
L53: ( D10 `1 ) = ( R9 '&' R10 ) by MCART_1:7;
reconsider D12 = D10 as (Element of ( CQC-Sub-WFF R1 )) by L53 , L52;
L54: ( D12 `2 ) = R19 by MCART_1:7;
thus L55: thesis by L54 , MCART_1:7;
end;
definition
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R19 being (CQC_Substitution of R1);
redefine func [R9 , R19 ] -> (Element of [: ( QC-WFF R1 ) , ( vSUB R1 ) :]);

coherence by ZFMISC_1:def 2;
end;
theorem
L57: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds ( dom ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) misses { R13 }))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
set D13 = ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) );
L58:
now
set D14 = ( All (R13 , R9) );
set D15 = { R15 where R15 is (bound_QC-variable of R1) : (R15 in ( still_not-bound_in D14 ) & R15 is (Element of ( dom R19 )) & R15 <> R13 & R15 <> ( R19 . R15 )) };
assume L59: ( dom D13 ) meets { R13 };
consider R3 being set such that L60: R3 in ( dom D13 ) and L61: R3 in { R13 } by L59 , XBOOLE_0:3;
L62: D13 = ( R19 | D15 ) by SUBSTUT1:def 6;
L63: D13 = ( ( @ R19 ) | D15 ) by L62 , SUBSTUT1:def 2;
L64: ( @ D13 ) = ( ( @ R19 ) | D15 ) by L63 , SUBSTUT1:def 2;
L65: ( dom ( @ D13 ) ) = ( ( dom ( @ R19 ) ) /\ D15 ) by L64 , RELAT_1:61;
L66: ( dom ( @ D13 ) ) c= D15 by L65 , XBOOLE_1:17;
L67: R3 in ( dom ( @ D13 ) ) by L60 , SUBSTUT1:def 2;
L68: R3 in D15 by L67 , L66;
L69: (ex R14 being (bound_QC-variable of R1) st (R14 = R3 & R14 in ( still_not-bound_in D14 ) & R14 is (Element of ( dom R19 )) & R14 <> R13 & R14 <> ( R19 . R14 ))) by L68;
thus L70: contradiction by L69 , L61 , TARSKI:def 1;
end;
thus L71: thesis by L58;
end;
theorem
L72: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds (R13 in ( rng ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) implies ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) = ( x. ( upVar (( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) , R9) ) ))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
set D16 = ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) );
set D17 = [ ( All (R13 , R9) ) , R19 ];
assume L73: R13 in ( rng D16 );
reconsider D18 = ( D17 `1 ) as (Element of ( CQC-WFF R1 ));
L74: ( D17 `2 ) = R19;
L75: (( bound_in D18 ) = R13 & ( the_scope_of D18 ) = R9) by QC_LANG2:7;
thus L76: thesis by L75 , L73 , L74 , SUBSTUT1:def 36;
end;
theorem
L77: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds ((not R13 in ( rng ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) )) implies ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) = R13)))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
set D19 = ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) );
set D20 = [ ( All (R13 , R9) ) , R19 ];
assume L78: (not R13 in ( rng D19 ));
reconsider D21 = ( D20 `1 ) as (Element of ( CQC-WFF R1 ));
L79: (( D20 `2 ) = R19 & ( bound_in D21 ) = R13) by QC_LANG2:7;
thus L80: thesis by L79 , L78 , SUBSTUT1:def 36;
end;
theorem
L81: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds ( ExpandSub (R13 , R9 , ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) )) ) = ( ( @ ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) +* ( R13 | ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) ) )))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
set D22 = ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) );
L82:
now
reconsider D23 = { [ R13 , ( x. ( upVar (D22 , R9) ) ) ] } as Function;
L83: ( dom D23 ) = { R13 } by RELAT_1:9;
L84: ( dom D22 ) misses ( dom D23 ) by L83 , L57;
L85: ( dom ( @ D22 ) ) misses ( dom D23 ) by L84 , SUBSTUT1:def 2;
L86: ( ( @ D22 ) \/ D23 ) = ( ( @ D22 ) +* D23 ) by L85 , FUNCT_4:31;
assume L87: R13 in ( rng D22 );
L88: ( ExpandSub (R13 , R9 , D22) ) = ( D22 \/ D23 ) by L87 , SUBSTUT1:def 13;
L89: ({ [ R13 , ( x. ( upVar (D22 , R9) ) ) ] } = ( R13 .--> ( x. ( upVar (D22 , R9) ) ) ) & ( ExpandSub (R13 , R9 , D22) ) = ( ( @ D22 ) +* D23 )) by L88 , L86 , FUNCT_4:82 , SUBSTUT1:def 2;
thus L90: thesis by L89 , L87 , L72;
end;
L91:
now
reconsider D24 = { [ R13 , R13 ] } as Function;
L92: ( dom D24 ) = { R13 } by RELAT_1:9;
L93: ( dom D22 ) misses ( dom D24 ) by L92 , L57;
L94: ( dom ( @ D22 ) ) misses ( dom D24 ) by L93 , SUBSTUT1:def 2;
L95: ( ( @ D22 ) \/ D24 ) = ( ( @ D22 ) +* D24 ) by L94 , FUNCT_4:31;
assume L96: (not R13 in ( rng D22 ));
L97: ( ExpandSub (R13 , R9 , D22) ) = ( D22 \/ D24 ) by L96 , SUBSTUT1:def 13;
L98: ({ [ R13 , R13 ] } = ( R13 .--> R13 ) & ( ExpandSub (R13 , R9 , D22) ) = ( ( @ D22 ) +* D24 )) by L97 , L95 , FUNCT_4:82 , SUBSTUT1:def 2;
thus L99: thesis by L98 , L96 , L77;
end;
thus L100: thesis by L91 , L82;
end;
theorem
L101: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds (for R21 being (Element of ( CQC-Sub-WFF R1 )) holds ((( R21 `2 ) = ( ( @ ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) +* ( R13 | ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) ) ) & ( R21 `1 ) = R9) implies ([ R21 , R13 ] is  quantifiable & (ex R22 being (Element of ( CQC-Sub-WFF R1 )) st R22 = [ ( All (R13 , R9) ) , R19 ]))))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
let R21 being (Element of ( CQC-Sub-WFF R1 ));
set D25 = ( ( @ ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) +* ( R13 | ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) ) );
reconsider D26 = R19 as (CQC_Substitution of R1);
assume that
L102: ( R21 `2 ) = D25
and
L103: ( R21 `1 ) = R9;
L104: (( [ R21 , R13 ] `2 ) = R13 & ( ( [ R21 , R13 ] `1 ) `1 ) = R9) by L103;
L105: (( the_scope_of ( All (R13 , R9) ) ) = R9 & ( All (R13 , R9) ) is  universal) by QC_LANG1:def 21 , QC_LANG2:7;
L106: (D25 = ( ExpandSub (R13 , R9 , ( RestrictSub (R13 , ( All (R13 , R9) ) , D26) )) ) & ( bound_in ( All (R13 , R9) ) ) = R13) by L81 , QC_LANG2:7;
L107: ( All (R13 , R9) ) , D26 PQSub D25 by L106 , L105 , SUBSTUT1:def 14;
consider R2 being set such that L108: R2 = [ [ ( All (R13 , R9) ) , D26 ] , D25 ] and L109: ( All (R13 , R9) ) , D26 PQSub D25 by L107;
L110: R2 in ( QSub R1 ) by L108 , L109 , SUBSTUT1:def 15;
L111: ( ( QSub R1 ) . [ ( All (R13 , R9) ) , D26 ] ) = D25 by L110 , L108 , FUNCT_1:1;
L112: ( ( [ R21 , R13 ] `1 ) `2 ) = D25 by L102;
thus L113: [ R21 , R13 ] is  quantifiable by L112 , L111 , L104 , SUBSTUT1:def 22;
L114: [ R21 , R13 ] is  quantifiable by L111 , L112 , L104 , SUBSTUT1:def 22;
reconsider D27 = D26 as (second_Q_comp of [ R21 , R13 ]) by L114 , L111 , L112 , L104 , SUBSTUT1:def 23;
take D28 = ( CQCSub_All ([ R21 , R13 ] , D27) );
L115: D28 = ( Sub_All ([ R21 , R13 ] , D27) ) by L114 , SUBLEMMA:def 5;
thus L116: thesis by L115 , L104 , L114 , SUBSTUT1:def 24;
end;
theorem
L117: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19))) implies (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = ( All (R13 , R9) ) & ( R21 `2 ) = R19)))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L118: (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19)));
let R19 being (CQC_Substitution of R1);
set D29 = ( ( @ ( RestrictSub (R13 , ( All (R13 , R9) ) , R19) ) ) +* ( R13 | ( S_Bound [ ( All (R13 , R9) ) , R19 ] ) ) );
L119: (D29 is (CQC_Substitution of R1) iff D29 is (Element of ( PFuncs (( bound_QC-variables R1 ) , ( bound_QC-variables R1 )) ))) by SUBSTUT1:def 1;
reconsider D30 = D29 as (CQC_Substitution of R1) by L119 , PARTFUN1:45;
L120: (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = D30)) by L118;
consider R22 being (Element of ( CQC-Sub-WFF R1 )) such that L121: R22 = [ ( All (R13 , R9) ) , R19 ] by L120 , L101;
take R22;
thus L122: thesis by L121 , MCART_1:7;
end;
theorem
L123: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19)))))
proof
let R1 being QC-alphabet;
defpred S1[ (Element of ( CQC-WFF R1 )) ] means (for R19 being (CQC_Substitution of R1) holds (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = $1 & ( R21 `2 ) = R19)));
L124: (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R7 being (Element of ( NAT )) holds (for B13 being (CQC-variable_list of R7 , R1) holds (for B14 being (QC-pred_symbol of R7 , R1) holds (S1[ ( VERUM R1 ) ] & S1[ ( B14 ! B13 ) ] & (S1[ R9 ] implies S1[ ( 'not' R9 ) ]) & ((S1[ R9 ] & S1[ R10 ]) implies S1[ ( R9 '&' R10 ) ]) & (S1[ R9 ] implies S1[ ( All (R13 , R9) ) ])))))))) by L1 , L17 , L27 , L39 , L117;
thus L125: (for R9 being (Element of ( CQC-WFF R1 )) holds S1[ R9 ]) from CQC_LANG:sch 1(L124);
end;
definition
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R19 being (CQC_Substitution of R1);
redefine func [R9 , R19 ] -> (Element of ( CQC-Sub-WFF R1 ));

coherence
proof
L126: (ex R21 being (Element of ( CQC-Sub-WFF R1 )) st (( R21 `1 ) = R9 & ( R21 `2 ) = R19)) by L123;
thus L127: thesis by L126 , SUBSTUT1:10;
end;
end;
notation
let R1 being QC-alphabet;
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
synonym Sbst (R13 , R14) for R13 .--> R14;
end;
definition
let R1 being QC-alphabet;
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
redefine func Sbst (R13 , R14) -> (CQC_Substitution of R1);

coherence
proof
L130: (( R13 .--> R14 ) is (CQC_Substitution of R1) iff ( R13 .--> R14 ) is (Element of ( PFuncs (( bound_QC-variables R1 ) , ( bound_QC-variables R1 )) ))) by SUBSTUT1:def 1;
L131: (( dom ( R13 .--> R14 ) ) = { R13 } & ( rng ( R13 .--> R14 ) ) = { R14 }) by FUNCOP_1:8 , FUNCOP_1:13;
L132: ( R13 .--> R14 ) is (PartFunc of ( bound_QC-variables R1 ) , ( bound_QC-variables R1 )) by L131 , RELSET_1:4;
thus L133: thesis by L132 , L130 , PARTFUN1:45;
end;
end;
begin
definition
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
func R9 . (R13 , R14) -> (Element of ( CQC-WFF R1 )) equals 
( CQC_Sub [ R9 , ( Sbst (R13 , R14) ) ] );
coherence;
end;
scheme CQCInd1 { F1() -> QC-alphabet , P1[set] } : (for B15 being (Element of ( CQC-WFF F1() )) holds P1[ B15 ])
provided
L136: (for B16 being (Element of ( CQC-WFF F1() )) holds (( QuantNbr B16 ) = ( 0 ) implies P1[ B16 ]))
and
L137: (for R7 being (Element of ( NAT )) holds ((for B17 being (Element of ( CQC-WFF F1() )) holds (( QuantNbr B17 ) = R7 implies P1[ B17 ])) implies (for B18 being (Element of ( CQC-WFF F1() )) holds (( QuantNbr B18 ) = ( R7 + 1 ) implies P1[ B18 ]))))
proof
let C3 being (Element of ( CQC-WFF F1() ));
defpred S2[ (Element of ( NAT )) ] means (for B19 being (Element of ( CQC-WFF F1() )) holds (( QuantNbr B19 ) = $1 implies P1[ B19 ]));
L138: (for B20 being (Element of ( NAT )) holds (S2[ B20 ] implies S2[ ( B20 + 1 ) ])) by L137;
L139: S2[ ( 0 ) ] by L136;
L140: (for R7 being (Element of ( NAT )) holds S2[ R7 ]) from NAT_1:sch 1(L139 , L138);
L141: S2[ ( QuantNbr C3 ) ] by L140;
thus L142: thesis by L141;
end;
scheme CQCInd2 { F2() -> QC-alphabet , P2[set] } : (for B21 being (Element of ( CQC-WFF F2() )) holds P2[ B21 ])
provided
L143: (for B22 being (Element of ( CQC-WFF F2() )) holds (( QuantNbr B22 ) <= ( 0 ) implies P2[ B22 ]))
and
L144: (for R7 being (Element of ( NAT )) holds ((for B23 being (Element of ( CQC-WFF F2() )) holds (( QuantNbr B23 ) <= R7 implies P2[ B23 ])) implies (for B24 being (Element of ( CQC-WFF F2() )) holds (( QuantNbr B24 ) <= ( R7 + 1 ) implies P2[ B24 ]))))
proof
let C4 being (Element of ( CQC-WFF F2() ));
defpred S3[ (Element of ( NAT )) ] means (for B25 being (Element of ( CQC-WFF F2() )) holds (( QuantNbr B25 ) <= $1 implies P2[ B25 ]));
L145: (for R7 being (Element of ( NAT )) holds (S3[ R7 ] implies S3[ ( R7 + 1 ) ])) by L144;
L146: S3[ ( 0 ) ] by L143;
L147: (for R7 being (Element of ( NAT )) holds S3[ R7 ]) from NAT_1:sch 1(L146 , L145);
L148: S3[ ( QuantNbr C4 ) ] by L147;
thus L149: thesis by L148;
end;
theorem
L150: (for R1 being QC-alphabet holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds ( ( VERUM R1 ) . (R13 , R14) ) = ( VERUM R1 ))))
proof
let R1 being QC-alphabet;
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
set D31 = [ ( VERUM R1 ) , ( Sbst (R13 , R14) ) ];
L151: D31 is R1 -Sub_VERUM by SUBSTUT1:def 19;
thus L152: thesis by L151 , SUBLEMMA:3;
end;
theorem
L153: (for R1 being QC-alphabet holds (for R7 being (Element of ( NAT )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (for R16 being (QC-pred_symbol of R7 , R1) holds (for R17 being (CQC-variable_list of R7 , R1) holds (( ( R16 ! R17 ) . (R13 , R14) ) = ( R16 ! ( CQC_Subst (R17 , ( Sbst (R13 , R14) )) ) ) & ( QuantNbr ( R16 ! R17 ) ) = ( QuantNbr ( ( R16 ! R17 ) . (R13 , R14) ) ))))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( NAT ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
let R16 being (QC-pred_symbol of R7 , R1);
let R17 being (CQC-variable_list of R7 , R1);
set D32 = [ ( R16 ! R17 ) , ( Sbst (R13 , R14) ) ];
L154: D32 = ( Sub_P (R16 , R17 , ( Sbst (R13 , R14) )) ) by SUBSTUT1:9;
L155: ( ( R16 ! R17 ) . (R13 , R14) ) = ( R16 ! ( CQC_Subst (R17 , ( Sbst (R13 , R14) )) ) ) by L154 , SUBLEMMA:8;
L156: ( QuantNbr ( R16 ! ( CQC_Subst (R17 , ( Sbst (R13 , R14) )) ) ) ) = ( 0 ) by CQC_SIM1:15;
thus L157: thesis by L156 , L155 , CQC_SIM1:15;
end;
theorem
L158: (for R1 being QC-alphabet holds (for R7 being (Element of ( NAT )) holds (for R16 being (QC-pred_symbol of R7 , R1) holds (for R17 being (CQC-variable_list of R7 , R1) holds (for R19 being (CQC_Substitution of R1) holds ( QuantNbr ( R16 ! R17 ) ) = ( QuantNbr ( CQC_Sub [ ( R16 ! R17 ) , R19 ] ) ))))))
proof
let R1 being QC-alphabet;
let R7 being (Element of ( NAT ));
let R16 being (QC-pred_symbol of R7 , R1);
let R17 being (CQC-variable_list of R7 , R1);
let R19 being (CQC_Substitution of R1);
set D33 = [ ( R16 ! R17 ) , R19 ];
L159: D33 = ( Sub_P (R16 , R17 , R19) ) by SUBSTUT1:9;
L160: ( CQC_Sub [ ( R16 ! R17 ) , R19 ] ) = ( R16 ! ( CQC_Subst (R17 , R19) ) ) by L159 , SUBLEMMA:8;
L161: ( QuantNbr ( R16 ! ( CQC_Subst (R17 , R19) ) ) ) = ( 0 ) by CQC_SIM1:15;
thus L162: thesis by L161 , L160 , CQC_SIM1:15;
end;
definition
let R1 being QC-alphabet;
let C5 being (Element of ( QC-Sub-WFF R1 ));
redefine func C5 `2 -> (CQC_Substitution of R1);

coherence
proof
L163: (ex B26 being (Element of ( QC-WFF R1 )) st (ex R19 being (CQC_Substitution of R1) st C5 = [ B26 , R19 ])) by SUBSTUT1:8;
thus L164: thesis by L163 , MCART_1:7;
end;
end;
theorem
L166: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R19 being (CQC_Substitution of R1) holds [ ( 'not' R9 ) , R19 ] = ( Sub_not [ R9 , R19 ] ))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R19 being (CQC_Substitution of R1);
set D34 = [ R9 , R19 ];
L167: ( Sub_not D34 ) = [ ( 'not' ( D34 `1 ) ) , ( D34 `2 ) ] by SUBSTUT1:def 20;
thus L168: thesis by L167;
end;
theorem
L169: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (( 'not' ( R9 . (R13 , R14) ) ) = ( 'not' ( R9 . (R13 , R14) ) ) & (( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) ) implies ( QuantNbr ( 'not' R9 ) ) = ( QuantNbr ( 'not' ( R9 . (R13 , R14) ) ) )))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
set D35 = [ ( 'not' R9 ) , ( Sbst (R13 , R14) ) ];
L170: D35 = ( Sub_not [ R9 , ( Sbst (R13 , R14) ) ] ) by L166;
L171: ( ( 'not' R9 ) . (R13 , R14) ) = ( 'not' ( CQC_Sub [ R9 , ( Sbst (R13 , R14) ) ] ) ) by L170 , SUBSTUT1:29;
L172: (( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) ) implies ( QuantNbr ( 'not' R9 ) ) = ( QuantNbr ( ( 'not' R9 ) . (R13 , R14) ) ))
proof
assume L173: ( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) );
L174: ( QuantNbr ( ( 'not' R9 ) . (R13 , R14) ) ) = ( QuantNbr ( R9 . (R13 , R14) ) ) by L171 , CQC_SIM1:16;
thus L175: thesis by L174 , L173 , CQC_SIM1:16;
end;
thus L176: thesis by L172 , L170 , SUBSTUT1:29;
end;
theorem
L177: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) )) implies (for R19 being (CQC_Substitution of R1) holds ( QuantNbr ( 'not' R9 ) ) = ( QuantNbr ( CQC_Sub [ ( 'not' R9 ) , R19 ] ) )))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
assume L178: (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) ));
let R19 being (CQC_Substitution of R1);
set D36 = [ ( 'not' R9 ) , R19 ];
L179: D36 = ( Sub_not [ R9 , R19 ] ) by L166;
L180: ( QuantNbr ( CQC_Sub D36 ) ) = ( QuantNbr ( 'not' ( CQC_Sub [ R9 , R19 ] ) ) ) by L179 , SUBSTUT1:29
.= ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) ) by CQC_SIM1:16
.= ( QuantNbr R9 ) by L178;
thus L181: thesis by L180 , CQC_SIM1:16;
end;
theorem
L182: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (for R19 being (CQC_Substitution of R1) holds [ ( R9 '&' R10 ) , R19 ] = ( CQCSub_& ([ R9 , R19 ] , [ R10 , R19 ]) )))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
let R19 being (CQC_Substitution of R1);
set D37 = [ R9 , R19 ];
set D38 = [ R10 , R19 ];
L183: (( D37 `1 ) = R9 & ( D38 `1 ) = R10);
L184: (( D37 `2 ) = R19 & ( D38 `2 ) = R19);
L185: ( CQCSub_& (D37 , D38) ) = ( Sub_& (D37 , D38) ) by L184 , SUBLEMMA:def 3;
thus L186: thesis by L185 , L184 , L183 , SUBSTUT1:def 21;
end;
theorem
L187: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R14 being (bound_QC-variable of R1) holds (( ( R9 '&' R10 ) . (R13 , R14) ) = ( ( R9 . (R13 , R14) ) '&' ( R10 . (R13 , R14) ) ) & ((( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) ) & ( QuantNbr R10 ) = ( QuantNbr ( R10 . (R13 , R14) ) )) implies ( QuantNbr ( R9 '&' R10 ) ) = ( QuantNbr ( ( R9 '&' R10 ) . (R13 , R14) ) ))))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R14 being (bound_QC-variable of R1);
set D39 = [ ( R9 '&' R10 ) , ( Sbst (R13 , R14) ) ];
set D40 = [ R9 , ( Sbst (R13 , R14) ) ];
set D41 = [ R10 , ( Sbst (R13 , R14) ) ];
L188: (( D40 `2 ) = ( Sbst (R13 , R14) ) & ( D41 `2 ) = ( Sbst (R13 , R14) ));
L189: D39 = ( CQCSub_& (D40 , D41) ) by L182;
L190: D39 = ( Sub_& (D40 , D41) ) by L189 , L188 , SUBLEMMA:def 3;
L191: ( ( R9 '&' R10 ) . (R13 , R14) ) = ( ( CQC_Sub D40 ) '&' ( CQC_Sub D41 ) ) by L190 , L188 , SUBSTUT1:31;
L192: ((( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) ) & ( QuantNbr R10 ) = ( QuantNbr ( R10 . (R13 , R14) ) )) implies ( QuantNbr ( R9 '&' R10 ) ) = ( QuantNbr ( ( R9 '&' R10 ) . (R13 , R14) ) ))
proof
assume L193: (( QuantNbr R9 ) = ( QuantNbr ( R9 . (R13 , R14) ) ) & ( QuantNbr R10 ) = ( QuantNbr ( R10 . (R13 , R14) ) ));
L194: ( QuantNbr ( ( R9 '&' R10 ) . (R13 , R14) ) ) = ( ( QuantNbr ( R9 . (R13 , R14) ) ) + ( QuantNbr ( R10 . (R13 , R14) ) ) ) by L191 , CQC_SIM1:17;
thus L195: thesis by L194 , L193 , CQC_SIM1:17;
end;
thus L196: thesis by L192 , L188 , L190 , SUBSTUT1:31;
end;
theorem
L197: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (((for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) )) & (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R10 ) = ( QuantNbr ( CQC_Sub [ R10 , R19 ] ) ))) implies (for R19 being (CQC_Substitution of R1) holds ( QuantNbr ( R9 '&' R10 ) ) = ( QuantNbr ( CQC_Sub [ ( R9 '&' R10 ) , R19 ] ) ))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
assume that
L198: (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) ))
and
L199: (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R10 ) = ( QuantNbr ( CQC_Sub [ R10 , R19 ] ) ));
let R19 being (CQC_Substitution of R1);
set D42 = [ ( R9 '&' R10 ) , R19 ];
set D43 = [ R9 , R19 ];
set D44 = [ R10 , R19 ];
L200: (( D43 `2 ) = R19 & ( D44 `2 ) = R19);
L201: D42 = ( CQCSub_& (D43 , D44) ) by L182;
L202: D42 = ( Sub_& (D43 , D44) ) by L201 , L200 , SUBLEMMA:def 3;
L203: ( CQC_Sub D42 ) = ( ( CQC_Sub D43 ) '&' ( CQC_Sub D44 ) ) by L202 , L200 , SUBSTUT1:31;
L204: ( QuantNbr ( CQC_Sub D42 ) ) = ( ( QuantNbr ( CQC_Sub D43 ) ) + ( QuantNbr ( CQC_Sub D44 ) ) ) by L203 , CQC_SIM1:17
.= ( ( QuantNbr R9 ) + ( QuantNbr ( CQC_Sub D44 ) ) ) by L198
.= ( ( QuantNbr R9 ) + ( QuantNbr R10 ) ) by L199;
thus L205: thesis by L204 , CQC_SIM1:17;
end;
definition
let R1 being QC-alphabet;
func CFQ R1 -> (Function of ( CQC-Sub-WFF R1 ) , ( vSUB R1 )) equals 
( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) );
coherence
proof
L206:
now
let R2 being set;
assume L207: R2 in ( CQC-Sub-WFF R1 );
consider C6 being (Element of ( QC-WFF R1 )), R19 being (CQC_Substitution of R1) such that L208: R2 = [ C6 , R19 ] by L207 , SUBSTUT1:8;
L209:
now
set D45 = ( {} );
assume L210: (not C6 is  universal);
L211: C6 , R19 PQSub D45 by L210 , SUBSTUT1:def 14;
L212: [ [ C6 , R19 ] , D45 ] in ( QSub R1 ) by L211 , SUBSTUT1:def 15;
thus L213: R2 in ( dom ( QSub R1 ) ) by L212 , L208 , FUNCT_1:1;
end;
L214:
now
set D46 = ( ExpandSub (( bound_in C6 ) , ( the_scope_of C6 ) , ( RestrictSub (( bound_in C6 ) , C6 , R19) )) );
assume L215: C6 is  universal;
L216: C6 , R19 PQSub D46 by L215 , SUBSTUT1:def 14;
L217: [ [ C6 , R19 ] , D46 ] in ( QSub R1 ) by L216 , SUBSTUT1:def 15;
thus L218: R2 in ( dom ( QSub R1 ) ) by L217 , L208 , FUNCT_1:1;
end;
thus L219: R2 in ( dom ( QSub R1 ) ) by L214 , L209;
end;
L220: ( CQC-Sub-WFF R1 ) c= ( dom ( QSub R1 ) ) by L206 , TARSKI:def 3;
L221: ( dom ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) ) = ( CQC-Sub-WFF R1 ) by L220 , RELAT_1:62;
L222: ( rng ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) ) c= ( vSUB R1 )
proof
let R3 being set;
assume L223: R3 in ( rng ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) );
consider R2 being set such that L224: (R2 in ( dom ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) ) & ( ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) . R2 ) = R3) by L223 , FUNCT_1:def 3;
L225: ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) c= ( QSub R1 ) by RELAT_1:59;
L226: [ R2 , R3 ] in ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) by L224 , FUNCT_1:1;
consider C7 being (Element of ( QC-WFF R1 )), R19 being (CQC_Substitution of R1), R4 being set such that L227: [ R2 , R3 ] = [ [ C7 , R19 ] , R4 ] and L228: C7 , R19 PQSub R4 by L226 , L225 , SUBSTUT1:def 15;
L229:
now
L230: (R4 is (CQC_Substitution of R1) iff R4 is (Element of ( PFuncs (( bound_QC-variables R1 ) , ( bound_QC-variables R1 )) ))) by SUBSTUT1:def 1;
assume L231: (not C7 is  universal);
L232: R4 = ( {} ) by L231 , L228 , SUBSTUT1:def 14;
L233: R4 is (PartFunc of ( bound_QC-variables R1 ) , ( bound_QC-variables R1 )) by L232 , RELSET_1:12;
thus L234: R3 is (CQC_Substitution of R1) by L233 , L230 , L227 , PARTFUN1:45 , XTUPLE_0:1;
end;
L235:
now
assume L236: C7 is  universal;
L237: R4 = ( ExpandSub (( bound_in C7 ) , ( the_scope_of C7 ) , ( RestrictSub (( bound_in C7 ) , C7 , R19) )) ) by L236 , L228 , SUBSTUT1:def 14;
thus L238: R3 is (CQC_Substitution of R1) by L237 , L227 , XTUPLE_0:1;
end;
thus L239: thesis by L235 , L229;
end;
thus L240: thesis by L222 , L221 , FUNCT_2:2;
end;
end;
definition
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
func QScope (R9 , R13 , R19) ->  CQC-WFF-like (Element of [: ( QC-Sub-WFF R1 ) , ( bound_QC-variables R1 ) :]) equals 
[ [ R9 , ( ( CFQ R1 ) . [ ( All (R13 , R9) ) , R19 ] ) ] , R13 ];
coherence;
end;
definition
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
func Qsc (R9 , R13 , R19) -> (second_Q_comp of ( QScope (R9 , R13 , R19) )) equals 
R19;
coherence
proof
L243: ( ( QScope (R9 , R13 , R19) ) `1 ) = [ R9 , ( ( CFQ R1 ) . [ ( All (R13 , R9) ) , R19 ] ) ] by MCART_1:7;
L244: ( ( ( QScope (R9 , R13 , R19) ) `1 ) `2 ) = ( ( ( QSub R1 ) | ( CQC-Sub-WFF R1 ) ) . [ ( All (R13 , R9) ) , R19 ] ) by L243 , MCART_1:7;
L245: ( ( ( QScope (R9 , R13 , R19) ) `1 ) `2 ) = ( ( QSub R1 ) . [ ( All (R13 , R9) ) , R19 ] ) by L244 , FUNCT_1:49;
L246: (( ( QScope (R9 , R13 , R19) ) `2 ) = R13 & ( ( ( QScope (R9 , R13 , R19) ) `1 ) `1 ) = R9) by L243 , MCART_1:7;
L247: ( QScope (R9 , R13 , R19) ) is  quantifiable by L246 , L245 , SUBSTUT1:def 22;
thus L248: thesis by L247 , L246 , L245 , SUBSTUT1:def 23;
end;
end;
theorem
L250: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R19 being (CQC_Substitution of R1) holds ([ ( All (R13 , R9) ) , R19 ] = ( CQCSub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) & ( QScope (R9 , R13 , R19) ) is  quantifiable)))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
let R19 being (CQC_Substitution of R1);
set D47 = [ R9 , ( ( CFQ R1 ) . [ ( All (R13 , R9) ) , R19 ] ) ];
set D48 = [ [ R9 , ( ( CFQ R1 ) . [ ( All (R13 , R9) ) , R19 ] ) ] , R13 ];
L251: (( D48 `2 ) = R13 & ( ( D48 `1 ) `1 ) = R9);
L252: [ ( All (R13 , R9) ) , R19 ] in ( CQC-Sub-WFF R1 );
L253: [ ( All (R13 , R9) ) , R19 ] in ( dom ( CFQ R1 ) ) by L252 , FUNCT_2:def 1;
L254: ( ( D48 `1 ) `2 ) = ( ( QSub R1 ) . [ ( All (( D48 `2 ) , ( ( D48 `1 ) `1 )) ) , R19 ] ) by L253 , FUNCT_1:47;
L255: D48 is  quantifiable by L254 , SUBSTUT1:def 22;
L256: ( CQCSub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) = ( Sub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) by L255 , SUBLEMMA:def 5;
thus L257: thesis by L256 , L251 , L255 , SUBSTUT1:def 24;
end;
theorem
L258: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds ((for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) )) implies (for R19 being (CQC_Substitution of R1) holds ( QuantNbr ( All (R13 , R9) ) ) = ( QuantNbr ( CQC_Sub [ ( All (R13 , R9) ) , R19 ] ) ))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
let R13 being (bound_QC-variable of R1);
assume L259: (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) ));
let R19 being (CQC_Substitution of R1);
set D49 = [ ( All (R13 , R9) ) , R19 ];
set D50 = [ R9 , ( ( CFQ R1 ) . [ ( All (R13 , R9) ) , R19 ] ) ];
set D51 = ( S_Bound ( @ ( CQCSub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) ) );
L260: ( QScope (R9 , R13 , R19) ) is  quantifiable by L250;
L261: ( Sub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) = ( CQCSub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) by L250 , SUBLEMMA:def 5
.= D49 by L250;
L262: D49 is  Sub_universal by L261 , L260 , SUBSTUT1:def 28;
L263: ( CQC_Sub D49 ) = ( CQCQuant (D49 , ( CQC_Sub ( CQCSub_the_scope_of D49 ) )) ) by L262 , SUBLEMMA:28;
L264: ( CQCSub_the_scope_of D49 ) = ( Sub_the_scope_of ( Sub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) ) by L261 , L262 , SUBLEMMA:def 6
.= ( [ D50 , R13 ] `1 ) by L260 , SUBSTUT1:21
.= D50;
L265: ( CQC_Sub D49 ) = ( CQCQuant (( CQCSub_All (( QScope (R9 , R13 , R19) ) , ( Qsc (R9 , R13 , R19) )) ) , ( CQC_Sub D50 )) ) by L264 , L263 , L250;
L266: ( QuantNbr ( CQC_Sub D49 ) ) = ( QuantNbr ( All (D51 , ( CQC_Sub D50 )) ) ) by L265 , L250 , SUBLEMMA:31
.= ( ( QuantNbr ( CQC_Sub D50 ) ) + 1 ) by CQC_SIM1:18
.= ( ( QuantNbr R9 ) + 1 ) by L259;
thus L267: thesis by L266 , CQC_SIM1:18;
end;
theorem
L268: (for R1 being QC-alphabet holds (for R19 being (CQC_Substitution of R1) holds ( QuantNbr ( VERUM R1 ) ) = ( QuantNbr ( CQC_Sub [ ( VERUM R1 ) , R19 ] ) )))
proof
let R1 being QC-alphabet;
let R19 being (CQC_Substitution of R1);
L269: [ ( VERUM R1 ) , R19 ] is R1 -Sub_VERUM by SUBSTUT1:def 19;
thus L270: thesis by L269 , SUBLEMMA:3;
end;
theorem
L271: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R19 being (CQC_Substitution of R1) holds ( QuantNbr R9 ) = ( QuantNbr ( CQC_Sub [ R9 , R19 ] ) ))))
proof
let R1 being QC-alphabet;
defpred S4[ (Element of ( CQC-WFF R1 )) ] means (for R19 being (CQC_Substitution of R1) holds ( QuantNbr $1 ) = ( QuantNbr ( CQC_Sub [ $1 , R19 ] ) ));
L272: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R7 being (Element of ( NAT )) holds (for B27 being (CQC-variable_list of R7 , R1) holds (for B28 being (QC-pred_symbol of R7 , R1) holds (S4[ ( VERUM R1 ) ] & S4[ ( B28 ! B27 ) ] & (S4[ R11 ] implies S4[ ( 'not' R11 ) ]) & ((S4[ R11 ] & S4[ R12 ]) implies S4[ ( R11 '&' R12 ) ]) & (S4[ R11 ] implies S4[ ( All (R13 , R11) ) ])))))))) by L158 , L177 , L197 , L258 , L268;
thus L273: (for R11 being (Element of ( CQC-WFF R1 )) holds S4[ R11 ]) from CQC_LANG:sch 1(L272);
end;
theorem
L274: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (R9 is  atomic implies (ex R7 being (Element of ( NAT )) st (ex R16 being (QC-pred_symbol of R7 , R1) st (ex R18 being (CQC-variable_list of R7 , R1) st R9 = ( R16 ! R18 )))))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
assume L275: R9 is  atomic;
consider C8 being (Element of ( NAT )), C9 being (QC-pred_symbol of C8 , R1), C10 being (QC-variable_list of C8 , R1) such that L276: R9 = ( C9 ! C10 ) by L275 , QC_LANG1:def 18;
L277: { ( C10 . R6 ) where R6 is (Element of ( NAT )) : (1 <= R6 & R6 <= ( len C10 ) & ( C10 . R6 ) in ( fixed_QC-variables R1 )) } = ( {} ) by L276 , CQC_LANG:7;
L278: { ( C10 . R5 ) where R5 is (Element of ( NAT )) : (1 <= R5 & R5 <= ( len C10 ) & ( C10 . R5 ) in ( free_QC-variables R1 )) } = ( {} ) by L276 , CQC_LANG:7;
reconsider D52 = C10 as (CQC-variable_list of C8 , R1) by L278 , L277 , CQC_LANG:5;
take C8;
take C9;
take D52;
thus L279: thesis by L276;
end;
scheme CQCInd3 { F3() -> QC-alphabet , P3[set] } : (for B29 being (Element of ( CQC-WFF F3() )) holds (( QuantNbr B29 ) = ( 0 ) implies P3[ B29 ]))
provided
L280: (for B30 , B31 being (Element of ( CQC-WFF F3() )) holds (for B32 being (bound_QC-variable of F3()) holds (for R7 being (Element of ( NAT )) holds (for B33 being (CQC-variable_list of R7 , F3()) holds (for B34 being (QC-pred_symbol of R7 , F3()) holds (P3[ ( VERUM F3() ) ] & P3[ ( B34 ! B33 ) ] & (P3[ B30 ] implies P3[ ( 'not' B30 ) ]) & ((P3[ B30 ] & P3[ B31 ]) implies P3[ ( B30 '&' B31 ) ])))))))
proof
defpred S5[ (Element of ( CQC-WFF F3() )) ] means (( QuantNbr $1 ) = ( 0 ) implies P3[ $1 ]);
L281: (for B35 being (bound_QC-variable of F3()) holds (for B36 being (Element of ( CQC-WFF F3() )) holds (S5[ B36 ] implies S5[ ( All (B35 , B36) ) ])))
proof
let C11 being (bound_QC-variable of F3());
let C12 being (Element of ( CQC-WFF F3() ));
assume that
L282: S5[ C12 ];
assume L283: ( QuantNbr ( All (C11 , C12) ) ) = ( 0 );
L284: ( ( QuantNbr C12 ) + 1 ) = ( 0 ) by L283 , CQC_SIM1:18;
thus L285: thesis by L284;
end;
L286: (for B37 , B38 being (Element of ( CQC-WFF F3() )) holds ((S5[ B37 ] & S5[ B38 ]) implies S5[ ( B37 '&' B38 ) ]))
proof
let C13 , C14 being (Element of ( CQC-WFF F3() ));
assume that
L287: (S5[ C13 ] & S5[ C14 ]);
assume L288: ( QuantNbr ( C13 '&' C14 ) ) = ( 0 );
L289: ( ( QuantNbr C13 ) + ( QuantNbr C14 ) ) = ( 0 ) by L288 , CQC_SIM1:17;
thus L290: thesis by L289 , L280 , L287;
end;
L291: (for B39 , B40 being (Element of ( CQC-WFF F3() )) holds (for B41 being (bound_QC-variable of F3()) holds (for R7 being (Element of ( NAT )) holds (for B42 being (CQC-variable_list of R7 , F3()) holds (for B43 being (QC-pred_symbol of R7 , F3()) holds (S5[ ( VERUM F3() ) ] & S5[ ( B43 ! B42 ) ] & (S5[ B39 ] implies S5[ ( 'not' B39 ) ]) & ((S5[ B39 ] & S5[ B40 ]) implies S5[ ( B39 '&' B40 ) ]) & (S5[ B39 ] implies S5[ ( All (B41 , B39) ) ]))))))) by L286 , L280 , L281 , CQC_SIM1:16;
L292: (for B44 being (Element of ( CQC-WFF F3() )) holds S5[ B44 ]) from CQC_LANG:sch 1(L291);
thus L293: thesis by L292;
end;
begin
definition
let R1 being QC-alphabet;
let C15 , C16 being (QC-formula of R1);
assume L294: C15 is_subformula_of C16;
mode PATH of C15 , C16
 -> FinSequence
means :L295: (1 <= ( len it ) & ( it . 1 ) = C15 & ( it . ( len it ) ) = C16 & (for R7 being (Element of ( NAT )) holds ((1 <= R7 & R7 < ( len it )) implies (ex B45 , B46 being (Element of ( QC-WFF R1 )) st (( it . R7 ) = B45 & ( it . ( R7 + 1 ) ) = B46 & B45 is_immediate_constituent_of B46)))));
existence
proof
L296: (ex R8 being (Element of ( NAT )) st (ex R29 being FinSequence st (1 <= R8 & ( len R29 ) = R8 & ( R29 . 1 ) = C15 & ( R29 . R8 ) = C16 & (for R7 being (Element of ( NAT )) holds ((1 <= R7 & R7 < R8) implies (ex B47 , B48 being (Element of ( QC-WFF R1 )) st (( R29 . R7 ) = B47 & ( R29 . ( R7 + 1 ) ) = B48 & B47 is_immediate_constituent_of B48))))))) by L294 , QC_LANG2:def 20;
consider R29 being FinSequence such that L297: (ex R8 being (Element of ( NAT )) st (1 <= R8 & ( len R29 ) = R8 & ( R29 . 1 ) = C15 & ( R29 . R8 ) = C16 & (for R7 being (Element of ( NAT )) holds ((1 <= R7 & R7 < R8) implies (ex B49 , B50 being (Element of ( QC-WFF R1 )) st (( R29 . R7 ) = B49 & ( R29 . ( R7 + 1 ) ) = B50 & B49 is_immediate_constituent_of B50)))))) by L296;
take R29;
thus L298: thesis by L297;
end;
end;
theorem
L300: (for R1 being QC-alphabet holds (for R5 being (Element of ( NAT )) holds (for R26 being (QC-formula of R1) holds (for R27 being (QC-formula of R1) holds (for B51 being (PATH of R26 , R27) holds ((R26 is_subformula_of R27 & 1 <= R5 & R5 <= ( len B51 )) implies (ex R28 being (QC-formula of R1) st (R28 = ( B51 . R5 ) & R28 is_subformula_of R27))))))))
proof
let R1 being QC-alphabet;
let R5 being (Element of ( NAT ));
let R26 being (QC-formula of R1);
let R27 being (QC-formula of R1);
let C17 being (PATH of R26 , R27);
set D53 = ( len C17 );
assume that
L301: R26 is_subformula_of R27
and
L302: 1 <= R5
and
L303: R5 <= D53;
L304: ( D53 + 1 ) <= ( D53 + R5 ) by L302 , XREAL_1:6;
L305: ( ( D53 + 1 ) + ( - 1 ) ) <= ( ( D53 + R5 ) + ( - 1 ) ) by L304 , XREAL_1:6;
L306: ( D53 + ( - R5 ) ) <= ( ( ( D53 - 1 ) + R5 ) + ( - R5 ) ) by L305 , XREAL_1:6;
L307: ( R5 + ( - R5 ) ) <= ( D53 + ( - R5 ) ) by L303 , XREAL_1:6;
reconsider D54 = ( D53 - R5 ) as (Element of ( NAT )) by L307 , INT_1:3;
defpred S6[ (Element of ( NAT )) ] means ($1 <= ( D53 - 1 ) implies (ex R28 being (QC-formula of R1) st (R28 = ( C17 . ( D53 - $1 ) ) & R28 is_subformula_of R27)));
L308: (for R7 being (Element of ( NAT )) holds (S6[ R7 ] implies S6[ ( R7 + 1 ) ]))
proof
let R7 being (Element of ( NAT ));
assume that
L309: S6[ R7 ];
assume L310: ( R7 + 1 ) <= ( D53 - 1 );
L311: ( ( R7 + 1 ) + 1 ) <= ( ( D53 - 1 ) + 1 ) by L310 , XREAL_1:6;
L312: ( ( 2 + R7 ) + ( - R7 ) ) <= ( D53 + ( - R7 ) ) by L311 , XREAL_1:6;
reconsider D55 = ( D53 - R7 ) as (Element of ( NAT )) by L312 , INT_1:3;
L313: D53 <= ( D53 + R7 ) by NAT_1:11;
L314: ( D53 + ( - R7 ) ) <= ( ( D53 + R7 ) + ( - R7 ) ) by L313 , XREAL_1:6;
L315: ( D55 - 1 ) < D53 by L314 , XREAL_1:146 , XXREAL_0:2;
L316: ( ( 1 + 1 ) + ( - 1 ) ) <= ( D55 + ( - 1 ) ) by L312 , XREAL_1:6;
reconsider D56 = ( D55 - 1 ) as (Element of ( NAT )) by L316 , INT_1:3;
L317: ( D56 + 1 ) = D55;
L318: (ex B52 , B53 being (Element of ( QC-WFF R1 )) st (( C17 . D56 ) = B52 & ( C17 . D55 ) = B53 & B52 is_immediate_constituent_of B53)) by L317 , L301 , L316 , L315 , L295;
reconsider D57 = ( C17 . D56 ) as (QC-formula of R1) by L318;
take D57;
L319: R7 < ( R7 + 1 ) by NAT_1:13;
L320: D57 is_proper_subformula_of R27 by L319 , L309 , L310 , L318 , QC_LANG2:63 , XXREAL_0:2;
thus L321: thesis by L320 , QC_LANG2:def 21;
end;
L322: ( C17 . D53 ) = R27 by L301 , L295;
L323: S6[ ( 0 ) ] by L322;
L324: (for R7 being (Element of ( NAT )) holds S6[ R7 ]) from NAT_1:sch 1(L323 , L308);
L325: (ex R28 being (QC-formula of R1) st (R28 = ( C17 . ( D53 - D54 ) ) & R28 is_subformula_of R27)) by L324 , L306;
thus L326: thesis by L325;
end;
theorem
L327: (for R1 being QC-alphabet holds (for R5 being (Element of ( NAT )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R26 being (QC-formula of R1) holds (for B54 being (PATH of R26 , R9) holds ((R26 is_subformula_of R9 & 1 <= R5 & R5 <= ( len B54 )) implies ( B54 . R5 ) is (Element of ( CQC-WFF R1 ))))))))
proof
let R1 being QC-alphabet;
let R5 being (Element of ( NAT ));
let R9 being (Element of ( CQC-WFF R1 ));
let R26 being (QC-formula of R1);
let C18 being (PATH of R26 , R9);
set D58 = ( len C18 );
assume that
L328: R26 is_subformula_of R9
and
L329: 1 <= R5
and
L330: R5 <= D58;
L331: ( D58 + 1 ) <= ( D58 + R5 ) by L329 , XREAL_1:6;
L332: ( ( D58 + 1 ) + ( - 1 ) ) <= ( ( D58 + R5 ) + ( - 1 ) ) by L331 , XREAL_1:6;
L333: ( D58 + ( - R5 ) ) <= ( ( ( D58 - 1 ) + R5 ) + ( - R5 ) ) by L332 , XREAL_1:6;
L334: ( R5 + ( - R5 ) ) <= ( D58 + ( - R5 ) ) by L330 , XREAL_1:6;
reconsider D59 = ( D58 - R5 ) as (Element of ( NAT )) by L334 , INT_1:3;
defpred S7[ (Element of ( NAT )) ] means ($1 <= ( D58 - 1 ) implies ( C18 . ( D58 - $1 ) ) is (Element of ( CQC-WFF R1 )));
L335: (for R7 being (Element of ( NAT )) holds (S7[ R7 ] implies S7[ ( R7 + 1 ) ]))
proof
let R7 being (Element of ( NAT ));
assume that
L336: S7[ R7 ];
assume L337: ( R7 + 1 ) <= ( D58 - 1 );
L338: ( ( R7 + 1 ) + 1 ) <= ( ( D58 - 1 ) + 1 ) by L337 , XREAL_1:6;
L339: ( ( 2 + R7 ) + ( - R7 ) ) <= ( D58 + ( - R7 ) ) by L338 , XREAL_1:6;
reconsider D60 = ( D58 - R7 ) as (Element of ( NAT )) by L339 , INT_1:3;
L340: R7 < ( R7 + 1 ) by NAT_1:13;
reconsider D61 = ( C18 . D60 ) as (Element of ( CQC-WFF R1 )) by L340 , L336 , L337 , XXREAL_0:2;
L341: D58 <= ( D58 + R7 ) by NAT_1:11;
L342: ( D58 + ( - R7 ) ) <= ( ( D58 + R7 ) + ( - R7 ) ) by L341 , XREAL_1:6;
L343: ( D60 - 1 ) < D58 by L342 , XREAL_1:146 , XXREAL_0:2;
L344: ( ( 1 + 1 ) + ( - 1 ) ) <= ( D60 + ( - 1 ) ) by L339 , XREAL_1:6;
reconsider D62 = ( D60 - 1 ) as (Element of ( NAT )) by L344 , INT_1:3;
L345: ( D62 + 1 ) = D60;
consider C19 , C20 being (Element of ( QC-WFF R1 )) such that L346: ( C18 . D62 ) = C19 and L347: (D61 = C20 & C19 is_immediate_constituent_of C20) by L345 , L328 , L344 , L343 , L295;
L348: ((ex B55 being (Element of ( QC-WFF R1 )) st D61 = ( C19 '&' B55 )) implies thesis) by L346 , CQC_LANG:9;
L349: ((ex R13 being (bound_QC-variable of R1) st D61 = ( All (R13 , C19) )) implies thesis) by L346 , CQC_LANG:13;
L350: ((ex B56 being (Element of ( QC-WFF R1 )) st D61 = ( B56 '&' C19 )) implies thesis) by L346 , CQC_LANG:9;
L351: (D61 = ( 'not' C19 ) implies thesis) by L346 , CQC_LANG:8;
thus L352: thesis by L351 , L347 , L348 , L350 , L349 , QC_LANG2:def 19;
end;
L353: S7[ ( 0 ) ] by L328 , L295;
L354: (for R7 being (Element of ( NAT )) holds S7[ R7 ]) from NAT_1:sch 1(L353 , L335);
L355: ( C18 . ( D58 - D59 ) ) is (Element of ( CQC-WFF R1 )) by L354 , L333;
thus L356: thesis by L355;
end;
theorem
L357: (for R1 being QC-alphabet holds (for R5 being (Element of ( NAT )) holds (for R8 being (Element of ( NAT )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds (for B57 being (PATH of R10 , R9) holds ((( QuantNbr R9 ) <= R8 & R10 is_subformula_of R9 & 1 <= R5 & R5 <= ( len B57 )) implies (ex R11 being (Element of ( CQC-WFF R1 )) st (R11 = ( B57 . R5 ) & ( QuantNbr R11 ) <= R8)))))))))
proof
let R1 being QC-alphabet;
let R5 being (Element of ( NAT ));
let R8 being (Element of ( NAT ));
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
let C21 being (PATH of R10 , R9);
set D63 = ( len C21 );
assume that
L358: ( QuantNbr R9 ) <= R8
and
L359: R10 is_subformula_of R9
and
L360: 1 <= R5
and
L361: R5 <= D63;
L362: ( R5 + ( - R5 ) ) <= ( D63 + ( - R5 ) ) by L361 , XREAL_1:6;
reconsider D64 = ( D63 - R5 ) as (Element of ( NAT )) by L362 , INT_1:3;
L363: ( D63 + 1 ) <= ( D63 + R5 ) by L360 , XREAL_1:6;
L364: ( ( D63 + 1 ) + ( - 1 ) ) <= ( ( D63 + R5 ) + ( - 1 ) ) by L363 , XREAL_1:6;
L365: ( D63 + ( - R5 ) ) <= ( ( ( D63 - 1 ) + R5 ) + ( - R5 ) ) by L364 , XREAL_1:6;
defpred S8[ (Element of ( NAT )) ] means ($1 <= ( D63 - 1 ) implies (ex R11 being (Element of ( CQC-WFF R1 )) st (R11 = ( C21 . ( D63 - $1 ) ) & ( QuantNbr R11 ) <= R8)));
L366: (for R7 being (Element of ( NAT )) holds (S8[ R7 ] implies S8[ ( R7 + 1 ) ]))
proof
let R7 being (Element of ( NAT ));
assume that
L367: S8[ R7 ];
assume L368: ( R7 + 1 ) <= ( D63 - 1 );
L369: ( ( R7 + 1 ) + 1 ) <= ( ( D63 - 1 ) + 1 ) by L368 , XREAL_1:6;
L370: ( ( 2 + R7 ) + ( - R7 ) ) <= ( D63 + ( - R7 ) ) by L369 , XREAL_1:6;
reconsider D65 = ( D63 - R7 ) as (Element of ( NAT )) by L370 , INT_1:3;
L371: ( ( 1 + 1 ) + ( - 1 ) ) <= ( D65 + ( - 1 ) ) by L370 , XREAL_1:6;
reconsider D66 = ( D65 - 1 ) as (Element of ( NAT )) by L371 , INT_1:3;
L372: D63 <= ( D63 + R7 ) by NAT_1:11;
L373: ( D63 + ( - R7 ) ) <= ( ( D63 + R7 ) + ( - R7 ) ) by L372 , XREAL_1:6;
L374: ( D65 - 1 ) < D63 by L373 , XREAL_1:146 , XXREAL_0:2;
L375: ( D66 + 1 ) = D65;
consider C22 , C23 being (Element of ( QC-WFF R1 )) such that L376: ( C21 . D66 ) = C22 and L377: (( C21 . D65 ) = C23 & C22 is_immediate_constituent_of C23) by L375 , L359 , L371 , L374 , L295;
reconsider D67 = C22 as (Element of ( CQC-WFF R1 )) by L359 , L371 , L374 , L376 , L327;
L378: R7 < ( R7 + 1 ) by NAT_1:13;
consider R10 being (Element of ( CQC-WFF R1 )) such that L379: R10 = ( C21 . D65 ) and L380: ( QuantNbr R10 ) <= R8 by L378 , L367 , L368 , XXREAL_0:2;
L381:
now
given R13 being (bound_QC-variable of R1) such that
L382: R10 = ( All (R13 , C22) );

take D68 = D67;
L383: ( ( QuantNbr D68 ) + 1 ) <= R8 by L380 , L382 , CQC_SIM1:18;
L384: ( QuantNbr D68 ) <= R8 by L383 , NAT_1:13;
thus L385: thesis by L384 , L376;
end;
L386:
now
given C24 being (Element of ( QC-WFF R1 )) such that
L387: R10 = ( C24 '&' C22 );

reconsider D69 = C24 as (Element of ( CQC-WFF R1 )) by L387 , CQC_LANG:9;
take D70 = D67;
L388: R8 <= ( R8 + ( QuantNbr D69 ) ) by NAT_1:11;
L389: ( R8 + ( - ( QuantNbr D69 ) ) ) <= ( ( R8 + ( QuantNbr D69 ) ) + ( - ( QuantNbr D69 ) ) ) by L388 , XREAL_1:6;
L390: ( ( QuantNbr D70 ) + ( QuantNbr D69 ) ) <= R8 by L380 , L387 , CQC_SIM1:17;
L391: ( ( ( QuantNbr D70 ) + ( QuantNbr D69 ) ) + ( - ( QuantNbr D69 ) ) ) <= ( R8 + ( - ( QuantNbr D69 ) ) ) by L390 , XREAL_1:6;
thus L392: thesis by L391 , L376 , L389 , XXREAL_0:2;
end;
L393:
now
given C25 being (Element of ( QC-WFF R1 )) such that
L394: R10 = ( C22 '&' C25 );

reconsider D71 = C25 as (Element of ( CQC-WFF R1 )) by L394 , CQC_LANG:9;
take D72 = D67;
L395: R8 <= ( R8 + ( QuantNbr D71 ) ) by NAT_1:11;
L396: ( R8 + ( - ( QuantNbr D71 ) ) ) <= ( ( R8 + ( QuantNbr D71 ) ) + ( - ( QuantNbr D71 ) ) ) by L395 , XREAL_1:6;
L397: ( ( QuantNbr D72 ) + ( QuantNbr D71 ) ) <= R8 by L380 , L394 , CQC_SIM1:17;
L398: ( ( ( QuantNbr D72 ) + ( QuantNbr D71 ) ) + ( - ( QuantNbr D71 ) ) ) <= ( R8 + ( - ( QuantNbr D71 ) ) ) by L397 , XREAL_1:6;
thus L399: thesis by L398 , L376 , L396 , XXREAL_0:2;
end;
L400:
now
assume L401: R10 = ( 'not' C22 );
take D73 = D67;
L402: ( QuantNbr D73 ) <= R8 by L380 , L401 , CQC_SIM1:16;
thus L403: thesis by L402 , L376;
end;
thus L404: thesis by L400 , L379 , L377 , L393 , L386 , L381 , QC_LANG2:def 19;
end;
L405: ( C21 . D63 ) = R9 by L359 , L295;
L406: S8[ ( 0 ) ] by L405 , L358;
L407: (for R7 being (Element of ( NAT )) holds S8[ R7 ]) from NAT_1:sch 1(L406 , L366);
L408: (ex R11 being (Element of ( CQC-WFF R1 )) st (R11 = ( C21 . ( D63 - D64 ) ) & ( QuantNbr R11 ) <= R8)) by L407 , L365;
thus L409: thesis by L408;
end;
theorem
L410: (for R1 being QC-alphabet holds (for R8 being (Element of ( NAT )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds (for R10 being (Element of ( CQC-WFF R1 )) holds ((( QuantNbr R9 ) = R8 & R10 is_subformula_of R9) implies ( QuantNbr R10 ) <= R8)))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( NAT ));
let R9 being (Element of ( CQC-WFF R1 ));
let R10 being (Element of ( CQC-WFF R1 ));
set D74 = the (PATH of R10 , R9);
set D75 = ( len D74 );
assume that
L411: ( QuantNbr R9 ) = R8
and
L412: R10 is_subformula_of R9;
L413: 1 <= D75 by L412 , L295;
L414: (ex R11 being (Element of ( CQC-WFF R1 )) st (R11 = ( D74 . 1 ) & ( QuantNbr R11 ) <= R8)) by L413 , L411 , L412 , L357;
thus L415: thesis by L414 , L412 , L295;
end;
theorem
L416: (for R1 being QC-alphabet holds (for R8 being (Element of ( NAT )) holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies ( QuantNbr R10 ) = R8)) implies R8 = ( 0 )))))
proof
let R1 being QC-alphabet;
let R8 being (Element of ( NAT ));
let R9 being (Element of ( CQC-WFF R1 ));
assume that
L417: (for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies ( QuantNbr R10 ) = R8));
defpred S9[ (Element of ( CQC-WFF R1 )) ] means ($1 is_subformula_of R9 implies ( QuantNbr $1 ) = ( 0 ));
L418: (for R13 being (bound_QC-variable of R1) holds (for R11 being (Element of ( CQC-WFF R1 )) holds (S9[ R11 ] implies S9[ ( All (R13 , R11) ) ])))
proof
let R13 being (bound_QC-variable of R1);
let R11 being (Element of ( CQC-WFF R1 ));
assume that
L419: S9[ R11 ];
L420:
now
assume L421: ( All (R13 , R11) ) is_subformula_of R9;
L422: R11 is_immediate_constituent_of ( All (R13 , R11) ) by QC_LANG2:46;
L423: R11 is_proper_subformula_of R9 by L422 , L421 , QC_LANG2:63;
L424: R11 is_subformula_of R9 by L423 , QC_LANG2:def 21;
L425: ( QuantNbr R11 ) = R8 by L424 , L417;
L426: ( QuantNbr ( All (R13 , R11) ) ) = R8 by L417 , L421;
L427: ( R8 + ( - R8 ) ) = ( ( 1 + R8 ) + ( - R8 ) ) by L426 , L425 , CQC_SIM1:18;
thus L428: contradiction by L427;
end;
thus L429: thesis by L420;
end;
L430: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds ((S9[ R11 ] & S9[ R12 ]) implies S9[ ( R11 '&' R12 ) ])))
proof
let R11 being (Element of ( CQC-WFF R1 ));
let R12 being (Element of ( CQC-WFF R1 ));
assume that
L431: (S9[ R11 ] & S9[ R12 ]);
assume L432: ( R11 '&' R12 ) is_subformula_of R9;
L433: R12 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L434: R12 is_proper_subformula_of R9 by L433 , L432 , QC_LANG2:63;
L435: R11 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L436: R11 is_proper_subformula_of R9 by L435 , L432 , QC_LANG2:63;
L437: ( QuantNbr ( R11 '&' R12 ) ) = ( ( 0 ) + ( 0 ) ) by L436 , L431 , L434 , CQC_SIM1:17 , QC_LANG2:def 21;
thus L438: thesis by L437;
end;
L439: (for R11 being (Element of ( CQC-WFF R1 )) holds (S9[ R11 ] implies S9[ ( 'not' R11 ) ]))
proof
let R11 being (Element of ( CQC-WFF R1 ));
assume that
L440: S9[ R11 ];
L441: R11 is_immediate_constituent_of ( 'not' R11 ) by QC_LANG2:43;
assume L442: ( 'not' R11 ) is_subformula_of R9;
L443: R11 is_proper_subformula_of R9 by L442 , L441 , QC_LANG2:63;
thus L444: thesis by L443 , L440 , CQC_SIM1:16 , QC_LANG2:def 21;
end;
L445: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R7 being (Element of ( NAT )) holds (for B58 being (CQC-variable_list of R7 , R1) holds (for B59 being (QC-pred_symbol of R7 , R1) holds (S9[ ( VERUM R1 ) ] & S9[ ( B59 ! B58 ) ] & (S9[ R11 ] implies S9[ ( 'not' R11 ) ]) & ((S9[ R11 ] & S9[ R12 ]) implies S9[ ( R11 '&' R12 ) ]) & (S9[ R11 ] implies S9[ ( All (R13 , R11) ) ])))))))) by L439 , L430 , L418 , CQC_SIM1:14 , CQC_SIM1:15;
L446: (for R11 being (Element of ( CQC-WFF R1 )) holds S9[ R11 ]) from CQC_LANG:sch 1(L445);
L447: ( QuantNbr R9 ) = R8 by L417;
thus L448: thesis by L447 , L446;
end;
theorem
L449: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies (for R13 being (bound_QC-variable of R1) holds (for R11 being (Element of ( CQC-WFF R1 )) holds R10 <> ( All (R13 , R11) ))))) implies ( QuantNbr R9 ) = ( 0 ))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
assume that
L450: (for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies (for R13 being (bound_QC-variable of R1) holds (for R11 being (Element of ( CQC-WFF R1 )) holds R10 <> ( All (R13 , R11) )))));
defpred S10[ (Element of ( CQC-WFF R1 )) ] means ($1 is_subformula_of R9 implies ( QuantNbr $1 ) = ( 0 ));
L451: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds ((S10[ R11 ] & S10[ R12 ]) implies S10[ ( R11 '&' R12 ) ])))
proof
let R11 being (Element of ( CQC-WFF R1 ));
let R12 being (Element of ( CQC-WFF R1 ));
assume that
L452: (S10[ R11 ] & S10[ R12 ]);
assume L453: ( R11 '&' R12 ) is_subformula_of R9;
L454: R12 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L455: R12 is_proper_subformula_of R9 by L454 , L453 , QC_LANG2:63;
L456: R11 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L457: R11 is_proper_subformula_of R9 by L456 , L453 , QC_LANG2:63;
L458: ( QuantNbr ( R11 '&' R12 ) ) = ( ( 0 ) + ( 0 ) ) by L457 , L452 , L455 , CQC_SIM1:17 , QC_LANG2:def 21;
thus L459: thesis by L458;
end;
L460: (for R11 being (Element of ( CQC-WFF R1 )) holds (S10[ R11 ] implies S10[ ( 'not' R11 ) ]))
proof
let R11 being (Element of ( CQC-WFF R1 ));
assume that
L461: S10[ R11 ];
L462: R11 is_immediate_constituent_of ( 'not' R11 ) by QC_LANG2:43;
assume L463: ( 'not' R11 ) is_subformula_of R9;
L464: R11 is_proper_subformula_of R9 by L463 , L462 , QC_LANG2:63;
thus L465: thesis by L464 , L461 , CQC_SIM1:16 , QC_LANG2:def 21;
end;
L466: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R7 being (Element of ( NAT )) holds (for B60 being (CQC-variable_list of R7 , R1) holds (for B61 being (QC-pred_symbol of R7 , R1) holds (S10[ ( VERUM R1 ) ] & S10[ ( B61 ! B60 ) ] & (S10[ R11 ] implies S10[ ( 'not' R11 ) ]) & ((S10[ R11 ] & S10[ R12 ]) implies S10[ ( R11 '&' R12 ) ]) & (S10[ R11 ] implies S10[ ( All (R13 , R11) ) ])))))))) by L460 , L450 , L451 , CQC_SIM1:14 , CQC_SIM1:15;
L467: (for R11 being (Element of ( CQC-WFF R1 )) holds S10[ R11 ]) from CQC_LANG:sch 1(L466);
thus L468: thesis by L467;
end;
theorem
L469: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds ((for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies ( QuantNbr R10 ) <> 1)) implies ( QuantNbr R9 ) = ( 0 ))))
proof
let R1 being QC-alphabet;
let R9 being (Element of ( CQC-WFF R1 ));
assume that
L470: (for R10 being (Element of ( CQC-WFF R1 )) holds (R10 is_subformula_of R9 implies ( QuantNbr R10 ) <> 1));
defpred S11[ (Element of ( CQC-WFF R1 )) ] means ($1 is_subformula_of R9 implies ( QuantNbr $1 ) = ( 0 ));
L471: (for R13 being (bound_QC-variable of R1) holds (for R11 being (Element of ( CQC-WFF R1 )) holds (S11[ R11 ] implies S11[ ( All (R13 , R11) ) ])))
proof
let R13 being (bound_QC-variable of R1);
let R11 being (Element of ( CQC-WFF R1 ));
assume that
L472: S11[ R11 ];
L473:
now
assume L474: ( All (R13 , R11) ) is_subformula_of R9;
L475: R11 is_immediate_constituent_of ( All (R13 , R11) ) by QC_LANG2:46;
L476: R11 is_proper_subformula_of R9 by L475 , L474 , QC_LANG2:63;
L477: ( QuantNbr ( All (R13 , R11) ) ) = ( ( 0 ) + 1 ) by L476 , L472 , CQC_SIM1:18 , QC_LANG2:def 21;
thus L478: contradiction by L477 , L470 , L474;
end;
thus L479: thesis by L473;
end;
L480: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds ((S11[ R11 ] & S11[ R12 ]) implies S11[ ( R11 '&' R12 ) ])))
proof
let R11 being (Element of ( CQC-WFF R1 ));
let R12 being (Element of ( CQC-WFF R1 ));
assume that
L481: (S11[ R11 ] & S11[ R12 ]);
assume L482: ( R11 '&' R12 ) is_subformula_of R9;
L483: R12 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L484: R12 is_proper_subformula_of R9 by L483 , L482 , QC_LANG2:63;
L485: R11 is_immediate_constituent_of ( R11 '&' R12 ) by QC_LANG2:45;
L486: R11 is_proper_subformula_of R9 by L485 , L482 , QC_LANG2:63;
L487: ( QuantNbr ( R11 '&' R12 ) ) = ( ( 0 ) + ( 0 ) ) by L486 , L481 , L484 , CQC_SIM1:17 , QC_LANG2:def 21;
thus L488: thesis by L487;
end;
L489: (for R11 being (Element of ( CQC-WFF R1 )) holds (S11[ R11 ] implies S11[ ( 'not' R11 ) ]))
proof
let R11 being (Element of ( CQC-WFF R1 ));
assume that
L490: S11[ R11 ];
L491: R11 is_immediate_constituent_of ( 'not' R11 ) by QC_LANG2:43;
assume L492: ( 'not' R11 ) is_subformula_of R9;
L493: R11 is_proper_subformula_of R9 by L492 , L491 , QC_LANG2:63;
thus L494: thesis by L493 , L490 , CQC_SIM1:16 , QC_LANG2:def 21;
end;
L495: (for R11 being (Element of ( CQC-WFF R1 )) holds (for R12 being (Element of ( CQC-WFF R1 )) holds (for R13 being (bound_QC-variable of R1) holds (for R7 being (Element of ( NAT )) holds (for B62 being (CQC-variable_list of R7 , R1) holds (for B63 being (QC-pred_symbol of R7 , R1) holds (S11[ ( VERUM R1 ) ] & S11[ ( B63 ! B62 ) ] & (S11[ R11 ] implies S11[ ( 'not' R11 ) ]) & ((S11[ R11 ] & S11[ R12 ]) implies S11[ ( R11 '&' R12 ) ]) & (S11[ R11 ] implies S11[ ( All (R13 , R11) ) ])))))))) by L489 , L480 , L471 , CQC_SIM1:14 , CQC_SIM1:15;
L496: (for R11 being (Element of ( CQC-WFF R1 )) holds S11[ R11 ]) from CQC_LANG:sch 1(L495);
thus L497: thesis by L496;
end;
theorem
L498: (for R1 being QC-alphabet holds (for R9 being (Element of ( CQC-WFF R1 )) holds (1 <= ( QuantNbr R9 ) implies (ex R10 being (Element of ( CQC-WFF R1 )) st (R10 is_subformula_of R9 & ( QuantNbr R10 ) = 1))))) by L469;
