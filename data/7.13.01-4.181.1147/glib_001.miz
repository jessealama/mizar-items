:: Walks in a Graph
::  by Gilbert Lee
::
:: Received February 22, 2005
:: Copyright (c) 2005-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, ABIAN, SUBSET_1, ARYTM_3, XXREAL_0, ARYTM_1, CARD_1,
      TARSKI, FINSEQ_1, RELAT_1, FUNCT_1, NAT_1, XBOOLE_0, GLIB_000, FINSEQ_5,
      GRAPH_2, INT_1, FINSET_1, RCOMP_1, WAYBEL_0, ZFMISC_1, MSAFREE2,
      ORDINAL4, GRAPH_1, FUNCT_4, FUNCOP_1, MCART_1, GLIB_001;
 notations TARSKI, XBOOLE_0, CARD_1, NUMBERS, SUBSET_1, XCMPLX_0, XXREAL_0,
      DOMAIN_1, RELAT_1, FUNCT_1, FINSEQ_1, GRAPH_2, FINSEQ_5, RELSET_1,
      XTUPLE_0, MCART_1, FINSET_1, ORDINAL1, NAT_1, NAT_D, FUNCOP_1, FUNCT_4,
      GLIB_000, ABIAN;
 constructors DOMAIN_1, FUNCT_4, NAT_D, RECDEF_1, FINSEQ_5, GLIB_000, ABIAN,
      GRAPH_2, XXREAL_2, RELSET_1, FINSEQ_2, RAT_1, XTUPLE_0;
 registrations XBOOLE_0, RELAT_1, FUNCT_1, ORDINAL1, FUNCOP_1, FINSET_1,
      XXREAL_0, XREAL_0, NAT_1, INT_1, FINSEQ_1, GLIB_000, ABIAN, GRAPH_2,
      GRAPH_3, CARD_1, SUBSET_1, XTUPLE_0;
 requirements ARITHM, BOOLE, NUMERALS, REAL, SUBSET;
 definitions FUNCOP_1, XTUPLE_0;
 theorems CARD_1, CARD_2, FUNCOP_1, ENUMSET1, FINSEQ_1, FINSEQ_2, FINSEQ_3,
      FINSEQ_4, FINSEQ_5, FINSET_1, FUNCT_1, FUNCT_4, GLIB_000, GRAPH_2,
      GRAPH_5, INT_1, JORDAN12, MCART_1, NAT_1, NAT_2, PEPIN, RELAT_1, TARSKI,
      XBOOLE_0, XBOOLE_1, XREAL_1, PRE_CIRC, XXREAL_0, ABIAN, ORDINAL1, NAT_D,
      XTUPLE_0;
 schemes FINSEQ_1, FUNCT_1, NAT_1, RECDEF_1;

begin
theorem
L1: (for B1 , B2 being  odd (Element of ( NAT )) holds (B1 < B2 iff ( B1 + 2 ) <= B2))
proof
let C1 , C2 being  odd (Element of ( NAT ));
thus L2:now
assume L3: C1 < C2;
L4: ( C1 + 1 ) <= C2 by L3 , NAT_1:13;
L5: ( C1 + 1 ) < C2 by L4 , XXREAL_0:1;
L6: ( ( C1 + 1 ) + 1 ) < ( C2 + 1 ) by L5 , XREAL_1:8;
thus L7: ( C1 + 2 ) <= C2 by L6 , NAT_1:13;
end;
assume L8: ( C1 + 2 ) <= C2;
L9: ( ( C1 + 2 ) - 2 ) < ( C2 - ( 0 ) ) by L8 , XREAL_1:15;
thus L10: thesis by L9;
end;
canceled 1;
theorem
L11: (for B3 being set holds (for B4 being (FinSequence of B3) holds (for B5 being (Subset of B4) holds ( len ( Seq B5 ) ) <= ( len B4 ))))
proof
let C3 being set;
let C4 being (FinSequence of C3);
let C5 being (Subset of C4);
L12: ( Seq C5 ) = ( C5 * ( Sgm ( dom C5 ) ) ) by FINSEQ_1:def 14;
L13: ( dom C5 ) c= ( dom C4 ) by GRAPH_2:25;
L14: ( dom C5 ) c= ( Seg ( len C4 ) ) by L13 , FINSEQ_1:def 3;
L15: ( rng ( Sgm ( dom C5 ) ) ) = ( dom C5 ) by L14 , FINSEQ_1:def 13;
L16: ( len ( Seq C5 ) ) = ( len ( Sgm ( dom C5 ) ) ) by L15 , L12 , FINSEQ_2:29
.= ( card ( dom C5 ) ) by L14 , FINSEQ_3:39
.= ( card C5 ) by CARD_1:62;
thus L17: thesis by L16 , NAT_1:43;
end;
theorem
L18: (for B6 being set holds (for B7 being (FinSequence of B6) holds (for B8 being (Subset of B7) holds (for B9 being (Element of ( NAT )) holds (B9 in ( dom ( Seq B8 ) ) implies (ex B10 being (Element of ( NAT )) st (B10 in ( dom B7 ) & B9 <= B10 & ( ( Seq B8 ) . B9 ) = ( B7 . B10 ))))))))
proof
let C6 being set;
let C7 being (FinSequence of C6);
let C8 being (Subset of C7);
let C9 being (Element of ( NAT ));
set D1 = ( Sgm ( dom C8 ) );
set D2 = ( D1 . C9 );
consider C10 being Nat such that L19: ( dom C8 ) c= ( Seg C10 ) by FINSEQ_1:def 12;
assume L20: C9 in ( dom ( Seq C8 ) );
L21: C9 in ( dom ( C8 * D1 ) ) by L20 , FINSEQ_1:def 14;
L22: D2 in ( dom C8 ) by L21 , FUNCT_1:11;
L23: ( Seq C8 ) = ( C8 * D1 ) by FINSEQ_1:def 14;
L24: ( ( Seq C8 ) . C9 ) = ( C8 . D2 ) by L23 , L20 , FUNCT_1:12;
L25: [ D2 , ( ( Seq C8 ) . C9 ) ] in C8 by L24 , L22 , FUNCT_1:def 2;
L26: D2 in ( dom C7 ) by L25 , FUNCT_1:1;
L27: C9 in ( dom D1 ) by L21 , FUNCT_1:11;
L28: ( ( Seq C8 ) . C9 ) = ( C7 . D2 ) by L25 , FUNCT_1:1;
L29: C10 in ( NAT ) by ORDINAL1:def 12;
thus L30: thesis by L29 , L27 , L26 , L28 , L19 , FINSEQ_3:152;
end;
theorem
L31: (for B11 being set holds (for B12 being (FinSequence of B11) holds (for B13 being (Subset of B12) holds ( len ( Seq B13 ) ) = ( card B13 ))))
proof
let C11 being set;
let C12 being (FinSequence of C11);
let C13 being (Subset of C12);
L32: ( Seq C13 ) = ( C13 * ( Sgm ( dom C13 ) ) ) by FINSEQ_1:def 14;
L33: (ex B14 being Nat st ( dom C13 ) c= ( Seg B14 )) by FINSEQ_1:def 12;
L34: ( rng ( Sgm ( dom C13 ) ) ) = ( dom C13 ) by L33 , FINSEQ_1:def 13;
L35: ( dom ( Seq C13 ) ) = ( dom ( Sgm ( dom C13 ) ) ) by L34 , L32 , RELAT_1:27;
L36: ( dom ( Seq C13 ) ) = ( Seg ( card ( dom C13 ) ) ) by L35 , L33 , FINSEQ_3:40;
L37: ( len ( Seq C13 ) ) = ( card ( dom C13 ) ) by L36 , FINSEQ_1:def 3;
thus L38: thesis by L37 , CARD_1:62;
end;
theorem
L39: (for B15 being set holds (for B16 being (FinSequence of B15) holds (for B17 being (Subset of B16) holds ( dom ( Seq B17 ) ) = ( dom ( Sgm ( dom B17 ) ) ))))
proof
let C14 being set;
let C15 being (FinSequence of C14);
let C16 being (Subset of C15);
L40: (ex B18 being Nat st ( dom C16 ) c= ( Seg B18 )) by FINSEQ_1:def 12;
L41: ( rng ( Sgm ( dom C16 ) ) ) c= ( dom C16 ) by L40 , FINSEQ_1:def 13;
L42: ( Seq C16 ) = ( C16 * ( Sgm ( dom C16 ) ) ) by FINSEQ_1:def 14;
thus L43: thesis by L42 , L41 , RELAT_1:27;
end;
begin
definition
let C17 being _Graph;
mode VertexSeq of C17
 -> (FinSequence of ( the_Vertices_of C17 ))
means :L44: (for B19 being (Element of ( NAT )) holds ((1 <= B19 & B19 < ( len it )) implies (ex B20 being set st B20 Joins ( it . B19 ) , ( it . ( B19 + 1 ) ) , C17)));
existence
proof
set D3 = ( choose ( the_Vertices_of C17 ) );
set D4 = <* D3 *>;
reconsider D5 = D4 as (FinSequence of ( the_Vertices_of C17 ));
take D5;
let C18 being (Element of ( NAT ));
assume that
L45: 1 <= C18
and
L46: C18 < ( len D5 );
thus L47: thesis by L45 , L46 , FINSEQ_1:40;
end;
end;
definition
let C19 being _Graph;
mode EdgeSeq of C19
 -> (FinSequence of ( the_Edges_of C19 ))
means :L49: (ex B21 being (FinSequence of ( the_Vertices_of C19 )) st (( len B21 ) = ( ( len it ) + 1 ) & (for B22 being (Element of ( NAT )) holds ((1 <= B22 & B22 <= ( len it )) implies ( it . B22 ) Joins ( B21 . B22 ) , ( B21 . ( B22 + 1 ) ) , C19))));
existence
proof
set D6 = ( <*> ( the_Edges_of C19 ) );
set D7 = <* ( choose ( the_Vertices_of C19 ) ) *>;
reconsider D8 = D7 as (FinSequence of ( the_Vertices_of C19 ));
take D6;
take D8;
thus L50: ( len D8 ) = ( ( len D6 ) + 1 ) by FINSEQ_1:40;
let C20 being (Element of ( NAT ));
assume that
L51: 1 <= C20
and
L52: C20 <= ( len D6 );
thus L53: thesis by L51 , L52;
end;
end;
definition
let C21 being _Graph;
mode Walk of C21
 -> (FinSequence of ( ( the_Vertices_of C21 ) \/ ( the_Edges_of C21 ) ))
means :L55: (( len it ) is  odd & ( it . 1 ) in ( the_Vertices_of C21 ) & (for B23 being  odd (Element of ( NAT )) holds (B23 < ( len it ) implies ( it . ( B23 + 1 ) ) Joins ( it . B23 ) , ( it . ( B23 + 2 ) ) , C21)));
existence
proof
set D9 = ( ( the_Vertices_of C21 ) \/ ( the_Edges_of C21 ) );
consider C22 being set such that L56: C22 in ( the_Vertices_of C21 ) by XBOOLE_0:def 1;
reconsider D10 = C22 as (Element of D9) by L56 , XBOOLE_0:def 3;
take <* D10 *>;
thus L57: ( len <* D10 *> ) is  odd by FINSEQ_1:40 , JORDAN12:2;
thus L58: ( <* D10 *> . 1 ) in ( the_Vertices_of C21 ) by L56 , FINSEQ_1:40;
let C23 being  odd (Element of ( NAT ));
assume L59: C23 < ( len <* D10 *> );
L60: C23 < 1 by L59 , FINSEQ_1:40;
thus L61: thesis by L60 , ABIAN:12;
end;
end;
registration
let C24 being _Graph;
let C25 being (Walk of C24);
cluster ( len C25 ) ->  odd non  empty;
correctness
proof
thus L63: ( len C25 ) is  odd by L55;
thus L64: thesis by L63;
end;
end;
definition
let C26 being _Graph;
let C27 being (Vertex of C26);
func C26 .walkOf C27 -> (Walk of C26) equals 
<* C27 *>;
coherence
proof
set D11 = ( ( the_Vertices_of C26 ) \/ ( the_Edges_of C26 ) );
set D12 = <* C27 *>;
set D13 = C27;
reconsider D14 = D13 as (Element of D11) by XBOOLE_0:def 3;
L66: <* D14 *> is (FinSequence of D11);
reconsider D15 = D12 as (FinSequence of D11) by L66;
L67:
now
thus L68: ( len D15 ) is  odd by FINSEQ_1:40 , JORDAN12:2;
L69: ( D15 . 1 ) = C27 by FINSEQ_1:40;
thus L70: ( D15 . 1 ) in ( the_Vertices_of C26 ) by L69;
let C28 being  odd (Element of ( NAT ));
L71: 1 <= C28 by ABIAN:12;
assume L72: C28 < ( len <* C27 *> );
thus L73: ( D15 . ( C28 + 1 ) ) Joins ( D15 . C28 ) , ( D15 . ( C28 + 2 ) ) , C26 by L72 , L71 , FINSEQ_1:40;
end;
thus L74: thesis by L67 , L55;
end;
end;
definition
let C29 being _Graph;
let C30 , C31 , C32 being set;
func C29 .walkOf (C30 , C32 , C31) -> (Walk of C29) equals 
:L76: <* C30 , C32 , C31 *> if C32 Joins C30 , C31 , C29 otherwise ( C29 .walkOf ( choose ( the_Vertices_of C29 ) ) );
coherence
proof
set D16 = ( ( the_Vertices_of C29 ) \/ ( the_Edges_of C29 ) );
thus L77:now
set D17 = <* C30 , C32 , C31 *>;
assume L78: C32 Joins C30 , C31 , C29;
L79: C31 is (Vertex of C29) by L78 , GLIB_000:13;
L80: C31 is (Element of D16) by L79 , XBOOLE_0:def 3;
L81: C32 in ( the_Edges_of C29 ) by L78 , GLIB_000:def 13;
L82: C32 is (Element of D16) by L81 , XBOOLE_0:def 3;
L83: C30 is (Vertex of C29) by L78 , GLIB_000:13;
L84: C30 is (Element of D16) by L83 , XBOOLE_0:def 3;
reconsider D18 = D17 as (FinSequence of D16) by L84 , L80 , L82 , FINSEQ_2:14;
L85: ( D18 . 1 ) = C30 by FINSEQ_1:45;
L86: ( D18 . 2 ) = C32 by FINSEQ_1:45;
L87:
now
reconsider D19 = 1 as  odd (Element of ( NAT )) by JORDAN12:2;
L88: ( D19 + 2 ) is  odd;
thus L89: ( len D18 ) is  odd by L88 , FINSEQ_1:45;
thus L90: ( D18 . 1 ) in ( the_Vertices_of C29 ) by L78 , L85 , GLIB_000:13;
let C33 being  odd (Element of ( NAT ));
assume L91: C33 < ( len D18 );
L92: C33 < ( 2 + 1 ) by L91 , FINSEQ_1:45;
L93: C33 <= ( 2 * 1 ) by L92 , NAT_1:13;
L94: (C33 = ( 2 * ( 0 ) ) or C33 = 1 or C33 = ( 2 * 1 )) by L93 , NAT_1:26;
thus L95: ( D18 . ( C33 + 1 ) ) Joins ( D18 . C33 ) , ( D18 . ( C33 + 2 ) ) , C29 by L94 , L78 , L85 , L86 , FINSEQ_1:45;
end;
thus L96: <* C30 , C32 , C31 *> is (Walk of C29) by L87 , L55;
end;
thus L97: thesis;
end;
consistency;
end;
definition
let C34 being _Graph;
let C35 being (Walk of C34);
func C35 .first() -> (Vertex of C34) equals 
( C35 . 1 );
coherence by L55;
func C35 .last() -> (Vertex of C34) equals 
( C35 . ( len C35 ) );
coherence
proof
L99:
now
per cases ;
suppose L100: ( len C35 ) = 1;

thus L101: thesis by L100 , L55;
end;
suppose L102: ( len C35 ) <> 1;

L103: 1 <= ( len C35 ) by ABIAN:12;
L104: 1 < ( len C35 ) by L103 , L102 , XXREAL_0:1;
L105: ( 1 + 1 ) < ( ( len C35 ) + 1 ) by L104 , XREAL_1:8;
L106: 2 <= ( len C35 ) by L105 , NAT_1:13;
reconsider D20 = ( ( len C35 ) - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by L106 , INT_1:5;
L107: ( D20 + 2 ) = ( len C35 );
L108: D20 < ( len C35 ) by L107 , NAT_1:16;
L109: ( C35 . ( D20 + 1 ) ) Joins ( C35 . D20 ) , ( C35 . ( len C35 ) ) , C34 by L108 , L107 , L55;
thus L110: thesis by L109 , GLIB_000:13;
end;
end;
thus L112: thesis by L99;
end;
end;
definition
let C36 being _Graph;
let C37 being (Walk of C36);
let C38 being Nat;
func C37 .vertexAt C38 -> (Vertex of C36) equals 
:L114: ( C37 . C38 ) if (C38 is  odd & C38 <= ( len C37 )) otherwise ( C37 .first() );
correctness
proof
thus L115:now
reconsider D21 = C38 as (Element of ( NAT )) by ORDINAL1:def 12;
assume that
L116: C38 is  odd
and
L117: C38 <= ( len C37 );
L118:
now
per cases ;
suppose L119: C38 = ( len C37 );

L120: ( C37 . C38 ) = ( C37 .last() ) by L119;
thus L121: ( C37 . C38 ) is (Vertex of C36) by L120;
end;
suppose L122: C38 <> ( len C37 );

L123: C38 < ( len C37 ) by L122 , L117 , XXREAL_0:1;
L124: ( C37 . ( D21 + 1 ) ) Joins ( C37 . C38 ) , ( C37 . ( C38 + 2 ) ) , C36 by L123 , L116 , L55;
thus L125: ( C37 . C38 ) is (Vertex of C36) by L124 , GLIB_000:13;
end;
end;
thus L127: ( C37 . C38 ) is (Vertex of C36) by L118;
end;
thus L128: thesis;
end;
end;
definition
let C39 being _Graph;
let C40 being (Walk of C39);
func C40 .reverse() -> (Walk of C39) equals 
( Rev C40 );
coherence
proof
set D22 = ( Rev C40 );
reconsider D23 = D22 as (FinSequence of ( ( the_Vertices_of C39 ) \/ ( the_Edges_of C39 ) ));
L130: ( len D23 ) = ( len C40 ) by FINSEQ_5:def 3;
L131:
now
thus L132: ( len D23 ) is  odd by L130;
L133: ( D23 . 1 ) = ( C40 .last() ) by FINSEQ_5:62;
thus L134: ( D23 . 1 ) in ( the_Vertices_of C39 ) by L133;
let C41 being  odd (Element of ( NAT ));
set D24 = ( ( ( len C40 ) - C41 ) + 1 );
set D25 = ( ( ( len C40 ) - ( C41 + 1 ) ) + 1 );
set D26 = ( ( ( len C40 ) - ( C41 + 2 ) ) + 1 );
assume L135: C41 < ( len D23 );
L136: ( C41 + 1 ) <= ( len C40 ) by L135 , L130 , NAT_1:13;
reconsider D27 = D25 as  even (Element of ( NAT )) by L136 , FINSEQ_5:1;
L137: ( C41 + 1 ) < ( len C40 ) by L136 , XXREAL_0:1;
L138: ( ( C41 + 1 ) + 1 ) <= ( len C40 ) by L137 , NAT_1:13;
reconsider D28 = D26 as  odd (Element of ( NAT )) by L138 , FINSEQ_5:1;
L139: 1 <= ( C41 + 1 ) by NAT_1:12;
L140: ( C41 + 1 ) in ( dom C40 ) by L139 , L136 , FINSEQ_3:25;
L141: ( D23 . ( C41 + 1 ) ) = ( C40 . D27 ) by L140 , FINSEQ_5:58
.= ( C40 . ( D28 + 1 ) );
L142: C41 <= ( len C40 ) by L135 , FINSEQ_5:def 3;
reconsider D29 = D24 as  odd (Element of ( NAT )) by L142 , FINSEQ_5:1;
L143: 1 <= C41 by ABIAN:12;
L144: C41 in ( dom C40 ) by L143 , L142 , FINSEQ_3:25;
L145: ( D23 . C41 ) = ( C40 . D29 ) by L144 , FINSEQ_5:58
.= ( C40 . ( D28 + 2 ) );
L146: ( 1 + ( 0 ) ) < ( C41 + 2 ) by XREAL_1:8;
L147: ( ( len C40 ) - ( C41 + 2 ) ) < ( ( len C40 ) - 1 ) by L146 , XREAL_1:15;
L148: ( ( ( len C40 ) - ( C41 + 2 ) ) + 1 ) < ( ( ( len C40 ) - 1 ) + 1 ) by L147 , XREAL_1:8;
L149: ( C40 . ( D28 + 1 ) ) Joins ( C40 . D28 ) , ( C40 . ( D28 + 2 ) ) , C39 by L148 , L55;
L150: 1 <= ( C41 + 2 ) by NAT_1:12;
L151: ( C41 + 2 ) in ( dom C40 ) by L150 , L138 , FINSEQ_3:25;
L152: ( D23 . ( C41 + 1 ) ) Joins ( D23 . ( C41 + 2 ) ) , ( D23 . C41 ) , C39 by L151 , L149 , L145 , L141 , FINSEQ_5:58;
thus L153: ( D23 . ( C41 + 1 ) ) Joins ( D23 . C41 ) , ( D23 . ( C41 + 2 ) ) , C39 by L152 , GLIB_000:14;
end;
thus L154: thesis by L131 , L55;
end;
involutiveness
;
end;
definition
let C42 being _Graph;
let C43 , C44 being (Walk of C42);
func C43 .append C44 -> (Walk of C42) equals 
:L156: ( C43 ^' C44 ) if ( C43 .last() ) = ( C44 .first() ) otherwise C43;
correctness
proof
set D30 = ( C43 ^' C44 );
set D31 = ( len D30 );
thus L157:now
assume L158: ( C43 .last() ) = ( C44 .first() );
L159:
now
let C45 being  odd (Element of ( NAT ));
assume that
L160: C45 < ( len D30 );
set D32 = ( D30 . C45 );
set D33 = ( D30 . ( C45 + 2 ) );
set D34 = ( D30 . ( C45 + 1 ) );
L161:
now
per cases ;
suppose L162: ( C45 + 2 ) <= ( len C43 );

L163: 1 <= C45 by ABIAN:12;
L164: ( ( C45 + 2 ) - 2 ) <= ( ( len C43 ) - ( 0 ) ) by L162 , XREAL_1:13;
L165: ( D30 . C45 ) = ( C43 . C45 ) by L164 , L163 , GRAPH_2:14;
L166: ( ( C45 + 2 ) - 1 ) <= ( ( len C43 ) - ( 0 ) ) by L162 , XREAL_1:13;
L167: ( D30 . ( C45 + 1 ) ) = ( C43 . ( C45 + 1 ) ) by L166 , GRAPH_2:14 , NAT_1:12;
L168: ( D30 . ( C45 + 2 ) ) = ( C43 . ( C45 + 2 ) ) by L162 , GRAPH_2:14 , NAT_1:12;
L169: C45 < ( len C43 ) by L162 , NAT_1:16 , XXREAL_0:2;
thus L170: ( D30 . ( C45 + 1 ) ) Joins ( D30 . C45 ) , ( D30 . ( C45 + 2 ) ) , C42 by L169 , L165 , L167 , L168 , L55;
end;
suppose L171: ( len C43 ) < ( C45 + 2 );

L172: ( ( len C43 ) + 1 ) <= ( C45 + 2 ) by L171 , NAT_1:13;
L173: ( ( len C43 ) + 1 ) < ( ( C45 + 1 ) + 1 ) by L172 , XXREAL_0:1;
L174: ( len C43 ) < ( C45 + 1 ) by L173 , XREAL_1:6;
L175: ( len C43 ) <= C45 by L174 , NAT_1:13;
consider C46 being Nat such that L176: ( C45 + 2 ) = ( ( len C43 ) + C46 ) by L171 , NAT_1:10;
reconsider D35 = C46 as  even (Element of ( NAT )) by L176 , ORDINAL1:def 12;
L177: D35 <> ( 0 ) by L171 , L176;
L178: ( ( 0 ) + 1 ) < ( D35 + 1 ) by L177 , XREAL_1:8;
L179: 1 <= D35 by L178 , NAT_1:13;
L180: ( C45 + 1 ) < ( ( len D30 ) + 1 ) by L160 , XREAL_1:8;
L181: ( C45 + 1 ) < ( ( len C43 ) + ( len C44 ) ) by L180 , CARD_1:27 , GRAPH_2:13;
L182: ( ( C45 + 1 ) + 1 ) < ( ( ( len C43 ) + ( len C44 ) ) + 1 ) by L181 , XREAL_1:8;
L183: ( D35 + ( len C43 ) ) < ( ( len C43 ) + ( ( len C44 ) + 1 ) ) by L182 , L176;
L184: D35 < ( ( len C44 ) + 1 ) by L183 , XREAL_1:6;
L185: D35 <= ( len C44 ) by L184 , NAT_1:13;
L186: D35 < ( len C44 ) by L185 , XXREAL_0:1;
L187: ( D30 . ( C45 + 2 ) ) = ( C44 . ( D35 + 1 ) ) by L186 , L176 , L179 , GRAPH_2:15;
L188:
now
per cases ;
suppose L189: C45 = ( len C43 );

L190: 1 <= C45 by ABIAN:12;
L191: ( D30 . C45 ) = ( C43 . ( len C43 ) ) by L190 , L189 , GRAPH_2:14;
L192: ( ( 1 + 1 ) + ( 0 ) ) < ( ( len C44 ) + 1 ) by L176 , L183 , L189 , XREAL_1:6;
L193: 1 < ( len C44 ) by L192 , XREAL_1:6;
L194: ( D30 . ( C45 + 1 ) ) = ( C44 . ( 1 + 1 ) ) by L193 , L189 , GRAPH_2:15;
thus L195: ( D30 . ( C45 + 1 ) ) Joins ( D30 . C45 ) , ( D30 . ( C45 + 2 ) ) , C42 by L194 , L158 , L176 , L187 , L189 , L191 , L193 , L55 , JORDAN12:2;
end;
suppose L196: ( len C43 ) <> C45;

reconsider D36 = ( 2 * 1 ) as  even (Element of ( NAT ));
L197: ( len C43 ) < C45 by L175 , L196 , XXREAL_0:1;
reconsider D37 = ( D35 - D36 ) as  even (Element of ( NAT )) by L197 , L176 , INT_1:5 , XREAL_1:8;
L198: ( ( 2 + ( len C43 ) ) - ( len C43 ) ) < ( ( D35 + ( len C43 ) ) - ( len C43 ) ) by L176 , L197 , XREAL_1:8;
L199: ( ( 1 + 1 ) - 1 ) < ( ( ( D37 + 1 ) + 1 ) - 1 ) by L198 , XREAL_1:14;
L200: 1 <= D37 by L199 , NAT_1:13;
set D38 = ( D37 + 1 );
reconsider D39 = D38 as  odd (Element of ( NAT ));
L201: 1 <= ( D37 + 1 ) by NAT_1:12;
L202: ( ( D39 + 1 ) - 1 ) < ( ( len C44 ) - ( 0 ) ) by L185 , XREAL_1:15;
L203: ( C44 . ( D39 + 1 ) ) = ( D30 . ( ( len C43 ) + D39 ) ) by L202 , L201 , GRAPH_2:15
.= ( D30 . ( C45 + 1 ) ) by L176;
L204: D39 < ( D39 + 1 ) by NAT_1:19;
L205: D39 < ( len C44 ) by L204 , L185 , XXREAL_0:2;
L206: ( D39 + 2 ) = ( D35 + 1 );
L207: ( C44 . ( D39 + 2 ) ) = ( D30 . ( C45 + 2 ) ) by L206 , L176 , L179 , L186 , GRAPH_2:15;
L208: D37 < ( D37 + ( 1 + 1 ) ) by NAT_1:16;
L209: D37 < ( len C44 ) by L208 , L185 , XXREAL_0:2;
L210: ( C45 + 2 ) = ( ( ( len C43 ) + D37 ) + 2 ) by L176;
L211: ( D30 . C45 ) = ( C44 . ( D37 + 1 ) ) by L210 , L200 , L209 , GRAPH_2:15;
thus L212: D34 Joins D32 , D33 , C42 by L211 , L207 , L205 , L203 , L55;
end;
end;
thus L214: D34 Joins D32 , D33 , C42 by L188;
end;
end;
thus L216: D34 Joins D32 , D33 , C42 by L161;
end;
L217:
now
assume L218: ( len D30 ) is  even;
reconsider D40 = D31 as  even (Element of ( NAT )) by L218;
L219: ( D40 + 1 ) = ( ( len C43 ) + ( len C44 ) ) by CARD_1:27 , GRAPH_2:13;
thus L220: contradiction by L219;
end;
L221: 1 <= ( len C43 ) by ABIAN:12;
L222: ( D30 . 1 ) = ( C43 .first() ) by L221 , GRAPH_2:14;
thus L223: ( C43 ^' C44 ) is (Walk of C42) by L222 , L217 , L159 , L55;
end;
thus L224: thesis;
end;
end;
definition
let C47 being _Graph;
let C48 being (Walk of C47);
let C49 , C50 being Nat;
func C48 .cut (C49 , C50) -> (Walk of C47) equals 
:L226: ( (C49 , C50) -cut C48 ) if (C49 is  odd & C50 is  odd & C49 <= C50 & C50 <= ( len C48 )) otherwise C48;
correctness
proof
thus L227:now
set D41 = ( (C49 , C50) -cut C48 );
set D42 = ( the_Vertices_of C47 );
assume that
L228: C49 is  odd
and
L229: C50 is  odd
and
L230: C49 <= C50
and
L231: C50 <= ( len C48 );
reconsider D43 = C49 , D44 = C50 as  odd Nat by L228 , L229;
L232: 1 <= C49 by L228 , ABIAN:12;
L233: ( ( ( len D41 ) + D43 ) - D43 ) = ( ( D44 + 1 ) - D43 ) by L232 , L230 , L231 , GRAPH_2:def 1;
reconsider D45 = ( len D41 ) as  odd (Element of ( NAT )) by L233;
L234:
now
reconsider D46 = ( D45 - 1 ) as (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L235: D45 is  odd;
thus L236: ( len D41 ) is  odd by L235;
L237: ( 0 ) < ( D46 + 1 );
L238: ( D41 . ( ( 0 ) + 1 ) ) = ( C48 . ( C49 + ( 0 ) ) ) by L237 , L230 , L231 , L232 , GRAPH_2:def 1;
L239: C49 <= ( len C48 ) by L230 , L231 , XXREAL_0:2;
L240: ( C48 . C49 ) = ( C48 .vertexAt C49 ) by L239 , L228 , L114;
thus L241: ( D41 . 1 ) in D42 by L240 , L238;
let C51 being  odd (Element of ( NAT ));
reconsider D47 = ( ( D43 + C51 ) - 1 ) as  odd (Element of ( NAT )) by L232 , INT_1:5 , NAT_1:12;
reconsider D48 = ( C51 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
assume L242: C51 < ( len D41 );
L243: ( C51 + 1 ) <= D45 by L242 , NAT_1:13;
L244: ( C51 + 1 ) < ( len D41 ) by L243 , XXREAL_0:1;
L245: ( D41 . ( ( C51 + 1 ) + 1 ) ) = ( C48 . ( C49 + ( C51 + 1 ) ) ) by L244 , L230 , L231 , L232 , GRAPH_2:def 1;
L246: ( C51 + C49 ) < ( ( len D41 ) + C49 ) by L242 , XREAL_1:8;
L247: ( C51 + C49 ) < ( C50 + 1 ) by L246 , L230 , L231 , L232 , GRAPH_2:def 1;
L248: ( C51 + D43 ) <= D44 by L247 , NAT_1:13;
L249: ( D43 + C51 ) < D44 by L248 , XXREAL_0:1;
L250: ( C49 + C51 ) < ( len C48 ) by L249 , L231 , XXREAL_0:2;
L251: ( ( C49 + C51 ) - 1 ) < ( ( len C48 ) - ( 0 ) ) by L250 , XREAL_1:14;
L252: ( C48 . ( D47 + 1 ) ) Joins ( C48 . D47 ) , ( C48 . ( D47 + 2 ) ) , C47 by L251 , L55;
L253: D48 < ( ( len D41 ) - ( 0 ) ) by L242 , XREAL_1:14;
L254: ( D41 . ( D48 + 1 ) ) = ( C48 . ( C49 + D48 ) ) by L253 , L230 , L231 , L232 , GRAPH_2:def 1;
thus L255: ( D41 . ( C51 + 1 ) ) Joins ( D41 . C51 ) , ( D41 . ( C51 + 2 ) ) , C47 by L254 , L230 , L231 , L232 , L242 , L245 , L252 , GRAPH_2:def 1;
end;
thus L256: ( (C49 , C50) -cut C48 ) is (Walk of C47) by L234 , L55;
end;
thus L257: thesis;
end;
end;
definition
let C52 being _Graph;
let C53 being (Walk of C52);
let C54 , C55 being (Element of ( NAT ));
func C53 .remove (C54 , C55) -> (Walk of C52) equals 
:L259: ( ( C53 .cut (1 , C54) ) .append ( C53 .cut (C55 , ( len C53 )) ) ) if (C54 is  odd & C55 is  odd & C54 <= C55 & C55 <= ( len C53 ) & ( C53 . C54 ) = ( C53 . C55 )) otherwise C53;
correctness;
end;
definition
let C56 being _Graph;
let C57 being (Walk of C56);
let C58 being set;
func C57 .addEdge C58 -> (Walk of C56) equals 
( C57 .append ( C56 .walkOf (( C57 .last() ) , C58 , ( ( C57 .last() ) .adj C58 )) ) );
coherence;
end;
definition
let C59 being _Graph;
let C60 being (Walk of C59);
func C60 .vertexSeq() -> (VertexSeq of C59) means 
:L262: (( ( len C60 ) + 1 ) = ( 2 * ( len it ) ) & (for B24 being Nat holds ((1 <= B24 & B24 <= ( len it )) implies ( it . B24 ) = ( C60 . ( ( 2 * B24 ) - 1 ) ))));
existence
proof
deffunc H1(Nat) = ( C60 . ( ( 2 * $1 ) - 1 ) );
reconsider D49 = ( ( len C60 ) + 1 ) as  even (Element of ( NAT ));
set D50 = ( D49 div 2 );
consider C61 being FinSequence such that L263: (( len C61 ) = D50 & (for B25 being Nat holds (B25 in ( dom C61 ) implies ( C61 . B25 ) = H1(B25)))) from FINSEQ_1:sch 2;
L264: 2 divides D49 by PEPIN:22;
L265: ( 2 * D50 ) = D49 by L264 , NAT_D:3;
L266:
now
let C62 being set;
assume L267: C62 in ( rng C61 );
consider C63 being set such that L268: C63 in ( dom C61 ) and L269: C62 = ( C61 . C63 ) by L267 , FUNCT_1:def 3;
L270: C63 in ( Seg D50 ) by L263 , L268 , FINSEQ_1:def 3;
reconsider D51 = C63 as (Element of ( NAT )) by L268;
set D52 = ( D51 * 2 );
reconsider D53 = D52 as  even (Element of ( NAT ));
set D54 = ( D53 - 1 );
L271: 1 <= D51 by L270 , FINSEQ_1:1;
L272: ( 1 * 2 ) <= D53 by L271 , XREAL_1:64;
reconsider D55 = D54 as  odd (Element of ( NAT )) by L272 , INT_1:5 , XXREAL_0:2;
L273: D51 <= D50 by L270 , FINSEQ_1:1;
L274: D53 <= ( D50 * 2 ) by L273 , XREAL_1:64;
L275: D55 <= ( D49 - 1 ) by L274 , L265 , XREAL_1:9;
L276: ( C60 . D55 ) = ( C60 .vertexAt D55 ) by L275 , L114;
L277: ( C60 . D55 ) in ( the_Vertices_of C59 ) by L276;
thus L278: C62 in ( the_Vertices_of C59 ) by L277 , L263 , L268 , L269;
end;
L279: ( rng C61 ) c= ( the_Vertices_of C59 ) by L266 , TARSKI:def 3;
reconsider D56 = C61 as (FinSequence of ( the_Vertices_of C59 )) by L279 , FINSEQ_1:def 4;
L280:
now
let C64 being (Element of ( NAT ));
set D57 = ( D56 . ( C64 + 1 ) );
assume that
L281: 1 <= C64
and
L282: C64 < ( len D56 );
set D58 = ( 2 * C64 );
reconsider D59 = D58 as  even (Element of ( NAT ));
L283: 1 <= ( C64 + 1 ) by L281 , NAT_1:13;
set D60 = ( D59 - 1 );
L284: ( 1 * 2 ) <= ( C64 * 2 ) by L281 , XREAL_1:64;
reconsider D61 = D60 as  odd (Element of ( NAT )) by L284 , INT_1:5 , XXREAL_0:2;
L285: D59 <= D49 by L265 , L263 , L282 , XREAL_1:68;
L286: ( D59 - 1 ) <= ( ( ( len C60 ) + 1 ) - 1 ) by L285 , XREAL_1:9;
L287: D61 <> ( len C60 ) by L265 , L263 , L282;
L288: D61 < ( len C60 ) by L287 , L286 , XXREAL_0:1;
L289: ( C60 . ( D61 + 1 ) ) Joins ( C60 . D61 ) , ( C60 . ( D61 + 2 ) ) , C59 by L288 , L55;
L290: ( C64 + 1 ) <= D50 by L263 , L282 , NAT_1:13;
L291: ( C64 + 1 ) in ( dom D56 ) by L290 , L263 , L283 , FINSEQ_3:25;
L292: D57 = ( C60 . ( ( 2 * ( C64 + 1 ) ) - 1 ) ) by L291 , L263
.= ( C60 . ( D59 + 1 ) );
L293: C64 in ( dom D56 ) by L281 , L282 , FINSEQ_3:25;
L294: ( C60 . ( D61 + 1 ) ) Joins ( D56 . C64 ) , ( C60 . ( D61 + 2 ) ) , C59 by L293 , L263 , L289;
thus L295: (ex B26 being set st B26 Joins ( D56 . C64 ) , ( D56 . ( C64 + 1 ) ) , C59) by L294 , L292;
end;
reconsider D62 = D56 as (VertexSeq of C59) by L280 , L44;
take D62;
thus L296: ( ( len C60 ) + 1 ) = ( 2 * ( len D62 ) ) by L264 , L263 , NAT_D:3;
let C65 being Nat;
assume that
L297: 1 <= C65
and
L298: C65 <= ( len D62 );
L299: C65 in ( dom D62 ) by L297 , L298 , FINSEQ_3:25;
thus L300: thesis by L299 , L263;
end;
uniqueness
proof
let C66 , C67 being (VertexSeq of C59);
assume that
L301: ( ( len C60 ) + 1 ) = ( 2 * ( len C66 ) )
and
L302: (for B27 being Nat holds ((1 <= B27 & B27 <= ( len C66 )) implies ( C66 . B27 ) = ( C60 . ( ( 2 * B27 ) - 1 ) )))
and
L303: ( ( len C60 ) + 1 ) = ( 2 * ( len C67 ) )
and
L304: (for B28 being Nat holds ((1 <= B28 & B28 <= ( len C67 )) implies ( C67 . B28 ) = ( C60 . ( ( 2 * B28 ) - 1 ) )));
L305:
now
let C68 being Nat;
assume that
L306: C68 in ( dom C66 );
L307: C68 <= ( len C66 ) by L306 , FINSEQ_3:25;
L308: 1 <= C68 by L306 , FINSEQ_3:25;
L309: ( C66 . C68 ) = ( C60 . ( ( 2 * C68 ) - 1 ) ) by L308 , L302 , L307;
thus L310: ( C66 . C68 ) = ( C67 . C68 ) by L309 , L301 , L303 , L304 , L308 , L307;
end;
L311: ( dom C66 ) = ( Seg ( len C67 ) ) by L301 , L303 , FINSEQ_1:def 3
.= ( dom C67 ) by FINSEQ_1:def 3;
thus L312: C66 = C67 by L311 , L305 , FINSEQ_1:13;
end;
end;
definition
let C69 being _Graph;
let C70 being (Walk of C69);
func C70 .edgeSeq() -> (EdgeSeq of C69) means 
:L314: (( len C70 ) = ( ( 2 * ( len it ) ) + 1 ) & (for B29 being Nat holds ((1 <= B29 & B29 <= ( len it )) implies ( it . B29 ) = ( C70 . ( 2 * B29 ) ))));
existence
proof
deffunc H2(Nat) = ( C70 . ( 2 * $1 ) );
reconsider D63 = ( ( len C70 ) - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
set D64 = ( D63 div 2 );
reconsider D65 = D64 as (Element of ( NAT ));
consider C71 being FinSequence such that L315: (( len C71 ) = D65 & (for B30 being Nat holds (B30 in ( dom C71 ) implies ( C71 . B30 ) = H2(B30)))) from FINSEQ_1:sch 2;
L316:
now
let C72 being set;
L317: 2 divides D63 by PEPIN:22;
assume L318: C72 in ( rng C71 );
consider C73 being set such that L319: C73 in ( dom C71 ) and L320: C72 = ( C71 . C73 ) by L318 , FUNCT_1:def 3;
L321: C73 in ( Seg D65 ) by L315 , L319 , FINSEQ_1:def 3;
reconsider D66 = C73 as (Element of ( NAT )) by L319;
reconsider D67 = ( 2 * D66 ) as  even (Element of ( NAT ));
L322: D66 <= D65 by L321 , FINSEQ_1:1;
L323: ( D66 * 2 ) <= ( D65 * 2 ) by L322 , XREAL_1:64;
L324: D67 <= D63 by L323 , L317 , NAT_D:3;
L325: ( D67 + 1 ) <= ( D63 + 1 ) by L324 , XREAL_1:7;
L326: 1 <= D66 by L321 , FINSEQ_1:1;
L327: ( 1 * 2 ) <= ( 2 * D66 ) by L326 , XREAL_1:64;
reconsider D68 = ( D67 - 1 ) as  odd (Element of ( NAT )) by L327 , INT_1:5 , XXREAL_0:2;
L328: D67 <= ( D67 + 1 ) by NAT_1:11;
L329: D67 <= ( len C70 ) by L328 , L325 , XXREAL_0:2;
L330: D68 < ( len C70 ) by L329 , XREAL_1:147;
L331: ( C70 . ( D68 + 1 ) ) Joins ( C70 . D68 ) , ( C70 . ( D68 + 2 ) ) , C69 by L330 , L55;
L332: C72 = ( C70 . ( 2 * D66 ) ) by L315 , L319 , L320;
thus L333: C72 in ( the_Edges_of C69 ) by L332 , L331 , GLIB_000:def 13;
end;
L334: ( rng C71 ) c= ( the_Edges_of C69 ) by L316 , TARSKI:def 3;
reconsider D69 = C71 as (FinSequence of ( the_Edges_of C69 )) by L334 , FINSEQ_1:def 4;
L335: 2 divides D63 by PEPIN:22;
L336: D63 = ( 2 * D65 ) by L335 , NAT_D:3;
L337: ( len C70 ) = ( ( 2 * D65 ) + 1 ) by L336;
L338:
now
set D70 = ( C70 .vertexSeq() );
take D71 = D70;
L339: ( ( ( 2 * ( len D69 ) ) + 1 ) + 1 ) = ( 2 * ( len D71 ) ) by L336 , L315 , L262;
L340: ( 2 * ( ( len D69 ) + 1 ) ) = ( 2 * ( len D71 ) ) by L339;
thus L341: ( len D71 ) = ( ( len D69 ) + 1 ) by L339;
let C74 being (Element of ( NAT ));
set D72 = ( D71 . C74 );
set D73 = ( D71 . ( C74 + 1 ) );
assume that
L342: 1 <= C74
and
L343: C74 <= ( len D69 );
set D74 = ( 2 * C74 );
reconsider D75 = D74 as  even (Element of ( NAT ));
set D76 = ( D75 - 1 );
L344: 1 <= ( C74 + C74 ) by L342 , NAT_1:12;
reconsider D77 = D76 as  odd (Element of ( NAT )) by L344 , INT_1:5;
L345: 1 <= ( C74 + 1 ) by NAT_1:12;
L346: ( C74 * 2 ) <= ( ( len D69 ) * 2 ) by L343 , XREAL_1:64;
L347: ( C74 * 2 ) <= ( len C70 ) by L346 , L337 , L315 , NAT_1:12;
L348: D77 < ( ( len C70 ) - ( 0 ) ) by L347 , XREAL_1:15;
L349: ( C74 + 1 ) <= ( len D71 ) by L340 , L343 , XREAL_1:7;
L350: D73 = ( C70 . ( ( 2 * ( C74 + 1 ) ) - 1 ) ) by L349 , L345 , L262;
L351: D73 = ( C70 . ( D77 + 2 ) ) by L350;
L352: C74 in ( dom D69 ) by L342 , L343 , FINSEQ_3:25;
L353: ( D69 . C74 ) = ( C70 . ( D77 + 1 ) ) by L352 , L315;
L354: C74 <= ( len D71 ) by L340 , L343 , NAT_1:12;
L355: D72 = ( C70 . ( ( 2 * C74 ) - 1 ) ) by L354 , L342 , L262;
thus L356: ( D69 . C74 ) Joins ( D71 . C74 ) , ( D71 . ( C74 + 1 ) ) , C69 by L355 , L353 , L351 , L348 , L55;
end;
reconsider D78 = D69 as (EdgeSeq of C69) by L338 , L49;
take D78;
thus L357: ( len C70 ) = ( ( 2 * ( len D78 ) ) + 1 ) by L336 , L315;
let C75 being Nat;
assume that
L358: 1 <= C75
and
L359: C75 <= ( len D78 );
L360: C75 in ( dom D78 ) by L358 , L359 , FINSEQ_3:25;
thus L361: thesis by L360 , L315;
end;
uniqueness
proof
let C76 , C77 being (EdgeSeq of C69);
assume that
L362: ( len C70 ) = ( ( 2 * ( len C76 ) ) + 1 )
and
L363: (for B31 being Nat holds ((1 <= B31 & B31 <= ( len C76 )) implies ( C76 . B31 ) = ( C70 . ( 2 * B31 ) )))
and
L364: ( len C70 ) = ( ( 2 * ( len C77 ) ) + 1 )
and
L365: (for B32 being Nat holds ((1 <= B32 & B32 <= ( len C77 )) implies ( C77 . B32 ) = ( C70 . ( 2 * B32 ) )));
L366:
now
let C78 being Nat;
assume L367: C78 in ( dom C76 );
L368: 1 <= C78 by L367 , FINSEQ_3:25;
L369: C78 <= ( len C77 ) by L362 , L364 , L367 , FINSEQ_3:25;
L370: C78 <= ( len C76 ) by L367 , FINSEQ_3:25;
thus L371: ( C76 . C78 ) = ( C70 . ( 2 * C78 ) ) by L370 , L363 , L368
.= ( C77 . C78 ) by L365 , L368 , L369;
end;
L372: ( dom C76 ) = ( Seg ( len C77 ) ) by L362 , L364 , FINSEQ_1:def 3
.= ( dom C77 ) by FINSEQ_1:def 3;
thus L373: C76 = C77 by L372 , L366 , FINSEQ_1:13;
end;
end;
definition
let C79 being _Graph;
let C80 being (Walk of C79);
func C80 .vertices() ->  finite (Subset of ( the_Vertices_of C79 )) equals 
( rng ( C80 .vertexSeq() ) );
coherence;
end;
definition
let C81 being _Graph;
let C82 being (Walk of C81);
func C82 .edges() ->  finite (Subset of ( the_Edges_of C81 )) equals 
( rng ( C82 .edgeSeq() ) );
coherence;
end;
definition
let C83 being _Graph;
let C84 being (Walk of C83);
func C84 .length() -> (Element of ( NAT )) equals 
( len ( C84 .edgeSeq() ) );
coherence;
end;
definition
let C85 being _Graph;
let C86 being (Walk of C85);
let C87 being set;
func C86 .find C87 ->  odd (Element of ( NAT )) means 
:L378: (it <= ( len C86 ) & ( C86 . it ) = C87 & (for B33 being  odd Nat holds ((B33 <= ( len C86 ) & ( C86 . B33 ) = C87) implies it <= B33))) if C87 in ( C86 .vertices() ) otherwise it = ( len C86 );
existence
proof
thus L379:now
defpred S1[ Nat ] means ($1 is  odd & $1 <= ( len C86 ) & ( C86 . $1 ) = C87);
set D79 = ( C86 .vertexSeq() );
assume L380: C87 in ( C86 .vertices() );
L381:
now
consider C88 being Nat such that L382: C88 in ( dom D79 ) and L383: ( D79 . C88 ) = C87 by L380 , FINSEQ_2:10;
set D80 = ( 2 * C88 );
reconsider D81 = D80 as  even Nat;
set D82 = ( D81 - 1 );
L384: 1 <= C88 by L382 , FINSEQ_3:25;
L385: 1 <= ( C88 + C88 ) by L384 , NAT_1:12;
reconsider D83 = D82 as  odd (Element of ( NAT )) by L385 , INT_1:5;
take D84 = D83;
L386: C88 <= ( len D79 ) by L382 , FINSEQ_3:25;
L387: ( C88 * 2 ) <= ( ( len D79 ) * 2 ) by L386 , XREAL_1:64;
L388: ( C88 * 2 ) <= ( ( len C86 ) + 1 ) by L387 , L262;
L389: ( D81 - 1 ) <= ( ( ( len C86 ) + 1 ) - 1 ) by L388 , XREAL_1:13;
thus L390: D84 <= ( len C86 ) by L389;
thus L391: ( C86 . D84 ) = C87 by L383 , L384 , L386 , L262;
end;
L392: (ex B34 being Nat st S1[ B34 ]) by L381;
consider C89 being Nat such that L393: (S1[ C89 ] & (for B35 being Nat holds (S1[ B35 ] implies C89 <= B35))) from NAT_1:sch 5(L392);
reconsider D85 = C89 as  odd (Element of ( NAT )) by L393 , ORDINAL1:def 12;
take D86 = D85;
thus L394: (D86 <= ( len C86 ) & ( C86 . D86 ) = C87) by L393;
let C90 being  odd Nat;
assume that
L395: C90 <= ( len C86 )
and
L396: ( C86 . C90 ) = C87;
thus L397: D86 <= C90 by L393 , L395 , L396;
end;
set D87 = ( len C86 );
assume L398: (not C87 in ( C86 .vertices() ));
take D87;
thus L399: thesis;
end;
uniqueness
proof
let C91 , C92 being  odd (Element of ( NAT ));
thus L400:now
assume L401: C87 in ( C86 .vertices() );
assume that
L402: C91 <= ( len C86 )
and
L403: ( C86 . C91 ) = C87
and
L404: (for B36 being  odd Nat holds ((B36 <= ( len C86 ) & ( C86 . B36 ) = C87) implies C91 <= B36));
assume that
L405: C92 <= ( len C86 )
and
L406: ( C86 . C92 ) = C87
and
L407: (for B37 being  odd Nat holds ((B37 <= ( len C86 ) & ( C86 . B37 ) = C87) implies C92 <= B37));
L408: C92 <= C91 by L402 , L403 , L407;
L409: C91 <= C92 by L404 , L405 , L406;
thus L410: C91 = C92 by L409 , L408 , XXREAL_0:1;
end;
assume L411: (not C87 in ( C86 .vertices() ));
thus L412: thesis;
end;
consistency;
end;
definition
let C93 being _Graph;
let C94 being (Walk of C93);
let C95 being (Element of ( NAT ));
func C94 .find C95 ->  odd (Element of ( NAT )) means 
:L414: (it <= ( len C94 ) & ( C94 . it ) = ( C94 . C95 ) & (for B38 being  odd Nat holds ((B38 <= ( len C94 ) & ( C94 . B38 ) = ( C94 . C95 )) implies it <= B38))) if (C95 is  odd & C95 <= ( len C94 )) otherwise it = ( len C94 );
existence
proof
defpred S2[ Nat ] means ($1 is  odd & $1 <= ( len C94 ) & ( C94 . $1 ) = ( C94 . C95 ));
thus L415:now
assume that
L416: C95 is  odd
and
L417: C95 <= ( len C94 );
L418: (ex B39 being Nat st S2[ B39 ]) by L416 , L417;
consider C96 being Nat such that L419: (S2[ C96 ] & (for B40 being Nat holds (S2[ B40 ] implies C96 <= B40))) from NAT_1:sch 5(L418);
reconsider D88 = C96 as  odd (Element of ( NAT )) by L419 , ORDINAL1:def 12;
take D89 = D88;
thus L420: (D89 <= ( len C94 ) & ( C94 . D89 ) = ( C94 . C95 )) by L419;
let C97 being  odd Nat;
thus L421: ((C97 <= ( len C94 ) & ( C94 . C97 ) = ( C94 . C95 )) implies D89 <= C97) by L419;
end;
thus L422: thesis;
end;
uniqueness
proof
let C98 , C99 being  odd (Element of ( NAT ));
thus L423:now
assume that
L424: C95 is  odd
and
L425: C95 <= ( len C94 );
assume that
L426: C98 <= ( len C94 )
and
L427: ( C94 . C98 ) = ( C94 . C95 )
and
L428: (for B41 being  odd Nat holds ((B41 <= ( len C94 ) & ( C94 . B41 ) = ( C94 . C95 )) implies C98 <= B41));
assume that
L429: C99 <= ( len C94 )
and
L430: ( C94 . C99 ) = ( C94 . C95 )
and
L431: (for B42 being  odd Nat holds ((B42 <= ( len C94 ) & ( C94 . B42 ) = ( C94 . C95 )) implies C99 <= B42));
L432: C99 <= C98 by L426 , L427 , L431;
L433: C98 <= C99 by L428 , L429 , L430;
thus L434: C98 = C99 by L433 , L432 , XXREAL_0:1;
end;
thus L435: thesis;
end;
consistency;
end;
definition
let C100 being _Graph;
let C101 being (Walk of C100);
let C102 being set;
func C101 .rfind C102 ->  odd (Element of ( NAT )) means 
:L437: (it <= ( len C101 ) & ( C101 . it ) = C102 & (for B43 being  odd (Element of ( NAT )) holds ((B43 <= ( len C101 ) & ( C101 . B43 ) = C102) implies B43 <= it))) if C102 in ( C101 .vertices() ) otherwise it = ( len C101 );
existence
proof
thus L438:now
defpred S3[ Nat ] means ($1 is  odd & $1 <= ( len C101 ) & ( C101 . $1 ) = C102);
assume L439: C102 in ( C101 .vertices() );
L440: ( C101 . ( C101 .find C102 ) ) = C102 by L439 , L378;
L441: ( C101 .find C102 ) <= ( len C101 ) by L439 , L378;
L442: (ex B44 being Nat st S3[ B44 ]) by L441 , L440;
L443: (for B45 being Nat holds (S3[ B45 ] implies B45 <= ( len C101 )));
consider C103 being Nat such that L444: (S3[ C103 ] & (for B46 being Nat holds (S3[ B46 ] implies B46 <= C103))) from NAT_1:sch 6(L443 , L442);
reconsider D90 = C103 as  odd (Element of ( NAT )) by L444 , ORDINAL1:def 12;
take D91 = D90;
thus L445: (D91 <= ( len C101 ) & ( C101 . D91 ) = C102) by L444;
let C104 being  odd (Element of ( NAT ));
assume that
L446: C104 <= ( len C101 )
and
L447: ( C101 . C104 ) = C102;
thus L448: C104 <= D91 by L444 , L446 , L447;
end;
thus L449: thesis;
end;
uniqueness
proof
let C105 , C106 being  odd (Element of ( NAT ));
thus L450:now
assume L451: C102 in ( C101 .vertices() );
assume that
L452: C105 <= ( len C101 )
and
L453: ( C101 . C105 ) = C102
and
L454: (for B47 being  odd (Element of ( NAT )) holds ((B47 <= ( len C101 ) & ( C101 . B47 ) = C102) implies B47 <= C105));
assume that
L455: C106 <= ( len C101 )
and
L456: ( C101 . C106 ) = C102
and
L457: (for B48 being  odd (Element of ( NAT )) holds ((B48 <= ( len C101 ) & ( C101 . B48 ) = C102) implies B48 <= C106));
L458: C105 <= C106 by L452 , L453 , L457;
L459: C106 <= C105 by L454 , L455 , L456;
thus L460: C105 = C106 by L459 , L458 , XXREAL_0:1;
end;
thus L461: thesis;
end;
consistency;
end;
definition
let C107 being _Graph;
let C108 being (Walk of C107);
let C109 being (Element of ( NAT ));
func C108 .rfind C109 ->  odd (Element of ( NAT )) means 
:L463: (it <= ( len C108 ) & ( C108 . it ) = ( C108 . C109 ) & (for B49 being  odd (Element of ( NAT )) holds ((B49 <= ( len C108 ) & ( C108 . B49 ) = ( C108 . C109 )) implies B49 <= it))) if (C109 is  odd & C109 <= ( len C108 )) otherwise it = ( len C108 );
existence
proof
defpred S4[ Nat ] means ($1 is  odd & $1 <= ( len C108 ) & ( C108 . $1 ) = ( C108 . C109 ));
thus L464:now
L465: (for B50 being Nat holds (S4[ B50 ] implies B50 <= ( len C108 )));
assume that
L466: C109 is  odd
and
L467: C109 <= ( len C108 );
L468: (ex B51 being Nat st S4[ B51 ]) by L466 , L467;
consider C110 being Nat such that L469: (S4[ C110 ] & (for B52 being Nat holds (S4[ B52 ] implies B52 <= C110))) from NAT_1:sch 6(L465 , L468);
reconsider D92 = C110 as  odd (Element of ( NAT )) by L469 , ORDINAL1:def 12;
take D93 = D92;
thus L470: (D93 <= ( len C108 ) & ( C108 . D93 ) = ( C108 . C109 )) by L469;
thus L471: (for B53 being  odd (Element of ( NAT )) holds ((B53 <= ( len C108 ) & ( C108 . B53 ) = ( C108 . C109 )) implies B53 <= D93)) by L469;
end;
thus L472: thesis;
end;
uniqueness
proof
let C111 , C112 being  odd (Element of ( NAT ));
thus L473:now
assume that
L474: C109 is  odd
and
L475: C109 <= ( len C108 );
assume that
L476: C111 <= ( len C108 )
and
L477: ( C108 . C111 ) = ( C108 . C109 )
and
L478: (for B54 being  odd (Element of ( NAT )) holds ((B54 <= ( len C108 ) & ( C108 . B54 ) = ( C108 . C109 )) implies B54 <= C111));
assume that
L479: C112 <= ( len C108 )
and
L480: ( C108 . C112 ) = ( C108 . C109 )
and
L481: (for B55 being  odd (Element of ( NAT )) holds ((B55 <= ( len C108 ) & ( C108 . B55 ) = ( C108 . C109 )) implies B55 <= C112));
L482: C112 <= C111 by L478 , L479 , L480;
L483: C111 <= C112 by L476 , L477 , L481;
thus L484: C111 = C112 by L483 , L482 , XXREAL_0:1;
end;
thus L485: thesis;
end;
consistency;
end;
definition
let C113 being _Graph;
let C114 , C115 being set;
let C116 being (Walk of C113);
pred C116 is_Walk_from C114 , C115
means
:L487: (( C116 .first() ) = C114 & ( C116 .last() ) = C115)
;end;
definition
let C117 being _Graph;
let C118 being (Walk of C117);
attr C118 is  closed
means
:L489: ( C118 .first() ) = ( C118 .last() );
attr C118 is  directed
means
:L490: (for B56 being  odd (Element of ( NAT )) holds (B56 < ( len C118 ) implies ( ( the_Source_of C117 ) . ( C118 . ( B56 + 1 ) ) ) = ( C118 . B56 )));
attr C118 is  trivial
means
:L491: ( C118 .length() ) = ( 0 );
attr C118 is  Trail-like
means
:L492: ( C118 .edgeSeq() ) is  one-to-one;
end;
notation
let C119 being _Graph;
let C120 being (Walk of C119);
antonym C120 is  open for C120 is  closed;
end;
definition
let C121 being _Graph;
let C122 being (Walk of C121);
attr C122 is  Path-like
means
:L495: (C122 is  Trail-like & (for B57 , B58 being  odd (Element of ( NAT )) holds ((B57 < B58 & B58 <= ( len C122 )) implies (( C122 . B57 ) = ( C122 . B58 ) implies (B57 = 1 & B58 = ( len C122 ))))));
end;
definition
let C123 being _Graph;
let C124 being (Walk of C123);
attr C124 is  vertex-distinct
means
:L497: (for B59 , B60 being  odd (Element of ( NAT )) holds ((B59 <= ( len C124 ) & B60 <= ( len C124 ) & ( C124 . B59 ) = ( C124 . B60 )) implies B59 = B60));
end;
definition
let C125 being _Graph;
let C126 being (Walk of C125);
attr C126 is  Circuit-like
means
:L499: (C126 is  closed & C126 is  Trail-like & C126 is non  trivial);
attr C126 is  Cycle-like
means
:L500: (C126 is  closed & C126 is  Path-like & C126 is non  trivial);
end;
L502: (for B61 being _Graph holds (for B62 being (Walk of B61) holds (for B63 being  odd (Element of ( NAT )) holds (B63 <= ( len B62 ) implies ( B62 . B63 ) in ( the_Vertices_of B61 )))))
proof
let C127 being _Graph;
let C128 being (Walk of C127);
let C129 being  odd (Element of ( NAT ));
assume L503: C129 <= ( len C128 );
L504: ( C128 . C129 ) = ( C128 .vertexAt C129 ) by L503 , L114;
thus L505: thesis by L504;
end;
L506: (for B64 being _Graph holds (for B65 being (Walk of B64) holds (for B66 being  even (Element of ( NAT )) holds (B66 in ( dom B65 ) implies (ex B67 being  odd (Element of ( NAT )) st (B67 = ( B66 - 1 ) & ( B66 - 1 ) in ( dom B65 ) & ( B66 + 1 ) in ( dom B65 ) & ( B65 . B66 ) Joins ( B65 . B67 ) , ( B65 . ( B66 + 1 ) ) , B64))))))
proof
let C130 being _Graph;
let C131 being (Walk of C130);
let C132 being  even (Element of ( NAT ));
L507: 1 <= ( 1 + C132 ) by NAT_1:12;
assume L508: C132 in ( dom C131 );
L509: C132 <= ( len C131 ) by L508 , FINSEQ_3:25;
L510: 1 <= C132 by L508 , FINSEQ_3:25;
reconsider D94 = ( C132 - 1 ) as  odd (Element of ( NAT )) by L510 , INT_1:5;
take D94;
thus L511: D94 = ( C132 - 1 );
L512: 1 < C132 by L510 , JORDAN12:2 , XXREAL_0:1;
L513: ( 1 + 1 ) <= C132 by L512 , NAT_1:13;
L514: ( ( 1 + 1 ) - 1 ) <= ( C132 - 1 ) by L513 , XREAL_1:13;
L515: 1 <= D94 by L514;
L516: ( C132 - 1 ) <= ( ( len C131 ) - ( 0 ) ) by L509 , XREAL_1:13;
thus L517: ( C132 - 1 ) in ( dom C131 ) by L516 , L515 , FINSEQ_3:25;
L518: C132 < ( len C131 ) by L509 , XXREAL_0:1;
L519: ( C132 + 1 ) <= ( len C131 ) by L518 , NAT_1:13;
thus L520: ( C132 + 1 ) in ( dom C131 ) by L519 , L507 , FINSEQ_3:25;
L521: ( C132 - 1 ) < ( ( len C131 ) - ( 0 ) ) by L509 , XREAL_1:15;
L522: ( C131 . ( D94 + 1 ) ) Joins ( C131 . D94 ) , ( C131 . ( D94 + 2 ) ) , C130 by L521 , L55;
thus L523: thesis by L522;
end;
L524: (for B68 being _Graph holds (for B69 being (Walk of B68) holds (for B70 being  odd (Element of ( NAT )) holds (B70 < ( len B69 ) implies (B70 in ( dom B69 ) & ( B70 + 1 ) in ( dom B69 ) & ( B70 + 2 ) in ( dom B69 ))))))
proof
let C133 being _Graph;
let C134 being (Walk of C133);
let C135 being  odd (Element of ( NAT ));
L525: 1 <= C135 by ABIAN:12;
L526: 1 <= ( C135 + 1 ) by NAT_1:12;
L527: 1 <= ( C135 + 2 ) by NAT_1:12;
assume L528: C135 < ( len C134 );
L529: ( C135 + 1 ) <= ( len C134 ) by L528 , NAT_1:13;
L530: ( C135 + 2 ) <= ( len C134 ) by L528 , L1;
thus L531: thesis by L530 , L528 , L525 , L526 , L527 , L529 , FINSEQ_3:25;
end;
L532: (for B71 being _Graph holds (for B72 being (Vertex of B71) holds (( B71 .walkOf B72 ) is  closed & ( B71 .walkOf B72 ) is  directed & ( B71 .walkOf B72 ) is  trivial & ( B71 .walkOf B72 ) is  Trail-like & ( B71 .walkOf B72 ) is  Path-like)))
proof
let C136 being _Graph;
let C137 being (Vertex of C136);
set D95 = ( C136 .walkOf C137 );
L533: ( D95 .first() ) = ( D95 .last() ) by FINSEQ_1:40;
thus L534: D95 is  closed by L533 , L489;
L535:
now
let C138 being  odd (Element of ( NAT ));
assume L536: C138 < ( len D95 );
L537: C138 < 1 by L536 , FINSEQ_1:39;
thus L538: ( D95 . C138 ) = ( ( the_Source_of C136 ) . ( D95 . ( C138 + 1 ) ) ) by L537 , ABIAN:12;
end;
thus L539: D95 is  directed by L535 , L490;
L540: ( len D95 ) = 1 by FINSEQ_1:39;
L541: ( ( 0 ) + 1 ) = ( ( 2 * ( len ( D95 .edgeSeq() ) ) ) + 1 ) by L540 , L314;
L542: ( D95 .length() ) = ( 0 ) by L541;
thus L543: D95 is  trivial by L542 , L491;
L544: ( len D95 ) = ( ( 2 * ( len ( D95 .edgeSeq() ) ) ) + 1 ) by L314;
L545: ( ( 0 ) + 1 ) = ( ( 2 * ( len ( D95 .edgeSeq() ) ) ) + 1 ) by L544 , FINSEQ_1:40;
L546: ( D95 .edgeSeq() ) = ( {} ) by L545;
thus L547: D95 is  Trail-like by L546 , L492;
L548:
now
let C139 , C140 being  odd (Element of ( NAT ));
assume that
L549: C139 < C140
and
L550: C140 <= ( len D95 );
L551: C140 <= 1 by L550 , FINSEQ_1:40;
L552: C139 < 1 by L551 , L549 , XXREAL_0:2;
thus L553: (( D95 . C139 ) = ( D95 . C140 ) implies (C139 = 1 & C140 = ( len D95 ))) by L552 , ABIAN:12;
end;
thus L554: thesis by L548 , L547 , L495;
end;
L555: (for B73 being _Graph holds (for B74 , B75 , B76 being set holds (B75 Joins B74 , B76 , B73 implies ( len ( B73 .walkOf (B74 , B75 , B76) ) ) = 3)))
proof
let C141 being _Graph;
let C142 , C143 , C144 being set;
assume L556: C143 Joins C142 , C144 , C141;
L557: ( C141 .walkOf (C142 , C143 , C144) ) = <* C142 , C143 , C144 *> by L556 , L76;
thus L558: thesis by L557 , FINSEQ_1:45;
end;
L559: (for B77 being _Graph holds (for B78 , B79 , B80 being set holds (B79 Joins B78 , B80 , B77 implies (( ( B77 .walkOf (B78 , B79 , B80) ) .first() ) = B78 & ( ( B77 .walkOf (B78 , B79 , B80) ) .last() ) = B80 & ( B77 .walkOf (B78 , B79 , B80) ) is_Walk_from B78 , B80))))
proof
let C145 being _Graph;
let C146 , C147 , C148 being set;
set D96 = ( C145 .walkOf (C146 , C147 , C148) );
assume L560: C147 Joins C146 , C148 , C145;
L561: D96 = <* C146 , C147 , C148 *> by L560 , L76;
thus L562: ( D96 .first() ) = C146 by L561 , FINSEQ_1:45;
L563: ( len D96 ) = 3 by L561 , FINSEQ_1:45;
thus L564: ( D96 .last() ) = C148 by L563 , L561 , FINSEQ_1:45;
thus L565: thesis by L564 , L562 , L487;
end;
L566: (for B81 being _Graph holds (for B82 being (Walk of B81) holds (( B82 .first() ) = ( ( B82 .reverse() ) .last() ) & ( B82 .last() ) = ( ( B82 .reverse() ) .first() ))))
proof
let C149 being _Graph;
let C150 being (Walk of C149);
L567: ( len C150 ) = ( len ( C150 .reverse() ) ) by FINSEQ_5:def 3;
thus L568: ( C150 .first() ) = ( ( C150 .reverse() ) .last() ) by L567 , FINSEQ_5:62;
thus L569: thesis by FINSEQ_5:62;
end;
L570: (for B83 being _Graph holds (for B84 being (Walk of B83) holds (for B85 being (Element of ( NAT )) holds (B85 in ( dom ( B84 .reverse() ) ) implies (( ( B84 .reverse() ) . B85 ) = ( B84 . ( ( ( len B84 ) - B85 ) + 1 ) ) & ( ( ( len B84 ) - B85 ) + 1 ) in ( dom B84 ))))))
proof
let C151 being _Graph;
let C152 being (Walk of C151);
let C153 being (Element of ( NAT ));
assume L571: C153 in ( dom ( C152 .reverse() ) );
thus L572: ( ( C152 .reverse() ) . C153 ) = ( C152 . ( ( ( len C152 ) - C153 ) + 1 ) ) by L571 , FINSEQ_5:def 3;
L573: C153 in ( Seg ( len ( C152 .reverse() ) ) ) by L571 , FINSEQ_1:def 3;
L574: C153 in ( Seg ( len C152 ) ) by L573 , FINSEQ_5:def 3;
L575: ( ( ( len C152 ) - C153 ) + 1 ) in ( Seg ( len C152 ) ) by L574 , FINSEQ_5:2;
thus L576: thesis by L575 , FINSEQ_1:def 3;
end;
L577: (for B86 being _Graph holds (for B87 , B88 being (Walk of B86) holds (( B87 .last() ) = ( B88 .first() ) implies ( ( len ( B87 .append B88 ) ) + 1 ) = ( ( len B87 ) + ( len B88 ) ))))
proof
let C154 being _Graph;
let C155 , C156 being (Walk of C154);
set D97 = ( C155 .append C156 );
assume L578: ( C155 .last() ) = ( C156 .first() );
L579: D97 = ( C155 ^' C156 ) by L578 , L156;
thus L580: thesis by L579 , CARD_1:27 , GRAPH_2:13;
end;
L581: (for B89 being _Graph holds (for B90 , B91 being (Walk of B89) holds (( B90 .last() ) = ( B91 .first() ) implies (( len B90 ) <= ( len ( B90 .append B91 ) ) & ( len B91 ) <= ( len ( B90 .append B91 ) )))))
proof
let C157 being _Graph;
let C158 , C159 being (Walk of C157);
set D98 = ( C158 .append C159 );
assume L582: ( C158 .last() ) = ( C159 .first() );
L583: ( ( len D98 ) + 1 ) = ( ( len C158 ) + ( len C159 ) ) by L582 , L577;
L584: 1 <= ( len C159 ) by ABIAN:12;
L585: ( ( ( len C158 ) + ( len C159 ) ) - ( len C159 ) ) <= ( ( ( len D98 ) + 1 ) - 1 ) by L584 , L583 , XREAL_1:13;
thus L586: ( len C158 ) <= ( len D98 ) by L585;
L587: 1 <= ( len C158 ) by ABIAN:12;
L588: ( ( ( len C159 ) + ( len C158 ) ) - ( len C158 ) ) <= ( ( ( len D98 ) + 1 ) - 1 ) by L587 , L583 , XREAL_1:13;
thus L589: thesis by L588;
end;
L590: (for B92 being _Graph holds (for B93 , B94 being (Walk of B92) holds (( B93 .last() ) = ( B94 .first() ) implies (( ( B93 .append B94 ) .first() ) = ( B93 .first() ) & ( ( B93 .append B94 ) .last() ) = ( B94 .last() ) & ( B93 .append B94 ) is_Walk_from ( B93 .first() ) , ( B94 .last() )))))
proof
let C160 being _Graph;
let C161 , C162 being (Walk of C160);
set D99 = ( C161 .append C162 );
assume L591: ( C161 .last() ) = ( C162 .first() );
L592: D99 = ( C161 ^' C162 ) by L591 , L156;
L593: 1 <= ( len C161 ) by ABIAN:12;
thus L594: ( D99 .first() ) = ( C161 .first() ) by L593 , L592 , GRAPH_2:14;
L595:
now
per cases ;
suppose L596: ( len C162 ) <> 1;

L597: 1 <= ( len C162 ) by ABIAN:12;
L598: 1 < ( len C162 ) by L597 , L596 , XXREAL_0:1;
thus L599: ( D99 .last() ) = ( C162 .last() ) by L598 , L592 , GRAPH_2:16;
end;
suppose L600: ( len C162 ) = 1;

L601: ( (2 , 1) -cut C162 ) = ( {} ) by GRAPH_2:def 1;
L602: D99 = ( C161 ^ ( (2 , 1) -cut C162 ) ) by L592 , L600 , GRAPH_2:def 2;
thus L603: ( D99 .last() ) = ( C162 .last() ) by L602 , L591 , L600 , L601 , FINSEQ_1:34;
end;
end;
thus L605: thesis by L595 , L594 , L487;
end;
L606: (for B95 being _Graph holds (for B96 , B97 being (Walk of B95) holds (for B98 being (Element of ( NAT )) holds (B98 in ( dom B96 ) implies (( ( B96 .append B97 ) . B98 ) = ( B96 . B98 ) & B98 in ( dom ( B96 .append B97 ) ))))))
proof
let C163 being _Graph;
let C164 , C165 being (Walk of C163);
let C166 being (Element of ( NAT ));
set D100 = ( C164 .append C165 );
assume L607: C166 in ( dom C164 );
L608: C166 <= ( len C164 ) by L607 , FINSEQ_3:25;
L609: 1 <= C166 by L607 , FINSEQ_3:25;
L610:
now
per cases ;
suppose L611: ( C164 .last() ) = ( C165 .first() );

L612: D100 = ( C164 ^' C165 ) by L611 , L156;
thus L613: ( D100 . C166 ) = ( C164 . C166 ) by L612 , L609 , L608 , GRAPH_2:14;
reconsider D101 = ( ( len C165 ) - 1 ) as (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L614: C166 <= ( ( len C164 ) + D101 ) by L608 , NAT_1:12;
L615: C166 <= ( ( ( len C164 ) + ( len C165 ) ) + ( - 1 ) ) by L614;
L616: C166 <= ( ( ( len D100 ) + 1 ) + ( - 1 ) ) by L615 , L611 , L577;
thus L617: C166 in ( dom D100 ) by L616 , L609 , FINSEQ_3:25;
end;
suppose L618: ( C164 .last() ) <> ( C165 .first() );

thus L619: thesis by L618 , L607 , L156;
end;
end;
thus L621: thesis by L610;
end;
L622: (for B99 being _Graph holds (for B100 , B101 being (Walk of B99) holds (( B100 .last() ) = ( B101 .first() ) implies (for B102 being (Element of ( NAT )) holds (B102 < ( len B101 ) implies (( ( B100 .append B101 ) . ( ( len B100 ) + B102 ) ) = ( B101 . ( B102 + 1 ) ) & ( ( len B100 ) + B102 ) in ( dom ( B100 .append B101 ) )))))))
proof
let C167 being _Graph;
let C168 , C169 being (Walk of C167);
set D102 = ( C168 .append C169 );
assume L623: ( C168 .last() ) = ( C169 .first() );
let C170 being (Element of ( NAT ));
assume L624: C170 < ( len C169 );
L625: ( C170 + 1 ) <= ( len C169 ) by L624 , NAT_1:13;
L626: ( ( C170 + 1 ) + ( len C168 ) ) <= ( ( len C169 ) + ( len C168 ) ) by L625 , XREAL_1:7;
L627: ( ( ( len C168 ) + C170 ) + 1 ) <= ( ( len D102 ) + 1 ) by L626 , L623 , L577;
L628: ( ( len C168 ) + C170 ) <= ( len D102 ) by L627 , XREAL_1:6;
L629: D102 = ( C168 ^' C169 ) by L623 , L156;
L630:
now
per cases ;
suppose L631: C170 = ( 0 );

L632: 1 <= ( ( len C168 ) + C170 ) by L631 , ABIAN:12;
L633: ( ( len C168 ) + C170 ) in ( dom C168 ) by L632 , L631 , FINSEQ_3:25;
thus L634: ( ( C168 .append C169 ) . ( ( len C168 ) + C170 ) ) = ( C169 . ( C170 + 1 ) ) by L633 , L623 , L631 , L606;
end;
suppose L635: C170 <> ( 0 );

L636: ( ( 0 ) + 1 ) < ( C170 + 1 ) by L635 , XREAL_1:8;
L637: 1 <= C170 by L636 , NAT_1:13;
thus L638: ( ( C168 .append C169 ) . ( ( len C168 ) + C170 ) ) = ( C169 . ( C170 + 1 ) ) by L637 , L629 , L624 , GRAPH_2:15;
end;
end;
thus L640: ( ( C168 .append C169 ) . ( ( len C168 ) + C170 ) ) = ( C169 . ( C170 + 1 ) ) by L630;
L641: 1 <= ( ( len C168 ) + C170 ) by ABIAN:12 , NAT_1:12;
thus L642: thesis by L641 , L628 , FINSEQ_3:25;
end;
L643: (for B103 being _Graph holds (for B104 , B105 being (Walk of B103) holds (for B106 being (Element of ( NAT )) holds (B106 in ( dom ( B104 .append B105 ) ) implies (B106 in ( dom B104 ) or (ex B107 being (Element of ( NAT )) st (B107 < ( len B105 ) & B106 = ( ( len B104 ) + B107 ))))))))
proof
let C171 being _Graph;
let C172 , C173 being (Walk of C171);
let C174 being (Element of ( NAT ));
set D103 = ( C172 .append C173 );
assume L644: C174 in ( dom D103 );
L645: C174 <= ( len D103 ) by L644 , FINSEQ_3:25;
L646: 1 <= C174 by L644 , FINSEQ_3:25;
L647:
now
per cases ;
suppose L648: ( C172 .last() ) = ( C173 .first() );

L649: ( ( len D103 ) + 1 ) = ( ( len C172 ) + ( len C173 ) ) by L648 , L577;
L650:
now
assume L651: (not C174 in ( dom C172 ));
L652: ( len C172 ) < C174 by L651 , L646 , FINSEQ_3:25;
reconsider D104 = ( C174 - ( len C172 ) ) as (Element of ( NAT )) by L652 , INT_1:5;
take D105 = D104;
L653:
now
assume L654: ( len C173 ) <= D105;
L655: ( ( len C172 ) + ( len C173 ) ) <= ( ( len C172 ) + D105 ) by L654 , XREAL_1:7;
thus L656: contradiction by L655 , L645 , L649 , NAT_1:13;
end;
thus L657: D105 < ( len C173 ) by L653;
thus L658: C174 = ( ( len C172 ) + D105 );
end;
thus L659: thesis by L650;
end;
suppose L660: ( C172 .last() ) <> ( C173 .first() );

thus L661: thesis by L660 , L644 , L156;
end;
end;
thus L663: thesis by L647;
end;
L664: (for B108 being _Graph holds (for B109 being (Walk of B108) holds (for B110 , B111 being  odd (Element of ( NAT )) holds ((B110 <= B111 & B111 <= ( len B109 )) implies (( ( len ( B109 .cut (B110 , B111) ) ) + B110 ) = ( B111 + 1 ) & (for B112 being (Element of ( NAT )) holds (B112 < ( len ( B109 .cut (B110 , B111) ) ) implies (( ( B109 .cut (B110 , B111) ) . ( B112 + 1 ) ) = ( B109 . ( B110 + B112 ) ) & ( B110 + B112 ) in ( dom B109 )))))))))
proof
let C175 being _Graph;
let C176 being (Walk of C175);
let C177 , C178 being  odd (Element of ( NAT ));
set D106 = ( C176 .cut (C177 , C178) );
assume that
L665: C177 <= C178
and
L666: C178 <= ( len C176 );
L667: 1 <= C177 by ABIAN:12;
L668: D106 = ( (C177 , C178) -cut C176 ) by L665 , L666 , L226;
thus L669: ( ( len ( C176 .cut (C177 , C178) ) ) + C177 ) = ( C178 + 1 ) by L668 , L665 , L666 , L667 , GRAPH_2:def 1;
let C179 being (Element of ( NAT ));
assume L670: C179 < ( len ( C176 .cut (C177 , C178) ) );
thus L671: ( ( C176 .cut (C177 , C178) ) . ( C179 + 1 ) ) = ( C176 . ( C177 + C179 ) ) by L670 , L665 , L666 , L668 , L667 , GRAPH_2:def 1;
L672: ( C177 + C179 ) < ( C178 + 1 ) by L669 , L670 , XREAL_1:8;
L673: ( C177 + C179 ) <= C178 by L672 , NAT_1:13;
L674: ( C177 + C179 ) <= ( len C176 ) by L673 , L666 , XXREAL_0:2;
L675: 1 <= ( C177 + C179 ) by ABIAN:12 , NAT_1:12;
thus L676: thesis by L675 , L674 , FINSEQ_3:25;
end;
L677: (for B113 being _Graph holds (for B114 being (Walk of B113) holds (for B115 , B116 being  odd (Element of ( NAT )) holds ((B115 <= B116 & B116 <= ( len B114 )) implies (( ( B114 .cut (B115 , B116) ) .first() ) = ( B114 . B115 ) & ( ( B114 .cut (B115 , B116) ) .last() ) = ( B114 . B116 ) & ( B114 .cut (B115 , B116) ) is_Walk_from ( B114 . B115 ) , ( B114 . B116 ))))))
proof
let C180 being _Graph;
let C181 being (Walk of C180);
let C182 , C183 being  odd (Element of ( NAT ));
set D107 = ( C181 .cut (C182 , C183) );
assume that
L678: C182 <= C183
and
L679: C183 <= ( len C181 );
L680: ( 1 - 1 ) < ( ( len D107 ) - ( 0 ) );
L681: ( D107 . ( ( 0 ) + 1 ) ) = ( C181 . ( C182 + ( 0 ) ) ) by L680 , L678 , L679 , L664;
thus L682: ( D107 .first() ) = ( C181 . C182 ) by L681;
reconsider D108 = ( C183 - C182 ) as (Element of ( NAT )) by L678 , INT_1:5;
L683: ( ( ( len D107 ) + C182 ) - C182 ) = ( ( C183 + 1 ) - C182 ) by L678 , L679 , L664;
L684: ( ( ( C183 - C182 ) + 1 ) - 1 ) < ( ( len D107 ) - ( 0 ) ) by L683 , XREAL_1:15;
L685: D108 < ( len D107 ) by L684;
L686: ( D107 . ( ( C183 - C182 ) + 1 ) ) = ( C181 . ( C182 + ( C183 - C182 ) ) ) by L685 , L678 , L679 , L664;
thus L687: ( D107 .last() ) = ( C181 . C183 ) by L686 , L683;
thus L688: thesis by L687 , L682 , L487;
end;
L689: (for B117 being _Graph holds (for B118 being (Walk of B117) holds (for B119 , B120 , B121 being  odd (Element of ( NAT )) holds ((B119 <= B120 & B120 <= B121 & B121 <= ( len B118 )) implies ( ( B118 .cut (B119 , B120) ) .append ( B118 .cut (B120 , B121) ) ) = ( B118 .cut (B119 , B121) )))))
proof
let C184 being _Graph;
let C185 being (Walk of C184);
let C186 , C187 , C188 being  odd (Element of ( NAT ));
assume that
L690: C186 <= C187
and
L691: C187 <= C188
and
L692: C188 <= ( len C185 );
set D109 = ( C185 .cut (C186 , C187) );
set D110 = ( C185 .cut (C187 , C188) );
set D111 = ( C185 .cut (C186 , C188) );
set D112 = ( D109 .append D110 );
L693: C187 <= ( len C185 ) by L691 , L692 , XXREAL_0:2;
L694: C186 <= C188 by L690 , L691 , XXREAL_0:2;
L695:
now
L696: ( ( len D111 ) + C186 ) = ( C188 + 1 ) by L692 , L694 , L664;
L697: ( D109 .last() ) = ( C185 . C187 ) by L690 , L693 , L677
.= ( D110 .first() ) by L691 , L692 , L677;
L698: ( ( len D109 ) + C186 ) = ( C187 + 1 ) by L690 , L693 , L664;
L699: ( ( len D110 ) + C187 ) = ( C188 + 1 ) by L691 , L692 , L664;
L700: ( ( ( len D109 ) + ( len D110 ) ) + C186 ) = ( ( 1 + ( len D111 ) ) + C186 ) by L699 , L698 , L696;
L701: ( ( len D112 ) + 1 ) = ( ( len D111 ) + 1 ) by L700 , L697 , L577;
thus L702: (( len D112 ) = ( len D112 ) & ( len D111 ) = ( len D112 )) by L701;
let C189 being Nat;
assume L703: C189 in ( dom D112 );
L704: 1 <= C189 by L703 , FINSEQ_3:25;
reconsider D113 = ( C189 - 1 ) as (Element of ( NAT )) by L704 , INT_1:5;
L705: C189 <= ( len D112 ) by L703 , FINSEQ_3:25;
L706: D113 < ( ( len D112 ) - ( 0 ) ) by L705 , XREAL_1:15;
L707: ( D111 . ( D113 + 1 ) ) = ( C185 . ( C186 + D113 ) ) by L706 , L692 , L694 , L701 , L664;
L708:
now
per cases ;
suppose L709: C189 <= ( len D109 );

L710: D113 < ( ( len D109 ) - ( 0 ) ) by L709 , XREAL_1:15;
L711: C189 in ( dom D109 ) by L704 , L709 , FINSEQ_3:25;
thus L712: ( D112 . C189 ) = ( D109 . ( D113 + 1 ) ) by L711 , L606
.= ( D111 . C189 ) by L690 , L693 , L707 , L710 , L664;
end;
suppose L713: C189 > ( len D109 );

consider C190 being Nat such that L714: ( ( len D109 ) + C190 ) = C189 by L713 , NAT_1:10;
reconsider D114 = C190 as (Element of ( NAT )) by ORDINAL1:def 12;
L715: ( ( ( len D109 ) + D114 ) + 1 ) <= ( ( len D111 ) + 1 ) by L701 , L705 , L714 , XREAL_1:7;
L716: ( ( ( D114 + 1 ) + ( len D109 ) ) - ( len D109 ) ) <= ( ( ( len D110 ) + ( len D109 ) ) - ( len D109 ) ) by L715 , L698 , L699 , L696 , XREAL_1:13;
L717: ( ( D114 + 1 ) - 1 ) < ( ( ( len D110 ) + 1 ) - 1 ) by L716 , NAT_1:13;
L718: ( D112 . C189 ) = ( D110 . ( D114 + 1 ) ) by L717 , L697 , L714 , L622
.= ( C185 . ( C187 + D114 ) ) by L691 , L692 , L717 , L664;
thus L719: ( D112 . C189 ) = ( D111 . C189 ) by L718 , L698 , L707 , L714;
end;
end;
thus L721: ( D112 . C189 ) = ( D111 . C189 ) by L708;
end;
thus L722: thesis by L695 , FINSEQ_2:9;
end;
L723: (for B122 being _Graph holds (for B123 being (Walk of B122) holds ( B123 .cut (1 , ( len B123 )) ) = B123))
proof
let C191 being _Graph;
let C192 being (Walk of C191);
L724: 1 <= ( len C192 ) by ABIAN:12;
L725: ( C192 .cut (1 , ( len C192 )) ) = ( (1 , ( len C192 )) -cut C192 ) by L724 , L226 , JORDAN12:2;
thus L726: thesis by L725 , GRAPH_2:7;
end;
L727: (for B124 being _Graph holds (for B125 being (Walk of B124) holds (for B126 being  odd (Element of ( NAT )) holds (B126 <= ( len B125 ) implies ( B125 .cut (B126 , B126) ) = <* ( B125 .vertexAt B126 ) *>))))
proof
let C193 being _Graph;
let C194 being (Walk of C193);
let C195 being  odd (Element of ( NAT ));
L728: 1 <= C195 by ABIAN:12;
assume L729: C195 <= ( len C194 );
L730: ( C194 . C195 ) = ( C194 .vertexAt C195 ) by L729 , L114;
L731: ( C194 .cut (C195 , C195) ) = ( (C195 , C195) -cut C194 ) by L729 , L226;
thus L732: thesis by L731 , L729 , L730 , L728 , GRAPH_2:6;
end;
L733: (for B127 being _Graph holds (for B128 being (Walk of B127) holds (for B129 , B130 being (Element of ( NAT )) holds ((B129 is  odd & B129 <= B130) implies ( ( B128 .cut (1 , B130) ) .cut (1 , B129) ) = ( B128 .cut (1 , B129) )))))
proof
let C196 being _Graph;
let C197 being (Walk of C196);
let C198 , C199 being (Element of ( NAT ));
set D115 = ( C197 .cut (1 , C199) );
assume that
L734: C198 is  odd
and
L735: C198 <= C199;
L736:
now
per cases ;
suppose L737: (C199 is  odd & C199 <= ( len C197 ));

L738: 1 <= C198 by L734 , ABIAN:12;
L739: 1 <= C199 by L737 , ABIAN:12;
L740: ( ( len D115 ) + 1 ) = ( C199 + 1 ) by L739 , L737 , L664 , JORDAN12:2;
L741: ( ( len ( D115 .cut (1 , C198) ) ) + 1 ) = ( C198 + 1 ) by L740 , L734 , L735 , L738 , L664 , JORDAN12:2;
L742: C198 <= ( len C197 ) by L735 , L737 , XXREAL_0:2;
L743: ( C197 .cut (1 , C198) ) = ( (1 , C198) -cut C197 ) by L742 , L734 , L738 , L226 , JORDAN12:2;
L744: ( ( len ( C197 .cut (1 , C198) ) ) + 1 ) = ( C198 + 1 ) by L734 , L738 , L742 , L664 , JORDAN12:2;
L745: D115 = ( (1 , C199) -cut C197 ) by L737 , L739 , L226 , JORDAN12:2;
L746: ( D115 .cut (1 , C198) ) = ( (1 , C198) -cut D115 ) by L734 , L735 , L738 , L740 , L226 , JORDAN12:2;
L747:
now
let C200 being Nat;
assume L748: C200 in ( dom ( D115 .cut (1 , C198) ) );
L749: C200 <= C198 by L748 , L741 , FINSEQ_3:25;
L750: 1 <= C200 by L748 , FINSEQ_3:25;
reconsider D116 = ( C200 - 1 ) as (Element of ( NAT )) by L750 , INT_1:5;
L751: 1 <= C198 by L750 , L749 , XXREAL_0:2;
L752: D116 < ( ( len ( C197 .cut (1 , C198) ) ) - ( 0 ) ) by L744 , L749 , XREAL_1:15;
L753: C200 <= C199 by L735 , L749 , XXREAL_0:2;
L754: D116 < ( ( len D115 ) - ( 0 ) ) by L753 , L740 , XREAL_1:15;
L755: D116 < ( ( len ( D115 .cut (1 , C198) ) ) - ( 0 ) ) by L741 , L749 , XREAL_1:15;
thus L756: ( ( D115 .cut (1 , C198) ) . C200 ) = ( D115 . ( 1 + D116 ) ) by L755 , L735 , L740 , L746 , L751 , GRAPH_2:def 1
.= ( C197 . ( 1 + D116 ) ) by L737 , L739 , L745 , L754 , GRAPH_2:def 1
.= ( ( C197 .cut (1 , C198) ) . C200 ) by L738 , L742 , L743 , L752 , GRAPH_2:def 1;
end;
L757: ( ( len ( C197 .cut (1 , C198) ) ) + 1 ) = ( C198 + 1 ) by L734 , L738 , L742 , L664 , JORDAN12:2;
thus L758: thesis by L757 , L741 , L747 , FINSEQ_2:9;
end;
suppose L759: (not (C199 is  odd & C199 <= ( len C197 )));

thus L760: thesis by L759 , L226;
end;
end;
thus L762: thesis by L736;
end;
L763: (for B131 being _Graph holds (for B132 , B133 being (Walk of B131) holds (for B134 , B135 being  odd (Element of ( NAT )) holds ((B134 <= B135 & B135 <= ( len B132 ) & ( B132 .last() ) = ( B133 .first() )) implies ( ( B132 .append B133 ) .cut (B134 , B135) ) = ( B132 .cut (B134 , B135) )))))
proof
let C201 being _Graph;
let C202 , C203 being (Walk of C201);
let C204 , C205 being  odd (Element of ( NAT ));
assume that
L764: C204 <= C205
and
L765: C205 <= ( len C202 )
and
L766: ( C202 .last() ) = ( C203 .first() );
L767: ( C202 .cut (C204 , C205) ) = ( (C204 , C205) -cut C202 ) by L764 , L765 , L226;
set D117 = ( C202 .append C203 );
L768: ( len C202 ) <= ( len D117 ) by L766 , L581;
L769: C205 <= ( len D117 ) by L768 , L765 , XXREAL_0:2;
L770: ( ( len ( D117 .cut (C204 , C205) ) ) + C204 ) = ( C205 + 1 ) by L769 , L764 , L664
.= ( ( len ( C202 .cut (C204 , C205) ) ) + C204 ) by L764 , L765 , L664;
L771: 1 <= C204 by ABIAN:12;
L772: ( D117 .cut (C204 , C205) ) = ( (C204 , C205) -cut D117 ) by L764 , L769 , L226;
L773:
now
let C206 being Nat;
assume L774: C206 in ( dom ( C202 .cut (C204 , C205) ) );
L775: 1 <= C206 by L774 , FINSEQ_3:25;
reconsider D118 = ( C206 - 1 ) as (Element of ( NAT )) by L775 , INT_1:5;
L776: C206 <= ( len ( C202 .cut (C204 , C205) ) ) by L774 , FINSEQ_3:25;
L777: D118 < ( ( len ( C202 .cut (C204 , C205) ) ) - ( 0 ) ) by L776 , XREAL_1:15;
L778: ( ( len ( C202 .cut (C204 , C205) ) ) + C204 ) = ( C205 + 1 ) by L764 , L765 , L664;
L779: ( C204 + D118 ) < ( C205 + 1 ) by L778 , L777 , XREAL_1:8;
L780: ( C204 + D118 ) <= C205 by L779 , NAT_1:13;
L781: ( C204 + D118 ) <= ( len C202 ) by L780 , L765 , XXREAL_0:2;
L782: 1 <= ( C204 + D118 ) by ABIAN:12 , NAT_1:12;
L783: ( C204 + D118 ) in ( dom C202 ) by L782 , L781 , FINSEQ_3:25;
L784: ( D118 + 1 ) = C206;
L785: D118 < ( ( len ( D117 .cut (C204 , C205) ) ) - ( 0 ) ) by L770 , L776 , XREAL_1:15;
L786: ( ( D117 .cut (C204 , C205) ) . C206 ) = ( D117 . ( C204 + D118 ) ) by L785 , L764 , L769 , L772 , L771 , L784 , GRAPH_2:def 1;
L787: ( ( C202 .cut (C204 , C205) ) . C206 ) = ( C202 . ( C204 + D118 ) ) by L764 , L765 , L767 , L771 , L784 , L777 , GRAPH_2:def 1;
thus L788: ( ( D117 .cut (C204 , C205) ) . C206 ) = ( ( C202 .cut (C204 , C205) ) . C206 ) by L787 , L786 , L783 , L606;
end;
thus L789: thesis by L773 , L770 , FINSEQ_2:9;
end;
L790: (for B136 being _Graph holds (for B137 being (Walk of B136) holds (for B138 being  odd (Element of ( NAT )) holds (B138 <= ( len B137 ) implies ( len ( B137 .cut (1 , B138) ) ) = B138))))
proof
let C207 being _Graph;
let C208 being (Walk of C207);
let C209 being  odd (Element of ( NAT ));
L791: 1 <= C209 by ABIAN:12;
assume L792: C209 <= ( len C208 );
L793: ( ( len ( C208 .cut (1 , C209) ) ) + 1 ) = ( C209 + 1 ) by L792 , L791 , L664 , JORDAN12:2;
thus L794: thesis by L793;
end;
L795: (for B139 being _Graph holds (for B140 being (Walk of B139) holds (for B141 being  odd (Element of ( NAT )) holds (for B142 being (Element of ( NAT )) holds ((B142 in ( dom ( B140 .cut (1 , B141) ) ) & B141 <= ( len B140 )) implies ( ( B140 .cut (1 , B141) ) . B142 ) = ( B140 . B142 ))))))
proof
let C210 being _Graph;
let C211 being (Walk of C210);
let C212 being  odd (Element of ( NAT ));
let C213 being (Element of ( NAT ));
assume that
L796: C213 in ( dom ( C211 .cut (1 , C212) ) )
and
L797: C212 <= ( len C211 );
L798: C213 <= ( len ( C211 .cut (1 , C212) ) ) by L796 , FINSEQ_3:25;
L799: ( C213 - 1 ) < ( ( len ( C211 .cut (1 , C212) ) ) - ( 0 ) ) by L798 , XREAL_1:15;
L800: 1 <= C213 by L796 , FINSEQ_3:25;
reconsider D119 = ( C213 - 1 ) as (Element of ( NAT )) by L800 , INT_1:5;
L801: 1 <= C212 by ABIAN:12;
L802: ( D119 + 1 ) = C213;
thus L803: thesis by L802 , L797 , L801 , L799 , L664 , JORDAN12:2;
end;
L804: (for B143 being _Graph holds (for B144 being (Walk of B143) holds (for B145 , B146 being  odd (Element of ( NAT )) holds ((B145 <= B146 & B146 <= ( len B144 ) & ( B144 . B145 ) = ( B144 . B146 )) implies ( ( len ( B144 .remove (B145 , B146) ) ) + B146 ) = ( ( len B144 ) + B145 )))))
proof
let C214 being _Graph;
let C215 being (Walk of C214);
let C216 , C217 being  odd (Element of ( NAT ));
set D120 = ( C215 .cut (1 , C216) );
set D121 = ( C215 .cut (C217 , ( len C215 )) );
assume that
L805: C216 <= C217
and
L806: C217 <= ( len C215 )
and
L807: ( C215 . C216 ) = ( C215 . C217 );
L808: ( C215 .remove (C216 , C217) ) = ( D120 .append D121 ) by L805 , L806 , L807 , L259;
L809: ( ( len D121 ) + C217 ) = ( ( len C215 ) + 1 ) by L806 , L664;
L810: ( C215 . C217 ) = ( D121 .first() ) by L806 , L677;
L811: 1 <= C216 by ABIAN:12;
L812: C216 <= ( len C215 ) by L805 , L806 , XXREAL_0:2;
L813: ( ( len D120 ) + 1 ) = ( C216 + 1 ) by L812 , L811 , L664 , JORDAN12:2;
L814: ( D120 .last() ) = ( C215 . C217 ) by L807 , L811 , L812 , L677 , JORDAN12:2;
L815: ( ( len ( D120 .append D121 ) ) + 1 ) = ( C216 + ( ( ( len C215 ) + 1 ) + ( - C217 ) ) ) by L814 , L810 , L813 , L809 , L577
.= ( ( ( ( len C215 ) + C216 ) + ( - C217 ) ) + 1 );
thus L816: thesis by L815 , L808;
end;
L817: (for B147 being _Graph holds (for B148 being (Walk of B147) holds (for B149 , B150 being (Element of ( NAT )) holds (for B151 , B152 being set holds (B148 is_Walk_from B151 , B152 implies ( B148 .remove (B149 , B150) ) is_Walk_from B151 , B152)))))
proof
let C218 being _Graph;
let C219 being (Walk of C218);
let C220 , C221 being (Element of ( NAT ));
let C222 , C223 being set;
set D122 = ( C219 .remove (C220 , C221) );
set D123 = ( C219 .cut (1 , C220) );
set D124 = ( C219 .cut (C221 , ( len C219 )) );
assume L818: C219 is_Walk_from C222 , C223;
L819:
now
per cases ;
suppose L820: (C220 is  odd & C221 is  odd & C220 <= C221 & C221 <= ( len C219 ) & ( C219 . C220 ) = ( C219 . C221 ));

L821: ( D124 .last() ) = ( C219 .last() ) by L820 , L677
.= C223 by L818 , L487;
L822: D122 = ( D123 .append D124 ) by L820 , L259;
L823: C220 <= ( len C219 ) by L820 , XXREAL_0:2;
L824: 1 <= C220 by L820 , ABIAN:12;
L825: ( D123 .first() ) = ( C219 .first() ) by L824 , L820 , L823 , L677 , JORDAN12:2
.= C222 by L818 , L487;
L826: ( D123 .last() ) = ( C219 . C221 ) by L820 , L824 , L823 , L677 , JORDAN12:2
.= ( D124 .first() ) by L820 , L677;
thus L827: thesis by L826 , L822 , L825 , L821 , L590;
end;
suppose L828: (not (C220 is  odd & C221 is  odd & C220 <= C221 & C221 <= ( len C219 ) & ( C219 . C220 ) = ( C219 . C221 )));

thus L829: thesis by L828 , L818 , L259;
end;
end;
thus L831: thesis by L819;
end;
L832: (for B153 being _Graph holds (for B154 being (Walk of B153) holds (for B155 , B156 being (Element of ( NAT )) holds ( len ( B154 .remove (B155 , B156) ) ) <= ( len B154 ))))
proof
let C224 being _Graph;
let C225 being (Walk of C224);
let C226 , C227 being (Element of ( NAT ));
set D125 = ( C225 .remove (C226 , C227) );
L833:
now
per cases ;
suppose L834: (C226 is  odd & C227 is  odd & C226 <= C227 & C227 <= ( len C225 ) & ( C225 . C226 ) = ( C225 . C227 ));

L835: ( ( len D125 ) + C227 ) = ( ( len C225 ) + C226 ) by L834 , L804;
L836: ( ( ( len D125 ) + C227 ) - C227 ) <= ( ( ( len C225 ) + C226 ) - C226 ) by L835 , L834 , XREAL_1:13;
thus L837: thesis by L836;
end;
suppose L838: (not (C226 is  odd & C227 is  odd & C226 <= C227 & C227 <= ( len C225 ) & ( C225 . C226 ) = ( C225 . C227 )));

thus L839: thesis by L838 , L259;
end;
end;
thus L841: thesis by L833;
end;
L842: (for B157 being _Graph holds (for B158 being (Walk of B157) holds (for B159 being (Element of ( NAT )) holds ( B158 .remove (B159 , B159) ) = B158)))
proof
let C228 being _Graph;
let C229 being (Walk of C228);
let C230 being (Element of ( NAT ));
L843:
now
per cases ;
suppose L844: (C230 is  odd & C230 <= ( len C229 ) & ( C229 . C230 ) = ( C229 . C230 ));

L845: 1 <= C230 by L844 , ABIAN:12;
thus L846: ( C229 .remove (C230 , C230) ) = ( ( C229 .cut (1 , C230) ) .append ( C229 .cut (C230 , ( len C229 )) ) ) by L844 , L259
.= ( C229 .cut (1 , ( len C229 )) ) by L844 , L845 , L689 , JORDAN12:2
.= C229 by L723;
end;
suppose L847: (not (C230 is  odd & C230 <= ( len C229 ) & ( C229 . C230 ) = ( C229 . C230 )));

thus L848: thesis by L847 , L259;
end;
end;
thus L850: thesis by L843;
end;
L851: (for B160 being _Graph holds (for B161 being (Walk of B160) holds (for B162 , B163 being  odd (Element of ( NAT )) holds ((B162 <= B163 & B163 <= ( len B161 ) & ( B161 . B162 ) = ( B161 . B163 )) implies ( ( B161 .cut (1 , B162) ) .last() ) = ( ( B161 .cut (B163 , ( len B161 )) ) .first() )))))
proof
let C231 being _Graph;
let C232 being (Walk of C231);
let C233 , C234 being  odd (Element of ( NAT ));
assume that
L852: C233 <= C234
and
L853: C234 <= ( len C232 )
and
L854: ( C232 . C233 ) = ( C232 . C234 );
L855: 1 <= C233 by ABIAN:12;
L856: C233 <= ( len C232 ) by L852 , L853 , XXREAL_0:2;
thus L857: ( ( C232 .cut (1 , C233) ) .last() ) = ( C232 . C234 ) by L856 , L854 , L855 , L677 , JORDAN12:2
.= ( ( C232 .cut (C234 , ( len C232 )) ) .first() ) by L853 , L677;
end;
L858: (for B164 being _Graph holds (for B165 being (Walk of B164) holds (for B166 , B167 being set holds (for B168 , B169 being  odd (Element of ( NAT )) holds ((B168 <= B169 & B169 <= ( len B165 ) & ( B165 . B168 ) = ( B165 . B169 )) implies (for B170 being (Element of ( NAT )) holds (B170 in ( Seg B168 ) implies ( ( B165 .remove (B168 , B169) ) . B170 ) = ( B165 . B170 ))))))))
proof
let C235 being _Graph;
let C236 being (Walk of C235);
let C237 , C238 being set;
let C239 , C240 being  odd (Element of ( NAT ));
set D126 = ( C236 .remove (C239 , C240) );
assume that
L859: C239 <= C240
and
L860: C240 <= ( len C236 )
and
L861: ( C236 . C239 ) = ( C236 . C240 );
let C241 being (Element of ( NAT ));
assume L862: C241 in ( Seg C239 );
L863: C241 <= C239 by L862 , FINSEQ_1:1;
L864: C241 <= ( len ( C236 .cut (1 , C239) ) ) by L863 , L859 , L860 , L790 , XXREAL_0:2;
L865: 1 <= C241 by L862 , FINSEQ_1:1;
L866: C241 in ( dom ( C236 .cut (1 , C239) ) ) by L865 , L864 , FINSEQ_3:25;
L867: D126 = ( ( C236 .cut (1 , C239) ) .append ( C236 .cut (C240 , ( len C236 )) ) ) by L859 , L860 , L861 , L259;
thus L868: ( D126 . C241 ) = ( ( C236 .cut (1 , C239) ) . C241 ) by L867 , L866 , L606
.= ( C236 . C241 ) by L859 , L860 , L866 , L795 , XXREAL_0:2;
end;
L869: (for B171 being _Graph holds (for B172 being (Walk of B171) holds (for B173 , B174 being  odd (Element of ( NAT )) holds ((B173 <= B174 & B174 <= ( len B172 ) & ( B172 . B173 ) = ( B172 . B174 )) implies (for B175 being (Element of ( NAT )) holds ((B173 <= B175 & B175 <= ( len ( B172 .remove (B173 , B174) ) )) implies (( ( B172 .remove (B173 , B174) ) . B175 ) = ( B172 . ( ( B175 - B173 ) + B174 ) ) & ( ( B175 - B173 ) + B174 ) is (Element of ( NAT )) & ( ( B175 - B173 ) + B174 ) <= ( len B172 ))))))))
proof
let C242 being _Graph;
let C243 being (Walk of C242);
let C244 , C245 being  odd (Element of ( NAT ));
set D127 = ( C243 .remove (C244 , C245) );
set D128 = ( C243 .cut (1 , C244) );
set D129 = ( C243 .cut (C245 , ( len C243 )) );
assume that
L870: C244 <= C245
and
L871: C245 <= ( len C243 )
and
L872: ( C243 . C244 ) = ( C243 . C245 );
L873: ( D128 .last() ) = ( D129 .first() ) by L870 , L871 , L872 , L851;
let C246 being (Element of ( NAT ));
assume that
L874: C244 <= C246
and
L875: C246 <= ( len D127 );
L876: ( len D128 ) = C244 by L870 , L871 , L790 , XXREAL_0:2;
consider C247 being Nat such that L877: ( ( len D128 ) + C247 ) = C246 by L876 , L874 , NAT_1:10;
reconsider D130 = C247 as (Element of ( NAT )) by ORDINAL1:def 12;
L878: ( ( len D127 ) + C245 ) = ( ( len C243 ) + C244 ) by L870 , L871 , L872 , L804;
L879: ( ( C244 + D130 ) + C245 ) <= ( C244 + ( len C243 ) ) by L878 , L876 , L875 , L877 , XREAL_1:7;
L880: ( ( ( D130 + C245 ) + C244 ) - C244 ) <= ( ( ( len C243 ) + C244 ) - C244 ) by L879 , XREAL_1:13;
L881: ( ( len D129 ) + C245 ) = ( ( len C243 ) + 1 ) by L871 , L664;
L882: ( ( D130 + C245 ) + 1 ) <= ( ( len D129 ) + C245 ) by L881 , L880 , XREAL_1:7;
L883: ( ( ( D130 + 1 ) + C245 ) - C245 ) <= ( ( ( len D129 ) + C245 ) - C245 ) by L882 , XREAL_1:13;
L884: ( ( D130 + 1 ) - 1 ) < ( ( ( len D129 ) + 1 ) - 1 ) by L883 , NAT_1:13;
L885: D127 = ( D128 .append D129 ) by L870 , L871 , L872 , L259;
L886: ( D127 . C246 ) = ( D129 . ( D130 + 1 ) ) by L885 , L873 , L877 , L884 , L622
.= ( C243 . ( D130 + C245 ) ) by L871 , L884 , L664;
thus L887: ( D127 . C246 ) = ( C243 . ( ( C246 - C244 ) + C245 ) ) by L886 , L876 , L877;
L888: ( D130 + C245 ) is (Element of ( NAT ));
thus L889: ( ( C246 - C244 ) + C245 ) is (Element of ( NAT )) by L888 , L876 , L877;
thus L890: thesis by L876 , L877 , L880;
end;
L891: (for B176 being _Graph holds (for B177 being (Walk of B176) holds (for B178 , B179 being  odd (Element of ( NAT )) holds ((B178 <= B179 & B179 <= ( len B177 ) & ( B177 . B178 ) = ( B177 . B179 )) implies ( len ( B177 .remove (B178 , B179) ) ) = ( ( ( len B177 ) + B178 ) - B179 )))))
proof
let C248 being _Graph;
let C249 being (Walk of C248);
let C250 , C251 being  odd (Element of ( NAT ));
assume that
L892: C250 <= C251
and
L893: C251 <= ( len C249 )
and
L894: ( C249 . C250 ) = ( C249 . C251 );
L895: ( ( len ( C249 .remove (C250 , C251) ) ) + C251 ) = ( ( len C249 ) + C250 ) by L892 , L893 , L894 , L804;
thus L896: thesis by L895;
end;
L897: (for B180 being _Graph holds (for B181 being (Walk of B180) holds (for B182 being (Element of ( NAT )) holds (( B181 .first() ) = ( B181 . B182 ) implies ( B181 .remove (1 , B182) ) = ( B181 .cut (B182 , ( len B181 )) )))))
proof
let C252 being _Graph;
let C253 being (Walk of C252);
let C254 being (Element of ( NAT ));
assume L898: ( C253 .first() ) = ( C253 . C254 );
L899:
now
per cases ;
suppose L900: (C254 is  odd & C254 <= ( len C253 ));

L901: 1 <= C254 by L900 , ABIAN:12;
L902: ( C253 .remove (1 , C254) ) = ( ( C253 .cut (1 , 1) ) .append ( C253 .cut (C254 , ( len C253 )) ) ) by L901 , L898 , L900 , L259 , JORDAN12:2;
L903: 1 <= ( len C253 ) by ABIAN:12;
L904: ( ( C253 .cut (1 , 1) ) .last() ) = ( C253 . C254 ) by L903 , L898 , L677 , JORDAN12:2
.= ( ( C253 .cut (C254 , ( len C253 )) ) .first() ) by L900 , L677;
L905:
now
let C255 being Nat;
assume that
L906: 1 <= C255
and
L907: C255 <= ( len ( C253 .remove (1 , C254) ) );
L908: C255 in ( dom ( C253 .remove (1 , C254) ) ) by L906 , L907 , FINSEQ_3:25;
L909:
now
per cases  by L902 , L908 , L643;
suppose L910: C255 in ( dom ( C253 .cut (1 , 1) ) );

L911: C255 <= ( len ( C253 .cut (1 , 1) ) ) by L910 , FINSEQ_3:25;
L912: C255 <= 1 by L911 , L903 , L790 , JORDAN12:2;
L913: 1 <= C255 by L910 , FINSEQ_3:25;
L914: C255 = 1 by L913 , L912 , XXREAL_0:1;
L915: ( ( C253 .remove (1 , C254) ) . C255 ) = ( ( C253 .cut (1 , 1) ) . C255 ) by L902 , L910 , L606
.= ( <* ( C253 .vertexAt 1 ) *> . 1 ) by L903 , L914 , L727 , JORDAN12:2
.= ( C253 .vertexAt 1 ) by FINSEQ_1:def 8
.= ( C253 . C254 ) by L898 , L903 , L114 , JORDAN12:2
.= ( ( C253 .cut (C254 , ( len C253 )) ) .first() ) by L900 , L677
.= ( ( C253 .cut (C254 , ( len C253 )) ) . 1 );
thus L916: ( ( C253 .remove (1 , C254) ) . C255 ) = ( ( C253 .cut (C254 , ( len C253 )) ) . C255 ) by L915 , L913 , L912 , XXREAL_0:1;
end;
suppose L917: (ex B183 being (Element of ( NAT )) st (B183 < ( len ( C253 .cut (C254 , ( len C253 )) ) ) & C255 = ( ( len ( C253 .cut (1 , 1) ) ) + B183 )));

consider C256 being (Element of ( NAT )) such that L918: C256 < ( len ( C253 .cut (C254 , ( len C253 )) ) ) and L919: C255 = ( ( len ( C253 .cut (1 , 1) ) ) + C256 ) by L917;
L920: C255 = ( C256 + 1 ) by L918 , L919 , L790 , ABIAN:12 , JORDAN12:2;
thus L921: ( ( C253 .remove (1 , C254) ) . C255 ) = ( ( C253 .cut (C254 , ( len C253 )) ) . C255 ) by L920 , L902 , L904 , L918 , L919 , L622;
end;
end;
thus L923: ( ( C253 .remove (1 , C254) ) . C255 ) = ( ( C253 .cut (C254 , ( len C253 )) ) . C255 ) by L909;
end;
L924: ( ( len ( C253 .remove (1 , C254) ) ) + 1 ) = ( ( len ( C253 .cut (1 , 1) ) ) + ( len ( C253 .cut (C254 , ( len C253 )) ) ) ) by L902 , L904 , L577;
L925: ( ( len ( C253 .remove (1 , C254) ) ) + 1 ) = ( ( len ( C253 .cut (C254 , ( len C253 )) ) ) + 1 ) by L924 , L790 , ABIAN:12 , JORDAN12:2;
thus L926: thesis by L925 , L905 , FINSEQ_1:14;
end;
suppose L927: (not (C254 is  odd & C254 <= ( len C253 )));

L928: ( C253 .cut (C254 , ( len C253 )) ) = C253 by L927 , L226;
thus L929: thesis by L928 , L927 , L259;
end;
end;
thus L931: thesis by L899;
end;
L932: (for B184 being _Graph holds (for B185 being (Walk of B184) holds (for B186 , B187 being (Element of ( NAT )) holds (( ( B185 .remove (B186 , B187) ) .first() ) = ( B185 .first() ) & ( ( B185 .remove (B186 , B187) ) .last() ) = ( B185 .last() )))))
proof
let C257 being _Graph;
let C258 being (Walk of C257);
let C259 , C260 being (Element of ( NAT ));
L933: C258 is_Walk_from ( C258 .first() ) , ( C258 .last() ) by L487;
L934: ( C258 .remove (C259 , C260) ) is_Walk_from ( C258 .first() ) , ( C258 .last() ) by L933 , L817;
thus L935: thesis by L934 , L487;
end;
L936: (for B188 being _Graph holds (for B189 being (Walk of B188) holds (for B190 , B191 being  odd (Element of ( NAT )) holds (for B192 being (Element of ( NAT )) holds (B192 in ( dom ( B189 .remove (B190 , B191) ) ) implies (B192 in ( Seg B190 ) or (B190 <= B192 & B192 <= ( len ( B189 .remove (B190 , B191) ) ))))))))
proof
let C261 being _Graph;
let C262 being (Walk of C261);
let C263 , C264 being  odd (Element of ( NAT ));
let C265 being (Element of ( NAT ));
assume that
L937: C265 in ( dom ( C262 .remove (C263 , C264) ) );
L938: 1 <= C265 by L937 , FINSEQ_3:25;
thus L939: thesis by L938 , L937 , FINSEQ_1:1 , FINSEQ_3:25;
end;
L940: (for B193 being _Graph holds (for B194 being (Walk of B193) holds (for B195 , B196 being set holds (B195 Joins ( B194 .last() ) , B196 , B193 implies ( B194 .addEdge B195 ) = ( B194 ^ <* B195 , B196 *> )))))
proof
let C266 being _Graph;
let C267 being (Walk of C266);
let C268 , C269 being set;
set D131 = ( C266 .walkOf (( C267 .last() ) , C268 , ( ( C267 .last() ) .adj C268 )) );
assume L941: C268 Joins ( C267 .last() ) , C269 , C266;
reconsider D132 = C269 as (Vertex of C266) by L941 , GLIB_000:13;
L942: ( ( C267 .last() ) .adj C268 ) = D132 by L941 , GLIB_000:66;
L943: D131 = <* ( C267 .last() ) , C268 , C269 *> by L942 , L941 , L76;
L944: ( len D131 ) = 3 by L943 , FINSEQ_1:45;
L945: ( D131 . 3 ) = C269 by L943 , FINSEQ_1:45;
L946: ( D131 . 2 ) = C268 by L943 , FINSEQ_1:45;
L947: ( (2 , 2) -cut D131 ) = <* C268 *> by L946 , L944 , GRAPH_2:6;
L948: ( <* C268 *> ^ ( (( 2 + 1 ) , 3) -cut D131 ) ) = ( (( 1 + 1 ) , 3) -cut D131 ) by L947 , L944 , GRAPH_2:8;
L949: ( <* C268 *> ^ <* C269 *> ) = ( (2 , 3) -cut D131 ) by L948 , L944 , L945 , GRAPH_2:6;
L950: ( C267 .last() ) = ( D131 .first() ) by L941 , L942 , L559;
L951: ( C267 .append D131 ) = ( C267 ^' D131 ) by L950 , L156
.= ( C267 ^ ( (2 , ( len D131 )) -cut D131 ) ) by GRAPH_2:def 2
.= ( C267 ^ ( (2 , 3) -cut D131 ) ) by L943 , FINSEQ_1:45;
thus L952: thesis by L951 , L949 , FINSEQ_1:def 9;
end;
L953: (for B197 being _Graph holds (for B198 being (Walk of B197) holds (for B199 , B200 being set holds (B199 Joins ( B198 .last() ) , B200 , B197 implies (( ( B198 .addEdge B199 ) .first() ) = ( B198 .first() ) & ( ( B198 .addEdge B199 ) .last() ) = B200 & ( B198 .addEdge B199 ) is_Walk_from ( B198 .first() ) , B200)))))
proof
let C270 being _Graph;
let C271 being (Walk of C270);
let C272 , C273 being set;
set D133 = ( C270 .walkOf (( C271 .last() ) , C272 , ( ( C271 .last() ) .adj C272 )) );
assume L954: C272 Joins ( C271 .last() ) , C273 , C270;
reconsider D134 = C273 as (Vertex of C270) by L954 , GLIB_000:13;
L955: ( ( C271 .last() ) .adj C272 ) = D134 by L954 , GLIB_000:66;
L956: ( D133 .last() ) = C273 by L955 , L954 , L559;
L957: ( D133 .first() ) = ( C271 .last() ) by L954 , L955 , L559;
thus L958: thesis by L957 , L956 , L590;
end;
L959: (for B201 being _Graph holds (for B202 being (Walk of B201) holds (for B203 , B204 being set holds (B203 Joins ( B202 .last() ) , B204 , B201 implies ( len ( B202 .addEdge B203 ) ) = ( ( len B202 ) + 2 )))))
proof
let C274 being _Graph;
let C275 being (Walk of C274);
let C276 , C277 being set;
set D135 = ( C274 .walkOf (( C275 .last() ) , C276 , ( ( C275 .last() ) .adj C276 )) );
assume L960: C276 Joins ( C275 .last() ) , C277 , C274;
reconsider D136 = C277 as (Vertex of C274) by L960 , GLIB_000:13;
L961: ( ( C275 .last() ) .adj C276 ) = D136 by L960 , GLIB_000:66;
L962: ( D135 .first() ) = ( C275 .last() ) by L961 , L960 , L559;
L963: ( ( len ( C275 .addEdge C276 ) ) + 1 ) = ( ( len C275 ) + ( len D135 ) ) by L962 , L577;
L964: D135 = <* ( C275 .last() ) , C276 , C277 *> by L960 , L961 , L76;
L965: ( ( len ( C275 .addEdge C276 ) ) + 1 ) = ( ( len C275 ) + 3 ) by L964 , L963 , FINSEQ_1:45;
thus L966: thesis by L965;
end;
L967: (for B205 being _Graph holds (for B206 being (Walk of B205) holds (for B207 , B208 being set holds (B207 Joins ( B206 .last() ) , B208 , B205 implies (( ( B206 .addEdge B207 ) . ( ( len B206 ) + 1 ) ) = B207 & ( ( B206 .addEdge B207 ) . ( ( len B206 ) + 2 ) ) = B208 & (for B209 being (Element of ( NAT )) holds (B209 in ( dom B206 ) implies ( ( B206 .addEdge B207 ) . B209 ) = ( B206 . B209 ))))))))
proof
let C278 being _Graph;
let C279 being (Walk of C278);
let C280 , C281 being set;
set D137 = ( C279 .addEdge C280 );
L968: ( <* C280 , C281 *> . 1 ) = C280 by FINSEQ_1:44;
assume L969: C280 Joins ( C279 .last() ) , C281 , C278;
L970: D137 = ( C279 ^ <* C280 , C281 *> ) by L969 , L940;
L971: ( dom <* C280 , C281 *> ) = ( Seg 2 ) by FINSEQ_1:89;
L972: 1 in ( dom <* C280 , C281 *> ) by L971 , FINSEQ_1:1;
thus L973: ( D137 . ( ( len C279 ) + 1 ) ) = C280 by L972 , L970 , L968 , FINSEQ_1:def 7;
L974: ( <* C280 , C281 *> . 2 ) = C281 by FINSEQ_1:44;
L975: 2 in ( dom <* C280 , C281 *> ) by L971 , FINSEQ_1:1;
thus L976: ( D137 . ( ( len C279 ) + 2 ) ) = C281 by L975 , L970 , L974 , FINSEQ_1:def 7;
let C282 being (Element of ( NAT ));
assume L977: C282 in ( dom C279 );
thus L978: thesis by L977 , L970 , FINSEQ_1:def 7;
end;
L979: (for B210 being _Graph holds (for B211 being (Walk of B210) holds (for B212 , B213 , B214 , B215 being set holds ((B211 is_Walk_from B213 , B214 & B212 Joins B214 , B215 , B210) implies ( B211 .addEdge B212 ) is_Walk_from B213 , B215))))
proof
let C283 being _Graph;
let C284 being (Walk of C283);
let C285 , C286 , C287 , C288 being set;
assume that
L980: C284 is_Walk_from C286 , C287
and
L981: C285 Joins C287 , C288 , C283;
L982: ( C284 .last() ) = C287 by L980 , L487;
L983: ( C284 .first() ) = C286 by L980 , L487;
thus L984: thesis by L983 , L981 , L982 , L953;
end;
L985: (for B216 being _Graph holds (for B217 being (Walk of B216) holds (for B218 being  even (Element of ( NAT )) holds ((1 <= B218 & B218 <= ( len B217 )) implies (( B218 div 2 ) in ( dom ( B217 .edgeSeq() ) ) & ( B217 . B218 ) = ( ( B217 .edgeSeq() ) . ( B218 div 2 ) ))))))
proof
let C289 being _Graph;
let C290 being (Walk of C289);
let C291 being  even (Element of ( NAT ));
assume that
L986: 1 <= C291
and
L987: C291 <= ( len C290 );
L988: 2 divides C291 by PEPIN:22;
L989: C291 = ( 2 * ( C291 div 2 ) ) by L988 , NAT_D:3;
L990:
now
assume L991: (not ( C291 div 2 ) in ( dom ( C290 .edgeSeq() ) ));
L992:
now
per cases  by L991 , FINSEQ_3:25;
suppose L993: ( C291 div 2 ) < ( ( 0 ) + 1 );

L994: ( C291 div 2 ) = ( 0 ) by L993 , NAT_1:13;
L995: C291 = ( 2 * ( 0 ) ) by L994 , L988 , NAT_D:3;
thus L996: contradiction by L995 , L986;
end;
suppose L997: ( C291 div 2 ) > ( len ( C290 .edgeSeq() ) );

L998: ( 2 * ( C291 div 2 ) ) > ( 2 * ( len ( C290 .edgeSeq() ) ) ) by L997 , XREAL_1:68;
L999: ( C291 + 1 ) > ( ( 2 * ( len ( C290 .edgeSeq() ) ) ) + 1 ) by L998 , L989 , XREAL_1:8;
L1000: ( C291 + 1 ) > ( len C290 ) by L999 , L314;
L1001: C291 >= ( len C290 ) by L1000 , NAT_1:13;
thus L1002: contradiction by L1001 , L987 , XXREAL_0:1;
end;
end;
thus L1004: contradiction by L992;
end;
thus L1005: ( C291 div 2 ) in ( dom ( C290 .edgeSeq() ) ) by L990;
L1006: ( C291 div 2 ) <= ( len ( C290 .edgeSeq() ) ) by L990 , FINSEQ_3:25;
L1007: 1 <= ( C291 div 2 ) by L990 , FINSEQ_3:25;
thus L1008: thesis by L1007 , L989 , L1006 , L314;
end;
L1009: (for B219 being _Graph holds (for B220 being (Walk of B219) holds (for B221 being (Element of ( NAT )) holds (B221 in ( dom ( B220 .edgeSeq() ) ) iff ( 2 * B221 ) in ( dom B220 )))))
proof
let C292 being _Graph;
let C293 being (Walk of C292);
let C294 being (Element of ( NAT ));
thus L1010:now
assume L1011: C294 in ( dom ( C293 .edgeSeq() ) );
L1012: C294 <= ( len ( C293 .edgeSeq() ) ) by L1011 , FINSEQ_3:25;
L1013: ( 2 * C294 ) <= ( ( len ( C293 .edgeSeq() ) ) * 2 ) by L1012 , NAT_1:4;
L1014: ( 2 * C294 ) <= ( ( ( len ( C293 .edgeSeq() ) ) * 2 ) + 1 ) by L1013 , NAT_1:12;
L1015: ( 2 * C294 ) <= ( len C293 ) by L1014 , L314;
L1016: 1 <= C294 by L1011 , FINSEQ_3:25;
L1017: 1 <= ( C294 + C294 ) by L1016 , NAT_1:12;
thus L1018: ( 2 * C294 ) in ( dom C293 ) by L1017 , L1015 , FINSEQ_3:25;
end;
assume L1019: ( 2 * C294 ) in ( dom C293 );
L1020: ( 2 * C294 ) <= ( len C293 ) by L1019 , FINSEQ_3:25;
L1021: 1 <= ( 2 * C294 ) by L1019 , FINSEQ_3:25;
L1022: ( ( 2 * C294 ) div 2 ) in ( dom ( C293 .edgeSeq() ) ) by L1021 , L1020 , L985;
thus L1023: thesis by L1022 , NAT_D:20;
end;
L1024: (for B222 being _Graph holds (for B223 being (Walk of B222) holds (ex B224 being  even (Element of ( NAT )) st (B224 = ( ( len B223 ) - 1 ) & ( len ( B223 .edgeSeq() ) ) = ( B224 div 2 )))))
proof
let C295 being _Graph;
let C296 being (Walk of C295);
set D138 = ( ( len C296 ) - 1 );
reconsider D139 = D138 as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
take D139;
thus L1025: D139 = ( ( len C296 ) - 1 );
L1026: 2 divides D139 by PEPIN:22;
L1027: D139 = ( 2 * ( D139 div 2 ) ) by L1026 , NAT_D:3;
L1028: ( len C296 ) = ( ( 2 * ( len ( C296 .edgeSeq() ) ) ) + 1 ) by L314;
thus L1029: thesis by L1028 , L1027;
end;
L1030: (for B225 being _Graph holds (for B226 being (Walk of B225) holds (for B227 being (Element of ( NAT )) holds ( ( B226 .cut (1 , B227) ) .edgeSeq() ) c= ( B226 .edgeSeq() ))))
proof
let C297 being _Graph;
let C298 being (Walk of C297);
let C299 being (Element of ( NAT ));
per cases ;
suppose L1031: (C299 is  odd & 1 <= C299 & C299 <= ( len C298 ));

set D140 = ( ( C298 .cut (1 , C299) ) .edgeSeq() );
L1032:
now
let C300 being set;
assume L1033: C300 in ( ( C298 .cut (1 , C299) ) .edgeSeq() );
consider C301 , C302 being set such that L1034: C300 = [ C301 , C302 ] by L1033 , RELAT_1:def 1;
L1035: C302 = ( D140 . C301 ) by L1033 , L1034 , FUNCT_1:1;
L1036: C301 in ( dom D140 ) by L1033 , L1034 , FUNCT_1:1;
reconsider D141 = C301 as (Element of ( NAT )) by L1036;
L1037: D141 <= ( len D140 ) by L1036 , FINSEQ_3:25;
L1038: ( 2 * D141 ) in ( dom ( C298 .cut (1 , C299) ) ) by L1036 , L1009;
L1039: ( 2 * D141 ) <= ( len ( C298 .cut (1 , C299) ) ) by L1038 , FINSEQ_3:25;
L1040: ( 2 * D141 ) <= C299 by L1039 , L1031 , L790;
L1041: ( 2 * D141 ) <= ( len C298 ) by L1040 , L1031 , XXREAL_0:2;
L1042: 1 <= ( 2 * D141 ) by L1038 , FINSEQ_3:25;
L1043: ( 2 * D141 ) in ( dom C298 ) by L1042 , L1041 , FINSEQ_3:25;
L1044: D141 in ( dom ( C298 .edgeSeq() ) ) by L1043 , L1009;
L1045: D141 <= ( len ( C298 .edgeSeq() ) ) by L1044 , FINSEQ_3:25;
L1046: 1 <= D141 by L1036 , FINSEQ_3:25;
L1047: C302 = ( ( C298 .cut (1 , C299) ) . ( 2 * D141 ) ) by L1046 , L1035 , L1037 , L314;
L1048: C302 = ( C298 . ( 2 * D141 ) ) by L1047 , L1031 , L1038 , L795;
L1049: 1 <= D141 by L1044 , FINSEQ_3:25;
L1050: ( ( C298 .edgeSeq() ) . D141 ) = C302 by L1049 , L1048 , L1045 , L314;
thus L1051: C300 in ( C298 .edgeSeq() ) by L1050 , L1034 , L1044 , FUNCT_1:1;
end;
thus L1052: thesis by L1032 , TARSKI:def 3;
end;
suppose L1053: (not (C299 is  odd & 1 <= C299 & C299 <= ( len C298 )));

thus L1054: thesis by L1053 , L226;
end;
end;
L1056: (for B228 being _Graph holds (for B229 being (Walk of B228) holds (for B230 , B231 being set holds (B230 Joins ( B229 .last() ) , B231 , B228 implies ( ( B229 .addEdge B230 ) .edgeSeq() ) = ( ( B229 .edgeSeq() ) ^ <* B230 *> )))))
proof
let C303 being _Graph;
let C304 being (Walk of C303);
let C305 , C306 being set;
set D142 = ( C304 .addEdge C305 );
set D143 = ( ( C304 .edgeSeq() ) ^ <* C305 *> );
assume L1057: C305 Joins ( C304 .last() ) , C306 , C303;
L1058: ( len D142 ) = ( ( len C304 ) + 2 ) by L1057 , L959;
L1059: ( ( len C304 ) + 2 ) = ( ( 2 * ( len ( D142 .edgeSeq() ) ) ) + 1 ) by L1058 , L314;
L1060: ( 2 + ( ( 2 * ( len ( C304 .edgeSeq() ) ) ) + 1 ) ) = ( ( 2 * ( len ( D142 .edgeSeq() ) ) ) + 1 ) by L1059 , L314;
L1061: ( 2 * ( ( len ( C304 .edgeSeq() ) ) + 1 ) ) = ( 2 * ( len ( D142 .edgeSeq() ) ) ) by L1060;
L1062: ( len D143 ) = ( ( len ( C304 .edgeSeq() ) ) + ( len <* C305 *> ) ) by FINSEQ_1:22;
L1063: ( 2 * ( len D143 ) ) = ( 2 * ( len ( D142 .edgeSeq() ) ) ) by L1062 , L1061 , FINSEQ_1:39;
L1064:
now
let C307 being Nat;
assume that
L1065: 1 <= C307
and
L1066: C307 <= ( len ( D142 .edgeSeq() ) );
L1067: ( ( D142 .edgeSeq() ) . C307 ) = ( D142 . ( 2 * C307 ) ) by L1065 , L1066 , L314;
L1068: C307 in ( dom D143 ) by L1063 , L1065 , L1066 , FINSEQ_3:25;
L1069:
now
per cases  by L1068 , FINSEQ_1:25;
suppose L1070: C307 in ( dom ( C304 .edgeSeq() ) );

L1071: ( 2 * C307 ) in ( dom C304 ) by L1070 , L1009;
L1072: 1 <= C307 by L1070 , FINSEQ_3:25;
L1073: C307 <= ( len ( C304 .edgeSeq() ) ) by L1070 , FINSEQ_3:25;
L1074: ( D143 . C307 ) = ( ( C304 .edgeSeq() ) . C307 ) by L1070 , FINSEQ_1:def 7;
L1075: ( D143 . C307 ) = ( C304 . ( 2 * C307 ) ) by L1074 , L1072 , L1073 , L314;
thus L1076: ( ( D142 .edgeSeq() ) . C307 ) = ( D143 . C307 ) by L1075 , L1057 , L1067 , L1071 , L967;
end;
suppose L1077: (ex B232 being Nat st (B232 in ( dom <* C305 *> ) & C307 = ( ( len ( C304 .edgeSeq() ) ) + B232 )));

consider C308 being (Element of ( NAT )) such that L1078: C308 in ( dom <* C305 *> ) and L1079: C307 = ( ( len ( C304 .edgeSeq() ) ) + C308 ) by L1077;
L1080: C308 in { 1 } by L1078 , FINSEQ_1:2 , FINSEQ_1:38;
L1081: C308 = 1 by L1080 , TARSKI:def 1;
L1082: ( 2 * C307 ) = ( ( ( 2 * ( len ( C304 .edgeSeq() ) ) ) + 1 ) + 1 ) by L1081 , L1079
.= ( ( len C304 ) + 1 ) by L314;
L1083: ( D143 . C307 ) = ( <* C305 *> . 1 ) by L1078 , L1079 , L1081 , FINSEQ_1:def 7
.= C305 by FINSEQ_1:def 8;
thus L1084: ( ( D142 .edgeSeq() ) . C307 ) = ( D143 . C307 ) by L1083 , L1057 , L1067 , L1082 , L967;
end;
end;
thus L1086: ( ( D142 .edgeSeq() ) . C307 ) = ( D143 . C307 ) by L1069;
end;
thus L1087: thesis by L1064 , L1063 , FINSEQ_1:14;
end;
L1088: (for B233 being _Graph holds (for B234 being (Walk of B233) holds (for B235 being set holds (B235 in ( B234 .vertices() ) iff (ex B236 being  odd (Element of ( NAT )) st (B236 <= ( len B234 ) & ( B234 . B236 ) = B235))))))
proof
let C309 being _Graph;
let C310 being (Walk of C309);
let C311 being set;
set D144 = ( C310 .vertexSeq() );
thus L1089:now
assume L1090: C311 in ( C310 .vertices() );
consider C312 being Nat such that L1091: C312 in ( dom D144 ) and L1092: ( D144 . C312 ) = C311 by L1090 , FINSEQ_2:10;
set D145 = ( 2 * C312 );
reconsider D146 = D145 as  even Nat;
set D147 = ( D146 - 1 );
L1093: 1 <= C312 by L1091 , FINSEQ_3:25;
L1094: 1 <= ( C312 + C312 ) by L1093 , NAT_1:12;
reconsider D148 = D147 as  odd (Element of ( NAT )) by L1094 , INT_1:5;
take D149 = D148;
L1095: C312 <= ( len D144 ) by L1091 , FINSEQ_3:25;
L1096: ( C312 * 2 ) <= ( ( len D144 ) * 2 ) by L1095 , XREAL_1:64;
L1097: ( C312 * 2 ) <= ( ( len C310 ) + 1 ) by L1096 , L262;
L1098: ( D146 - 1 ) <= ( ( ( len C310 ) + 1 ) - 1 ) by L1097 , XREAL_1:13;
thus L1099: D149 <= ( len C310 ) by L1098;
thus L1100: ( C310 . D149 ) = C311 by L1092 , L1093 , L1095 , L262;
end;
assume L1101: (ex B237 being  odd (Element of ( NAT )) st (B237 <= ( len C310 ) & ( C310 . B237 ) = C311));
consider C313 being  odd (Element of ( NAT )) such that L1102: C313 <= ( len C310 ) and L1103: ( C310 . C313 ) = C311 by L1101;
set D150 = ( C313 + 1 );
reconsider D151 = D150 as  even (Element of ( NAT ));
set D152 = ( D151 div 2 );
L1104: 2 divides D151 by PEPIN:22;
L1105: ( 2 * D152 ) = D151 by L1104 , NAT_D:3;
reconsider D153 = D152 as (Element of ( NAT ));
L1106: 1 <= C313 by ABIAN:12;
L1107: ( 1 + 1 ) <= D151 by L1106 , XREAL_1:7;
L1108: ( 2 * 1 ) <= ( 2 * D153 ) by L1107 , L1104 , NAT_D:3;
L1109: 1 <= D153 by L1108 , XREAL_1:68;
L1110: D151 <= ( ( len C310 ) + 1 ) by L1102 , XREAL_1:7;
L1111: ( 2 * D153 ) <= ( 2 * ( len D144 ) ) by L1110 , L1105 , L262;
L1112: D153 <= ( len D144 ) by L1111 , XREAL_1:68;
L1113: D153 in ( dom D144 ) by L1112 , L1109 , FINSEQ_3:25;
L1114: ( D144 . D153 ) = ( C310 . ( ( 2 * D153 ) - 1 ) ) by L1109 , L1112 , L262
.= C311 by L1103 , L1105;
thus L1115: thesis by L1114 , L1113 , FUNCT_1:def 3;
end;
L1116: (for B238 being _Graph holds (for B239 being (Walk of B238) holds (for B240 being set holds (B240 in ( B239 .edges() ) iff (ex B241 being  even (Element of ( NAT )) st (1 <= B241 & B241 <= ( len B239 ) & ( B239 . B241 ) = B240))))))
proof
let C314 being _Graph;
let C315 being (Walk of C314);
let C316 being set;
set D154 = ( C315 .edgeSeq() );
thus L1117:now
assume L1118: C316 in ( C315 .edges() );
consider C317 being Nat such that L1119: C317 in ( dom D154 ) and L1120: ( D154 . C317 ) = C316 by L1118 , FINSEQ_2:10;
set D155 = ( 2 * C317 );
reconsider D156 = D155 as  even (Element of ( NAT ));
take D157 = D156;
L1121: 1 <= C317 by L1119 , FINSEQ_3:25;
L1122: 1 <= ( C317 + C317 ) by L1121 , NAT_1:12;
thus L1123: 1 <= D157 by L1122;
L1124: C317 <= ( len D154 ) by L1119 , FINSEQ_3:25;
L1125: ( C317 * 2 ) <= ( ( len D154 ) * 2 ) by L1124 , XREAL_1:64;
L1126: D157 <= ( ( ( len D154 ) * 2 ) + 1 ) by L1125 , NAT_1:12;
thus L1127: D157 <= ( len C315 ) by L1126 , L314;
thus L1128: ( C315 . D157 ) = C316 by L1120 , L1121 , L1124 , L314;
end;
assume L1129: (ex B242 being  even (Element of ( NAT )) st (1 <= B242 & B242 <= ( len C315 ) & ( C315 . B242 ) = C316));
consider C318 being  even (Element of ( NAT )) such that L1130: 1 <= C318 and L1131: C318 <= ( len C315 ) and L1132: ( C315 . C318 ) = C316 by L1129;
set D158 = ( C318 div 2 );
L1133: 2 divides C318 by PEPIN:22;
L1134: ( 2 * D158 ) = C318 by L1133 , NAT_D:3;
reconsider D159 = D158 as (Element of ( NAT ));
L1135: 1 < C318 by L1130 , JORDAN12:2 , XXREAL_0:1;
L1136: ( 1 + 1 ) < ( C318 + 1 ) by L1135 , XREAL_1:8;
L1137: ( 2 * 1 ) <= ( 2 * D159 ) by L1136 , L1134 , NAT_1:13;
L1138: 1 <= D159 by L1137 , XREAL_1:68;
L1139: C318 < ( len C315 ) by L1131 , XXREAL_0:1;
L1140: ( 2 * D159 ) < ( ( 2 * ( len D154 ) ) + 1 ) by L1139 , L1134 , L314;
L1141: ( 2 * D159 ) <= ( 2 * ( len D154 ) ) by L1140 , NAT_1:13;
L1142: D159 <= ( len D154 ) by L1141 , XREAL_1:68;
L1143: D159 in ( dom D154 ) by L1142 , L1138 , FINSEQ_3:25;
L1144: ( D154 . D159 ) = C316 by L1132 , L1134 , L1138 , L1142 , L314;
thus L1145: thesis by L1144 , L1143 , FUNCT_1:def 3;
end;
L1146: (for B243 being _Graph holds (for B244 being (Walk of B243) holds (for B245 being set holds (B245 in ( B244 .edges() ) implies (ex B246 , B247 being (Vertex of B243) st (ex B248 being  odd (Element of ( NAT )) st (( B248 + 2 ) <= ( len B244 ) & B246 = ( B244 . B248 ) & B245 = ( B244 . ( B248 + 1 ) ) & B247 = ( B244 . ( B248 + 2 ) ) & B245 Joins B246 , B247 , B243)))))))
proof
let C319 being _Graph;
let C320 being (Walk of C319);
let C321 being set;
reconsider D160 = ( len C320 ) as  odd (Element of ( NAT ));
assume L1147: C321 in ( C320 .edges() );
consider C322 being  even (Element of ( NAT )) such that L1148: 1 <= C322 and L1149: C322 <= ( len C320 ) and L1150: ( C320 . C322 ) = C321 by L1147 , L1116;
reconsider D161 = ( C322 - 1 ) as  odd (Element of ( NAT )) by L1148 , INT_1:5;
set D162 = ( C320 . D161 );
set D163 = ( C320 . ( D161 + 2 ) );
L1151: ( C322 - 1 ) <= ( ( len C320 ) - ( 0 ) ) by L1149 , XREAL_1:13;
reconsider D164 = D162 as (Vertex of C319) by L1151 , L502;
L1152: C322 < D160 by L1149 , XXREAL_0:1;
L1153: ( ( D161 + 1 ) + 1 ) <= ( len C320 ) by L1152 , NAT_1:13;
reconsider D165 = D163 as (Vertex of C319) by L1153 , L502;
take D164;
take D165;
take D161;
thus L1154: ( D161 + 2 ) <= ( len C320 ) by L1153;
thus L1155: (D164 = ( C320 . D161 ) & C321 = ( C320 . ( D161 + 1 ) ) & D165 = ( C320 . ( D161 + 2 ) )) by L1150;
L1156: ( ( D161 + 1 ) - 1 ) < ( ( len C320 ) - ( 0 ) ) by L1149 , XREAL_1:15;
thus L1157: thesis by L1156 , L1150 , L55;
end;
L1158: (for B249 being _Graph holds (for B250 being (Walk of B249) holds (for B251 , B252 , B253 being set holds ((B251 in ( B250 .edges() ) & B251 Joins B252 , B253 , B249) implies (B252 in ( B250 .vertices() ) & B253 in ( B250 .vertices() ))))))
proof
let C323 being _Graph;
let C324 being (Walk of C323);
let C325 , C326 , C327 being set;
assume that
L1159: C325 in ( C324 .edges() )
and
L1160: C325 Joins C326 , C327 , C323;
consider C328 , C329 being (Vertex of C323), C330 being  odd (Element of ( NAT )) such that L1161: ( C330 + 2 ) <= ( len C324 ) and L1162: C328 = ( C324 . C330 ) and L1163: C325 = ( C324 . ( C330 + 1 ) ) and L1164: C329 = ( C324 . ( C330 + 2 ) ) and L1165: C325 Joins C328 , C329 , C323 by L1159 , L1146;
L1166: ( ( C330 + 2 ) - 2 ) <= ( ( len C324 ) - ( 0 ) ) by L1161 , XREAL_1:13;
L1167: C328 in ( C324 .vertices() ) by L1166 , L1162 , L1088;
L1168: C329 in ( C324 .vertices() ) by L1161 , L1164 , L1088;
thus L1169: thesis by L1168 , L1160 , L1165 , L1167 , GLIB_000:15;
end;
L1170: (for B254 being _Graph holds (for B255 being (Walk of B254) holds (for B256 being  odd (Element of ( NAT )) holds (B256 <= ( len B255 ) implies ( B255 .find B256 ) <= B256))))
proof
let C331 being _Graph;
let C332 being (Walk of C331);
let C333 being  odd (Element of ( NAT ));
assume L1171: C333 <= ( len C332 );
L1172: (for B257 being  odd (Element of ( NAT )) holds ((B257 <= ( len C332 ) & ( C332 . B257 ) = ( C332 . C333 )) implies ( C332 .find C333 ) <= B257)) by L1171 , L414;
thus L1173: thesis by L1172 , L1171;
end;
L1174: (for B258 being _Graph holds (for B259 being (Walk of B258) holds (for B260 being  odd (Element of ( NAT )) holds (B260 <= ( len B259 ) implies ( B259 .rfind B260 ) >= B260))))
proof
let C334 being _Graph;
let C335 being (Walk of C334);
let C336 being  odd (Element of ( NAT ));
assume L1175: C336 <= ( len C335 );
L1176: (for B261 being  odd (Element of ( NAT )) holds ((B261 <= ( len C335 ) & ( C335 . B261 ) = ( C335 . C336 )) implies B261 <= ( C335 .rfind C336 ))) by L1175 , L463;
thus L1177: thesis by L1176 , L1175;
end;
L1178: (for B262 being _Graph holds (for B263 being (Walk of B262) holds (B263 is  directed iff (for B264 being  odd (Element of ( NAT )) holds (B264 < ( len B263 ) implies ( B263 . ( B264 + 1 ) ) DJoins ( B263 . B264 ) , ( B263 . ( B264 + 2 ) ) , B262)))))
proof
let C337 being _Graph;
let C338 being (Walk of C337);
thus L1179:now
assume L1180: C338 is  directed;
let C339 being  odd (Element of ( NAT ));
assume L1181: C339 < ( len C338 );
L1182: ( C338 . C339 ) = ( ( the_Source_of C337 ) . ( C338 . ( C339 + 1 ) ) ) by L1181 , L1180 , L490;
L1183:
now
assume L1184: ( C338 . ( C339 + 1 ) ) DJoins ( C338 . ( C339 + 2 ) ) , ( C338 . C339 ) , C337;
L1185: ( C338 . ( C339 + 2 ) ) = ( C338 . C339 ) by L1184 , L1182 , GLIB_000:def 14;
thus L1186: ( C338 . ( C339 + 1 ) ) DJoins ( C338 . C339 ) , ( C338 . ( C339 + 2 ) ) , C337 by L1185 , L1184;
end;
L1187: ( C338 . ( C339 + 1 ) ) Joins ( C338 . C339 ) , ( C338 . ( C339 + 2 ) ) , C337 by L1181 , L55;
thus L1188: ( C338 . ( C339 + 1 ) ) DJoins ( C338 . C339 ) , ( C338 . ( C339 + 2 ) ) , C337 by L1187 , L1183 , GLIB_000:16;
end;
assume L1189: (for B265 being  odd (Element of ( NAT )) holds (B265 < ( len C338 ) implies ( C338 . ( B265 + 1 ) ) DJoins ( C338 . B265 ) , ( C338 . ( B265 + 2 ) ) , C337));
L1190:
now
let C340 being  odd (Element of ( NAT ));
assume L1191: C340 < ( len C338 );
L1192: ( C338 . ( C340 + 1 ) ) DJoins ( C338 . C340 ) , ( C338 . ( C340 + 2 ) ) , C337 by L1191 , L1189;
thus L1193: ( ( the_Source_of C337 ) . ( C338 . ( C340 + 1 ) ) ) = ( C338 . C340 ) by L1192 , GLIB_000:def 14;
end;
thus L1194: thesis by L1190 , L490;
end;
L1195: (for B266 being _Graph holds (for B267 being (Walk of B266) holds (for B268 , B269 , B270 , B271 being set holds ((B267 is  directed & B267 is_Walk_from B268 , B270 & B269 DJoins B270 , B271 , B266) implies (( B267 .addEdge B269 ) is  directed & ( B267 .addEdge B269 ) is_Walk_from B268 , B271)))))
proof
let C341 being _Graph;
let C342 being (Walk of C341);
let C343 , C344 , C345 , C346 being set;
set D166 = ( C342 .addEdge C344 );
assume that
L1196: C342 is  directed
and
L1197: C342 is_Walk_from C343 , C345
and
L1198: C344 DJoins C345 , C346 , C341;
L1199: ( C342 .last() ) = C345 by L1197 , L487;
L1200: C344 Joins ( C342 .last() ) , C346 , C341 by L1199 , L1198 , GLIB_000:16;
L1201: ( len D166 ) = ( ( len C342 ) + 2 ) by L1200 , L959;
L1202: ( D166 . ( ( len C342 ) + 1 ) ) = C344 by L1200 , L967;
L1203: 1 <= ( len C342 ) by ABIAN:12;
L1204: ( len C342 ) in ( dom C342 ) by L1203 , FINSEQ_3:25;
L1205: ( D166 . ( len C342 ) ) = C345 by L1204 , L1199 , L1200 , L967;
L1206:
now
let C347 being  odd (Element of ( NAT ));
assume L1207: C347 < ( len D166 );
L1208: C347 < ( ( ( len C342 ) + 1 ) + 1 ) by L1207 , L1201;
L1209: C347 <= ( ( len C342 ) + 1 ) by L1208 , NAT_1:13;
L1210: C347 < ( ( len C342 ) + 1 ) by L1209 , XXREAL_0:1;
L1211: C347 <= ( len C342 ) by L1210 , NAT_1:13;
L1212:
now
per cases ;
suppose L1213: C347 = ( len C342 );

thus L1214: ( D166 . C347 ) = ( ( the_Source_of C341 ) . ( D166 . ( C347 + 1 ) ) ) by L1213 , L1198 , L1205 , L1202 , GLIB_000:def 14;
end;
suppose L1215: C347 <> ( len C342 );

L1216: 1 <= ( C347 + 1 ) by NAT_1:12;
L1217: 1 <= C347 by ABIAN:12;
L1218: C347 in ( dom C342 ) by L1217 , L1211 , FINSEQ_3:25;
L1219: ( D166 . C347 ) = ( C342 . C347 ) by L1218 , L1200 , L967;
L1220: C347 < ( len C342 ) by L1211 , L1215 , XXREAL_0:1;
L1221: ( C347 + 1 ) <= ( len C342 ) by L1220 , NAT_1:13;
L1222: ( C347 + 1 ) in ( dom C342 ) by L1221 , L1216 , FINSEQ_3:25;
L1223: ( D166 . ( C347 + 1 ) ) = ( C342 . ( C347 + 1 ) ) by L1222 , L1200 , L967;
thus L1224: ( D166 . C347 ) = ( ( the_Source_of C341 ) . ( D166 . ( C347 + 1 ) ) ) by L1223 , L1196 , L1220 , L1219 , L490;
end;
end;
thus L1226: ( D166 . C347 ) = ( ( the_Source_of C341 ) . ( D166 . ( C347 + 1 ) ) ) by L1212;
end;
thus L1227: ( C342 .addEdge C344 ) is  directed by L1206 , L490;
thus L1228: thesis by L1197 , L1199 , L1200 , L979;
end;
L1229: (for B272 being _Graph holds (for B273 being (Walk of B272) holds (for B274 , B275 being (Element of ( NAT )) holds (B273 is  directed implies ( B273 .cut (B274 , B275) ) is  directed))))
proof
let C348 being _Graph;
let C349 being (Walk of C348);
let C350 , C351 being (Element of ( NAT ));
set D167 = ( C349 .cut (C350 , C351) );
assume L1230: C349 is  directed;
L1231:
now
per cases ;
suppose L1232: (C350 is  odd & C351 is  odd & C350 <= C351 & C351 <= ( len C349 ));

reconsider D168 = C350 as  odd (Element of ( NAT )) by L1232;
L1233:
now
let C352 being  odd (Element of ( NAT ));
reconsider D169 = ( C352 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
assume L1234: C352 < ( len D167 );
L1235: ( C352 + 1 ) <= ( len D167 ) by L1234 , NAT_1:13;
L1236: ( C352 + 1 ) < ( len D167 ) by L1235 , XXREAL_0:1;
L1237: ( C350 + C352 ) in ( dom C349 ) by L1232 , L1234 , L664;
L1238: ( D168 + C352 ) <= ( len C349 ) by L1237 , FINSEQ_3:25;
L1239: ( ( D168 + C352 ) - 1 ) < ( ( len C349 ) - ( 0 ) ) by L1238 , XREAL_1:15;
L1240: D169 < ( ( len D167 ) - ( 0 ) ) by L1234 , XREAL_1:14;
L1241: ( D167 . ( D169 + 1 ) ) = ( C349 . ( C350 + D169 ) ) by L1240 , L1232 , L664;
L1242: ( D167 . ( C352 + 2 ) ) = ( D167 . ( ( C352 + 1 ) + 1 ) )
.= ( C349 . ( C350 + ( ( ( C352 - 1 ) + 1 ) + 1 ) ) ) by L1232 , L1236 , L664
.= ( C349 . ( ( C350 + D169 ) + 2 ) );
L1243: ( D167 . ( C352 + 1 ) ) = ( C349 . ( ( ( C350 + C352 ) - 1 ) + 1 ) ) by L1232 , L1234 , L664
.= ( C349 . ( ( C350 + D169 ) + 1 ) );
thus L1244: ( D167 . ( C352 + 1 ) ) DJoins ( D167 . C352 ) , ( D167 . ( C352 + 2 ) ) , C348 by L1243 , L1230 , L1241 , L1239 , L1242 , L1178;
end;
thus L1245: thesis by L1233 , L1178;
end;
suppose L1246: (not (C350 is  odd & C351 is  odd & C350 <= C351 & C351 <= ( len C349 )));

thus L1247: thesis by L1246 , L1230 , L226;
end;
end;
thus L1249: thesis by L1231;
end;
L1250: (for B276 being _Graph holds (for B277 being (Walk of B276) holds (B277 is non  trivial iff 3 <= ( len B277 ))))
proof
let C353 being _Graph;
let C354 being (Walk of C353);
thus L1251:now
assume L1252: C354 is non  trivial;
L1253: ( C354 .length() ) <> ( 0 ) by L1252 , L491;
L1254: ( ( 0 ) + 1 ) <= ( len ( C354 .edgeSeq() ) ) by L1253 , NAT_1:13;
L1255: ( 2 * 1 ) <= ( 2 * ( len ( C354 .edgeSeq() ) ) ) by L1254 , NAT_1:4;
L1256: ( 2 + 1 ) <= ( ( 2 * ( len ( C354 .edgeSeq() ) ) ) + 1 ) by L1255 , XREAL_1:7;
thus L1257: 3 <= ( len C354 ) by L1256 , L314;
end;
assume L1258: 3 <= ( len C354 );
L1259: ( ( 2 * 1 ) + 1 ) <= ( ( 2 * ( len ( C354 .edgeSeq() ) ) ) + 1 ) by L1258 , L314;
L1260: ( C354 .length() ) <> ( 0 ) by L1259;
thus L1261: thesis by L1260 , L491;
end;
L1262: (for B278 being _Graph holds (for B279 being (Walk of B278) holds (B279 is non  trivial iff ( len B279 ) <> 1)))
proof
let C355 being _Graph;
let C356 being (Walk of C355);
L1263: 1 <= ( len C356 ) by ABIAN:12;
thus L1264: (C356 is non  trivial implies ( len C356 ) <> 1) by L1250;
assume L1265: ( len C356 ) <> 1;
L1266: 1 < ( len C356 ) by L1265 , L1263 , XXREAL_0:1;
L1267: ( 1 + 1 ) <= ( len C356 ) by L1266 , NAT_1:13;
L1268: ( 2 * 1 ) < ( len C356 ) by L1267 , XXREAL_0:1;
L1269: ( ( 2 * 1 ) + 1 ) <= ( len C356 ) by L1268 , NAT_1:13;
thus L1270: thesis by L1269 , L1250;
end;
L1271: (for B280 being _Graph holds (for B281 being (Walk of B280) holds (B281 is  trivial iff (ex B282 being (Vertex of B280) st B281 = ( B280 .walkOf B282 )))))
proof
let C357 being _Graph;
let C358 being (Walk of C357);
thus L1272:now
assume L1273: C358 is  trivial;
take D170 = ( C358 .first() );
L1274: ( len C358 ) = 1 by L1273 , L1262;
thus L1275: C358 = ( C357 .walkOf D170 ) by L1274 , FINSEQ_1:40;
end;
given C359 being (Vertex of C357) such that
L1276: C358 = ( C357 .walkOf C359 );

L1277: ( len C358 ) = 1 by L1276 , FINSEQ_1:39;
thus L1278: thesis by L1277 , L1262;
end;
L1279: (for B283 being _Graph holds (for B284 being (Walk of B283) holds (B284 is  Trail-like iff (for B285 , B286 being  even (Element of ( NAT )) holds ((1 <= B285 & B285 < B286 & B286 <= ( len B284 )) implies ( B284 . B285 ) <> ( B284 . B286 ))))))
proof
let C360 being _Graph;
let C361 being (Walk of C360);
thus L1280:now
assume L1281: C361 is  Trail-like;
L1282: ( C361 .edgeSeq() ) is  one-to-one by L1281 , L492;
let C362 , C363 being  even (Element of ( NAT ));
assume that
L1283: 1 <= C362
and
L1284: C362 < C363
and
L1285: C363 <= ( len C361 );
L1286: 1 <= C363 by L1283 , L1284 , XXREAL_0:2;
L1287: ( C363 div 2 ) in ( dom ( C361 .edgeSeq() ) ) by L1286 , L1285 , L985;
L1288: C362 <= ( len C361 ) by L1284 , L1285 , XXREAL_0:2;
L1289: ( C361 . C362 ) = ( ( C361 .edgeSeq() ) . ( C362 div 2 ) ) by L1288 , L1283 , L985;
L1290:
now
L1291: 2 divides C362 by PEPIN:22;
L1292: ( 2 * ( C362 div 2 ) ) = C362 by L1291 , NAT_D:3;
L1293: 2 divides C363 by PEPIN:22;
assume L1294: ( C362 div 2 ) = ( C363 div 2 );
thus L1295: contradiction by L1294 , L1284 , L1293 , L1292 , NAT_D:3;
end;
L1296: ( C361 . C363 ) = ( ( C361 .edgeSeq() ) . ( C363 div 2 ) ) by L1285 , L1286 , L985;
L1297: ( C362 div 2 ) in ( dom ( C361 .edgeSeq() ) ) by L1283 , L1288 , L985;
thus L1298: ( C361 . C362 ) <> ( C361 . C363 ) by L1297 , L1282 , L1289 , L1287 , L1296 , L1290 , FUNCT_1:def 4;
end;
assume L1299: (for B287 , B288 being  even (Element of ( NAT )) holds ((1 <= B287 & B287 < B288 & B288 <= ( len C361 )) implies ( C361 . B287 ) <> ( C361 . B288 )));
L1300:
now
let C364 , C365 being set;
assume that
L1301: C364 in ( dom ( C361 .edgeSeq() ) )
and
L1302: C365 in ( dom ( C361 .edgeSeq() ) )
and
L1303: ( ( C361 .edgeSeq() ) . C364 ) = ( ( C361 .edgeSeq() ) . C365 );
reconsider D171 = C364 , D172 = C365 as (Element of ( NAT )) by L1301 , L1302;
L1304: D171 <= ( len ( C361 .edgeSeq() ) ) by L1301 , FINSEQ_3:25;
L1305: 1 <= D171 by L1301 , FINSEQ_3:25;
L1306: ( ( C361 .edgeSeq() ) . C364 ) = ( C361 . ( 2 * D171 ) ) by L1305 , L1304 , L314;
L1307: D172 <= ( len ( C361 .edgeSeq() ) ) by L1302 , FINSEQ_3:25;
L1308: 1 <= D172 by L1302 , FINSEQ_3:25;
L1309: ( C361 . ( 2 * D171 ) ) = ( C361 . ( 2 * D172 ) ) by L1308 , L1303 , L1306 , L1307 , L314;
L1310: ( 2 * D172 ) in ( dom C361 ) by L1302 , L1009;
L1311: 1 <= ( 2 * D172 ) by L1310 , FINSEQ_3:25;
L1312: ( 2 * D171 ) in ( dom C361 ) by L1301 , L1009;
L1313: ( 2 * D171 ) <= ( len C361 ) by L1312 , FINSEQ_3:25;
L1314: ( 2 * D172 ) <= ( len C361 ) by L1310 , FINSEQ_3:25;
L1315: 1 <= ( 2 * D171 ) by L1312 , FINSEQ_3:25;
L1316:
now
per cases  by XXREAL_0:1;
suppose L1317: ( 2 * D171 ) < ( 2 * D172 );

thus L1318: C364 = C365 by L1317 , L1299 , L1309 , L1315 , L1314;
end;
suppose L1319: ( 2 * D171 ) = ( 2 * D172 );

thus L1320: C364 = C365 by L1319;
end;
suppose L1321: ( 2 * D171 ) > ( 2 * D172 );

thus L1322: C364 = C365 by L1321 , L1299 , L1309 , L1313 , L1311;
end;
end;
thus L1324: C364 = C365 by L1316;
end;
L1325: ( C361 .edgeSeq() ) is  one-to-one by L1300 , FUNCT_1:def 4;
thus L1326: thesis by L1325 , L492;
end;
L1327: (for B289 being _Graph holds (for B290 being (Walk of B289) holds (B290 is  Trail-like iff ( B290 .reverse() ) is  Trail-like)))
proof
let C366 being _Graph;
let C367 being (Walk of C366);
L1328:
now
let C368 being (Walk of C366);
assume L1329: C368 is  Trail-like;
L1330:
now
reconsider D173 = ( len C368 ) as  odd (Element of ( NAT ));
let C369 , C370 being  even (Element of ( NAT ));
assume that
L1331: 1 <= C369
and
L1332: C369 < C370
and
L1333: C370 <= ( len ( C368 .reverse() ) );
L1334: ( ( len C368 ) - C370 ) < ( ( len C368 ) - C369 ) by L1332 , XREAL_1:15;
L1335: ( ( ( len C368 ) - C370 ) + 1 ) < ( ( ( len C368 ) - C369 ) + 1 ) by L1334 , XREAL_1:8;
L1336: C369 <= ( len ( C368 .reverse() ) ) by L1332 , L1333 , XXREAL_0:2;
L1337: C369 in ( dom ( C368 .reverse() ) ) by L1336 , L1331 , FINSEQ_3:25;
L1338: ( ( ( len C368 ) - C369 ) + 1 ) in ( dom C368 ) by L1337 , L570;
reconsider D174 = ( ( D173 - C369 ) + 1 ) as  even (Element of ( NAT )) by L1338;
L1339: D174 <= ( len C368 ) by L1338 , FINSEQ_3:25;
L1340: 1 <= C370 by L1331 , L1332 , XXREAL_0:2;
L1341: C370 in ( dom ( C368 .reverse() ) ) by L1340 , L1333 , FINSEQ_3:25;
L1342: ( ( C368 .reverse() ) . C370 ) = ( C368 . ( ( ( len C368 ) - C370 ) + 1 ) ) by L1341 , L570;
L1343: ( ( ( len C368 ) - C370 ) + 1 ) in ( dom C368 ) by L1341 , L570;
reconsider D175 = ( ( D173 - C370 ) + 1 ) as  even (Element of ( NAT )) by L1343;
L1344: 1 <= D175 by L1343 , FINSEQ_3:25;
L1345: ( ( C368 .reverse() ) . C369 ) = ( C368 . ( ( ( len C368 ) - C369 ) + 1 ) ) by L1337 , L570;
thus L1346: ( ( C368 .reverse() ) . C369 ) <> ( ( C368 .reverse() ) . C370 ) by L1345 , L1329 , L1342 , L1335 , L1344 , L1339 , L1279;
end;
thus L1347: ( C368 .reverse() ) is  Trail-like by L1330 , L1279;
end;
thus L1348: (C367 is  Trail-like implies ( C367 .reverse() ) is  Trail-like) by L1328;
assume L1349: ( C367 .reverse() ) is  Trail-like;
L1350: ( ( C367 .reverse() ) .reverse() ) is  Trail-like by L1349 , L1328;
thus L1351: thesis by L1350;
end;
L1352: (for B291 being _Graph holds (for B292 being (Walk of B291) holds (for B293 , B294 being (Element of ( NAT )) holds (B292 is  Trail-like implies ( B292 .cut (B293 , B294) ) is  Trail-like))))
proof
let C371 being _Graph;
let C372 being (Walk of C371);
let C373 , C374 being (Element of ( NAT ));
assume L1353: C372 is  Trail-like;
L1354:
now
per cases ;
suppose L1355: (C373 is  odd & C374 is  odd & C373 <= C374 & C374 <= ( len C372 ));

L1356:
now
reconsider D176 = C373 as  odd (Element of ( NAT )) by L1355;
let C375 , C376 being  even (Element of ( NAT ));
assume that
L1357: 1 <= C375
and
L1358: C375 < C376
and
L1359: C376 <= ( len ( C372 .cut (C373 , C374) ) );
reconsider D177 = ( C375 - 1 ) as  odd (Element of ( NAT )) by L1357 , INT_1:5;
reconsider D178 = ( C376 - 1 ) as  odd (Element of ( NAT )) by L1357 , L1358 , INT_1:5 , XXREAL_0:2;
L1360: ( C375 - 1 ) < ( C376 - 1 ) by L1358 , XREAL_1:14;
L1361: ( D177 + C373 ) < ( D178 + C373 ) by L1360 , XREAL_1:8;
L1362: C375 <= ( len ( C372 .cut (C373 , C374) ) ) by L1358 , L1359 , XXREAL_0:2;
L1363: ( C375 - 1 ) < ( ( len ( C372 .cut (C373 , C374) ) ) - ( 0 ) ) by L1362 , XREAL_1:15;
L1364: ( ( C372 .cut (C373 , C374) ) . ( D177 + 1 ) ) = ( C372 . ( C373 + D177 ) ) by L1363 , L1355 , L664;
L1365: ( C376 - 1 ) < ( ( len ( C372 .cut (C373 , C374) ) ) - ( 0 ) ) by L1359 , XREAL_1:15;
L1366: ( ( C372 .cut (C373 , C374) ) . ( D178 + 1 ) ) = ( C372 . ( C373 + D178 ) ) by L1365 , L1355 , L664;
L1367: ( C373 + D178 ) in ( dom C372 ) by L1355 , L1365 , L664;
L1368: ( C373 + D178 ) <= ( len C372 ) by L1367 , FINSEQ_3:25;
L1369: 1 <= ( C373 + D177 ) by ABIAN:12 , NAT_1:12;
L1370: ( C372 . ( D176 + D177 ) ) <> ( C372 . ( D176 + D178 ) ) by L1369 , L1353 , L1368 , L1361 , L1279;
thus L1371: ( ( C372 .cut (C373 , C374) ) . C375 ) <> ( ( C372 .cut (C373 , C374) ) . C376 ) by L1370 , L1364 , L1366;
end;
thus L1372: thesis by L1356 , L1279;
end;
suppose L1373: (not (C373 is  odd & C374 is  odd & C373 <= C374 & C374 <= ( len C372 )));

thus L1374: thesis by L1373 , L1353 , L226;
end;
end;
thus L1376: thesis by L1354;
end;
L1377: (for B295 being _Graph holds (for B296 being (Walk of B295) holds (for B297 being set holds ((B296 is  Trail-like & B297 in ( ( B296 .last() ) .edgesInOut() ) & (not B297 in ( B296 .edges() ))) implies ( B296 .addEdge B297 ) is  Trail-like))))
proof
let C377 being _Graph;
let C378 being (Walk of C377);
let C379 being set;
assume that
L1378: C378 is  Trail-like
and
L1379: C379 in ( ( C378 .last() ) .edgesInOut() )
and
L1380: (not C379 in ( C378 .edges() ));
set D179 = ( C378 .addEdge C379 );
reconsider D180 = ( len D179 ) as  odd (Element of ( NAT ));
L1381: C379 Joins ( C378 .last() ) , ( ( C378 .last() ) .adj C379 ) , C377 by L1379 , GLIB_000:67;
L1382:
now
let C380 , C381 being  even (Element of ( NAT ));
assume that
L1383: 1 <= C380
and
L1384: C380 < C381
and
L1385: C381 <= ( len D179 );
L1386:
now
per cases ;
suppose L1387: C381 <= ( len C378 );

L1388: C380 <= ( len C378 ) by L1387 , L1384 , XXREAL_0:2;
L1389: C380 in ( dom C378 ) by L1388 , L1383 , FINSEQ_3:25;
L1390: ( D179 . C380 ) = ( C378 . C380 ) by L1389 , L1381 , L967;
L1391: 1 <= C381 by L1383 , L1384 , XXREAL_0:2;
L1392: C381 in ( dom C378 ) by L1391 , L1387 , FINSEQ_3:25;
L1393: ( D179 . C381 ) = ( C378 . C381 ) by L1392 , L1381 , L967;
thus L1394: ( D179 . C380 ) <> ( D179 . C381 ) by L1393 , L1378 , L1383 , L1384 , L1387 , L1390 , L1279;
end;
suppose L1395: C381 > ( len C378 );

L1396: C381 < D180 by L1385 , XXREAL_0:1;
L1397: ( C381 + 1 ) <= ( len D179 ) by L1396 , NAT_1:13;
L1398: ( ( C381 + 1 ) - 1 ) <= ( ( len D179 ) - 1 ) by L1397 , XREAL_1:13;
L1399: C381 <= ( ( ( len C378 ) + ( 1 + 1 ) ) - 1 ) by L1398 , L1381 , L959;
L1400: ( ( len C378 ) + 1 ) <= C381 by L1395 , NAT_1:13;
L1401: C381 = ( ( len C378 ) + 1 ) by L1400 , L1399 , XXREAL_0:1;
L1402: ( D179 . C381 ) = C379 by L1401 , L1381 , L967;
L1403: ( ( C380 + 1 ) - 1 ) <= ( ( ( len C378 ) + 1 ) - 1 ) by L1384 , L1401 , NAT_1:13;
L1404: C380 in ( dom C378 ) by L1403 , L1383 , FINSEQ_3:25;
L1405: ( D179 . C380 ) = ( C378 . C380 ) by L1404 , L1381 , L967;
thus L1406: ( D179 . C380 ) <> ( D179 . C381 ) by L1405 , L1380 , L1383 , L1402 , L1403 , L1116;
end;
end;
thus L1408: ( D179 . C380 ) <> ( D179 . C381 ) by L1386;
end;
thus L1409: thesis by L1382 , L1279;
end;
L1410: (for B298 being _Graph holds (for B299 being (Walk of B298) holds (( len B299 ) <= 3 implies B299 is  Trail-like)))
proof
let C382 being _Graph;
let C383 being (Walk of C382);
assume L1411: ( len C383 ) <= 3;
L1412:
now
per cases ;
suppose L1413: ( len C383 ) = 1;

L1414: C383 is  trivial by L1413 , L1262;
L1415: (ex B300 being (Vertex of C382) st C383 = ( C382 .walkOf B300 )) by L1414 , L1271;
thus L1416: thesis by L1415 , L532;
end;
suppose L1417: ( len C383 ) <> 1;

L1418: 1 <= ( len C383 ) by ABIAN:12;
L1419: 1 < ( len C383 ) by L1418 , L1417 , XXREAL_0:1;
L1420: ( 1 + 2 ) <= ( len C383 ) by L1419 , L1 , JORDAN12:2;
L1421: ( len C383 ) = 3 by L1420 , L1411 , XXREAL_0:1;
L1422:
now
let C384 , C385 being  even (Element of ( NAT ));
assume that
L1423: 1 <= C384
and
L1424: C384 < C385
and
L1425: C385 <= ( len C383 );
L1426: ( ( 2 * ( 0 ) ) + 1 ) < C384 by L1423 , XXREAL_0:1;
L1427: ( 1 + 1 ) <= C384 by L1426 , NAT_1:13;
L1428: C385 < ( 2 + 1 ) by L1421 , L1425 , XXREAL_0:1;
L1429: C385 <= 2 by L1428 , NAT_1:13;
thus L1430: ( C383 . C384 ) <> ( C383 . C385 ) by L1429 , L1424 , L1427 , XXREAL_0:2;
end;
thus L1431: thesis by L1422 , L1279;
end;
end;
thus L1433: thesis by L1412;
end;
L1434: (for B301 being _Graph holds (for B302 , B303 , B304 being set holds (B303 Joins B302 , B304 , B301 implies ( B301 .walkOf (B302 , B303 , B304) ) is  Path-like)))
proof
let C386 being _Graph;
let C387 , C388 , C389 being set;
set D181 = ( C386 .walkOf (C387 , C388 , C389) );
assume L1435: C388 Joins C387 , C389 , C386;
L1436: ( len D181 ) = 3 by L1435 , L555;
L1437:
now
let C390 , C391 being  odd (Element of ( NAT ));
assume that
L1438: C390 < C391
and
L1439: C391 <= ( len D181 );
assume L1440: ( D181 . C390 ) = ( D181 . C391 );
L1441: 1 <= C390 by ABIAN:12;
L1442: 1 < C391 by L1441 , L1438 , XXREAL_0:2;
L1443: ( 1 + 1 ) < ( C391 + 1 ) by L1442 , XREAL_1:8;
L1444: ( 2 * 1 ) <= C391 by L1443 , NAT_1:13;
L1445: ( 2 * 1 ) < C391 by L1444 , XXREAL_0:1;
L1446: ( 2 + 1 ) < ( C391 + 1 ) by L1445 , XREAL_1:8;
L1447: 3 <= C391 by L1446 , NAT_1:13;
L1448: C391 = 3 by L1447 , L1436 , L1439 , XXREAL_0:1;
L1449:
now
assume L1450: C390 <> 1;
L1451: 1 < C390 by L1450 , L1441 , XXREAL_0:1;
L1452: ( 1 + 1 ) < ( C390 + 1 ) by L1451 , XREAL_1:8;
L1453: ( 2 * 1 ) <= C390 by L1452 , NAT_1:13;
L1454: ( 2 * 1 ) < C390 by L1453 , XXREAL_0:1;
L1455: ( 2 + 1 ) < ( C390 + 1 ) by L1454 , XREAL_1:8;
thus L1456: contradiction by L1455 , L1438 , L1448 , NAT_1:13;
end;
thus L1457: (C390 = 1 & C391 = ( len D181 )) by L1449 , L1436 , L1439 , L1447 , XXREAL_0:1;
end;
L1458:
now
let C392 , C393 being  even (Element of ( NAT ));
assume that
L1459: 1 <= C392
and
L1460: C392 < C393
and
L1461: C393 <= ( len D181 );
L1462: 1 < C392 by L1459 , JORDAN12:2 , XXREAL_0:1;
L1463: ( 1 + 1 ) <= C392 by L1462 , NAT_1:13;
L1464: 2 < C393 by L1463 , L1460 , XXREAL_0:2;
L1465: C393 <= 3 by L1435 , L1461 , L555;
L1466: C393 < ( ( 2 * 1 ) + 1 ) by L1465 , XXREAL_0:1;
thus L1467: ( D181 . C392 ) <> ( D181 . C393 ) by L1466 , L1464 , NAT_1:13;
end;
L1468: D181 is  Trail-like by L1458 , L1279;
thus L1469: thesis by L1468 , L1437 , L495;
end;
L1470: (for B305 being _Graph holds (for B306 being (Walk of B305) holds (B306 is  Path-like iff ( B306 .reverse() ) is  Path-like)))
proof
let C394 being _Graph;
let C395 being (Walk of C394);
L1471:
now
let C396 being (Walk of C394);
reconsider D182 = ( len C396 ) as  odd (Element of ( NAT ));
assume L1472: C396 is  Path-like;
L1473:
now
let C397 , C398 being  odd (Element of ( NAT ));
assume that
L1474: C397 < C398
and
L1475: C398 <= ( len ( C396 .reverse() ) )
and
L1476: ( ( C396 .reverse() ) . C397 ) = ( ( C396 .reverse() ) . C398 );
L1477: 1 <= C397 by ABIAN:12;
L1478: C397 <= ( len ( C396 .reverse() ) ) by L1474 , L1475 , XXREAL_0:2;
L1479: C397 in ( dom ( C396 .reverse() ) ) by L1478 , L1477 , FINSEQ_3:25;
L1480: ( ( ( len C396 ) - C397 ) + 1 ) in ( dom C396 ) by L1479 , L570;
reconsider D183 = ( ( D182 - C397 ) + 1 ) as  odd (Element of ( NAT )) by L1480;
L1481: 1 <= C398 by ABIAN:12;
L1482: C398 in ( dom ( C396 .reverse() ) ) by L1481 , L1475 , FINSEQ_3:25;
L1483: ( ( ( len C396 ) - C398 ) + 1 ) in ( dom C396 ) by L1482 , L570;
reconsider D184 = ( ( D182 - C398 ) + 1 ) as  odd (Element of ( NAT )) by L1483;
L1484: ( D182 - C398 ) < ( ( len C396 ) - C397 ) by L1474 , XREAL_1:15;
L1485: D184 < D183 by L1484 , XREAL_1:8;
L1486: ( ( C396 .reverse() ) . C398 ) = ( C396 . ( ( ( len C396 ) - C398 ) + 1 ) ) by L1482 , L570;
L1487: ( C396 . D183 ) = ( C396 . D184 ) by L1486 , L1476 , L1479 , L570;
L1488: D183 <= ( len C396 ) by L1480 , FINSEQ_3:25;
L1489: ( ( len C396 ) + ( 1 + ( - C397 ) ) ) = ( len C396 ) by L1488 , L1472 , L1485 , L1487 , L495;
thus L1490: C397 = 1 by L1489;
L1491: D184 = 1 by L1472 , L1485 , L1488 , L1487 , L495;
thus L1492: C398 = ( len ( C396 .reverse() ) ) by L1491 , FINSEQ_5:def 3;
end;
L1493: C396 is  Trail-like by L1472 , L495;
L1494: ( C396 .reverse() ) is  Trail-like by L1493 , L1327;
thus L1495: ( C396 .reverse() ) is  Path-like by L1494 , L1473 , L495;
end;
thus L1496: (C395 is  Path-like implies ( C395 .reverse() ) is  Path-like) by L1471;
assume L1497: ( C395 .reverse() ) is  Path-like;
L1498: ( ( C395 .reverse() ) .reverse() ) is  Path-like by L1497 , L1471;
thus L1499: thesis by L1498;
end;
L1500: (for B307 being _Graph holds (for B308 being (Walk of B307) holds (for B309 , B310 being (Element of ( NAT )) holds (B308 is  Path-like implies ( B308 .cut (B309 , B310) ) is  Path-like))))
proof
let C399 being _Graph;
let C400 being (Walk of C399);
let C401 , C402 being (Element of ( NAT ));
assume L1501: C400 is  Path-like;
L1502:
now
per cases ;
suppose L1503: (C401 is  odd & C402 is  odd & C401 <= C402 & C402 <= ( len C400 ));

reconsider D185 = C401 as  odd (Element of ( NAT )) by L1503;
L1504:
now
L1505: C400 is  Trail-like by L1501 , L495;
thus L1506: ( C400 .cut (C401 , C402) ) is  Trail-like by L1505 , L1352;
let C403 , C404 being  odd (Element of ( NAT ));
assume that
L1507: C403 < C404
and
L1508: C404 <= ( len ( C400 .cut (C401 , C402) ) )
and
L1509: ( ( C400 .cut (C401 , C402) ) . C403 ) = ( ( C400 .cut (C401 , C402) ) . C404 );
reconsider D186 = ( C403 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
reconsider D187 = ( C404 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L1510: ( C403 - 1 ) < ( C404 - 1 ) by L1507 , XREAL_1:14;
L1511: ( D186 + C401 ) < ( D187 + C401 ) by L1510 , XREAL_1:8;
L1512: C403 <= ( len ( C400 .cut (C401 , C402) ) ) by L1507 , L1508 , XXREAL_0:2;
L1513: ( C403 - 1 ) < ( ( len ( C400 .cut (C401 , C402) ) ) - ( 0 ) ) by L1512 , XREAL_1:15;
L1514: ( ( C400 .cut (C401 , C402) ) . ( D186 + 1 ) ) = ( C400 . ( C401 + D186 ) ) by L1513 , L1503 , L664;
L1515: ( C404 - 1 ) < ( ( len ( C400 .cut (C401 , C402) ) ) - ( 0 ) ) by L1508 , XREAL_1:15;
L1516: ( ( C400 .cut (C401 , C402) ) . ( D187 + 1 ) ) = ( C400 . ( C401 + D187 ) ) by L1515 , L1503 , L664;
L1517: ( C401 + D187 ) in ( dom C400 ) by L1503 , L1515 , L664;
L1518: ( D185 + D187 ) <= ( len C400 ) by L1517 , FINSEQ_3:25;
L1519: ( D185 + D187 ) = ( len C400 ) by L1518 , L1501 , L1509 , L1514 , L1516 , L1511 , L495;
L1520:
now
assume L1521: D186 <> ( 0 );
L1522: C401 >= 1 by L1503 , ABIAN:12;
L1523: ( 1 + ( 0 ) ) < ( C401 + D186 ) by L1522 , L1521 , XREAL_1:8;
thus L1524: contradiction by L1523 , L1501 , L1509 , L1514 , L1516 , L1511 , L1518 , L495;
end;
L1525: ( ( C401 + 1 ) - 1 ) = 1 by L1520 , L1501 , L1509 , L1514 , L1516 , L1511 , L1518 , L495;
L1526: ( ( len ( C400 .cut (C401 , C402) ) ) + 1 ) = ( C402 + 1 ) by L1525 , L1503 , L664;
thus L1527: C403 = 1 by L1520;
L1528: ( D185 + D186 ) = 1 by L1501 , L1509 , L1514 , L1516 , L1511 , L1518 , L495;
thus L1529: C404 = ( len ( C400 .cut (C401 , C402) ) ) by L1528 , L1503 , L1508 , L1519 , L1520 , L1526 , XXREAL_0:1;
end;
thus L1530: thesis by L1504 , L495;
end;
suppose L1531: (not (C401 is  odd & C402 is  odd & C401 <= C402 & C402 <= ( len C400 )));

thus L1532: thesis by L1531 , L1501 , L226;
end;
end;
thus L1534: thesis by L1502;
end;
L1535: (for B311 being _Graph holds (for B312 being (Walk of B311) holds (for B313 , B314 being set holds ((B312 is  Path-like & B313 Joins ( B312 .last() ) , B314 , B311 & (not B313 in ( B312 .edges() )) & (B312 is  trivial or B312 is  open) & (for B315 being  odd (Element of ( NAT )) holds ((1 < B315 & B315 <= ( len B312 )) implies ( B312 . B315 ) <> B314))) implies ( B312 .addEdge B313 ) is  Path-like))))
proof
let C405 being _Graph;
let C406 being (Walk of C405);
let C407 , C408 being set;
assume that
L1536: C406 is  Path-like
and
L1537: C407 Joins ( C406 .last() ) , C408 , C405
and
L1538: (not C407 in ( C406 .edges() ))
and
L1539: (C406 is  trivial or C406 is  open)
and
L1540: (for B316 being  odd (Element of ( NAT )) holds ((1 < B316 & B316 <= ( len C406 )) implies ( C406 . B316 ) <> C408));
reconsider D188 = ( len C406 ) as  odd (Element of ( NAT ));
set D189 = ( C406 .addEdge C407 );
L1541: C407 in ( ( C406 .last() ) .edgesInOut() ) by L1537 , GLIB_000:62;
L1542:
now
L1543: C406 is  Trail-like by L1536 , L495;
thus L1544: D189 is  Trail-like by L1543 , L1538 , L1541 , L1377;
let C409 , C410 being  odd (Element of ( NAT ));
assume that
L1545: C409 < C410
and
L1546: C410 <= ( len D189 )
and
L1547: ( D189 . C409 ) = ( D189 . C410 );
L1548:
now
per cases  by L1539;
suppose L1549: C406 is  open;

L1550:
now
per cases ;
suppose L1551: C410 <= ( len C406 );

L1552: 1 <= C409 by ABIAN:12;
L1553: C409 <= ( len C406 ) by L1545 , L1551 , XXREAL_0:2;
L1554: C409 in ( dom C406 ) by L1553 , L1552 , FINSEQ_3:25;
L1555: ( D189 . C409 ) = ( C406 . C409 ) by L1554 , L1537 , L967;
L1556: 1 <= C410 by ABIAN:12;
L1557: C410 in ( dom C406 ) by L1556 , L1551 , FINSEQ_3:25;
L1558: ( C406 . C409 ) = ( C406 . C410 ) by L1557 , L1537 , L1547 , L1555 , L967;
L1559: C409 = 1 by L1558 , L1536 , L1545 , L1551 , L495;
L1560: ( C406 .first() ) = ( C406 .last() ) by L1559 , L1536 , L1545 , L1551 , L1558 , L495;
thus L1561: (C409 = 1 & C410 = ( len D189 )) by L1560 , L1549 , L489;
end;
suppose L1562: C410 > ( len C406 );

L1563: ( D188 + 1 ) <= C410 by L1562 , NAT_1:13;
L1564: ( D188 + 1 ) < C410 by L1563 , XXREAL_0:1;
L1565: ( ( D188 + 1 ) + 1 ) <= C410 by L1564 , NAT_1:13;
L1566: ( ( len C406 ) + ( 1 + 1 ) ) <= C410 by L1565;
L1567: ( len D189 ) <= C410 by L1566 , L1537 , L959;
L1568: C410 = ( len D189 ) by L1567 , L1546 , XXREAL_0:1;
L1569: ( D189 . C410 ) = ( D189 . ( ( len C406 ) + 2 ) ) by L1568 , L1537 , L959;
L1570: ( D189 . C410 ) = C408 by L1569 , L1537 , L967;
L1571: C409 < ( len D189 ) by L1545 , L1546 , L1567 , XXREAL_0:1;
L1572: C409 < ( ( len C406 ) + ( 1 + 1 ) ) by L1571 , L1537 , L959;
L1573: C409 < ( ( ( len C406 ) + 1 ) + 1 ) by L1572;
L1574: C409 <= ( D188 + 1 ) by L1573 , NAT_1:13;
L1575: C409 < ( D188 + 1 ) by L1574 , XXREAL_0:1;
L1576: C409 <= ( len C406 ) by L1575 , NAT_1:13;
L1577: 1 <= C409 by ABIAN:12;
L1578: C409 in ( dom C406 ) by L1577 , L1576 , FINSEQ_3:25;
L1579: ( C406 . C409 ) = C408 by L1578 , L1537 , L1547 , L1570 , L967;
L1580:
now
L1581: 1 <= C409 by ABIAN:12;
assume L1582: C409 <> 1;
L1583: 1 < C409 by L1582 , L1581 , XXREAL_0:1;
thus L1584: contradiction by L1583 , L1540 , L1576 , L1579;
end;
thus L1585: C409 = 1 by L1580;
thus L1586: C410 = ( len D189 ) by L1546 , L1567 , XXREAL_0:1;
end;
end;
thus L1588: (C409 = 1 & C410 = ( len D189 )) by L1550;
end;
suppose L1589: C406 is  trivial;

L1590: (ex B317 being (Vertex of C405) st C406 = ( C405 .walkOf B317 )) by L1589 , L1271;
L1591: ( len C406 ) = 1 by L1590 , FINSEQ_1:39;
L1592: ( len D189 ) = ( 1 + 2 ) by L1591 , L1537 , L959;
L1593: ( C409 + 1 ) <= C410 by L1545 , NAT_1:13;
L1594: 1 <= C409 by ABIAN:12;
L1595: ( 1 + 1 ) <= ( C409 + 1 ) by L1594 , XREAL_1:7;
L1596: ( 2 * 1 ) <= C410 by L1595 , L1593 , XXREAL_0:2;
L1597: ( 2 * 1 ) < C410 by L1596 , XXREAL_0:1;
L1598: ( len D189 ) <= C410 by L1597 , L1592 , NAT_1:13;
L1599: C410 = ( len D189 ) by L1598 , L1546 , XXREAL_0:1;
L1600: ( ( C409 + 1 ) - 1 ) <= ( 3 - 1 ) by L1599 , L1545 , L1592 , NAT_1:13;
L1601: C409 < ( 2 * 1 ) by L1600 , XXREAL_0:1;
L1602: ( C409 + 1 ) <= 2 by L1601 , NAT_1:13;
L1603: ( ( C409 + 1 ) - 1 ) <= ( 2 - 1 ) by L1602 , XREAL_1:13;
thus L1604: (C409 = 1 & C410 = ( len D189 )) by L1603 , L1546 , L1594 , L1598 , XXREAL_0:1;
end;
end;
thus L1606: (C409 = 1 & C410 = ( len D189 )) by L1548;
end;
thus L1607: thesis by L1542 , L495;
end;
L1608: (for B318 being _Graph holds (for B319 being (Walk of B318) holds ((for B320 , B321 being  odd (Element of ( NAT )) holds ((B320 <= ( len B319 ) & B321 <= ( len B319 ) & ( B319 . B320 ) = ( B319 . B321 )) implies B320 = B321)) implies B319 is  Path-like)))
proof
let C411 being _Graph;
let C412 being (Walk of C411);
assume L1609: (for B322 , B323 being  odd (Element of ( NAT )) holds ((B322 <= ( len C412 ) & B323 <= ( len C412 ) & ( C412 . B322 ) = ( C412 . B323 )) implies B322 = B323));
L1610:
now
let C413 , C414 being  even (Element of ( NAT ));
assume that
L1611: 1 <= C413
and
L1612: C413 < C414
and
L1613: C414 <= ( len C412 );
L1614: C413 <= ( len C412 ) by L1612 , L1613 , XXREAL_0:2;
L1615: C413 in ( dom C412 ) by L1614 , L1611 , FINSEQ_3:25;
L1616: 1 <= C414 by L1611 , L1612 , XXREAL_0:2;
L1617: C414 in ( dom C412 ) by L1616 , L1613 , FINSEQ_3:25;
L1618:
now
assume L1619: ( C412 . C413 ) = ( C412 . C414 );
consider C415 being  odd (Element of ( NAT )) such that L1620: C415 = ( C414 - 1 ) and L1621: ( C414 - 1 ) in ( dom C412 ) and L1622: ( C414 + 1 ) in ( dom C412 ) and L1623: ( C412 . C413 ) Joins ( C412 . C415 ) , ( C412 . ( C414 + 1 ) ) , C411 by L1619 , L1617 , L506;
L1624: C415 <= ( len C412 ) by L1620 , L1621 , FINSEQ_3:25;
consider C416 being  odd (Element of ( NAT )) such that L1625: C416 = ( C413 - 1 ) and L1626: ( C413 - 1 ) in ( dom C412 ) and L1627: ( C413 + 1 ) in ( dom C412 ) and L1628: ( C412 . C413 ) Joins ( C412 . C416 ) , ( C412 . ( C413 + 1 ) ) , C411 by L1615 , L506;
L1629: C416 <= ( len C412 ) by L1625 , L1626 , FINSEQ_3:25;
L1630: ( C414 + 1 ) <= ( len C412 ) by L1622 , FINSEQ_3:25;
L1631: ( C413 + 1 ) <= ( len C412 ) by L1627 , FINSEQ_3:25;
L1632:
now
per cases  by L1628 , L1623 , GLIB_000:15;
suppose L1633: (( C412 . C415 ) = ( C412 . C416 ) & ( C412 . ( C414 + 1 ) ) = ( C412 . ( C413 + 1 ) ));

L1634: C415 = C416 by L1633 , L1609 , L1629 , L1624;
thus L1635: contradiction by L1634 , L1612 , L1625 , L1620;
end;
suppose L1636: (( C412 . C415 ) = ( C412 . ( C413 + 1 ) ) & ( C412 . ( C414 + 1 ) ) = ( C412 . C416 ));

L1637: ( C414 + 1 ) = C416 by L1636 , L1609 , L1629 , L1630;
L1638: C415 = ( C413 + 1 ) by L1609 , L1631 , L1624 , L1636;
thus L1639: contradiction by L1638 , L1625 , L1620 , L1637;
end;
end;
thus L1641: contradiction by L1632;
end;
thus L1642: ( C412 . C413 ) <> ( C412 . C414 ) by L1618;
end;
L1643: C412 is  Trail-like by L1610 , L1279;
L1644:
now
let C417 , C418 being  odd (Element of ( NAT ));
assume that
L1645: C417 < C418
and
L1646: C418 <= ( len C412 );
assume L1647: ( C412 . C417 ) = ( C412 . C418 );
L1648: C417 <= ( len C412 ) by L1645 , L1646 , XXREAL_0:2;
thus L1649: (C417 = 1 & C418 = ( len C412 )) by L1648 , L1609 , L1645 , L1646 , L1647;
end;
thus L1650: thesis by L1644 , L1643 , L495;
end;
L1651: (for B324 being _Graph holds (for B325 being (Walk of B324) holds ((for B326 being  odd (Element of ( NAT )) holds (B326 <= ( len B325 ) implies ( B325 .rfind B326 ) = B326)) implies B325 is  Path-like)))
proof
let C419 being _Graph;
let C420 being (Walk of C419);
assume L1652: (for B327 being  odd (Element of ( NAT )) holds (B327 <= ( len C420 ) implies ( C420 .rfind B327 ) = B327));
L1653:
now
let C421 , C422 being  odd (Element of ( NAT ));
assume that
L1654: C421 <= ( len C420 )
and
L1655: C422 <= ( len C420 )
and
L1656: ( C420 . C421 ) = ( C420 . C422 );
L1657: ( C420 .rfind C422 ) = C422 by L1652 , L1655;
L1658: C421 <= C422 by L1657 , L1654 , L1655 , L1656 , L463;
L1659: ( C420 .rfind C421 ) = C421 by L1652 , L1654;
L1660: C422 <= C421 by L1659 , L1654 , L1655 , L1656 , L463;
thus L1661: C421 = C422 by L1660 , L1658 , XXREAL_0:1;
end;
thus L1662: thesis by L1653 , L1608;
end;
L1663: (for B328 being _Graph holds (for B329 being (Walk of B328) holds (for B330 , B331 being set holds ((B330 Joins ( B329 .last() ) , B331 , B328 & B329 is  Path-like & (not B331 in ( B329 .vertices() )) & (B329 is  trivial or B329 is  open)) implies ( B329 .addEdge B330 ) is  Path-like))))
proof
let C423 being _Graph;
let C424 being (Walk of C423);
let C425 , C426 being set;
assume that
L1664: C425 Joins ( C424 .last() ) , C426 , C423
and
L1665: C424 is  Path-like
and
L1666: (not C426 in ( C424 .vertices() ))
and
L1667: (C424 is  trivial or C424 is  open);
L1668: (for B332 being  odd (Element of ( NAT )) holds ((1 < B332 & B332 <= ( len C424 )) implies C426 <> ( C424 . B332 ))) by L1666 , L1088;
L1669: (not C425 in ( C424 .edges() )) by L1664 , L1666 , L1158;
thus L1670: thesis by L1669 , L1664 , L1665 , L1667 , L1668 , L1535;
end;
L1671: (for B333 being _Graph holds (for B334 being (Walk of B333) holds (( len B334 ) <= 3 implies B334 is  Path-like)))
proof
let C427 being _Graph;
let C428 being (Walk of C427);
assume L1672: ( len C428 ) <= 3;
L1673:
now
per cases ;
suppose L1674: ( len C428 ) = 1;

L1675: C428 is  trivial by L1674 , L1262;
L1676: (ex B335 being (Vertex of C427) st C428 = ( C427 .walkOf B335 )) by L1675 , L1271;
thus L1677: thesis by L1676 , L532;
end;
suppose L1678: ( len C428 ) <> 1;

L1679: 1 <= ( len C428 ) by ABIAN:12;
L1680: 1 < ( len C428 ) by L1679 , L1678 , XXREAL_0:1;
L1681: ( 1 + 2 ) <= ( len C428 ) by L1680 , L1 , JORDAN12:2;
L1682: ( len C428 ) = 3 by L1681 , L1672 , XXREAL_0:1;
L1683:
now
let C429 , C430 being  odd (Element of ( NAT ));
assume that
L1684: C429 < C430
and
L1685: C430 <= ( len C428 )
and
L1686: ( C428 . C429 ) = ( C428 . C430 );
L1687: 1 <= C429 by ABIAN:12;
L1688: C429 < ( ( 2 * 1 ) + 1 ) by L1682 , L1684 , L1685 , XXREAL_0:2;
L1689: ( ( C429 + 2 ) - 2 ) <= ( 3 - 2 ) by L1688 , L1;
thus L1690: C429 = 1 by L1689 , L1687 , XXREAL_0:1;
L1691: ( ( 2 * ( 0 ) ) + 1 ) < C430 by L1684 , L1687 , XXREAL_0:2;
L1692: ( 1 + 2 ) <= C430 by L1691 , L1;
thus L1693: C430 = ( len C428 ) by L1692 , L1682 , L1685 , XXREAL_0:1;
end;
L1694: C428 is  Trail-like by L1672 , L1410;
thus L1695: thesis by L1694 , L1683 , L495;
end;
end;
thus L1697: thesis by L1673;
end;
registration
let C431 being _Graph;
cluster  Path-like ->  Trail-like for (Walk of C431);
correctness by L495;
cluster  trivial ->  Path-like for (Walk of C431);
correctness
proof
let C432 being (Walk of C431);
assume L1698: C432 is  trivial;
L1699:
now
let C433 , C434 being  odd (Element of ( NAT ));
assume that
L1700: C433 < C434
and
L1701: C434 <= ( len C432 )
and
L1702: ( C432 . C433 ) = ( C432 . C434 );
L1703: 1 <= C433 by ABIAN:12;
L1704: 1 <= C434 by ABIAN:12;
L1705: C434 <= 1 by L1698 , L1701 , L1262;
thus L1706: (C433 = 1 & C434 = ( len C432 )) by L1705 , L1700 , L1703 , L1704 , XXREAL_0:1;
end;
L1707: ( len C432 ) = 1 by L1698 , L1262;
L1708: ( ( 2 * ( len ( C432 .edgeSeq() ) ) ) + 1 ) = ( ( 0 ) + 1 ) by L1707 , L314;
L1709: ( C432 .edgeSeq() ) = ( {} ) by L1708;
L1710: C432 is  Trail-like by L1709 , L492;
thus L1711: thesis by L1710 , L1699 , L495;
end;
cluster  trivial ->  vertex-distinct for (Walk of C431);
coherence
proof
let C435 being (Walk of C431);
assume L1712: C435 is  trivial;
L1713:
now
let C436 , C437 being  odd (Element of ( NAT ));
assume that
L1714: C436 <= ( len C435 )
and
L1715: C437 <= ( len C435 )
and
L1716: ( C435 . C436 ) = ( C435 . C437 );
L1717: 1 <= C436 by ABIAN:12;
L1718: C436 <= 1 by L1712 , L1714 , L1262;
L1719: C436 = 1 by L1718 , L1717 , XXREAL_0:1;
L1720: 1 <= C437 by ABIAN:12;
L1721: C437 <= 1 by L1712 , L1715 , L1262;
thus L1722: C436 = C437 by L1721 , L1720 , L1719 , XXREAL_0:1;
end;
thus L1723: thesis by L1713 , L497;
end;
cluster  vertex-distinct ->  Path-like for (Walk of C431);
coherence
proof
let C438 being (Walk of C431);
assume L1724: C438 is  vertex-distinct;
L1725: (for B336 , B337 being  odd (Element of ( NAT )) holds ((B336 <= ( len C438 ) & B337 <= ( len C438 ) & ( C438 . B336 ) = ( C438 . B337 )) implies B336 = B337)) by L1724 , L497;
thus L1726: thesis by L1725 , L1608;
end;
cluster  Circuit-like ->  closed  Trail-like non  trivial for (Walk of C431);
correctness by L499;
cluster  Cycle-like ->  closed  Path-like non  trivial for (Walk of C431);
correctness by L500;
end;
registration
let C439 being _Graph;
cluster  closed  directed  trivial for (Walk of C439);
existence
proof
set D190 = the (Vertex of C439);
take ( C439 .walkOf D190 );
thus L1728: thesis by L532;
end;
end;
registration
let C440 being _Graph;
cluster  vertex-distinct for (Walk of C440);
existence
proof
set D191 = the  trivial (Walk of C440);
take D191;
thus L1730: thesis;
end;
end;
definition
let C441 being _Graph;
mode Trail of C441
 is  Trail-like (Walk of C441);
mode Path of C441
 is  Path-like (Walk of C441);
end;
definition
let C442 being _Graph;
mode DWalk of C442
 is  directed (Walk of C442);
mode DTrail of C442
 is  directed (Trail of C442);
mode DPath of C442
 is  directed (Path of C442);
end;
registration
let C443 being _Graph;
let C444 being (Vertex of C443);
cluster ( C443 .walkOf C444 ) ->  closed  directed  trivial;
coherence by L532;
end;
registration
let C445 being _Graph;
let C446 , C447 , C448 being set;
cluster ( C445 .walkOf (C446 , C447 , C448) ) ->  Path-like;
coherence
proof
set D192 = ( C445 .walkOf (C446 , C447 , C448) );
L1735:
now
per cases ;
suppose L1736: C447 Joins C446 , C448 , C445;

thus L1737: thesis by L1736 , L1434;
end;
suppose L1738: (not C447 Joins C446 , C448 , C445);

L1739: D192 = ( C445 .walkOf ( choose ( the_Vertices_of C445 ) ) ) by L1738 , L76;
thus L1740: thesis by L1739;
end;
end;
thus L1742: thesis by L1735;
end;
end;
registration
let C449 being _Graph;
let C450 , C451 being set;
cluster ( C449 .walkOf (C450 , C451 , C450) ) ->  closed;
coherence
proof
set D193 = ( C449 .walkOf (C450 , C451 , C450) );
L1744:
now
per cases ;
suppose L1745: C451 Joins C450 , C450 , C449;

L1746: ( D193 .last() ) = C450 by L1745 , L559;
L1747: ( D193 .first() ) = C450 by L1745 , L559;
thus L1748: thesis by L1747 , L1746 , L489;
end;
suppose L1749: (not C451 Joins C450 , C450 , C449);

L1750: D193 = ( C449 .walkOf ( choose ( the_Vertices_of C449 ) ) ) by L1749 , L76;
thus L1751: thesis by L1750;
end;
end;
thus L1753: thesis by L1744;
end;
end;
registration
let C452 being _Graph;
let C453 being  closed (Walk of C452);
cluster ( C453 .reverse() ) ->  closed;
coherence
proof
L1755: (C453 is  closed iff ( C453 .first() ) = ( C453 .last() )) by L489;
L1756: (C453 is  closed iff ( ( C453 .reverse() ) .last() ) = ( C453 .last() )) by L1755 , L566;
L1757: (C453 is  closed iff ( ( C453 .reverse() ) .last() ) = ( ( C453 .reverse() ) .first() )) by L1756 , L566;
thus L1758: thesis by L1757 , L489;
end;
end;
registration
let C454 being _Graph;
let C455 being  trivial (Walk of C454);
cluster ( C455 .reverse() ) ->  trivial;
coherence
proof
L1760: ( len C455 ) = 1 by L1262;
L1761: ( len ( C455 .reverse() ) ) = 1 by L1760 , FINSEQ_5:def 3;
thus L1762: thesis by L1761 , L1262;
end;
end;
registration
let C456 being _Graph;
let C457 being (Trail of C456);
cluster ( C457 .reverse() ) ->  Trail-like;
coherence by L1327;
end;
registration
let C458 being _Graph;
let C459 being (Path of C458);
cluster ( C459 .reverse() ) ->  Path-like;
coherence by L1470;
end;
registration
let C460 being _Graph;
let C461 , C462 being  closed (Walk of C460);
cluster ( C461 .append C462 ) ->  closed;
coherence
proof
set D194 = ( C461 .append C462 );
L1766:
now
per cases ;
suppose L1767: ( C461 .last() ) = ( C462 .first() );

L1768: ( C461 .last() ) = ( C462 .last() ) by L1767 , L489;
L1769: ( C461 .first() ) = ( C462 .last() ) by L1768 , L489
.= ( D194 .last() ) by L1767 , L590;
L1770: ( D194 .first() ) = ( D194 .last() ) by L1769 , L1767 , L590;
thus L1771: thesis by L1770 , L489;
end;
suppose L1772: ( C461 .last() ) <> ( C462 .first() );

thus L1773: thesis by L1772 , L156;
end;
end;
thus L1775: thesis by L1766;
end;
end;
registration
let C463 being _Graph;
let C464 , C465 being (DWalk of C463);
cluster ( C464 .append C465 ) ->  directed;
coherence
proof
set D195 = ( C464 .append C465 );
L1777:
now
per cases ;
suppose L1778: ( C464 .last() ) = ( C465 .first() );

L1779:
now
let C466 being  odd (Element of ( NAT ));
assume L1780: C466 < ( len D195 );
L1781: 1 <= C466 by ABIAN:12;
L1782: C466 in ( dom D195 ) by L1781 , L1780 , FINSEQ_3:25;
L1783:
now
per cases  by L1782 , L643;
suppose L1784: C466 in ( dom C464 );

L1785: C466 <= ( len C464 ) by L1784 , FINSEQ_3:25;
L1786: ( D195 . C466 ) = ( C464 . C466 ) by L1784 , L606;
L1787:
now
per cases  by L1785 , XXREAL_0:1;
suppose L1788: C466 < ( len C464 );

L1789: ( C466 + 2 ) in ( dom C464 ) by L1788 , L524;
L1790: ( D195 . ( C466 + 2 ) ) = ( C464 . ( C466 + 2 ) ) by L1789 , L606;
L1791: ( C466 + 1 ) in ( dom C464 ) by L1788 , L524;
L1792: ( D195 . ( C466 + 1 ) ) = ( C464 . ( C466 + 1 ) ) by L1791 , L606;
thus L1793: ( D195 . ( C466 + 1 ) ) DJoins ( D195 . C466 ) , ( D195 . ( C466 + 2 ) ) , C463 by L1792 , L1786 , L1788 , L1790 , L1178;
end;
suppose L1794: C466 = ( len C464 );

L1795: ( C466 + 1 ) < ( ( len D195 ) + 1 ) by L1780 , XREAL_1:8;
L1796: ( 1 + C466 ) < ( ( len C465 ) + C466 ) by L1795 , L1778 , L1794 , L577;
L1797: 1 < ( len C465 ) by L1796 , XREAL_1:6;
L1798: ( C465 . ( ( ( 2 * ( 0 ) ) + 1 ) + 1 ) ) DJoins ( C465 . ( ( 2 * ( 0 ) ) + 1 ) ) , ( C465 . ( ( ( 2 * ( 0 ) ) + 1 ) + 2 ) ) , C463 by L1797 , L1178;
L1799: C466 = ( ( len C464 ) + ( 0 ) ) by L1794;
L1800: ( 0 ) < ( len C465 );
L1801: ( 1 + 1 ) <= ( len C465 ) by L1797 , NAT_1:13;
L1802: ( 2 * 1 ) < ( len C465 ) by L1801 , XXREAL_0:1;
L1803: ( D195 . ( C466 + 2 ) ) = ( C465 . ( 2 + 1 ) ) by L1802 , L1778 , L1794 , L622;
L1804: ( D195 . ( C466 + 1 ) ) = ( C465 . ( 1 + 1 ) ) by L1778 , L1794 , L1797 , L622;
thus L1805: ( D195 . ( C466 + 1 ) ) DJoins ( D195 . C466 ) , ( D195 . ( C466 + 2 ) ) , C463 by L1804 , L1778 , L1800 , L1799 , L1803 , L1798 , L622;
end;
end;
thus L1807: ( D195 . ( C466 + 1 ) ) DJoins ( D195 . C466 ) , ( D195 . ( C466 + 2 ) ) , C463 by L1787;
end;
suppose L1808: (ex B338 being (Element of ( NAT )) st (B338 < ( len C465 ) & C466 = ( ( len C464 ) + B338 )));

consider C467 being (Element of ( NAT )) such that L1809: C467 < ( len C465 ) and L1810: C466 = ( ( len C464 ) + C467 ) by L1808;
reconsider D196 = C467 as  even (Element of ( NAT )) by L1810;
L1811: ( D195 . C466 ) = ( C465 . ( D196 + 1 ) ) by L1778 , L1809 , L1810 , L622;
L1812: ( C466 + 1 ) < ( ( len D195 ) + 1 ) by L1780 , XREAL_1:8;
L1813: ( 1 + ( D196 + ( len C464 ) ) ) < ( ( len C465 ) + ( len C464 ) ) by L1812 , L1778 , L1810 , L577;
L1814: ( ( ( D196 + 1 ) + ( len C464 ) ) - ( len C464 ) ) < ( ( ( len C465 ) + ( len C464 ) ) - ( len C464 ) ) by L1813 , XREAL_1:14;
L1815: ( ( D196 + 1 ) + 1 ) <= ( len C465 ) by L1814 , NAT_1:13;
L1816: ( ( D196 + 1 ) + 1 ) < ( len C465 ) by L1815 , XXREAL_0:1;
L1817: ( ( C466 + 1 ) + 1 ) = ( ( len C464 ) + ( ( D196 + 1 ) + 1 ) ) by L1810;
L1818: ( C465 . ( ( D196 + 1 ) + ( 1 + 1 ) ) ) = ( C465 . ( ( ( D196 + 1 ) + 1 ) + 1 ) )
.= ( D195 . ( C466 + ( 1 + 1 ) ) ) by L1778 , L1816 , L1817 , L622;
L1819: ( D195 . ( C466 + 1 ) ) = ( C465 . ( ( D196 + 1 ) + 1 ) ) by L1778 , L1810 , L1814 , L622;
thus L1820: ( D195 . ( C466 + 1 ) ) DJoins ( D195 . C466 ) , ( D195 . ( C466 + 2 ) ) , C463 by L1819 , L1811 , L1814 , L1818 , L1178;
end;
end;
thus L1822: ( D195 . ( C466 + 1 ) ) DJoins ( D195 . C466 ) , ( D195 . ( C466 + 2 ) ) , C463 by L1783;
end;
thus L1823: thesis by L1779 , L1178;
end;
suppose L1824: ( C464 .last() ) <> ( C465 .first() );

thus L1825: thesis by L1824 , L156;
end;
end;
thus L1827: thesis by L1777;
end;
end;
registration
let C468 being _Graph;
let C469 , C470 being  trivial (Walk of C468);
cluster ( C469 .append C470 ) ->  trivial;
coherence
proof
set D197 = ( C469 .append C470 );
L1829:
now
per cases ;
suppose L1830: ( C469 .last() ) = ( C470 .first() );

L1831: ( ( len D197 ) + 1 ) = ( ( len C469 ) + ( len C470 ) ) by L1830 , L577
.= ( ( len C469 ) + 1 ) by L1262
.= ( 1 + 1 ) by L1262;
thus L1832: thesis by L1831 , L1262;
end;
suppose L1833: ( C469 .last() ) <> ( C470 .first() );

thus L1834: thesis by L1833 , L156;
end;
end;
thus L1836: thesis by L1829;
end;
end;
registration
let C471 being _Graph;
let C472 being (DWalk of C471);
let C473 , C474 being (Element of ( NAT ));
cluster ( C472 .cut (C473 , C474) ) ->  directed;
coherence by L1229;
end;
registration
let C475 being _Graph;
let C476 being  trivial (Walk of C475);
let C477 , C478 being (Element of ( NAT ));
cluster ( C476 .cut (C477 , C478) ) ->  trivial;
coherence
proof
set D198 = ( C476 .cut (C477 , C478) );
L1839:
now
per cases ;
suppose L1840: (C477 is  odd & C478 is  odd & C477 <= C478 & C478 <= ( len C476 ));

L1841: 1 <= C478 by L1840 , ABIAN:12;
L1842: C478 <= 1 by L1840 , L1262;
L1843: C478 = 1 by L1842 , L1841 , XXREAL_0:1;
L1844: 1 <= C477 by L1840 , ABIAN:12;
L1845: ( ( len D198 ) + C477 ) = ( C478 + 1 ) by L1840 , L664;
L1846: ( ( len D198 ) + 1 ) = ( 1 + 1 ) by L1845 , L1840 , L1844 , L1843 , XXREAL_0:1;
thus L1847: thesis by L1846 , L1262;
end;
suppose L1848: (not (C477 is  odd & C478 is  odd & C477 <= C478 & C478 <= ( len C476 )));

thus L1849: thesis by L1848 , L226;
end;
end;
thus L1851: thesis by L1839;
end;
end;
registration
let C479 being _Graph;
let C480 being (Trail of C479);
let C481 , C482 being (Element of ( NAT ));
cluster ( C480 .cut (C481 , C482) ) ->  Trail-like;
coherence by L1352;
end;
registration
let C483 being _Graph;
let C484 being (Path of C483);
let C485 , C486 being (Element of ( NAT ));
cluster ( C484 .cut (C485 , C486) ) ->  Path-like;
coherence by L1500;
end;
registration
let C487 being _Graph;
let C488 being  vertex-distinct (Walk of C487);
let C489 , C490 being (Element of ( NAT ));
cluster ( C488 .cut (C489 , C490) ) ->  vertex-distinct;
coherence
proof
set D199 = ( C488 .cut (C489 , C490) );
L1855:
now
per cases ;
suppose L1856: (C489 is  odd & C490 is  odd & C489 <= C490 & C490 <= ( len C488 ));

reconsider D200 = C489 as  odd (Element of ( NAT )) by L1856;
L1857:
now
let C491 , C492 being  odd (Element of ( NAT ));
assume that
L1858: C491 <= ( len D199 )
and
L1859: C492 <= ( len D199 )
and
L1860: ( D199 . C491 ) = ( D199 . C492 );
reconsider D201 = ( C491 - 1 ) , D202 = ( C492 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L1861: D202 < ( ( len D199 ) - ( 0 ) ) by L1859 , XREAL_1:15;
L1862: ( D199 . ( D202 + 1 ) ) = ( C488 . ( C489 + D202 ) ) by L1861 , L1856 , L664;
L1863: D201 < ( ( len D199 ) - ( 0 ) ) by L1858 , XREAL_1:15;
L1864: ( C489 + D201 ) in ( dom C488 ) by L1863 , L1856 , L664;
L1865: ( D200 + D201 ) <= ( len C488 ) by L1864 , FINSEQ_3:25;
L1866: ( C489 + D202 ) in ( dom C488 ) by L1856 , L1861 , L664;
L1867: ( D200 + D202 ) <= ( len C488 ) by L1866 , FINSEQ_3:25;
L1868: ( D199 . ( D201 + 1 ) ) = ( C488 . ( C489 + D201 ) ) by L1856 , L1863 , L664;
L1869: ( D201 + D200 ) = ( D202 + D200 ) by L1868 , L1860 , L1862 , L1865 , L1867 , L497;
thus L1870: C491 = C492 by L1869;
end;
thus L1871: thesis by L1857 , L497;
end;
suppose L1872: (not (C489 is  odd & C490 is  odd & C489 <= C490 & C490 <= ( len C488 )));

thus L1873: thesis by L1872 , L226;
end;
end;
thus L1875: thesis by L1855;
end;
end;
registration
let C493 being _Graph;
let C494 being  closed (Walk of C493);
let C495 , C496 being (Element of ( NAT ));
cluster ( C494 .remove (C495 , C496) ) ->  closed;
coherence
proof
thus L1877: ( ( C494 .remove (C495 , C496) ) .first() ) = ( C494 .first() ) by L932
.= ( C494 .last() ) by L489
.= ( ( C494 .remove (C495 , C496) ) .last() ) by L932;
end;
end;
registration
let C497 being _Graph;
let C498 being (DWalk of C497);
let C499 , C500 being (Element of ( NAT ));
cluster ( C498 .remove (C499 , C500) ) ->  directed;
coherence
proof
L1879:
now
per cases ;
suppose L1880: (C499 is  odd & C500 is  odd & C499 <= C500 & C500 <= ( len C498 ) & ( C498 . C499 ) = ( C498 . C500 ));

L1881: ( C498 .remove (C499 , C500) ) = ( ( C498 .cut (1 , C499) ) .append ( C498 .cut (C500 , ( len C498 )) ) ) by L1880 , L259;
thus L1882: thesis by L1881;
end;
suppose L1883: (not (C499 is  odd & C500 is  odd & C499 <= C500 & C500 <= ( len C498 ) & ( C498 . C499 ) = ( C498 . C500 )));

thus L1884: thesis by L1883 , L259;
end;
end;
thus L1886: thesis by L1879;
end;
end;
registration
let C501 being _Graph;
let C502 being  trivial (Walk of C501);
let C503 , C504 being (Element of ( NAT ));
cluster ( C502 .remove (C503 , C504) ) ->  trivial;
coherence
proof
L1888:
now
per cases ;
suppose L1889: (C503 is  odd & C504 is  odd & C503 <= C504 & C504 <= ( len C502 ) & ( C502 . C503 ) = ( C502 . C504 ));

L1890: ( C502 .remove (C503 , C504) ) = ( ( C502 .cut (1 , C503) ) .append ( C502 .cut (C504 , ( len C502 )) ) ) by L1889 , L259;
thus L1891: thesis by L1890;
end;
suppose L1892: (not (C503 is  odd & C504 is  odd & C503 <= C504 & C504 <= ( len C502 ) & ( C502 . C503 ) = ( C502 . C504 )));

thus L1893: thesis by L1892 , L259;
end;
end;
thus L1895: thesis by L1888;
end;
end;
registration
let C505 being _Graph;
let C506 being (Trail of C505);
let C507 , C508 being (Element of ( NAT ));
cluster ( C506 .remove (C507 , C508) ) ->  Trail-like;
coherence
proof
set D203 = ( C506 .remove (C507 , C508) );
L1897: ( len D203 ) <= ( len C506 ) by L832;
L1898:
now
per cases ;
suppose L1899: (C507 is  odd & C508 is  odd & C507 <= C508 & C508 <= ( len C506 ) & ( C506 . C507 ) = ( C506 . C508 ));

reconsider D204 = C507 , D205 = C508 as  odd (Element of ( NAT )) by L1899;
L1900:
now
given C509 , C510 being  even (Element of ( NAT )) such that
L1901: 1 <= C509
and
L1902: C509 < C510
and
L1903: C510 <= ( len D203 )
and
L1904: ( D203 . C509 ) = ( D203 . C510 );

L1905: 1 <= C510 by L1901 , L1902 , XXREAL_0:2;
L1906: C510 in ( dom D203 ) by L1905 , L1903 , FINSEQ_3:25;
L1907: C509 <= ( len D203 ) by L1902 , L1903 , XXREAL_0:2;
L1908: C509 in ( dom D203 ) by L1907 , L1901 , FINSEQ_3:25;
L1909:
now
per cases  by L1899 , L1908 , L936;
suppose L1910: C509 in ( Seg C507 );

L1911: ( D203 . C509 ) = ( C506 . C509 ) by L1910 , L1899 , L858;
L1912:
now
per cases  by L1899 , L1906 , L936;
suppose L1913: C510 in ( Seg C507 );

L1914: C510 <= ( len C506 ) by L1897 , L1903 , XXREAL_0:2;
L1915: ( D203 . C510 ) = ( C506 . C510 ) by L1899 , L1913 , L858;
thus L1916: contradiction by L1915 , L1901 , L1902 , L1904 , L1911 , L1914 , L1279;
end;
suppose L1917: (C507 <= C510 & C510 <= ( len D203 ));

reconsider D206 = ( ( C510 - D204 ) + D205 ) as  even (Element of ( NAT )) by L1917 , L1899 , L869;
L1918: D206 <= ( len C506 ) by L1899 , L1917 , L869;
L1919: ( D203 . C510 ) = ( C506 . D206 ) by L1899 , L1917 , L869;
L1920:
now
per cases ;
suppose L1921: C509 < D206;

thus L1922: contradiction by L1921 , L1901 , L1904 , L1911 , L1919 , L1918 , L1279;
end;
suppose L1923: D206 <= C509;

L1924: ( C508 - C507 ) >= ( C507 - C507 ) by L1899 , XREAL_1:13;
L1925: ( C509 - C510 ) < ( C510 - C510 ) by L1902 , XREAL_1:14;
L1926: ( ( ( C508 - C507 ) + C510 ) - C510 ) <= ( C509 - C510 ) by L1923 , XREAL_1:13;
L1927: ( 0 ) <= ( C509 - C510 ) by L1926 , L1924;
thus L1928: contradiction by L1927 , L1925;
end;
end;
thus L1930: contradiction by L1920;
end;
end;
thus L1932: contradiction by L1912;
end;
suppose L1933: (C507 <= C509 & C509 <= ( len D203 ));

reconsider D207 = ( ( C509 - D204 ) + D205 ) as  even (Element of ( NAT )) by L1933 , L1899 , L869;
reconsider D208 = ( D205 - D204 ) as  even (Element of ( NAT )) by L1899 , INT_1:5;
L1934: ( D203 . C509 ) = ( C506 . D207 ) by L1899 , L1933 , L869;
L1935:
now
per cases  by L1899 , L1906 , L936;
suppose L1936: C510 in ( Seg C507 );

L1937: C510 <= C507 by L1936 , FINSEQ_1:1;
thus L1938: contradiction by L1937 , L1902 , L1933 , XXREAL_0:2;
end;
suppose L1939: (C507 <= C510 & C510 <= ( len D203 ));

reconsider D209 = ( ( C510 - D204 ) + D205 ) as  even (Element of ( NAT )) by L1939 , L1899 , L869;
L1940: D209 <= ( len C506 ) by L1899 , L1939 , L869;
L1941: ( D203 . C510 ) = ( C506 . D209 ) by L1899 , L1939 , L869;
L1942:
now
per cases ;
suppose L1943: D207 < D209;

L1944: 1 <= D204 by ABIAN:12;
L1945: 1 <= C509 by L1944 , L1933 , XXREAL_0:2;
L1946: 1 <= ( C509 + D208 ) by L1945 , NAT_1:12;
thus L1947: contradiction by L1946 , L1904 , L1934 , L1941 , L1940 , L1943 , L1279;
end;
suppose L1948: D209 <= D207;

L1949: ( C510 + D208 ) <= ( C509 + D208 ) by L1948;
thus L1950: contradiction by L1949 , L1902 , XREAL_1:6;
end;
end;
thus L1952: contradiction by L1942;
end;
end;
thus L1954: contradiction by L1935;
end;
end;
thus L1956: contradiction by L1909;
end;
thus L1957: thesis by L1900 , L1279;
end;
suppose L1958: (not (C507 is  odd & C508 is  odd & C507 <= C508 & C508 <= ( len C506 ) & ( C506 . C507 ) = ( C506 . C508 )));

thus L1959: thesis by L1958 , L259;
end;
end;
thus L1961: thesis by L1898;
end;
end;
registration
let C511 being _Graph;
let C512 being (Path of C511);
let C513 , C514 being (Element of ( NAT ));
cluster ( C512 .remove (C513 , C514) ) ->  Path-like;
coherence
proof
set D210 = ( C512 .remove (C513 , C514) );
L1963: ( len D210 ) <= ( len C512 ) by L832;
L1964:
now
per cases ;
suppose L1965: (C513 is  odd & C514 is  odd & C513 <= C514 & C514 <= ( len C512 ) & ( C512 . C513 ) = ( C512 . C514 ));

reconsider D211 = C513 , D212 = C514 as  odd (Element of ( NAT )) by L1965;
L1966:
now
let C515 , C516 being  odd (Element of ( NAT ));
assume that
L1967: C515 < C516
and
L1968: C516 <= ( len D210 )
and
L1969: ( D210 . C515 ) = ( D210 . C516 );
L1970: 1 <= C515 by ABIAN:12;
L1971: C515 <= ( len D210 ) by L1967 , L1968 , XXREAL_0:2;
L1972: C515 in ( dom D210 ) by L1971 , L1970 , FINSEQ_3:25;
L1973: 1 <= C516 by ABIAN:12;
L1974: C516 in ( dom D210 ) by L1973 , L1968 , FINSEQ_3:25;
L1975: C516 <= ( len C512 ) by L1963 , L1968 , XXREAL_0:2;
L1976:
now
per cases  by L1965 , L1972 , L936;
suppose L1977: C515 in ( Seg C513 );

L1978: ( D210 . C515 ) = ( C512 . C515 ) by L1977 , L1965 , L858;
L1979:
now
per cases  by L1965 , L1974 , L936;
suppose L1980: C516 in ( Seg C513 );

L1981: ( D210 . C516 ) = ( C512 . C516 ) by L1980 , L1965 , L858;
L1982: C516 = ( len C512 ) by L1981 , L1967 , L1969 , L1975 , L1978 , L495;
thus L1983: (C515 = 1 & C516 = ( len D210 )) by L1982 , L1963 , L1967 , L1968 , L1969 , L1978 , L1981 , L495 , XXREAL_0:1;
end;
suppose L1984: (C513 <= C516 & C516 <= ( len D210 ));

L1985: ( ( C516 - C513 ) + C514 ) <= ( len C512 ) by L1984 , L1965 , L869;
L1986: ( D210 . C516 ) = ( C512 . ( ( C516 - C513 ) + C514 ) ) by L1965 , L1984 , L869;
reconsider D213 = ( ( C516 - D211 ) + D212 ) as  odd (Element of ( NAT )) by L1965 , L1984 , L869;
L1987: ( ( C516 - C513 ) + C514 ) >= ( ( C516 - C513 ) + C513 ) by L1965 , XREAL_1:7;
L1988: C515 < D213 by L1987 , L1967 , XXREAL_0:2;
L1989: D213 <= ( len C512 ) by L1965 , L1984 , L869;
L1990: D213 = ( len C512 ) by L1989 , L1969 , L1978 , L1986 , L1988 , L495;
L1991: ( ( len D210 ) + C514 ) = ( ( ( C516 - C513 ) + C514 ) + C513 ) by L1990 , L1965 , L804
.= ( C516 + C514 );
thus L1992: (C515 = 1 & C516 = ( len D210 )) by L1991 , L1969 , L1978 , L1986 , L1985 , L1988 , L495;
end;
end;
thus L1994: (C515 = 1 & C516 = ( len D210 )) by L1979;
end;
suppose L1995: (C513 <= C515 & C515 <= ( len D210 ));

reconsider D214 = ( ( C515 - D211 ) + D212 ) as  odd (Element of ( NAT )) by L1995 , L1965 , L869;
L1996: ( D210 . C515 ) = ( C512 . ( ( C515 - C513 ) + C514 ) ) by L1965 , L1995 , L869;
L1997:
now
per cases  by L1965 , L1974 , L936;
suppose L1998: C516 in ( Seg C513 );

L1999: C516 <= C513 by L1998 , FINSEQ_1:1;
thus L2000: (C515 = 1 & C516 = ( len D210 )) by L1999 , L1967 , L1995 , XXREAL_0:2;
end;
suppose L2001: (C513 <= C516 & C516 <= ( len D210 ));

reconsider D215 = ( ( C516 - D211 ) + D212 ) as  odd (Element of ( NAT )) by L2001 , L1965 , L869;
L2002: ( C515 + ( C514 - C513 ) ) < ( C516 + ( C514 - C513 ) ) by L1967 , XREAL_1:8;
L2003: D214 < D215 by L2002;
reconsider D216 = ( C515 - C513 ) as (Element of ( NAT )) by L1995 , INT_1:5;
L2004: 1 <= D212 by ABIAN:12;
L2005: 1 <= D211 by ABIAN:12;
L2006: ( ( C516 - C513 ) + C514 ) <= ( len C512 ) by L1965 , L2001 , L869;
L2007: ( D210 . C516 ) = ( C512 . ( ( C516 - C513 ) + C514 ) ) by L1965 , L2001 , L869;
L2008: D215 = ( len C512 ) by L2007 , L1969 , L1996 , L2006 , L2003 , L495;
L2009: ( ( len D210 ) + C514 ) = ( ( ( C516 - C513 ) + C514 ) + C513 ) by L2008 , L1965 , L804
.= ( C516 + C514 );
L2010: D214 = 1 by L1969 , L1996 , L2007 , L2006 , L2003 , L495;
L2011: ( D214 - D212 ) <= ( 1 - 1 ) by L2010 , L2004 , XREAL_1:13;
L2012: D216 = ( 0 ) by L2011;
L2013: C513 <= 1 by L2012 , L1965 , L1969 , L1996 , L2007 , L2006 , L2003 , L495;
thus L2014: (C515 = 1 & C516 = ( len D210 )) by L2013 , L2009 , L2012 , L2005 , XXREAL_0:1;
end;
end;
thus L2016: (C515 = 1 & C516 = ( len D210 )) by L1997;
end;
end;
thus L2018: (C515 = 1 & C516 = ( len D210 )) by L1976;
end;
thus L2019: thesis by L1966 , L495;
end;
suppose L2020: (not (C513 is  odd & C514 is  odd & C513 <= C514 & C514 <= ( len C512 ) & ( C512 . C513 ) = ( C512 . C514 )));

thus L2021: thesis by L2020 , L259;
end;
end;
thus L2023: thesis by L1964;
end;
end;
definition
let C517 being _Graph;
let C518 being (Walk of C517);
mode Subwalk of C518
 -> (Walk of C517)
means :L2025: (it is_Walk_from ( C518 .first() ) , ( C518 .last() ) & (ex B339 being (Subset of ( C518 .edgeSeq() )) st ( it .edgeSeq() ) = ( Seq B339 )));
existence
proof
reconsider D217 = ( C518 .edgeSeq() ) as (Subset of ( C518 .edgeSeq() )) by GRAPH_2:26;
take C518;
thus L2026: C518 is_Walk_from ( C518 .first() ) , ( C518 .last() ) by L487;
take D217;
thus L2027: thesis by FINSEQ_3:116;
end;
end;
L2029: (for B340 being _Graph holds (for B341 being (Walk of B340) holds B341 is (Subwalk of B341)))
proof
let C519 being _Graph;
let C520 being (Walk of C519);
reconsider D218 = ( C520 .edgeSeq() ) as (Subset of ( C520 .edgeSeq() )) by GRAPH_2:26;
L2030: ( C520 .edgeSeq() ) = ( Seq D218 ) by FINSEQ_3:116;
L2031: C520 is_Walk_from ( C520 .first() ) , ( C520 .last() ) by L487;
thus L2032: thesis by L2031 , L2030 , L2025;
end;
L2033: (for B342 being _Graph holds (for B343 being (Walk of B342) holds (for B344 being (Subwalk of B343) holds (for B345 being (Subwalk of B344) holds B345 is (Subwalk of B343)))))
proof
let C521 being _Graph;
let C522 being (Walk of C521);
let C523 being (Subwalk of C522);
let C524 being (Subwalk of C523);
set D219 = ( C522 .edgeSeq() );
set D220 = ( C523 .edgeSeq() );
set D221 = ( C524 .edgeSeq() );
consider C525 being (Subset of D220) such that L2034: D221 = ( Seq C525 ) by L2025;
consider C526 being (Subset of D219) such that L2035: D220 = ( Seq C526 ) by L2025;
set D222 = ( C526 | ( rng ( ( Sgm ( dom C526 ) ) | ( dom C525 ) ) ) );
reconsider D223 = D222 as (Subset of D219) by GRAPH_2:27;
L2036: D221 = ( Seq D223 ) by L2034 , L2035 , GRAPH_2:28;
L2037: C523 is_Walk_from ( C522 .first() ) , ( C522 .last() ) by L2025;
L2038: ( C523 .last() ) = ( C522 .last() ) by L2037 , L487;
L2039: ( C523 .first() ) = ( C522 .first() ) by L2037 , L487;
thus L2040: thesis by L2039 , L2038 , L2036 , L2025;
end;
L2041: (for B346 being _Graph holds (for B347 , B348 being (Walk of B346) holds (B347 is (Subwalk of B348) implies ( len B347 ) <= ( len B348 ))))
proof
let C527 being _Graph;
let C528 , C529 being (Walk of C527);
assume L2042: C528 is (Subwalk of C529);
L2043: (ex B349 being (Subset of ( C529 .edgeSeq() )) st ( C528 .edgeSeq() ) = ( Seq B349 )) by L2042 , L2025;
L2044: ( 2 * ( len ( C528 .edgeSeq() ) ) ) <= ( 2 * ( len ( C529 .edgeSeq() ) ) ) by L2043 , L11 , XREAL_1:64;
L2045: ( ( 2 * ( len ( C528 .edgeSeq() ) ) ) + 1 ) <= ( ( 2 * ( len ( C529 .edgeSeq() ) ) ) + 1 ) by L2044 , XREAL_1:7;
L2046: ( len C528 ) <= ( ( 2 * ( len ( C529 .edgeSeq() ) ) ) + 1 ) by L2045 , L314;
thus L2047: thesis by L2046 , L314;
end;
definition
let C530 being _Graph;
let C531 being (Walk of C530);
let C532 , C533 being (Element of ( NAT ));
redefine func C531 .remove (C532 , C533) -> (Subwalk of C531);

coherence
proof
set D224 = ( C531 .remove (C532 , C533) );
set D225 = ( D224 .edgeSeq() );
L2048:
now
per cases ;
suppose L2049: (C532 is  odd & C533 is  odd & C532 <= C533 & C533 <= ( len C531 ) & ( C531 . C532 ) = ( C531 . C533 ));

reconsider D226 = C532 , D227 = C533 as  odd (Element of ( NAT )) by L2049;
reconsider D228 = ( ( len C531 ) - D227 ) as  even (Element of ( NAT )) by L2049 , INT_1:5;
L2050: ( Seg ( len D225 ) ) = ( dom D225 ) by FINSEQ_1:def 3;
reconsider D229 = ( ( len C531 ) - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
reconsider D230 = ( D227 + 1 ) as  even (Element of ( NAT ));
reconsider D231 = ( D226 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
set D232 = { B350 where B350 is (Element of ( NAT )) : (1 <= B350 & B350 <= ( D231 div 2 )) };
set D233 = { B351 where B351 is (Element of ( NAT )) : (( D230 div 2 ) <= B351 & B351 <= ( D229 div 2 )) };
set D234 = ( D232 \/ D233 );
set D235 = ( ( C531 .edgeSeq() ) | D234 );
L2051: 2 divides D231 by PEPIN:22;
L2052: D231 = ( 2 * ( D231 div 2 ) ) by L2051 , NAT_D:3;
L2053: 2 divides D230 by PEPIN:22;
L2054: D230 = ( 2 * ( D230 div 2 ) ) by L2053 , NAT_D:3;
L2055:
now
assume L2056: ( D230 div 2 ) < 1;
L2057: ( 2 * ( D230 div 2 ) ) < ( 2 * 1 ) by L2056 , XREAL_1:68;
L2058: ( ( C533 + 1 ) - 1 ) < ( 2 - 1 ) by L2057 , L2054 , XREAL_1:14;
L2059: D227 < 1 by L2058;
thus L2060: contradiction by L2059 , ABIAN:12;
end;
reconsider D236 = ( ( D230 div 2 ) - 1 ) as (Element of ( NAT )) by L2055 , INT_1:5;
L2061: 2 divides D229 by PEPIN:22;
L2062: D229 = ( 2 * ( D229 div 2 ) ) by L2061 , NAT_D:3;
L2063:
now
let C534 being set;
assume L2064: C534 in D234;
L2065:
now
per cases  by L2064 , XBOOLE_0:def 3;
suppose L2066: C534 in D232;

consider C535 being (Element of ( NAT )) such that L2067: C535 = C534 and L2068: 1 <= C535 and L2069: C535 <= ( D231 div 2 ) by L2066;
L2070: ( 2 * C535 ) <= D231 by L2052 , L2069 , XREAL_1:64;
L2071: ( 2 * C535 ) <= ( D231 + 1 ) by L2070 , NAT_1:12;
L2072: ( 2 * C535 ) <= C533 by L2071 , L2049 , XXREAL_0:2;
L2073: ( 2 * C535 ) <= ( len C531 ) by L2072 , L2049 , XXREAL_0:2;
L2074: 1 <= ( C535 + C535 ) by L2068 , NAT_1:12;
L2075: ( 2 * C535 ) in ( dom C531 ) by L2074 , L2073 , FINSEQ_3:25;
thus L2076: C534 in ( dom ( C531 .edgeSeq() ) ) by L2075 , L2067 , L1009;
end;
suppose L2077: C534 in D233;

consider C536 being (Element of ( NAT )) such that L2078: C536 = C534 and L2079: ( D230 div 2 ) <= C536 and L2080: C536 <= ( D229 div 2 ) by L2077;
L2081: ( 2 * C536 ) <= D229 by L2062 , L2080 , XREAL_1:64;
L2082: ( 2 * C536 ) <= ( D229 + 1 ) by L2081 , NAT_1:12;
L2083: 1 <= D230 by NAT_1:12;
L2084: D230 <= ( 2 * C536 ) by L2054 , L2079 , XREAL_1:64;
L2085: 1 <= ( 2 * C536 ) by L2084 , L2083 , XXREAL_0:2;
L2086: ( 2 * C536 ) in ( dom C531 ) by L2085 , L2082 , FINSEQ_3:25;
thus L2087: C534 in ( dom ( C531 .edgeSeq() ) ) by L2086 , L2078 , L1009;
end;
end;
thus L2089: C534 in ( dom ( C531 .edgeSeq() ) ) by L2065;
end;
L2090: D234 c= ( dom ( C531 .edgeSeq() ) ) by L2063 , TARSKI:def 3;
L2091: D234 c= ( Seg ( len ( C531 .edgeSeq() ) ) ) by L2090 , FINSEQ_1:def 3;
L2092: D232 c= ( Seg ( len ( C531 .edgeSeq() ) ) ) by L2091 , XBOOLE_1:11;
L2093: D233 c= ( Seg ( len ( C531 .edgeSeq() ) ) ) by L2091 , XBOOLE_1:11;
reconsider D237 = D232 , D238 = D233 as  finite set by L2091 , FINSET_1:1 , XBOOLE_1:11;
L2094: D237 = { B352 where B352 is (Element of ( NAT )) : (( ( 0 ) + 1 ) <= B352 & B352 <= ( ( 0 ) + ( D231 div 2 ) )) };
L2095: ( ( dom ( C531 .edgeSeq() ) ) /\ D234 ) = D234 by L2090 , XBOOLE_1:28;
L2096: ( dom D235 ) = D234 by L2095 , RELAT_1:61;
L2097: 2 divides D228 by PEPIN:22;
L2098: D228 = ( 2 * ( D228 div 2 ) ) by L2097 , NAT_D:3;
L2099:
now
per cases ;
suppose L2100: ( D230 div 2 ) > ( D229 div 2 );

L2101: D229 < ( C533 + 1 ) by L2100 , L2062 , L2054 , XREAL_1:68;
L2102: ( D229 + 1 ) <= ( C533 + 1 ) by L2101 , NAT_1:13;
L2103: ( len C531 ) <= ( D227 + 1 ) by L2102;
L2104: ( len C531 ) < ( C533 + 1 ) by L2103 , XXREAL_0:1;
L2105: ( len C531 ) <= C533 by L2104 , NAT_1:13;
L2106: ( len C531 ) = C533 by L2105 , L2049 , XXREAL_0:1;
L2107:
now
assume L2108: D238 <> ( {} );
consider C537 being set such that L2109: C537 in D238 by L2108 , XBOOLE_0:def 1;
L2110: (ex B353 being (Element of ( NAT )) st (B353 = C537 & ( D230 div 2 ) <= B353 & B353 <= ( D229 div 2 ))) by L2109;
thus L2111: contradiction by L2110 , L2100 , XXREAL_0:2;
end;
thus L2112: ( card D238 ) = ( D228 div 2 ) by L2107 , L2106 , CARD_1:27 , NAT_2:2;
end;
suppose L2113: ( D230 div 2 ) <= ( D229 div 2 );

reconsider D239 = ( ( D229 div 2 ) - ( D230 div 2 ) ) as (Element of ( NAT )) by L2113 , INT_1:5;
L2114: D238 = { B354 where B354 is (Element of ( NAT )) : (( D230 div 2 ) <= B354 & B354 <= ( ( D230 div 2 ) + D239 )) };
L2115: ( card D238 ) = ( D239 + 1 ) by L2114 , GRAPH_2:4;
thus L2116: ( card D238 ) = ( D228 div 2 ) by L2115 , L2098 , L2062 , L2054;
end;
end;
reconsider D240 = D234 as  finite set by L2090;
L2118: ( C531 .edgeSeq() ) is (Subset of ( C531 .edgeSeq() )) by GRAPH_2:26;
reconsider D241 = D235 as (Subset of ( C531 .edgeSeq() )) by L2118 , GRAPH_2:27;
set D242 = ( Seq D241 );
L2119: D242 = ( D241 * ( Sgm ( dom D241 ) ) ) by FINSEQ_1:def 14;
set D243 = ( ( D229 div 2 ) - D236 );
L2120:
now
assume L2121: D236 > ( D229 div 2 );
L2122: ( 2 * D236 ) > ( 2 * ( D229 div 2 ) ) by L2121 , XREAL_1:68;
L2123: ( ( ( C533 + 1 ) - 1 ) - 1 ) > ( ( len C531 ) - 1 ) by L2122 , L2061 , L2054 , NAT_D:3;
thus L2124: contradiction by L2123 , L2049 , XREAL_1:9;
end;
reconsider D244 = D243 as (Element of ( NAT )) by L2120 , INT_1:5;
L2125: D238 = { B355 where B355 is (Element of ( NAT )) : (( D236 + 1 ) <= B355 & B355 <= ( D236 + D244 )) };
L2126:
now
let C538 , C539 being (Element of ( NAT ));
assume that
L2127: C538 in D237
and
L2128: C539 in D238;
consider C540 being (Element of ( NAT )) such that L2129: C540 = C539 and L2130: ( D230 div 2 ) <= C540 and L2131: C540 <= ( D229 div 2 ) by L2128;
consider C541 being (Element of ( NAT )) such that L2132: C541 = C538 and L2133: 1 <= C541 and L2134: C541 <= ( D231 div 2 ) by L2127;
L2135: ( 2 * C541 ) <= D231 by L2052 , L2134 , XREAL_1:64;
L2136: ( 2 * C541 ) < ( D231 + 1 ) by L2135 , NAT_1:13;
L2137: ( 2 * C541 ) < C533 by L2136 , L2049 , XXREAL_0:2;
L2138: ( ( 2 * C541 ) + ( 0 ) ) < ( C533 + 1 ) by L2137 , XREAL_1:8;
L2139: ( C533 + 1 ) <= ( 2 * C540 ) by L2054 , L2130 , XREAL_1:64;
L2140: ( 2 * C541 ) < ( 2 * C540 ) by L2139 , L2138 , XXREAL_0:2;
L2141: C541 <= C540 by L2140 , XREAL_1:68;
thus L2142: C538 < C539 by L2141 , L2132 , L2129 , L2138 , L2139 , XXREAL_0:1;
end;
L2143:
now
per cases ;
suppose L2144: ( D231 div 2 ) = ( 0 );

L2145:
now
assume L2146: D237 <> ( {} );
consider C542 being set such that L2147: C542 in D237 by L2146 , XBOOLE_0:def 1;
L2148: (ex B356 being (Element of ( NAT )) st (B356 = C542 & 1 <= B356 & B356 <= ( D231 div 2 ))) by L2147;
thus L2149: contradiction by L2148 , L2144;
end;
thus L2150: ( card D237 ) = ( D231 div 2 ) by L2145 , L2144;
end;
suppose L2151: ( D231 div 2 ) <> ( 0 );

consider C543 being Nat such that L2152: ( D231 div 2 ) = ( C543 + 1 ) by L2151 , NAT_1:6;
reconsider D245 = C543 as (Element of ( NAT )) by ORDINAL1:def 12;
L2153: ( D231 div 2 ) = ( D245 + 1 ) by L2152;
thus L2154: ( card D237 ) = ( D231 div 2 ) by L2153 , GRAPH_2:4;
end;
end;
L2156: ( dom ( Sgm D237 ) ) = ( Seg ( D231 div 2 ) ) by L2143 , L2091 , FINSEQ_3:40 , XBOOLE_1:11;
L2157: ( len ( Sgm D237 ) ) = ( D231 div 2 ) by L2156 , FINSEQ_1:def 3;
L2158: ( len D224 ) = ( ( 2 * ( len ( D224 .edgeSeq() ) ) ) + 1 ) by L314;
L2159: ( ( ( len C531 ) + C532 ) - C533 ) = ( ( 2 * ( len D225 ) ) + 1 ) by L2158 , L2049 , L891;
L2160:
now
assume L2161: (not ( D237 /\ D238 ) = ( {} ));
consider C544 being set such that L2162: C544 in ( D237 /\ D238 ) by L2161 , XBOOLE_0:def 1;
L2163: C544 in D238 by L2162 , XBOOLE_0:def 4;
consider C545 being (Element of ( NAT )) such that L2164: C545 = C544 and L2165: ( D230 div 2 ) <= C545 and L2166: C545 <= ( D229 div 2 ) by L2163;
L2167: C544 in D237 by L2162 , XBOOLE_0:def 4;
consider C546 being (Element of ( NAT )) such that L2168: C546 = C544 and L2169: 1 <= C546 and L2170: C546 <= ( D231 div 2 ) by L2167;
L2171: ( 2 * C546 ) <= D231 by L2052 , L2170 , XREAL_1:64;
L2172: ( 2 * C545 ) < ( D231 + 1 ) by L2171 , L2168 , L2164 , NAT_1:13;
L2173: ( 2 * C545 ) < C533 by L2172 , L2049 , XXREAL_0:2;
L2174: ( ( 2 * C545 ) + ( 0 ) ) < ( C533 + 1 ) by L2173 , XREAL_1:8;
thus L2175: contradiction by L2174 , L2054 , L2165 , XREAL_1:64;
end;
L2176: D237 misses D238 by L2160 , XBOOLE_0:def 7;
L2177: ( card D240 ) = ( ( D231 div 2 ) + ( D228 div 2 ) ) by L2176 , L2143 , L2099 , CARD_2:40;
L2178: ( dom D241 ) c= ( Seg ( len ( C531 .edgeSeq() ) ) ) by L2095 , L2091 , RELAT_1:61;
L2179: ( rng ( Sgm ( dom D241 ) ) ) = ( dom D241 ) by L2178 , FINSEQ_1:def 13;
L2180: ( dom D242 ) = ( dom ( Sgm D240 ) ) by L2179 , L2096 , L2119 , RELAT_1:27
.= ( Seg ( card D240 ) ) by L2091 , FINSEQ_3:40;
L2181: ( dom ( Sgm D238 ) ) = ( Seg ( D228 div 2 ) ) by L2091 , L2099 , FINSEQ_3:40 , XBOOLE_1:11;
L2182:
now
let C547 being set;
assume L2183: C547 in ( dom D225 );
reconsider D246 = C547 as (Element of ( NAT )) by L2183;
L2184: 1 <= D246 by L2183 , FINSEQ_3:25;
L2185: D246 <= ( len D225 ) by L2183 , FINSEQ_3:25;
L2186: ( D225 . D246 ) = ( D224 . ( 2 * D246 ) ) by L2185 , L2184 , L314;
L2187:
now
per cases ;
suppose L2188: ( ( 2 * D246 ) + 1 ) <= C532;

L2189: 1 <= ( D246 + D246 ) by L2184 , NAT_1:12;
L2190: ( ( ( 2 * D246 ) + 1 ) - 1 ) < ( C532 - ( 0 ) ) by L2188 , XREAL_1:15;
L2191: ( 2 * D246 ) in ( Seg C532 ) by L2190 , L2189 , FINSEQ_1:1;
L2192: ( D225 . C547 ) = ( C531 . ( 2 * D246 ) ) by L2191 , L2049 , L2186 , L858;
L2193: ( ( Sgm D240 ) . D246 ) = ( ( ( Sgm D237 ) ^ ( Sgm D238 ) ) . D246 ) by L2092 , L2093 , L2126 , FINSEQ_3:42;
L2194: ( ( ( 2 * D246 ) + 1 ) - 1 ) <= D231 by L2188 , XREAL_1:13;
L2195: D246 <= ( D231 div 2 ) by L2194 , L2052 , XREAL_1:68;
L2196: D246 in D237 by L2195 , L2184;
L2197: D246 in ( dom D241 ) by L2196 , L2096 , XBOOLE_0:def 3;
L2198: D246 in ( dom ( Sgm D237 ) ) by L2156 , L2184 , L2195 , FINSEQ_1:1;
L2199: ( ( Sgm D240 ) . D246 ) = ( ( Sgm D237 ) . D246 ) by L2198 , L2193 , FINSEQ_1:def 7
.= ( ( 0 ) + D246 ) by L2094 , L2184 , L2195 , GRAPH_2:5;
L2200: ( D242 . D246 ) = ( D241 . D246 ) by L2199 , L2052 , L2098 , L2096 , L2050 , L2119 , L2180 , L2159 , L2177 , L2183 , FUNCT_1:12;
L2201: ( D242 . D246 ) = ( ( C531 .edgeSeq() ) . D246 ) by L2200 , L2197 , FUNCT_1:47;
L2202: D246 <= ( len ( C531 .edgeSeq() ) ) by L2096 , L2091 , L2197 , FINSEQ_1:1;
thus L2203: ( D225 . C547 ) = ( D242 . C547 ) by L2202 , L2184 , L2192 , L2201 , L314;
end;
suppose L2204: ( ( 2 * D246 ) + 1 ) > C532;

L2205:
now
assume L2206: D246 <= ( D231 div 2 );
L2207: ( 2 * D246 ) <= D231 by L2206 , L2052 , XREAL_1:64;
L2208: ( ( 2 * D246 ) + 1 ) <= ( D231 + 1 ) by L2207 , XREAL_1:7;
thus L2209: contradiction by L2208 , L2204;
end;
consider C548 being Nat such that L2210: D246 = ( ( D231 div 2 ) + C548 ) by L2205 , NAT_1:10;
L2211: ( ( Sgm D240 ) . D246 ) = ( ( ( Sgm D237 ) ^ ( Sgm D238 ) ) . D246 ) by L2092 , L2093 , L2126 , FINSEQ_3:42;
L2212: (ex B357 being  even (Element of ( NAT )) st (B357 = D229 & ( len ( C531 .edgeSeq() ) ) = ( B357 div 2 ))) by L1024;
L2213: ( 2 * D246 ) <= ( 2 * ( len D225 ) ) by L2185 , XREAL_1:64;
L2214: ( 2 * D246 ) <= ( ( 2 * ( len D225 ) ) + 1 ) by L2213 , NAT_1:12;
L2215: ( 2 * D246 ) <= ( len D224 ) by L2214 , L314;
reconsider D247 = C548 as (Element of ( NAT )) by ORDINAL1:def 12;
L2216: ( 2 * ( D236 + D247 ) ) = ( ( ( 2 * D246 ) - C532 ) + C533 ) by L2052 , L2054 , L2210;
L2217: C532 <= ( 2 * D246 ) by L2204 , NAT_1:13;
L2218: ( ( ( 2 * D246 ) - C532 ) + C533 ) <= ( len C531 ) by L2217 , L2049 , L2215 , L869;
L2219:
now
reconsider D248 = ( ( ( 2 * D246 ) - D226 ) + D227 ) as (Element of ( NAT )) by L2049 , L2217 , L2215 , L869;
assume L2220: ( D229 div 2 ) < ( D247 + D236 );
L2221: D229 < ( 2 * ( ( D246 - ( D231 div 2 ) ) + D236 ) ) by L2220 , L2062 , L2210 , XREAL_1:68;
L2222: ( D229 + 1 ) < ( ( ( ( 2 * D246 ) - C532 ) + C533 ) + 1 ) by L2221 , L2052 , L2054 , XREAL_1:8;
L2223: ( len C531 ) <= D248 by L2222 , NAT_1:13;
thus L2224: contradiction by L2223 , L2218 , XXREAL_0:1;
end;
L2225: D247 <> ( 0 ) by L2205 , L2210;
L2226: ( ( 0 ) + 1 ) < ( D247 + 1 ) by L2225 , XREAL_1:8;
L2227: 1 <= D247 by L2226 , NAT_1:13;
L2228: ( D236 + 1 ) <= ( D236 + D247 ) by L2227 , XREAL_1:7;
L2229: ( D236 + D247 ) in D238 by L2228 , L2219;
L2230: ( D236 + D247 ) in ( dom D241 ) by L2229 , L2096 , XBOOLE_0:def 3;
L2231: ( D241 . ( D236 + D247 ) ) = ( ( C531 .edgeSeq() ) . ( D236 + D247 ) ) by L2230 , FUNCT_1:47;
L2232:
now
set D249 = ( ( ( 2 * D246 ) - D226 ) + D227 );
reconsider D250 = D249 as (Element of ( NAT )) by L2049 , L2217 , L2215 , L869;
assume L2233: ( D228 div 2 ) < ( D246 - ( D231 div 2 ) );
L2234: ( 2 * ( D228 div 2 ) ) < ( 2 * ( D246 - ( D231 div 2 ) ) ) by L2233 , XREAL_1:68;
L2235: ( D228 + C533 ) < ( ( ( ( 2 * D246 ) - C532 ) + 1 ) + C533 ) by L2234 , L2052 , L2098 , XREAL_1:8;
L2236: ( ( ( 2 * D246 ) - D226 ) + D227 ) < ( len C531 ) by L2218 , XXREAL_0:1;
L2237: ( D250 + 1 ) <= ( len C531 ) by L2236 , NAT_1:13;
thus L2238: contradiction by L2237 , L2235;
end;
L2239: D247 in ( dom ( Sgm D238 ) ) by L2232 , L2181 , L2210 , L2227 , FINSEQ_1:1;
L2240: ( ( Sgm D240 ) . D246 ) = ( ( Sgm D238 ) . D247 ) by L2239 , L2157 , L2211 , L2210 , FINSEQ_1:def 7
.= ( D236 + D247 ) by L2098 , L2062 , L2054 , L2125 , L2210 , L2227 , L2232 , GRAPH_2:5;
L2241: ( D242 . D246 ) = ( D241 . ( D236 + D247 ) ) by L2240 , L2052 , L2098 , L2096 , L2050 , L2119 , L2180 , L2159 , L2177 , L2183 , FUNCT_1:12;
L2242: 1 <= ( D236 + D247 ) by L2227 , NAT_1:12;
L2243: ( D242 . D246 ) = ( C531 . ( 2 * ( D236 + D247 ) ) ) by L2242 , L2241 , L2219 , L2231 , L2212 , L314;
thus L2244: ( D225 . C547 ) = ( D242 . C547 ) by L2243 , L2049 , L2186 , L2217 , L2215 , L2216 , L869;
end;
end;
thus L2246: ( D225 . C547 ) = ( D242 . C547 ) by L2187;
end;
L2247: ( D224 .edgeSeq() ) = ( Seq D241 ) by L2182 , L2052 , L2098 , L2050 , L2180 , L2159 , L2177 , FUNCT_1:2;
L2248: C531 is_Walk_from ( C531 .first() ) , ( C531 .last() ) by L487;
L2249: D224 is_Walk_from ( C531 .first() ) , ( C531 .last() ) by L2248 , L817;
thus L2250: thesis by L2249 , L2247 , L2025;
end;
suppose L2251: (not (C532 is  odd & C533 is  odd & C532 <= C533 & C533 <= ( len C531 ) & ( C531 . C532 ) = ( C531 . C533 )));

L2252: ( C531 .remove (C532 , C533) ) = C531 by L2251 , L259;
thus L2253: thesis by L2252 , L2029;
end;
end;
thus L2255: thesis by L2048;
end;
end;
registration
let C549 being _Graph;
let C550 being (Walk of C549);
cluster  Trail-like  Path-like for (Subwalk of C550);
existence
proof
set D251 = ( ( len C550 ) + 1 );
defpred S5[ (Element of ( NAT )) , set , set ] means (($2 is (Walk of C549) & (ex B358 being (Walk of C549) st (B358 = $2 & $3 = ( B358 .remove (( B358 .find ( ( 2 * $1 ) + 1 ) ) , ( B358 .rfind ( ( 2 * $1 ) + 1 ) )) )))) or ((not $2 is (Walk of C549)) & $3 = $2));
L2257:
now
let C551 being (Element of ( NAT ));
let C552 being set;
L2258:
now
per cases ;
suppose L2259: C552 is (Walk of C549);

reconsider D252 = C552 as (Walk of C549) by L2259;
set D253 = ( D252 .remove (( D252 .find ( ( 2 * C551 ) + 1 ) ) , ( D252 .rfind ( ( 2 * C551 ) + 1 ) )) );
L2260: S5[ C551 , C552 , D253 ];
thus L2261: (ex B359 being set st S5[ C551 , C552 , B359 ]) by L2260;
end;
suppose L2262: (not C552 is (Walk of C549));

thus L2263: (ex B360 being set st S5[ C551 , C552 , B360 ]) by L2262;
end;
end;
thus L2265: (ex B361 being set st S5[ C551 , C552 , B361 ]) by L2258;
end;
consider C553 being Function such that L2266: (( dom C553 ) = ( NAT ) & ( C553 . ( 0 ) ) = C550 & (for B362 being (Element of ( NAT )) holds S5[ B362 , ( C553 . B362 ) , ( C553 . ( B362 + 1 ) ) ])) from RECDEF_1:sch 1(L2257);
defpred S6[ (Element of ( NAT )) ] means (ex B363 being (Subwalk of C550) st (B363 = ( C553 . $1 ) & ( len B363 ) <= ( len C550 ) & (for B364 being  odd (Element of ( NAT )) holds ((B364 < ( ( 2 * $1 ) + 1 ) & B364 <= ( len B363 )) implies ( B363 .rfind B364 ) = B364))));
L2267:
now
let C554 being (Element of ( NAT ));
assume L2268: S6[ C554 ];
consider C555 being (Subwalk of C550) such that L2269: C555 = ( C553 . C554 ) and L2270: ( len C555 ) <= ( len C550 ) and L2271: (for B365 being  odd (Element of ( NAT )) holds ((B365 < ( ( 2 * C554 ) + 1 ) & B365 <= ( len C555 )) implies ( C555 .rfind B365 ) = B365)) by L2268;
set D254 = ( C555 .find ( ( 2 * C554 ) + 1 ) );
set D255 = ( C555 .rfind ( ( 2 * C554 ) + 1 ) );
set D256 = ( C555 .remove (D254 , D255) );
reconsider D257 = D256 as (Subwalk of C550) by L2033;
take D258 = D257;
L2272: S5[ C554 , ( C553 . C554 ) , ( C553 . ( C554 + 1 ) ) ] by L2266;
thus L2273: ( C553 . ( C554 + 1 ) ) = D258 by L2272 , L2269;
L2274: ( len D258 ) <= ( len C555 ) by L832;
thus L2275: ( len D258 ) <= ( len C550 ) by L2274 , L2270 , XXREAL_0:2;
let C556 being  odd (Element of ( NAT ));
assume that
L2276: C556 < ( ( 2 * ( C554 + 1 ) ) + 1 )
and
L2277: C556 <= ( len D258 );
set D259 = ( C555 .cut (1 , D254) );
set D260 = ( C555 .cut (D255 , ( len C555 )) );
L2278: ( len D258 ) <= ( len C555 ) by L832;
L2279: C556 <= ( len C555 ) by L2278 , L2277 , XXREAL_0:2;
L2280: C556 <= ( 2 * ( C554 + 1 ) ) by L2276 , NAT_1:13;
L2281: C556 < ( ( ( 2 * C554 ) + 1 ) + 1 ) by L2280 , XXREAL_0:1;
L2282: C556 <= ( ( 2 * C554 ) + 1 ) by L2281 , NAT_1:13;
L2283:
now
per cases ;
suppose L2284: ( ( 2 * C554 ) + 1 ) <= ( len C555 );

L2285: D254 <= ( ( 2 * C554 ) + 1 ) by L2284 , L1170;
L2286: ( C555 . D254 ) = ( C555 . ( ( 2 * C554 ) + 1 ) ) by L2284 , L414;
L2287: D254 <= ( len C555 ) by L2284 , L414;
L2288:
now
assume L2289: D254 < ( ( 2 * C554 ) + 1 );
L2290: D254 <= ( len C555 ) by L2289 , L2284 , XXREAL_0:2;
L2291: ( C555 .rfind D254 ) = D254 by L2290 , L2271 , L2289;
thus L2292: contradiction by L2291 , L2284 , L2287 , L2286 , L2289 , L463;
end;
L2293: D254 = ( ( 2 * C554 ) + 1 ) by L2288 , L2285 , XXREAL_0:1;
L2294: ( C555 . D255 ) = ( C555 . ( ( 2 * C554 ) + 1 ) ) by L2284 , L463;
set D261 = ( D258 .rfind C556 );
L2295: 1 <= C556 by ABIAN:12;
L2296: ( D258 . D261 ) = ( D258 . C556 ) by L2277 , L463;
L2297: D261 >= C556 by L2277 , L1174;
L2298: D255 <= ( len C555 ) by L2284 , L463;
L2299: 1 <= D254 by ABIAN:12;
L2300: ( D259 .last() ) = ( C555 . ( ( 2 * C554 ) + 1 ) ) by L2299 , L2287 , L2286 , L677 , JORDAN12:2
.= ( D260 .first() ) by L2298 , L2294 , L677;
L2301: ( ( 2 * C554 ) + 1 ) <= D255 by L2284 , L1174;
L2302: D254 <= D255 by L2301 , L2285 , XXREAL_0:2;
L2303: D258 = ( D259 .append D260 ) by L2302 , L2286 , L2298 , L2294 , L259;
L2304: D261 <= ( len D258 ) by L2277 , L463;
L2305: D261 <= ( len C555 ) by L2304 , L2278 , XXREAL_0:2;
L2306:
now
per cases  by L2282 , XXREAL_0:1;
suppose L2307: C556 < ( ( 2 * C554 ) + 1 );

L2308: C556 < ( len ( C555 .cut (1 , D254) ) ) by L2307 , L2284 , L2293 , L790;
L2309: ( D258 .cut (1 , C556) ) = ( ( C555 .cut (1 , D254) ) .cut (1 , C556) ) by L2308 , L2303 , L2295 , L2300 , L763 , JORDAN12:2
.= ( C555 .cut (1 , C556) ) by L2282 , L2293 , L733;
reconsider D262 = ( C556 - 1 ) as (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L2310: ( D262 + 1 ) = C556;
L2311: D262 < ( C556 - ( 0 ) ) by XREAL_1:15;
L2312: D262 < ( len ( C555 .cut (1 , C556) ) ) by L2311 , L2277 , L2278 , L790 , XXREAL_0:2;
L2313: D262 < ( len ( D258 .cut (1 , C556) ) ) by L2277 , L2311 , L790;
L2314: ( D258 . C556 ) = ( ( C555 .cut (1 , C556) ) . C556 ) by L2313 , L2277 , L2295 , L2309 , L2310 , L664 , JORDAN12:2;
L2315: ( D258 . C556 ) = ( C555 . C556 ) by L2314 , L2279 , L2295 , L2310 , L2312 , L664 , JORDAN12:2;
L2316: ( C555 .rfind C556 ) = C556 by L2271 , L2279 , L2307;
L2317:
now
per cases ;
suppose L2318: D261 < D254;

reconsider D263 = ( D261 - 1 ) as (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L2319: 1 <= D261 by ABIAN:12;
L2320: D263 < ( D261 - ( 0 ) ) by XREAL_1:15;
L2321: D263 < ( len ( D258 .cut (1 , D261) ) ) by L2320 , L2304 , L790;
L2322: D263 < ( len ( C555 .cut (1 , D261) ) ) by L2278 , L2304 , L2320 , L790 , XXREAL_0:2;
L2323: D261 < ( len ( C555 .cut (1 , D254) ) ) by L2287 , L2318 , L790;
L2324: ( D258 .cut (1 , D261) ) = ( ( C555 .cut (1 , D254) ) .cut (1 , D261) ) by L2323 , L2303 , L2300 , L2319 , L763 , JORDAN12:2
.= ( C555 .cut (1 , D261) ) by L2318 , L733;
L2325: ( D258 . D261 ) = ( ( C555 .cut (1 , D261) ) . ( D263 + 1 ) ) by L2324 , L2304 , L2319 , L2321 , L664 , JORDAN12:2;
L2326: ( C555 . D261 ) = ( C555 . C556 ) by L2325 , L2296 , L2305 , L2315 , L2319 , L2322 , L664 , JORDAN12:2;
L2327: D261 <= C556 by L2326 , L2279 , L2305 , L2316 , L463;
thus L2328: ( D258 .rfind C556 ) = C556 by L2327 , L2297 , XXREAL_0:1;
end;
suppose L2329: D254 <= D261;

set D264 = ( ( D261 - D254 ) + D255 );
L2330: ( D258 . D261 ) = ( C555 . D264 ) by L2286 , L2298 , L2294 , L2302 , L2304 , L2329 , L869;
L2331: D264 <= ( len C555 ) by L2286 , L2298 , L2294 , L2302 , L2304 , L2329 , L869;
L2332: ( D261 + D254 ) <= ( D261 + D255 ) by L2302 , XREAL_1:7;
L2333: ( ( D261 + D254 ) - D254 ) <= ( ( D261 + D255 ) - D254 ) by L2332 , XREAL_1:13;
reconsider D265 = D264 as (Element of ( NAT )) by L2286 , L2298 , L2294 , L2302 , L2304 , L2329 , L869;
L2334: D265 <= C556 by L2279 , L2296 , L2316 , L2315 , L2330 , L2331 , L463;
L2335: D261 <= C556 by L2334 , L2333 , XXREAL_0:2;
thus L2336: ( D258 .rfind C556 ) = C556 by L2335 , L2297 , XXREAL_0:1;
end;
end;
thus L2338: ( D258 .rfind C556 ) = C556 by L2317;
end;
suppose L2339: C556 = ( ( 2 * C554 ) + 1 );

L2340: C556 <= ( len ( C555 .cut (1 , D254) ) ) by L2339 , L2284 , L2293 , L790;
L2341: ( D258 .cut (1 , C556) ) = ( ( C555 .cut (1 , D254) ) .cut (1 , C556) ) by L2340 , L2303 , L2295 , L2300 , L763 , JORDAN12:2
.= ( C555 .cut (1 , C556) ) by L2282 , L2293 , L733;
reconsider D266 = ( C556 - 1 ) as (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L2342: ( D266 + 1 ) = C556;
L2343: D266 < ( C556 - ( 0 ) ) by XREAL_1:15;
L2344: D266 < ( len ( C555 .cut (1 , C556) ) ) by L2343 , L2277 , L2278 , L790 , XXREAL_0:2;
L2345: D266 < ( len ( D258 .cut (1 , C556) ) ) by L2277 , L2343 , L790;
L2346: ( D258 . C556 ) = ( ( C555 .cut (1 , C556) ) . C556 ) by L2345 , L2277 , L2295 , L2341 , L2342 , L664 , JORDAN12:2;
L2347: ( D258 . C556 ) = ( C555 . C556 ) by L2346 , L2279 , L2295 , L2342 , L2344 , L664 , JORDAN12:2;
L2348:
now
set D267 = ( ( D261 - D254 ) + D255 );
assume L2349: C556 < D261;
L2350: D254 < D261 by L2349 , L2285 , L2288 , L2339 , XXREAL_0:1;
L2351: D267 is (Element of ( NAT )) by L2350 , L2286 , L2298 , L2294 , L2302 , L2304 , L869;
L2352: D267 <= ( len C555 ) by L2286 , L2298 , L2294 , L2302 , L2304 , L2350 , L869;
L2353: ( D258 . D261 ) = ( C555 . D267 ) by L2286 , L2298 , L2294 , L2302 , L2304 , L2350 , L869;
L2354: ( ( D261 - D254 ) + D255 ) <= D255 by L2353 , L2284 , L2296 , L2339 , L2347 , L2351 , L2352 , L463;
L2355: ( ( ( D261 - D254 ) + D255 ) - D255 ) <= ( D255 - D255 ) by L2354 , XREAL_1:13;
L2356: ( ( D261 - D254 ) + D254 ) <= ( ( 0 ) + D254 ) by L2355 , XREAL_1:7;
thus L2357: contradiction by L2356 , L2285 , L2288 , L2339 , L2349 , XXREAL_0:1;
end;
thus L2358: ( D258 .rfind C556 ) = C556 by L2348 , L2297 , XXREAL_0:1;
end;
end;
thus L2360: ( D258 .rfind C556 ) = C556 by L2306;
end;
suppose L2361: ( len C555 ) < ( ( 2 * C554 ) + 1 );

L2362: C556 < ( ( 2 * C554 ) + 1 ) by L2361 , L2279 , XXREAL_0:2;
L2363: D255 = ( len C555 ) by L2361 , L463;
L2364: D254 = ( len C555 ) by L2361 , L414;
L2365: D258 = C555 by L2364 , L2363 , L842;
thus L2366: ( D258 .rfind C556 ) = C556 by L2365 , L2271 , L2277 , L2362;
end;
end;
thus L2368: ( D258 .rfind C556 ) = C556 by L2283;
end;
L2369: (for B366 being (Element of ( NAT )) holds (S6[ B366 ] implies S6[ ( B366 + 1 ) ])) by L2267;
reconsider D268 = ( C553 . ( 0 ) ) as (Subwalk of C550) by L2266 , L2029;
L2370: (for B367 being  odd (Element of ( NAT )) holds ((B367 < ( ( 2 * ( 0 ) ) + 1 ) & B367 <= ( len D268 )) implies ( D268 .rfind B367 ) = B367)) by ABIAN:12;
L2371: S6[ ( 0 ) ] by L2370 , L2266;
L2372: (for B368 being (Element of ( NAT )) holds S6[ B368 ]) from NAT_1:sch 1(L2371 , L2369);
consider C557 being (Subwalk of C550) such that L2373: C557 = ( C553 . D251 ) and L2374: ( len C557 ) <= ( len C550 ) and L2375: (for B369 being  odd (Element of ( NAT )) holds ((B369 < ( ( 2 * D251 ) + 1 ) & B369 <= ( len C557 )) implies ( C557 .rfind B369 ) = B369)) by L2372;
take C557;
L2376:
now
let C558 being  odd (Element of ( NAT ));
assume L2377: C558 <= ( len C557 );
L2378: ( ( len C557 ) + ( 0 ) ) < D251 by L2374 , XREAL_1:8;
L2379: ( ( len C557 ) + ( 0 ) ) < ( D251 + D251 ) by L2378 , XREAL_1:8;
L2380: ( ( len C557 ) + ( 0 ) ) < ( ( 2 * D251 ) + 1 ) by L2379 , XREAL_1:8;
L2381: C558 < ( ( 2 * D251 ) + 1 ) by L2380 , L2377 , XXREAL_0:2;
thus L2382: ( C557 .rfind C558 ) = C558 by L2381 , L2375 , L2377;
end;
L2383: C557 is  Path-like by L2376 , L1651;
thus L2384: thesis by L2383;
end;
end;
definition
let C559 being _Graph;
let C560 being (Walk of C559);
mode Trail of C560
 is  Trail-like (Subwalk of C560);
mode Path of C560
 is  Path-like (Subwalk of C560);
end;
registration
let C561 being _Graph;
let C562 being (DWalk of C561);
cluster  directed for (Path of C562);
existence
proof
defpred S7[ (Element of ( NAT )) ] means (for B370 being (DWalk of C561) holds (( B370 .length() ) = $1 implies (ex B371 being (Path of B370) st B371 is  directed)));
L2387: ( C562 .length() ) = ( C562 .length() );
L2388:
now
let C563 being (Element of ( NAT ));
assume L2389: S7[ C563 ];
let C564 being (DWalk of C561);
set D269 = ( C564 .cut (1 , ( ( 2 * C563 ) + 1 )) );
set D270 = ( C564 . ( ( ( 2 * C563 ) + 1 ) + 1 ) );
set D271 = ( C564 . ( ( ( 2 * C563 ) + 1 ) + 2 ) );
assume L2390: ( C564 .length() ) = ( C563 + 1 );
L2391: ( len C564 ) = ( ( 2 * ( C563 + 1 ) ) + 1 ) by L2390 , L314
.= ( ( ( 2 * C563 ) + 1 ) + 2 );
L2392: ( ( ( ( 2 * C563 ) + 1 ) + 2 ) - 2 ) < ( ( len C564 ) - ( 0 ) ) by L2391 , XREAL_1:15;
L2393: D270 DJoins ( C564 . ( ( 2 * C563 ) + 1 ) ) , D271 , C561 by L2392 , L1178;
L2394: ( len D269 ) = ( ( 2 * C563 ) + 1 ) by L2392 , L790;
L2395: ( ( 2 * C563 ) + 1 ) = ( ( 2 * ( D269 .length() ) ) + 1 ) by L2394 , L314;
consider C565 being (Path of D269) such that L2396: C565 is  directed by L2395 , L2389;
L2397: ( D269 .edgeSeq() ) c= ( C564 .edgeSeq() ) by L1030;
L2398: C565 is_Walk_from ( D269 .first() ) , ( D269 .last() ) by L2025;
L2399: 1 <= ( ( 2 * C563 ) + 1 ) by NAT_1:12;
L2400: ( D269 .last() ) = ( C564 . ( ( 2 * C563 ) + 1 ) ) by L2399 , L2392 , L677 , JORDAN12:2;
L2401: ( D269 .first() ) = ( C564 . 1 ) by L2392 , L2399 , L677 , JORDAN12:2;
L2402: ( C565 .first() ) = ( C564 . 1 ) by L2401 , L2398 , L487;
L2403: ( C565 .last() ) = ( C564 . ( ( 2 * C563 ) + 1 ) ) by L2398 , L2400 , L487;
L2404: D270 Joins ( C565 .last() ) , D271 , C561 by L2403 , L2393 , GLIB_000:16;
L2405:
now
per cases ;
suppose L2406: C565 is  closed;

set D272 = ( C564 .remove (1 , ( ( 2 * C563 ) + 1 )) );
L2407: ( C564 .first() ) = ( C564 . ( ( 2 * C563 ) + 1 ) ) by L2402 , L2403 , L2406 , L489;
L2408: D272 = ( C564 .cut (( ( 2 * C563 ) + 1 ) , ( ( ( 2 * C563 ) + 1 ) + 2 )) ) by L2407 , L2391 , L897;
L2409: ( ( len D272 ) + ( ( 2 * C563 ) + 1 ) ) = ( ( ( ( 2 * C563 ) + 1 ) + 2 ) + 1 ) by L2408 , L2391 , L2392 , L664
.= ( ( ( 2 * C563 ) + 1 ) + ( 2 + 1 ) );
reconsider D273 = D272 as (Path of C564) by L2409 , L1671;
take D274 = D273;
thus L2410: D274 is  directed;
end;
suppose L2411: C565 is  open;

consider C566 being (Subset of ( D269 .edgeSeq() )) such that L2412: ( C565 .edgeSeq() ) = ( Seq C566 ) by L2025;
L2413: ( Seq C566 ) is  one-to-one by L2412 , L492;
L2414: ( Seq C566 ) = ( C566 * ( Sgm ( dom C566 ) ) ) by FINSEQ_1:def 14;
L2415:
now
let C567 being set;
assume L2416: C567 in ( dom C566 );
L2417: [ C567 , ( C566 . C567 ) ] in C566 by L2416 , FUNCT_1:1;
L2418: C567 in ( dom ( D269 .edgeSeq() ) ) by L2417 , FUNCT_1:1;
thus L2419: C567 in ( Seg C563 ) by L2418 , L2395 , FINSEQ_1:def 3;
end;
L2420: ( dom C566 ) c= ( Seg C563 ) by L2415 , TARSKI:def 3;
L2421: ( rng ( Sgm ( dom C566 ) ) ) = ( dom C566 ) by L2420 , FINSEQ_1:def 13;
L2422: ( Sgm ( dom C566 ) ) is  one-to-one by L2421 , L2414 , L2413 , FUNCT_1:26;
L2423:
now
per cases ;
suppose L2424: D271 in ( C565 .vertices() );

reconsider D275 = C565 as  directed (Path of C561) by L2396;
L2425: ( dom ( Sgm ( dom C566 ) ) ) = ( dom ( C565 .edgeSeq() ) ) by L2412 , L39
.= ( Seg ( len ( C565 .edgeSeq() ) ) ) by FINSEQ_1:def 3;
consider C568 being  odd (Element of ( NAT )) such that L2426: C568 <= ( len C565 ) and L2427: ( C565 . C568 ) = D271 by L2424 , L1088;
set D276 = ( D275 .cut (1 , C568) );
L2428: ( len D276 ) = C568 by L2426 , L790;
consider C569 being  even (Element of ( NAT )) such that L2429: C569 = ( C568 - 1 ) and L2430: ( len ( D276 .edgeSeq() ) ) = ( C569 div 2 ) by L2428 , L1024;
L2431: ( ( 2 * ( 0 ) ) + 1 ) <= C568 by ABIAN:12;
L2432: D276 is_Walk_from ( C564 .first() ) , ( C564 .last() ) by L2431 , L2391 , L2402 , L2426 , L2427 , L677;
L2433: 2 divides C569 by PEPIN:22;
L2434: ( 2 * ( C569 div 2 ) ) = C569 by L2433 , NAT_D:3;
L2435:
now
assume L2436: ( C569 div 2 ) > ( len ( C565 .edgeSeq() ) );
L2437: C569 > ( 2 * ( len ( C565 .edgeSeq() ) ) ) by L2436 , L2434 , XREAL_1:68;
L2438: ( C569 + 1 ) > ( ( 2 * ( len ( C565 .edgeSeq() ) ) ) + 1 ) by L2437 , XREAL_1:8;
thus L2439: contradiction by L2438 , L2426 , L2429 , L314;
end;
L2440: ( Seg ( C569 div 2 ) ) c= ( dom ( Sgm ( dom C566 ) ) ) by L2435 , L2425 , FINSEQ_1:5;
L2441: ( dom ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) ) = ( Seg ( C569 div 2 ) ) by L2440 , RELAT_1:62;
reconsider D277 = ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) as FinSequence by L2441 , FINSEQ_1:def 2;
L2442: D277 is  one-to-one by L2422 , FUNCT_1:52;
set D278 = ( C566 | ( rng ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) ) );
reconsider D279 = D278 as (Subset of ( D269 .edgeSeq() )) by GRAPH_2:27;
L2443: (for B372 being set holds (B372 in D279 implies B372 in ( C564 .edgeSeq() ))) by L2397 , TARSKI:def 3;
reconsider D280 = D279 as (Subset of ( C564 .edgeSeq() )) by L2443 , TARSKI:def 3;
reconsider D281 = ( C566 \ D280 ) as Function;
L2444:
now
let C570 being set;
L2445: ( rng ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) ) c= ( rng ( Sgm ( dom C566 ) ) ) by RELAT_1:70;
assume L2446: C570 in ( rng ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) );
L2447: C570 in ( rng ( Sgm ( dom C566 ) ) ) by L2446 , L2445;
thus L2448: C570 in ( dom C566 ) by L2447 , L2420 , FINSEQ_1:def 13;
end;
L2449: ( rng ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) ) c= ( dom C566 ) by L2444 , TARSKI:def 3;
L2450: ( dom D280 ) = ( rng ( ( Sgm ( dom C566 ) ) | ( Seg ( C569 div 2 ) ) ) ) by L2449 , RELAT_1:62;
L2451:
now
let C571 , C572 being (Element of ( NAT ));
assume that
L2452: C571 in ( dom D280 )
and
L2453: C572 in ( dom D281 );
consider C573 being set such that L2454: C573 in ( dom D277 ) and L2455: ( D277 . C573 ) = C571 by L2450 , L2452 , FUNCT_1:def 3;
reconsider D282 = C573 as (Element of ( NAT )) by L2454;
L2456: D282 in ( Seg ( C569 div 2 ) ) by L2454 , RELAT_1:57;
L2457: 1 <= D282 by L2456 , FINSEQ_1:1;
L2458: [ C572 , ( D281 . C572 ) ] in ( C566 \ D280 ) by L2453 , FUNCT_1:1;
L2459: [ C572 , ( D281 . C572 ) ] in C566 by L2458 , XBOOLE_0:def 5;
L2460: C572 in ( dom C566 ) by L2459 , FUNCT_1:1;
L2461: C572 in ( rng ( Sgm ( dom C566 ) ) ) by L2460 , L2420 , FINSEQ_1:def 13;
consider C574 being set such that L2462: C574 in ( dom ( Sgm ( dom C566 ) ) ) and L2463: ( ( Sgm ( dom C566 ) ) . C574 ) = C572 by L2461 , FUNCT_1:def 3;
reconsider D283 = C574 as (Element of ( NAT )) by L2462;
L2464: 1 <= D283 by L2425 , L2462 , FINSEQ_1:1;
L2465: D282 <= ( C569 div 2 ) by L2456 , FINSEQ_1:1;
L2466:
now
assume L2467: D283 <= D282;
L2468: D283 <= ( C569 div 2 ) by L2467 , L2465 , XXREAL_0:2;
L2469: D283 in ( Seg ( C569 div 2 ) ) by L2468 , L2464 , FINSEQ_1:1;
L2470: [ D283 , C572 ] in ( Sgm ( dom C566 ) ) by L2462 , L2463 , FUNCT_1:1;
L2471: [ D283 , C572 ] in D277 by L2470 , L2469 , RELAT_1:def 11;
L2472: C572 in ( rng D277 ) by L2471 , XTUPLE_0:def 13;
L2473: [ C572 , ( D281 . C572 ) ] in D280 by L2472 , L2459 , RELAT_1:def 11;
thus L2474: contradiction by L2473 , L2458 , XBOOLE_0:def 5;
end;
L2475: D283 <= ( len ( C565 .edgeSeq() ) ) by L2425 , L2462 , FINSEQ_1:1;
L2476: D283 in ( dom ( Seq C566 ) ) by L2475 , L2412 , L2464 , FINSEQ_3:25;
L2477: D283 in ( dom ( Sgm ( dom C566 ) ) ) by L2476 , L39;
L2478: D283 <= ( len ( Sgm ( dom C566 ) ) ) by L2477 , FINSEQ_3:25;
L2479: C571 = ( ( Sgm ( dom C566 ) ) . D282 ) by L2454 , L2455 , FUNCT_1:47;
thus L2480: C571 < C572 by L2479 , L2420 , L2463 , L2457 , L2478 , L2466 , FINSEQ_1:def 13;
end;
L2481: ( len D277 ) = ( C569 div 2 ) by L2441 , FINSEQ_1:def 3;
L2482: ( card ( dom D280 ) ) = ( C569 div 2 ) by L2481 , L2450 , L2442 , FINSEQ_4:62;
L2483: ( card D280 ) = ( C569 div 2 ) by L2482 , CARD_1:62;
L2484: ( len ( Seq D280 ) ) = ( len ( D276 .edgeSeq() ) ) by L2483 , L2430 , L31;
L2485: D280 c= C566 by RELAT_1:59;
L2486:
now
let C575 being set;
thus L2487:now
assume L2488: C575 in C566;
L2489:
now
per cases ;
suppose L2490: C575 in D280;

thus L2491: C575 in ( D280 \/ ( C566 \ D280 ) ) by L2490 , XBOOLE_0:def 3;
end;
suppose L2492: (not C575 in D280);

L2493: C575 in ( C566 \ D280 ) by L2492 , L2488 , XBOOLE_0:def 5;
thus L2494: C575 in ( D280 \/ ( C566 \ D280 ) ) by L2493 , XBOOLE_0:def 3;
end;
end;
thus L2496: C575 in ( D280 \/ ( C566 \ D280 ) ) by L2489;
end;
assume L2497: C575 in ( D280 \/ ( C566 \ D280 ) );
L2498:
now
per cases  by L2497 , XBOOLE_0:def 3;
suppose L2499: C575 in D280;

thus L2500: C575 in C566 by L2499 , L2485;
end;
suppose L2501: C575 in ( C566 \ D280 );

thus L2502: C575 in C566 by L2501 , XBOOLE_0:def 5;
end;
end;
thus L2504: C575 in C566 by L2498;
end;
L2505: C566 = ( D280 \/ ( C566 \ D280 ) ) by L2486 , TARSKI:1;
L2506: ( dom C566 ) = ( ( dom D280 ) \/ ( dom ( C566 \ D280 ) ) ) by L2505 , RELAT_1:1;
L2507: ( C566 \ D280 ) c= C566 by XBOOLE_1:36;
L2508: ( dom ( C566 \ D280 ) ) c= ( dom C566 ) by L2507 , RELAT_1:11;
L2509: ( dom ( C566 \ D280 ) ) c= ( Seg C563 ) by L2508 , L2420 , XBOOLE_1:1;
L2510: ( dom D280 ) c= ( dom C566 ) by L2485 , RELAT_1:11;
L2511: ( dom D280 ) c= ( Seg C563 ) by L2510 , L2420 , XBOOLE_1:1;
L2512: ( Sgm ( dom C566 ) ) = ( ( Sgm ( dom D280 ) ) ^ ( Sgm ( dom ( C566 \ D280 ) ) ) ) by L2511 , L2506 , L2509 , L2451 , FINSEQ_3:42;
L2513: ( D276 .edgeSeq() ) c= ( C565 .edgeSeq() ) by L1030;
L2514: ( dom ( D276 .edgeSeq() ) ) c= ( dom ( Seq C566 ) ) by L2513 , L2412 , RELAT_1:11;
L2515: ( Seq D280 ) = ( D280 * ( Sgm ( dom D280 ) ) ) by FINSEQ_1:def 14;
L2516:
now
let C576 being Nat;
assume that
L2517: 1 <= C576
and
L2518: C576 <= ( len ( D276 .edgeSeq() ) );
L2519: C576 in ( dom ( D276 .edgeSeq() ) ) by L2517 , L2518 , FINSEQ_3:25;
L2520: C576 in ( dom ( Sgm ( dom C566 ) ) ) by L2519 , L2414 , L2514 , FUNCT_1:11;
L2521: [ C576 , ( ( Sgm ( dom C566 ) ) . C576 ) ] in ( Sgm ( dom C566 ) ) by L2520 , FUNCT_1:1;
L2522: C576 in ( Seg ( C569 div 2 ) ) by L2430 , L2517 , L2518 , FINSEQ_1:1;
L2523: [ C576 , ( ( Sgm ( dom C566 ) ) . C576 ) ] in D277 by L2522 , L2521 , RELAT_1:def 11;
L2524: ( ( Sgm ( dom C566 ) ) . C576 ) in ( rng D277 ) by L2523 , XTUPLE_0:def 13;
L2525: ( ( Sgm ( dom C566 ) ) . C576 ) in ( dom C566 ) by L2414 , L2514 , L2519 , FUNCT_1:11;
L2526: [ ( ( Sgm ( dom C566 ) ) . C576 ) , ( C566 . ( ( Sgm ( dom C566 ) ) . C576 ) ) ] in C566 by L2525 , FUNCT_1:1;
L2527: [ ( ( Sgm ( dom C566 ) ) . C576 ) , ( C566 . ( ( Sgm ( dom C566 ) ) . C576 ) ) ] in D280 by L2526 , L2524 , RELAT_1:def 11;
L2528: [ C576 , ( ( D276 .edgeSeq() ) . C576 ) ] in ( D276 .edgeSeq() ) by L2519 , FUNCT_1:1;
L2529: ( ( D276 .edgeSeq() ) . C576 ) = ( ( Seq C566 ) . C576 ) by L2528 , L2412 , L2513 , FUNCT_1:1
.= ( C566 . ( ( Sgm ( dom C566 ) ) . C576 ) ) by L2414 , L2514 , L2519 , FUNCT_1:12;
L2530: C576 in ( dom ( Seq D280 ) ) by L2484 , L2517 , L2518 , FINSEQ_3:25;
L2531: C576 in ( dom ( Sgm ( dom D280 ) ) ) by L2530 , L39;
L2532: ( ( Sgm ( dom C566 ) ) . C576 ) = ( ( Sgm ( dom D280 ) ) . C576 ) by L2531 , L2512 , FINSEQ_1:def 7;
L2533: ( D280 . ( ( Sgm ( dom D280 ) ) . C576 ) ) = ( C566 . ( ( Sgm ( dom C566 ) ) . C576 ) ) by L2532 , L2527 , FUNCT_1:1;
thus L2534: ( ( D276 .edgeSeq() ) . C576 ) = ( ( Seq D280 ) . C576 ) by L2533 , L2515 , L2529 , L2530 , FUNCT_1:12;
end;
L2535: ( D276 .edgeSeq() ) = ( Seq D280 ) by L2516 , L2484 , FINSEQ_1:14;
reconsider D284 = D276 as (Path of C564) by L2535 , L2432 , L2025;
take D285 = D284;
thus L2536: D285 is  directed;
end;
suppose L2537: (not D271 in ( C565 .vertices() ));

set D286 = ( C566 +* ( ( C563 + 1 ) .--> D270 ) );
set D287 = ( C565 .addEdge D270 );
L2538:
now
let C577 , C578 being (Element of ( NAT ));
assume that
L2539: C577 in ( dom C566 )
and
L2540: C578 in { ( C563 + 1 ) };
L2541: C578 = ( C563 + 1 ) by L2540 , TARSKI:def 1;
L2542: C577 <= C563 by L2420 , L2539 , FINSEQ_1:1;
thus L2543: C577 < C578 by L2542 , L2541 , NAT_1:13;
end;
L2544: ( dom ( ( C563 + 1 ) .--> D270 ) ) = { ( C563 + 1 ) } by FUNCOP_1:13;
L2545: ( dom D286 ) = ( ( dom C566 ) \/ { ( C563 + 1 ) } ) by L2544 , FUNCT_4:def 1;
L2546:
now
let C579 being set;
assume L2547: C579 in ( dom D286 );
L2548:
now
per cases  by L2545 , L2547 , XBOOLE_0:def 3;
suppose L2549: C579 in ( dom C566 );

L2550: C579 in ( Seg C563 ) by L2549 , L2415;
reconsider D288 = C579 as (Element of ( NAT )) by L2550;
L2551: D288 <= C563 by L2550 , FINSEQ_1:1;
L2552: D288 <= ( C563 + 1 ) by L2551 , NAT_1:12;
L2553: 1 <= D288 by L2550 , FINSEQ_1:1;
thus L2554: C579 in ( Seg ( C563 + 1 ) ) by L2553 , L2552 , FINSEQ_1:1;
end;
suppose L2555: C579 in { ( C563 + 1 ) };

L2556: 1 <= ( C563 + 1 ) by NAT_1:12;
L2557: C579 = ( C563 + 1 ) by L2555 , TARSKI:def 1;
thus L2558: C579 in ( Seg ( C563 + 1 ) ) by L2557 , L2556 , FINSEQ_1:1;
end;
end;
thus L2560: C579 in ( Seg ( C563 + 1 ) ) by L2548;
end;
L2561: ( dom D286 ) c= ( Seg ( C563 + 1 ) ) by L2546 , TARSKI:def 3;
reconsider D289 = D286 as FinSubsequence by L2561 , FINSEQ_1:def 12;
L2562:
now
let C580 being set;
assume L2563: C580 in D289;
consider C581 , C582 being set such that L2564: C580 = [ C581 , C582 ] by L2563 , RELAT_1:def 1;
L2565: C581 in ( dom D289 ) by L2563 , L2564 , FUNCT_1:1;
L2566: ( D289 . C581 ) = C582 by L2563 , L2564 , FUNCT_1:1;
L2567:
now
per cases ;
suppose L2568: C581 in ( dom ( ( C563 + 1 ) .--> D270 ) );

reconsider D290 = C581 as (Element of ( NAT )) by L2568 , L2544;
L2569: C581 = ( C563 + 1 ) by L2568 , TARSKI:def 1;
L2570: 1 <= D290 by L2569 , NAT_1:12;
L2571: C581 in ( dom ( C564 .edgeSeq() ) ) by L2570 , L2390 , L2569 , FINSEQ_3:25;
L2572: C582 = ( ( ( C563 + 1 ) .--> D270 ) . C581 ) by L2544 , L2545 , L2565 , L2566 , L2568 , FUNCT_4:def 1;
L2573: C582 = D270 by L2572 , L2569 , FUNCOP_1:72;
L2574: ( ( C564 .edgeSeq() ) . C581 ) = ( C564 . ( 2 * ( C563 + 1 ) ) ) by L2390 , L2569 , L2570 , L314
.= ( C564 . ( ( ( 2 * C563 ) + 1 ) + 1 ) );
thus L2575: C580 in ( C564 .edgeSeq() ) by L2574 , L2564 , L2573 , L2571 , FUNCT_1:1;
end;
suppose L2576: (not C581 in ( dom ( ( C563 + 1 ) .--> D270 ) ));

L2577: C581 in ( dom C566 ) by L2576 , L2544 , L2545 , L2565 , XBOOLE_0:def 3;
L2578: C582 = ( C566 . C581 ) by L2544 , L2545 , L2565 , L2566 , L2576 , FUNCT_4:def 1;
L2579: [ C581 , C582 ] in C566 by L2578 , L2577 , FUNCT_1:1;
L2580: [ C581 , C582 ] in ( D269 .edgeSeq() ) by L2579;
thus L2581: C580 in ( C564 .edgeSeq() ) by L2580 , L2397 , L2564;
end;
end;
thus L2583: C580 in ( C564 .edgeSeq() ) by L2567;
end;
reconsider D291 = D289 as (Subset of ( C564 .edgeSeq() )) by L2562 , TARSKI:def 3;
L2584: { ( C563 + 1 ) } c= ( Seg ( C563 + 1 ) ) by L2545 , L2561 , XBOOLE_1:11;
L2585: ( Sgm ( dom D291 ) ) = ( ( Sgm ( dom C566 ) ) ^ ( Sgm { ( C563 + 1 ) } ) ) by L2584 , L2420 , L2545 , L2538 , FINSEQ_3:42
.= ( ( Sgm ( dom C566 ) ) ^ <* ( C563 + 1 ) *> ) by FINSEQ_3:44;
L2586:
now
assume L2587: ( ( dom C566 ) /\ ( dom ( ( C563 + 1 ) .--> D270 ) ) ) <> ( {} );
consider C583 being set such that L2588: C583 in ( ( dom C566 ) /\ ( dom ( ( C563 + 1 ) .--> D270 ) ) ) by L2587 , XBOOLE_0:def 1;
L2589: C583 in { ( C563 + 1 ) } by L2588;
L2590: C583 = ( C563 + 1 ) by L2589 , TARSKI:def 1;
L2591: C583 in ( dom C566 ) by L2588 , XBOOLE_0:def 4;
L2592: ( C563 + 1 ) <= ( C563 + ( 0 ) ) by L2591 , L2420 , L2590 , FINSEQ_1:1;
thus L2593: contradiction by L2592 , XREAL_1:6;
end;
L2594: ( dom C566 ) misses ( dom ( ( C563 + 1 ) .--> D270 ) ) by L2586 , XBOOLE_0:def 7;
L2595: ( D287 .edgeSeq() ) = ( ( Seq C566 ) ^ <* D270 *> ) by L2404 , L2412 , L1056;
L2596: ( len ( D287 .edgeSeq() ) ) = ( ( len ( Seq C566 ) ) + ( len <* D270 *> ) ) by L2595 , FINSEQ_1:22
.= ( ( len ( Seq C566 ) ) + 1 ) by FINSEQ_1:39
.= ( ( card C566 ) + 1 ) by L31;
L2597: ( len ( Seq D291 ) ) = ( card D291 ) by L31
.= ( ( card C566 ) + ( card ( ( C563 + 1 ) .--> D270 ) ) ) by L2594 , PRE_CIRC:22
.= ( ( card C566 ) + ( card { [ ( C563 + 1 ) , D270 ] } ) ) by FUNCT_4:82
.= ( len ( D287 .edgeSeq() ) ) by L2596 , CARD_1:30;
L2598:
now
L2599: ( Seq D291 ) = ( D291 * ( Sgm ( dom D291 ) ) ) by FINSEQ_1:def 14;
let C584 being Nat;
assume that
L2600: 1 <= C584
and
L2601: C584 <= ( len ( D287 .edgeSeq() ) );
L2602: C584 in ( dom ( Seq D291 ) ) by L2597 , L2600 , L2601 , FINSEQ_3:25;
L2603: ( ( Seq D291 ) . C584 ) = ( D291 . ( ( Sgm ( dom D291 ) ) . C584 ) ) by L2602 , L2599 , FUNCT_1:12;
L2604: ( Seq C566 ) = ( C566 * ( Sgm ( dom C566 ) ) ) by FINSEQ_1:def 14;
L2605: C584 in ( dom ( D287 .edgeSeq() ) ) by L2600 , L2601 , FINSEQ_3:25;
L2606:
now
per cases  by L2595 , L2605 , FINSEQ_1:25;
suppose L2607: C584 in ( dom ( Seq C566 ) );

L2608: C584 in ( dom ( Sgm ( dom C566 ) ) ) by L2607 , L2604 , FUNCT_1:11;
L2609: ( ( Sgm ( dom D291 ) ) . C584 ) = ( ( Sgm ( dom C566 ) ) . C584 ) by L2608 , L2585 , FINSEQ_1:def 7;
L2610: ( ( Sgm ( dom C566 ) ) . C584 ) in ( dom C566 ) by L2604 , L2607 , FUNCT_1:11;
L2611: ( ( D287 .edgeSeq() ) . C584 ) = ( ( Seq C566 ) . C584 ) by L2595 , L2607 , FINSEQ_1:def 7
.= ( C566 . ( ( Sgm ( dom C566 ) ) . C584 ) ) by L2604 , L2607 , FUNCT_1:12;
thus L2612: ( ( D287 .edgeSeq() ) . C584 ) = ( ( Seq D291 ) . C584 ) by L2611 , L2594 , L2603 , L2610 , L2609 , FUNCT_4:16;
end;
suppose L2613: (ex B373 being Nat st (B373 in ( dom <* D270 *> ) & C584 = ( ( len ( Seq C566 ) ) + B373 )));

consider C585 being Nat such that L2614: C585 in ( dom <* D270 *> ) and L2615: C584 = ( ( len ( Seq C566 ) ) + C585 ) by L2613;
L2616: C585 in { 1 } by L2614 , FINSEQ_1:2 , FINSEQ_1:def 8;
L2617: C585 = 1 by L2616 , TARSKI:def 1;
L2618: ( C563 + 1 ) in ( dom ( ( C563 + 1 ) .--> D270 ) ) by L2544 , TARSKI:def 1;
L2619: ( C563 + 1 ) in ( ( dom C566 ) \/ ( dom ( ( C563 + 1 ) .--> D270 ) ) ) by L2618 , XBOOLE_0:def 3;
L2620: ( len ( Sgm ( dom C566 ) ) ) = ( card ( dom C566 ) ) by L2420 , FINSEQ_3:39
.= ( card C566 ) by CARD_1:62
.= ( len ( Seq C566 ) ) by L31;
L2621: ( ( Seq D291 ) . C584 ) = ( D291 . ( C563 + 1 ) ) by L2620 , L2585 , L2603 , L2615 , L2617 , FINSEQ_1:42;
L2622: ( ( Seq D291 ) . C584 ) = ( ( ( C563 + 1 ) .--> D270 ) . ( C563 + 1 ) ) by L2621 , L2618 , L2619 , FUNCT_4:def 1
.= D270 by FUNCOP_1:72;
L2623: ( ( D287 .edgeSeq() ) . C584 ) = ( <* D270 *> . 1 ) by L2595 , L2614 , L2615 , L2617 , FINSEQ_1:def 7
.= D270 by FINSEQ_1:def 8;
thus L2624: ( ( D287 .edgeSeq() ) . C584 ) = ( ( Seq D291 ) . C584 ) by L2623 , L2622;
end;
end;
thus L2626: ( ( D287 .edgeSeq() ) . C584 ) = ( ( Seq D291 ) . C584 ) by L2606;
end;
L2627: ( D287 .edgeSeq() ) = ( Seq D291 ) by L2598 , L2597 , FINSEQ_1:14;
L2628: D287 is_Walk_from ( C564 .first() ) , ( C564 .last() ) by L2391 , L2396 , L2393 , L2398 , L2401 , L2400 , L1195;
reconsider D292 = D287 as (Path of C564) by L2628 , L2404 , L2411 , L2537 , L2627 , L2025 , L1663;
take D293 = D292;
thus L2629: D293 is  directed by L2396 , L2393 , L2398 , L2400 , L1195;
end;
end;
thus L2631: (ex B374 being (Path of C564) st B374 is  directed) by L2423;
end;
end;
thus L2633: (ex B375 being (Path of C564) st B375 is  directed) by L2405;
end;
L2634: (for B376 being (Element of ( NAT )) holds (S7[ B376 ] implies S7[ ( B376 + 1 ) ])) by L2388;
L2635:
now
let C586 being (DWalk of C561);
set D294 = the (Path of C586);
assume L2636: ( C586 .length() ) = ( 0 );
L2637: ( len C586 ) = ( ( 2 * ( 0 ) ) + 1 ) by L2636 , L314;
L2638: ( len D294 ) <= 1 by L2637 , L2041;
take D295 = D294;
L2639: 1 <= ( len D295 ) by ABIAN:12;
L2640: ( len D295 ) = 1 by L2639 , L2638 , XXREAL_0:1;
L2641: D295 is  trivial by L2640 , L1262;
L2642: (ex B377 being (Vertex of C561) st D295 = ( C561 .walkOf B377 )) by L2641 , L1271;
thus L2643: D295 is  directed by L2642;
end;
L2644: S7[ ( 0 ) ] by L2635;
L2645: (for B378 being (Element of ( NAT )) holds S7[ B378 ]) from NAT_1:sch 1(L2644 , L2634);
thus L2646: thesis by L2645 , L2387;
end;
end;
definition
let C587 being _Graph;
let C588 being (DWalk of C587);
mode DWalk of C588
 is  directed (Subwalk of C588);
mode DTrail of C588
 is  directed (Trail of C588);
mode DPath of C588
 is  directed (Path of C588);
end;
definition
let C589 being _Graph;
func C589 .allWalks() -> non  empty (Subset of ( ( ( the_Vertices_of C589 ) \/ ( the_Edges_of C589 ) ) * )) equals 
{ B379 where B379 is (Walk of C589) : (not contradiction) };
coherence
proof
set D296 = { B380 where B380 is (Walk of C589) : (not contradiction) };
L2649:
now
let C590 being set;
assume L2650: C590 in D296;
L2651: (ex B381 being (Walk of C589) st C590 = B381) by L2650;
thus L2652: C590 in ( ( ( the_Vertices_of C589 ) \/ ( the_Edges_of C589 ) ) * ) by L2651 , FINSEQ_1:def 11;
end;
L2653: ( C589 .walkOf ( choose ( the_Vertices_of C589 ) ) ) in D296;
thus L2654: thesis by L2653 , L2649 , TARSKI:def 3;
end;
end;
definition
let C591 being _Graph;
func C591 .allTrails() -> non  empty (Subset of ( C591 .allWalks() )) equals 
{ B382 where B382 is (Trail of C591) : (not contradiction) };
coherence
proof
set D297 = { B383 where B383 is (Trail of C591) : (not contradiction) };
L2656:
now
let C592 being set;
assume L2657: C592 in D297;
L2658: (ex B384 being (Trail of C591) st B384 = C592) by L2657;
thus L2659: C592 in ( C591 .allWalks() ) by L2658;
end;
L2660: ( C591 .walkOf ( choose ( the_Vertices_of C591 ) ) ) in D297;
thus L2661: thesis by L2660 , L2656 , TARSKI:def 3;
end;
end;
definition
let C593 being _Graph;
func C593 .allPaths() -> non  empty (Subset of ( C593 .allTrails() )) equals 
{ B385 where B385 is (Path of C593) : (not contradiction) };
coherence
proof
set D298 = { B386 where B386 is (Path of C593) : (not contradiction) };
L2663:
now
let C594 being set;
assume L2664: C594 in D298;
L2665: (ex B387 being (Path of C593) st C594 = B387) by L2664;
thus L2666: C594 in ( C593 .allTrails() ) by L2665;
end;
L2667: ( C593 .walkOf ( choose ( the_Vertices_of C593 ) ) ) in D298;
thus L2668: thesis by L2667 , L2663 , TARSKI:def 3;
end;
end;
definition
let C595 being _Graph;
func C595 .allDWalks() -> non  empty (Subset of ( C595 .allWalks() )) equals 
{ B388 where B388 is (DWalk of C595) : (not contradiction) };
coherence
proof
set D299 = { B389 where B389 is  directed (Walk of C595) : (not contradiction) };
L2670:
now
let C596 being set;
assume L2671: C596 in D299;
L2672: (ex B390 being  directed (Walk of C595) st C596 = B390) by L2671;
thus L2673: C596 in ( C595 .allWalks() ) by L2672;
end;
L2674: ( C595 .walkOf ( choose ( the_Vertices_of C595 ) ) ) in D299;
thus L2675: thesis by L2674 , L2670 , TARSKI:def 3;
end;
end;
definition
let C597 being _Graph;
func C597 .allDTrails() -> non  empty (Subset of ( C597 .allTrails() )) equals 
{ B391 where B391 is (DTrail of C597) : (not contradiction) };
coherence
proof
set D300 = { B392 where B392 is (DTrail of C597) : (not contradiction) };
L2677:
now
let C598 being set;
assume L2678: C598 in D300;
L2679: (ex B393 being (DTrail of C597) st C598 = B393) by L2678;
thus L2680: C598 in ( C597 .allTrails() ) by L2679;
end;
L2681: ( C597 .walkOf ( choose ( the_Vertices_of C597 ) ) ) in D300;
thus L2682: thesis by L2681 , L2677 , TARSKI:def 3;
end;
end;
definition
let C599 being _Graph;
func C599 .allDPaths() -> non  empty (Subset of ( C599 .allDTrails() )) equals 
{ B394 where B394 is  directed (Path of C599) : (not contradiction) };
coherence
proof
set D301 = { B395 where B395 is (DPath of C599) : (not contradiction) };
L2684:
now
let C600 being set;
assume L2685: C600 in D301;
L2686: (ex B396 being (DPath of C599) st C600 = B396) by L2685;
thus L2687: C600 in ( C599 .allDTrails() ) by L2686;
end;
L2688: ( C599 .walkOf ( choose ( the_Vertices_of C599 ) ) ) in D301;
thus L2689: thesis by L2688 , L2684 , TARSKI:def 3;
end;
end;
registration
let C601 being  finite _Graph;
cluster ( C601 .allTrails() ) ->  finite;
correctness
proof
set D302 = ( ( the_Vertices_of C601 ) \/ ( the_Edges_of C601 ) );
set D303 = { B397 where B397 is (Element of ( D302 * )) : ( len B397 ) <= ( ( 2 * ( C601 .size() ) ) + 1 ) };
L2691:
now
let C602 being (Trail of C601);
consider C603 being Function such that L2692: (( dom C603 ) = ( C602 .edgeSeq() ) & (for B398 being set holds (B398 in ( C602 .edgeSeq() ) implies ( C603 . B398 ) = ( B398 `2 )))) from FUNCT_1:sch 3;
L2693:
now
L2694: ( C602 .edgeSeq() ) is  one-to-one by L492;
let C604 , C605 being set;
assume that
L2695: C604 in ( dom C603 )
and
L2696: C605 in ( dom C603 )
and
L2697: ( C603 . C604 ) = ( C603 . C605 );
consider C606 , C607 being set such that L2698: C604 = [ C606 , C607 ] by L2692 , L2695 , RELAT_1:def 1;
L2699: C606 in ( dom ( C602 .edgeSeq() ) ) by L2692 , L2695 , L2698 , FUNCT_1:1;
L2700: ( C603 . C605 ) = ( C605 `2 ) by L2692 , L2696;
L2701: ( ( C602 .edgeSeq() ) . C606 ) = C607 by L2692 , L2695 , L2698 , FUNCT_1:1;
consider C608 , C609 being set such that L2702: C605 = [ C608 , C609 ] by L2692 , L2696 , RELAT_1:def 1;
L2703: C608 in ( dom ( C602 .edgeSeq() ) ) by L2692 , L2696 , L2702 , FUNCT_1:1;
L2704: ( [ C606 , C607 ] `2 ) = C607;
L2705: ( [ C608 , C609 ] `2 ) = C609;
L2706: ( C603 . C604 ) = ( C604 `2 ) by L2692 , L2695;
L2707: C607 = ( C603 . C604 ) by L2706 , L2698 , L2704
.= C609 by L2697 , L2700 , L2702 , L2705;
L2708: ( ( C602 .edgeSeq() ) . C608 ) = C607 by L2707 , L2692 , L2696 , L2702 , FUNCT_1:1;
thus L2709: C604 = C605 by L2708 , L2698 , L2702 , L2707 , L2694 , L2699 , L2701 , L2703 , FUNCT_1:def 4;
end;
L2710: C603 is  one-to-one by L2693 , FUNCT_1:def 4;
L2711:
now
let C610 being set;
assume L2712: C610 in ( rng C603 );
consider C611 being set such that L2713: C611 in ( dom C603 ) and L2714: ( C603 . C611 ) = C610 by L2712 , FUNCT_1:def 3;
consider C612 , C613 being set such that L2715: C611 = [ C612 , C613 ] by L2692 , L2713 , RELAT_1:def 1;
L2716: ( [ C612 , C613 ] `2 ) = C613;
L2717: C610 = ( C611 `2 ) by L2692 , L2713 , L2714;
L2718: C610 = C613 by L2717 , L2715 , L2716;
L2719: C610 in ( rng ( C602 .edgeSeq() ) ) by L2718 , L2692 , L2713 , L2715 , XTUPLE_0:def 13;
thus L2720: C610 in ( the_Edges_of C601 ) by L2719;
end;
L2721: ( rng C603 ) c= ( the_Edges_of C601 ) by L2711 , TARSKI:def 3;
L2722: ( card ( C602 .edgeSeq() ) ) c= ( card ( the_Edges_of C601 ) ) by L2721 , L2692 , L2710 , CARD_1:10;
L2723: ( len ( C602 .edgeSeq() ) ) <= ( card ( the_Edges_of C601 ) ) by L2722 , NAT_1:39;
L2724: ( len ( C602 .edgeSeq() ) ) <= ( C601 .size() ) by L2723 , GLIB_000:def 25;
L2725: ( 2 * ( len ( C602 .edgeSeq() ) ) ) <= ( 2 * ( C601 .size() ) ) by L2724 , XREAL_1:64;
L2726: ( ( 2 * ( len ( C602 .edgeSeq() ) ) ) + 1 ) <= ( ( 2 * ( C601 .size() ) ) + 1 ) by L2725 , XREAL_1:7;
thus L2727: ( len C602 ) <= ( ( 2 * ( C601 .size() ) ) + 1 ) by L2726 , L314;
end;
L2728:
now
let C614 being set;
assume L2729: C614 in ( C601 .allTrails() );
consider C615 being (Trail of C601) such that L2730: C615 = C614 by L2729;
L2731: ( len C615 ) <= ( ( 2 * ( C601 .size() ) ) + 1 ) by L2691;
L2732: C614 is (Element of ( D302 * )) by L2730 , FINSEQ_1:def 11;
thus L2733: C614 in D303 by L2732 , L2730 , L2731;
end;
L2734: ( C601 .allTrails() ) c= D303 by L2728 , TARSKI:def 3;
thus L2735: thesis by L2734 , FINSET_1:1 , GRAPH_5:3;
end;
end;
definition
let C616 being _Graph;
let C617 being non  empty (Subset of ( C616 .allWalks() ));
redefine mode Element of C617
 -> (Walk of C616);
coherence
proof
let C618 being (Element of C617);
L2737: C618 in { B399 where B399 is (Walk of C616) : (not contradiction) };
L2738: (ex B400 being (Walk of C616) st B400 = C618) by L2737;
thus L2739: thesis by L2738;
end;
end;
definition
let C619 being _Graph;
let C620 being non  empty (Subset of ( C619 .allTrails() ));
redefine mode Element of C620
 -> (Trail of C619);
coherence
proof
let C621 being (Element of C620);
L2741: C621 in { B401 where B401 is (Trail of C619) : (not contradiction) };
L2742: (ex B402 being (Trail of C619) st B402 = C621) by L2741;
thus L2743: thesis by L2742;
end;
end;
definition
let C622 being _Graph;
let C623 being non  empty (Subset of ( C622 .allPaths() ));
redefine mode Element of C623
 -> (Path of C622);
coherence
proof
let C624 being (Element of C623);
L2745: C624 in { B403 where B403 is (Path of C622) : (not contradiction) };
L2746: (ex B404 being (Path of C622) st B404 = C624) by L2745;
thus L2747: thesis by L2746;
end;
end;
definition
let C625 being _Graph;
let C626 being non  empty (Subset of ( C625 .allDWalks() ));
redefine mode Element of C626
 -> (DWalk of C625);
coherence
proof
let C627 being (Element of C626);
L2749: C627 in { B405 where B405 is (DWalk of C625) : (not contradiction) };
L2750: (ex B406 being (DWalk of C625) st B406 = C627) by L2749;
thus L2751: thesis by L2750;
end;
end;
definition
let C628 being _Graph;
let C629 being non  empty (Subset of ( C628 .allDTrails() ));
redefine mode Element of C629
 -> (DTrail of C628);
coherence
proof
let C630 being (Element of C629);
L2753: C630 in { B407 where B407 is (DTrail of C628) : (not contradiction) };
L2754: (ex B408 being (DTrail of C628) st B408 = C630) by L2753;
thus L2755: thesis by L2754;
end;
end;
definition
let C631 being _Graph;
let C632 being non  empty (Subset of ( C631 .allDPaths() ));
redefine mode Element of C632
 -> (DPath of C631);
coherence
proof
let C633 being (Element of C632);
L2757: C633 in { B409 where B409 is (DPath of C631) : (not contradiction) };
L2758: (ex B410 being (DPath of C631) st B410 = C633) by L2757;
thus L2759: thesis by L2758;
end;
end;
begin
theorem
L2761: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B411 being  odd (Element of ( NAT )) holds (B411 <= ( len R4 ) implies ( R4 . B411 ) in ( the_Vertices_of R1 ))))) by L502;
theorem
L2762: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B412 being  even (Element of ( NAT )) holds (B412 in ( dom R4 ) implies ( R4 . B412 ) in ( the_Edges_of R1 )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C634 being  even (Element of ( NAT ));
assume L2763: C634 in ( dom R4 );
L2764: 1 <= C634 by L2763 , FINSEQ_3:25;
reconsider D304 = ( C634 - 1 ) as  odd (Element of ( NAT )) by L2764 , INT_1:5;
L2765: C634 <= ( len R4 ) by L2763 , FINSEQ_3:25;
L2766: D304 < ( ( len R4 ) - ( 0 ) ) by L2765 , XREAL_1:15;
L2767: ( R4 . ( D304 + 1 ) ) Joins ( R4 . D304 ) , ( R4 . ( D304 + 2 ) ) , R1 by L2766 , L55;
thus L2768: thesis by L2767 , GLIB_000:def 13;
end;
theorem
L2769: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B413 being  even (Element of ( NAT )) holds (B413 in ( dom R4 ) implies (ex B414 being  odd (Element of ( NAT )) st (B414 = ( B413 - 1 ) & ( B413 - 1 ) in ( dom R4 ) & ( B413 + 1 ) in ( dom R4 ) & ( R4 . B413 ) Joins ( R4 . B414 ) , ( R4 . ( B413 + 1 ) ) , R1)))))) by L506;
theorem
L2770: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B415 being  odd (Element of ( NAT )) holds (B415 < ( len R4 ) implies ( R4 . ( B415 + 1 ) ) in ( ( R4 .vertexAt B415 ) .edgesInOut() )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C635 being  odd (Element of ( NAT ));
assume L2771: C635 < ( len R4 );
L2772: ( R4 .vertexAt C635 ) = ( R4 . C635 ) by L2771 , L114;
L2773: ( R4 . ( C635 + 1 ) ) Joins ( R4 . C635 ) , ( R4 . ( C635 + 2 ) ) , R1 by L2771 , L55;
thus L2774: thesis by L2773 , L2772 , GLIB_000:62;
end;
theorem
L2775: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B416 being  odd (Element of ( NAT )) holds ((1 < B416 & B416 <= ( len R4 )) implies ( R4 . ( B416 - 1 ) ) in ( ( R4 .vertexAt B416 ) .edgesInOut() )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C636 being  odd (Element of ( NAT ));
assume that
L2776: 1 < C636
and
L2777: C636 <= ( len R4 );
reconsider D305 = ( C636 - 1 ) as  even (Element of ( NAT )) by L2776 , INT_1:5;
L2778: ( 1 + 1 ) <= C636 by L2776 , NAT_1:13;
L2779: ( ( 1 + 1 ) - 1 ) <= ( C636 - 1 ) by L2778 , XREAL_1:13;
L2780: ( C636 - 1 ) <= ( ( len R4 ) - ( 0 ) ) by L2777 , XREAL_1:13;
L2781: D305 in ( dom R4 ) by L2780 , L2779 , FINSEQ_3:25;
consider C637 being  odd (Element of ( NAT )) such that L2782: C637 = ( D305 - 1 ) and L2783: ( D305 - 1 ) in ( dom R4 ) and L2784: ( D305 + 1 ) in ( dom R4 ) and L2785: ( R4 . D305 ) Joins ( R4 . C637 ) , ( R4 . ( D305 + 1 ) ) , R1 by L2781 , L506;
L2786: C637 <= ( len R4 ) by L2782 , L2783 , FINSEQ_3:25;
L2787: ( R4 . C637 ) = ( R4 .vertexAt C637 ) by L2786 , L114;
L2788: ( R4 . ( C636 - 1 ) ) Joins ( R4 .vertexAt C637 ) , ( R4 .vertexAt C636 ) , R1 by L2787 , L2777 , L2785 , L114;
thus L2789: thesis by L2788 , GLIB_000:14 , GLIB_000:62;
end;
theorem
L2790: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B417 being  odd (Element of ( NAT )) holds (B417 < ( len R4 ) implies (B417 in ( dom R4 ) & ( B417 + 1 ) in ( dom R4 ) & ( B417 + 2 ) in ( dom R4 ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C638 being  odd (Element of ( NAT ));
L2791: 1 <= C638 by ABIAN:12;
L2792: 1 <= ( C638 + 1 ) by NAT_1:12;
L2793: 1 <= ( C638 + 2 ) by NAT_1:12;
assume L2794: C638 < ( len R4 );
L2795: ( C638 + 1 ) <= ( len R4 ) by L2794 , NAT_1:13;
L2796: ( C638 + 2 ) <= ( len R4 ) by L2794 , L1;
thus L2797: thesis by L2796 , L2794 , L2791 , L2792 , L2793 , L2795 , FINSEQ_3:25;
end;
theorem
L2798: (for R1 being _Graph holds (for R11 being (Vertex of R1) holds (( len ( R1 .walkOf R11 ) ) = 1 & ( ( R1 .walkOf R11 ) . 1 ) = R11 & ( ( R1 .walkOf R11 ) .first() ) = R11 & ( ( R1 .walkOf R11 ) .last() ) = R11 & ( R1 .walkOf R11 ) is_Walk_from R11 , R11)))
proof
let R1 being _Graph;
let R11 being (Vertex of R1);
thus L2799: (( len ( R1 .walkOf R11 ) ) = 1 & ( ( R1 .walkOf R11 ) . 1 ) = R11) by FINSEQ_1:40;
thus L2800: ( ( R1 .walkOf R11 ) .first() ) = R11 by FINSEQ_1:40;
thus L2801: ( ( R1 .walkOf R11 ) .last() ) = R11 by L2799;
thus L2802: thesis by L2801 , L2800 , L487;
end;
theorem
L2803: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 implies ( len ( R1 .walkOf (R8 , R7 , R9) ) ) = 3)))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
assume L2804: R7 Joins R8 , R9 , R1;
L2805: ( R1 .walkOf (R8 , R7 , R9) ) = <* R8 , R7 , R9 *> by L2804 , L76;
thus L2806: thesis by L2805 , FINSEQ_1:45;
end;
theorem
L2807: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 implies (( ( R1 .walkOf (R8 , R7 , R9) ) .first() ) = R8 & ( ( R1 .walkOf (R8 , R7 , R9) ) .last() ) = R9 & ( R1 .walkOf (R8 , R7 , R9) ) is_Walk_from R8 , R9))))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
set D306 = ( R1 .walkOf (R8 , R7 , R9) );
assume L2808: R7 Joins R8 , R9 , R1;
L2809: D306 = <* R8 , R7 , R9 *> by L2808 , L76;
thus L2810: ( D306 .first() ) = R8 by L2809 , FINSEQ_1:45;
L2811: ( len D306 ) = 3 by L2809 , FINSEQ_1:45;
thus L2812: ( D306 .last() ) = R9 by L2811 , L2809 , FINSEQ_1:45;
thus L2813: thesis by L2812 , L2810 , L487;
end;
theorem
L2814: (for R2 being _Graph holds (for R3 being _Graph holds (for B418 being (Walk of R2) holds (for B419 being (Walk of R3) holds (B418 = B419 implies (( B418 .first() ) = ( B419 .first() ) & ( B418 .last() ) = ( B419 .last() )))))));
theorem
L2815: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (R4 is_Walk_from R8 , R9 iff (( R4 . 1 ) = R8 & ( R4 . ( len R4 ) ) = R9))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R8 being set;
let R9 being set;
L2816: (R4 is_Walk_from R8 , R9 iff (( R4 .first() ) = R8 & ( R4 .last() ) = R9)) by L487;
thus L2817: thesis by L2816;
end;
theorem
L2818: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (R4 is_Walk_from R8 , R9 implies (R8 is (Vertex of R1) & R9 is (Vertex of R1)))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R8 being set;
let R9 being set;
assume L2819: R4 is_Walk_from R8 , R9;
L2820: ( R4 .last() ) = R9 by L2819 , L487;
L2821: ( R4 .first() ) = R8 by L2819 , L487;
thus L2822: thesis by L2821 , L2820;
end;
theorem
L2823: (for R2 being _Graph holds (for R3 being _Graph holds (for R8 being set holds (for R9 being set holds (for B420 being (Walk of R2) holds (for B421 being (Walk of R3) holds (B420 = B421 implies (B420 is_Walk_from R8 , R9 iff B421 is_Walk_from R8 , R9))))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let R8 being set;
let R9 being set;
let C639 being (Walk of R2);
let C640 being (Walk of R3);
assume L2824: C639 = C640;
L2825: (C639 is_Walk_from R8 , R9 iff (( C639 .first() ) = R8 & ( C639 .last() ) = R9)) by L487;
L2826: (C639 is_Walk_from R8 , R9 iff (( C640 .first() ) = R8 & ( C640 .last() ) = R9)) by L2825 , L2824;
thus L2827: thesis by L2826 , L487;
end;
theorem
L2828: (for R2 being _Graph holds (for R3 being _Graph holds (for B422 being (Walk of R2) holds (for B423 being (Walk of R3) holds (B422 = B423 implies (for B424 being (Element of ( NAT )) holds ( B422 .vertexAt B424 ) = ( B423 .vertexAt B424 )))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C641 being (Walk of R2);
let C642 being (Walk of R3);
assume L2829: C641 = C642;
let C643 being (Element of ( NAT ));
L2830:
now
per cases ;
suppose L2831: (C643 is  odd & C643 <= ( len C641 ));

thus L2832: ( C641 .vertexAt C643 ) = ( C642 . C643 ) by L2831 , L2829 , L114
.= ( C642 .vertexAt C643 ) by L2829 , L2831 , L114;
end;
suppose L2833: (not (C643 is  odd & C643 <= ( len C641 )));

thus L2834: ( C641 .vertexAt C643 ) = ( C641 .first() ) by L2833 , L114
.= ( C642 .first() ) by L2829
.= ( C642 .vertexAt C643 ) by L2829 , L2833 , L114;
end;
end;
thus L2836: thesis by L2830;
end;
theorem
L2837: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( len R4 ) = ( len ( R4 .reverse() ) ) & ( dom R4 ) = ( dom ( R4 .reverse() ) ) & ( rng R4 ) = ( rng ( R4 .reverse() ) )))) by FINSEQ_5:57 , FINSEQ_5:def 3;
theorem
L2838: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( R4 .first() ) = ( ( R4 .reverse() ) .last() ) & ( R4 .last() ) = ( ( R4 .reverse() ) .first() ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L2839: ( len R4 ) = ( len ( R4 .reverse() ) ) by FINSEQ_5:def 3;
thus L2840: ( R4 .first() ) = ( ( R4 .reverse() ) .last() ) by L2839 , FINSEQ_5:62;
thus L2841: thesis by FINSEQ_5:62;
end;
theorem
L2842: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (R4 is_Walk_from R8 , R9 iff ( R4 .reverse() ) is_Walk_from R9 , R8)))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R8 being set;
let R9 being set;
L2843: ( len R4 ) = ( len ( R4 .reverse() ) ) by FINSEQ_5:def 3;
thus L2844:now
assume L2845: R4 is_Walk_from R8 , R9;
L2846: ( R4 . ( len R4 ) ) = R9 by L2845 , L2815;
L2847: ( ( R4 .reverse() ) . 1 ) = R9 by L2846 , FINSEQ_5:62;
L2848: ( R4 . 1 ) = R8 by L2845 , L2815;
L2849: ( ( R4 .reverse() ) . ( len R4 ) ) = R8 by L2848 , FINSEQ_5:62;
thus L2850: ( R4 .reverse() ) is_Walk_from R9 , R8 by L2849 , L2843 , L2847 , L2815;
end;
assume L2851: ( R4 .reverse() ) is_Walk_from R9 , R8;
L2852: ( ( R4 .reverse() ) . 1 ) = R9 by L2851 , L2815;
L2853: ( R4 . ( len R4 ) ) = R9 by L2852 , FINSEQ_5:62;
L2854: ( ( R4 .reverse() ) . ( len ( R4 .reverse() ) ) ) = R8 by L2851 , L2815;
L2855: ( R4 . 1 ) = R8 by L2854 , L2843 , FINSEQ_5:62;
thus L2856: thesis by L2855 , L2853 , L2815;
end;
theorem
L2857: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom R4 ) implies (( R4 . R12 ) = ( ( R4 .reverse() ) . ( ( ( len R4 ) - R12 ) + 1 ) ) & ( ( ( len R4 ) - R12 ) + 1 ) in ( dom ( R4 .reverse() ) ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R12 being (Element of ( NAT ));
set D307 = ( ( ( len R4 ) - R12 ) + 1 );
assume L2858: R12 in ( dom R4 );
L2859: R12 <= ( len R4 ) by L2858 , FINSEQ_3:25;
reconsider D308 = D307 as (Element of ( NAT )) by L2859 , FINSEQ_5:1;
L2860: R12 in ( Seg ( len R4 ) ) by L2858 , FINSEQ_1:def 3;
L2861: ( ( ( len R4 ) - R12 ) + 1 ) in ( Seg ( len R4 ) ) by L2860 , FINSEQ_5:2;
L2862: D308 in ( Seg ( len ( R4 .reverse() ) ) ) by L2861 , FINSEQ_5:def 3;
L2863: D308 in ( dom ( R4 .reverse() ) ) by L2862 , FINSEQ_1:def 3;
L2864: ( ( R4 .reverse() ) . D308 ) = ( R4 . ( ( ( len R4 ) - D308 ) + 1 ) ) by L2863 , FINSEQ_5:def 3;
thus L2865: thesis by L2864 , L2862 , FINSEQ_1:def 3;
end;
theorem
L2866: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom ( R4 .reverse() ) ) implies (( ( R4 .reverse() ) . R12 ) = ( R4 . ( ( ( len R4 ) - R12 ) + 1 ) ) & ( ( ( len R4 ) - R12 ) + 1 ) in ( dom R4 )))))) by L570;
canceled 1;
theorem
L2867: (for R2 being _Graph holds (for R3 being _Graph holds (for B425 being (Walk of R2) holds (for B426 being (Walk of R3) holds (B425 = B426 implies ( B425 .reverse() ) = ( B426 .reverse() ))))));
theorem
L2868: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies ( ( len ( R5 .append R6 ) ) + 1 ) = ( ( len R5 ) + ( len R6 ) ))))) by L577;
theorem
L2869: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies (( len R5 ) <= ( len ( R5 .append R6 ) ) & ( len R6 ) <= ( len ( R5 .append R6 ) )))))) by L581;
theorem
L2870: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies (( ( R5 .append R6 ) .first() ) = ( R5 .first() ) & ( ( R5 .append R6 ) .last() ) = ( R6 .last() ) & ( R5 .append R6 ) is_Walk_from ( R5 .first() ) , ( R6 .last() )))))) by L590;
theorem
L2871: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (for R10 being set holds ((R5 is_Walk_from R8 , R9 & R6 is_Walk_from R9 , R10) implies ( R5 .append R6 ) is_Walk_from R8 , R10)))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
let R8 being set;
let R9 being set;
let R10 being set;
assume that
L2872: R5 is_Walk_from R8 , R9
and
L2873: R6 is_Walk_from R9 , R10;
L2874: ( R5 .last() ) = R9 by L2872 , L487;
L2875: ( R6 .last() ) = R10 by L2873 , L487;
L2876: ( R6 .first() ) = R9 by L2873 , L487;
L2877: ( R5 .first() ) = R8 by L2872 , L487;
thus L2878: thesis by L2877 , L2874 , L2876 , L2875 , L590;
end;
theorem
L2879: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom R5 ) implies (( ( R5 .append R6 ) . R12 ) = ( R5 . R12 ) & R12 in ( dom ( R5 .append R6 ) ))))))) by L606;
theorem
L2880: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies (for B427 being (Element of ( NAT )) holds (B427 < ( len R6 ) implies (( ( R5 .append R6 ) . ( ( len R5 ) + B427 ) ) = ( R6 . ( B427 + 1 ) ) & ( ( len R5 ) + B427 ) in ( dom ( R5 .append R6 ) )))))))) by L622;
theorem
L2881: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom ( R5 .append R6 ) ) implies (R12 in ( dom R5 ) or (ex B428 being (Element of ( NAT )) st (B428 < ( len R6 ) & R12 = ( ( len R5 ) + B428 ))))))))) by L643;
theorem
L2882: (for R2 being _Graph holds (for R3 being _Graph holds (for B429 , B430 being (Walk of R2) holds (for B431 , B432 being (Walk of R3) holds ((B429 = B431 & B430 = B432) implies ( B429 .append B430 ) = ( B431 .append B432 ))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C644 , C645 being (Walk of R2);
let C646 , C647 being (Walk of R3);
assume that
L2883: C644 = C646
and
L2884: C645 = C647;
L2885:
now
per cases ;
suppose L2886: ( C644 .last() ) = ( C645 .first() );

L2887: ( C646 .last() ) = ( C647 .first() ) by L2886 , L2883 , L2884;
thus L2888: ( C644 .append C645 ) = ( C644 ^' C645 ) by L2886 , L156
.= ( C646 .append C647 ) by L2883 , L2884 , L2887 , L156;
end;
suppose L2889: ( C644 .last() ) <> ( C645 .first() );

L2890: ( C646 .last() ) <> ( C647 .first() ) by L2889 , L2883 , L2884;
thus L2891: ( C644 .append C645 ) = C646 by L2883 , L2889 , L156
.= ( C646 .append C647 ) by L2890 , L156;
end;
end;
thus L2893: thesis by L2885;
end;
theorem
L2894: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B433 , B434 being  odd (Element of ( NAT )) holds ((B433 <= B434 & B434 <= ( len R4 )) implies (( ( len ( R4 .cut (B433 , B434) ) ) + B433 ) = ( B434 + 1 ) & (for B435 being (Element of ( NAT )) holds (B435 < ( len ( R4 .cut (B433 , B434) ) ) implies (( ( R4 .cut (B433 , B434) ) . ( B435 + 1 ) ) = ( R4 . ( B433 + B435 ) ) & ( B433 + B435 ) in ( dom R4 ))))))))) by L664;
theorem
L2895: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B436 , B437 being  odd (Element of ( NAT )) holds ((B436 <= B437 & B437 <= ( len R4 )) implies (( ( R4 .cut (B436 , B437) ) .first() ) = ( R4 . B436 ) & ( ( R4 .cut (B436 , B437) ) .last() ) = ( R4 . B437 ) & ( R4 .cut (B436 , B437) ) is_Walk_from ( R4 . B436 ) , ( R4 . B437 )))))) by L677;
theorem
L2896: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B438 , B439 , B440 being  odd (Element of ( NAT )) holds ((B438 <= B439 & B439 <= B440 & B440 <= ( len R4 )) implies ( ( R4 .cut (B438 , B439) ) .append ( R4 .cut (B439 , B440) ) ) = ( R4 .cut (B438 , B440) ))))) by L689;
theorem
L2897: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( R4 .cut (1 , ( len R4 )) ) = R4)) by L723;
theorem
L2898: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B441 being  odd (Element of ( NAT )) holds (B441 < ( len R4 ) implies ( R1 .walkOf (( R4 . B441 ) , ( R4 . ( B441 + 1 ) ) , ( R4 . ( B441 + 2 ) )) ) = ( R4 .cut (B441 , ( B441 + 2 )) )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C648 being  odd (Element of ( NAT ));
set D309 = ( R4 . C648 );
set D310 = ( R4 . ( C648 + 1 ) );
set D311 = ( R4 . ( C648 + 2 ) );
set D312 = ( R1 .walkOf (D309 , D310 , D311) );
set D313 = ( R4 .cut (C648 , ( C648 + 2 )) );
assume L2899: C648 < ( len R4 );
L2900: ( C648 + 2 ) <= ( len R4 ) by L2899 , L1;
L2901: C648 <= ( C648 + 2 ) by L1;
L2902: ( ( len ( R4 .cut (C648 , ( C648 + 2 )) ) ) + C648 ) = ( 1 + ( 2 + C648 ) ) by L2901 , L2900 , L664;
L2903: D310 Joins D309 , D311 , R1 by L2899 , L55;
L2904: ( R1 .walkOf (D309 , D310 , D311) ) = <* D309 , D310 , D311 *> by L2903 , L76;
L2905: ( len D312 ) = 3 by L2903 , L2803;
L2906: ( dom D312 ) = ( Seg 3 ) by L2905 , FINSEQ_1:def 3;
L2907:
now
let C649 being Nat;
assume L2908: C649 in ( dom D312 );
L2909: 1 <= C649 by L2908 , FINSEQ_3:25;
reconsider D314 = ( C649 - 1 ) as (Element of ( NAT )) by L2909 , INT_1:5;
L2910: C649 <= 3 by L2905 , L2908 , FINSEQ_3:25;
L2911: D314 < ( 3 - ( 0 ) ) by L2910 , XREAL_1:15;
L2912: ( D314 + 1 ) = C649;
L2913: ( D313 . C649 ) = ( R4 . ( C648 + D314 ) ) by L2912 , L2901 , L2900 , L2902 , L2911 , L664;
L2914:
now
per cases  by L2906 , L2908 , ENUMSET1:def 1 , FINSEQ_3:1;
suppose L2915: C649 = 1;

thus L2916: ( D312 . C649 ) = ( D313 . C649 ) by L2915 , L2904 , L2913 , FINSEQ_1:45;
end;
suppose L2917: C649 = 2;

thus L2918: ( D312 . C649 ) = ( D313 . C649 ) by L2917 , L2904 , L2913 , FINSEQ_1:45;
end;
suppose L2919: C649 = 3;

thus L2920: ( D312 . C649 ) = ( D313 . C649 ) by L2919 , L2904 , L2913 , FINSEQ_1:45;
end;
end;
thus L2922: ( D312 . C649 ) = ( D313 . C649 ) by L2914;
end;
thus L2923: thesis by L2907 , L2902 , L2905 , FINSEQ_2:9;
end;
theorem
L2924: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B442 , B443 being  odd (Element of ( NAT )) holds ((B442 <= B443 & B443 < ( len R4 )) implies ( ( R4 .cut (B442 , B443) ) .addEdge ( R4 . ( B443 + 1 ) ) ) = ( R4 .cut (B442 , ( B443 + 2 )) )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C650 , C651 being  odd (Element of ( NAT ));
set D315 = ( R4 .cut (C650 , C651) );
set D316 = ( R4 . ( C651 + 1 ) );
assume that
L2925: C650 <= C651
and
L2926: C651 < ( len R4 );
L2927: ( C651 + 2 ) <= ( len R4 ) by L2926 , L1;
L2928: ( D315 .last() ) = ( R4 . C651 ) by L2925 , L2926 , L677;
L2929: D316 Joins ( D315 .last() ) , ( R4 . ( C651 + 2 ) ) , R1 by L2928 , L2926 , L55;
L2930: D316 Joins ( D315 .last() ) , ( R4 .vertexAt ( C651 + 2 ) ) , R1 by L2929 , L2927 , L114;
L2931: ( ( D315 .last() ) .adj D316 ) = ( R4 .vertexAt ( C651 + 2 ) ) by L2930 , GLIB_000:66;
L2932: ( ( D315 .last() ) .adj D316 ) = ( R4 . ( C651 + 2 ) ) by L2931 , L2927 , L114;
L2933: ( R1 .walkOf (( D315 .last() ) , D316 , ( ( D315 .last() ) .adj D316 )) ) = ( R4 .cut (C651 , ( C651 + 2 )) ) by L2932 , L2926 , L2928 , L2898;
L2934: C651 <= ( C651 + 2 ) by L1;
thus L2935: thesis by L2934 , L2925 , L2927 , L2933 , L689;
end;
theorem
L2936: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B444 being  odd (Element of ( NAT )) holds (B444 <= ( len R4 ) implies ( R4 .cut (B444 , B444) ) = <* ( R4 .vertexAt B444 ) *>)))) by L727;
theorem
L2937: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (for R13 being (Element of ( NAT )) holds ((R13 is  odd & R13 <= R12) implies ( ( R4 .cut (1 , R12) ) .cut (1 , R13) ) = ( R4 .cut (1 , R13) )))))) by L733;
theorem
L2938: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (for B445 , B446 being  odd (Element of ( NAT )) holds ((B445 <= B446 & B446 <= ( len R5 ) & ( R5 .last() ) = ( R6 .first() )) implies ( ( R5 .append R6 ) .cut (B445 , B446) ) = ( R5 .cut (B445 , B446) )))))) by L763;
theorem
L2939: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B447 being  odd (Element of ( NAT )) holds (B447 <= ( len R4 ) implies ( len ( R4 .cut (1 , B447) ) ) = B447)))) by L790;
theorem
L2940: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B448 being  odd (Element of ( NAT )) holds (for B449 being (Element of ( NAT )) holds ((B449 in ( dom ( R4 .cut (1 , B448) ) ) & B448 <= ( len R4 )) implies ( ( R4 .cut (1 , B448) ) . B449 ) = ( R4 . B449 )))))) by L795;
theorem
L2941: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B450 , B451 being  odd (Element of ( NAT )) holds (for B452 being (Element of ( NAT )) holds ((B450 <= B451 & B451 <= ( len R4 ) & B452 in ( dom ( R4 .cut (B450 , B451) ) )) implies (( ( R4 .cut (B450 , B451) ) . B452 ) = ( R4 . ( ( B450 + B452 ) - 1 ) ) & ( ( B450 + B452 ) - 1 ) in ( dom R4 )))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C652 , C653 being  odd (Element of ( NAT ));
let C654 being (Element of ( NAT ));
assume that
L2942: C652 <= C653
and
L2943: C653 <= ( len R4 )
and
L2944: C654 in ( dom ( R4 .cut (C652 , C653) ) );
L2945: 1 <= C654 by L2944 , FINSEQ_3:25;
reconsider D317 = ( C654 - 1 ) as (Element of ( NAT )) by L2945 , INT_1:5;
L2946: C654 <= ( len ( R4 .cut (C652 , C653) ) ) by L2944 , FINSEQ_3:25;
L2947: D317 < ( ( len ( R4 .cut (C652 , C653) ) ) - ( 0 ) ) by L2946 , XREAL_1:15;
L2948: ( D317 + 1 ) = C654;
L2949: ( ( R4 .cut (C652 , C653) ) . C654 ) = ( R4 . ( C652 + D317 ) ) by L2948 , L2942 , L2943 , L2947 , L664;
thus L2950: thesis by L2949 , L2942 , L2943 , L2947 , L664;
end;
theorem
L2951: (for R2 being _Graph holds (for R3 being _Graph holds (for B453 being (Walk of R2) holds (for B454 being (Walk of R3) holds (for B455 , B456 being (Element of ( NAT )) holds (B453 = B454 implies ( B453 .cut (B455 , B456) ) = ( B454 .cut (B455 , B456) )))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C655 being (Walk of R2);
let C656 being (Walk of R3);
let C657 , C658 being (Element of ( NAT ));
assume L2952: C655 = C656;
L2953:
now
per cases ;
suppose L2954: (C657 is  odd & C658 is  odd & C657 <= C658 & C658 <= ( len C655 ));

thus L2955: ( C655 .cut (C657 , C658) ) = ( (C657 , C658) -cut C656 ) by L2954 , L2952 , L226
.= ( C656 .cut (C657 , C658) ) by L2952 , L2954 , L226;
end;
suppose L2956: (not (C657 is  odd & C658 is  odd & C657 <= C658 & C658 <= ( len C655 )));

thus L2957: ( C655 .cut (C657 , C658) ) = C656 by L2956 , L2952 , L226
.= ( C656 .cut (C657 , C658) ) by L2952 , L2956 , L226;
end;
end;
thus L2959: thesis by L2953;
end;
theorem
L2960: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B457 , B458 being  odd (Element of ( NAT )) holds ((B457 <= B458 & B458 <= ( len R4 ) & ( R4 . B457 ) = ( R4 . B458 )) implies ( ( len ( R4 .remove (B457 , B458) ) ) + B458 ) = ( ( len R4 ) + B457 ))))) by L804;
theorem
L2961: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (for R12 being (Element of ( NAT )) holds (for R13 being (Element of ( NAT )) holds (R4 is_Walk_from R8 , R9 implies ( R4 .remove (R13 , R12) ) is_Walk_from R8 , R9))))))) by L817;
theorem
L2962: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (for R13 being (Element of ( NAT )) holds ( len ( R4 .remove (R13 , R12) ) ) <= ( len R4 ))))) by L832;
theorem
L2963: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R13 being (Element of ( NAT )) holds ( R4 .remove (R13 , R13) ) = R4))) by L842;
theorem
L2964: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B459 , B460 being  odd (Element of ( NAT )) holds ((B459 <= B460 & B460 <= ( len R4 ) & ( R4 . B459 ) = ( R4 . B460 )) implies ( ( R4 .cut (1 , B459) ) .last() ) = ( ( R4 .cut (B460 , ( len R4 )) ) .first() ))))) by L851;
theorem
L2965: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B461 , B462 being  odd (Element of ( NAT )) holds ((B461 <= B462 & B462 <= ( len R4 ) & ( R4 . B461 ) = ( R4 . B462 )) implies (for B463 being (Element of ( NAT )) holds (B463 in ( Seg B461 ) implies ( ( R4 .remove (B461 , B462) ) . B463 ) = ( R4 . B463 ))))))) by L858;
theorem
L2966: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B464 , B465 being  odd (Element of ( NAT )) holds ((B464 <= B465 & B465 <= ( len R4 ) & ( R4 . B464 ) = ( R4 . B465 )) implies (for B466 being (Element of ( NAT )) holds ((B464 <= B466 & B466 <= ( len ( R4 .remove (B464 , B465) ) )) implies (( ( R4 .remove (B464 , B465) ) . B466 ) = ( R4 . ( ( B466 - B464 ) + B465 ) ) & ( ( B466 - B464 ) + B465 ) is (Element of ( NAT )) & ( ( B466 - B464 ) + B465 ) <= ( len R4 )))))))) by L869;
theorem
L2967: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B467 , B468 being  odd (Element of ( NAT )) holds ((B467 <= B468 & B468 <= ( len R4 ) & ( R4 . B467 ) = ( R4 . B468 )) implies ( len ( R4 .remove (B467 , B468) ) ) = ( ( ( len R4 ) + B467 ) - B468 ))))) by L891;
theorem
L2968: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B469 being (Element of ( NAT )) holds (( R4 . B469 ) = ( R4 .last() ) implies ( R4 .remove (B469 , ( len R4 )) ) = ( R4 .cut (1 , B469) )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C659 being (Element of ( NAT ));
assume L2969: ( R4 . C659 ) = ( R4 .last() );
L2970:
now
per cases ;
suppose L2971: (C659 is  odd & C659 <= ( len R4 ));

L2972: ( ( len ( R4 .remove (C659 , ( len R4 )) ) ) + ( len R4 ) ) = ( ( len R4 ) + C659 ) by L2971 , L2969 , L804;
L2973: ( len ( R4 .remove (C659 , ( len R4 )) ) ) = ( len ( R4 .cut (1 , C659) ) ) by L2972 , L2971 , L790;
L2974:
now
let C660 being Nat;
assume that
L2975: 1 <= C660
and
L2976: C660 <= ( len ( R4 .remove (C659 , ( len R4 )) ) );
L2977: C660 in ( dom ( R4 .cut (1 , C659) ) ) by L2973 , L2975 , L2976 , FINSEQ_3:25;
L2978: C660 in ( Seg C659 ) by L2972 , L2975 , L2976 , FINSEQ_1:1;
thus L2979: ( ( R4 .remove (C659 , ( len R4 )) ) . C660 ) = ( R4 . C660 ) by L2978 , L2969 , L2971 , L858
.= ( ( R4 .cut (1 , C659) ) . C660 ) by L2971 , L2977 , L795;
end;
thus L2980: thesis by L2974 , L2973 , FINSEQ_1:14;
end;
suppose L2981: (not (C659 is  odd & C659 <= ( len R4 )));

L2982: ( R4 .cut (1 , C659) ) = R4 by L2981 , L226;
thus L2983: thesis by L2982 , L2981 , L259;
end;
end;
thus L2985: thesis by L2970;
end;
theorem
L2986: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B470 being (Element of ( NAT )) holds (( R4 .first() ) = ( R4 . B470 ) implies ( R4 .remove (1 , B470) ) = ( R4 .cut (B470 , ( len R4 )) ))))) by L897;
theorem
L2987: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (for R13 being (Element of ( NAT )) holds (( ( R4 .remove (R13 , R12) ) .first() ) = ( R4 .first() ) & ( ( R4 .remove (R13 , R12) ) .last() ) = ( R4 .last() )))))) by L932;
theorem
L2988: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B471 , B472 being  odd (Element of ( NAT )) holds (for B473 being (Element of ( NAT )) holds ((B471 <= B472 & B472 <= ( len R4 ) & ( R4 . B471 ) = ( R4 . B472 ) & B473 in ( dom ( R4 .remove (B471 , B472) ) )) implies (B473 in ( Seg B471 ) or (B471 <= B473 & B473 <= ( len ( R4 .remove (B471 , B472) ) )))))))) by L936;
theorem
L2989: (for R2 being _Graph holds (for R3 being _Graph holds (for B474 being (Walk of R2) holds (for B475 being (Walk of R3) holds (for B476 , B477 being (Element of ( NAT )) holds (B474 = B475 implies ( B474 .remove (B476 , B477) ) = ( B475 .remove (B476 , B477) )))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C661 being (Walk of R2);
let C662 being (Walk of R3);
let C663 , C664 being (Element of ( NAT ));
assume L2990: C661 = C662;
L2991:
now
per cases ;
suppose L2992: (C663 is  odd & C664 is  odd & C663 <= C664 & C664 <= ( len C661 ) & ( C661 . C663 ) = ( C661 . C664 ));

L2993: ( C661 .cut (C664 , ( len C661 )) ) = ( C662 .cut (C664 , ( len C662 )) ) by L2990 , L2951;
L2994: ( C661 .cut (1 , C663) ) = ( C662 .cut (1 , C663) ) by L2990 , L2951;
L2995: ( C661 .remove (C663 , C664) ) = ( ( C661 .cut (1 , C663) ) .append ( C661 .cut (C664 , ( len C661 )) ) ) by L2992 , L259;
L2996: ( C661 .remove (C663 , C664) ) = ( ( C662 .cut (1 , C663) ) .append ( C662 .cut (C664 , ( len C662 )) ) ) by L2995 , L2994 , L2993 , L2882;
thus L2997: thesis by L2996 , L2990 , L2992 , L259;
end;
suppose L2998: (not (C663 is  odd & C664 is  odd & C663 <= C664 & C664 <= ( len C661 ) & ( C661 . C663 ) = ( C661 . C664 )));

thus L2999: ( C661 .remove (C663 , C664) ) = C662 by L2998 , L2990 , L259
.= ( C662 .remove (C663 , C664) ) by L2990 , L2998 , L259;
end;
end;
thus L3001: thesis by L2991;
end;
theorem
L3002: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( R4 .addEdge R7 ) = ( R4 ^ <* R7 , R8 *> )))))) by L940;
theorem
L3003: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies (( ( R4 .addEdge R7 ) .first() ) = ( R4 .first() ) & ( ( R4 .addEdge R7 ) .last() ) = R8 & ( R4 .addEdge R7 ) is_Walk_from ( R4 .first() ) , R8)))))) by L953;
theorem
L3004: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( len ( R4 .addEdge R7 ) ) = ( ( len R4 ) + 2 )))))) by L959;
theorem
L3005: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies (( ( R4 .addEdge R7 ) . ( ( len R4 ) + 1 ) ) = R7 & ( ( R4 .addEdge R7 ) . ( ( len R4 ) + 2 ) ) = R8 & (for B478 being (Element of ( NAT )) holds (B478 in ( dom R4 ) implies ( ( R4 .addEdge R7 ) . B478 ) = ( R4 . B478 ))))))))) by L967;
theorem
L3006: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (for R10 being set holds ((R4 is_Walk_from R8 , R9 & R7 Joins R9 , R10 , R1) implies ( R4 .addEdge R7 ) is_Walk_from R8 , R10))))))) by L979;
theorem
L3007: (for R1 being _Graph holds (for R4 being (Walk of R1) holds 1 <= ( len ( R4 .vertexSeq() ) )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3008:
now
assume L3009: ( len ( R4 .vertexSeq() ) ) < 1;
L3010: ( len ( R4 .vertexSeq() ) ) < ( ( 0 ) + 1 ) by L3009;
L3011: ( len ( R4 .vertexSeq() ) ) = ( 0 ) by L3010 , NAT_1:13;
L3012: ( ( len R4 ) + 1 ) = ( 2 * ( 0 ) ) by L3011 , L262;
thus L3013: contradiction by L3012;
end;
thus L3014: thesis by L3008;
end;
theorem
L3015: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B479 being  odd (Element of ( NAT )) holds (B479 <= ( len R4 ) implies (( ( 2 * ( ( B479 + 1 ) div 2 ) ) - 1 ) = B479 & 1 <= ( ( B479 + 1 ) div 2 ) & ( ( B479 + 1 ) div 2 ) <= ( len ( R4 .vertexSeq() ) ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C665 being  odd (Element of ( NAT ));
assume L3016: C665 <= ( len R4 );
set D318 = ( ( C665 + 1 ) div 2 );
L3017: 2 divides ( C665 + 1 ) by PEPIN:22;
L3018: ( 2 * D318 ) = ( C665 + 1 ) by L3017 , NAT_D:3;
thus L3019: ( ( 2 * D318 ) - 1 ) = C665 by L3018;
L3020:
now
assume L3021: D318 < 1;
L3022: D318 < ( ( 0 ) + 1 ) by L3021;
L3023: D318 = ( 0 ) by L3022 , NAT_1:13;
thus L3024: contradiction by L3023 , L3018;
end;
reconsider D319 = ( D318 - 1 ) as (Element of ( NAT )) by L3020 , INT_1:5;
thus L3025: 1 <= D318 by L3020;
L3026:
now
assume L3027: ( len ( R4 .vertexSeq() ) ) < D318;
L3028: ( len ( R4 .vertexSeq() ) ) < ( D319 + 1 ) by L3027;
L3029: ( len ( R4 .vertexSeq() ) ) <= D319 by L3028 , NAT_1:13;
L3030: ( 2 * ( len ( R4 .vertexSeq() ) ) ) <= ( 2 * D319 ) by L3029 , NAT_1:4;
L3031: ( ( len R4 ) + 1 ) <= ( ( 2 * D318 ) - ( 2 * 1 ) ) by L3030 , L262;
L3032: ( ( ( len R4 ) + 1 ) + 2 ) <= ( ( ( C665 + 1 ) - 2 ) + 2 ) by L3031 , L3018 , XREAL_1:7;
L3033: ( ( ( len R4 ) + 1 ) + 2 ) < ( ( C665 + 1 ) + 1 ) by L3032 , NAT_1:13;
L3034: ( ( ( len R4 ) + 3 ) - 3 ) < ( ( C665 + 2 ) - 2 ) by L3033 , XREAL_1:14;
thus L3035: contradiction by L3034 , L3016;
end;
thus L3036: thesis by L3026;
end;
theorem
L3037: (for R1 being _Graph holds (for R11 being (Vertex of R1) holds ( ( R1 .walkOf R11 ) .vertexSeq() ) = <* R11 *>))
proof
let R1 being _Graph;
let R11 being (Vertex of R1);
set D320 = ( ( R1 .walkOf R11 ) .vertexSeq() );
L3038: ( ( len ( R1 .walkOf R11 ) ) + 1 ) = ( 2 * ( len D320 ) ) by L262;
L3039: ( 1 + 1 ) = ( 2 * ( len D320 ) ) by L3038 , L2798;
L3040: ( D320 . 1 ) = ( ( R1 .walkOf R11 ) . ( ( 2 * 1 ) - 1 ) ) by L3039 , L262
.= R11 by L2798;
thus L3041: thesis by L3040 , L3039 , FINSEQ_1:40;
end;
theorem
L3042: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 implies ( ( R1 .walkOf (R8 , R7 , R9) ) .vertexSeq() ) = <* R8 , R9 *>)))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
set D321 = ( R1 .walkOf (R8 , R7 , R9) );
assume L3043: R7 Joins R8 , R9 , R1;
L3044: D321 = <* R8 , R7 , R9 *> by L3043 , L76;
L3045: ( ( len D321 ) + 1 ) = ( 2 * ( len ( D321 .vertexSeq() ) ) ) by L262;
L3046: ( 3 + 1 ) = ( 2 * ( len ( D321 .vertexSeq() ) ) ) by L3045 , L3044 , FINSEQ_1:45;
L3047: ( ( D321 .vertexSeq() ) . 2 ) = ( D321 . ( ( 2 * 2 ) - 1 ) ) by L3046 , L262;
L3048: ( ( D321 .vertexSeq() ) . 2 ) = R9 by L3047 , L3044 , FINSEQ_1:45;
L3049: ( ( D321 .vertexSeq() ) . 1 ) = ( D321 . ( ( 2 * 1 ) - 1 ) ) by L3046 , L262;
L3050: ( ( D321 .vertexSeq() ) . 1 ) = R8 by L3049 , L3044 , FINSEQ_1:45;
thus L3051: thesis by L3050 , L3046 , L3048 , FINSEQ_1:44;
end;
theorem
L3052: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( R4 .first() ) = ( ( R4 .vertexSeq() ) . 1 ) & ( R4 .last() ) = ( ( R4 .vertexSeq() ) . ( len ( R4 .vertexSeq() ) ) ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3053: ( ( len R4 ) + 1 ) = ( 2 * ( len ( R4 .vertexSeq() ) ) ) by L262;
L3054: 1 <= ( len ( R4 .vertexSeq() ) ) by L3007;
L3055: ( ( R4 .vertexSeq() ) . 1 ) = ( R4 . ( ( 2 * 1 ) - 1 ) ) by L3054 , L262;
thus L3056: ( ( R4 .vertexSeq() ) . 1 ) = ( R4 .first() ) by L3055;
L3057: ( ( R4 .vertexSeq() ) . ( len ( R4 .vertexSeq() ) ) ) = ( R4 . ( ( 2 * ( len ( R4 .vertexSeq() ) ) ) - 1 ) ) by L3054 , L262;
thus L3058: thesis by L3057 , L3053;
end;
theorem
L3059: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B480 being  odd (Element of ( NAT )) holds (B480 <= ( len R4 ) implies ( R4 .vertexAt B480 ) = ( ( R4 .vertexSeq() ) . ( ( B480 + 1 ) div 2 ) )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C666 being  odd (Element of ( NAT ));
set D322 = ( ( C666 + 1 ) div 2 );
assume L3060: C666 <= ( len R4 );
L3061: ( ( 2 * D322 ) - 1 ) = C666 by L3060 , L3015;
L3062: D322 <= ( len ( R4 .vertexSeq() ) ) by L3060 , L3015;
L3063: 1 <= D322 by L3060 , L3015;
L3064: ( R4 .vertexAt C666 ) = ( R4 . C666 ) by L3060 , L114;
thus L3065: thesis by L3064 , L3061 , L3063 , L3062 , L262;
end;
theorem
L3066: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom ( R4 .vertexSeq() ) ) iff ( ( 2 * R12 ) - 1 ) in ( dom R4 )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R12 being (Element of ( NAT ));
thus L3067:now
assume L3068: R12 in ( dom ( R4 .vertexSeq() ) );
L3069: 1 <= R12 by L3068 , FINSEQ_3:25;
L3070: 1 <= ( R12 + R12 ) by L3069 , NAT_1:12;
L3071: ( ( 2 * R12 ) - 1 ) is (Element of ( NAT )) by L3070 , INT_1:5;
L3072: R12 <= ( len ( R4 .vertexSeq() ) ) by L3068 , FINSEQ_3:25;
L3073: ( 2 * R12 ) <= ( 2 * ( len ( R4 .vertexSeq() ) ) ) by L3072 , XREAL_1:64;
L3074: ( 2 * R12 ) <= ( ( len R4 ) + 1 ) by L3073 , L262;
L3075: ( ( 2 * R12 ) - 1 ) <= ( ( ( len R4 ) + 1 ) - 1 ) by L3074 , XREAL_1:13;
L3076: ( 2 * 1 ) <= ( 2 * R12 ) by L3069 , XREAL_1:64;
L3077: ( 2 - 1 ) <= ( ( 2 * R12 ) - 1 ) by L3076 , XREAL_1:13;
thus L3078: ( ( 2 * R12 ) - 1 ) in ( dom R4 ) by L3077 , L3075 , L3071 , FINSEQ_3:25;
end;
assume L3079: ( ( 2 * R12 ) - 1 ) in ( dom R4 );
reconsider D323 = ( ( 2 * R12 ) - 1 ) as (Element of ( NAT )) by L3079;
L3080: 1 <= D323 by L3079 , FINSEQ_3:25;
L3081: ( 1 + 1 ) <= ( ( ( 2 * R12 ) - 1 ) + 1 ) by L3080 , XREAL_1:7;
L3082: ( 2 * 1 ) <= ( 2 * R12 ) by L3081;
L3083: 1 <= R12 by L3082 , XREAL_1:68;
L3084: D323 <= ( len R4 ) by L3079 , FINSEQ_3:25;
L3085: ( ( ( 2 * R12 ) - 1 ) + 1 ) <= ( ( len R4 ) + 1 ) by L3084 , XREAL_1:7;
L3086: ( 2 * R12 ) <= ( 2 * ( len ( R4 .vertexSeq() ) ) ) by L3085 , L262;
L3087: R12 <= ( len ( R4 .vertexSeq() ) ) by L3086 , XREAL_1:68;
thus L3088: thesis by L3087 , L3083 , FINSEQ_3:25;
end;
theorem
L3089: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds ( ( R4 .cut (1 , R12) ) .vertexSeq() ) c= ( R4 .vertexSeq() ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R12 being (Element of ( NAT ));
L3090:
now
per cases ;
suppose L3091: (R12 is  odd & 1 <= R12 & R12 <= ( len R4 ));

set D324 = ( ( R4 .cut (1 , R12) ) .vertexSeq() );
L3092:
now
let C667 being set;
assume L3093: C667 in D324;
consider C668 , C669 being set such that L3094: C667 = [ C668 , C669 ] by L3093 , RELAT_1:def 1;
L3095: C669 = ( D324 . C668 ) by L3093 , L3094 , FUNCT_1:1;
L3096: C668 in ( dom D324 ) by L3093 , L3094 , FUNCT_1:1;
reconsider D325 = C668 as (Element of ( NAT )) by L3096;
L3097: D325 <= ( len D324 ) by L3096 , FINSEQ_3:25;
L3098: ( ( 2 * D325 ) - 1 ) in ( dom ( R4 .cut (1 , R12) ) ) by L3096 , L3066;
L3099: ( ( 2 * D325 ) - 1 ) <= ( len ( R4 .cut (1 , R12) ) ) by L3098 , FINSEQ_3:25;
L3100: ( ( 2 * D325 ) - 1 ) <= R12 by L3099 , L3091 , L790;
L3101: ( ( 2 * D325 ) - 1 ) <= ( len R4 ) by L3100 , L3091 , XXREAL_0:2;
L3102: 1 <= ( ( 2 * D325 ) - 1 ) by L3098 , FINSEQ_3:25;
L3103: ( ( 2 * D325 ) - 1 ) in ( dom R4 ) by L3102 , L3098 , L3101 , FINSEQ_3:25;
L3104: D325 in ( dom ( R4 .vertexSeq() ) ) by L3103 , L3066;
L3105: D325 <= ( len ( R4 .vertexSeq() ) ) by L3104 , FINSEQ_3:25;
L3106: 1 <= D325 by L3096 , FINSEQ_3:25;
L3107: C669 = ( ( R4 .cut (1 , R12) ) . ( ( 2 * D325 ) - 1 ) ) by L3106 , L3095 , L3097 , L262;
L3108: C669 = ( R4 . ( ( 2 * D325 ) - 1 ) ) by L3107 , L3091 , L3098 , L795;
L3109: 1 <= D325 by L3104 , FINSEQ_3:25;
L3110: ( ( R4 .vertexSeq() ) . D325 ) = C669 by L3109 , L3108 , L3105 , L262;
thus L3111: C667 in ( R4 .vertexSeq() ) by L3110 , L3094 , L3104 , FUNCT_1:1;
end;
thus L3112: thesis by L3092 , TARSKI:def 3;
end;
suppose L3113: (not (R12 is  odd & 1 <= R12 & R12 <= ( len R4 )));

thus L3114: thesis by L3113 , L226;
end;
end;
thus L3116: thesis by L3090;
end;
theorem
L3117: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( ( R4 .addEdge R7 ) .vertexSeq() ) = ( ( R4 .vertexSeq() ) ^ <* R8 *> ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
let R8 being set;
set D326 = ( R4 .addEdge R7 );
set D327 = ( ( R4 .vertexSeq() ) ^ <* R8 *> );
assume L3118: R7 Joins ( R4 .last() ) , R8 , R1;
L3119: ( len D326 ) = ( ( len R4 ) + 2 ) by L3118 , L959;
L3120: ( ( ( len R4 ) + 2 ) + 1 ) = ( 2 * ( len ( D326 .vertexSeq() ) ) ) by L3119 , L262;
L3121: ( len D327 ) = ( ( len ( R4 .vertexSeq() ) ) + ( len <* R8 *> ) ) by FINSEQ_1:22;
L3122: ( len D327 ) = ( ( len ( R4 .vertexSeq() ) ) + 1 ) by L3121 , FINSEQ_1:39;
L3123: ( 2 * ( len D327 ) ) = ( ( 2 * ( len ( R4 .vertexSeq() ) ) ) + ( 2 * 1 ) ) by L3122;
L3124: ( 2 * ( len D327 ) ) = ( ( ( len R4 ) + 1 ) + 2 ) by L3123 , L262
.= ( 2 * ( len ( D326 .vertexSeq() ) ) ) by L3120;
L3125:
now
let C670 being Nat;
assume that
L3126: 1 <= C670
and
L3127: C670 <= ( len ( D326 .vertexSeq() ) );
L3128: ( ( D326 .vertexSeq() ) . C670 ) = ( D326 . ( ( 2 * C670 ) - 1 ) ) by L3126 , L3127 , L262;
L3129: C670 in ( dom D327 ) by L3124 , L3126 , L3127 , FINSEQ_3:25;
L3130:
now
per cases  by L3129 , FINSEQ_1:25;
suppose L3131: C670 in ( dom ( R4 .vertexSeq() ) );

L3132: ( ( 2 * C670 ) - 1 ) in ( dom R4 ) by L3131 , L3066;
L3133: 1 <= C670 by L3131 , FINSEQ_3:25;
L3134: C670 <= ( len ( R4 .vertexSeq() ) ) by L3131 , FINSEQ_3:25;
L3135: ( D327 . C670 ) = ( ( R4 .vertexSeq() ) . C670 ) by L3131 , FINSEQ_1:def 7;
L3136: ( D327 . C670 ) = ( R4 . ( ( 2 * C670 ) - 1 ) ) by L3135 , L3133 , L3134 , L262;
thus L3137: ( ( D326 .vertexSeq() ) . C670 ) = ( D327 . C670 ) by L3136 , L3118 , L3128 , L3132 , L967;
end;
suppose L3138: (ex B481 being Nat st (B481 in ( dom <* R8 *> ) & C670 = ( ( len ( R4 .vertexSeq() ) ) + B481 )));

consider C671 being Nat such that L3139: C671 in ( dom <* R8 *> ) and L3140: C670 = ( ( len ( R4 .vertexSeq() ) ) + C671 ) by L3138;
L3141: C671 in ( Seg 1 ) by L3139 , FINSEQ_1:38;
L3142: C671 = 1 by L3141 , FINSEQ_1:2 , TARSKI:def 1;
L3143: ( 2 * C670 ) = ( ( 2 * ( len ( R4 .vertexSeq() ) ) ) + ( 2 * 1 ) ) by L3142 , L3140
.= ( ( ( len R4 ) + 1 ) + 2 ) by L262
.= ( ( ( len R4 ) + 2 ) + 1 );
L3144: ( D327 . C670 ) = ( <* R8 *> . 1 ) by L3139 , L3140 , L3142 , FINSEQ_1:def 7
.= R8 by FINSEQ_1:def 8;
thus L3145: ( ( D326 .vertexSeq() ) . C670 ) = ( D327 . C670 ) by L3144 , L3118 , L3128 , L3143 , L967;
end;
end;
thus L3147: ( ( D326 .vertexSeq() ) . C670 ) = ( D327 . C670 ) by L3130;
end;
thus L3148: thesis by L3125 , L3124 , FINSEQ_1:14;
end;
theorem
L3149: (for R2 being _Graph holds (for R3 being _Graph holds (for B482 being (Walk of R2) holds (for B483 being (Walk of R3) holds (B482 = B483 implies ( B482 .vertexSeq() ) = ( B483 .vertexSeq() ))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C672 being (Walk of R2);
let C673 being (Walk of R3);
set D328 = ( C672 .vertexSeq() );
set D329 = ( C673 .vertexSeq() );
assume L3150: C672 = C673;
L3151:
now
thus L3152: ( len D328 ) = ( len D328 );
L3153: ( 2 * ( len D328 ) ) = ( ( len C673 ) + 1 ) by L3150 , L262
.= ( 2 * ( len D329 ) ) by L262;
thus L3154: ( len D329 ) = ( len D328 ) by L3153;
let C674 being Nat;
assume L3155: C674 in ( dom D328 );
L3156: C674 <= ( len D329 ) by L3155 , L3153 , FINSEQ_3:25;
L3157: 1 <= C674 by L3155 , FINSEQ_3:25;
L3158: C674 <= ( len D328 ) by L3155 , FINSEQ_3:25;
thus L3159: ( D328 . C674 ) = ( C673 . ( ( 2 * C674 ) - 1 ) ) by L3158 , L3150 , L3157 , L262
.= ( D329 . C674 ) by L3157 , L3156 , L262;
end;
thus L3160: thesis by L3151 , FINSEQ_2:9;
end;
theorem
L3161: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B484 being  even (Element of ( NAT )) holds ((1 <= B484 & B484 <= ( len R4 )) implies (( B484 div 2 ) in ( dom ( R4 .edgeSeq() ) ) & ( R4 . B484 ) = ( ( R4 .edgeSeq() ) . ( B484 div 2 ) )))))) by L985;
theorem
L3162: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (R12 in ( dom ( R4 .edgeSeq() ) ) iff ( 2 * R12 ) in ( dom R4 ))))) by L1009;
theorem
L3163: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B485 being (Element of ( NAT )) holds (B485 in ( dom ( R4 .edgeSeq() ) ) implies ( ( R4 .edgeSeq() ) . B485 ) in ( the_Edges_of R1 )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C675 being (Element of ( NAT ));
assume L3164: C675 in ( dom ( R4 .edgeSeq() ) );
L3165: ( ( R4 .edgeSeq() ) . C675 ) in ( rng ( R4 .edgeSeq() ) ) by L3164 , FUNCT_1:def 3;
thus L3166: thesis by L3165;
end;
theorem
L3167: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (ex B486 being  even (Element of ( NAT )) st (B486 = ( ( len R4 ) - 1 ) & ( len ( R4 .edgeSeq() ) ) = ( B486 div 2 ))))) by L1024;
theorem
L3168: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds ( ( R4 .cut (1 , R12) ) .edgeSeq() ) c= ( R4 .edgeSeq() )))) by L1030;
theorem
L3169: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( ( R4 .addEdge R7 ) .edgeSeq() ) = ( ( R4 .edgeSeq() ) ^ <* R7 *> )))))) by L1056;
theorem
L3170: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 iff ( ( R1 .walkOf (R8 , R7 , R9) ) .edgeSeq() ) = <* R7 *>)))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
set D330 = ( R1 .walkOf (R8 , R7 , R9) );
thus L3171:now
assume L3172: R7 Joins R8 , R9 , R1;
L3173: ( len D330 ) = 3 by L3172 , L2803;
L3174: ( 2 + 1 ) = ( ( 2 * ( len ( D330 .edgeSeq() ) ) ) + 1 ) by L3173 , L314;
L3175: D330 = <* R8 , R7 , R9 *> by L3172 , L76;
L3176:
now
let C676 being Nat;
assume that
L3177: 1 <= C676
and
L3178: C676 <= ( len ( D330 .edgeSeq() ) );
L3179: C676 = 1 by L3174 , L3177 , L3178 , XXREAL_0:1;
L3180: ( ( D330 .edgeSeq() ) . C676 ) = ( D330 . ( 2 * 1 ) ) by L3179 , L3178 , L314
.= R7 by L3175 , FINSEQ_1:45;
thus L3181: ( ( D330 .edgeSeq() ) . C676 ) = ( <* R7 *> . C676 ) by L3180 , L3179 , FINSEQ_1:def 8;
end;
L3182: ( len ( D330 .edgeSeq() ) ) = ( len <* R7 *> ) by L3174 , FINSEQ_1:39;
thus L3183: ( D330 .edgeSeq() ) = <* R7 *> by L3182 , L3176 , FINSEQ_1:14;
end;
assume L3184: ( D330 .edgeSeq() ) = <* R7 *>;
L3185: ( len ( D330 .edgeSeq() ) ) = 1 by L3184 , FINSEQ_1:39;
L3186: ( len D330 ) = ( ( 2 * 1 ) + 1 ) by L3185 , L314;
L3187:
now
assume L3188: (not R7 Joins R8 , R9 , R1);
L3189: D330 = ( R1 .walkOf ( choose ( the_Vertices_of R1 ) ) ) by L3188 , L76;
thus L3190: contradiction by L3189 , L3186 , L2798;
end;
thus L3191: thesis by L3187;
end;
theorem
L3192: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( ( R4 .reverse() ) .edgeSeq() ) = ( Rev ( R4 .edgeSeq() ) )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
set D331 = ( ( R4 .reverse() ) .edgeSeq() );
set D332 = ( Rev ( R4 .edgeSeq() ) );
L3193: ( len R4 ) = ( len ( R4 .reverse() ) ) by FINSEQ_5:def 3;
L3194: ( len R4 ) = ( ( 2 * ( len ( R4 .edgeSeq() ) ) ) + 1 ) by L314;
L3195: ( ( 2 * ( len ( R4 .edgeSeq() ) ) ) + 1 ) = ( ( 2 * ( len D331 ) ) + 1 ) by L3194 , L3193 , L314;
L3196:
now
let C677 being Nat;
assume that
L3197: 1 <= C677
and
L3198: C677 <= ( len D331 );
L3199: ( D331 . C677 ) = ( ( R4 .reverse() ) . ( 2 * C677 ) ) by L3197 , L3198 , L314;
set D333 = ( ( ( len ( R4 .edgeSeq() ) ) - C677 ) + 1 );
reconsider D334 = D333 as (Element of ( NAT )) by L3195 , L3198 , FINSEQ_5:1;
L3200: C677 in ( Seg ( len ( R4 .edgeSeq() ) ) ) by L3195 , L3197 , L3198 , FINSEQ_1:1;
L3201: D334 in ( Seg ( len ( R4 .edgeSeq() ) ) ) by L3200 , FINSEQ_5:2;
L3202: 1 <= D334 by L3201 , FINSEQ_1:1;
L3203: C677 in ( dom ( R4 .edgeSeq() ) ) by L3200 , FINSEQ_1:def 3;
L3204: ( 2 * C677 ) in ( dom R4 ) by L3203 , L1009;
L3205: 1 <= ( 2 * C677 ) by L3204 , FINSEQ_3:25;
L3206: D334 <= ( len ( R4 .edgeSeq() ) ) by L3201 , FINSEQ_1:1;
L3207: ( ( ( len R4 ) - ( 2 * C677 ) ) + 1 ) = ( ( ( ( 2 * ( len ( R4 .edgeSeq() ) ) ) + 1 ) - ( 2 * C677 ) ) + 1 ) by L314
.= ( 2 * D334 );
L3208: ( 2 * C677 ) <= ( len ( R4 .reverse() ) ) by L3193 , L3204 , FINSEQ_3:25;
L3209: ( 2 * C677 ) in ( dom ( R4 .reverse() ) ) by L3208 , L3205 , FINSEQ_3:25;
L3210: ( D332 . C677 ) = ( ( R4 .edgeSeq() ) . D334 ) by L3203 , FINSEQ_5:58
.= ( R4 . ( 2 * D334 ) ) by L3202 , L3206 , L314;
thus L3211: ( D331 . C677 ) = ( D332 . C677 ) by L3210 , L3209 , L3199 , L3207 , L570;
end;
L3212: ( len D331 ) = ( len D332 ) by L3195 , FINSEQ_5:def 3;
thus L3213: thesis by L3212 , L3196 , FINSEQ_1:14;
end;
theorem
L3214: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies ( ( R5 .append R6 ) .edgeSeq() ) = ( ( R5 .edgeSeq() ) ^ ( R6 .edgeSeq() ) )))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
set D335 = ( R5 .append R6 );
set D336 = ( ( R5 .edgeSeq() ) ^ ( R6 .edgeSeq() ) );
L3215: ( len D336 ) = ( ( len ( R5 .edgeSeq() ) ) + ( len ( R6 .edgeSeq() ) ) ) by FINSEQ_1:22;
assume L3216: ( R5 .last() ) = ( R6 .first() );
L3217: ( ( len D335 ) + 1 ) = ( ( len R5 ) + ( len R6 ) ) by L3216 , L577;
L3218: ( ( len D335 ) + 1 ) = ( ( len R5 ) + ( ( 2 * ( len ( R6 .edgeSeq() ) ) ) + 1 ) ) by L3217 , L314
.= ( ( ( len R5 ) + ( 2 * ( len ( R6 .edgeSeq() ) ) ) ) + 1 );
L3219: ( ( 2 * ( len ( D335 .edgeSeq() ) ) ) + 1 ) = ( ( 2 * ( len ( R6 .edgeSeq() ) ) ) + ( len R5 ) ) by L3218 , L314
.= ( ( 2 * ( len ( R6 .edgeSeq() ) ) ) + ( ( 2 * ( len ( R5 .edgeSeq() ) ) ) + 1 ) ) by L314
.= ( ( ( 2 * ( len ( R6 .edgeSeq() ) ) ) + ( 2 * ( len ( R5 .edgeSeq() ) ) ) ) + 1 );
L3220: D335 = ( R5 ^' R6 ) by L3216 , L156;
L3221:
now
let C678 being Nat;
assume that
L3222: 1 <= C678
and
L3223: C678 <= ( len ( D335 .edgeSeq() ) );
reconsider D337 = C678 as (Element of ( NAT )) by ORDINAL1:def 12;
L3224: ( ( D335 .edgeSeq() ) . D337 ) = ( D335 . ( 2 * D337 ) ) by L3222 , L3223 , L314;
L3225: D337 in ( dom D336 ) by L3215 , L3219 , L3222 , L3223 , FINSEQ_3:25;
L3226:
now
per cases  by L3225 , FINSEQ_1:25;
suppose L3227: C678 in ( dom ( R5 .edgeSeq() ) );

L3228: C678 <= ( len ( R5 .edgeSeq() ) ) by L3227 , FINSEQ_3:25;
L3229: 1 <= C678 by L3227 , FINSEQ_3:25;
L3230: ( 2 * C678 ) in ( dom R5 ) by L3227 , L1009;
L3231: 1 <= ( 2 * C678 ) by L3230 , FINSEQ_3:25;
L3232: ( 2 * C678 ) <= ( len R5 ) by L3230 , FINSEQ_3:25;
L3233: ( D336 . C678 ) = ( ( R5 .edgeSeq() ) . C678 ) by L3227 , FINSEQ_1:def 7
.= ( R5 . ( 2 * C678 ) ) by L3229 , L3228 , L314;
thus L3234: ( ( D335 .edgeSeq() ) . C678 ) = ( D336 . C678 ) by L3233 , L3220 , L3224 , L3231 , L3232 , GRAPH_2:14;
end;
suppose L3235: (ex B487 being Nat st (B487 in ( dom ( R6 .edgeSeq() ) ) & C678 = ( ( len ( R5 .edgeSeq() ) ) + B487 )));

consider C679 being Nat such that L3236: C679 in ( dom ( R6 .edgeSeq() ) ) and L3237: C678 = ( ( len ( R5 .edgeSeq() ) ) + C679 ) by L3235;
L3238: ( ( 2 * C678 ) + 1 ) = ( ( 2 * C679 ) + ( ( 2 * ( len ( R5 .edgeSeq() ) ) ) + 1 ) ) by L3237
.= ( ( 2 * C679 ) + ( len R5 ) ) by L314;
L3239: ( 2 * C678 ) = ( ( len R5 ) + ( ( 2 * C679 ) - 1 ) ) by L3238;
L3240: 1 <= C679 by L3236 , FINSEQ_3:25;
L3241: 1 <= ( C679 + C679 ) by L3240 , NAT_1:12;
reconsider D338 = ( ( 2 * C679 ) - 1 ) as (Element of ( NAT )) by L3241 , INT_1:5;
L3242: C679 <= ( len ( R6 .edgeSeq() ) ) by L3236 , FINSEQ_3:25;
L3243: ( 2 * C679 ) <= ( 2 * ( len ( R6 .edgeSeq() ) ) ) by L3242 , XREAL_1:64;
L3244: ( 2 * C679 ) < ( ( 2 * ( len ( R6 .edgeSeq() ) ) ) + 1 ) by L3243 , NAT_1:13;
L3245: ( 2 * C679 ) < ( len R6 ) by L3244 , L314;
L3246: D338 < ( ( len R6 ) - ( 0 ) ) by L3245 , XREAL_1:14;
L3247: ( 1 + 1 ) <= ( C679 + C679 ) by L3240 , XREAL_1:7;
L3248: ( ( 1 + 1 ) - 1 ) <= D338 by L3247 , XREAL_1:13;
L3249: ( D335 . ( 2 * C678 ) ) = ( R6 . ( D338 + 1 ) ) by L3248 , L3220 , L3239 , L3246 , GRAPH_2:15
.= ( R6 . ( 2 * C679 ) );
L3250: ( D336 . C678 ) = ( ( R6 .edgeSeq() ) . C679 ) by L3236 , L3237 , FINSEQ_1:def 7
.= ( R6 . ( 2 * C679 ) ) by L3240 , L3242 , L314;
thus L3251: ( ( D335 .edgeSeq() ) . C678 ) = ( D336 . C678 ) by L3250 , L3222 , L3223 , L3249 , L314;
end;
end;
thus L3253: ( ( D335 .edgeSeq() ) . C678 ) = ( D336 . C678 ) by L3226;
end;
thus L3254: thesis by L3221 , L3215 , L3219 , FINSEQ_1:14;
end;
theorem
L3255: (for R2 being _Graph holds (for R3 being _Graph holds (for B488 being (Walk of R2) holds (for B489 being (Walk of R3) holds (B488 = B489 implies ( B488 .edgeSeq() ) = ( B489 .edgeSeq() ))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C680 being (Walk of R2);
let C681 being (Walk of R3);
set D339 = ( C680 .edgeSeq() );
set D340 = ( C681 .edgeSeq() );
assume L3256: C680 = C681;
L3257:
now
thus L3258: ( len D339 ) = ( len D339 );
L3259: ( ( 2 * ( len D339 ) ) + 1 ) = ( len C681 ) by L3256 , L314
.= ( ( 2 * ( len D340 ) ) + 1 ) by L314;
thus L3260: ( len D340 ) = ( len D339 ) by L3259;
let C682 being Nat;
assume L3261: C682 in ( dom D339 );
L3262: C682 <= ( len D340 ) by L3261 , L3259 , FINSEQ_3:25;
L3263: 1 <= C682 by L3261 , FINSEQ_3:25;
L3264: C682 <= ( len D339 ) by L3261 , FINSEQ_3:25;
thus L3265: ( D339 . C682 ) = ( C681 . ( 2 * C682 ) ) by L3264 , L3256 , L3263 , L314
.= ( D340 . C682 ) by L3263 , L3262 , L314;
end;
thus L3266: thesis by L3257 , FINSEQ_2:9;
end;
theorem
L3267: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (R8 in ( R4 .vertices() ) iff (ex B490 being  odd (Element of ( NAT )) st (B490 <= ( len R4 ) & ( R4 . B490 ) = R8)))))) by L1088;
theorem
L3268: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( R4 .first() ) in ( R4 .vertices() ) & ( R4 .last() ) in ( R4 .vertices() ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3269: 1 <= ( len R4 ) by ABIAN:12;
thus L3270: ( R4 .first() ) in ( R4 .vertices() ) by L3269 , L1088 , JORDAN12:2;
thus L3271: thesis by L1088;
end;
theorem
L3272: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B491 being  odd (Element of ( NAT )) holds (B491 <= ( len R4 ) implies ( R4 .vertexAt B491 ) in ( R4 .vertices() )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C683 being  odd (Element of ( NAT ));
assume L3273: C683 <= ( len R4 );
L3274: ( R4 .vertexAt C683 ) = ( R4 . C683 ) by L3273 , L114;
thus L3275: thesis by L3274 , L3273 , L1088;
end;
theorem
L3276: (for R1 being _Graph holds (for R11 being (Vertex of R1) holds ( ( R1 .walkOf R11 ) .vertices() ) = { R11 }))
proof
let R1 being _Graph;
let R11 being (Vertex of R1);
L3277:
now
let C684 being set;
L3278: 1 <= ( len ( R1 .walkOf R11 ) ) by ABIAN:12;
thus L3279:now
assume L3280: C684 in ( ( R1 .walkOf R11 ) .vertices() );
consider C685 being  odd (Element of ( NAT )) such that L3281: C685 <= ( len ( R1 .walkOf R11 ) ) and L3282: ( ( R1 .walkOf R11 ) . C685 ) = C684 by L3280 , L1088;
L3283: 1 <= C685 by ABIAN:12;
L3284: C685 <= 1 by L3281 , L2798;
L3285: C684 = ( ( R1 .walkOf R11 ) . 1 ) by L3284 , L3282 , L3283 , XXREAL_0:1;
L3286: C684 = R11 by L3285 , L2798;
thus L3287: C684 in { R11 } by L3286 , TARSKI:def 1;
end;
assume L3288: C684 in { R11 };
L3289: C684 = R11 by L3288 , TARSKI:def 1;
L3290: ( ( R1 .walkOf R11 ) . 1 ) = R11 by L2798;
thus L3291: C684 in ( ( R1 .walkOf R11 ) .vertices() ) by L3290 , L3289 , L3278 , L1088 , JORDAN12:2;
end;
thus L3292: thesis by L3277 , TARSKI:1;
end;
theorem
L3293: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 implies ( ( R1 .walkOf (R8 , R7 , R9) ) .vertices() ) = { R8 , R9 })))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
set D341 = ( R1 .walkOf (R8 , R7 , R9) );
assume L3294: R7 Joins R8 , R9 , R1;
L3295: ( D341 .vertexSeq() ) = <* R8 , R9 *> by L3294 , L3042;
thus L3296: thesis by L3295 , FINSEQ_2:127;
end;
theorem
L3297: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( R4 .vertices() ) = ( ( R4 .reverse() ) .vertices() )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3298:
now
reconsider D342 = ( len R4 ) as  odd (Element of ( NAT ));
let C686 being set;
thus L3299:now
reconsider D343 = ( len R4 ) as  odd (Element of ( NAT ));
assume L3300: C686 in ( R4 .vertices() );
consider C687 being  odd (Element of ( NAT )) such that L3301: C687 <= ( len R4 ) and L3302: ( R4 . C687 ) = C686 by L3300 , L1088;
L3303: ( ( D343 - C687 ) + 1 ) is  odd  odd  odd  odd (Element of ( NAT )) by L3301 , FINSEQ_5:1;
L3304: 1 <= C687 by ABIAN:12;
L3305: C687 in ( dom R4 ) by L3304 , L3301 , FINSEQ_3:25;
L3306: C687 in ( Seg ( len R4 ) ) by L3305 , FINSEQ_1:def 3;
L3307: ( ( D343 - C687 ) + 1 ) in ( Seg ( len R4 ) ) by L3306 , FINSEQ_5:2;
L3308: ( ( D343 - C687 ) + 1 ) in ( dom R4 ) by L3307 , FINSEQ_1:def 3;
L3309: ( ( D343 - C687 ) + 1 ) <= ( len R4 ) by L3308 , FINSEQ_3:25;
L3310: ( ( D343 - C687 ) + 1 ) <= ( len ( R4 .reverse() ) ) by L3309 , FINSEQ_5:def 3;
L3311: ( ( R4 .reverse() ) . ( ( ( len R4 ) - C687 ) + 1 ) ) = C686 by L3302 , L3305 , L2857;
thus L3312: C686 in ( ( R4 .reverse() ) .vertices() ) by L3311 , L3303 , L3310 , L1088;
end;
assume L3313: C686 in ( ( R4 .reverse() ) .vertices() );
consider C688 being  odd (Element of ( NAT )) such that L3314: C688 <= ( len ( R4 .reverse() ) ) and L3315: ( ( R4 .reverse() ) . C688 ) = C686 by L3313 , L1088;
L3316: 1 <= C688 by ABIAN:12;
L3317: C688 in ( dom ( R4 .reverse() ) ) by L3316 , L3314 , FINSEQ_3:25;
L3318: ( R4 . ( ( ( len R4 ) - C688 ) + 1 ) ) = C686 by L3317 , L3315 , FINSEQ_5:def 3;
L3319: C688 <= ( len R4 ) by L3314 , FINSEQ_5:def 3;
L3320: C688 in ( Seg ( len R4 ) ) by L3319 , L3316 , FINSEQ_1:1;
L3321: ( ( D342 - C688 ) + 1 ) in ( Seg ( len R4 ) ) by L3320 , FINSEQ_5:2;
L3322: ( ( D342 - C688 ) + 1 ) <= ( len R4 ) by L3321 , FINSEQ_1:1;
L3323: ( ( D342 - C688 ) + 1 ) is  odd  odd  odd  odd (Element of ( NAT )) by L3319 , FINSEQ_5:1;
thus L3324: C686 in ( R4 .vertices() ) by L3323 , L3318 , L3322 , L1088;
end;
thus L3325: thesis by L3298 , TARSKI:1;
end;
theorem
L3326: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies ( ( R5 .append R6 ) .vertices() ) = ( ( R5 .vertices() ) \/ ( R6 .vertices() ) )))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
set D344 = ( R5 .append R6 );
assume L3327: ( R5 .last() ) = ( R6 .first() );
L3328: D344 = ( R5 ^' R6 ) by L3327 , L156;
L3329:
now
let C689 being set;
L3330:
now
assume L3331: C689 in ( R5 .vertices() );
consider C690 being  odd (Element of ( NAT )) such that L3332: C690 <= ( len R5 ) and L3333: ( R5 . C690 ) = C689 by L3331 , L1088;
L3334: 1 <= C690 by ABIAN:12;
L3335: C690 in ( dom R5 ) by L3334 , L3332 , FINSEQ_3:25;
L3336: C690 in ( dom D344 ) by L3335 , L606;
L3337: C690 <= ( len D344 ) by L3336 , FINSEQ_3:25;
L3338: ( D344 . C690 ) = C689 by L3333 , L3335 , L606;
thus L3339: C689 in ( D344 .vertices() ) by L3338 , L3337 , L1088;
end;
thus L3340:now
assume L3341: C689 in ( D344 .vertices() );
reconsider D345 = C689 as (Vertex of R1) by L3341;
consider C691 being  odd (Element of ( NAT )) such that L3342: C691 <= ( len D344 ) and L3343: ( D344 . C691 ) = D345 by L3341 , L1088;
L3344: 1 <= C691 by ABIAN:12;
L3345:
now
per cases ;
suppose L3346: C691 <= ( len R5 );

L3347: C691 in ( dom R5 ) by L3346 , L3344 , FINSEQ_3:25;
L3348: ( R5 . C691 ) = D345 by L3347 , L3343 , L606;
L3349: D345 in ( R5 .vertices() ) by L3348 , L3346 , L1088;
thus L3350: C689 in ( ( R5 .vertices() ) \/ ( R6 .vertices() ) ) by L3349 , XBOOLE_0:def 3;
end;
suppose L3351: C691 > ( len R5 );

consider C692 being Nat such that L3352: ( ( len R5 ) + C692 ) = C691 by L3351 , NAT_1:10;
reconsider D346 = C692 as  even (Element of ( NAT )) by L3352 , ORDINAL1:def 12;
L3353: D346 <> ( 0 ) by L3351 , L3352;
L3354: ( ( 0 ) + 1 ) <= D346 by L3353 , NAT_1:13;
L3355: ( ( ( len R5 ) + D346 ) + 1 ) <= ( ( len D344 ) + 1 ) by L3342 , L3352 , XREAL_1:7;
L3356: ( ( D346 + 1 ) + ( len R5 ) ) <= ( ( len R6 ) + ( len R5 ) ) by L3355 , L3327 , L577;
L3357: ( ( ( D346 + 1 ) + ( len R5 ) ) - ( len R5 ) ) <= ( ( ( len R6 ) + ( len R5 ) ) - ( len R5 ) ) by L3356 , XREAL_1:13;
L3358: ( R6 .vertexAt ( D346 + 1 ) ) in ( R6 .vertices() ) by L3357 , L3272;
L3359: D346 < ( ( ( len R6 ) - 1 ) + 1 ) by L3357 , NAT_1:13;
L3360: ( R6 . ( D346 + 1 ) ) = D345 by L3359 , L3328 , L3343 , L3352 , L3354 , GRAPH_2:15;
L3361: D345 in ( R6 .vertices() ) by L3360 , L3357 , L3358 , L114;
thus L3362: C689 in ( ( R5 .vertices() ) \/ ( R6 .vertices() ) ) by L3361 , XBOOLE_0:def 3;
end;
end;
thus L3364: C689 in ( ( R5 .vertices() ) \/ ( R6 .vertices() ) ) by L3345;
end;
assume L3365: C689 in ( ( R5 .vertices() ) \/ ( R6 .vertices() ) );
L3366:
now
per cases  by L3365 , XBOOLE_0:def 3;
suppose L3367: C689 in ( R5 .vertices() );

thus L3368: C689 in ( D344 .vertices() ) by L3367 , L3330;
end;
suppose L3369: C689 in ( R6 .vertices() );

reconsider D347 = ( len R5 ) as  odd (Element of ( NAT ));
consider C693 being  odd (Element of ( NAT )) such that L3370: C693 <= ( len R6 ) and L3371: ( R6 . C693 ) = C689 by L3369 , L1088;
reconsider D348 = ( C693 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L3372: D348 < ( ( len R6 ) - ( 0 ) ) by L3370 , XREAL_1:15;
L3373: ( ( len R5 ) + D348 ) in ( dom D344 ) by L3372 , L3327 , L622;
L3374: ( D347 + D348 ) <= ( len D344 ) by L3373 , FINSEQ_3:25;
L3375: ( D344 . ( ( len R5 ) + D348 ) ) = ( R6 . ( D348 + 1 ) ) by L3327 , L3372 , L622;
thus L3376: C689 in ( D344 .vertices() ) by L3375 , L3371 , L3374 , L1088;
end;
end;
thus L3378: C689 in ( D344 .vertices() ) by L3366;
end;
thus L3379: thesis by L3329 , TARSKI:1;
end;
theorem
L3380: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B492 , B493 being  odd (Element of ( NAT )) holds ((B492 <= B493 & B493 <= ( len R4 )) implies ( ( R4 .cut (B492 , B493) ) .vertices() ) c= ( R4 .vertices() )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C694 , C695 being  odd (Element of ( NAT ));
set D349 = ( R4 .cut (C694 , C695) );
assume that
L3381: C694 <= C695
and
L3382: C695 <= ( len R4 );
L3383:
now
let C696 being set;
assume L3384: C696 in ( D349 .vertices() );
consider C697 being  odd (Element of ( NAT )) such that L3385: C697 <= ( len D349 ) and L3386: ( D349 . C697 ) = C696 by L3384 , L1088;
reconsider D350 = ( C697 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
L3387: D350 < ( ( len D349 ) - ( 0 ) ) by L3385 , XREAL_1:15;
L3388: ( C694 + D350 ) in ( dom R4 ) by L3387 , L3381 , L3382 , L664;
L3389: ( C694 + D350 ) <= ( len R4 ) by L3388 , FINSEQ_3:25;
L3390: ( D349 . ( D350 + 1 ) ) = ( R4 . ( C694 + D350 ) ) by L3381 , L3382 , L3387 , L664;
thus L3391: C696 in ( R4 .vertices() ) by L3390 , L3386 , L3389 , L1088;
end;
thus L3392: thesis by L3383 , TARSKI:def 3;
end;
theorem
L3393: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( ( R4 .addEdge R7 ) .vertices() ) = ( ( R4 .vertices() ) \/ { R8 } ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
let R8 being set;
set D351 = ( R1 .walkOf (( R4 .last() ) , R7 , ( ( R4 .last() ) .adj R7 )) );
set D352 = ( R4 .addEdge R7 );
set D353 = ( R4 .vertices() );
assume L3394: R7 Joins ( R4 .last() ) , R8 , R1;
reconsider D354 = R8 as (Vertex of R1) by L3394 , GLIB_000:13;
L3395: ( ( R4 .last() ) .adj R7 ) = D354 by L3394 , GLIB_000:66;
L3396: ( D351 .first() ) = ( R4 .last() ) by L3395 , L3394 , L2807;
L3397: ( D352 .vertices() ) = ( D353 \/ ( D351 .vertices() ) ) by L3396 , L3326;
L3398:
now
let C698 being set;
thus L3399:now
assume L3400: C698 in ( D353 \/ { ( R4 .last() ) , R8 } );
L3401:
now
per cases  by L3400 , XBOOLE_0:def 3;
suppose L3402: C698 in D353;

thus L3403: C698 in ( D353 \/ { R8 } ) by L3402 , XBOOLE_0:def 3;
end;
suppose L3404: C698 in { ( R4 .last() ) , R8 };

L3405:
now
per cases  by L3404 , TARSKI:def 2;
suppose L3406: C698 = ( R4 .last() );

L3407: C698 in D353 by L3406 , L3268;
thus L3408: C698 in ( D353 \/ { R8 } ) by L3407 , XBOOLE_0:def 3;
end;
suppose L3409: C698 = R8;

L3410: C698 in { R8 } by L3409 , TARSKI:def 1;
thus L3411: C698 in ( D353 \/ { R8 } ) by L3410 , XBOOLE_0:def 3;
end;
end;
thus L3413: C698 in ( D353 \/ { R8 } ) by L3405;
end;
end;
thus L3415: C698 in ( D353 \/ { R8 } ) by L3401;
end;
assume L3416: C698 in ( D353 \/ { R8 } );
L3417:
now
per cases  by L3416 , XBOOLE_0:def 3;
suppose L3418: C698 in D353;

thus L3419: C698 in ( D353 \/ { ( R4 .last() ) , R8 } ) by L3418 , XBOOLE_0:def 3;
end;
suppose L3420: C698 in { R8 };

L3421: C698 = R8 by L3420 , TARSKI:def 1;
L3422: C698 in { ( R4 .last() ) , R8 } by L3421 , TARSKI:def 2;
thus L3423: C698 in ( D353 \/ { ( R4 .last() ) , R8 } ) by L3422 , XBOOLE_0:def 3;
end;
end;
thus L3425: C698 in ( D353 \/ { ( R4 .last() ) , R8 } ) by L3417;
end;
L3426: ( D351 .vertices() ) = { ( R4 .last() ) , R8 } by L3394 , L3395 , L3293;
thus L3427: thesis by L3426 , L3397 , L3398 , TARSKI:1;
end;
theorem
L3428: (for B494 being  finite _Graph holds (for B495 being (Walk of B494) holds (for B496 , B497 being set holds ((B496 Joins ( B495 .last() ) , B497 , B494 & (not B497 in ( B495 .vertices() ))) implies ( card ( ( B495 .addEdge B496 ) .vertices() ) ) = ( ( card ( B495 .vertices() ) ) + 1 )))))
proof
let C699 being  finite _Graph;
let C700 being (Walk of C699);
let C701 , C702 being set;
assume that
L3429: C701 Joins ( C700 .last() ) , C702 , C699
and
L3430: (not C702 in ( C700 .vertices() ));
L3431: ( card ( ( C700 .addEdge C701 ) .vertices() ) ) = ( card ( ( C700 .vertices() ) \/ { C702 } ) ) by L3429 , L3393;
thus L3432: thesis by L3431 , L3430 , CARD_2:41;
end;
theorem
L3433: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds ((R8 in ( R4 .vertices() ) & R9 in ( R4 .vertices() )) implies (ex B498 being (Walk of R1) st B498 is_Walk_from R8 , R9))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R8 being set;
let R9 being set;
assume that
L3434: R8 in ( R4 .vertices() )
and
L3435: R9 in ( R4 .vertices() );
consider C703 being  odd (Element of ( NAT )) such that L3436: C703 <= ( len R4 ) and L3437: ( R4 . C703 ) = R8 by L3434 , L1088;
consider C704 being  odd (Element of ( NAT )) such that L3438: C704 <= ( len R4 ) and L3439: ( R4 . C704 ) = R9 by L3435 , L1088;
L3440:
now
per cases ;
suppose L3441: C703 <= C704;

L3442: ( R4 .cut (C703 , C704) ) is_Walk_from R8 , R9 by L3441 , L3437 , L3438 , L3439 , L677;
thus L3443: thesis by L3442;
end;
suppose L3444: C704 <= C703;

L3445: ( R4 .cut (C704 , C703) ) is_Walk_from R9 , R8 by L3444 , L3436 , L3437 , L3439 , L677;
L3446: ( ( R4 .cut (C704 , C703) ) .reverse() ) is_Walk_from R8 , R9 by L3445 , L2842;
thus L3447: thesis by L3446;
end;
end;
thus L3449: thesis by L3440;
end;
theorem
L3450: (for R2 being _Graph holds (for R3 being _Graph holds (for B499 being (Walk of R2) holds (for B500 being (Walk of R3) holds (B499 = B500 implies ( B499 .vertices() ) = ( B500 .vertices() )))))) by L3149;
theorem
L3451: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (R7 in ( R4 .edges() ) iff (ex B501 being  even (Element of ( NAT )) st (1 <= B501 & B501 <= ( len R4 ) & ( R4 . B501 ) = R7)))))) by L1116;
theorem
L3452: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (R7 in ( R4 .edges() ) iff (ex B502 being  odd (Element of ( NAT )) st (B502 < ( len R4 ) & ( R4 . ( B502 + 1 ) ) = R7))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
thus L3453:now
assume L3454: R7 in ( R4 .edges() );
consider C705 being  even (Element of ( NAT )) such that L3455: 1 <= C705 and L3456: C705 <= ( len R4 ) and L3457: ( R4 . C705 ) = R7 by L3454 , L1116;
reconsider D355 = ( C705 - 1 ) as  odd (Element of ( NAT )) by L3455 , INT_1:5;
take D356 = D355;
L3458: ( C705 - 1 ) < ( ( len R4 ) - ( 0 ) ) by L3456 , XREAL_1:15;
thus L3459: D356 < ( len R4 ) by L3458;
thus L3460: ( R4 . ( D356 + 1 ) ) = R7 by L3457;
end;
given C706 being  odd (Element of ( NAT )) such that
L3461: C706 < ( len R4 )
and
L3462: ( R4 . ( C706 + 1 ) ) = R7;

L3463: 1 <= ( C706 + 1 ) by NAT_1:12;
L3464: ( C706 + 1 ) <= ( len R4 ) by L3461 , NAT_1:13;
thus L3465: thesis by L3464 , L3462 , L3463 , L1116;
end;
theorem
L3466: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( rng R4 ) = ( ( R4 .vertices() ) \/ ( R4 .edges() ) )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3467:
now
let C707 being set;
assume L3468: C707 in ( ( R4 .vertices() ) \/ ( R4 .edges() ) );
L3469:
now
per cases  by L3468 , XBOOLE_0:def 3;
suppose L3470: C707 in ( R4 .vertices() );

consider C708 being  odd (Element of ( NAT )) such that L3471: C708 <= ( len R4 ) and L3472: ( R4 . C708 ) = C707 by L3470 , L1088;
L3473: 1 <= C708 by ABIAN:12;
L3474: C708 in ( dom R4 ) by L3473 , L3471 , FINSEQ_3:25;
thus L3475: C707 in ( rng R4 ) by L3474 , L3472 , FUNCT_1:def 3;
end;
suppose L3476: C707 in ( R4 .edges() );

consider C709 being  even (Element of ( NAT )) such that L3477: 1 <= C709 and L3478: C709 <= ( len R4 ) and L3479: ( R4 . C709 ) = C707 by L3476 , L1116;
L3480: C709 in ( dom R4 ) by L3477 , L3478 , FINSEQ_3:25;
thus L3481: C707 in ( rng R4 ) by L3480 , L3479 , FUNCT_1:def 3;
end;
end;
thus L3483: C707 in ( rng R4 ) by L3469;
end;
L3484: ( ( R4 .vertices() ) \/ ( R4 .edges() ) ) c= ( rng R4 ) by L3467 , TARSKI:def 3;
L3485:
now
let C710 being set;
assume L3486: C710 in ( rng R4 );
consider C711 being Nat such that L3487: C711 in ( dom R4 ) and L3488: ( R4 . C711 ) = C710 by L3486 , FINSEQ_2:10;
L3489: C711 <= ( len R4 ) by L3487 , FINSEQ_3:25;
L3490: 1 <= C711 by L3487 , FINSEQ_3:25;
L3491:
now
per cases ;
suppose L3492: C711 is  odd;

L3493: C710 in ( R4 .vertices() ) by L3492 , L3487 , L3488 , L3489 , L1088;
thus L3494: C710 in ( ( R4 .vertices() ) \/ ( R4 .edges() ) ) by L3493 , XBOOLE_0:def 3;
end;
suppose L3495: C711 is  even;

L3496: C710 in ( R4 .edges() ) by L3495 , L3487 , L3488 , L3490 , L3489 , L1116;
thus L3497: C710 in ( ( R4 .vertices() ) \/ ( R4 .edges() ) ) by L3496 , XBOOLE_0:def 3;
end;
end;
thus L3499: C710 in ( ( R4 .vertices() ) \/ ( R4 .edges() ) ) by L3491;
end;
L3500: ( rng R4 ) c= ( ( R4 .vertices() ) \/ ( R4 .edges() ) ) by L3485 , TARSKI:def 3;
thus L3501: thesis by L3500 , L3484 , XBOOLE_0:def 10;
end;
theorem
L3502: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( R5 .last() ) = ( R6 .first() ) implies ( ( R5 .append R6 ) .edges() ) = ( ( R5 .edges() ) \/ ( R6 .edges() ) )))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
set D357 = ( R5 .append R6 );
set D358 = ( D357 .edges() );
set D359 = ( R5 .edges() );
set D360 = ( R6 .edges() );
set D361 = ( len R5 );
set D362 = ( len R6 );
reconsider D363 = D361 , D364 = D362 as  odd (Element of ( NAT ));
assume L3503: ( R5 .last() ) = ( R6 .first() );
L3504: D357 = ( R5 ^' R6 ) by L3503 , L156;
L3505:
now
let C712 being set;
thus L3506:now
assume L3507: C712 in D358;
consider C713 being  even (Element of ( NAT )) such that L3508: 1 <= C713 and L3509: C713 <= ( len D357 ) and L3510: ( D357 . C713 ) = C712 by L3507 , L1116;
L3511:
now
per cases ;
suppose L3512: C713 <= ( len R5 );

L3513: ( D357 . C713 ) = ( R5 . C713 ) by L3512 , L3504 , L3508 , GRAPH_2:14;
L3514: C712 in D359 by L3513 , L3508 , L3510 , L3512 , L1116;
thus L3515: C712 in ( D359 \/ D360 ) by L3514 , XBOOLE_0:def 3;
end;
suppose L3516: ( len R5 ) < C713;

reconsider D365 = ( C713 - D363 ) as  odd (Element of ( NAT )) by L3516 , INT_1:5;
L3517: 1 <= ( D365 + 1 ) by NAT_1:12;
L3518: ( ( C713 - D363 ) + ( len R5 ) ) < ( ( len D357 ) + 1 ) by L3509 , NAT_1:13;
L3519: ( ( C713 - D363 ) + D363 ) < ( D364 + ( len R5 ) ) by L3518 , L3503 , L577;
L3520: D365 < ( ( D364 + ( len R5 ) ) - ( len R5 ) ) by L3519 , XREAL_1:14;
L3521: ( D365 + 1 ) <= ( len R6 ) by L3520 , NAT_1:13;
L3522: ( R6 . ( D365 + 1 ) ) = ( D357 . ( ( len R5 ) + D365 ) ) by L3504 , L3520 , ABIAN:12 , GRAPH_2:15
.= C712 by L3510;
L3523: C712 in D360 by L3522 , L3517 , L3521 , L1116;
thus L3524: C712 in ( D359 \/ D360 ) by L3523 , XBOOLE_0:def 3;
end;
end;
thus L3526: C712 in ( D359 \/ D360 ) by L3511;
end;
assume L3527: C712 in ( D359 \/ D360 );
L3528:
now
per cases  by L3527 , XBOOLE_0:def 3;
suppose L3529: C712 in D359;

consider C714 being  even (Element of ( NAT )) such that L3530: 1 <= C714 and L3531: C714 <= ( len R5 ) and L3532: ( R5 . C714 ) = C712 by L3529 , L1116;
L3533: ( len R5 ) <= ( len D357 ) by L3503 , L581;
L3534: C714 <= ( len D357 ) by L3533 , L3531 , XXREAL_0:2;
L3535: ( D357 . C714 ) = C712 by L3504 , L3530 , L3531 , L3532 , GRAPH_2:14;
thus L3536: C712 in D358 by L3535 , L3530 , L3534 , L1116;
end;
suppose L3537: C712 in D360;

consider C715 being  even (Element of ( NAT )) such that L3538: 1 <= C715 and L3539: C715 <= ( len R6 ) and L3540: ( R6 . C715 ) = C712 by L3537 , L1116;
reconsider D366 = ( C715 - 1 ) as  odd (Element of ( NAT )) by L3538 , INT_1:5;
L3541: D366 < ( len R6 ) by L3539 , XREAL_1:147;
L3542: ( D357 . ( D363 + D366 ) ) = ( R6 . ( D366 + 1 ) ) by L3541 , L3504 , ABIAN:12 , GRAPH_2:15
.= C712 by L3540;
L3543: ( ( D366 + 1 ) + D363 ) <= ( ( len R6 ) + ( len R5 ) ) by L3539 , XREAL_1:7;
L3544: ( ( D363 + D366 ) + 1 ) <= ( ( len D357 ) + 1 ) by L3543 , L3503 , L577;
L3545: ( D363 + D366 ) <= ( len D357 ) by L3544 , XREAL_1:6;
L3546: 1 <= ( D363 + D366 ) by ABIAN:12 , NAT_1:12;
thus L3547: C712 in D358 by L3546 , L3542 , L3545 , L1116;
end;
end;
thus L3549: C712 in D358 by L3528;
end;
thus L3550: thesis by L3505 , TARSKI:1;
end;
theorem
L3551: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (R7 in ( R4 .edges() ) implies (ex B503 , B504 being (Vertex of R1) st (ex B505 being  odd (Element of ( NAT )) st (( B505 + 2 ) <= ( len R4 ) & B503 = ( R4 . B505 ) & R7 = ( R4 . ( B505 + 1 ) ) & B504 = ( R4 . ( B505 + 2 ) ) & R7 Joins B503 , B504 , R1))))))) by L1146;
theorem
L3552: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (R7 in ( R4 .edges() ) iff (ex B506 being (Element of ( NAT )) st (B506 in ( dom ( R4 .edgeSeq() ) ) & ( ( R4 .edgeSeq() ) . B506 ) = R7))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
thus L3553:now
assume L3554: R7 in ( R4 .edges() );
consider C716 being set such that L3555: C716 in ( dom ( R4 .edgeSeq() ) ) and L3556: ( ( R4 .edgeSeq() ) . C716 ) = R7 by L3554 , FUNCT_1:def 3;
reconsider D367 = C716 as (Element of ( NAT )) by L3555;
take D368 = D367;
thus L3557: (D368 in ( dom ( R4 .edgeSeq() ) ) & ( ( R4 .edgeSeq() ) . D368 ) = R7) by L3555 , L3556;
end;
given C717 being (Element of ( NAT )) such that
L3558: C717 in ( dom ( R4 .edgeSeq() ) )
and
L3559: ( ( R4 .edgeSeq() ) . C717 ) = R7;

thus L3560: thesis by L3558 , L3559 , FUNCT_1:def 3;
end;
theorem
L3561: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (for R9 being set holds ((R7 in ( R4 .edges() ) & R7 Joins R8 , R9 , R1) implies (R8 in ( R4 .vertices() ) & R9 in ( R4 .vertices() )))))))) by L1158;
theorem
L3562: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R12 being (Element of ( NAT )) holds (for R13 being (Element of ( NAT )) holds ( ( R4 .cut (R13 , R12) ) .edges() ) c= ( R4 .edges() )))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R12 being (Element of ( NAT ));
let R13 being (Element of ( NAT ));
L3563:
now
per cases ;
suppose L3564: (R13 is  odd & R12 is  odd & R13 <= R12 & R12 <= ( len R4 ));

reconsider D369 = R13 as  odd (Element of ( NAT )) by L3564;
L3565:
now
let C718 being set;
assume L3566: C718 in ( ( R4 .cut (R13 , R12) ) .edges() );
consider C719 being  even (Element of ( NAT )) such that L3567: 1 <= C719 and L3568: C719 <= ( len ( R4 .cut (R13 , R12) ) ) and L3569: ( ( R4 .cut (R13 , R12) ) . C719 ) = C718 by L3566 , L1116;
reconsider D370 = ( C719 - 1 ) as  odd (Element of ( NAT )) by L3567 , INT_1:5;
L3570: D370 < ( ( len ( R4 .cut (R13 , R12) ) ) - ( 0 ) ) by L3568 , XREAL_1:15;
L3571: ( R13 + D370 ) in ( dom R4 ) by L3570 , L3564 , L664;
L3572: ( D369 + D370 ) <= ( len R4 ) by L3571 , FINSEQ_3:25;
L3573: ( D370 + 1 ) = C719;
L3574: C718 = ( R4 . ( R13 + D370 ) ) by L3573 , L3564 , L3569 , L3570 , L664;
L3575: 1 <= ( D369 + D370 ) by L3571 , FINSEQ_3:25;
thus L3576: C718 in ( R4 .edges() ) by L3575 , L3574 , L3572 , L1116;
end;
thus L3577: thesis by L3565 , TARSKI:def 3;
end;
suppose L3578: (not (R13 is  odd & R12 is  odd & R13 <= R12 & R12 <= ( len R4 )));

thus L3579: thesis by L3578 , L226;
end;
end;
thus L3581: thesis by L3563;
end;
theorem
L3582: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( R4 .edges() ) = ( ( R4 .reverse() ) .edges() )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3583:
now
let C720 being set;
thus L3584:now
assume L3585: C720 in ( R4 .edges() );
consider C721 being  even (Element of ( NAT )) such that L3586: 1 <= C721 and L3587: C721 <= ( len R4 ) and L3588: ( R4 . C721 ) = C720 by L3585 , L1116;
L3589: C721 in ( dom R4 ) by L3586 , L3587 , FINSEQ_3:25;
L3590: ( ( ( len R4 ) - C721 ) + 1 ) in ( dom ( R4 .reverse() ) ) by L3589 , L2857;
reconsider D371 = ( ( ( len R4 ) - C721 ) + 1 ) as  even (Element of ( NAT )) by L3590;
L3591: 1 <= D371 by L3590 , FINSEQ_3:25;
L3592: D371 <= ( len ( R4 .reverse() ) ) by L3590 , FINSEQ_3:25;
L3593: C720 = ( ( R4 .reverse() ) . ( ( ( len R4 ) - C721 ) + 1 ) ) by L3588 , L3589 , L2857;
thus L3594: C720 in ( ( R4 .reverse() ) .edges() ) by L3593 , L3591 , L3592 , L1116;
end;
assume L3595: C720 in ( ( R4 .reverse() ) .edges() );
consider C722 being  even (Element of ( NAT )) such that L3596: 1 <= C722 and L3597: C722 <= ( len ( R4 .reverse() ) ) and L3598: ( ( R4 .reverse() ) . C722 ) = C720 by L3595 , L1116;
L3599: C722 in ( dom ( R4 .reverse() ) ) by L3596 , L3597 , FINSEQ_3:25;
L3600: ( ( ( len ( R4 .reverse() ) ) - C722 ) + 1 ) in ( dom ( ( R4 .reverse() ) .reverse() ) ) by L3599 , L2857;
reconsider D372 = ( ( ( len ( R4 .reverse() ) ) - C722 ) + 1 ) as  even (Element of ( NAT )) by L3600;
L3601: C720 = ( ( ( R4 .reverse() ) .reverse() ) . ( ( ( len ( R4 .reverse() ) ) - C722 ) + 1 ) ) by L3598 , L3599 , L2857;
L3602: C720 = ( R4 . D372 ) by L3601;
L3603: D372 in ( dom R4 ) by L3600;
L3604: D372 <= ( len R4 ) by L3603 , FINSEQ_3:25;
L3605: 1 <= D372 by L3600 , FINSEQ_3:25;
thus L3606: C720 in ( R4 .edges() ) by L3605 , L3602 , L3604 , L1116;
end;
thus L3607: thesis by L3583 , TARSKI:1;
end;
theorem
L3608: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R7 Joins R8 , R9 , R1 iff ( ( R1 .walkOf (R8 , R7 , R9) ) .edges() ) = { R7 })))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
set D373 = ( R1 .walkOf (R8 , R7 , R9) );
thus L3609:now
assume L3610: R7 Joins R8 , R9 , R1;
L3611: ( D373 .edgeSeq() ) = <* R7 *> by L3610 , L3170;
thus L3612: ( D373 .edges() ) = { R7 } by L3611 , FINSEQ_1:39;
end;
assume L3613: ( D373 .edges() ) = { R7 };
L3614: R7 in ( D373 .edges() ) by L3613 , TARSKI:def 1;
consider C723 being  even (Element of ( NAT )) such that L3615: 1 <= C723 and L3616: C723 <= ( len D373 ) and L3617: ( D373 . C723 ) = R7 by L3614 , L1116;
L3618: ( ( 2 * ( 0 ) ) + 1 ) < C723 by L3615 , XXREAL_0:1;
L3619:
now
assume L3620: (not R7 Joins R8 , R9 , R1);
L3621: D373 = ( R1 .walkOf ( choose ( the_Vertices_of R1 ) ) ) by L3620 , L76;
thus L3622: contradiction by L3621 , L3616 , L3618 , L2798;
end;
thus L3623: thesis by L3619;
end;
theorem
L3624: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( R4 .edges() ) c= ( R1 .edgesBetween ( R4 .vertices() ) )))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3625:
now
let C724 being set;
assume L3626: C724 in ( R4 .edges() );
consider C725 , C726 being (Vertex of R1), C727 being  odd (Element of ( NAT )) such that L3627: ( C727 + 2 ) <= ( len R4 ) and L3628: C725 = ( R4 . C727 ) and L3629: C724 = ( R4 . ( C727 + 1 ) ) and L3630: C726 = ( R4 . ( C727 + 2 ) ) and L3631: C724 Joins C725 , C726 , R1 by L3626 , L1146;
L3632: C727 < ( len R4 ) by L3627 , L1;
L3633: C725 in ( R4 .vertices() ) by L3632 , L3628 , L1088;
L3634: C726 in ( R4 .vertices() ) by L3627 , L3630 , L1088;
thus L3635: C724 in ( R1 .edgesBetween ( R4 .vertices() ) ) by L3634 , L3631 , L3633 , GLIB_000:32;
end;
thus L3636: thesis by L3625 , TARSKI:def 3;
end;
theorem
L3637: (for R2 being _Graph holds (for R3 being _Graph holds (for B507 being (Walk of R2) holds (for B508 being (Walk of R3) holds (B507 = B508 implies ( B507 .edges() ) = ( B508 .edges() )))))) by L3255;
theorem
L3638: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( ( R4 .addEdge R7 ) .edges() ) = ( ( R4 .edges() ) \/ { R7 } ))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
let R8 being set;
set D374 = ( R1 .walkOf (( R4 .last() ) , R7 , ( ( R4 .last() ) .adj R7 )) );
assume L3639: R7 Joins ( R4 .last() ) , R8 , R1;
L3640: R7 in ( ( R4 .last() ) .edgesInOut() ) by L3639 , GLIB_000:62;
L3641: R7 Joins ( R4 .last() ) , ( ( R4 .last() ) .adj R7 ) , R1 by L3640 , GLIB_000:67;
L3642: ( D374 .first() ) = ( R4 .last() ) by L3641 , L2807;
L3643: ( D374 .edges() ) = { R7 } by L3641 , L3608;
thus L3644: thesis by L3643 , L3642 , L3502;
end;
theorem
L3645: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ( len R4 ) = ( ( 2 * ( R4 .length() ) ) + 1 ))) by L314;
theorem
L3646: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (( len R5 ) = ( len R6 ) iff ( R5 .length() ) = ( R6 .length() )))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
thus L3647:now
assume L3648: ( len R5 ) = ( len R6 );
L3649: ( ( 2 * ( R5 .length() ) ) + 1 ) = ( len R6 ) by L3648 , L314
.= ( ( 2 * ( R6 .length() ) ) + 1 ) by L314;
thus L3650: ( R5 .length() ) = ( R6 .length() ) by L3649;
end;
assume L3651: ( R5 .length() ) = ( R6 .length() );
thus L3652: ( len R5 ) = ( ( 2 * ( R6 .length() ) ) + 1 ) by L3651 , L314
.= ( len R6 ) by L314;
end;
theorem
L3653: (for R2 being _Graph holds (for R3 being _Graph holds (for B509 being (Walk of R2) holds (for B510 being (Walk of R3) holds (B509 = B510 implies ( B509 .length() ) = ( B510 .length() )))))) by L3255;
theorem
L3654: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B511 being  odd (Element of ( NAT )) holds (B511 <= ( len R4 ) implies (( R4 .find ( R4 . B511 ) ) <= B511 & ( R4 .rfind ( R4 . B511 ) ) >= B511)))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C728 being  odd (Element of ( NAT ));
assume L3655: C728 <= ( len R4 );
L3656: ( R4 . C728 ) in ( R4 .vertices() ) by L3655 , L1088;
thus L3657: ( R4 .find ( R4 . C728 ) ) <= C728 by L3656 , L3655 , L378;
thus L3658: thesis by L3655 , L3656 , L437;
end;
theorem
L3659: (for R2 being _Graph holds (for R3 being _Graph holds (for B512 being (Walk of R2) holds (for B513 being (Walk of R3) holds (for B514 being set holds (B512 = B513 implies (( B512 .find B514 ) = ( B513 .find B514 ) & ( B512 .rfind B514 ) = ( B513 .rfind B514 ))))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C729 being (Walk of R2);
let C730 being (Walk of R3);
let C731 being set;
assume L3660: C729 = C730;
L3661:
now
per cases ;
suppose L3662: C731 in ( C729 .vertices() );

L3663: ( C730 . ( C729 .find C731 ) ) = C731 by L3662 , L3660 , L378;
L3664: C731 in ( C730 .vertices() ) by L3660 , L3662 , L3149;
L3665: (for B515 being  odd Nat holds ((B515 <= ( len C730 ) & ( C730 . B515 ) = C731) implies ( C729 .find C731 ) <= B515)) by L3660 , L3662 , L378;
L3666: ( C729 .find C731 ) <= ( len C730 ) by L3660 , L3662 , L378;
thus L3667: ( C729 .find C731 ) = ( C730 .find C731 ) by L3666 , L3664 , L3663 , L3665 , L378;
L3668: ( C730 . ( C729 .rfind C731 ) ) = C731 by L3660 , L3662 , L437;
L3669: (for B516 being  odd (Element of ( NAT )) holds ((B516 <= ( len C730 ) & ( C730 . B516 ) = C731) implies B516 <= ( C729 .rfind C731 ))) by L3660 , L3662 , L437;
L3670: ( C729 .rfind C731 ) <= ( len C730 ) by L3660 , L3662 , L437;
thus L3671: ( C729 .rfind C731 ) = ( C730 .rfind C731 ) by L3670 , L3664 , L3668 , L3669 , L437;
end;
suppose L3672: (not C731 in ( C729 .vertices() ));

L3673: (not C731 in ( C730 .vertices() )) by L3672 , L3660 , L3149;
thus L3674: ( C729 .find C731 ) = ( len C730 ) by L3660 , L3672 , L378
.= ( C730 .find C731 ) by L3673 , L378;
thus L3675: ( C729 .rfind C731 ) = ( len C730 ) by L3660 , L3672 , L437
.= ( C730 .rfind C731 ) by L3673 , L437;
end;
end;
thus L3677: thesis by L3661;
end;
theorem
L3678: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B517 being  odd (Element of ( NAT )) holds (B517 <= ( len R4 ) implies (( R4 .find B517 ) <= B517 & ( R4 .rfind B517 ) >= B517))))) by L1170 , L1174;
theorem
L3679: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  closed iff ( R4 . 1 ) = ( R4 . ( len R4 ) ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
thus L3680:now
assume L3681: R4 is  closed;
L3682: ( R4 .first() ) = ( R4 .last() ) by L3681 , L489;
thus L3683: ( R4 . 1 ) = ( R4 . ( len R4 ) ) by L3682;
end;
assume L3684: ( R4 . 1 ) = ( R4 . ( len R4 ) );
L3685: ( R4 .first() ) = ( R4 .last() ) by L3684;
thus L3686: thesis by L3685 , L489;
end;
theorem
L3687: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  closed iff (ex B518 being set st R4 is_Walk_from B518 , B518))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
thus L3688:now
set D375 = ( R4 .first() );
assume L3689: R4 is  closed;
L3690: ( R4 .first() ) = ( R4 .last() ) by L3689 , L489;
L3691: R4 is_Walk_from D375 , D375 by L3690 , L487;
thus L3692: (ex B519 being set st R4 is_Walk_from B519 , B519) by L3691;
end;
given C732 being set such that
L3693: R4 is_Walk_from C732 , C732;

L3694: ( R4 .last() ) = C732 by L3693 , L487;
L3695: ( R4 .first() ) = C732 by L3693 , L487;
thus L3696: thesis by L3695 , L3694 , L489;
end;
theorem
L3697: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  closed iff ( R4 .reverse() ) is  closed)))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
L3698: (R4 is  closed iff ( R4 .first() ) = ( R4 .last() )) by L489;
L3699: (R4 is  closed iff ( ( R4 .reverse() ) .last() ) = ( R4 .last() )) by L3698 , L2838;
L3700: (R4 is  closed iff ( ( R4 .reverse() ) .last() ) = ( ( R4 .reverse() ) .first() )) by L3699 , L2838;
thus L3701: thesis by L3700 , L489;
end;
theorem
L3702: (for R2 being _Graph holds (for R3 being _Graph holds (for B520 being (Walk of R2) holds (for B521 being (Walk of R3) holds ((B520 = B521 & B520 is  closed) implies B521 is  closed)))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C733 being (Walk of R2);
let C734 being (Walk of R3);
assume that
L3703: C733 = C734
and
L3704: C733 is  closed;
L3705: ( C734 . 1 ) = ( C734 . ( len C734 ) ) by L3703 , L3704 , L3679;
thus L3706: thesis by L3705 , L3679;
end;
theorem
L3707: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  directed iff (for B522 being  odd (Element of ( NAT )) holds (B522 < ( len R4 ) implies ( R4 . ( B522 + 1 ) ) DJoins ( R4 . B522 ) , ( R4 . ( B522 + 2 ) ) , R1))))) by L1178;
theorem
L3708: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (for R10 being set holds ((R4 is  directed & R4 is_Walk_from R8 , R9 & R7 DJoins R9 , R10 , R1) implies (( R4 .addEdge R7 ) is  directed & ( R4 .addEdge R7 ) is_Walk_from R8 , R10)))))))) by L1195;
theorem
L3709: (for R1 being _Graph holds (for B523 being (DWalk of R1) holds (for B524 , B525 being (Element of ( NAT )) holds ( B523 .cut (B524 , B525) ) is  directed)));
theorem
L3710: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is non  trivial iff 3 <= ( len R4 )))) by L1250;
theorem
L3711: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is non  trivial iff ( len R4 ) <> 1))) by L1262;
theorem
L3712: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( R4 .first() ) <> ( R4 .last() ) implies R4 is non  trivial))) by L1262;
theorem
L3713: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  trivial iff (ex B526 being (Vertex of R1) st R4 = ( R1 .walkOf B526 ))))) by L1271;
theorem
L3714: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  trivial iff ( R4 .reverse() ) is  trivial)))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
thus L3715: (R4 is  trivial implies ( R4 .reverse() ) is  trivial);
assume L3716: ( R4 .reverse() ) is  trivial;
L3717: ( len ( R4 .reverse() ) ) = 1 by L3716 , L1262;
L3718: ( len R4 ) = 1 by L3717 , FINSEQ_5:def 3;
thus L3719: thesis by L3718 , L1262;
end;
theorem
L3720: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R6 is  trivial implies ( R5 .append R6 ) = R5))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume L3721: R6 is  trivial;
L3722: ( len R6 ) = 1 by L3721 , L1262;
L3723:
now
per cases ;
suppose L3724: ( R5 .last() ) = ( R6 .first() );

L3725: ( R5 .append R6 ) = ( R5 ^' R6 ) by L3724 , L156;
L3726: ( ( len ( R5 .append R6 ) ) + 1 ) = ( ( len R5 ) + 1 ) by L3725 , L3722 , CARD_1:27 , GRAPH_2:13;
L3727: (for B527 being Nat holds ((1 <= B527 & B527 <= ( len ( R5 .append R6 ) )) implies ( ( R5 .append R6 ) . B527 ) = ( R5 . B527 )))
proof
let C735 being Nat;
reconsider D376 = C735 as (Element of ( NAT )) by ORDINAL1:def 12;
L3728: ((1 <= D376 & D376 <= ( len ( R5 .append R6 ) )) implies ( ( R5 .append R6 ) . D376 ) = ( R5 . D376 )) by L3725 , L3726 , GRAPH_2:14;
thus L3729: thesis by L3728;
end;
thus L3730: thesis by L3727 , L3726 , FINSEQ_1:14;
end;
suppose L3731: ( R5 .last() ) <> ( R6 .first() );

thus L3732: thesis by L3731 , L156;
end;
end;
thus L3734: thesis by L3723;
end;
theorem
L3735: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for B528 , B529 being  odd (Element of ( NAT )) holds ((B528 <= B529 & B529 <= ( len R4 )) implies (( R4 .cut (B528 , B529) ) is  trivial iff B528 = B529)))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let C736 , C737 being  odd (Element of ( NAT ));
assume that
L3736: C736 <= C737
and
L3737: C737 <= ( len R4 );
L3738: ( ( len ( R4 .cut (C736 , C737) ) ) + C736 ) = ( C737 + 1 ) by L3736 , L3737 , L664;
thus L3739:now
assume L3740: ( R4 .cut (C736 , C737) ) is  trivial;
L3741: 1 = ( ( C737 - C736 ) + 1 ) by L3740 , L3738 , L1262;
thus L3742: C736 = C737 by L3741;
end;
assume L3743: C736 = C737;
thus L3744: thesis by L3743 , L3738 , L1262;
end;
theorem
L3745: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (R7 Joins ( R4 .last() ) , R8 , R1 implies ( R4 .addEdge R7 ) is non  trivial)))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
let R7 being set;
let R8 being set;
assume L3746: R7 Joins ( R4 .last() ) , R8 , R1;
L3747: ( len ( R4 .addEdge R7 ) ) = ( ( len R4 ) + 2 ) by L3746 , L959;
L3748: ( 1 + ( 0 ) ) < ( ( len R4 ) + 2 ) by XREAL_1:8;
thus L3749: thesis by L3748 , L3747 , L1262;
end;
theorem
L3750: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is non  trivial implies (ex B530 being  odd (Element of ( NAT )) st (B530 = ( ( len R4 ) - 2 ) & ( ( R4 .cut (1 , B530) ) .addEdge ( R4 . ( B530 + 1 ) ) ) = R4)))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
set D377 = ( ( len R4 ) - ( 2 * 1 ) );
assume L3751: R4 is non  trivial;
L3752: ( len R4 ) >= 3 by L3751 , L1250;
reconsider D378 = D377 as  odd (Element of ( NAT )) by L3752 , INT_1:5 , XXREAL_0:2;
set D379 = ( R4 .cut (1 , D378) );
set D380 = ( R4 . ( D378 + 1 ) );
take D378;
thus L3753: D378 = ( ( len R4 ) - 2 );
L3754: D378 < ( ( len R4 ) - ( 0 ) ) by XREAL_1:15;
thus L3755: ( D379 .addEdge D380 ) = ( R4 .cut (1 , ( D378 + 2 )) ) by L3754 , L2924 , ABIAN:12 , JORDAN12:2
.= R4 by L723;
end;
theorem
L3756: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds ((R6 is non  trivial & ( R6 .edges() ) c= ( R5 .edges() )) implies ( R6 .vertices() ) c= ( R5 .vertices() )))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume that
L3757: R6 is non  trivial
and
L3758: ( R6 .edges() ) c= ( R5 .edges() );
L3759: 3 <= ( len R6 ) by L3757 , L1250;
L3760:
now
let C738 being set;
assume L3761: C738 in ( R6 .vertices() );
consider C739 being  odd (Element of ( NAT )) such that L3762: C739 <= ( len R6 ) and L3763: ( R6 . C739 ) = C738 by L3761 , L1088;
L3764:
now
per cases ;
suppose L3765: C739 = ( len R6 );

L3766: ( 3 - 1 ) < ( C739 - ( 0 ) ) by L3765 , L3759 , XREAL_1:15;
reconsider D381 = ( C739 - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by L3766 , INT_1:5;
L3767: 1 <= ( D381 + 1 ) by NAT_1:12;
L3768: D381 < ( C739 - ( 0 ) ) by XREAL_1:15;
L3769: D381 < ( len R6 ) by L3768 , L3762 , XXREAL_0:2;
L3770: ( R6 . ( D381 + 1 ) ) Joins ( R6 . D381 ) , ( R6 . ( D381 + 2 ) ) , R1 by L3769 , L55;
L3771: ( D381 + 1 ) <= ( len R6 ) by L3769 , NAT_1:13;
L3772: ( R6 . ( D381 + 1 ) ) in ( R6 .edges() ) by L3771 , L3767 , L1116;
consider C740 being  even (Element of ( NAT )) such that L3773: 1 <= C740 and L3774: C740 <= ( len R5 ) and L3775: ( R5 . C740 ) = ( R6 . ( D381 + 1 ) ) by L3772 , L3758 , L1116;
reconsider D382 = ( C740 - 1 ) as  odd (Element of ( NAT )) by L3773 , INT_1:5;
L3776: D382 < ( ( len R5 ) - ( 0 ) ) by L3774 , XREAL_1:15;
L3777: ( R5 . ( D382 + 1 ) ) Joins ( R5 . D382 ) , ( R5 . ( D382 + 2 ) ) , R1 by L3776 , L55;
L3778: ( R5 . D382 ) = ( R5 .vertexAt D382 ) by L3776 , L114;
L3779: ( D382 + 2 ) <= ( len R5 ) by L3776 , L1;
L3780: ( R5 . ( D382 + 2 ) ) = ( R5 .vertexAt ( D382 + 2 ) ) by L3779 , L114;
L3781: (C738 = ( R5 .vertexAt D382 ) or C738 = ( R5 .vertexAt ( D382 + 2 ) )) by L3780 , L3763 , L3770 , L3775 , L3777 , L3778 , GLIB_000:15;
thus L3782: C738 in ( R5 .vertices() ) by L3781 , L3776 , L3779 , L3272;
end;
suppose L3783: C739 <> ( len R6 );

L3784: C739 < ( len R6 ) by L3783 , L3762 , XXREAL_0:1;
L3785: ( R6 . ( C739 + 1 ) ) in ( R6 .edges() ) by L3784 , L3452;
consider C741 being  even (Element of ( NAT )) such that L3786: 1 <= C741 and L3787: C741 <= ( len R5 ) and L3788: ( R5 . C741 ) = ( R6 . ( C739 + 1 ) ) by L3785 , L3758 , L1116;
L3789: ( R5 . C741 ) Joins C738 , ( R6 . ( C739 + 2 ) ) , R1 by L3763 , L3784 , L3788 , L55;
reconsider D383 = ( C741 - 1 ) as  odd (Element of ( NAT )) by L3786 , INT_1:5;
L3790: D383 < ( ( len R5 ) - ( 0 ) ) by L3787 , XREAL_1:15;
L3791: ( R5 . ( D383 + 1 ) ) Joins ( R5 . D383 ) , ( R5 . ( D383 + 2 ) ) , R1 by L3790 , L55;
L3792: ( R5 . D383 ) = ( R5 .vertexAt D383 ) by L3790 , L114;
L3793: ( D383 + 2 ) <= ( len R5 ) by L3790 , L1;
L3794: ( R5 . ( D383 + 2 ) ) = ( R5 .vertexAt ( D383 + 2 ) ) by L3793 , L114;
L3795: (C738 = ( R5 .vertexAt D383 ) or C738 = ( R5 .vertexAt ( D383 + 2 ) )) by L3794 , L3789 , L3791 , L3792 , GLIB_000:15;
thus L3796: C738 in ( R5 .vertices() ) by L3795 , L3790 , L3793 , L3272;
end;
end;
thus L3798: C738 in ( R5 .vertices() ) by L3764;
end;
thus L3799: thesis by L3760 , TARSKI:def 3;
end;
theorem
L3800: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is non  trivial implies (for B531 being (Vertex of R1) holds (B531 in ( R4 .vertices() ) implies (not B531 is  isolated))))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
assume L3801: R4 is non  trivial;
L3802: ( len R4 ) <> 1 by L3801 , L1262;
let C742 being (Vertex of R1);
assume L3803: C742 in ( R4 .vertices() );
consider C743 being  odd (Element of ( NAT )) such that L3804: C743 <= ( len R4 ) and L3805: ( R4 . C743 ) = C742 by L3803 , L1088;
L3806:
now
per cases ;
suppose L3807: C743 = ( len R4 );

L3808: 1 <= ( len R4 ) by ABIAN:12;
L3809: 1 < ( len R4 ) by L3808 , L3802 , XXREAL_0:1;
L3810: ( 1 + 1 ) <= ( len R4 ) by L3809 , NAT_1:13;
reconsider D384 = ( ( len R4 ) - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by L3810 , INT_1:5;
L3811: D384 < ( ( len R4 ) - ( 0 ) ) by XREAL_1:15;
L3812: ( R4 . ( D384 + 1 ) ) Joins ( R4 . D384 ) , ( R4 . ( D384 + 2 ) ) , R1 by L3811 , L55;
L3813: ( R4 . ( D384 + 1 ) ) Joins C742 , ( R4 . D384 ) , R1 by L3812 , L3805 , L3807 , GLIB_000:14;
thus L3814: (ex B532 being set st B532 in ( C742 .edgesInOut() )) by L3813 , GLIB_000:62;
end;
suppose L3815: C743 <> ( len R4 );

L3816: C743 < ( len R4 ) by L3815 , L3804 , XXREAL_0:1;
L3817: ( R4 . ( C743 + 1 ) ) Joins C742 , ( R4 . ( C743 + 2 ) ) , R1 by L3816 , L3805 , L55;
thus L3818: (ex B533 being set st B533 in ( C742 .edgesInOut() )) by L3817 , GLIB_000:62;
end;
end;
thus L3820: thesis by L3806 , GLIB_000:def 49;
end;
theorem
L3821: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  trivial iff ( R4 .edges() ) = ( {} ))))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
thus L3822:now
assume L3823: R4 is  trivial;
L3824: ( R4 .length() ) = ( 0 ) by L3823 , L491;
L3825: ( R4 .edgeSeq() ) = ( {} ) by L3824;
thus L3826: ( R4 .edges() ) = ( {} ) by L3825;
end;
assume L3827: ( R4 .edges() ) = ( {} );
L3828: ( R4 .edgeSeq() ) = ( {} ) by L3827;
L3829: ( R4 .length() ) = ( 0 ) by L3828;
thus L3830: thesis by L3829 , L491;
end;
theorem
L3831: (for R2 being _Graph holds (for R3 being _Graph holds (for B534 being (Walk of R2) holds (for B535 being (Walk of R3) holds ((B534 = B535 & B534 is  trivial) implies B535 is  trivial)))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C744 being (Walk of R2);
let C745 being (Walk of R3);
assume that
L3832: C744 = C745
and
L3833: C744 is  trivial;
L3834: ( len C745 ) = 1 by L3832 , L3833 , L1262;
thus L3835: thesis by L3834 , L1262;
end;
theorem
L3836: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  Trail-like iff (for B536 , B537 being  even (Element of ( NAT )) holds ((1 <= B536 & B536 < B537 & B537 <= ( len R4 )) implies ( R4 . B536 ) <> ( R4 . B537 )))))) by L1279;
theorem
L3837: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( len R4 ) <= 3 implies R4 is  Trail-like))) by L1410;
theorem
L3838: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  Trail-like iff ( R4 .reverse() ) is  Trail-like))) by L1327;
theorem
L3839: (for R1 being _Graph holds (for B538 being (Trail of R1) holds (for B539 , B540 being (Element of ( NAT )) holds ( B538 .cut (B539 , B540) ) is  Trail-like)));
theorem
L3840: (for R1 being _Graph holds (for B541 being (Trail of R1) holds (for B542 being set holds ((B542 in ( ( B541 .last() ) .edgesInOut() ) & (not B542 in ( B541 .edges() ))) implies ( B541 .addEdge B542 ) is  Trail-like)))) by L1377;
theorem
L3841: (for R1 being _Graph holds (for B543 being (Trail of R1) holds (for B544 being (Vertex of R1) holds ((B544 in ( B543 .vertices() ) & B544 is  endvertex) implies (B544 = ( B543 .first() ) or B544 = ( B543 .last() ))))))
proof
let R1 being _Graph;
let C746 being (Trail of R1);
let C747 being (Vertex of R1);
assume that
L3842: C747 in ( C746 .vertices() )
and
L3843: C747 is  endvertex;
consider C748 being set such that L3844: ( C747 .edgesInOut() ) = { C748 } and L3845: (not C748 Joins C747 , C747 , R1) by L3843 , GLIB_000:def 51;
consider C749 being  odd (Element of ( NAT )) such that L3846: C749 <= ( len C746 ) and L3847: ( C746 . C749 ) = C747 by L3842 , L1088;
L3848: ( C746 .vertexAt C749 ) = C747 by L3846 , L3847 , L114;
L3849:
now
reconsider D385 = ( C749 - 1 ) as  even (Element of ( NAT )) by ABIAN:12 , INT_1:5;
assume that
L3850: C747 <> ( C746 .first() )
and
L3851: C747 <> ( C746 .last() );
L3852: ( C749 - 1 ) < ( D385 + 2 ) by NAT_1:16;
L3853: 1 <= C749 by ABIAN:12;
L3854: 1 < C749 by L3853 , L3847 , L3850 , XXREAL_0:1;
L3855: ( 1 + 1 ) <= C749 by L3854 , NAT_1:13;
L3856: ( ( 1 + 1 ) - 1 ) <= ( C749 - 1 ) by L3855 , XREAL_1:13;
L3857: C749 < ( len C746 ) by L3846 , L3847 , L3851 , XXREAL_0:1;
L3858: ( C746 . ( C749 + 1 ) ) in ( C747 .edgesInOut() ) by L3857 , L3848 , L2770;
L3859: ( C746 . ( C749 - 1 ) ) in ( C747 .edgesInOut() ) by L3846 , L3848 , L3854 , L2775;
L3860: ( C746 . ( C749 - 1 ) ) = C748 by L3859 , L3844 , TARSKI:def 1;
L3861: ( C749 + 1 ) <= ( len C746 ) by L3857 , NAT_1:13;
L3862: ( C746 . D385 ) <> ( C746 . ( C749 + 1 ) ) by L3861 , L3856 , L3852 , L1279;
thus L3863: contradiction by L3862 , L3844 , L3860 , L3858 , TARSKI:def 1;
end;
thus L3864: thesis by L3849;
end;
theorem
L3865: (for B545 being  finite _Graph holds (for B546 being (Trail of B545) holds ( len ( B546 .edgeSeq() ) ) <= ( B545 .size() )))
proof
let C750 being  finite _Graph;
let C751 being (Trail of C750);
consider C752 being Function such that L3866: (( dom C752 ) = ( C751 .edgeSeq() ) & (for B547 being set holds (B547 in ( C751 .edgeSeq() ) implies ( C752 . B547 ) = ( B547 `2 )))) from FUNCT_1:sch 3;
L3867:
now
L3868: ( C751 .edgeSeq() ) is  one-to-one by L492;
let C753 , C754 being set;
assume that
L3869: C753 in ( dom C752 )
and
L3870: C754 in ( dom C752 )
and
L3871: ( C752 . C753 ) = ( C752 . C754 );
consider C755 , C756 being set such that L3872: C753 = [ C755 , C756 ] by L3866 , L3869 , RELAT_1:def 1;
L3873: C755 in ( dom ( C751 .edgeSeq() ) ) by L3866 , L3869 , L3872 , FUNCT_1:1;
L3874: ( C752 . C754 ) = ( C754 `2 ) by L3866 , L3870;
L3875: ( ( C751 .edgeSeq() ) . C755 ) = C756 by L3866 , L3869 , L3872 , FUNCT_1:1;
consider C757 , C758 being set such that L3876: C754 = [ C757 , C758 ] by L3866 , L3870 , RELAT_1:def 1;
L3877: C757 in ( dom ( C751 .edgeSeq() ) ) by L3866 , L3870 , L3876 , FUNCT_1:1;
L3878: ( [ C755 , C756 ] `2 ) = C756;
L3879: ( [ C757 , C758 ] `2 ) = C758;
L3880: ( C752 . C753 ) = ( C753 `2 ) by L3866 , L3869;
L3881: C756 = ( C752 . C753 ) by L3880 , L3872 , L3878
.= C758 by L3871 , L3874 , L3876 , L3879;
L3882: ( ( C751 .edgeSeq() ) . C757 ) = C756 by L3881 , L3866 , L3870 , L3876 , FUNCT_1:1;
thus L3883: C753 = C754 by L3882 , L3872 , L3876 , L3881 , L3868 , L3873 , L3875 , L3877 , FUNCT_1:def 4;
end;
L3884: C752 is  one-to-one by L3867 , FUNCT_1:def 4;
L3885:
now
let C759 being set;
assume L3886: C759 in ( rng C752 );
consider C760 being set such that L3887: C760 in ( dom C752 ) and L3888: ( C752 . C760 ) = C759 by L3886 , FUNCT_1:def 3;
consider C761 , C762 being set such that L3889: C760 = [ C761 , C762 ] by L3866 , L3887 , RELAT_1:def 1;
L3890: ( [ C761 , C762 ] `2 ) = C762;
L3891: C759 = ( C760 `2 ) by L3866 , L3887 , L3888;
L3892: C759 = C762 by L3891 , L3889 , L3890;
L3893: C759 in ( rng ( C751 .edgeSeq() ) ) by L3892 , L3866 , L3887 , L3889 , XTUPLE_0:def 13;
thus L3894: C759 in ( the_Edges_of C750 ) by L3893;
end;
L3895: ( rng C752 ) c= ( the_Edges_of C750 ) by L3885 , TARSKI:def 3;
L3896: ( card ( C751 .edgeSeq() ) ) c= ( card ( the_Edges_of C750 ) ) by L3895 , L3866 , L3884 , CARD_1:10;
L3897: ( card ( C751 .edgeSeq() ) ) <= ( card ( the_Edges_of C750 ) ) by L3896 , NAT_1:39;
thus L3898: thesis by L3897 , GLIB_000:def 25;
end;
theorem
L3899: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (( len R4 ) <= 3 implies R4 is  Path-like))) by L1671;
theorem
L3900: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ((for B548 , B549 being  odd (Element of ( NAT )) holds ((B548 <= ( len R4 ) & B549 <= ( len R4 ) & ( R4 . B548 ) = ( R4 . B549 )) implies B548 = B549)) implies R4 is  Path-like))) by L1608;
theorem
L3901: (for R1 being _Graph holds (for B550 being (Path of R1) holds (B550 is  open implies (for B551 , B552 being  odd (Element of ( NAT )) holds ((B551 < B552 & B552 <= ( len B550 )) implies ( B550 . B551 ) <> ( B550 . B552 ))))))
proof
let R1 being _Graph;
let C763 being (Path of R1);
assume L3902: C763 is  open;
let C764 , C765 being  odd (Element of ( NAT ));
assume that
L3903: C764 < C765
and
L3904: C765 <= ( len C763 );
L3905:
now
assume L3906: ( C763 . C764 ) = ( C763 . C765 );
L3907: C765 = ( len C763 ) by L3906 , L3903 , L3904 , L495;
L3908: C764 = 1 by L3903 , L3904 , L3906 , L495;
thus L3909: contradiction by L3908 , L3902 , L3906 , L3907 , L3679;
end;
thus L3910: thesis by L3905;
end;
theorem
L3911: (for R1 being _Graph holds (for R4 being (Walk of R1) holds (R4 is  Path-like iff ( R4 .reverse() ) is  Path-like))) by L1470;
theorem
L3912: (for R1 being _Graph holds (for B553 being (Path of R1) holds (for B554 , B555 being (Element of ( NAT )) holds ( B553 .cut (B554 , B555) ) is  Path-like)));
theorem
L3913: (for R1 being _Graph holds (for B556 being (Path of R1) holds (for B557 , B558 being set holds ((B557 Joins ( B556 .last() ) , B558 , R1 & (not B557 in ( B556 .edges() )) & (B556 is  trivial or B556 is  open) & (for B559 being  odd (Element of ( NAT )) holds ((1 < B559 & B559 <= ( len B556 )) implies ( B556 . B559 ) <> B558))) implies ( B556 .addEdge B557 ) is  Path-like))))
proof
let R1 being _Graph;
let C766 being (Path of R1);
let C767 , C768 being set;
assume that
L3914: C767 Joins ( C766 .last() ) , C768 , R1
and
L3915: (not C767 in ( C766 .edges() ))
and
L3916: (C766 is  trivial or C766 is  open)
and
L3917: (for B560 being  odd (Element of ( NAT )) holds ((1 < B560 & B560 <= ( len C766 )) implies ( C766 . B560 ) <> C768));
reconsider D386 = ( len C766 ) as  odd (Element of ( NAT ));
set D387 = ( C766 .addEdge C767 );
L3918: C767 in ( ( C766 .last() ) .edgesInOut() ) by L3914 , GLIB_000:62;
L3919:
now
thus L3920: D387 is  Trail-like by L3915 , L3918 , L1377;
let C769 , C770 being  odd (Element of ( NAT ));
assume that
L3921: C769 < C770
and
L3922: C770 <= ( len D387 )
and
L3923: ( D387 . C769 ) = ( D387 . C770 );
L3924:
now
per cases  by L3916;
suppose L3925: C766 is  open;

L3926:
now
per cases ;
suppose L3927: C770 <= ( len C766 );

L3928: 1 <= C769 by ABIAN:12;
L3929: C769 <= ( len C766 ) by L3921 , L3927 , XXREAL_0:2;
L3930: C769 in ( dom C766 ) by L3929 , L3928 , FINSEQ_3:25;
L3931: ( D387 . C769 ) = ( C766 . C769 ) by L3930 , L3914 , L967;
L3932: 1 <= C770 by ABIAN:12;
L3933: C770 in ( dom C766 ) by L3932 , L3927 , FINSEQ_3:25;
L3934: ( C766 . C769 ) = ( C766 . C770 ) by L3933 , L3914 , L3923 , L3931 , L967;
L3935: C769 = 1 by L3934 , L3921 , L3927 , L495;
L3936: ( C766 .first() ) = ( C766 .last() ) by L3935 , L3921 , L3927 , L3934 , L495;
thus L3937: (C769 = 1 & C770 = ( len D387 )) by L3936 , L3925 , L489;
end;
suppose L3938: C770 > ( len C766 );

L3939: ( D386 + 1 ) <= C770 by L3938 , NAT_1:13;
L3940: ( D386 + 1 ) < C770 by L3939 , XXREAL_0:1;
L3941: ( ( D386 + 1 ) + 1 ) <= C770 by L3940 , NAT_1:13;
L3942: ( ( len C766 ) + ( 1 + 1 ) ) <= C770 by L3941;
L3943: ( len D387 ) <= C770 by L3942 , L3914 , L959;
L3944: C770 = ( len D387 ) by L3943 , L3922 , XXREAL_0:1;
L3945: ( D387 . C770 ) = ( D387 . ( ( len C766 ) + 2 ) ) by L3944 , L3914 , L959;
L3946: ( D387 . C770 ) = C768 by L3945 , L3914 , L967;
L3947: C769 < ( ( len C766 ) + ( 1 + 1 ) ) by L3914 , L3921 , L3944 , L959;
L3948: C769 < ( ( ( len C766 ) + 1 ) + 1 ) by L3947;
L3949: C769 <= ( D386 + 1 ) by L3948 , NAT_1:13;
L3950: C769 < ( D386 + 1 ) by L3949 , XXREAL_0:1;
L3951: C769 <= ( len C766 ) by L3950 , NAT_1:13;
L3952: 1 <= C769 by ABIAN:12;
L3953: C769 in ( dom C766 ) by L3952 , L3951 , FINSEQ_3:25;
L3954: ( C766 . C769 ) = C768 by L3953 , L3914 , L3923 , L3946 , L967;
L3955:
now
L3956: 1 <= C769 by ABIAN:12;
assume L3957: C769 <> 1;
L3958: 1 < C769 by L3957 , L3956 , XXREAL_0:1;
thus L3959: contradiction by L3958 , L3917 , L3951 , L3954;
end;
thus L3960: C769 = 1 by L3955;
thus L3961: C770 = ( len D387 ) by L3922 , L3943 , XXREAL_0:1;
end;
end;
thus L3963: (C769 = 1 & C770 = ( len D387 )) by L3926;
end;
suppose L3964: C766 is  trivial;

L3965: (ex B561 being (Vertex of R1) st C766 = ( R1 .walkOf B561 )) by L3964 , L1271;
L3966: ( len C766 ) = 1 by L3965 , L2798;
L3967: ( len D387 ) = ( 1 + 2 ) by L3966 , L3914 , L959;
L3968: ( C769 + 1 ) <= C770 by L3921 , NAT_1:13;
L3969: 1 <= C769 by ABIAN:12;
L3970: ( 1 + 1 ) <= ( C769 + 1 ) by L3969 , XREAL_1:7;
L3971: ( 2 * 1 ) <= C770 by L3970 , L3968 , XXREAL_0:2;
L3972: ( 2 * 1 ) < C770 by L3971 , XXREAL_0:1;
L3973: ( len D387 ) <= C770 by L3972 , L3967 , NAT_1:13;
L3974: C769 < 3 by L3973 , L3921 , L3922 , L3967 , XXREAL_0:1;
L3975: ( ( C769 + 1 ) - 1 ) <= ( 3 - 1 ) by L3974 , L3967 , NAT_1:13;
L3976: C769 < ( 2 * 1 ) by L3975 , XXREAL_0:1;
L3977: ( C769 + 1 ) <= 2 by L3976 , NAT_1:13;
L3978: ( ( C769 + 1 ) - 1 ) <= ( 2 - 1 ) by L3977 , XREAL_1:13;
thus L3979: (C769 = 1 & C770 = ( len D387 )) by L3978 , L3922 , L3969 , L3973 , XXREAL_0:1;
end;
end;
thus L3981: (C769 = 1 & C770 = ( len D387 )) by L3924;
end;
thus L3982: thesis by L3919 , L495;
end;
theorem
L3983: (for R1 being _Graph holds (for B562 being (Path of R1) holds (for B563 , B564 being set holds ((B563 Joins ( B562 .last() ) , B564 , R1 & (not B564 in ( B562 .vertices() )) & (B562 is  trivial or B562 is  open)) implies ( B562 .addEdge B563 ) is  Path-like)))) by L1663;
theorem
L3984: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ((for B565 being  odd (Element of ( NAT )) holds (B565 <= ( len R4 ) implies ( R4 .find ( R4 . B565 ) ) = ( R4 .rfind ( R4 . B565 ) ))) implies R4 is  Path-like)))
proof
let R1 being _Graph;
let R4 being (Walk of R1);
assume L3985: (for B566 being  odd (Element of ( NAT )) holds (B566 <= ( len R4 ) implies ( R4 .find ( R4 . B566 ) ) = ( R4 .rfind ( R4 . B566 ) )));
L3986:
now
let C771 being  odd (Element of ( NAT ));
assume L3987: C771 <= ( len R4 );
L3988: ( R4 .rfind ( R4 . C771 ) ) >= C771 by L3987 , L3654;
L3989: ( R4 .find ( R4 . C771 ) ) = ( R4 .rfind ( R4 . C771 ) ) by L3985 , L3987;
L3990: ( R4 .find ( R4 . C771 ) ) <= C771 by L3987 , L3654;
thus L3991: (( R4 .find ( R4 . C771 ) ) = C771 & ( R4 .rfind ( R4 . C771 ) ) = C771) by L3990 , L3988 , L3989 , XXREAL_0:1;
end;
L3992:
now
let C772 , C773 being  even (Element of ( NAT ));
assume that
L3993: 1 <= C772
and
L3994: C772 < C773
and
L3995: C773 <= ( len R4 );
L3996: 1 <= C773 by L3993 , L3994 , XXREAL_0:2;
L3997: C773 in ( dom R4 ) by L3996 , L3995 , FINSEQ_3:25;
consider C774 being  odd (Element of ( NAT )) such that L3998: C774 = ( C773 - 1 ) and L3999: ( C773 - 1 ) in ( dom R4 ) and L4000: ( C773 + 1 ) in ( dom R4 ) and L4001: ( R4 . C773 ) Joins ( R4 . C774 ) , ( R4 . ( C773 + 1 ) ) , R1 by L3997 , L506;
L4002: C772 <= ( len R4 ) by L3994 , L3995 , XXREAL_0:2;
L4003: C772 in ( dom R4 ) by L4002 , L3993 , FINSEQ_3:25;
consider C775 being  odd (Element of ( NAT )) such that L4004: C775 = ( C772 - 1 ) and L4005: ( C772 - 1 ) in ( dom R4 ) and L4006: ( C772 + 1 ) in ( dom R4 ) and L4007: ( R4 . C772 ) Joins ( R4 . C775 ) , ( R4 . ( C772 + 1 ) ) , R1 by L4003 , L506;
L4008:
now
set D388 = ( R4 . C774 );
set D389 = ( R4 . ( C773 + 1 ) );
set D390 = ( R4 . C775 );
set D391 = ( R4 . ( C772 + 1 ) );
assume L4009: ( R4 . C772 ) = ( R4 . C773 );
L4010: C775 <= ( len R4 ) by L4004 , L4005 , FINSEQ_3:25;
L4011: ( R4 .find D390 ) = C775 by L4010 , L3986;
L4012: ( C773 + 1 ) <= ( len R4 ) by L4000 , FINSEQ_3:25;
L4013: C774 <= ( len R4 ) by L3998 , L3999 , FINSEQ_3:25;
L4014:
now
per cases  by L4007 , L4001 , L4009 , GLIB_000:15;
suppose L4015: (D390 = D388 & D391 = D389);

L4016: C775 = C774 by L4015 , L3986 , L4013 , L4011;
thus L4017: contradiction by L4016 , L3994 , L4004 , L3998;
end;
suppose L4018: (D390 = D389 & D391 = D388);

L4019: C775 = ( C773 + 1 ) by L4018 , L3986 , L4012 , L4011;
L4020: C773 <= ( ( C775 - 1 ) + 1 ) by L4019 , NAT_1:12;
L4021: C773 <= ( ( C772 - 1 ) + 1 ) by L4020 , L4004 , NAT_1:12;
thus L4022: contradiction by L4021 , L3994;
end;
end;
thus L4024: contradiction by L4014;
end;
thus L4025: ( R4 . C772 ) <> ( R4 . C773 ) by L4008;
end;
L4026: R4 is  Trail-like by L3992 , L1279;
L4027:
now
let C776 , C777 being  odd (Element of ( NAT ));
assume that
L4028: C776 < C777
and
L4029: C777 <= ( len R4 )
and
L4030: ( R4 . C776 ) = ( R4 . C777 );
L4031: C776 <= ( len R4 ) by L4028 , L4029 , XXREAL_0:2;
L4032: ( R4 .find ( R4 . C776 ) ) = C776 by L4031 , L3986;
thus L4033: (C776 = 1 & C777 = ( len R4 )) by L4032 , L3986 , L4028 , L4029 , L4030;
end;
thus L4034: thesis by L4027 , L4026 , L495;
end;
theorem
L4035: (for R1 being _Graph holds (for R4 being (Walk of R1) holds ((for B567 being  odd (Element of ( NAT )) holds (B567 <= ( len R4 ) implies ( R4 .rfind B567 ) = B567)) implies R4 is  Path-like))) by L1651;
theorem
L4036: (for B568 being  finite _Graph holds (for B569 being (Path of B568) holds ( len ( B569 .vertexSeq() ) ) <= ( ( B568 .order() ) + 1 )))
proof
let C778 being  finite _Graph;
let C779 being (Path of C778);
L4037:
now
per cases ;
suppose L4038: ( len C779 ) = 1;

L4039: ( 1 + 1 ) = ( 2 * ( len ( C779 .vertexSeq() ) ) ) by L4038 , L262;
thus L4040: thesis by L4039 , NAT_1:12;
end;
suppose L4041: ( len C779 ) <> 1;

L4042: C779 is non  trivial by L4041 , L1262;
consider C780 being  odd (Element of ( NAT )) such that L4043: C780 = ( ( len C779 ) - 2 ) and L4044: ( ( C779 .cut (1 , C780) ) .addEdge ( C779 . ( C780 + 1 ) ) ) = C779 by L4042 , L3750;
set D392 = ( C779 .cut (1 , C780) );
set D393 = ( D392 .vertexSeq() );
consider C781 being Function such that L4045: (( dom C781 ) = D393 & (for B570 being set holds (B570 in D393 implies ( C781 . B570 ) = ( B570 `2 )))) from FUNCT_1:sch 3;
L4046: C780 < ( ( len C779 ) - ( 0 ) ) by L4043 , XREAL_1:15;
L4047: ( len D392 ) = C780 by L4046 , L790;
L4048:
now
let C782 , C783 being set;
assume that
L4049: C782 in ( dom C781 )
and
L4050: C783 in ( dom C781 )
and
L4051: ( C781 . C782 ) = ( C781 . C783 );
consider C784 , C785 being set such that L4052: C782 = [ C784 , C785 ] by L4045 , L4049 , RELAT_1:def 1;
L4053: C785 = ( D393 . C784 ) by L4045 , L4049 , L4052 , FUNCT_1:1;
L4054: ( [ C784 , C785 ] `2 ) = C785;
L4055: ( C781 . C782 ) = ( C782 `2 ) by L4045 , L4049
.= C785 by L4052 , L4054;
consider C786 , C787 being set such that L4056: C783 = [ C786 , C787 ] by L4045 , L4050 , RELAT_1:def 1;
L4057: C786 in ( dom D393 ) by L4045 , L4050 , L4056 , FUNCT_1:1;
L4058: C784 in ( dom D393 ) by L4045 , L4049 , L4052 , FUNCT_1:1;
L4059: C787 = ( D393 . C786 ) by L4045 , L4050 , L4056 , FUNCT_1:1;
L4060: ( [ C786 , C787 ] `2 ) = C787;
L4061: ( C781 . C783 ) = ( C783 `2 ) by L4045 , L4050
.= C787 by L4056 , L4060;
reconsider D394 = C784 , D395 = C786 as (Element of ( NAT )) by L4058 , L4057;
L4062:
now
let C788 , C789 being (Element of ( NAT ));
assume that
L4063: C788 < C789
and
L4064: C788 in ( dom D393 )
and
L4065: C789 in ( dom D393 )
and
L4066: ( D393 . C788 ) = ( D393 . C789 );
L4067: ( ( 2 * C789 ) - 1 ) in ( dom D392 ) by L4065 , L3066;
L4068: ( ( 2 * C788 ) - 1 ) in ( dom D392 ) by L4064 , L3066;
reconsider D396 = ( ( 2 * C788 ) - 1 ) , D397 = ( ( 2 * C789 ) - 1 ) as  odd (Element of ( NAT )) by L4068 , L4067;
L4069: ( D392 . D397 ) = ( C779 . D397 ) by L4046 , L4067 , L795;
L4070: C789 <= ( len D393 ) by L4065 , FINSEQ_3:25;
L4071: 1 <= C789 by L4065 , FINSEQ_3:25;
L4072: ( D393 . C789 ) = ( D392 . D397 ) by L4071 , L4070 , L262;
L4073: C788 <= ( len D393 ) by L4064 , FINSEQ_3:25;
L4074: 1 <= C788 by L4064 , FINSEQ_3:25;
L4075: ( D393 . C788 ) = ( D392 . D396 ) by L4074 , L4073 , L262;
L4076: D397 <= C780 by L4047 , L4067 , FINSEQ_3:25;
L4077: D397 < ( len C779 ) by L4076 , L4046 , XXREAL_0:2;
L4078: ( 2 * C788 ) < ( 2 * C789 ) by L4063 , XREAL_1:68;
L4079: D396 < D397 by L4078 , XREAL_1:14;
L4080: ( D392 . D396 ) = ( C779 . D396 ) by L4046 , L4068 , L795;
thus L4081: contradiction by L4080 , L4066 , L4075 , L4072 , L4069 , L4079 , L4077 , L495;
end;
L4082:
now
assume L4083: D394 <> D395;
L4084:
now
per cases ;
suppose L4085: D394 <= D395;

L4086: D394 < D395 by L4085 , L4083 , XXREAL_0:1;
thus L4087: contradiction by L4086 , L4051 , L4055 , L4061 , L4058 , L4053 , L4057 , L4059 , L4062;
end;
suppose L4088: D394 > D395;

thus L4089: contradiction by L4088 , L4051 , L4055 , L4061 , L4058 , L4053 , L4057 , L4059 , L4062;
end;
end;
thus L4091: contradiction by L4084;
end;
thus L4092: C782 = C783 by L4082 , L4051 , L4052 , L4056 , L4055 , L4061;
end;
L4093: C781 is  one-to-one by L4048 , FUNCT_1:def 4;
L4094:
now
let C790 being set;
assume L4095: C790 in ( rng C781 );
consider C791 being set such that L4096: C791 in ( dom C781 ) and L4097: ( C781 . C791 ) = C790 by L4095 , FUNCT_1:def 3;
consider C792 , C793 being set such that L4098: C791 = [ C792 , C793 ] by L4045 , L4096 , RELAT_1:def 1;
L4099: ( [ C792 , C793 ] `2 ) = C793;
L4100: C790 = ( C791 `2 ) by L4045 , L4096 , L4097;
L4101: C790 = C793 by L4100 , L4098 , L4099;
L4102: C793 = ( D393 . C792 ) by L4045 , L4096 , L4098 , FUNCT_1:1;
L4103: C792 in ( dom D393 ) by L4045 , L4096 , L4098 , FUNCT_1:1;
L4104: C790 in ( rng D393 ) by L4103 , L4101 , L4102 , FUNCT_1:def 3;
thus L4105: C790 in ( the_Vertices_of C778 ) by L4104;
end;
L4106: ( rng C781 ) c= ( the_Vertices_of C778 ) by L4094 , TARSKI:def 3;
L4107: ( card D393 ) c= ( card ( the_Vertices_of C778 ) ) by L4106 , L4045 , L4093 , CARD_1:10;
L4108: ( card D393 ) <= ( card ( the_Vertices_of C778 ) ) by L4107 , NAT_1:39;
L4109: ( len D393 ) <= ( C778 .order() ) by L4108 , GLIB_000:def 24;
L4110: ( ( len D393 ) + 1 ) <= ( ( C778 .order() ) + 1 ) by L4109 , XREAL_1:7;
L4111: C780 < ( ( len C779 ) - ( 0 ) ) by L4043 , XREAL_1:15;
L4112: ( C779 . ( C780 + 1 ) ) Joins ( C779 . C780 ) , ( C779 . ( C780 + 2 ) ) , C778 by L4111 , L55;
L4113: 1 <= C780 by ABIAN:12;
L4114: ( D392 .last() ) = ( C779 . C780 ) by L4113 , L4111 , L677 , JORDAN12:2;
L4115: ( C779 .vertexSeq() ) = ( D393 ^ <* ( C779 . ( C780 + 2 ) ) *> ) by L4114 , L4044 , L4112 , L3117;
L4116: ( len ( C779 .vertexSeq() ) ) = ( ( len D393 ) + ( len <* ( C779 . ( C780 + 2 ) ) *> ) ) by L4115 , FINSEQ_1:22;
thus L4117: thesis by L4116 , L4110 , FINSEQ_1:39;
end;
end;
thus L4119: thesis by L4037;
end;
theorem
L4120: (for B571 being _Graph holds (for B572 being  vertex-distinct (Walk of B571) holds (for B573 , B574 being set holds ((B573 Joins ( B572 .last() ) , B574 , B571 & (not B574 in ( B572 .vertices() ))) implies ( B572 .addEdge B573 ) is  vertex-distinct))))
proof
let C794 being _Graph;
let C795 being  vertex-distinct (Walk of C794);
let C796 , C797 being set;
assume that
L4121: C796 Joins ( C795 .last() ) , C797 , C794
and
L4122: (not C797 in ( C795 .vertices() ));
set D398 = ( C795 .addEdge C796 );
L4123: ( len D398 ) = ( ( len C795 ) + 2 ) by L4121 , L959;
L4124:
now
let C798 being  odd (Element of ( NAT ));
assume that
L4125: C798 <= ( len D398 )
and
L4126: C798 > ( len C795 );
L4127: ( ( len C795 ) + 1 ) <= C798 by L4126 , NAT_1:13;
L4128: ( ( len C795 ) + 1 ) < C798 by L4127 , XXREAL_0:1;
L4129: ( ( ( len C795 ) + 1 ) + 1 ) <= C798 by L4128 , NAT_1:13;
thus L4130: C798 = ( len D398 ) by L4129 , L4123 , L4125 , XXREAL_0:1;
thus L4131: ( D398 . C798 ) = C797 by L4130 , L4121 , L4123 , L967;
end;
L4132:
now
let C799 , C800 being  odd (Element of ( NAT ));
assume that
L4133: C799 <= ( len D398 )
and
L4134: C800 <= ( len D398 )
and
L4135: ( D398 . C799 ) = ( D398 . C800 );
L4136: 1 <= C800 by ABIAN:12;
L4137: 1 <= C799 by ABIAN:12;
L4138:
now
per cases ;
suppose L4139: C799 <= ( len C795 );

L4140: C799 in ( dom C795 ) by L4139 , L4137 , FINSEQ_3:25;
L4141: ( D398 . C799 ) = ( C795 . C799 ) by L4140 , L4121 , L967;
L4142:
now
per cases ;
suppose L4143: C800 <= ( len C795 );

L4144: C800 in ( dom C795 ) by L4143 , L4136 , FINSEQ_3:25;
L4145: ( D398 . C800 ) = ( C795 . C800 ) by L4144 , L4121 , L967;
thus L4146: C799 = C800 by L4145 , L4135 , L4139 , L4141 , L4143 , L497;
end;
suppose L4147: C800 > ( len C795 );

L4148: ( C795 . C799 ) = C797 by L4147 , L4124 , L4134 , L4135 , L4141;
thus L4149: C799 = C800 by L4148 , L4122 , L4139 , L1088;
end;
end;
thus L4151: C799 = C800 by L4142;
end;
suppose L4152: C799 > ( len C795 );

L4153: ( D398 . C799 ) = C797 by L4152 , L4124 , L4133;
L4154: C799 = ( len D398 ) by L4124 , L4133 , L4152;
L4155:
now
per cases ;
suppose L4156: C800 <= ( len C795 );

L4157: C800 in ( dom C795 ) by L4156 , L4136 , FINSEQ_3:25;
L4158: C797 = ( C795 . C800 ) by L4157 , L4121 , L4135 , L4153 , L967;
thus L4159: C799 = C800 by L4158 , L4122 , L4156 , L1088;
end;
suppose L4160: C800 > ( len C795 );

thus L4161: C799 = C800 by L4160 , L4124 , L4134 , L4154;
end;
end;
thus L4163: C799 = C800 by L4155;
end;
end;
thus L4165: C799 = C800 by L4138;
end;
thus L4166: thesis by L4132 , L497;
end;
theorem
L4167: (for R1 being _Graph holds (for R7 being set holds (for R8 being set holds (R7 Joins R8 , R8 , R1 implies ( R1 .walkOf (R8 , R7 , R8) ) is  Cycle-like))))
proof
let R1 being _Graph;
let R7 being set;
let R8 being set;
set D399 = ( R1 .walkOf (R8 , R7 , R8) );
assume L4168: R7 Joins R8 , R8 , R1;
L4169: ( len D399 ) = 3 by L4168 , L2803;
L4170: D399 is non  trivial by L4169 , L1250;
thus L4171: thesis by L4170 , L500;
end;
theorem
L4172: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R7 being set holds (for R8 being set holds (for R9 being set holds ((R7 Joins R8 , R9 , R1 & R7 in ( R5 .edges() ) & R5 is  Cycle-like) implies (ex B575 being (Walk of R1) st (B575 is_Walk_from R8 , R9 & (not R7 in ( B575 .edges() ))))))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R7 being set;
let R8 being set;
let R9 being set;
assume that
L4173: R7 Joins R8 , R9 , R1
and
L4174: R7 in ( R5 .edges() )
and
L4175: R5 is  Cycle-like;
consider C801 , C802 being (Vertex of R1), C803 being  odd (Element of ( NAT )) such that L4176: ( C803 + 2 ) <= ( len R5 ) and L4177: C801 = ( R5 . C803 ) and L4178: R7 = ( R5 . ( C803 + 1 ) ) and L4179: C802 = ( R5 . ( C803 + 2 ) ) and L4180: R7 Joins C801 , C802 , R1 by L4174 , L1146;
set D400 = ( R5 .cut (( C803 + 2 ) , ( len R5 )) );
set D401 = ( R5 .cut (( ( 2 * ( 0 ) ) + 1 ) , C803) );
L4181: ( D400 .last() ) = ( R5 .last() ) by L4176 , L677;
L4182: ( ( C803 + 2 ) - 2 ) < ( ( len R5 ) - ( 0 ) ) by L4176 , XREAL_1:15;
L4183:
now
assume L4184: R7 in ( D401 .edges() );
consider C804 being  even (Element of ( NAT )) such that L4185: 1 <= C804 and L4186: C804 <= ( len D401 ) and L4187: ( D401 . C804 ) = R7 by L4184 , L1116;
L4188: C804 in ( dom D401 ) by L4185 , L4186 , FINSEQ_3:25;
L4189: ( R5 . C804 ) = ( R5 . ( C803 + 1 ) ) by L4188 , L4178 , L4182 , L4187 , L795;
L4190: ( len D401 ) = C803 by L4182 , L790;
L4191: ( C804 + ( 0 ) ) < ( C803 + 1 ) by L4190 , L4186 , XREAL_1:8;
L4192: ( C803 + 1 ) <= ( len R5 ) by L4182 , NAT_1:13;
thus L4193: contradiction by L4192 , L4175 , L4185 , L4189 , L4191 , L1279;
end;
L4194: 1 <= C803 by ABIAN:12;
L4195: D401 is_Walk_from ( R5 .first() ) , C801 by L4194 , L4177 , L4182 , L677;
L4196: D401 is_Walk_from ( R5 .last() ) , C801 by L4195 , L4175 , L489;
L4197: D400 is_Walk_from C802 , ( R5 . ( len R5 ) ) by L4176 , L4179 , L677;
L4198: ( D400 .append D401 ) is_Walk_from C802 , C801 by L4197 , L4196 , L2871;
L4199: ( ( D400 .append D401 ) .reverse() ) is_Walk_from C801 , C802 by L4198 , L2842;
L4200:
now
assume L4201: R7 in ( D400 .edges() );
consider C805 being  even (Element of ( NAT )) such that L4202: 1 <= C805 and L4203: C805 <= ( len D400 ) and L4204: ( D400 . C805 ) = R7 by L4201 , L1116;
reconsider D402 = ( C805 - 1 ) as  odd (Element of ( NAT )) by L4202 , INT_1:5;
L4205: D402 < ( ( len D400 ) - ( 0 ) ) by L4203 , XREAL_1:15;
L4206: ( ( C803 + 2 ) + D402 ) in ( dom R5 ) by L4205 , L4176 , L664;
L4207: ( ( C803 + 2 ) + D402 ) <= ( len R5 ) by L4206 , FINSEQ_3:25;
L4208: ( D402 + 1 ) = C805;
L4209: R7 = ( R5 . ( ( C803 + 2 ) + D402 ) ) by L4208 , L4176 , L4204 , L4205 , L664;
L4210: ( C803 + 1 ) < ( ( C803 + 1 ) + 1 ) by NAT_1:13;
L4211: ( ( C803 + 1 ) + ( 0 ) ) < ( ( C803 + 2 ) + D402 ) by L4210 , XREAL_1:8;
L4212: 1 <= ( C803 + 1 ) by NAT_1:12;
thus L4213: contradiction by L4212 , L4175 , L4178 , L4209 , L4207 , L4211 , L1279;
end;
L4214: ( D401 .first() ) = ( R5 .last() ) by L4196 , L487;
L4215: ( ( D400 .append D401 ) .edges() ) = ( ( D400 .edges() ) \/ ( D401 .edges() ) ) by L4214 , L4181 , L3502;
L4216: (not R7 in ( ( D400 .append D401 ) .edges() )) by L4215 , L4200 , L4183 , XBOOLE_0:def 3;
L4217: (not R7 in ( ( ( D400 .append D401 ) .reverse() ) .edges() )) by L4216 , L3582;
L4218:
now
per cases  by L4173 , L4180 , GLIB_000:15;
suppose L4219: (R8 = C801 & R9 = C802);

thus L4220: thesis by L4219 , L4217 , L4199;
end;
suppose L4221: (R8 = C802 & R9 = C801);

thus L4222: thesis by L4221 , L4197 , L4196 , L4216 , L2871;
end;
end;
thus L4224: thesis by L4218;
end;
theorem
L4225: (for R1 being _Graph holds (for R4 being (Walk of R1) holds R4 is (Subwalk of R4))) by L2029;
theorem
L4226: (for R1 being _Graph holds (for B576 being (Walk of R1) holds (for B577 being (Subwalk of B576) holds (for B578 being (Subwalk of B577) holds B578 is (Subwalk of B576))))) by L2033;
theorem
L4227: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (for R8 being set holds (for R9 being set holds (R5 is (Subwalk of R6) implies (R5 is_Walk_from R8 , R9 iff R6 is_Walk_from R8 , R9)))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
let R8 being set;
let R9 being set;
assume L4228: R5 is (Subwalk of R6);
thus L4229:now
L4230: R5 is_Walk_from ( R6 .first() ) , ( R6 .last() ) by L4228 , L2025;
assume L4231: R5 is_Walk_from R8 , R9;
L4232: ( R5 .last() ) = R9 by L4231 , L487;
L4233: R9 = ( R6 .last() ) by L4232 , L4230 , L487;
L4234: ( R5 .first() ) = R8 by L4231 , L487;
L4235: R8 = ( R6 .first() ) by L4234 , L4230 , L487;
thus L4236: R6 is_Walk_from R8 , R9 by L4235 , L4233 , L487;
end;
assume L4237: R6 is_Walk_from R8 , R9;
L4238: ( R6 .last() ) = R9 by L4237 , L487;
L4239: ( R6 .first() ) = R8 by L4237 , L487;
thus L4240: thesis by L4239 , L4228 , L4238 , L2025;
end;
theorem
L4241: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R5 is (Subwalk of R6) implies (( R5 .first() ) = ( R6 .first() ) & ( R5 .last() ) = ( R6 .last() ))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume L4242: R5 is (Subwalk of R6);
L4243: R5 is_Walk_from ( R6 .first() ) , ( R6 .last() ) by L4242 , L2025;
thus L4244: thesis by L4243 , L487;
end;
theorem
L4245: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R5 is (Subwalk of R6) implies ( len R5 ) <= ( len R6 ))))) by L2041;
theorem
L4246: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R5 is (Subwalk of R6) implies (( R5 .edges() ) c= ( R6 .edges() ) & ( R5 .vertices() ) c= ( R6 .vertices() ))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume L4247: R5 is (Subwalk of R6);
consider C806 being (Subset of ( R6 .edgeSeq() )) such that L4248: ( R5 .edgeSeq() ) = ( Seq C806 ) by L4247 , L2025;
L4249:
now
let C807 being set;
assume L4250: C807 in ( R5 .edges() );
consider C808 being  even (Element of ( NAT )) such that L4251: 1 <= C808 and L4252: C808 <= ( len R5 ) and L4253: ( R5 . C808 ) = C807 by L4250 , L1116;
L4254: ( R5 . C808 ) = ( ( Seq C806 ) . ( C808 div 2 ) ) by L4248 , L4251 , L4252 , L985;
L4255: ( C808 div 2 ) in ( dom ( Seq C806 ) ) by L4248 , L4251 , L4252 , L985;
L4256: (ex B579 being (Element of ( NAT )) st (B579 in ( dom ( R6 .edgeSeq() ) ) & ( C808 div 2 ) <= B579 & ( R5 . C808 ) = ( ( R6 .edgeSeq() ) . B579 ))) by L4255 , L4254 , L18;
thus L4257: C807 in ( R6 .edges() ) by L4256 , L4253 , L3552;
end;
thus L4258: ( R5 .edges() ) c= ( R6 .edges() ) by L4249 , TARSKI:def 3;
L4259:
now
per cases ;
suppose L4260: R5 is  trivial;

L4261:
now
let C809 being set;
assume L4262: C809 in ( R5 .vertices() );
consider C810 being  odd (Element of ( NAT )) such that L4263: C810 <= ( len R5 ) and L4264: ( R5 . C810 ) = C809 by L4262 , L1088;
L4265: 1 <= C810 by ABIAN:12;
L4266: C810 <= 1 by L4260 , L4263 , L1262;
L4267: C809 = ( R5 .first() ) by L4266 , L4264 , L4265 , XXREAL_0:1;
L4268: C809 = ( R6 .first() ) by L4267 , L4247 , L4241;
thus L4269: C809 in ( R6 .vertices() ) by L4268 , L3268;
end;
thus L4270: thesis by L4261 , TARSKI:def 3;
end;
suppose L4271: R5 is non  trivial;

thus L4272: thesis by L4271 , L4258 , L3756;
end;
end;
thus L4274: thesis by L4259;
end;
theorem
L4275: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R5 is (Subwalk of R6) implies (for B580 being  odd (Element of ( NAT )) holds (B580 <= ( len R5 ) implies (ex B581 being  odd (Element of ( NAT )) st (B580 <= B581 & B581 <= ( len R6 ) & ( R5 . B580 ) = ( R6 . B581 )))))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume L4276: R5 is (Subwalk of R6);
let C811 being  odd (Element of ( NAT ));
assume that
L4277: C811 <= ( len R5 );
L4278: (ex B582 being (Subset of ( R6 .edgeSeq() )) st ( R5 .edgeSeq() ) = ( Seq B582 )) by L4276 , L2025;
L4279:
now
per cases  by L4277 , XXREAL_0:1;
suppose L4280: C811 < ( len R5 );

L4281: ( R5 . ( C811 + 1 ) ) Joins ( R5 . C811 ) , ( R5 . ( C811 + 2 ) ) , R1 by L4280 , L55;
reconsider D403 = ( C811 + 1 ) as  even (Element of ( NAT ));
L4282: 1 <= D403 by NAT_1:12;
L4283: D403 <= ( len R5 ) by L4280 , NAT_1:13;
L4284: ( R5 . D403 ) = ( ( R5 .edgeSeq() ) . ( D403 div 2 ) ) by L4283 , L4282 , L985;
L4285: ( D403 div 2 ) in ( dom ( R5 .edgeSeq() ) ) by L4282 , L4283 , L985;
consider C812 being (Element of ( NAT )) such that L4286: C812 in ( dom ( R6 .edgeSeq() ) ) and L4287: ( D403 div 2 ) <= C812 and L4288: ( R5 . D403 ) = ( ( R6 .edgeSeq() ) . C812 ) by L4285 , L4278 , L4284 , L18;
set D404 = ( 2 * C812 );
L4289: 1 <= C812 by L4286 , FINSEQ_3:25;
L4290: 2 divides D403 by PEPIN:22;
L4291: ( 2 * ( D403 div 2 ) ) = D403 by L4290 , NAT_D:3;
L4292: D403 <= D404 by L4291 , L4287 , XREAL_1:64;
L4293: ( D403 - 1 ) <= ( D404 - 1 ) by L4292 , XREAL_1:13;
L4294: C812 <= ( len ( R6 .edgeSeq() ) ) by L4286 , FINSEQ_3:25;
L4295: D404 in ( dom R6 ) by L4286 , L1009;
L4296: 1 <= D404 by L4295 , FINSEQ_3:25;
reconsider D405 = ( D404 - 1 ) as  odd (Element of ( NAT )) by L4296 , INT_1:5;
L4297: D404 <= ( len R6 ) by L4295 , FINSEQ_3:25;
L4298: D405 < ( ( len R6 ) - ( 0 ) ) by L4297 , XREAL_1:15;
L4299: ( R6 . ( D405 + 1 ) ) Joins ( R6 . D405 ) , ( R6 . ( D405 + 2 ) ) , R1 by L4298 , L55;
L4300: ( R5 . D403 ) Joins ( R6 . D405 ) , ( R6 . ( D405 + 2 ) ) , R1 by L4299 , L4288 , L4289 , L4294 , L314;
L4301: ( D405 + 2 ) <= ( len R6 ) by L4298 , L1;
L4302:
now
per cases  by L4281 , L4300 , GLIB_000:15;
suppose L4303: ( R5 . C811 ) = ( R6 . D405 );

thus L4304: thesis by L4303 , L4298 , L4293;
end;
suppose L4305: ( R5 . C811 ) = ( R6 . ( D405 + 2 ) );

thus L4306: thesis by L4305 , L4293 , L4301 , NAT_1:12;
end;
end;
thus L4308: thesis by L4302;
end;
suppose L4309: C811 = ( len R5 );

L4310: ( len R5 ) <= ( len R6 ) by L4276 , L2041;
L4311: C811 <= ( len R6 ) by L4310 , L4277 , XXREAL_0:2;
L4312: ( R5 . C811 ) = ( R5 .last() ) by L4309
.= ( R6 .last() ) by L4276 , L4241
.= ( R6 . ( len R6 ) );
thus L4313: thesis by L4312 , L4311;
end;
end;
thus L4315: thesis by L4279;
end;
theorem
L4316: (for R1 being _Graph holds (for R5 being (Walk of R1) holds (for R6 being (Walk of R1) holds (R5 is (Subwalk of R6) implies (for B583 being  even (Element of ( NAT )) holds ((1 <= B583 & B583 <= ( len R5 )) implies (ex B584 being  even (Element of ( NAT )) st (B583 <= B584 & B584 <= ( len R6 ) & ( R5 . B583 ) = ( R6 . B584 )))))))))
proof
let R1 being _Graph;
let R5 being (Walk of R1);
let R6 being (Walk of R1);
assume L4317: R5 is (Subwalk of R6);
L4318: (ex B585 being (Subset of ( R6 .edgeSeq() )) st ( R5 .edgeSeq() ) = ( Seq B585 )) by L4317 , L2025;
let C813 being  even (Element of ( NAT ));
assume that
L4319: 1 <= C813
and
L4320: C813 <= ( len R5 );
L4321: ( R5 . C813 ) = ( ( R5 .edgeSeq() ) . ( C813 div 2 ) ) by L4319 , L4320 , L985;
L4322: ( C813 div 2 ) in ( dom ( R5 .edgeSeq() ) ) by L4319 , L4320 , L985;
consider C814 being (Element of ( NAT )) such that L4323: C814 in ( dom ( R6 .edgeSeq() ) ) and L4324: ( C813 div 2 ) <= C814 and L4325: ( R5 . C813 ) = ( ( R6 .edgeSeq() ) . C814 ) by L4322 , L4318 , L4321 , L18;
L4326: C814 <= ( len ( R6 .edgeSeq() ) ) by L4323 , FINSEQ_3:25;
L4327: 2 divides C813 by PEPIN:22;
L4328: ( 2 * ( C813 div 2 ) ) = C813 by L4327 , NAT_D:3;
L4329: ( 2 * C814 ) in ( dom R6 ) by L4323 , L1009;
L4330: ( 2 * C814 ) <= ( len R6 ) by L4329 , FINSEQ_3:25;
L4331: 1 <= C814 by L4323 , FINSEQ_3:25;
L4332: ( R5 . C813 ) = ( R6 . ( 2 * C814 ) ) by L4331 , L4325 , L4326 , L314;
thus L4333: thesis by L4332 , L4324 , L4328 , L4330 , XREAL_1:64;
end;
theorem
L4334: (for R1 being _Graph holds (for B586 being (Trail of R1) holds (B586 is non  trivial implies (ex B587 being (Path of B586) st B587 is non  trivial))))
proof
let R1 being _Graph;
let C815 being (Trail of R1);
assume L4335: C815 is non  trivial;
L4336: 1 <> ( len C815 ) by L4335 , L1262;
L4337: 1 <= ( len C815 ) by ABIAN:12;
L4338: 1 < ( len C815 ) by L4337 , L4336 , XXREAL_0:1;
L4339:
now
per cases ;
suppose L4340: C815 is  open;

set D406 = the (Path of C815);
take D407 = D406;
L4341: ( D407 .first() ) = ( C815 .first() ) by L4241;
L4342: ( D407 .last() ) = ( C815 .last() ) by L4241;
L4343: ( C815 .first() ) <> ( C815 .last() ) by L4340 , L489;
thus L4344: D407 is non  trivial by L4343 , L4341 , L4342 , L1262;
end;
suppose L4345: C815 is  closed;

defpred S8[ Nat ] means ($1 is  odd & 1 < $1 & $1 <= ( len C815 ) & ( C815 . $1 ) = ( C815 . ( len C815 ) ));
L4346: (ex B588 being Nat st S8[ B588 ]) by L4338;
consider C816 being Nat such that L4347: (S8[ C816 ] & (for B589 being Nat holds (S8[ B589 ] implies C816 <= B589))) from NAT_1:sch 5(L4346);
reconsider D408 = C816 as  odd (Element of ( NAT )) by L4347 , ORDINAL1:def 12;
L4348: ( 1 + 1 ) < ( D408 + 1 ) by L4347 , XREAL_1:8;
L4349: 2 <= D408 by L4348 , NAT_1:13;
reconsider D409 = ( D408 - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by L4349 , INT_1:5;
set D410 = ( C815 .remove (D408 , ( len C815 )) );
set D411 = ( D410 .cut (( ( 2 * ( 0 ) ) + 1 ) , D409) );
set D412 = the (Path of D411);
consider C817 being (Subset of ( D411 .edgeSeq() )) such that L4350: ( D412 .edgeSeq() ) = ( Seq C817 ) by L2025;
L4351: ( D411 .edgeSeq() ) c= ( D410 .edgeSeq() ) by L1030;
L4352: ( C815 . D408 ) = ( C815 .last() ) by L4347;
L4353: D410 = ( C815 .cut (1 , D408) ) by L4352 , L2968;
L4354: ( D410 .edgeSeq() ) c= ( C815 .edgeSeq() ) by L4353 , L1030;
L4355: ( D411 .edgeSeq() ) c= ( C815 .edgeSeq() ) by L4354 , L4351 , XBOOLE_1:1;
reconsider D413 = C817 as (Subset of ( C815 .edgeSeq() )) by L4355 , XBOOLE_1:1;
L4356: D412 is_Walk_from ( D411 .first() ) , ( D411 .last() ) by L2025;
L4357: ( ( len D410 ) + ( len C815 ) ) = ( ( len C815 ) + D408 ) by L4347 , L804;
L4358: D409 <= ( ( len D410 ) - ( 0 ) ) by L4357 , XREAL_1:13;
L4359: 1 <= D409 by ABIAN:12;
L4360: ( D411 .last() ) = ( D410 . D409 ) by L4359 , L4358 , L677;
L4361: ( D412 .last() ) = ( D410 . D409 ) by L4360 , L4356 , L487;
L4362: D409 in ( dom D410 ) by L4358 , L4359 , FINSEQ_3:25;
L4363: ( D412 .last() ) = ( C815 . D409 ) by L4362 , L4347 , L4361 , L4353 , L795;
L4364: ( D411 .first() ) = ( D410 . 1 ) by L4358 , L4359 , L677;
L4365: ( D412 .first() ) = ( D410 . 1 ) by L4364 , L4356 , L487;
L4366: ( C815 . 1 ) = ( C815 . ( len C815 ) ) by L4345 , L3679;
L4367:
now
L4368: 1 <= ( len D410 ) by ABIAN:12;
L4369: ( ( 2 * ( 0 ) ) + 1 ) in ( dom D410 ) by L4368 , FINSEQ_3:25;
assume that
L4370: D412 is non  trivial
and
L4371: D412 is  closed;
L4372: ( D412 .first() ) = ( C815 . D409 ) by L4363 , L4371 , L489;
L4373: ( C815 . D409 ) = ( C815 . ( len C815 ) ) by L4372 , L4366 , L4347 , L4365 , L4353 , L4369 , L795;
L4374:
now
assume L4375: D409 = 1;
L4376: ( len D411 ) = 1 by L4375 , L4358 , L790;
L4377: ( len D412 ) <= 1 by L4376 , L2041;
L4378: 1 <= ( len D412 ) by ABIAN:12;
L4379: ( len D412 ) = 1 by L4378 , L4377 , XXREAL_0:1;
thus L4380: contradiction by L4379 , L4370 , L1262;
end;
L4381: 1 < D409 by L4374 , L4359 , XXREAL_0:1;
L4382: D409 < ( D408 - ( 0 ) ) by XREAL_1:15;
L4383: D409 <= ( len C815 ) by L4382 , L4347 , XXREAL_0:2;
thus L4384: contradiction by L4383 , L4347 , L4373 , L4381 , L4382;
end;
set D414 = ( C815 . ( D409 + 1 ) );
set D415 = ( D412 .addEdge D414 );
L4385: D409 < ( ( len C815 ) - ( 0 ) ) by L4347 , XREAL_1:15;
L4386: D414 Joins ( C815 . D409 ) , ( C815 . ( D409 + 2 ) ) , R1 by L4385 , L55;
L4387: D409 < ( ( len D410 ) - ( 0 ) ) by L4357 , XREAL_1:15;
L4388: ( len D411 ) = D409 by L4387 , L790;
L4389:
now
let C818 being  odd (Element of ( NAT ));
assume that
L4390: 1 < C818
and
L4391: C818 <= ( len D412 );
consider C819 being  odd (Element of ( NAT )) such that L4392: C818 <= C819 and L4393: C819 <= ( len D411 ) and L4394: ( D412 . C818 ) = ( D411 . C819 ) by L4391 , L4275;
L4395: 1 < C819 by L4390 , L4392 , XXREAL_0:2;
L4396: C819 in ( dom D411 ) by L4395 , L4393 , FINSEQ_3:25;
L4397: ( D412 . C818 ) = ( D410 . C819 ) by L4396 , L4358 , L4394 , L795;
L4398: ( C819 + ( 0 ) ) < ( D409 + 2 ) by L4388 , L4393 , XREAL_1:8;
L4399: C819 <= ( len C815 ) by L4398 , L4347 , XXREAL_0:2;
L4400: C819 in ( dom D410 ) by L4357 , L4395 , L4398 , FINSEQ_3:25;
L4401: ( D412 . C818 ) = ( C815 . C819 ) by L4400 , L4347 , L4353 , L4397 , L795;
thus L4402: ( D412 . C818 ) <> ( C815 . D408 ) by L4401 , L4347 , L4395 , L4398 , L4399;
end;
L4403: ( D409 + 1 ) <= D408 by L4357 , L4387 , NAT_1:13;
L4404: ( D409 + 1 ) <= ( len C815 ) by L4403 , L4347 , XXREAL_0:2;
L4405:
now
assume L4406: D414 in ( D412 .edges() );
L4407: ( D412 .edges() ) c= ( D411 .edges() ) by L4246;
consider C820 being  even (Element of ( NAT )) such that L4408: 1 <= C820 and L4409: C820 <= ( len D411 ) and L4410: ( D411 . C820 ) = D414 by L4407 , L4406 , L1116;
L4411: C820 < ( D409 + 1 ) by L4388 , L4409 , NAT_1:13;
L4412: C820 <= ( D409 + 2 ) by L4388 , L4409 , NAT_1:12;
L4413: C820 in ( dom D410 ) by L4412 , L4357 , L4408 , FINSEQ_3:25;
L4414: C820 in ( dom D411 ) by L4408 , L4409 , FINSEQ_3:25;
L4415: D414 = ( D410 . C820 ) by L4414 , L4358 , L4410 , L795;
L4416: ( C815 . ( D409 + 1 ) ) = ( C815 . C820 ) by L4415 , L4347 , L4353 , L4413 , L795;
thus L4417: contradiction by L4416 , L4404 , L4408 , L4411 , L1279;
end;
reconsider D416 = D415 as (Path of R1) by L4405 , L4386 , L4363 , L4367 , L4389 , L3913;
set D417 = ( ( ( D409 + 1 ) div 2 ) .--> D414 );
set D418 = ( D413 +* D417 );
L4418: ( dom D418 ) = ( ( dom D413 ) \/ ( dom D417 ) ) by FUNCT_4:def 1;
L4419: ( dom D417 ) = { ( ( D409 + 1 ) div 2 ) } by FUNCOP_1:13;
L4420: ( D417 . ( ( D409 + 1 ) div 2 ) ) = D414 by FUNCOP_1:72;
L4421:
now
let C821 being set;
assume L4422: C821 in D418;
consider C822 , C823 being set such that L4423: C821 = [ C822 , C823 ] by L4422 , RELAT_1:def 1;
L4424: C822 in ( dom D418 ) by L4422 , L4423 , FUNCT_1:1;
L4425: C823 = ( D418 . C822 ) by L4422 , L4423 , FUNCT_1:1;
L4426:
now
per cases ;
suppose L4427: C822 in ( dom D417 );

L4428: C822 = ( ( D409 + 1 ) div 2 ) by L4427 , TARSKI:def 1;
L4429: 1 <= ( D409 + 1 ) by NAT_1:12;
L4430: ( C815 . ( D409 + 1 ) ) = ( ( C815 .edgeSeq() ) . C822 ) by L4429 , L4404 , L4428 , L985;
L4431: ( ( C815 .edgeSeq() ) . C822 ) = C823 by L4430 , L4418 , L4420 , L4424 , L4425 , L4427 , L4428 , FUNCT_4:def 1;
L4432: C822 in ( dom ( C815 .edgeSeq() ) ) by L4404 , L4428 , L4429 , L985;
thus L4433: C821 in ( C815 .edgeSeq() ) by L4432 , L4423 , L4431 , FUNCT_1:1;
end;
suppose L4434: (not C822 in ( dom D417 ));

L4435: C822 in ( dom D413 ) by L4434 , L4418 , L4424 , XBOOLE_0:def 3;
L4436: C823 = ( D413 . C822 ) by L4418 , L4424 , L4425 , L4434 , FUNCT_4:def 1;
L4437: C821 in D413 by L4436 , L4423 , L4435 , FUNCT_1:1;
thus L4438: C821 in ( C815 .edgeSeq() ) by L4437;
end;
end;
thus L4440: C821 in ( C815 .edgeSeq() ) by L4426;
end;
L4441: D418 c= ( C815 .edgeSeq() ) by L4421 , TARSKI:def 3;
L4442: ( dom D418 ) c= ( dom ( C815 .edgeSeq() ) ) by L4441 , RELAT_1:11;
L4443: ( dom D418 ) c= ( Seg ( len ( C815 .edgeSeq() ) ) ) by L4442 , FINSEQ_1:def 3;
reconsider D419 = D418 as FinSubsequence by L4443 , FINSEQ_1:def 12;
reconsider D420 = D419 as (Subset of ( C815 .edgeSeq() )) by L4421 , TARSKI:def 3;
L4444: ( dom D413 ) c= ( dom ( D411 .edgeSeq() ) ) by GRAPH_2:25;
L4445:
now
thus L4446: (( dom D413 ) c= ( Seg ( len ( C815 .edgeSeq() ) ) ) & ( dom D417 ) c= ( Seg ( len ( C815 .edgeSeq() ) ) )) by L4418 , L4443 , XBOOLE_1:11;
let C824 , C825 being (Element of ( NAT ));
assume that
L4447: C824 in ( dom D413 )
and
L4448: C825 in ( dom D417 );
L4449: C824 <= ( len ( D411 .edgeSeq() ) ) by L4444 , L4447 , FINSEQ_3:25;
L4450: ( 2 * C824 ) <= ( 2 * ( len ( D411 .edgeSeq() ) ) ) by L4449 , XREAL_1:64;
L4451: ( ( 2 * C824 ) + 1 ) <= ( ( 2 * ( len ( D411 .edgeSeq() ) ) ) + 1 ) by L4450 , XREAL_1:7;
L4452: ( ( 2 * C824 ) + 1 ) <= D409 by L4451 , L4388 , L314;
L4453: 2 divides ( D409 + 1 ) by PEPIN:22;
L4454: C825 = ( ( D409 + 1 ) div 2 ) by L4448 , TARSKI:def 1;
L4455: ( 2 * C825 ) = ( D409 + 1 ) by L4454 , L4453 , NAT_D:3;
L4456: ( ( 2 * C824 ) + 1 ) < ( 2 * C825 ) by L4455 , L4452 , NAT_1:13;
L4457: ( ( ( 2 * C824 ) + 1 ) - 1 ) < ( ( 2 * C825 ) - ( 0 ) ) by L4456 , XREAL_1:14;
L4458: C824 <= C825 by L4457 , XREAL_1:68;
thus L4459: C824 < C825 by L4458 , L4457 , XXREAL_0:1;
end;
L4460: ( Sgm ( dom D420 ) ) = ( ( Sgm ( dom D413 ) ) ^ ( Sgm ( dom D417 ) ) ) by L4445 , L4418 , FINSEQ_3:42;
L4461: D409 in ( dom D410 ) by L4359 , L4387 , FINSEQ_3:25;
L4462: ( D412 .last() ) = ( C815 . D409 ) by L4461 , L4347 , L4361 , L4353 , L795;
L4463:
now
L4464:
now
assume L4465: ( ( dom D413 ) /\ ( dom D417 ) ) <> ( {} );
consider C826 being set such that L4466: C826 in ( ( dom D413 ) /\ ( dom D417 ) ) by L4465 , XBOOLE_0:def 1;
L4467: C826 in ( dom D417 ) by L4466 , XBOOLE_0:def 4;
L4468: C826 = ( ( D409 + 1 ) div 2 ) by L4467 , TARSKI:def 1;
L4469: C826 in ( dom D413 ) by L4466 , XBOOLE_0:def 4;
L4470: ( ( D409 + 1 ) div 2 ) <= ( len ( D411 .edgeSeq() ) ) by L4469 , L4444 , L4468 , FINSEQ_3:25;
L4471: ( 2 * ( ( D409 + 1 ) div 2 ) ) <= ( 2 * ( len ( D411 .edgeSeq() ) ) ) by L4470 , XREAL_1:64;
L4472: 2 divides ( D409 + 1 ) by PEPIN:22;
L4473: ( D409 + 1 ) <= ( 2 * ( len ( D411 .edgeSeq() ) ) ) by L4472 , L4471 , NAT_D:3;
L4474: ( ( D409 + 1 ) + 1 ) <= ( ( 2 * ( len ( D411 .edgeSeq() ) ) ) + 1 ) by L4473 , XREAL_1:7;
L4475: ( ( 1 + 1 ) + D409 ) <= ( ( 0 ) + D409 ) by L4474 , L4388 , L314;
thus L4476: contradiction by L4475 , XREAL_1:6;
end;
L4477: ( dom D413 ) misses ( dom D417 ) by L4464 , XBOOLE_0:def 7;
L4478: ( len D416 ) = ( ( len D412 ) + 2 ) by L4386 , L4462 , L959;
L4479: ( ( len D412 ) + 2 ) = ( ( 2 * ( len ( D416 .edgeSeq() ) ) ) + 1 ) by L4478 , L314;
L4480: ( len ( Sgm ( dom D413 ) ) ) = ( card ( dom D413 ) ) by L4418 , L4443 , FINSEQ_3:39 , XBOOLE_1:11
.= ( card D413 ) by CARD_1:62
.= ( len ( D412 .edgeSeq() ) ) by L4350 , L31;
L4481:
now
assume L4482: ( ( D409 + 1 ) div 2 ) = ( 0 );
L4483: ( 2 * ( ( D409 + 1 ) div 2 ) ) = ( 2 * ( 0 ) ) by L4482;
L4484: 2 divides ( D409 + 1 ) by PEPIN:22;
thus L4485: contradiction by L4484 , L4483 , NAT_D:3;
end;
L4486: ( Sgm ( dom D417 ) ) = ( Sgm { ( ( D409 + 1 ) div 2 ) } ) by FUNCOP_1:13;
L4487: ( Sgm ( dom D417 ) ) = <* ( ( D409 + 1 ) div 2 ) *> by L4486 , L4481 , FINSEQ_3:44;
L4488: ( len ( Sgm ( dom D417 ) ) ) = 1 by L4487 , FINSEQ_1:40;
L4489: ( ( Sgm ( dom D417 ) ) . 1 ) = ( ( D409 + 1 ) div 2 ) by L4487 , FINSEQ_1:40;
set D421 = ( Sgm ( dom D420 ) );
L4490: ( Seq D420 ) = ( D420 * D421 ) by FINSEQ_1:def 14;
L4491: ( len ( Seq D420 ) ) = ( card D420 ) by L31
.= ( card ( dom D420 ) ) by CARD_1:62;
L4492: ( len ( Seq D420 ) ) = ( ( card ( dom D413 ) ) + ( card ( dom D417 ) ) ) by L4491 , L4418 , L4477 , CARD_2:40
.= ( ( card ( dom D413 ) ) + 1 ) by L4419 , CARD_1:30
.= ( ( card D413 ) + 1 ) by CARD_1:62
.= ( ( len ( D412 .edgeSeq() ) ) + 1 ) by L4350 , L31;
L4493: ( ( 2 * ( len ( Seq D420 ) ) ) + 1 ) = ( ( ( 2 * ( len ( D412 .edgeSeq() ) ) ) + 1 ) + 2 ) by L4492
.= ( ( 2 * ( len ( D416 .edgeSeq() ) ) ) + 1 ) by L4479 , L314;
thus L4494: ( len ( D416 .edgeSeq() ) ) = ( len ( Seq D420 ) ) by L4493;
let C827 being Nat;
assume that
L4495: 1 <= C827
and
L4496: C827 <= ( len ( D416 .edgeSeq() ) );
L4497: ( dom D413 ) c= ( Seg ( len ( C815 .edgeSeq() ) ) ) by L4418 , L4443 , XBOOLE_1:11;
L4498: C827 in ( dom ( Seq D420 ) ) by L4493 , L4495 , L4496 , FINSEQ_3:25;
L4499: ( D421 . C827 ) in ( dom D420 ) by L4498 , L4490 , FUNCT_1:11;
L4500: ( dom D421 ) = ( Seg ( ( len ( Sgm ( dom D413 ) ) ) + ( len ( Sgm ( dom D417 ) ) ) ) ) by L4460 , FINSEQ_1:def 7;
L4501: D414 Joins ( D412 .last() ) , ( C815 . D408 ) , R1 by L4347 , L4386 , L4361 , L4353 , L4461 , L795;
L4502: ( ( Seq D420 ) . C827 ) = ( D420 . ( D421 . C827 ) ) by L4490 , L4498 , FUNCT_1:12;
L4503: C827 in ( dom D421 ) by L4490 , L4498 , FUNCT_1:11;
L4504:
now
per cases ;
suppose L4505: C827 <= ( len ( Sgm ( dom D413 ) ) );

L4506: C827 in ( dom ( Sgm ( dom D413 ) ) ) by L4505 , L4495 , FINSEQ_3:25;
L4507: ( D421 . C827 ) = ( ( Sgm ( dom D413 ) ) . C827 ) by L4506 , L4460 , FINSEQ_1:def 7;
L4508: ( rng ( Sgm ( dom D413 ) ) ) = ( dom D413 ) by L4497 , FINSEQ_1:def 13;
L4509: ( D421 . C827 ) in ( dom D413 ) by L4508 , L4506 , L4507 , FUNCT_1:def 3;
L4510: (not ( D421 . C827 ) in ( dom D417 )) by L4509 , L4477 , XBOOLE_0:3;
L4511: ( ( Seq D420 ) . C827 ) = ( D413 . ( ( Sgm ( dom D413 ) ) . C827 ) ) by L4510 , L4418 , L4499 , L4502 , L4507 , FUNCT_4:def 1;
L4512: C827 in ( dom ( D412 .edgeSeq() ) ) by L4495 , L4480 , L4505 , FINSEQ_3:25;
L4513: ( 2 * C827 ) in ( dom D412 ) by L4512 , L1009;
L4514: ( ( D412 .edgeSeq() ) . C827 ) = ( D412 . ( 2 * C827 ) ) by L4495 , L4480 , L4505 , L314;
L4515: ( D416 . ( 2 * C827 ) ) = ( ( D412 .edgeSeq() ) . C827 ) by L4514 , L4501 , L4513 , L967
.= ( ( D413 * ( Sgm ( dom D413 ) ) ) . C827 ) by L4350 , FINSEQ_1:def 14;
L4516: C827 in ( dom ( D413 * ( Sgm ( dom D413 ) ) ) ) by L4350 , L4512 , FINSEQ_1:def 14;
thus L4517: ( ( Seq D420 ) . C827 ) = ( D416 . ( 2 * C827 ) ) by L4516 , L4511 , L4515 , FUNCT_1:12;
end;
suppose L4518: ( len ( Sgm ( dom D413 ) ) ) < C827;

L4519: ( ( len ( Sgm ( dom D413 ) ) ) + 1 ) <= C827 by L4518 , NAT_1:13;
L4520: C827 <= ( ( len ( Sgm ( dom D413 ) ) ) + 1 ) by L4503 , L4500 , L4488 , FINSEQ_1:1;
L4521: C827 = ( ( len ( Sgm ( dom D413 ) ) ) + 1 ) by L4520 , L4519 , XXREAL_0:1;
L4522: 1 in ( dom ( Sgm ( dom D417 ) ) ) by L4488 , FINSEQ_3:25;
L4523: ( D421 . C827 ) = ( ( D409 + 1 ) div 2 ) by L4522 , L4460 , L4489 , L4521 , FINSEQ_1:def 7;
L4524: ( D421 . C827 ) in ( dom D417 ) by L4523 , L4419 , TARSKI:def 1;
L4525: ( ( Seq D420 ) . C827 ) = ( D417 . ( ( D409 + 1 ) div 2 ) ) by L4524 , L4418 , L4499 , L4502 , L4523 , FUNCT_4:def 1
.= D414 by FUNCOP_1:72
.= ( D416 . ( ( len D412 ) + 1 ) ) by L4501 , L967;
L4526: ( 2 * C827 ) = ( ( ( 2 * ( len ( D412 .edgeSeq() ) ) ) + 1 ) + 1 ) by L4480 , L4521
.= ( ( len D412 ) + 1 ) by L314;
thus L4527: ( ( Seq D420 ) . C827 ) = ( D416 . ( 2 * C827 ) ) by L4526 , L4525;
end;
end;
thus L4529: ( ( D416 .edgeSeq() ) . C827 ) = ( ( Seq D420 ) . C827 ) by L4504 , L4495 , L4496 , L314;
end;
L4530: ( D416 .edgeSeq() ) = ( Seq D420 ) by L4463 , FINSEQ_1:14;
L4531: 1 <= ( len D410 ) by ABIAN:12;
L4532: ( ( 2 * ( 0 ) ) + 1 ) in ( dom D410 ) by L4531 , FINSEQ_3:25;
L4533: ( D412 .first() ) = ( C815 .first() ) by L4532 , L4347 , L4365 , L4353 , L795;
L4534: D412 is_Walk_from ( C815 .first() ) , ( C815 . D409 ) by L4533 , L4462 , L487;
L4535: D416 is_Walk_from ( C815 .first() ) , ( C815 .last() ) by L4534 , L4347 , L4386 , L979;
reconsider D422 = D416 as (Path of C815) by L4535 , L4530 , L2025;
take D423 = D422;
thus L4536: D423 is non  trivial by L4386 , L4363 , L3745;
end;
end;
thus L4538: thesis by L4339;
end;
theorem
L4539: (for B590 being _Graph holds (for B591 being (Subgraph of B590) holds (for B592 being (Walk of B591) holds B592 is (Walk of B590))))
proof
let C828 being _Graph;
let C829 being (Subgraph of C828);
let C830 being (Walk of C829);
set D424 = ( the_Vertices_of C828 );
set D425 = ( the_Vertices_of C829 );
set D426 = ( the_Edges_of C828 );
set D427 = ( the_Edges_of C829 );
L4540: D427 c= ( D424 \/ D426 ) by XBOOLE_1:10;
L4541:
now
thus L4542: ( len C830 ) is  odd;
L4543: ( C830 . 1 ) in D425 by L55;
thus L4544: ( C830 . 1 ) in D424 by L4543;
let C831 being  odd (Element of ( NAT ));
assume L4545: C831 < ( len C830 );
L4546: ( C830 . ( C831 + 1 ) ) Joins ( C830 . C831 ) , ( C830 . ( C831 + 2 ) ) , C829 by L4545 , L55;
thus L4547: ( C830 . ( C831 + 1 ) ) Joins ( C830 . C831 ) , ( C830 . ( C831 + 2 ) ) , C828 by L4546 , GLIB_000:72;
end;
L4548: D425 c= ( D424 \/ D426 ) by XBOOLE_1:10;
L4549: ( D425 \/ D427 ) c= ( D424 \/ D426 ) by L4548 , L4540 , XBOOLE_1:8;
L4550: (for B593 being set holds (B593 in ( rng C830 ) implies B593 in ( D424 \/ D426 ))) by L4549 , TARSKI:def 3;
L4551: ( rng C830 ) c= ( D424 \/ D426 ) by L4550 , TARSKI:def 3;
L4552: C830 is (FinSequence of ( D424 \/ D426 )) by L4551 , FINSEQ_1:def 4;
thus L4553: thesis by L4552 , L4541 , L55;
end;
theorem
L4554: (for B594 being _Graph holds (for B595 being (Subgraph of B594) holds (for B596 being (Walk of B594) holds ((B596 is  trivial & ( B596 .first() ) in ( the_Vertices_of B595 )) implies B596 is (Walk of B595)))))
proof
let C832 being _Graph;
let C833 being (Subgraph of C832);
let C834 being (Walk of C832);
assume that
L4555: C834 is  trivial
and
L4556: ( C834 .first() ) in ( the_Vertices_of C833 );
consider C835 being (Vertex of C832) such that L4557: C834 = ( C832 .walkOf C835 ) by L4555 , L1271;
reconsider D428 = C835 as (Vertex of C833) by L4556 , L4557 , L2798;
L4558: C834 = ( C833 .walkOf D428 ) by L4557;
thus L4559: thesis by L4558;
end;
theorem
L4560: (for B597 being _Graph holds (for B598 being (Subgraph of B597) holds (for B599 being (Walk of B597) holds ((B599 is non  trivial & ( B599 .edges() ) c= ( the_Edges_of B598 )) implies B599 is (Walk of B598)))))
proof
let C836 being _Graph;
let C837 being (Subgraph of C836);
let C838 being (Walk of C836);
assume that
L4561: C838 is non  trivial
and
L4562: ( C838 .edges() ) c= ( the_Edges_of C837 );
set D429 = ( the_Vertices_of C837 );
set D430 = ( the_Edges_of C837 );
set D431 = ( C838 .vertices() );
set D432 = ( C838 .edges() );
L4563:
now
let C839 being  odd (Element of ( NAT ));
assume that
L4564: C839 <= ( len C838 );
L4565:
now
per cases ;
suppose L4566: C839 = ( len C838 );

L4567: 1 <= C839 by ABIAN:12;
L4568: C839 <> 1 by L4561 , L4566 , L1250;
L4569: 1 < C839 by L4568 , L4567 , XXREAL_0:1;
L4570: ( 1 + 1 ) <= C839 by L4569 , NAT_1:13;
reconsider D433 = ( C839 - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by L4570 , INT_1:5;
L4571: ( D433 + 1 ) = ( C839 - ( 2 - 1 ) );
L4572: ( D433 + 1 ) <= ( ( len C838 ) - ( 0 ) ) by L4571 , L4566 , XREAL_1:13;
L4573: D433 < ( ( len C838 ) - ( 0 ) ) by L4566 , XREAL_1:15;
L4574: ( C838 . ( D433 + 1 ) ) Joins ( C838 . D433 ) , ( C838 . ( D433 + 2 ) ) , C836 by L4573 , L55;
L4575: 1 <= ( D433 + 1 ) by NAT_1:12;
L4576: ( C838 . ( D433 + 1 ) ) in ( C838 .edges() ) by L4575 , L4572 , L1116;
L4577: ( C838 . ( D433 + 1 ) ) Joins ( C838 . D433 ) , ( C838 . ( D433 + 2 ) ) , C837 by L4576 , L4562 , L4574 , GLIB_000:73;
thus L4578: ( C838 . C839 ) in ( the_Vertices_of C837 ) by L4577 , GLIB_000:13;
end;
suppose L4579: C839 <> ( len C838 );

L4580: C839 < ( len C838 ) by L4579 , L4564 , XXREAL_0:1;
L4581: ( C838 . ( C839 + 1 ) ) Joins ( C838 . C839 ) , ( C838 . ( C839 + 2 ) ) , C836 by L4580 , L55;
L4582: 1 <= ( C839 + 1 ) by NAT_1:12;
L4583: ( C839 + 1 ) <= ( len C838 ) by L4580 , NAT_1:13;
L4584: ( C838 . ( C839 + 1 ) ) in ( C838 .edges() ) by L4583 , L4582 , L1116;
L4585: ( C838 . ( C839 + 1 ) ) Joins ( C838 . C839 ) , ( C838 . ( C839 + 2 ) ) , C837 by L4584 , L4562 , L4581 , GLIB_000:73;
thus L4586: ( C838 . C839 ) in ( the_Vertices_of C837 ) by L4585 , GLIB_000:13;
end;
end;
thus L4588: ( C838 . C839 ) in D429 by L4565;
end;
L4589:
now
let C840 being set;
assume L4590: C840 in ( rng C838 );
L4591: C840 in ( D431 \/ D432 ) by L4590 , L3466;
L4592:
now
per cases  by L4591 , XBOOLE_0:def 3;
suppose L4593: C840 in D431;

L4594: (ex B600 being  odd (Element of ( NAT )) st (B600 <= ( len C838 ) & ( C838 . B600 ) = C840)) by L4593 , L1088;
L4595: C840 in D429 by L4594 , L4563;
thus L4596: C840 in ( D429 \/ D430 ) by L4595 , XBOOLE_0:def 3;
end;
suppose L4597: C840 in D432;

thus L4598: C840 in ( D429 \/ D430 ) by L4597 , L4562 , XBOOLE_0:def 3;
end;
end;
thus L4600: C840 in ( D429 \/ D430 ) by L4592;
end;
L4601: ( rng C838 ) c= ( D429 \/ D430 ) by L4589 , TARSKI:def 3;
L4602: C838 is (FinSequence of ( D429 \/ D430 )) by L4601 , FINSEQ_1:def 4;
L4603:
now
reconsider D434 = 1 as  odd (Element of ( NAT )) by JORDAN12:2;
thus L4604: ( len C838 ) is  odd;
L4605: D434 <= ( len C838 ) by ABIAN:12;
thus L4606: ( C838 . 1 ) in D429 by L4605 , L4563;
let C841 being  odd (Element of ( NAT ));
L4607: 1 <= ( C841 + 1 ) by NAT_1:12;
assume L4608: C841 < ( len C838 );
L4609: ( C838 . ( C841 + 1 ) ) Joins ( C838 . C841 ) , ( C838 . ( C841 + 2 ) ) , C836 by L4608 , L55;
L4610: ( C841 + 1 ) <= ( len C838 ) by L4608 , NAT_1:13;
L4611: ( C838 . ( C841 + 1 ) ) in ( C838 .edges() ) by L4610 , L4607 , L1116;
thus L4612: ( C838 . ( C841 + 1 ) ) Joins ( C838 . C841 ) , ( C838 . ( C841 + 2 ) ) , C837 by L4611 , L4562 , L4609 , GLIB_000:73;
end;
thus L4613: thesis by L4603 , L4602 , L55;
end;
theorem
L4614: (for B601 being _Graph holds (for B602 being (Subgraph of B601) holds (for B603 being (Walk of B601) holds ((( B603 .vertices() ) c= ( the_Vertices_of B602 ) & ( B603 .edges() ) c= ( the_Edges_of B602 )) implies B603 is (Walk of B602)))))
proof
let C842 being _Graph;
let C843 being (Subgraph of C842);
let C844 being (Walk of C842);
assume that
L4615: ( C844 .vertices() ) c= ( the_Vertices_of C843 )
and
L4616: ( C844 .edges() ) c= ( the_Edges_of C843 );
L4617:
now
per cases ;
suppose L4618: C844 is non  trivial;

thus L4619: thesis by L4618 , L4616 , L4560;
end;
suppose L4620: C844 is  trivial;

L4621: ( C844 .first() ) in ( C844 .vertices() ) by L3268;
thus L4622: thesis by L4621 , L4615 , L4620 , L4554;
end;
end;
thus L4624: thesis by L4617;
end;
theorem
L4625: (for B604 being non  trivial _Graph holds (for B605 being (Walk of B604) holds (for B606 being (Vertex of B604) holds (for B607 being (removeVertex of B604 , B606) holds ((not B606 in ( B605 .vertices() )) implies B605 is (Walk of B607))))))
proof
let C845 being non  trivial _Graph;
let C846 being (Walk of C845);
let C847 being (Vertex of C845);
let C848 being (removeVertex of C845 , C847);
assume L4626: (not C847 in ( C846 .vertices() ));
set D435 = ( ( the_Edges_of C845 ) \ ( C847 .edgesInOut() ) );
set D436 = C846;
set D437 = ( ( the_Vertices_of C845 ) \ { C847 } );
L4627: ( C847 .edgesInOut() ) = ( C845 .edgesInOut { C847 } ) by GLIB_000:def 40;
L4628: D435 = ( C845 .edgesBetween ( ( the_Vertices_of C845 ) \ { C847 } ) ) by L4627 , GLIB_000:35;
L4629:
now
let C849 being set;
assume L4630: C849 in ( rng D436 );
consider C850 being set such that L4631: C850 in ( dom D436 ) and L4632: C849 = ( D436 . C850 ) by L4630 , FUNCT_1:def 3;
reconsider D438 = C850 as (Element of ( NAT )) by L4631;
L4633: D438 <= ( len D436 ) by L4631 , FINSEQ_3:25;
L4634:
now
per cases ;
suppose L4635: D438 is  odd;

L4636:
now
assume L4637: C849 in { C847 };
L4638: (not C849 in ( C846 .vertices() )) by L4637 , L4626 , TARSKI:def 1;
thus L4639: contradiction by L4638 , L4632 , L4633 , L4635 , L1088;
end;
L4640: C849 in ( the_Vertices_of C845 ) by L4632 , L4633 , L4635 , L502;
L4641: C849 in D437 by L4640 , L4636 , XBOOLE_0:def 5;
thus L4642: C849 in ( D437 \/ D435 ) by L4641 , XBOOLE_0:def 3;
end;
suppose L4643: D438 is  even;

reconsider D439 = D438 as  even (Element of ( NAT )) by L4643;
consider C851 being  odd (Element of ( NAT )) such that L4644: C851 = ( D439 - 1 ) and L4645: ( D439 - 1 ) in ( dom D436 ) and L4646: ( D439 + 1 ) in ( dom D436 ) and L4647: ( D436 . D439 ) Joins ( D436 . C851 ) , ( D436 . ( D439 + 1 ) ) , C845 by L4631 , L506;
L4648: ( D439 + 1 ) <= ( len D436 ) by L4646 , FINSEQ_3:25;
L4649: C851 <= ( len D436 ) by L4644 , L4645 , FINSEQ_3:25;
L4650:
now
assume L4651: C849 in ( C847 .edgesInOut() );
L4652: C849 in ( ( C847 .edgesIn() ) \/ ( C847 .edgesOut() ) ) by L4651 , GLIB_000:60;
L4653:
now
per cases  by L4652 , XBOOLE_0:def 3;
suppose L4654: C849 in ( C847 .edgesIn() );

L4655: ( ( the_Target_of C845 ) . C849 ) = C847 by L4654 , GLIB_000:56;
thus L4656: (C847 = ( D436 . C851 ) or C847 = ( D436 . ( D439 + 1 ) )) by L4655 , L4632 , L4647 , GLIB_000:def 13;
end;
suppose L4657: C849 in ( C847 .edgesOut() );

L4658: ( ( the_Source_of C845 ) . C849 ) = C847 by L4657 , GLIB_000:58;
thus L4659: (C847 = ( D436 . C851 ) or C847 = ( D436 . ( D439 + 1 ) )) by L4658 , L4632 , L4647 , GLIB_000:def 13;
end;
end;
L4661: (C847 = ( D436 .vertexAt C851 ) or C847 = ( D436 .vertexAt ( D439 + 1 ) )) by L4653 , L4649 , L4648 , L114;
thus L4662: contradiction by L4661 , L4626 , L4649 , L4648 , L3272;
end;
L4663: C849 in ( the_Edges_of C845 ) by L4632 , L4647 , GLIB_000:def 13;
L4664: C849 in D435 by L4663 , L4650 , XBOOLE_0:def 5;
thus L4665: C849 in ( D437 \/ D435 ) by L4664 , XBOOLE_0:def 3;
end;
end;
L4667: C849 in ( ( the_Vertices_of C848 ) \/ D435 ) by L4634 , GLIB_000:47;
thus L4668: C849 in ( ( the_Vertices_of C848 ) \/ ( the_Edges_of C848 ) ) by L4667 , L4628 , GLIB_000:47;
end;
L4669: ( rng D436 ) c= ( ( the_Vertices_of C848 ) \/ ( the_Edges_of C848 ) ) by L4629 , TARSKI:def 3;
reconsider D440 = D436 as (FinSequence of ( ( the_Vertices_of C848 ) \/ ( the_Edges_of C848 ) )) by L4669 , FINSEQ_1:def 4;
L4670:
now
reconsider D441 = ( len D440 ) as  odd (Element of ( NAT ));
thus L4671: ( len D440 ) is  odd;
L4672: ( C846 .first() ) in ( C846 .vertices() ) by L3268;
L4673: (not ( D440 . 1 ) in { C847 }) by L4672 , L4626 , TARSKI:def 1;
L4674: ( C846 .first() ) in ( the_Vertices_of C845 );
L4675: ( D440 . 1 ) in D437 by L4674 , L4673 , XBOOLE_0:def 5;
thus L4676: ( D440 . 1 ) in ( the_Vertices_of C848 ) by L4675 , GLIB_000:47;
let C852 being  odd (Element of ( NAT ));
assume L4677: C852 < ( len D440 );
L4678: ( C846 . ( C852 + 1 ) ) Joins ( C846 . C852 ) , ( C846 . ( C852 + 2 ) ) , C845 by L4677 , L55;
L4679: ( C846 . ( C852 + 1 ) ) in ( the_Edges_of C845 ) by L4678 , GLIB_000:def 13;
L4680: ( C852 + 1 ) <= ( len D440 ) by L4677 , NAT_1:13;
L4681: ( C852 + 1 ) < D441 by L4680 , XXREAL_0:1;
L4682: ( ( C852 + 1 ) + 1 ) <= ( len D440 ) by L4681 , NAT_1:13;
L4683: ( C846 . ( C852 + 2 ) ) <> C847 by L4682 , L4626 , L1088;
L4684: ( C846 . C852 ) <> C847 by L4626 , L4677 , L1088;
L4685: (not ( C846 . ( C852 + 1 ) ) in ( C847 .edgesInOut() )) by L4684 , L4678 , L4683 , GLIB_000:65;
L4686: ( C846 . ( C852 + 1 ) ) in D435 by L4685 , L4679 , XBOOLE_0:def 5;
L4687: ( C846 . ( C852 + 1 ) ) in ( the_Edges_of C848 ) by L4686 , L4628 , GLIB_000:47;
thus L4688: ( C846 . ( C852 + 1 ) ) Joins ( C846 . C852 ) , ( C846 . ( C852 + 2 ) ) , C848 by L4687 , L4678 , GLIB_000:73;
end;
thus L4689: thesis by L4670 , L55;
end;
theorem
L4690: (for B608 being _Graph holds (for B609 being (Walk of B608) holds (for B610 being set holds (for B611 being (removeEdge of B608 , B610) holds ((not B610 in ( B609 .edges() )) implies B609 is (Walk of B611))))))
proof
let C853 being _Graph;
let C854 being (Walk of C853);
let C855 being set;
let C856 being (removeEdge of C853 , C855);
L4691: ( the_Edges_of C856 ) = ( ( the_Edges_of C853 ) \ { C855 } ) by GLIB_000:53;
assume L4692: (not C855 in ( C854 .edges() ));
L4693:
now
let C857 being set;
assume L4694: C857 in ( C854 .edges() );
L4695: (not C857 in { C855 }) by L4694 , L4692 , TARSKI:def 1;
thus L4696: C857 in ( the_Edges_of C856 ) by L4695 , L4691 , L4694 , XBOOLE_0:def 5;
end;
L4697: ( C854 .edges() ) c= ( the_Edges_of C856 ) by L4693 , TARSKI:def 3;
L4698: ( the_Vertices_of C856 ) = ( the_Vertices_of C853 ) by GLIB_000:53;
L4699: ( C854 .vertices() ) c= ( the_Vertices_of C856 ) by L4698;
thus L4700: thesis by L4699 , L4697 , L4614;
end;
theorem
L4701: (for B612 being _Graph holds (for B613 being (Subgraph of B612) holds (for B614 , B615 , B616 being set holds (B616 Joins B614 , B615 , B613 implies ( B612 .walkOf (B614 , B616 , B615) ) = ( B613 .walkOf (B614 , B616 , B615) )))))
proof
let C858 being _Graph;
let C859 being (Subgraph of C858);
let C860 , C861 , C862 being set;
assume L4702: C862 Joins C860 , C861 , C859;
L4703: C862 Joins C860 , C861 , C858 by L4702 , GLIB_000:72;
L4704: ( C859 .walkOf (C860 , C862 , C861) ) = <* C860 , C862 , C861 *> by L4702 , L76;
thus L4705: thesis by L4704 , L4703 , L76;
end;
theorem
L4706: (for B617 being _Graph holds (for B618 being (Subgraph of B617) holds (for B619 being (Walk of B617) holds (for B620 being (Walk of B618) holds (for B621 being set holds ((B619 = B620 & B621 in ( ( B620 .last() ) .edgesInOut() )) implies ( B619 .addEdge B621 ) = ( B620 .addEdge B621 )))))))
proof
let C863 being _Graph;
let C864 being (Subgraph of C863);
let C865 being (Walk of C863);
let C866 being (Walk of C864);
let C867 being set;
assume that
L4707: C865 = C866
and
L4708: C867 in ( ( C866 .last() ) .edgesInOut() );
set D442 = ( C864 .walkOf (( C866 .last() ) , C867 , ( ( C866 .last() ) .adj C867 )) );
set D443 = ( C863 .walkOf (( C865 .last() ) , C867 , ( ( C865 .last() ) .adj C867 )) );
L4709: C867 Joins ( C866 .last() ) , ( ( C866 .last() ) .adj C867 ) , C864 by L4708 , GLIB_000:67;
L4710: ( ( C865 .last() ) .adj C867 ) = ( ( C866 .last() ) .adj C867 ) by L4707 , L4708 , GLIB_000:80;
L4711: D443 = D442 by L4710 , L4707 , L4709 , L4701;
thus L4712: thesis by L4711 , L4707 , L2882;
end;
theorem
L4713: (for B622 being _Graph holds (for B623 being (Subgraph of B622) holds (for B624 being (Walk of B623) holds ((B624 is  closed implies B624 is  closed  closed  closed  closed (Walk of B622)) & (B624 is  directed implies B624 is  directed  directed  directed  directed (Walk of B622)) & (B624 is  trivial implies B624 is  trivial  trivial  trivial  trivial (Walk of B622)) & (B624 is  Trail-like implies B624 is  Trail-like  Trail-like  Trail-like  Trail-like (Walk of B622)) & (B624 is  Path-like implies B624 is  Path-like  Path-like  Path-like  Path-like (Walk of B622)) & (B624 is  vertex-distinct implies B624 is  vertex-distinct  vertex-distinct  vertex-distinct  vertex-distinct (Walk of B622))))))
proof
let C868 being _Graph;
let C869 being (Subgraph of C868);
let C870 being (Walk of C869);
reconsider D444 = C870 as (Walk of C868) by L4539;
thus L4714:now
assume L4715: C870 is  closed;
L4716: ( C870 .first() ) = ( C870 .last() ) by L4715 , L489;
L4717: ( D444 .first() ) = ( D444 .last() ) by L4716;
thus L4718: C870 is  closed  closed  closed  closed (Walk of C868) by L4717 , L489;
end;
thus L4719:now
assume L4720: C870 is  directed;
L4721:
now
let C871 being  odd (Element of ( NAT ));
L4722: 1 <= ( C871 + 1 ) by NAT_1:12;
assume L4723: C871 < ( len D444 );
L4724: ( C871 + 1 ) <= ( len D444 ) by L4723 , NAT_1:13;
L4725: ( C871 + 1 ) in ( dom D444 ) by L4724 , L4722 , FINSEQ_3:25;
L4726: ( D444 . ( C871 + 1 ) ) in ( the_Edges_of C869 ) by L4725 , L2762;
L4727: ( ( the_Source_of C869 ) . ( D444 . ( C871 + 1 ) ) ) = ( D444 . C871 ) by L4720 , L4723 , L490;
thus L4728: ( ( the_Source_of C868 ) . ( D444 . ( C871 + 1 ) ) ) = ( D444 . C871 ) by L4727 , L4726 , GLIB_000:def 32;
end;
thus L4729: C870 is  directed  directed  directed  directed (Walk of C868) by L4721 , L490;
end;
thus L4730:now
assume L4731: C870 is  trivial;
L4732: ( len D444 ) = 1 by L4731 , L1262;
thus L4733: C870 is  trivial  trivial  trivial  trivial (Walk of C868) by L4732 , L1250;
end;
L4734:
now
assume L4735: C870 is  Trail-like;
L4736: (for B625 , B626 being  even (Element of ( NAT )) holds ((1 <= B625 & B625 < B626 & B626 <= ( len C870 )) implies ( D444 . B625 ) <> ( D444 . B626 ))) by L4735 , L1279;
thus L4737: C870 is  Trail-like  Trail-like  Trail-like  Trail-like (Walk of C868) by L4736 , L1279;
end;
thus L4738: (C870 is  Trail-like implies C870 is  Trail-like  Trail-like  Trail-like  Trail-like (Walk of C868)) by L4734;
L4739:
now
assume L4740: C870 is  Path-like;
L4741: (for B627 , B628 being  odd (Element of ( NAT )) holds ((B627 < B628 & B628 <= ( len D444 )) implies (( D444 . B627 ) = ( D444 . B628 ) implies (B627 = 1 & B628 = ( len D444 ))))) by L4740 , L495;
thus L4742: C870 is  Path-like  Path-like  Path-like  Path-like (Walk of C868) by L4741 , L4734 , L4740 , L495;
end;
thus L4743: (C870 is  Path-like implies C870 is  Path-like  Path-like  Path-like  Path-like (Walk of C868)) by L4739;
thus L4744:now
assume L4745: C870 is  vertex-distinct;
L4746: (for B629 , B630 being  odd (Element of ( NAT )) holds ((B629 <= ( len D444 ) & B630 <= ( len D444 ) & ( D444 . B629 ) = ( D444 . B630 )) implies B629 = B630)) by L4745 , L497;
thus L4747: C870 is  vertex-distinct  vertex-distinct  vertex-distinct  vertex-distinct (Walk of C868) by L4746 , L497;
end;
end;
theorem
L4745: (for B631 being _Graph holds (for B632 being (Subgraph of B631) holds (for B633 being (Walk of B631) holds (for B634 being (Walk of B632) holds (B633 = B634 implies ((B633 is  closed iff B634 is  closed) & (B633 is  directed iff B634 is  directed) & (B633 is  trivial iff B634 is  trivial) & (B633 is  Trail-like iff B634 is  Trail-like) & (B633 is  Path-like iff B634 is  Path-like) & (B633 is  vertex-distinct iff B634 is  vertex-distinct)))))))
proof
let C872 being _Graph;
let C873 being (Subgraph of C872);
let C874 being (Walk of C872);
let C875 being (Walk of C873);
assume L4746: C874 = C875;
L4747: ( C874 .last() ) = ( C875 .last() ) by L4746;
L4748: (C874 is  closed iff ( C874 .first() ) = ( C874 .last() )) by L489;
L4749: ( C874 .first() ) = ( C875 .first() ) by L4746;
thus L4750: (C874 is  closed iff C875 is  closed) by L4749 , L4748 , L4747 , L489;
L4751:
now
thus L4752:now
assume L4753: C874 is  directed;
L4754:
now
let C876 being  odd (Element of ( NAT ));
L4755: 1 <= ( C876 + 1 ) by NAT_1:12;
assume L4756: C876 < ( len C875 );
L4757: ( C876 + 1 ) <= ( len C875 ) by L4756 , NAT_1:13;
L4758: ( C876 + 1 ) in ( dom C875 ) by L4757 , L4755 , FINSEQ_3:25;
L4759: ( C875 . ( C876 + 1 ) ) in ( the_Edges_of C873 ) by L4758 , L2762;
L4760: ( ( the_Source_of C873 ) . ( C875 . ( C876 + 1 ) ) ) = ( ( the_Source_of C872 ) . ( C875 . ( C876 + 1 ) ) ) by L4759 , GLIB_000:def 32;
thus L4761: ( ( the_Source_of C873 ) . ( C875 . ( C876 + 1 ) ) ) = ( C875 . C876 ) by L4760 , L4746 , L4753 , L4756 , L490;
end;
thus L4762: C875 is  directed by L4754 , L490;
end;
assume L4763: C875 is  directed;
thus L4764: C874 is  directed  directed  directed  directed (Walk of C872) by L4763 , L4746 , L4713;
end;
thus L4765: (C874 is  directed iff C875 is  directed) by L4751;
L4766: (C874 is  trivial iff ( len C875 ) = 1) by L4746 , L1262;
thus L4767: (C874 is  trivial iff C875 is  trivial) by L4766 , L1262;
L4768: (C874 is  Trail-like iff (for B635 , B636 being  even (Element of ( NAT )) holds ((1 <= B635 & B635 < B636 & B636 <= ( len C875 )) implies ( C875 . B635 ) <> ( C875 . B636 )))) by L4746 , L1279;
thus L4769: (C874 is  Trail-like iff C875 is  Trail-like) by L4768 , L1279;
L4770: (C874 is  Path-like iff (C874 is  Trail-like & (for B637 , B638 being  odd (Element of ( NAT )) holds ((B637 < B638 & B638 <= ( len C875 )) implies (( C875 . B637 ) = ( C875 . B638 ) implies (B637 = 1 & B638 = ( len C875 ))))))) by L4746 , L495;
thus L4771: (C874 is  Path-like iff C875 is  Path-like) by L4770 , L4769 , L495;
L4772: (C874 is  vertex-distinct iff (for B639 , B640 being  odd (Element of ( NAT )) holds ((B639 <= ( len C875 ) & B640 <= ( len C875 ) & ( C875 . B639 ) = ( C875 . B640 )) implies B639 = B640))) by L4746 , L497;
thus L4773: thesis by L4772 , L497;
end;
theorem
L4774: (for R2 being _Graph holds (for R3 being _Graph holds (for R8 being set holds ((R2 == R3 & R8 is (VertexSeq of R2)) implies R8 is (VertexSeq of R3)))))
proof
let R2 being _Graph;
let R3 being _Graph;
let R8 being set;
assume that
L4775: R2 == R3
and
L4776: R8 is (VertexSeq of R2);
reconsider D445 = R8 as (FinSequence of ( the_Vertices_of R3 )) by L4775 , L4776 , GLIB_000:def 34;
L4777:
now
let C877 being (Element of ( NAT ));
assume that
L4778: 1 <= C877
and
L4779: C877 < ( len D445 );
consider C878 being set such that L4780: C878 Joins ( D445 . C877 ) , ( D445 . ( C877 + 1 ) ) , R2 by L4776 , L4778 , L4779 , L44;
L4781: C878 Joins ( D445 . C877 ) , ( D445 . ( C877 + 1 ) ) , R3 by L4775 , L4780 , GLIB_000:88;
thus L4782: (ex B641 being set st B641 Joins ( D445 . C877 ) , ( D445 . ( C877 + 1 ) ) , R3) by L4781;
end;
thus L4783: thesis by L4777 , L44;
end;
theorem
L4784: (for R2 being _Graph holds (for R3 being _Graph holds (for R8 being set holds ((R2 == R3 & R8 is (EdgeSeq of R2)) implies R8 is (EdgeSeq of R3)))))
proof
let R2 being _Graph;
let R3 being _Graph;
let R8 being set;
assume that
L4785: R2 == R3
and
L4786: R8 is (EdgeSeq of R2);
reconsider D446 = R8 as (EdgeSeq of R2) by L4786;
reconsider D447 = D446 as (FinSequence of ( the_Edges_of R3 )) by L4785 , GLIB_000:def 34;
consider C879 being (FinSequence of ( the_Vertices_of R2 )) such that L4787: ( len C879 ) = ( ( len D446 ) + 1 ) and L4788: (for B642 being (Element of ( NAT )) holds ((1 <= B642 & B642 <= ( len D446 )) implies ( D446 . B642 ) Joins ( C879 . B642 ) , ( C879 . ( B642 + 1 ) ) , R2)) by L49;
L4789:
now
reconsider D448 = C879 as (FinSequence of ( the_Vertices_of R3 )) by L4785 , GLIB_000:def 34;
take D449 = D448;
thus L4790: ( len D449 ) = ( ( len D446 ) + 1 ) by L4787;
let C880 being (Element of ( NAT ));
assume that
L4791: 1 <= C880
and
L4792: C880 <= ( len D447 );
L4793: ( D447 . C880 ) Joins ( D449 . C880 ) , ( D449 . ( C880 + 1 ) ) , R2 by L4788 , L4791 , L4792;
thus L4794: ( D447 . C880 ) Joins ( D449 . C880 ) , ( D449 . ( C880 + 1 ) ) , R3 by L4793 , L4785 , GLIB_000:88;
end;
thus L4795: thesis by L4789 , L49;
end;
theorem
L4796: (for R2 being _Graph holds (for R3 being _Graph holds (for R8 being set holds ((R2 == R3 & R8 is (Walk of R2)) implies R8 is (Walk of R3)))))
proof
let R2 being _Graph;
let R3 being _Graph;
let R8 being set;
assume that
L4797: R2 == R3
and
L4798: R8 is (Walk of R2);
L4799: ( the_Vertices_of R2 ) = ( the_Vertices_of R3 ) by L4797 , GLIB_000:def 34;
reconsider D450 = R8 as (FinSequence of ( ( the_Vertices_of R3 ) \/ ( the_Edges_of R3 ) )) by L4799 , L4797 , L4798 , GLIB_000:def 34;
L4800:
now
let C881 being  odd (Element of ( NAT ));
assume L4801: C881 < ( len D450 );
L4802: ( D450 . ( C881 + 1 ) ) Joins ( D450 . C881 ) , ( D450 . ( C881 + 2 ) ) , R2 by L4801 , L4798 , L55;
thus L4803: ( D450 . ( C881 + 1 ) ) Joins ( D450 . C881 ) , ( D450 . ( C881 + 2 ) ) , R3 by L4802 , L4797 , GLIB_000:88;
end;
L4804: ( D450 . 1 ) in ( the_Vertices_of R3 ) by L4798 , L4799 , L55;
thus L4805: thesis by L4804 , L4798 , L4800 , L55;
end;
theorem
L4806: (for R2 being _Graph holds (for R3 being _Graph holds (for R7 being set holds (for R8 being set holds (for R9 being set holds (R2 == R3 implies ( R2 .walkOf (R8 , R7 , R9) ) = ( R3 .walkOf (R8 , R7 , R9) )))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let R7 being set;
let R8 being set;
let R9 being set;
assume L4807: R2 == R3;
L4808:
now
per cases ;
suppose L4809: R7 Joins R8 , R9 , R2;

L4810: R7 Joins R8 , R9 , R3 by L4809 , L4807 , GLIB_000:88;
thus L4811: ( R2 .walkOf (R8 , R7 , R9) ) = <* R8 , R7 , R9 *> by L4809 , L76
.= ( R3 .walkOf (R8 , R7 , R9) ) by L4810 , L76;
end;
suppose L4812: (not R7 Joins R8 , R9 , R2);

L4813: (not R7 Joins R8 , R9 , R3) by L4812 , L4807 , GLIB_000:88;
thus L4814: ( R2 .walkOf (R8 , R7 , R9) ) = ( R2 .walkOf ( choose ( the_Vertices_of R2 ) ) ) by L4812 , L76
.= ( R3 .walkOf ( choose ( the_Vertices_of R3 ) ) ) by L4807 , GLIB_000:def 34
.= ( R3 .walkOf (R8 , R7 , R9) ) by L4813 , L76;
end;
end;
thus L4816: thesis by L4808;
end;
theorem
L4817: (for R2 being _Graph holds (for R3 being _Graph holds (for B643 being (Walk of R2) holds (for B644 being (Walk of R3) holds ((R2 == R3 & B643 = B644) implies ((B643 is  closed iff B644 is  closed) & (B643 is  directed iff B644 is  directed) & (B643 is  trivial iff B644 is  trivial) & (B643 is  Trail-like iff B644 is  Trail-like) & (B643 is  Path-like iff B644 is  Path-like) & (B643 is  vertex-distinct iff B644 is  vertex-distinct)))))))
proof
let R2 being _Graph;
let R3 being _Graph;
let C882 being (Walk of R2);
let C883 being (Walk of R3);
assume that
L4818: R2 == R3
and
L4819: C882 = C883;
L4820: R2 is (Subgraph of R3) by L4818 , GLIB_000:87;
thus L4821: thesis by L4820 , L4819 , L4745;
end;
