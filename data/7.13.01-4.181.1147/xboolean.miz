:: On the Arithmetic of Boolean Values
::  by Library Committee
::
:: Received November 30, 2006
:: Copyright (c) 2006-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies CARD_1, ORDINAL1, ARYTM_1, RELAT_1, XBOOLEAN;
 notations ORDINAL1, NUMBERS, XCMPLX_0;
 constructors XCMPLX_0, SEQ_1;
 registrations XCMPLX_0, ORDINAL1;
 requirements SUBSET, NUMERALS, ARITHM, BOOLE;

begin
definition
func FALSE equals 
( 0 );
coherence;
func TRUE equals 
1;
coherence;
end;
definition
let C1 being set;
attr C1 is  boolean
means
:L2: (C1 = ( FALSE ) or C1 = ( TRUE ));
end;
registration
cluster ( FALSE ) ->  boolean;
coherence by L2;
cluster ( TRUE ) ->  boolean;
coherence by L2;
cluster  boolean for number;
existence by L2;
cluster  boolean ->  natural for number;
coherence
proof
let C2 being number;
assume L4: (C2 = ( FALSE ) or C2 = ( TRUE ));
thus L5: thesis by L4;
end;
end;
definition
let R1 being  boolean number;
func 'not' R1 ->  boolean number equals 
( 1 - R1 );
coherence
proof
L7: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L8: thesis by L7 , L2;
end;
involutiveness
;
let R2 being  boolean number;
func R1 '&' R2 equals 
( R1 * R2 );
correctness;
commutativity
;
idempotence
proof
let R1 being  boolean number;
L9: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L10: thesis by L9;
end;
end;
registration
let R1 being  boolean number;
let R2 being  boolean number;
cluster ( R1 '&' R2 ) ->  boolean;
coherence
proof
L12: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L13: thesis by L12;
end;
end;
definition
let R1 being  boolean number;
let R2 being  boolean number;
func R1 'or' R2 equals 
( 'not' ( ( 'not' R1 ) '&' ( 'not' R2 ) ) );
coherence;
commutativity
;
idempotence
;
end;
definition
let R1 being  boolean number;
let R2 being  boolean number;
func R1 => R2 equals 
( ( 'not' R1 ) 'or' R2 );
coherence;
end;
registration
let R1 being  boolean number;
let R2 being  boolean number;
cluster ( R1 'or' R2 ) ->  boolean;
coherence;
cluster ( R1 => R2 ) ->  boolean;
coherence;
end;
definition
let R1 being  boolean number;
let R2 being  boolean number;
func R1 <=> R2 equals 
( ( R1 => R2 ) '&' ( R2 => R1 ) );
coherence;
commutativity
;
end;
registration
let R1 being  boolean number;
let R2 being  boolean number;
cluster ( R1 <=> R2 ) ->  boolean;
coherence;
end;
definition
let R1 being  boolean number;
let R2 being  boolean number;
func R1 'nand' R2 equals 
( 'not' ( R1 '&' R2 ) );
coherence;
commutativity
;
func R1 'nor' R2 equals 
( 'not' ( R1 'or' R2 ) );
coherence;
commutativity
;
func R1 'xor' R2 equals 
( 'not' ( R1 <=> R2 ) );
coherence;
commutativity
;
func R1 '\' R2 equals 
( R1 '&' ( 'not' R2 ) );
coherence;
end;
registration
let R1 being  boolean number;
let R2 being  boolean number;
cluster ( R1 'nand' R2 ) ->  boolean;
coherence;
cluster ( R1 'nor' R2 ) ->  boolean;
coherence;
cluster ( R1 'xor' R2 ) ->  boolean;
coherence;
cluster ( R1 '\' R2 ) ->  boolean;
coherence;
end;
begin
theorem
L22: (for R1 being  boolean number holds ( R1 '&' R1 ) = R1);
theorem
L23: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 '&' R2 ) ) = ( R1 '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L24: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L25: thesis by L24;
end;
theorem
L26: (for R1 being  boolean number holds ( R1 'or' R1 ) = R1);
theorem
L27: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 'or' R2 ) ) = ( R1 'or' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L28: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L29: thesis by L28;
end;
theorem
L30: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 '&' R2 ) ) = R1))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L31: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L32: thesis by L31;
end;
theorem
L33: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'or' R2 ) ) = R1))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L34: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L35: thesis by L34;
end;
theorem
L36: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'or' R2 ) ) = ( R1 'or' ( R1 '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L37: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L38: thesis by L37;
end;
theorem
L39: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 '&' ( R2 'or' R3 ) ) = ( ( R1 '&' R2 ) 'or' ( R1 '&' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L40: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L41: thesis by L40;
end;
theorem
L42: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'or' ( R2 '&' R3 ) ) = ( ( R1 'or' R2 ) '&' ( R1 'or' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L43: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L44: thesis by L43;
end;
theorem
L45: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( ( R1 '&' R2 ) 'or' ( R2 '&' R3 ) ) 'or' ( R3 '&' R1 ) ) = ( ( ( R1 'or' R2 ) '&' ( R2 'or' R3 ) ) '&' ( R3 'or' R1 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L46: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L47: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L48: thesis by L47 , L46;
end;
theorem
L49: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( ( 'not' R1 ) 'or' R2 ) ) = ( R1 '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L50: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L51: thesis by L50;
end;
theorem
L52: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( ( 'not' R1 ) '&' R2 ) ) = ( R1 'or' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L53: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L54: thesis by L53;
end;
theorem
L55: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 => R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L56: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L57: thesis by L56;
end;
theorem
L58: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 => R2 ) ) = ( R1 '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L59: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L60: thesis by L59;
end;
theorem
L61: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 '&' R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L62: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L63: thesis by L62;
end;
theorem
L64: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( 'not' ( R1 => R2 ) ) ) = ( R1 '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L65: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L66: thesis by L65;
end;
theorem
L67: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'or' ( R1 => R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L68: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L69: thesis by L68;
end;
theorem
L70: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 => R2 ) ) = ( ( 'not' R1 ) 'or' ( ( 'not' R1 ) '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L71: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L72: thesis by L71;
end;
theorem
L73: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 <=> R2 ) <=> R3 ) = ( R1 <=> ( R2 <=> R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L74: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
thus L75: thesis by L74;
end;
theorem
L76: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 <=> R2 ) ) = ( R1 '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L77: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L78: thesis by L77;
end;
theorem
L79: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 <=> R2 ) ) = ( ( 'not' R1 ) '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L80: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L81: thesis by L80;
end;
theorem
L82: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 '&' ( R2 <=> R3 ) ) = ( ( R1 '&' ( ( 'not' R2 ) 'or' R3 ) ) '&' ( ( 'not' R3 ) 'or' R2 ) ))));
theorem
L83: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'or' ( R2 <=> R3 ) ) = ( ( ( R1 'or' ( 'not' R2 ) ) 'or' R3 ) '&' ( ( R1 'or' ( 'not' R3 ) ) 'or' R2 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L84: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L85: thesis by L84;
end;
theorem
L86: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 <=> R2 ) ) = ( ( ( 'not' R1 ) '&' ( 'not' R2 ) ) '&' ( ( 'not' R1 ) 'or' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L87: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L88: thesis by L87;
end;
theorem
L89: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( 'not' R1 ) '&' ( R2 <=> R3 ) ) = ( ( ( 'not' R1 ) '&' ( ( 'not' R2 ) 'or' R3 ) ) '&' ( ( 'not' R3 ) 'or' R2 ) ))));
theorem
L90: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 <=> R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L91: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L92: thesis by L91;
end;
theorem
L93: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 <=> R2 ) ) = ( R1 => ( R1 => R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L94: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L95: thesis by L94;
end;
theorem
L96: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 <=> R2 ) ) = ( R2 => R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L97: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L98: thesis by L97;
end;
theorem
L99: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'or' ( R1 <=> R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L100: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L101: thesis by L100;
end;
theorem
L102: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 => ( R2 <=> R3 ) ) = ( ( ( ( 'not' R1 ) 'or' ( 'not' R2 ) ) 'or' R3 ) '&' ( ( ( 'not' R1 ) 'or' R2 ) 'or' ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L103: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L104: thesis by L103;
end;
theorem
L105: (for R1 being  boolean number holds ( R1 'nor' R1 ) = ( 'not' R1 ));
theorem
L106: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 '&' R2 ) ) = ( 'not' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L107: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L108: thesis by L107;
end;
theorem
L109: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'or' R2 ) ) = ( ( 'not' R1 ) '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L110: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L111: thesis by L110;
end;
theorem
L112: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'nor' R2 ) ) = ( ( 'not' R1 ) '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L113: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L114: thesis by L113;
end;
theorem
L115: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 '&' R2 ) ) = ( 'not' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L116: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L117: thesis by L116;
end;
theorem
L118: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'or' R2 ) ) = ( R1 'nor' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L119: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L120: thesis by L119;
end;
theorem
L121: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 'nor' R2 ) ) = ( R1 'nor' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L122: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L123: thesis by L122;
end;
theorem
L124: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'or' ( R2 'nor' R3 ) ) = ( ( R1 'or' ( 'not' R2 ) ) '&' ( R1 'or' ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L125: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L126: thesis by L125;
end;
theorem
L127: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nor' ( R2 'nor' R3 ) ) = ( ( ( 'not' R1 ) '&' R2 ) 'or' ( ( 'not' R1 ) '&' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L128: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L129: thesis by L128;
end;
theorem
L130: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nor' ( R2 '&' R3 ) ) = ( ( 'not' ( R1 'or' R2 ) ) 'or' ( 'not' ( R1 'or' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L131: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L132: thesis by L131;
end;
theorem
L133: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 '&' ( R2 'nor' R3 ) ) = ( ( R1 '&' ( 'not' R2 ) ) '&' ( 'not' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
thus L134: ( R1 '&' ( R2 'nor' R3 ) ) = ( R1 '&' ( ( 'not' R2 ) '&' ( 'not' R3 ) ) )
.= ( ( R1 '&' ( 'not' R2 ) ) '&' ( 'not' R3 ) );
end;
theorem
L135: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 'nor' R2 ) ) = ( 'not' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L136: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L137: thesis by L136;
end;
theorem
L138: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 => ( R2 'nor' R3 ) ) = ( ( R1 => ( 'not' R2 ) ) '&' ( R1 => ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L139: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L140: thesis by L139;
end;
theorem
L141: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 'nor' R2 ) ) = ( R2 => R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L142: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L143: thesis by L142;
end;
theorem
L144: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'or' ( R2 'nor' R3 ) ) = ( ( R2 => R1 ) '&' ( R3 => R1 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L145: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L146: thesis by L145;
end;
theorem
L147: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 => ( R2 'nor' R3 ) ) = ( ( ( 'not' R1 ) 'or' ( 'not' R2 ) ) '&' ( ( 'not' R1 ) 'or' ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L148: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L149: thesis by L148;
end;
theorem
L150: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 <=> R2 ) ) = ( ( 'not' R1 ) '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L151: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L152: thesis by L151;
end;
theorem
L153: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 <=> R2 ) ) = ( R1 'nor' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L154: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L155: thesis by L154;
end;
theorem
L156: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nor' ( R2 <=> R3 ) ) = ( 'not' ( ( ( R1 'or' ( 'not' R2 ) ) 'or' R3 ) '&' ( ( R1 'or' ( 'not' R3 ) ) 'or' R2 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L157: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L158: thesis by L157;
end;
theorem
L159: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 <=> R2 ) = ( ( R1 '&' R2 ) 'or' ( R1 'nor' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L160: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L161: thesis by L160;
end;
theorem
L162: (for R1 being  boolean number holds ( R1 'nand' R1 ) = ( 'not' R1 ));
theorem
L163: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'nand' R2 ) ) = ( R1 '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L164: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L165: thesis by L164;
end;
theorem
L166: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 '&' R2 ) ) = ( 'not' ( R1 '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L167: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L168: thesis by L167;
end;
theorem
L169: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 'nand' R3 ) ) = ( ( ( 'not' R1 ) 'or' R2 ) '&' ( ( 'not' R1 ) 'or' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L170: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L171: thesis by L170;
end;
theorem
L172: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 'or' R3 ) ) = ( ( 'not' ( R1 '&' R2 ) ) '&' ( 'not' ( R1 '&' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L173: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L174: thesis by L173;
end;
theorem
L175: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 'nand' R2 ) ) = ( R1 'nand' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L176: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L177: thesis by L176;
end;
theorem
L178: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 'nand' R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L179: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L180: thesis by L179;
end;
theorem
L181: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 'nand' R3 ) ) = ( ( R1 => R2 ) '&' ( R1 => R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L182: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L183: thesis by L182;
end;
theorem
L184: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 => R2 ) ) = ( 'not' ( R1 '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L185: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L186: thesis by L185;
end;
theorem
L187: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 => R3 ) ) = ( ( R1 => R2 ) '&' ( R1 => ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L188: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L189: thesis by L188;
end;
theorem
L190: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'or' ( R1 'nand' R2 ) ) = ( R1 'nand' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L191: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L192: thesis by L191;
end;
theorem
L193: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 => R3 ) ) = ( ( ( 'not' R1 ) 'or' R2 ) '&' ( ( 'not' R1 ) 'or' ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L194: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L195: thesis by L194;
end;
theorem
L196: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 'nand' R2 ) ) = ( ( 'not' R1 ) 'or' ( ( 'not' R1 ) '&' ( 'not' R2 ) ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L197: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L198: thesis by L197;
end;
theorem
L199: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 '&' ( R2 'nand' R3 ) ) = ( ( R1 '&' ( 'not' R2 ) ) 'or' ( R1 '&' ( 'not' R3 ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L200: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L201: thesis by L200;
end;
theorem
L202: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 <=> R2 ) ) = ( 'not' ( R1 '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L203: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L204: thesis by L203;
end;
theorem
L205: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 <=> R3 ) ) = ( 'not' ( ( R1 '&' ( ( 'not' R2 ) 'or' R3 ) ) '&' ( ( 'not' R3 ) 'or' R2 ) ) ))));
theorem
L206: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 'nor' R3 ) ) = ( ( ( 'not' R1 ) 'or' R2 ) 'or' R3 ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
thus L207: ( R1 'nand' ( R2 'nor' R3 ) ) = ( ( 'not' R1 ) 'or' ( R2 'or' R3 ) )
.= ( ( ( 'not' R1 ) 'or' R2 ) 'or' R3 );
end;
theorem
L208: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( R1 '\' R2 ) '\' R2 ) = ( R1 '\' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L209: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
thus L210: thesis by L209;
end;
theorem
L211: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 '\' R2 ) ) = ( R1 '\' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L212: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L213: thesis by L212;
end;
theorem
L214: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 <=> R2 ) ) = ( R2 '\' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L215: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L216: thesis by L215;
end;
theorem
L217: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'nor' R2 ) ) = ( R2 '\' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L218: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L219: thesis by L218;
end;
theorem
L220: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 'xor' R2 ) ) = R2))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L221: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L222: thesis by L221;
end;
theorem
L223: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 'xor' R2 ) 'xor' R3 ) = ( R1 'xor' ( R2 'xor' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L224: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
thus L225: thesis by L224;
end;
theorem
L226: (for R1 being  boolean number holds (for R2 being  boolean number holds ( 'not' ( R1 'xor' R2 ) ) = ( ( 'not' R1 ) 'xor' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L227: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L228: thesis by L227;
end;
theorem
L229: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 '&' ( R2 'xor' R3 ) ) = ( ( R1 '&' R2 ) 'xor' ( R1 '&' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L230: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L231: thesis by L230;
end;
theorem
L232: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'xor' R2 ) ) = ( R1 '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L233: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L234: thesis by L233;
end;
theorem
L235: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 '&' R2 ) ) = ( R1 '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L236: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L237: thesis by L236;
end;
theorem
L238: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 'xor' R2 ) ) = ( ( 'not' R1 ) '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L239: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L240: thesis by L239;
end;
theorem
L241: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 'xor' R2 ) ) = ( R1 'or' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L242: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L243: thesis by L242;
end;
theorem
L244: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( ( 'not' R1 ) 'xor' R2 ) ) = ( R1 'or' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L245: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L246: thesis by L245;
end;
theorem
L247: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( ( 'not' R1 ) '&' R2 ) ) = ( R1 'or' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L248: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L249: thesis by L248;
end;
theorem
L250: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 'or' R2 ) ) = ( ( 'not' R1 ) '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L251: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L252: thesis by L251;
end;
theorem
L253: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'xor' ( R2 '&' R3 ) ) = ( ( R1 'or' ( R2 '&' R3 ) ) '&' ( ( 'not' R1 ) 'or' ( 'not' ( R2 '&' R3 ) ) ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L254: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L255: thesis by L254;
end;
theorem
L256: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'xor' ( R1 => R2 ) ) = ( R1 '&' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L257: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L258: thesis by L257;
end;
theorem
L259: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 'xor' R2 ) ) = ( ( 'not' R1 ) 'or' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L260: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L261: thesis by L260;
end;
theorem
L262: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 => R2 ) ) = ( ( 'not' R1 ) 'or' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L263: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L264: thesis by L263;
end;
theorem
L265: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'xor' ( R2 => R1 ) ) = ( ( R1 '&' ( R1 'or' ( 'not' R2 ) ) ) 'or' ( ( 'not' R1 ) '&' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L266: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L267: thesis by L266;
end;
theorem
L268: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 <=> R2 ) ) = ( 'not' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L269: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L270: thesis by L269;
end;
theorem
L271: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) 'xor' ( R1 <=> R2 ) ) = R2))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L272: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L273: thesis by L272;
end;
theorem
L274: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'xor' R2 ) ) = ( ( 'not' R1 ) '&' ( 'not' R2 ) )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L275: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L276: thesis by L275;
end;
theorem
L277: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'xor' R2 ) ) = ( R1 'nor' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L278: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L279: thesis by L278;
end;
theorem
L280: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 'nor' R2 ) ) = ( R2 => R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L281: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L282: thesis by L281;
end;
theorem
L283: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 'xor' R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L284: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L285: thesis by L284;
end;
theorem
L286: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 'nand' R2 ) ) = ( R1 => R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L287: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L288: thesis by L287;
end;
theorem
L289: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 => R2 ) ) = ( R1 'nand' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L290: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L291: thesis by L290;
end;
theorem
L292: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( R1 'nand' ( R2 'xor' R3 ) ) = ( ( R1 '&' R2 ) <=> ( R1 '&' R3 ) ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L293: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L294: thesis by L293;
end;
theorem
L295: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 '&' R2 ) ) = ( R1 '\' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L296: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L297: thesis by L296;
end;
theorem
L298: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'xor' R2 ) ) = ( R1 '\' R2 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L299: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L300: thesis by L299;
end;
theorem
L301: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R1 ) '&' ( R1 'xor' R2 ) ) = ( R2 '\' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L302: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L303: thesis by L302;
end;
theorem
L304: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'xor' ( R1 'or' R2 ) ) = ( R2 '\' R1 )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L305: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L306: thesis by L305;
end;
begin
theorem
L307: (for R1 being  boolean number holds (for R2 being  boolean number holds (( R1 '&' R2 ) = ( TRUE ) implies (R1 = ( TRUE ) & R2 = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L308: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L309: thesis by L308;
end;
theorem
L310: (for R1 being  boolean number holds ( 'not' ( R1 '&' ( 'not' R1 ) ) ) = ( TRUE ))
proof
let R1 being  boolean number;
L311: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L312: thesis by L311;
end;
theorem
L313: (for R1 being  boolean number holds ( R1 => R1 ) = ( TRUE ))
proof
let R1 being  boolean number;
L314: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L315: thesis by L314;
end;
theorem
L316: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R2 => R1 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L317: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L318: thesis by L317;
end;
theorem
L319: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( ( R1 => R2 ) => R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L320: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L321: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L322: thesis by L321 , L320;
end;
theorem
L323: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 => R2 ) => ( ( R2 => R3 ) => ( R1 => R3 ) ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L324: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L325: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L326: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L327: thesis by L326 , L324 , L325;
end;
theorem
L328: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 => R2 ) => ( ( R3 => R1 ) => ( R3 => R2 ) ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L329: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L330: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L331: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L332: thesis by L331 , L329 , L330;
end;
theorem
L333: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( R1 => ( R1 => R2 ) ) => ( R1 => R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L334: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L335: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L336: thesis by L335 , L334;
end;
theorem
L337: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 => ( R2 => R3 ) ) => ( ( R1 => R2 ) => ( R1 => R3 ) ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L338: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L339: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L340: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L341: thesis by L340 , L338 , L339;
end;
theorem
L342: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 => ( R2 => R3 ) ) => ( R2 => ( R1 => R3 ) ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L343: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L344: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L345: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L346: thesis by L345 , L343 , L344;
end;
theorem
L347: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( ( R1 => R2 ) => R3 ) => ( R2 => R3 ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L348: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L349: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L350: thesis by L349 , L348;
end;
theorem
L351: (for R1 being  boolean number holds ( ( ( TRUE ) => R1 ) => R1 ) = ( TRUE ))
proof
let R1 being  boolean number;
L352: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L353: thesis by L352;
end;
theorem
L354: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (( R1 => R2 ) = ( TRUE ) implies ( ( R2 => R3 ) => ( R1 => R3 ) ) = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L355: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L356: thesis by L355;
end;
theorem
L357: (for R1 being  boolean number holds (for R2 being  boolean number holds (( R1 => ( R1 => R2 ) ) = ( TRUE ) implies ( R1 => R2 ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L358: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
thus L359: thesis by L358;
end;
theorem
L360: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (( R1 => ( R2 => R3 ) ) = ( TRUE ) implies ( ( R1 => R2 ) => ( R1 => R3 ) ) = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L361: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L362: thesis by L361;
end;
theorem
L363: (for R1 being  boolean number holds (for R2 being  boolean number holds ((( R1 => R2 ) = ( TRUE ) & ( R2 => R1 ) = ( TRUE )) implies R1 = R2)))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L364: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L365: thesis by L364;
end;
theorem
L366: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ((( R1 => R2 ) = ( TRUE ) & ( R2 => R3 ) = ( TRUE )) implies ( R1 => R3 ) = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L367: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L368: thesis by L367;
end;
theorem
L369: (for R1 being  boolean number holds ( ( ( 'not' R1 ) => R1 ) => R1 ) = ( TRUE ))
proof
let R1 being  boolean number;
L370: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L371: thesis by L370;
end;
theorem
L372: (for R1 being  boolean number holds (for R2 being  boolean number holds (( 'not' R1 ) = ( TRUE ) implies ( R1 => R2 ) = ( TRUE ))));
theorem
L373: (for R1 being  boolean number holds (for R2 being  boolean number holds ((( R1 => R2 ) = ( TRUE ) & ( R1 => ( 'not' R2 ) ) = ( TRUE )) implies ( 'not' R1 ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L374: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L375: thesis by L374;
end;
theorem
L376: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( R1 => R2 ) => ( ( 'not' ( R2 '&' R3 ) ) => ( 'not' ( R1 '&' R3 ) ) ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L377: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L378: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L379: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L380: thesis by L379 , L377 , L378;
end;
theorem
L381: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 => R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L382: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L383: thesis by L382;
end;
theorem
L384: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 => ( R1 'or' R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L385: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L386: thesis by L385;
end;
theorem
L387: (for R1 being  boolean number holds (for R2 being  boolean number holds ( ( 'not' R2 ) 'or' ( ( R2 => R1 ) => R1 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L388: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L389: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L390: thesis by L389 , L388;
end;
theorem
L391: (for R1 being  boolean number holds ( R1 <=> R1 ) = ( TRUE ))
proof
let R1 being  boolean number;
L392: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L393: thesis by L392;
end;
theorem
L394: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ( ( ( ( R1 <=> R2 ) <=> R3 ) <=> R1 ) <=> ( R2 <=> R3 ) ) = ( TRUE ))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L395: (R2 = ( FALSE ) or R2 = ( TRUE )) by L2;
L396: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
L397: (R3 = ( FALSE ) or R3 = ( TRUE )) by L2;
thus L398: thesis by L397 , L395 , L396;
end;
theorem
L399: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds ((( R1 <=> R2 ) = ( TRUE ) & ( R2 <=> R3 ) = ( TRUE )) implies ( R1 <=> R3 ) = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
L400: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L401: thesis by L400;
end;
theorem
L402: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (for R4 being  boolean number holds ((( R1 <=> R2 ) = ( TRUE ) & ( R3 <=> R4 ) = ( TRUE )) implies ( ( R1 <=> R3 ) <=> ( R2 <=> R4 ) ) = ( TRUE ))))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
let R4 being  boolean number;
L403: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L404: thesis by L403;
end;
theorem
L405: (for R1 being  boolean number holds ( 'not' ( R1 <=> ( 'not' R1 ) ) ) = ( TRUE ))
proof
let R1 being  boolean number;
L406: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L407: thesis by L406;
end;
theorem
L408: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (for R4 being  boolean number holds ((( R1 <=> R2 ) = ( TRUE ) & ( R3 <=> R4 ) = ( TRUE )) implies ( ( R1 '&' R3 ) <=> ( R2 '&' R4 ) ) = ( TRUE ))))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
let R4 being  boolean number;
L409: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L410: thesis by L409;
end;
theorem
L411: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (for R4 being  boolean number holds ((( R1 <=> R2 ) = ( TRUE ) & ( R3 <=> R4 ) = ( TRUE )) implies ( ( R1 'or' R3 ) <=> ( R2 'or' R4 ) ) = ( TRUE ))))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
let R4 being  boolean number;
L412: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L413: thesis by L412;
end;
theorem
L414: (for R1 being  boolean number holds (for R2 being  boolean number holds (( R1 <=> R2 ) = ( TRUE ) iff (( R1 => R2 ) = ( TRUE ) & ( R2 => R1 ) = ( TRUE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L415: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L416: thesis by L415;
end;
theorem
L417: (for R1 being  boolean number holds (for R2 being  boolean number holds (for R3 being  boolean number holds (for R4 being  boolean number holds ((( R1 <=> R2 ) = ( TRUE ) & ( R3 <=> R4 ) = ( TRUE )) implies ( ( R1 => R3 ) <=> ( R2 => R4 ) ) = ( TRUE ))))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
let R3 being  boolean number;
let R4 being  boolean number;
L418: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L419: thesis by L418;
end;
theorem
L420: (for R1 being  boolean number holds ( 'not' ( R1 'nor' ( 'not' R1 ) ) ) = ( TRUE ))
proof
let R1 being  boolean number;
L421: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L422: thesis by L421;
end;
theorem
L423: (for R1 being  boolean number holds ( R1 'nand' ( 'not' R1 ) ) = ( TRUE ))
proof
let R1 being  boolean number;
L424: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L425: thesis by L424;
end;
theorem
L426: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'or' ( R1 'nand' R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L427: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L428: thesis by L427;
end;
theorem
L429: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nand' ( R1 'nor' R2 ) ) = ( TRUE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L430: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L431: thesis by L430;
end;
theorem
L432: (for R1 being  boolean number holds ( R1 '&' ( 'not' R1 ) ) = ( FALSE ))
proof
let R1 being  boolean number;
L433: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L434: thesis by L433;
end;
theorem
L435: (for R1 being  boolean number holds (( R1 '&' R1 ) = ( FALSE ) implies R1 = ( FALSE )));
theorem
L436: (for R1 being  boolean number holds (for R2 being  boolean number holds (( R1 '&' R2 ) = ( FALSE ) implies (R1 = ( FALSE ) or R2 = ( FALSE )))))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L437: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L438: thesis by L437;
end;
theorem
L439: (for R1 being  boolean number holds ( 'not' ( R1 => R1 ) ) = ( FALSE ))
proof
let R1 being  boolean number;
L440: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L441: thesis by L440;
end;
theorem
L442: (for R1 being  boolean number holds ( R1 <=> ( 'not' R1 ) ) = ( FALSE ))
proof
let R1 being  boolean number;
L443: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L444: thesis by L443;
end;
theorem
L445: (for R1 being  boolean number holds ( 'not' ( R1 <=> R1 ) ) = ( FALSE ))
proof
let R1 being  boolean number;
L446: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L447: thesis by L446;
end;
theorem
L448: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 '&' ( R1 'nor' R2 ) ) = ( FALSE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L449: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L450: thesis by L449;
end;
theorem
L451: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 => R2 ) ) = ( FALSE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L452: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L453: thesis by L452;
end;
theorem
L454: (for R1 being  boolean number holds (for R2 being  boolean number holds ( R1 'nor' ( R1 'nand' R2 ) ) = ( FALSE )))
proof
let R1 being  boolean number;
let R2 being  boolean number;
L455: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L456: thesis by L455;
end;
theorem
L457: (for R1 being  boolean number holds ( R1 'xor' R1 ) = ( FALSE ))
proof
let R1 being  boolean number;
L458: (R1 = ( FALSE ) or R1 = ( TRUE )) by L2;
thus L459: thesis by L458;
end;
