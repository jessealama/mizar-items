environ
vocabularies NUMBERS,BCIALG_1,SUBSET_1,INT_1,FUNCT_1,NAT_1,XBOOLE_0,ZFMISC_1,STRUCT_0,CARD_1,SUPINF_2,ARYTM_3,RELAT_1,NEWTON,COMPLEX1,XXREAL_0,WAYBEL15,ARYTM_1,GROUP_1,INT_2,UNIALG_2,CARD_FIL,RCOMP_1,BCIALG_2,REALSET1,MSSUBFAM,FUNCOP_1,MOD_4,GROUP_6,TARSKI,FUNCT_2,CHORD,WELLORD1,EQREL_1,ALG_1,CARD_3,BINOP_1,BCIALG_6;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,REALSET1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,STRUCT_0,BCIALG_1,FUNCOP_1,NAT_1,NUMBERS,INT_2,XXREAL_0,BINOP_2,NAT_D,INT_1,BCIALG_2,EQREL_1,CKB1,CKB2,CKB3,CKB4;
definitions TARSKI,REALSET1,BINOP_1,STRUCT_0,BCIALG_1,FUNCT_1,BCIALG_2,XBOOLE_0,CKB2,CKB3,CKB4;
theorems TARSKI,FUNCT_1,FUNCT_2,FUNCOP_1,BINOP_1,ZFMISC_1,RELAT_1,XBOOLE_0,XBOOLE_1,BCIALG_1,GROUP_6,BCIALG_2,EQREL_1,RELSET_1,ABSVALUE,ORDINAL1,NAT_D,XREAL_1,INT_1,XCMPLX_1,INT_2,NAT_1,NEWTON,XXREAL_0,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
schemes BINOP_1,FUNCT_2,NAT_1,INT_1,CLASSES1;
registrations XBOOLE_0,RELSET_1,REALSET1,STRUCT_0,BCIALG_1,BCIALG_2,FUNCT_2,PARTFUN1,NAT_1,XREAL_0,ORDINAL1,XXREAL_0,INT_1;
constructors BINOP_1,REALSET1,BCIALG_2,REAL_1,BINOP_2,FINSEQOP,SUPINF_1,SEQ_1,NAT_D,RELSET_1,CKB1,CKB2,CKB3;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
reserve X for BCI-algebra;
reserve x for (Element of X);
reserve n for Nat;
theorem
(x in ( BCK-part X ) implies ( x |^ ( - n ) ) = ( 0. X ))
proof
defpred P[ Nat ]
 means
( x |^ ( - $1 ) ) = ( 0. X );
assume x in ( BCK-part X );
then A1: (ex y being (Element of X) st (y = x & ( 0. X ) <= y));
A2:now
let n;
assume A3: P[ n ];
( - ( - ( n + 1 ) ) ) > ( 0 );
then A4: ( - ( n + 1 ) ) < ( 0 );
per cases ;
suppose ( - n ) = ( 0 );

then ( x |^ ( - ( n + 1 ) ) ) = ( x ` ) by CKB9:1
.= ( 0. X ) by A1,BCIALG_1:def 11;
hence P[ ( n + 1 ) ];
end;
suppose A5: ( - n ) < ( 0 );

then ( ( BCI-power X ) . (( x ` ),( abs ( - n ) )) ) = ( 0. X ) by A3,CKB3:def 1;
then ( ( BCI-power X ) . (( x ` ),( - ( - n ) )) ) = ( 0. X ) by A5,ABSVALUE:def 1;
then ( ( x ` ) \ ( ( ( x ` ) |^ n ) ` ) ) = ( ( x \ ( 0. X ) ) ` ) by BCIALG_1:9
.= ( x ` ) by BCIALG_1:2;
then ( ( x ` ) \ ( ( ( x ` ) |^ n ) ` ) ) = ( 0. X ) by A1,BCIALG_1:def 11;
then ( 0. X ) = ( ( x ` ) |^ ( n + 1 ) ) by CKB6:1
.= ( ( BCI-power X ) . (( x ` ),( - ( - ( n + 1 ) ) )) )
.= ( ( BCI-power X ) . (( x ` ),( abs ( - ( n + 1 ) ) )) ) by A4,ABSVALUE:def 1
.= ( x |^ ( - ( n + 1 ) ) ) by A4,CKB3:def 1;
hence P[ ( n + 1 ) ];
end;
end;
A6: P[ ( 0 ) ] by CKB2:def 1;
(for n holds P[ n ]) from NAT_1:sch 2(A6,A2);
hence thesis;
end;
