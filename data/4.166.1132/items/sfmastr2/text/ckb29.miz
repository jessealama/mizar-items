environ
vocabularies NUMBERS,FSM_1,SCMFSA_2,SF_MASTR,AMI_1,SCMFSA7B,SUBSET_1,XBOOLE_0,CARD_1,UNIALG_2,SCMFSA6B,FUNCT_1,FUNCT_4,SCMFSA6A,TARSKI,RELAT_1,ARYTM_3,GRAPHSP,MSUALG_1,SFMASTR1,TURING_1,SCMFSA_9,AMI_3,CARD_3,XXREAL_0,ARYTM_1,SCMFSA9A,COMPLEX1,AOFA_I00,PRE_FF,SFMASTR2,NAT_1,SCMNORM,SCMFSA6C,FUNCOP_1,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,INT_2,XXREAL_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,PRE_FF,CARD_3,FUNCOP_1,STRUCT_0,MEMSTR_0,AMISTD_1,COMPOS_1,EXTPRO_1,SCMFSA_2,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA_9,SFMASTR1,SCMFSA9A,NAT_1,CKB8,CKB9,CKB10,CKB14,CKB20;
definitions SCMFSA9A,SUBSET_1,SCMFSA6A,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB8,CKB9,CKB14,CKB20;
theorems TARSKI,ZFMISC_1,ABSVALUE,NAT_1,INT_1,FUNCT_4,PRE_FF,SCMFSA_2,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA8C,SCMFSA_9,SFMASTR1,SCMFSA9A,XBOOLE_0,XBOOLE_1,XREAL_1,RELAT_1,XXREAL_0,FUNCT_1,PBOOLE,COMPOS_1,EXTPRO_1,PARTFUN1,MEMSTR_0,CARD_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28;
schemes FUNCT_2,NAT_1;
registrations SETFAM_1,FUNCT_1,ORDINAL1,RELSET_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,CARD_3,SCMFSA_2,SF_MASTR,SCMFSA6B,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA_9,SFMASTR1,XBOOLE_0,RELAT_1,FUNCT_2,COMPOS_1,EXTPRO_1,PBOOLE,FUNCT_4,FUNCOP_1,STRUCT_0,SCMFSA6A,MEMSTR_0,CKB13;
constructors XXREAL_0,INT_2,PRE_FF,SCMFSA6A,SCMFSA6B,SCMFSA6C,SCMFSA_9,SFMASTR1,SCMFSA9A,RELSET_1,PRE_POLY,PBOOLE,SCMFSA8A,SCMFSA7B,AMISTD_2,AMISTD_1,SCMFSA_7,FUNCT_4,MEMSTR_0,CKB8,CKB9,CKB14,CKB20;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve s for (State of ( SCM+FSA ));
reserve p for (Instruction-Sequence of ( SCM+FSA ));
reserve a for Int-Location;
reserve f for FinSeq-Location;
reserve J for  good (Program of ( SCM+FSA ));
reserve k for (Element of ( NAT ));
theorem
Th23: (((( s . a ) = k & ( ProperTimesBody a,J,s,p or J is  parahalting)) & (( s . ( intloc ( 0 ) ) ) = 1 or a is  read-write)) implies ( DataPart ( IExec (( times (a,J) ),p,s) ) ) = ( DataPart ( ( StepTimes (a,J,p,s) ) . k ) ))
proof
set I = J;
assume A1: ( s . a ) = k;
set ST = ( StepTimes (a,I,p,s) );
set au = ( 1 -stRWNotIn ( { a } \/ ( UsedIntLoc I ) ) );
set ISu = ( I ';' ( SubFrom (au,( intloc ( 0 ) )) ) );
set s1 = ( Exec (( au := a ),( Initialized s )) );
set Is1 = ( Initialized s1 );
set SW = ( StepWhile>0 (au,ISu,p,s1) );
set ISW = ( StepWhile>0 (au,ISu,p,Is1) );
( s1 . ( intloc ( 0 ) ) ) = ( ( Initialized s ) . ( intloc ( 0 ) ) ) by SCMFSA_2:63
.= 1 by SCMFSA6A:38;
then A2: ( DataPart Is1 ) = ( DataPart s1 ) by SCMFSA8C:7;
set WH = ( while>0 (au,ISu) );
assume A3: ( ProperTimesBody a,I,s,p or I is  parahalting);
then A4:  ProperTimesBody a,I,s,p by CKB21:1;
assume A5: (( s . ( intloc ( 0 ) ) ) = 1 or a is  read-write);
A6: ST = SW;
A7:  ProperBodyWhile>0 au,ISu,s1,p
proof
let k being (Element of ( NAT ));
assume ( ( SW . k ) . au ) > ( 0 );
then A8: k < ( s . a ) by A1,A4,A5,A6,CKB24:1;
then A9: ( ( ST . k ) . ( intloc ( 0 ) ) ) = 1 by A3,CKB21:1,CKB22:1;
then A10: ( DataPart ( ST . k ) ) = ( DataPart ( Initialized ( ST . k ) ) ) by SCMFSA8C:7;
A11: I is_closed_on ( ST . k ),( p +* ( times* (a,I) ) ) by A4,A8,CKB20:def 1;
then A12: I is_closed_on ( Initialized ( ST . k ) ),( p +* ( times* (a,I) ) ) by A9,CKB4:1;
I is_halting_on ( ST . k ),( p +* ( times* (a,I) ) ) by A4,A8,CKB20:def 1;
then A13: I is_halting_on ( Initialized ( ST . k ) ),( p +* ( times* (a,I) ) ) by A11,A9,CKB5:1;
A14: ( Macro ( SubFrom (au,( intloc ( 0 ) )) ) ) is_closed_on ( IExec (I,( p +* ( times* (a,I) ) ),( ST . k )) ),( p +* ( times* (a,I) ) ) by SCMFSA7B:18;
then A15: ISu is_closed_on ( Initialized ( ST . k ) ),( p +* ( times* (a,I) ) ) by A12,A13,SFMASTR1:2;
hence ISu is_closed_on ( SW . k ),( p +* WH ) by A10,SCMFSA8B:3;
( Macro ( SubFrom (au,( intloc ( 0 ) )) ) ) is_halting_on ( IExec (I,( p +* ( times* (a,I) ) ),( ST . k )) ),( p +* ( times* (a,I) ) ) by SCMFSA7B:19;
then ISu is_halting_on ( Initialized ( ST . k ) ),( p +* ( times* (a,I) ) ) by A12,A13,A14,SFMASTR1:3;
hence thesis by A10,A15,SCMFSA8B:5;
end;
then A16: ( DataPart ( ISW . k ) ) = ( DataPart ( SW . k ) ) by A2,SCMFSA9A:34;
A17:  WithVariantWhile>0 au,ISu,Is1,p
proof
reconsider sa = ( s . a ) as (Element of ( NAT )) by A1;
deffunc U((State of ( SCM+FSA ))) = ( abs ( $1 . au ) );
consider f being (Function of ( product (the Object-Kind of ( SCM+FSA )) ),( NAT )) such that A18: (for x being (Element of ( product (the Object-Kind of ( SCM+FSA )) )) holds ( f . x ) = U(x)) from FUNCT_2:sch 4;
A19: (for x being (State of ( SCM+FSA )) holds ( f . x ) = U(x))
proof
let x being (State of ( SCM+FSA ));
reconsider x as (Element of ( product (the Object-Kind of ( SCM+FSA )) )) by CARD_3:107;
( f . x ) = U(x) by A18;
hence thesis;
end;
take f;
let k being (Element of ( NAT ));
( DataPart ( ISW . k ) ) = ( DataPart ( SW . k ) ) by A2,A7,SCMFSA9A:34;
then A20: ( ( ISW . k ) . au ) = ( ( SW . k ) . au ) by SCMFSA6A:7;
( DataPart ( ISW . ( k + 1 ) ) ) = ( DataPart ( SW . ( k + 1 ) ) ) by A2,A7,SCMFSA9A:34;
then A21: ( ( ISW . ( k + 1 ) ) . au ) = ( ( SW . ( k + 1 ) ) . au ) by SCMFSA6A:7;
per cases ;
suppose A22: k < ( s . a );

then A23: ( k - k ) < ( ( s . a ) - k ) by XREAL_1:9;
A24: ( ( ( ST . k ) . au ) + k ) = ( s . a ) by A4,A5,A22,CKB23:1;
A25: ( k + 1 ) <= sa by A22,NAT_1:13;
then A26: ( ( k + 1 ) - ( k + 1 ) ) <= ( ( s . a ) - ( k + 1 ) ) by XREAL_1:9;
A27: ( ( ( ST . ( k + 1 ) ) . au ) + ( k + 1 ) ) = ( s . a ) by A4,A5,A25,CKB23:1;
then A28: ( s . a ) = ( ( ( ( ST . ( k + 1 ) ) . au ) + 1 ) + k );
A29: ( f . ( ISW . ( k + 1 ) ) ) = ( abs ( ( ISW . ( k + 1 ) ) . au ) ) by A19
.= ( ( SW . ( k + 1 ) ) . au ) by A21,A27,A26,ABSVALUE:def 1;
( f . ( ISW . k ) ) = ( abs ( ( ISW . k ) . au ) ) by A19
.= ( ( SW . k ) . au ) by A20,A24,A23,ABSVALUE:def 1;
hence thesis by A24,A28,A29,NAT_1:13;
end;
suppose k >= ( s . a );

hence thesis by A1,A4,A5,A6,A20,CKB24:1;
end;
end;
A30:  ProperBodyWhile>0 au,ISu,Is1,p
proof
let k being (Element of ( NAT ));
assume A31: ( ( ISW . k ) . au ) > ( 0 );
A32: ( DataPart ( ISW . k ) ) = ( DataPart ( SW . k ) ) by A2,A7,SCMFSA9A:34;
then A33: ( ( SW . k ) . au ) = ( ( ISW . k ) . au ) by SCMFSA6A:7;
then A34: ISu is_closed_on ( SW . k ),( p +* WH ) by A7,A31,SCMFSA9A:def 4;
hence ISu is_closed_on ( ISW . k ),( p +* WH ) by A32,SCMFSA8B:3;
ISu is_halting_on ( SW . k ),( p +* WH ) by A7,A31,A33,SCMFSA9A:def 4;
hence thesis by A32,A34,SCMFSA8B:5;
end;
then consider K being (Element of ( NAT )) such that A35: ( ExitsAtWhile>0 (au,ISu,p,Is1) ) = K and A36: ( ( ISW . K ) . au ) <= ( 0 ) and A37: (for i being (Element of ( NAT )) holds (( ( ISW . i ) . au ) <= ( 0 ) implies K <= i)) and ( DataPart ( Comput (( p +* WH ),( Initialize Is1 ),( LifeSpan (( p +* WH ),( Initialize Is1 )) )) ) ) = ( DataPart ( ISW . K ) ) by A17,SCMFSA9A:def 6;
A38: WH is_closed_on Is1,p by A30,A17,SCMFSA9A:27;
WH is_halting_on Is1,p by A30,A17,SCMFSA9A:27;
then A39: WH is_halting_on s1,p by A2,A38,SCMFSA8B:5;
A40: ( DataPart ( IExec (WH,p,s1) ) ) = ( DataPart ( ISW . ( ExitsAtWhile>0 (au,ISu,p,Is1) ) ) ) by A30,A17,SCMFSA9A:36;
A41: ( DataPart ( ISW . K ) ) = ( DataPart ( SW . K ) ) by A2,A7,SCMFSA9A:34;
( ( SW . k ) . au ) = ( 0 ) by A1,A4,A5,A6,CKB24:1;
then ( ( ISW . k ) . au ) = ( 0 ) by A16,SCMFSA6A:7;
then A42: K <= k by A37;
then A43: ( ( ( SW . K ) . au ) + K ) = k by A1,A4,A5,A6,CKB23:1;
( K - K ) <= ( k - K ) by A42,XREAL_1:9;
then A44: ( ( ISW . K ) . au ) = ( 0 ) by A36,A41,A43,SCMFSA6A:7;
A45: ( ( ( ISW . K ) . au ) + K ) = k by A41,A43,SCMFSA6A:7;
A46:now
let x being Int-Location;
thus ( ( IExec (( times (a,I) ),p,s) ) . x ) = ( ( IExec (WH,p,s1) ) . x ) by A2,A38,A39,SCMFSA8B:3,SFMASTR1:14
.= ( ( ST . k ) . x ) by A40,A35,A16,A45,A44,SCMFSA6A:7;
end;
now
let x being FinSeq-Location;
thus ( ( IExec (( times (a,I) ),p,s) ) . x ) = ( ( IExec (WH,p,s1) ) . x ) by A2,A38,A39,SCMFSA8B:3,SFMASTR1:15
.= ( ( ST . k ) . x ) by A40,A35,A16,A45,A44,SCMFSA6A:7;
end;
hence thesis by A46,SCMFSA6A:7;
end;
