environ
vocabularies ALGSTR_0,STRUCT_0,VECTSP_1,SUPINF_2,XBOOLE_0,RLVECT_1,SUBSET_1,ARYTM_3,BINOP_1,LATTICES,FUNCT_1,RELAT_1,MESFUNC1,ZFMISC_1,RLSUB_1,RLVECT_3,RLVECT_2,CARD_3,FUNCT_2,TARSKI,ARYTM_1,RLSUB_2,FINSEQ_4,MCART_1,GROUP_1,SETFAM_1,HAHNBAN,MSSUBFAM,UNIALG_1,HAHNBAN1,GROUP_6,VECTSP10;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_1,DOMAIN_1,STRUCT_0,ALGSTR_0,RLVECT_1,BINOP_1,GROUP_1,VECTSP_1,RELSET_1,FUNCT_2,VECTSP_4,VECTSP_5,VECTSP_6,VECTSP_7,GRCAT_1,HAHNBAN1,CKB1,CKB33,CKB34,CKB35,CKB36;
definitions HAHNBAN1,TARSKI,XBOOLE_0,VECTSP_4,VECTSP_5,RLVECT_1,FUNCT_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1,CKB33,CKB34,CKB35,CKB36;
theorems XBOOLE_1,FUNCT_2,HAHNBAN1,VECTSP_1,RLVECT_1,MCART_1,VECTSP_5,VECTSP_4,VECTSP_6,VECTSP_7,TARSKI,FUNCT_1,XBOOLE_0,REALSET1,ZFMISC_1,BINOP_1,GROUP_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36;
schemes FUNCT_2,BINOP_1;
registrations SUBSET_1,FUNCT_1,FINSET_1,STRUCT_0,VECTSP_1,VECTSP_4,HAHNBAN1,ALGSTR_0,FUNCT_2,RELAT_1,ZFMISC_1,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
constructors REALSET2,VECTSP_5,VECTSP_6,VECTSP_7,HAHNBAN1,RELSET_1,GRCAT_1,CKB1,CKB33,CKB34,CKB35,CKB36;
requirements SUBSET,BOOLE;
begin
definition
let K being  add-associative  right_zeroed  right_complementable  Abelian  associative  well-unital  distributive non empty doubleLoopStr;
let V being (VectSp of K);
let W being (Subspace of V);
func VectQuot (V,W) ->  strict  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over K
means
:Def6: ((((the carrier of it) = ( CosetSet (V,W) ) & (the addF of it) = ( addCoset (V,W) )) & ( 0. it ) = ( zeroCoset (V,W) )) & (the lmult of it) = ( lmultCoset (V,W) ));
existence
proof
set C = ( CosetSet (V,W) );
set aC = ( addCoset (V,W) );
set zC = ( zeroCoset (V,W) );
set lC = ( lmultCoset (V,W) );
set A = VectSpStr (# C,aC,zC,lC #);
A1: A is  right_zeroed
proof
let A1 being (Element of A);
A1 in C;
then consider aa being (Coset of W) such that A2: A1 = aa;
consider a being (Vector of V) such that A3: aa = ( a + W ) by VECTSP_4:def 6;
( 0. A ) = ( ( 0. V ) + W ) by VECTSP_4:45;
hence ( A1 + ( 0. A ) ) = ( ( a + ( 0. V ) ) + W ) by A2,A3,CKB34:def 1
.= A1 by A2,A3,RLVECT_1:4;
end;
A4: A is  right_complementable
proof
let A1 being (Element of A);
A5: ( 0. A ) = ( ( 0. V ) + W ) by VECTSP_4:45;
A1 in C;
then consider aa being (Coset of W) such that A6: A1 = aa;
consider a being (Vector of V) such that A7: aa = ( a + W ) by VECTSP_4:def 6;
set A2 = ( ( - a ) + W );
A2 is (Coset of W) by VECTSP_4:def 6;
then A2 in C;
then reconsider A2 as (Element of A);
take A2;
thus ( A1 + A2 ) = ( ( a + ( - a ) ) + W ) by A6,A7,CKB34:def 1
.= ( 0. A ) by A5,RLVECT_1:5;
end;
A8:now
let x being (Element of K),y being (Element of K);
let A1 being (Element of A),A2 being (Element of A);
A9: ( lC . (x,A1) ) = ( x * A1 ) by VECTSP_1:def 12;
A1 in C;
then consider aa being (Coset of W) such that A10: A1 = aa;
A2 in C;
then consider bb being (Coset of W) such that A11: A2 = bb;
consider b being (Vector of V) such that A12: bb = ( b + W ) by VECTSP_4:def 6;
A13: (( lC . (x,A2) ) = ( x * A2 ) & ( lC . (x,A2) ) = ( ( x * b ) + W )) by A11,A12,CKB36:def 1,VECTSP_1:def 12;
A14: ( lC . (y,A1) ) = ( y * A1 ) by VECTSP_1:def 12;
consider a being (Vector of V) such that A15: aa = ( a + W ) by VECTSP_4:def 6;
A16: ( aC . (A1,A2) ) = ( ( a + b ) + W ) by A10,A11,A15,A12,CKB34:def 1;
A17: ( lC . (x,A1) ) = ( ( x * a ) + W ) by A10,A15,CKB36:def 1;
thus ( x * ( A1 + A2 ) ) = ( lC . (x,( (the addF of A) . (A1,A2) )) ) by VECTSP_1:def 12
.= ( ( x * ( a + b ) ) + W ) by A16,CKB36:def 1
.= ( ( ( x * a ) + ( x * b ) ) + W ) by VECTSP_1:def 14
.= ( ( x * A1 ) + ( x * A2 ) ) by A17,A9,A13,CKB34:def 1;
A18: ( lC . (y,A1) ) = ( ( y * a ) + W ) by A10,A15,CKB36:def 1;
thus ( ( x + y ) * A1 ) = ( (the lmult of A) . (( x + y ),A1) ) by VECTSP_1:def 12
.= ( ( ( x + y ) * a ) + W ) by A10,A15,CKB36:def 1
.= ( ( ( x * a ) + ( y * a ) ) + W ) by VECTSP_1:def 15
.= ( ( x * A1 ) + ( y * A1 ) ) by A17,A9,A18,A14,CKB34:def 1;
thus ( ( x * y ) * A1 ) = ( (the lmult of A) . (( x * y ),A1) ) by VECTSP_1:def 12
.= ( ( ( x * y ) * a ) + W ) by A10,A15,CKB36:def 1
.= ( ( x * ( y * a ) ) + W ) by VECTSP_1:def 16
.= ( lC . (x,( y * A1 )) ) by A18,A14,CKB36:def 1
.= ( x * ( y * A1 ) ) by VECTSP_1:def 12;
thus ( ( 1_ K ) * A1 ) = ( (the lmult of A) . (( 1_ K ),A1) ) by VECTSP_1:def 12
.= ( ( ( 1_ K ) * a ) + W ) by A10,A15,CKB36:def 1
.= A1 by A10,A15,VECTSP_1:def 17;
end;
A19: A is  Abelian
proof
let A1 being (Element of A),A2 being (Element of A);
A1 in C;
then consider aa being (Coset of W) such that A20: A1 = aa;
consider a being (Vector of V) such that A21: aa = ( a + W ) by VECTSP_4:def 6;
A2 in C;
then consider bb being (Coset of W) such that A22: A2 = bb;
consider b being (Vector of V) such that A23: bb = ( b + W ) by VECTSP_4:def 6;
thus ( A1 + A2 ) = ( ( a + b ) + W ) by A20,A22,A21,A23,CKB34:def 1
.= ( A2 + A1 ) by A20,A22,A21,A23,CKB34:def 1;
end;
A is  add-associative
proof
let A1 being (Element of A),A2 being (Element of A),A3 being (Element of A);
A1 in C;
then consider aa being (Coset of W) such that A24: A1 = aa;
consider a being (Vector of V) such that A25: aa = ( a + W ) by VECTSP_4:def 6;
A2 in C;
then consider bb being (Coset of W) such that A26: A2 = bb;
consider b being (Vector of V) such that A27: bb = ( b + W ) by VECTSP_4:def 6;
A3 in C;
then consider cc being (Coset of W) such that A28: A3 = cc;
consider c being (Vector of V) such that A29: cc = ( c + W ) by VECTSP_4:def 6;
A30: ( aC . (A2,A3) ) = ( ( b + c ) + W ) by A26,A28,A27,A29,CKB34:def 1;
( aC . (A1,A2) ) = ( ( a + b ) + W ) by A24,A26,A25,A27,CKB34:def 1;
hence ( ( A1 + A2 ) + A3 ) = ( ( ( a + b ) + c ) + W ) by A28,A29,CKB34:def 1
.= ( ( a + ( b + c ) ) + W ) by RLVECT_1:def 3
.= ( A1 + ( A2 + A3 ) ) by A24,A25,A30,CKB34:def 1;
end;
then reconsider A as  strict  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over K by A19,A1,A4,A8,VECTSP_1:def 14,VECTSP_1:def 15,VECTSP_1:def 16,VECTSP_1:def 17;
take A;
thus thesis;
end;
uniqueness;
end;
