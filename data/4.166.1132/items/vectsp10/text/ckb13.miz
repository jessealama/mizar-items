environ
vocabularies ALGSTR_0,STRUCT_0,VECTSP_1,SUPINF_2,XBOOLE_0,RLVECT_1,SUBSET_1,ARYTM_3,BINOP_1,LATTICES,FUNCT_1,RELAT_1,MESFUNC1,ZFMISC_1,RLSUB_1,RLVECT_3,RLVECT_2,CARD_3,FUNCT_2,TARSKI,ARYTM_1,RLSUB_2,FINSEQ_4,MCART_1,GROUP_1,SETFAM_1,HAHNBAN,MSSUBFAM,UNIALG_1,HAHNBAN1,GROUP_6,VECTSP10;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_1,DOMAIN_1,STRUCT_0,ALGSTR_0,RLVECT_1,BINOP_1,GROUP_1,VECTSP_1,RELSET_1,FUNCT_2,VECTSP_4,VECTSP_5,VECTSP_6,VECTSP_7,GRCAT_1,HAHNBAN1,CKB1;
definitions HAHNBAN1,TARSKI,XBOOLE_0,VECTSP_4,VECTSP_5,RLVECT_1,FUNCT_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1;
theorems XBOOLE_1,FUNCT_2,HAHNBAN1,VECTSP_1,RLVECT_1,MCART_1,VECTSP_5,VECTSP_4,VECTSP_6,VECTSP_7,TARSKI,FUNCT_1,XBOOLE_0,REALSET1,ZFMISC_1,BINOP_1,GROUP_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1;
schemes FUNCT_2,BINOP_1;
registrations SUBSET_1,FUNCT_1,FINSET_1,STRUCT_0,VECTSP_1,VECTSP_4,HAHNBAN1,ALGSTR_0,FUNCT_2,RELAT_1,ZFMISC_1,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
constructors REALSET2,VECTSP_5,VECTSP_6,VECTSP_7,HAHNBAN1,RELSET_1,GRCAT_1,CKB1;
requirements SUBSET,BOOLE;
begin
theorem
Th2: (for K being  add-associative  right_zeroed  right_complementable  associative  left_unital  distributive non empty doubleLoopStr holds (for a being (Element of K) holds (for V being  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over K holds (for v being (Vector of V) holds (( ( 0. K ) * v ) = ( 0. V ) & ( a * ( 0. V ) ) = ( 0. V ))))))
proof
let F being  add-associative  right_zeroed  right_complementable  associative  left_unital  distributive non empty doubleLoopStr;
let x being (Element of F);
let V being  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over F;
let v being (Vector of V);
( v + ( ( 0. F ) * v ) ) = ( ( ( 1. F ) * v ) + ( ( 0. F ) * v ) ) by VECTSP_1:def 17
.= ( ( ( 1. F ) + ( 0. F ) ) * v ) by VECTSP_1:def 15
.= ( ( 1. F ) * v ) by RLVECT_1:4
.= v by VECTSP_1:def 17
.= ( v + ( 0. V ) ) by RLVECT_1:4;
hence A1: ( ( 0. F ) * v ) = ( 0. V ) by RLVECT_1:8;
hence ( x * ( 0. V ) ) = ( ( x * ( 0. F ) ) * v ) by VECTSP_1:def 16
.= ( 0. V ) by A1,VECTSP_1:6;
end;
