environ
vocabularies ALGSTR_0,STRUCT_0,VECTSP_1,SUPINF_2,XBOOLE_0,RLVECT_1,SUBSET_1,ARYTM_3,BINOP_1,LATTICES,FUNCT_1,RELAT_1,MESFUNC1,ZFMISC_1,RLSUB_1,RLVECT_3,RLVECT_2,CARD_3,FUNCT_2,TARSKI,ARYTM_1,RLSUB_2,FINSEQ_4,MCART_1,GROUP_1,SETFAM_1,HAHNBAN,MSSUBFAM,UNIALG_1,HAHNBAN1,GROUP_6,VECTSP10;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_1,DOMAIN_1,STRUCT_0,ALGSTR_0,RLVECT_1,BINOP_1,GROUP_1,VECTSP_1,RELSET_1,FUNCT_2,VECTSP_4,VECTSP_5,VECTSP_6,VECTSP_7,GRCAT_1,HAHNBAN1,CKB1;
definitions HAHNBAN1,TARSKI,XBOOLE_0,VECTSP_4,VECTSP_5,RLVECT_1,FUNCT_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1;
theorems XBOOLE_1,FUNCT_2,HAHNBAN1,VECTSP_1,RLVECT_1,MCART_1,VECTSP_5,VECTSP_4,VECTSP_6,VECTSP_7,TARSKI,FUNCT_1,XBOOLE_0,REALSET1,ZFMISC_1,BINOP_1,GROUP_1,STRUCT_0,ALGSTR_0,GRCAT_1,CKB1;
schemes FUNCT_2,BINOP_1;
registrations SUBSET_1,FUNCT_1,FINSET_1,STRUCT_0,VECTSP_1,VECTSP_4,HAHNBAN1,ALGSTR_0,FUNCT_2,RELAT_1,ZFMISC_1,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6;
constructors REALSET2,VECTSP_5,VECTSP_6,VECTSP_7,HAHNBAN1,RELSET_1,GRCAT_1,CKB1;
requirements SUBSET,BOOLE;
begin
registration
let K being  associative  left_unital  distributive non empty doubleLoopStr;
cluster ( StructVectSp K ) ->  vector-distributive  scalar-distributive  scalar-associative  scalar-unital;
coherence
proof
set V = ( StructVectSp K );
now
let x being (Element of K),y being (Element of K);
let v being (Vector of V),w being (Vector of V);
reconsider v9 = v,w9 = w as (Element of K);
A1: ( (the lmult of V) . (x,w) ) = ( x * w ) by VECTSP_1:def 12;
thus ( x * ( v + w ) ) = ( x * ( v9 + w9 ) ) by VECTSP_1:def 12
.= ( ( x * v9 ) + ( x * w9 ) ) by VECTSP_1:def 7
.= ( ( x * v ) + ( x * w ) ) by A1,VECTSP_1:def 12;
A2: ( (the lmult of V) . (y,v) ) = ( y * v ) by VECTSP_1:def 12;
thus ( ( x + y ) * v ) = ( ( x + y ) * v9 ) by VECTSP_1:def 12
.= ( ( x * v9 ) + ( y * v9 ) ) by VECTSP_1:def 7
.= ( ( x * v ) + ( y * v ) ) by A2,VECTSP_1:def 12;
thus ( ( x * y ) * v ) = ( ( x * y ) * v9 ) by VECTSP_1:def 12
.= ( x * ( y * v9 ) ) by GROUP_1:def 3
.= ( (the lmult of V) . (x,( y * v )) ) by VECTSP_1:def 12
.= ( x * ( y * v ) ) by VECTSP_1:def 12;
thus ( ( 1. K ) * v ) = ( ( 1. K ) * v9 ) by VECTSP_1:def 12
.= v by VECTSP_1:def 8;
end;
hence thesis by VECTSP_1:def 14,VECTSP_1:def 15,VECTSP_1:def 16,VECTSP_1:def 17;
end;
end;
