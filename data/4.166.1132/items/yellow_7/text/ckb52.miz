environ
vocabularies ORDERS_2,ARYTM_0,RELAT_1,SUBSET_1,XXREAL_0,XBOOLE_0,RELAT_2,STRUCT_0,LATTICE3,YELLOW_0,EQREL_1,LATTICES,REWRITE1,WAYBEL_0,TARSKI,FINSET_1,XXREAL_2,XBOOLEAN,FUNCT_1,CAT_1,WELLORD1,SEQM_3,WAYBEL_1,PBOOLE,WAYBEL_5,FUNCT_6,FUNCOP_1,FINSEQ_4,YELLOW_2,ORDINAL2,CARD_3,ZFMISC_1,YELLOW_7,CARD_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,FUNCT_2,FINSET_1,CARD_3,FUNCT_6,PRALG_1,PBOOLE,FUNCOP_1,STRUCT_0,ORDERS_2,LATTICE3,YELLOW_0,YELLOW_2,WAYBEL_1,WAYBEL_0,WAYBEL_5,CKB1,CKB50;
definitions TARSKI,RELAT_2,ORDERS_2,LATTICE3,YELLOW_0,WAYBEL_0,WAYBEL_1,WAYBEL_5,XBOOLE_0,FUNCT_6,CKB50;
theorems RELAT_1,RELAT_2,FUNCT_1,FUNCT_2,CARD_3,ORDERS_2,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_2,WAYBEL_1,WAYBEL_5,PBOOLE,FUNCT_6,FUNCOP_1,PRALG_2,YELLOW_5,PRALG_1,XBOOLE_0,FUNCT_5,PARTFUN1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB49,CKB50;
schemes CLASSES1,FUNCT_2;
registrations RELSET_1,FUNCOP_1,FINSET_1,CARD_3,PBOOLE,STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,WAYBEL_1,WAYBEL_5,SUBSET_1,FUNCT_1,CARD_1,ORDINAL1,CKB9,CKB10,CKB11,CKB12,CKB23,CKB24,CKB25,CKB34,CKB46,CKB47,CKB48,CKB51;
constructors DOMAIN_1,LATTICE3,PRALG_1,PRALG_2,ORDERS_3,WAYBEL_1,WAYBEL_5,RELSET_1,CKB50;
requirements SUBSET,BOOLE,NUMERALS;
begin
registration
let L being  Boolean LATTICE;
cluster ( ComplMap L ) ->  isomorphic;
coherence
proof
set f = ( ComplMap L );
A1: ( dom f ) = (the carrier of L) by FUNCT_2:def 1;
A2: ( rng f ) = (the carrier of ( L opp ))
proof
thus ( rng f ) c= (the carrier of ( L opp ));
let x being set;
assume x in (the carrier of ( L opp ));
then reconsider x as (Element of L);
x = ( 'not' ( 'not' x ) ) by WAYBEL_1:87;
then ( f . ( 'not' x ) ) = x by CKB50:def 1;
hence thesis by A1,FUNCT_1:def 3;
end;
now
let x being (Element of L);
let y being (Element of L);
(( f . x ) = ( ( 'not' x ) ~ ) & ( f . y ) = ( ( 'not' y ) ~ )) by CKB50:def 1;
then A3: (( 'not' x ) >= ( 'not' y ) iff ( f . x ) <= ( f . y )) by LATTICE3:9;
(x = ( 'not' ( 'not' x ) ) & y = ( 'not' ( 'not' y ) )) by WAYBEL_1:87;
hence (x <= y iff ( f . x ) <= ( f . y )) by A3,WAYBEL_1:83;
end;
hence thesis by A2,WAYBEL_0:66;
end;
end;
