environ
vocabularies NUMBERS,AMI_3,AMI_1,FSM_1,ORDINAL1,CAT_1,XBOOLE_0,FUNCT_1,RELAT_1,FINSEQ_1,CARD_1,AMISTD_2,GRAPHSP,CARD_3,AMISTD_1,SUBSET_1,CIRCUIT2,FUNCT_4,FUNCOP_1,SETFAM_1,ZFMISC_1,XXREAL_0,TARSKI,ARYTM_3,GOBOARD5,FRECHET,ARYTM_1,INT_1,UNIALG_1,CARD_5,PARTFUN1,NAT_1,COMPOS_1,PBOOLE;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,CARD_1,ORDINAL1,NAT_1,NUMBERS,XCMPLX_0,INT_1,FUNCOP_1,PARTFUN1,PBOOLE,FINSEQ_1,FUNCT_4,XXREAL_0,MCART_1,VALUED_1,STRUCT_0,CARD_3,FUNCT_7,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,AMISTD_1,AMISTD_2;
definitions TARSKI,FUNCT_1,FUNCT_7,AMISTD_1,AMISTD_2,XBOOLE_0,AMI_3,FUNCOP_1,AMI_2,COMPOS_1,EXTPRO_1,CARD_3,NAT_1,MCART_1,MEMSTR_0;
theorems TARSKI,NAT_1,AMI_3,FUNCT_4,AMI_5,FUNCT_1,FUNCOP_1,SETFAM_1,AMISTD_1,MCART_1,FINSEQ_1,MEMSTR_0,FUNCT_7,CARD_3,XBOOLE_0,XBOOLE_1,NAT_D,RELAT_1,ORDINAL1,PARTFUN1,PBOOLE,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB28,CKB29,CKB31,CKB32,CKB34,CKB35,CKB37,CKB38,CKB48;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,NUMBERS,XREAL_0,NAT_1,INT_1,FINSEQ_1,CARD_3,AMI_3,AMISTD_2,RELSET_1,ZFMISC_1,FUNCT_2,FUNCT_4,VALUED_0,COMPOS_1,EXTPRO_1,PBOOLE,FUNCT_7,PRE_POLY,MEMSTR_0,CARD_1,CKB1,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB30,CKB33,CKB36,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58;
constructors XXREAL_0,NAT_1,NAT_D,ZFMISC_1,AMI_3,AMISTD_2,RELSET_1,RECDEF_2,MCART_1,VALUED_1,AMI_2,EXTPRO_1,AMISTD_1,PRE_POLY,DOMAIN_1,FUNCT_7,MEMSTR_0;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
reserve a for Data-Location;
reserve b for Data-Location;
reserve d1 for Data-Location;
reserve d2 for Data-Location;
reserve k for  natural number;
reserve k1 for  natural number;
registration
cluster ( SCM ) ->  homogeneous  with_explicit_jumps;
coherence
proof
thus ( SCM ) is  homogeneous
proof
let I being (Instruction of ( SCM )),J being (Instruction of ( SCM ));
assume that
A1: ( InsCode I ) = ( InsCode J );
A2: ((((((((J = [ ( 0 ),( {} ),( {} ) ] or (ex a st (ex b st J = ( a := b )))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k )))) by AMI_3:24;
per cases  by AMI_3:24;
suppose I = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A2,AMI_3:26,AMI_5:6,RECDEF_2:def 1;
end;
suppose (ex a st (ex b st I = ( a := b )));

then consider a,b such that A3: I = ( a := b );
A4: ( InsCode I ) = 1 by A3,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A3,AMI_3:26;
end;
suppose (ex a st (ex b st J = ( a := b )));

then consider d1,d2 such that A5: J = ( d1 := d2 );
thus ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by A3,RECDEF_2:def 2
.= ( dom ( JumpPart J ) ) by A5,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( AddTo (a,b) ))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A4,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex b st I = ( AddTo (a,b) )));

then consider a,b such that A6: I = ( AddTo (a,b) );
A7: ( InsCode I ) = 2 by A6,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A6,AMI_3:26;
end;
suppose (ex a st (ex b st J = ( AddTo (a,b) )));

then consider d1,d2 such that A8: J = ( AddTo (d1,d2) );
thus ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by A6,RECDEF_2:def 2
.= ( dom ( JumpPart J ) ) by A8,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A7,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex b st I = ( SubFrom (a,b) )));

then consider a,b such that A9: I = ( SubFrom (a,b) );
A10: ( InsCode I ) = 3 by A9,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A9,AMI_3:26;
end;
suppose (ex a st (ex b st J = ( SubFrom (a,b) )));

then consider d1,d2 such that A11: J = ( SubFrom (d1,d2) );
thus ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by A9,RECDEF_2:def 2
.= ( dom ( JumpPart J ) ) by A11,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A10,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex b st I = ( MultBy (a,b) )));

then consider a,b such that A12: I = ( MultBy (a,b) );
A13: ( InsCode I ) = 4 by A12,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A12,AMI_3:26;
end;
suppose (ex a st (ex b st J = ( MultBy (a,b) )));

then consider d1,d2 such that A14: J = ( MultBy (d1,d2) );
thus ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by A12,RECDEF_2:def 2
.= ( dom ( JumpPart J ) ) by A14,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A13,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex b st I = ( Divide (a,b) )));

then consider a,b such that A15: I = ( Divide (a,b) );
A16: ( InsCode I ) = 5 by A15,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A15,AMI_3:26;
end;
suppose (ex a st (ex b st J = ( Divide (a,b) )));

then consider d1,d2 such that A17: J = ( Divide (d1,d2) );
thus ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by A15,RECDEF_2:def 2
.= ( dom ( JumpPart J ) ) by A17,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A16,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex k st I = ( SCM-goto k ));

then consider k such that A18: I = ( SCM-goto k );
A19: ( InsCode I ) = 6 by A18,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A18,AMI_3:26,AMI_5:6,RECDEF_2:def 1;
end;
suppose (ex k st J = ( SCM-goto k ));

then consider k1 such that A20: J = ( SCM-goto k1 );
thus ( dom ( JumpPart I ) ) = ( dom <* k *> ) by A18,RECDEF_2:def 2
.= ( Seg 1 ) by FINSEQ_1:def 8
.= ( dom <* k1 *> ) by FINSEQ_1:def 8
.= ( dom ( JumpPart J ) ) by A20,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex a st (ex k st J = ( a =0_goto k )))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A19,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex k st I = ( a =0_goto k )));

then consider a,k such that A21: I = ( a =0_goto k );
A22: ( InsCode I ) = 7 by A21,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A21,AMI_3:26,AMI_5:6,RECDEF_2:def 1;
end;
suppose (ex d1 st (ex k st J = ( d1 =0_goto k )));

then consider d1,k1 such that A23: J = ( d1 =0_goto k1 );
thus ( dom ( JumpPart I ) ) = ( dom <* k *> ) by A21,RECDEF_2:def 2
.= ( Seg 1 ) by FINSEQ_1:38
.= ( dom <* k1 *> ) by FINSEQ_1:38
.= ( dom ( JumpPart J ) ) by A23,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a >0_goto k ))));

hence thesis by A1,A22,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
suppose (ex a st (ex k st I = ( a >0_goto k )));

then consider a,k such that A24: I = ( a >0_goto k );
A25: ( InsCode I ) = 8 by A24,RECDEF_2:def 1;
now
per cases  by AMI_3:24;
suppose J = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A1,A24,AMI_3:26,AMI_5:6,RECDEF_2:def 1;
end;
suppose (ex d1 st (ex k st J = ( d1 >0_goto k )));

then consider d1,k1 such that A26: J = ( d1 >0_goto k1 );
thus ( dom ( JumpPart I ) ) = ( dom <* k *> ) by A24,RECDEF_2:def 2
.= ( Seg 1 ) by FINSEQ_1:38
.= ( dom <* k1 *> ) by FINSEQ_1:38
.= ( dom ( JumpPart J ) ) by A26,RECDEF_2:def 2;
end;
suppose (((((((ex a st (ex b st J = ( a := b ))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex a st (ex b st J = ( Divide (a,b) )))) or (ex k st J = ( SCM-goto k ))) or (ex a st (ex k st J = ( a =0_goto k ))));

hence thesis by A1,A25,RECDEF_2:def 1;
end;
end;
hence thesis;
end;
end;

thus ( SCM ) is  with_explicit_jumps
proof
let I being (Instruction of ( SCM ));
thus ( JUMP I ) c= ( rng ( JumpPart I ) )
proof
let f being set;
assume that
A27: f in ( JUMP I );
per cases  by AMI_3:24;
suppose I = [ ( 0 ),( {} ),( {} ) ];

hence thesis by A27,AMI_3:26;
end;
suppose (ex a st (ex b st I = ( a := b )));

hence thesis by A27;
end;
suppose (ex a st (ex b st I = ( AddTo (a,b) )));

hence thesis by A27;
end;
suppose (ex a st (ex b st I = ( SubFrom (a,b) )));

hence thesis by A27;
end;
suppose (ex a st (ex b st I = ( MultBy (a,b) )));

hence thesis by A27;
end;
suppose (ex a st (ex b st I = ( Divide (a,b) )));

hence thesis by A27;
end;
suppose A28: (ex k st I = ( SCM-goto k ));

consider k1 such that A29: I = ( SCM-goto k1 ) by A28;
A30: ( JumpPart ( SCM-goto k1 ) ) = <* k1 *> by RECDEF_2:def 2;
A31: ( rng <* k1 *> ) = { k1 } by FINSEQ_1:39;
( JUMP ( SCM-goto k1 ) ) = { k1 } by CKB29:1;
hence thesis by A27,A29,A30,A31;
end;
suppose A32: (ex a st (ex k1 st I = ( a =0_goto k1 )));

consider a,k1 such that A33: I = ( a =0_goto k1 ) by A32;
A34: ( JumpPart ( a =0_goto k1 ) ) = <* k1 *> by RECDEF_2:def 2;
A35: ( rng <* k1 *> ) = { k1 } by FINSEQ_1:39;
( JUMP ( a =0_goto k1 ) ) = { k1 } by CKB32:1;
hence thesis by A27,A33,A34,A35;
end;
suppose A36: (ex a st (ex k1 st I = ( a >0_goto k1 )));

consider a,k1 such that A37: I = ( a >0_goto k1 ) by A36;
A38: ( JumpPart ( a >0_goto k1 ) ) = <* k1 *> by RECDEF_2:def 2;
A39: ( rng <* k1 *> ) = { k1 } by FINSEQ_1:39;
( JUMP ( a >0_goto k1 ) ) = { k1 } by CKB35:1;
hence thesis by A27,A37,A38,A39;
end;
end;

let f being set;
assume f in ( rng ( JumpPart I ) );
then consider k being set such that A40: k in ( dom ( JumpPart I ) ) and A41: f = ( ( JumpPart I ) . k ) by FUNCT_1:def 3;
per cases  by AMI_3:24;
suppose I = [ ( 0 ),( {} ),( {} ) ];

then ( dom ( JumpPart I ) ) = ( dom ( {} ) ) by RECDEF_2:def 2;
hence thesis by A40;
end;
suppose (ex a st (ex b st I = ( a := b )));

then consider a,b such that A42: I = ( a := b );
k in ( dom ( {} ) ) by A40,A42,RECDEF_2:def 2;
hence thesis;
end;
suppose (ex a st (ex b st I = ( AddTo (a,b) )));

then consider a,b such that A43: I = ( AddTo (a,b) );
k in ( dom ( {} ) ) by A40,A43,RECDEF_2:def 2;
hence thesis;
end;
suppose (ex a st (ex b st I = ( SubFrom (a,b) )));

then consider a,b such that A44: I = ( SubFrom (a,b) );
k in ( dom ( {} ) ) by A40,A44,RECDEF_2:def 2;
hence thesis;
end;
suppose (ex a st (ex b st I = ( MultBy (a,b) )));

then consider a,b such that A45: I = ( MultBy (a,b) );
k in ( dom ( {} ) ) by A40,A45,RECDEF_2:def 2;
hence thesis;
end;
suppose (ex a st (ex b st I = ( Divide (a,b) )));

then consider a,b such that A46: I = ( Divide (a,b) );
k in ( dom ( {} ) ) by A40,A46,RECDEF_2:def 2;
hence thesis;
end;
suppose (ex k st I = ( SCM-goto k ));

then consider k1 such that A47: I = ( SCM-goto k1 );
A48: ( JumpPart I ) = <* k1 *> by A47,RECDEF_2:def 2;
then k = 1 by A40,FINSEQ_1:90;
then A49: f = k1 by A48,A41,FINSEQ_1:def 8;
( JUMP I ) = { k1 } by A47,CKB29:1;
hence thesis by A49,TARSKI:def 1;
end;
suppose (ex a st (ex k st I = ( a =0_goto k )));

then consider a,k1 such that A50: I = ( a =0_goto k1 );
A51: ( JumpPart I ) = <* k1 *> by A50,RECDEF_2:def 2;
then k = 1 by A40,FINSEQ_1:90;
then A52: f = k1 by A51,A41,FINSEQ_1:40;
( JUMP I ) = { k1 } by A50,CKB32:1;
hence thesis by A52,TARSKI:def 1;
end;
suppose (ex a st (ex k1 st I = ( a >0_goto k1 )));

then consider a,k1 such that A53: I = ( a >0_goto k1 );
A54: ( JumpPart I ) = <* k1 *> by A53,RECDEF_2:def 2;
then k = 1 by A40,FINSEQ_1:90;
then A55: f = k1 by A54,A41,FINSEQ_1:40;
( JUMP I ) = { k1 } by A53,CKB35:1;
hence thesis by A55,TARSKI:def 1;
end;
end;

end;
end;
