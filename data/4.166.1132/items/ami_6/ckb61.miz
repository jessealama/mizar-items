environ
vocabularies NUMBERS,AMI_3,AMI_1,FSM_1,ORDINAL1,CAT_1,XBOOLE_0,FUNCT_1,RELAT_1,FINSEQ_1,CARD_1,AMISTD_2,GRAPHSP,CARD_3,AMISTD_1,SUBSET_1,CIRCUIT2,FUNCT_4,FUNCOP_1,SETFAM_1,ZFMISC_1,XXREAL_0,TARSKI,ARYTM_3,GOBOARD5,FRECHET,ARYTM_1,INT_1,UNIALG_1,CARD_5,PARTFUN1,NAT_1,COMPOS_1,PBOOLE;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,CARD_1,ORDINAL1,NAT_1,NUMBERS,XCMPLX_0,INT_1,FUNCOP_1,PARTFUN1,PBOOLE,FINSEQ_1,FUNCT_4,XXREAL_0,MCART_1,VALUED_1,STRUCT_0,CARD_3,FUNCT_7,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,AMISTD_1,AMISTD_2;
definitions TARSKI,FUNCT_1,FUNCT_7,AMISTD_1,AMISTD_2,XBOOLE_0,AMI_3,FUNCOP_1,AMI_2,COMPOS_1,EXTPRO_1,CARD_3,NAT_1,MCART_1,MEMSTR_0;
theorems TARSKI,NAT_1,AMI_3,FUNCT_4,AMI_5,FUNCT_1,FUNCOP_1,SETFAM_1,AMISTD_1,MCART_1,FINSEQ_1,MEMSTR_0,FUNCT_7,CARD_3,XBOOLE_0,XBOOLE_1,NAT_D,RELAT_1,ORDINAL1,PARTFUN1,PBOOLE,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB28,CKB29,CKB31,CKB32,CKB34,CKB35,CKB37,CKB38,CKB48;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,NUMBERS,XREAL_0,NAT_1,INT_1,FINSEQ_1,CARD_3,AMI_3,AMISTD_2,RELSET_1,ZFMISC_1,FUNCT_2,FUNCT_4,VALUED_0,COMPOS_1,EXTPRO_1,PBOOLE,FUNCT_7,PRE_POLY,MEMSTR_0,CARD_1,CKB1,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB30,CKB33,CKB36,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60;
constructors XXREAL_0,NAT_1,NAT_D,ZFMISC_1,AMI_3,AMISTD_2,RELSET_1,RECDEF_2,MCART_1,VALUED_1,AMI_2,EXTPRO_1,AMISTD_1,PRE_POLY,DOMAIN_1,FUNCT_7,MEMSTR_0;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
reserve i1 for (Element of ( NAT ));
reserve k for  natural number;
theorem
Th59: ( IncAddr (( SCM-goto i1 ),k) ) = ( SCM-goto ( i1 + k ) )
proof
A1: ( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) = ( k + ( JumpPart ( SCM-goto i1 ) ) ) by COMPOS_1:def 17;
then A2: ( dom ( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) ) = ( dom ( JumpPart ( SCM-goto i1 ) ) ) by VALUED_1:def 2;
A3: ( dom ( JumpPart ( SCM-goto ( i1 + k ) ) ) ) = ( dom <* ( i1 + k ) *> ) by RECDEF_2:def 2
.= ( Seg 1 ) by FINSEQ_1:def 8
.= ( dom <* i1 *> ) by FINSEQ_1:def 8
.= ( dom ( JumpPart ( SCM-goto i1 ) ) ) by RECDEF_2:def 2;
A4: (for x being set holds (x in ( dom ( JumpPart ( SCM-goto i1 ) ) ) implies ( ( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) . x ) = ( ( JumpPart ( SCM-goto ( i1 + k ) ) ) . x )))
proof
let x being set;
assume A5: x in ( dom ( JumpPart ( SCM-goto i1 ) ) );
then x in ( dom <* i1 *> ) by RECDEF_2:def 2;
then A6: x = 1 by FINSEQ_1:90;
set f = ( ( JumpPart ( SCM-goto i1 ) ) . x );
A7: ( ( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) . x ) = ( k + f ) by A5,A2,A1,VALUED_1:def 2;
f = ( <* i1 *> . x ) by RECDEF_2:def 2
.= i1 by A6,FINSEQ_1:def 8;
hence ( ( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) . x ) = ( <* ( i1 + k ) *> . x ) by A6,A7,FINSEQ_1:def 8
.= ( ( JumpPart ( SCM-goto ( i1 + k ) ) ) . x ) by RECDEF_2:def 2;
end;
A8: ( AddressPart ( IncAddr (( SCM-goto i1 ),k) ) ) = ( AddressPart ( SCM-goto i1 ) ) by COMPOS_1:def 17
.= ( {} ) by RECDEF_2:def 3
.= ( AddressPart ( SCM-goto ( i1 + k ) ) ) by RECDEF_2:def 3;
A9: ( InsCode ( IncAddr (( SCM-goto i1 ),k) ) ) = ( InsCode ( SCM-goto i1 ) ) by COMPOS_1:def 17
.= 6 by RECDEF_2:def 1
.= ( InsCode ( SCM-goto ( i1 + k ) ) ) by RECDEF_2:def 1;
( JumpPart ( IncAddr (( SCM-goto i1 ),k) ) ) = ( JumpPart ( SCM-goto ( i1 + k ) ) ) by A2,A3,A4,FUNCT_1:2;
hence thesis by A8,A9,COMPOS_1:1;
end;
