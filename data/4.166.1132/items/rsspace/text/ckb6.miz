environ
vocabularies NUMBERS,XBOOLE_0,SEQ_1,FUNCT_2,TARSKI,REAL_1,BINOP_1,SUBSET_1,FUNCT_1,ARYTM_3,ZFMISC_1,VALUED_1,CARD_1,FUNCOP_1,NAT_1,RLVECT_1,RELAT_1,SUPINF_2,ARYTM_1,STRUCT_0,ALGSTR_0,XREAL_0,ORDINAL1,RLSUB_1,REALSET1,SERIES_1,XXREAL_0,SQUARE_1,CARD_3,BHSP_1,COMPLEX1,SEQ_2,ORDINAL2,XXREAL_2,VALUED_0,RSSPACE;
notations TARSKI,SUBSET_1,XBOOLE_0,ZFMISC_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,STRUCT_0,ALGSTR_0,REAL_1,NAT_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,REALSET1,FUNCOP_1,RLVECT_1,RLSUB_1,BHSP_1,SQUARE_1,VALUED_1,SEQ_1,SEQ_2,SERIES_1,BINOP_1,CKB1,CKB2,CKB3,CKB4,CKB5;
definitions SQUARE_1,BINOP_1,TARSKI,RLVECT_1,XBOOLE_0,REALSET1,STRUCT_0,ALGSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5;
theorems XBOOLE_0,RELAT_1,TARSKI,ABSVALUE,ZFMISC_1,SEQ_1,SEQ_2,SEQM_3,SERIES_1,COMSEQ_3,INT_1,FUNCT_1,NAT_1,FUNCT_2,RLVECT_1,RLSUB_1,SEQ_4,BINOP_1,FUNCOP_1,XREAL_1,ORDINAL1,ALGSTR_0,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB5;
schemes NAT_1,BINOP_1,XBOOLE_0,BINOP_2;
registrations ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,REALSET1,STRUCT_0,RLVECT_1,BHSP_1,ALGSTR_0,VALUED_1,FUNCT_2,VALUED_0;
constructors PARTFUN1,BINOP_1,FUNCOP_1,REAL_1,SQUARE_1,NAT_1,NAT_D,SEQ_2,SEQM_3,SERIES_1,REALSET1,RLSUB_1,BHSP_1,SEQ_1,VALUED_1,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB5;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
definition
func Zeroseq -> (Element of ( the_set_of_RealSequences ))
means
:Def6: (for n being (Element of ( NAT )) holds ( ( seq_id it ) . n ) = ( 0 ));
existence
proof
reconsider zeroseq = ( ( NAT ) --> ( 0 ) ) as Real_Sequence by FUNCOP_1:45;
zeroseq in ( the_set_of_RealSequences ) by CKB1:def 1;
then A1: ( seq_id zeroseq ) = zeroseq by CKB2:def 1;
reconsider zeroseq as (Element of ( the_set_of_RealSequences )) by CKB1:def 1;
take zeroseq;
let n being Nat;
thus thesis by A1,FUNCOP_1:7;
end;
uniqueness
proof
let x being (Element of ( the_set_of_RealSequences )),y being (Element of ( the_set_of_RealSequences ));
assume that
A2: (for n being (Element of ( NAT )) holds ( ( seq_id x ) . n ) = ( 0 ))
and
A3: (for n being (Element of ( NAT )) holds ( ( seq_id y ) . n ) = ( 0 ));
A4: (for s being set holds (s in ( NAT ) implies ( ( seq_id x ) . s ) = ( ( seq_id y ) . s )))
proof
let s being set;
assume A5: s in ( NAT );
then ( ( seq_id y ) . s ) = ( 0 ) by A3;
hence thesis by A2,A5;
end;
x = ( seq_id x ) by CKB2:def 1
.= ( seq_id y ) by A4,FUNCT_2:12;
hence thesis by CKB2:def 1;
end;
end;
