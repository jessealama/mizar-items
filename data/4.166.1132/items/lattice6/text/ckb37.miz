environ
vocabularies FINSET_1,LATTICES,LATTICE3,XBOOLE_0,STRUCT_0,ZFMISC_1,SUBSET_1,XXREAL_0,NUMBERS,FINSEQ_1,RELAT_1,ARYTM_3,CARD_1,FUNCT_1,TARSKI,ORDERS_2,FILTER_1,EQREL_1,PBOOLE,REWRITE1,WELLORD1,WAYBEL_6,RELAT_2,ZF_LANG,BINOP_1,LATTICE6;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XXREAL_0,RELAT_1,FUNCT_1,NAT_1,BINOP_1,FINSET_1,WELLORD1,WAYBEL_6,STRUCT_0,LATTICES,LATTICE3,ORDERS_2,FINSEQ_1,WELLFND1,YELLOW_0,LATTICE2,CKB8,CKB9,CKB12,CKB13,CKB20,CKB21,CKB29,CKB30,CKB31,CKB32;
definitions WELLFND1,WELLORD1,CKB8,CKB9,CKB12,CKB13,CKB20,CKB29,CKB30,CKB31,CKB32;
theorems TARSKI,FUNCT_1,LATTICES,LATTICE3,ORDERS_2,VECTSP_8,FINSEQ_1,WAYBEL_6,NAT_1,INT_1,RELAT_1,YELLOW_0,WELLORD1,WELLFND1,REALSET1,XBOOLE_0,XXREAL_0,STRUCT_0,CARD_1,ZFMISC_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB11,CKB12,CKB13,CKB16,CKB17,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36;
schemes NAT_1,WELLFND1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FINSET_1,XREAL_0,INT_1,FINSEQ_1,FINSEQ_6,STRUCT_0,LATTICES,ORDERS_2,LATTICE2,LATTICE3,WAYBEL_0,KNASTER,YELLOW_1,ORDINAL1,ZFMISC_1,CARD_1,CKB1,CKB7,CKB10,CKB14,CKB15,CKB18,CKB19;
constructors WELLORD1,BINOP_1,REAL_1,REALSET2,LATTICE2,WAYBEL_0,WAYBEL_6,WELLFND1,RELSET_1,CKB8,CKB9,CKB12,CKB13,CKB20,CKB29,CKB30,CKB31,CKB32;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th13: (for L being  complete Lattice holds (for a being (Element of L) holds (a is  completely-join-irreducible implies (( *' a ) is-lower-neighbour-of a & (for c being (Element of L) holds (c is-lower-neighbour-of a implies c = ( *' a )))))))
proof
let L being  complete Lattice;
let a being (Element of L);
set X = { x where x is (Element of L): (x [= a & x <> a) };
A1: (for c being (Element of L) holds ((( *' a ) [= c & c [= a) implies (c = a or c = ( *' a ))))
proof
let c being (Element of L);
assume that
A2: ( *' a ) [= c
and
A3: c [= a;
assume c <> a;
then c in X by A3;
then c [= ( *' a ) by LATTICE3:38;
hence thesis by A2,LATTICES:8;
end;
assume a is  completely-join-irreducible;
then A4: ( *' a ) <> a by CKB32:def 1;
A5: (for c being (Element of L) holds (c is-lower-neighbour-of a implies c = ( *' a )))
proof
let c being (Element of L);
assume A6: c is-lower-neighbour-of a;
then (a <> c & c [= a) by CKB20:def 1;
then c in X;
then A7: c [= ( *' a ) by LATTICE3:38;
( *' a ) [= a by CKB33:1;
hence thesis by A4,A6,A7,CKB20:def 1;
end;
( *' a ) [= a by CKB33:1;
hence thesis by A4,A1,A5,CKB20:def 1;
end;
