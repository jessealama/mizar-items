environ
vocabularies NUMBERS,RLVECT_1,REAL_1,CARD_1,ARYTM_3,RELAT_1,ARYTM_1,SUPINF_2,STRUCT_0,ZFMISC_1,XBOOLE_0,SUBSET_1,ANALOAF;
notations TARSKI,XBOOLE_0,ZFMISC_1,DOMAIN_1,XXREAL_0,REAL_1,RELSET_1,NUMBERS,STRUCT_0,RLVECT_1,CKB1,CKB24,CKB26;
definitions STRUCT_0,RLVECT_1,CKB1,CKB26;
theorems RLVECT_1,ZFMISC_1,RELAT_1,FUNCSDOM,RLSUB_2,XCMPLX_0,XCMPLX_1,XREAL_1,STRUCT_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB26;
schemes RELSET_1;
registrations SUBSET_1,RELSET_1,XXREAL_0,MEMBERED,STRUCT_0,XBOOLE_0,ZFMISC_1,CKB24,CKB25;
constructors XXREAL_0,REAL_1,MEMBERED,DOMAIN_1,RLVECT_1,CKB1,CKB24,CKB26;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve V for RealLinearSpace;
reserve u for (VECTOR of V);
reserve v for (VECTOR of V);
reserve w for (VECTOR of V);
reserve y for (VECTOR of V);
reserve x for set;
reserve z for set;
definition
let V;
func DirPar V -> (Relation of [: (the carrier of V),(the carrier of V) :]) means 
:Def3: ([ x,z ] in it iff (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y))))));
existence
proof
defpred P[ set,set ]
 means
(ex u st (ex v st (ex w st (ex y st (($1 = [ u,v ] & $2 = [ w,y ]) & u,v // w,y)))));
set VV = [: (the carrier of V),(the carrier of V) :];
consider P being (Relation of VV,VV) such that A1: ([ x,z ] in P iff ((x in VV & z in VV) & P[ x,z ])) from RELSET_1:sch 1;
take P;
let x;
let z;
thus ([ x,z ] in P implies (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y)))))) by A1;
assume (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y)))));
hence thesis by A1;
end;
uniqueness
proof
let P being (Relation of [: (the carrier of V),(the carrier of V) :]);
let Q being (Relation of [: (the carrier of V),(the carrier of V) :]);
assume that
A2: ([ x,z ] in P iff (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y))))))
and
A3: ([ x,z ] in Q iff (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y))))));
(for x holds (for z holds ([ x,z ] in P iff [ x,z ] in Q)))
proof
let x;
let z;
([ x,z ] in P iff (ex u st (ex v st (ex w st (ex y st ((x = [ u,v ] & z = [ w,y ]) & u,v // w,y)))))) by A2;
hence thesis by A3;
end;
hence thesis by RELAT_1:def 2;
end;
end;
