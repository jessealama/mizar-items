environ
vocabularies BINOP_1,VECTSP_1,XBOOLE_0,ALGSTR_0,SUBSET_1,MESFUNC1,RELAT_1,LATTICES,ARYTM_3,FUNCSDOM,VECTSP_2,REAL_1,SUPINF_2,CARD_1,STRUCT_0,RLVECT_1,ARYTM_1,GROUP_1,EQREL_1,TARSKI,SETFAM_1,MSSUBFAM,INT_2,GCD_1;
notations TARSKI,XBOOLE_0,SUBSET_1,REAL_1,NUMBERS,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_2,VECTSP_1,FUNCSDOM,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB33,CKB36,CKB39,CKB40,CKB44,CKB47,CKB49;
definitions VECTSP_1,VECTSP_2,XBOOLE_0,CKB8,CKB10,CKB11,CKB14,CKB33,CKB36,CKB39,CKB40,CKB44,CKB47,CKB49;
theorems TARSKI,WELLORD2,SUBSET_1,VECTSP_1,VECTSP_2,RLVECT_1,XBOOLE_0,XCMPLX_1,GROUP_1,STRUCT_0,CKB7,CKB8,CKB10,CKB11,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49;
schemes SUBSET_1;
registrations XBOOLE_0,SUBSET_1,MEMBERED,STRUCT_0,VECTSP_1,MONOID_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB34,CKB37,CKB50,CKB51;
constructors BINOP_2,VECTSP_2,MONOID_0,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB33,CKB36,CKB39,CKB40,CKB44,CKB47,CKB49;
requirements SUBSET,BOOLE;
begin
Lm1:now
let F being Field;
let x being (Element of F);
let y being (Element of F);
now
per cases ;
case A1: (x <> ( 0. F ) & y <> ( 0. F ));
A2: (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides ( 1_ F )))
proof
let zz being (Element of F);
assume that
A3: zz divides x
and
zz divides y;
now
per cases ;
case zz <> ( 0. F );
then (ex zz9 being (Element of F) st ( zz9 * zz ) = ( 1_ F )) by VECTSP_1:def 9;
hence thesis by CKB8:def 1;
end;
case A4: zz = ( 0. F );
assume zz divides x;
then (ex d being (Element of F) st ( zz * d ) = x) by CKB8:def 1;
hence thesis by A1,A4,VECTSP_1:7;
end;
end;
hence thesis by A3;
end;
y = ( ( 1_ F ) * y ) by VECTSP_1:def 6;
then A5: ( 1_ F ) divides y by CKB8:def 1;
x = ( ( 1_ F ) * x ) by VECTSP_1:def 6;
then ( 1_ F ) divides x by CKB8:def 1;
hence (ex z being (Element of F) st ((z divides x & z divides y) & (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides z)))) by A5,A2;
end;
case A6: x = ( 0. F );
( y * ( 0. F ) ) = ( 0. F ) by VECTSP_1:7;
then A7: y divides ( 0. F ) by CKB8:def 1;
(for z being (Element of F) holds ((z divides ( 0. F ) & z divides y) implies z divides y));
hence (ex z being (Element of F) st ((z divides x & z divides y) & (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides z)))) by A6,A7;
end;
case A8: y = ( 0. F );
( x * ( 0. F ) ) = ( 0. F ) by VECTSP_1:7;
then A9: x divides ( 0. F ) by CKB8:def 1;
(for z being (Element of F) holds ((z divides x & z divides ( 0. F )) implies z divides x));
hence (ex z being (Element of F) st ((z divides x & z divides y) & (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides z)))) by A8,A9;
end;
end;
hence (ex z being (Element of F) st ((z divides x & z divides y) & (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides z))));
end;
registration
cluster  gcd-like  associative  commutative  well-unital for non  empty non  empty multLoopStr_0;
existence
proof
set F = the  strict Field;
(for x,y being (Element of F) holds (ex z being (Element of F) st ((z divides x & z divides y) & (for zz being (Element of F) holds ((zz divides x & zz divides y) implies zz divides z))))) by Lm1;
then F is  gcd-like by CKB49:def 1;
hence thesis;
end;
end;
