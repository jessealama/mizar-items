environ
vocabularies BINOP_1,VECTSP_1,XBOOLE_0,ALGSTR_0,SUBSET_1,MESFUNC1,RELAT_1,LATTICES,ARYTM_3,FUNCSDOM,VECTSP_2,REAL_1,SUPINF_2,CARD_1,STRUCT_0,RLVECT_1,ARYTM_1,GROUP_1,EQREL_1,TARSKI,SETFAM_1,MSSUBFAM,INT_2,GCD_1;
notations TARSKI,XBOOLE_0,SUBSET_1,REAL_1,NUMBERS,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_2,VECTSP_1,FUNCSDOM,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB33,CKB36,CKB39;
definitions VECTSP_1,VECTSP_2,XBOOLE_0,CKB8,CKB10,CKB11,CKB14,CKB33,CKB36,CKB39;
theorems TARSKI,WELLORD2,SUBSET_1,VECTSP_1,VECTSP_2,RLVECT_1,XBOOLE_0,XCMPLX_1,GROUP_1,STRUCT_0,CKB7,CKB8,CKB10,CKB11,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB38,CKB39;
schemes SUBSET_1;
registrations XBOOLE_0,SUBSET_1,MEMBERED,STRUCT_0,VECTSP_1,MONOID_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB34,CKB37;
constructors BINOP_2,VECTSP_2,MONOID_0,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB33,CKB36,CKB39;
requirements SUBSET,BOOLE;
begin
reserve R for  domRing-like  commutative Ring;
definition
let R being  associative  well-unital non  empty multLoopStr;
mode AmpleSet of R
 -> non  empty (Subset of R)
means :Def8: (it is (Am of R) & ( 1. R ) in it);
existence
proof
now
let A being (Am of R);
consider x being (Element of A) such that A1: x is_associated_to ( 1. R ) by CKB39:def 1;
set A9 = ( { z where z is (Element of A): z <> x } \/ { ( 1. R ) } );
( 1. R ) in { ( 1. R ) } by TARSKI:def 1;
then A2: ( 1. R ) in A9 by XBOOLE_0:def 3;
reconsider A9 as non  empty set;
A3: (for x being (Element of A9) holds (x = ( 1. R ) or x in A))
proof
let y being (Element of A9);
now
per cases  by XBOOLE_0:def 3;
case y in { z where z is (Element of A): z <> x };
then (ex zz being (Element of A) st (y = zz & zz <> x));
hence thesis;
end;
case y in { ( 1. R ) };
hence thesis by TARSKI:def 1;
end;
end;
hence thesis;
end;
now
let x being set;
now
assume A4: x in A9;
x in (the carrier of R)
proof
now
per cases  by A3,A4;
case x = ( 1. R );
hence thesis;
end;
case x in A;
hence thesis;
end;
end;
hence thesis;
end;
hence (x in A9 implies x in (the carrier of R));
end;
hence (x in A9 implies x in (the carrier of R));
end;
then reconsider A9 as non  empty (Subset of R) by TARSKI:def 3;
A5: (for z,y being (Element of A9) holds (z <> y implies z is_not_associated_to y))
proof
let z being (Element of A9);
let y being (Element of A9);
assume A6: z <> y;
now
per cases ;
case (z = ( 1. R ) & y = ( 1. R ));
hence thesis by A6;
end;
case A7: (z = ( 1. R ) & y <> ( 1. R ));
assume z is_associated_to y;
(not y in { ( 1. R ) }) by A7,TARSKI:def 1;
then y in { zz where zz is (Element of A): zz <> x } by XBOOLE_0:def 3;
then (ex zz being (Element of A) st (y = zz & zz <> x));
hence thesis by A1,A7,CKB39:def 1,CKB17:1;
end;
case A8: (z <> ( 1. R ) & y = ( 1. R ));
assume z is_associated_to y;
(not z in { ( 1. R ) }) by A8,TARSKI:def 1;
then z in { zz where zz is (Element of A): zz <> x } by XBOOLE_0:def 3;
then (ex zz being (Element of A) st (z = zz & zz <> x));
hence thesis by A1,A8,CKB39:def 1,CKB17:1;
end;
case (z <> ( 1. R ) & y <> ( 1. R ));
then (z in A & y in A) by A3;
hence thesis by A6,CKB39:def 1;
end;
end;
hence thesis;
end;
(for a being (Element of R) holds (ex z being (Element of A9) st z is_associated_to a))
proof
let a being (Element of R);
now
per cases ;
case a is_associated_to ( 1. R );
hence thesis by A2;
end;
case A9: a is_not_associated_to ( 1. R );
consider z being (Element of A) such that A10: z is_associated_to a by CKB39:def 1;
z <> x by A1,A9,A10,CKB17:1;
then z in { zz where zz is (Element of A): zz <> x };
then z in A9 by XBOOLE_0:def 3;
hence thesis by A10;
end;
end;
hence thesis;
end;
then A9 is (Am of R) by A5,CKB39:def 1;
hence thesis by A2;
end;
hence thesis;
end;
end;
