environ
vocabularies BINOP_1,VECTSP_1,XBOOLE_0,ALGSTR_0,SUBSET_1,MESFUNC1,RELAT_1,LATTICES,ARYTM_3,FUNCSDOM,VECTSP_2,REAL_1,SUPINF_2,CARD_1,STRUCT_0,RLVECT_1,ARYTM_1,GROUP_1,EQREL_1,TARSKI,SETFAM_1,MSSUBFAM,INT_2,GCD_1;
notations TARSKI,XBOOLE_0,SUBSET_1,REAL_1,NUMBERS,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_2,VECTSP_1,FUNCSDOM;
definitions VECTSP_1,VECTSP_2,XBOOLE_0;
theorems TARSKI,WELLORD2,SUBSET_1,VECTSP_1,VECTSP_2,RLVECT_1,XBOOLE_0,XCMPLX_1,GROUP_1,STRUCT_0;
schemes SUBSET_1;
registrations XBOOLE_0,SUBSET_1,MEMBERED,STRUCT_0,VECTSP_1,MONOID_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
constructors BINOP_2,VECTSP_2,MONOID_0;
requirements SUBSET,BOOLE;
begin
reserve R for  domRing-like  commutative Ring;
reserve c for (Element of R);
theorem
Th1: (for R being  domRing-like  commutative Ring holds (for a,b,c being (Element of R) holds (a <> ( 0. R ) implies ((( a * b ) = ( a * c ) implies b = c) & (( b * a ) = ( c * a ) implies b = c)))))
proof
let R being  domRing-like  commutative Ring;
let a being (Element of R);
let b being (Element of R);
let c being (Element of R);
assume A1: a <> ( 0. R );
now
assume ( a * b ) = ( a * c );
then ( 0. R ) = ( ( a * b ) + ( - ( a * c ) ) ) by RLVECT_1:def 10
.= ( ( a * b ) + ( a * ( - c ) ) ) by VECTSP_1:8
.= ( a * ( b + ( - c ) ) ) by VECTSP_1:def 2
.= ( a * ( b - c ) ) by RLVECT_1:def 11;
then ( b - c ) = ( 0. R ) by A1,VECTSP_2:def 1;
then c = ( ( b - c ) + c ) by RLVECT_1:4
.= ( ( b + ( - c ) ) + c ) by RLVECT_1:def 11
.= ( b + ( c + ( - c ) ) ) by RLVECT_1:def 3
.= ( b + ( 0. R ) ) by RLVECT_1:def 10
.= b by RLVECT_1:4;
hence b = c;
end;
hence thesis;
end;
