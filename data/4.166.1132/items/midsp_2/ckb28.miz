environ
vocabularies XBOOLE_0,ALGSTR_0,SUBSET_1,MIDSP_1,PRE_TOPC,FUNCT_1,ZFMISC_1,STRUCT_0,ROBBINS1,ARYTM_3,QC_LANG1,RLVECT_1,SUPINF_2,ARYTM_1,VECTSP_1,RLVECT_2,BINOP_1,MIDSP_2;
notations XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_2,BINOP_1,DOMAIN_1,STRUCT_0,ALGSTR_0,PRE_TOPC,RLVECT_1,VECTSP_1,MIDSP_1,CKB1,CKB2,CKB4,CKB5,CKB22,CKB27;
definitions STRUCT_0,VECTSP_1,CKB1,CKB2,CKB4,CKB5,CKB22,CKB27;
theorems BINOP_1,MIDSP_1,RLVECT_1,VECTSP_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB25,CKB26,CKB27;
schemes BINOP_1;
registrations XBOOLE_0,RELSET_1,STRUCT_0,VECTSP_1,MIDSP_1,CKB19,CKB23,CKB24;
constructors BINOP_1,DOMAIN_1,VECTSP_1,MIDSP_1,RLVECT_1,CKB1,CKB2,CKB4,CKB5,CKB22,CKB27;
requirements SUBSET,BOOLE;
begin
reserve G for  midpoint_operator  add-associative  right_zeroed  right_complementable  Abelian non empty addLoopStr;
reserve x for (Element of G);
reserve y for (Element of G);
theorem
(((( Half ( 0. G ) ) = ( 0. G ) & ( Half ( x + y ) ) = ( ( Half x ) + ( Half y ) )) & (( Half x ) = ( Half y ) implies x = y)) & ( Half ( Double x ) ) = x)
proof
( Double ( 0. G ) ) = ( 0. G ) by RLVECT_1:def 4;
hence ( Half ( 0. G ) ) = ( 0. G ) by CKB27:def 1;
( Double ( ( Half x ) + ( Half y ) ) ) = ( ( Double ( Half x ) ) + ( Double ( Half y ) ) ) by CKB14:1
.= ( x + ( Double ( Half y ) ) ) by CKB27:def 1
.= ( x + y ) by CKB27:def 1;
hence ( Half ( x + y ) ) = ( ( Half x ) + ( Half y ) ) by CKB27:def 1;
thus (( Half x ) = ( Half y ) implies x = y)
proof
assume ( Half x ) = ( Half y );
hence x = ( Double ( Half y ) ) by CKB27:def 1
.= y by CKB27:def 1;
end;

thus thesis by CKB27:def 1;
end;
