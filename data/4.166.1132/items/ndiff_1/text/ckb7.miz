environ
vocabularies NUMBERS,SUBSET_1,REAL_1,NORMSP_1,SEQ_1,NAT_1,PRE_TOPC,RCOMP_1,TARSKI,CARD_1,ARYTM_3,ARYTM_1,XXREAL_0,RELAT_1,FUNCT_1,SEQ_2,ORDINAL2,STRUCT_0,VALUED_0,SUPINF_2,RLVECT_1,VALUED_1,XREAL_0,ORDINAL1,COMPLEX1,XXREAL_2,FDIFF_1,ZFMISC_1,PARTFUN1,FUNCOP_1,FUNCT_2,LOPBAN_1,XBOOLE_0,FCONT_1,RSSPACE,NFCONT_1,CFCONT_1,LOPBAN_2;
notations TARSKI,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,PRE_TOPC,XXREAL_0,XREAL_0,COMPLEX1,ORDINAL1,NUMBERS,REAL_1,NAT_1,RLVECT_1,STRUCT_0,FUNCOP_1,VALUED_0,VALUED_1,SEQ_1,SEQ_2,SQUARE_1,VFUNCT_1,NORMSP_0,NORMSP_1,RSSPACE,LOPBAN_1,LOPBAN_2,NFCONT_1,FDIFF_1,RECDEF_1,CKB6;
definitions TARSKI,XBOOLE_0,NFCONT_1,NORMSP_1,BHSP_3,RLVECT_1,SUBSET_1,VALUED_1,STRUCT_0,CKB6;
theorems TARSKI,ABSVALUE,XBOOLE_0,XBOOLE_1,SUBSET_1,RELSET_1,RLVECT_1,XCMPLX_0,XCMPLX_1,ZFMISC_1,XREAL_0,FUNCOP_1,SEQ_1,SEQ_2,NAT_1,SEQM_3,RELAT_1,FUNCT_1,VFUNCT_1,FUNCT_2,SEQ_4,NORMSP_1,LOPBAN_1,LOPBAN_2,LOPBAN_3,PARTFUN1,PARTFUN2,NFCONT_1,FDIFF_1,XREAL_1,COMPLEX1,XXREAL_0,ORDINAL1,VALUED_1,STRUCT_0,VALUED_0,GRCAT_1,NORMSP_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
schemes NAT_1,SEQ_1,RECDEF_1,FUNCT_2;
registrations FUNCT_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,FDIFF_1,STRUCT_0,LOPBAN_1,LOPBAN_2,VALUED_0,VALUED_1,FUNCT_2,FUNCOP_1;
constructors PARTFUN1,REAL_1,SQUARE_1,NAT_1,COMPLEX1,SEQ_2,PARTFUN2,FDIFF_1,BHSP_3,RSSPACE,VFUNCT_1,LOPBAN_3,NFCONT_1,SEQ_1,VALUED_1,RECDEF_1,NORMSP_1,RELSET_1,BINOP_2,RVSUM_1;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
reserve x for set;
reserve y for set;
reserve S for RealNormSpace;
reserve seq for (sequence of S);
theorem
Th6: (seq is  non-zero iff (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0. S ))))
proof
thus (seq is  non-zero implies (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0. S ))))
proof
assume seq is  non-zero;
then A1: ( rng seq ) c= ( NonZero S ) by CKB6:def 1;
let x;
assume x in ( NAT );
then x in ( dom seq ) by FUNCT_2:def 1;
then ( seq . x ) in ( rng seq ) by FUNCT_1:def 3;
then (not ( seq . x ) in { ( 0. S ) }) by A1,XBOOLE_0:def 5;
hence thesis by TARSKI:def 1;
end;

assume A2: (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0. S )));
now
let y;
assume A3: y in ( rng seq );
then (ex x st (x in ( dom seq ) & ( seq . x ) = y)) by FUNCT_1:def 3;
then y <> ( 0. S ) by A2;
then (not y in { ( 0. S ) }) by TARSKI:def 1;
hence y in ( NonZero S ) by A3,XBOOLE_0:def 5;
end;
then ( rng seq ) c= ( NonZero S ) by TARSKI:def 3;
hence thesis by CKB6:def 1;
end;
