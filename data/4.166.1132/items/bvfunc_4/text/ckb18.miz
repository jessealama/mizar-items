environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,MARGREL1,PARTIT1,BVFUNC_1,XBOOLEAN,FUNCT_1,RELAT_1,TARSKI,EQREL_1,BVFUNC_2;
notations TARSKI,XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,RELAT_1,FUNCT_1,FUNCT_2,EQREL_1,BVFUNC_1,BVFUNC_2;
definitions BVFUNC_1,XBOOLEAN,BVFUNC_2;
theorems FUNCT_1,FUNCT_2,BVFUNC_1,BVFUNC_2,MARGREL1,XBOOLEAN,EQREL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
registrations XBOOLE_0,XBOOLEAN,MARGREL1;
constructors BINARITH,BVFUNC_1,BVFUNC_2;
requirements SUBSET,BOOLE,ARITHM;
begin
reserve Y for non  empty set;
theorem
(for a,u being (Element of ( Funcs (Y,( BOOLEAN )) )) holds (for G being (Subset of ( PARTITIONS Y )) holds (for PA being (a_partition of Y) holds (( a 'imp' u ) = ( I_el Y ) implies ( ( All (a,PA,G) ) 'imp' u ) = ( I_el Y )))))
proof
let a being (Element of ( Funcs (Y,( BOOLEAN )) ));
let u being (Element of ( Funcs (Y,( BOOLEAN )) ));
let G being (Subset of ( PARTITIONS Y ));
let PA being (a_partition of Y);
assume A1: ( a 'imp' u ) = ( I_el Y );
(for x being (Element of Y) holds ( ( ( All (a,PA,G) ) 'imp' u ) . x ) = ( TRUE ))
proof
let x being (Element of Y);
( ( a 'imp' u ) . x ) = ( TRUE ) by A1,BVFUNC_1:def 11;
then A2: ( ( 'not' ( a . x ) ) 'or' ( u . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
A3: (( 'not' ( a . x ) ) = ( TRUE ) or ( 'not' ( a . x ) ) = ( FALSE )) by XBOOLEAN:def 3;
now
per cases  by A2,A3;
case A4: ( 'not' ( a . x ) ) = ( TRUE );
x in ( EqClass (x,( CompF (PA,G) )) ) by EQREL_1:def 6;
then ( ( B_INF (a,( CompF (PA,G) )) ) . x ) = ( FALSE ) by A4,BVFUNC_1:def 16;
then ( ( ( All (a,PA,G) ) 'imp' u ) . x ) = ( ( TRUE ) 'or' ( u . x ) ) by BVFUNC_1:def 8
.= ( TRUE );
hence thesis;
end;
case ( u . x ) = ( TRUE );
then ( ( ( All (a,PA,G) ) 'imp' u ) . x ) = ( ( 'not' ( ( All (a,PA,G) ) . x ) ) 'or' ( TRUE ) ) by BVFUNC_1:def 8
.= ( TRUE );
hence thesis;
end;
end;
hence thesis;
end;
hence thesis by BVFUNC_1:def 11;
end;
