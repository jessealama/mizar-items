environ
vocabularies FINANCE1,NUMBERS,XBOOLE_0,PROB_1,SUBSET_1,FUNCT_1,TARSKI,RELAT_1,CARD_1,ARYTM_1,CARD_3,PROB_3,NAT_1,ARYTM_3,XREAL_0,ORDINAL1,XXREAL_0,SERIES_1,EQREL_1,MEASURE6,SEQ_1,XXREAL_1,MESFUNC1,RANDOM_1,RANDOM_2,FUNCOP_1,VALUED_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,XXREAL_0,NAT_1,XREAL_0,NUMBERS,FUNCT_1,RELSET_1,FUNCT_2,PROB_3,SERIES_1,PROB_1,MEASURE6,SEQ_1,BINOP_2,MESFUNC1,MESFUNC6,RANDOM_1,INT_1,KOLMOG01,XXREAL_1,RCOMP_1,FUNCOP_1,VALUED_1,RANDOM_2,CKB1,CKB2,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
definitions XXREAL_0,PROB_1,SUBSET_1,TARSKI,FUNCT_2,CKB5,CKB6,CKB9,CKB10,CKB11,CKB12;
theorems SERIES_1,PROB_1,PROB_3,XBOOLE_0,NAT_1,FUNCT_2,XXREAL_0,ORDINAL1,TARSKI,XREAL_1,XXREAL_1,MESFUNC1,MEASURE6,FINSUB_1,MESFUNC6,XREAL_0,RANDOM_1,RANDOM_2,FUNCOP_1,VALUED_1,FRECHET,XBOOLE_1,CKB3,CKB4,CKB5,CKB6,CKB9,CKB10,CKB11,CKB12;
schemes NAT_1,FUNCT_2,RECDEF_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XREAL_0,MEMBERED,PROB_1,VALUED_0,XXREAL_0,NAT_1,XCMPLX_0,VALUED_1,FUNCT_2;
constructors REAL_1,SEQ_1,PROB_3,SERIES_1,BINOP_2,RELSET_1,MEASURE6,RCOMP_1,MESFUNC1,MESFUNC6,KOLMOG01,RANDOM_2,FUNCOP_1,CKB2,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12;
requirements SUBSET,NUMERALS,BOOLE,ARITHM,REAL;
begin
reserve Omega for non empty set;
reserve Omega2 for non empty set;
reserve F for (SigmaField of Omega);
reserve F2 for (SigmaField of Omega2);
registration
let Omega;
let Omega2;
let F;
let F2;
cluster ( set_of_random_variables_on (F,F2) ) -> non empty;
coherence
proof
set X = ( set_of_random_variables_on (F,F2) );
(ex z being (Function of Omega,Omega2) st z is_random_variable_on F,F2)
proof
set k = the (Element of Omega2);
set z = ( Omega --> k );
BJ2: (z is_random_variable_on F,F2 iff (for x being (Element of F2) holds { y where y is (Element of Omega): ( z . y ) is (Element of x) } is (Element of F))) by CKB11:def 1;
(for x being (Element of F2) holds { y where y is (Element of Omega): ( z . y ) is (Element of x) } is (Element of F))
proof
let x being (Element of F2);
set K = { y where y is (Element of Omega): ( z . y ) is (Element of x) };
per cases ;
suppose CJ00: k is (Element of x);

(for s being set holds (s in K iff s in Omega))
proof
let s being set;
hereby
assume s in K;
then (ex y being (Element of Omega) st (y = s & ( z . y ) is (Element of x)));
hence s in Omega;
end;
assume s in Omega;
then (s in Omega & ( z . s ) is (Element of x)) by CJ00,FUNCOP_1:7;
hence thesis;
end;
then K = Omega by TARSKI:1;
hence thesis by PROB_1:23;
end;
suppose DD0: (not k is (Element of x));

(for r being set holds (not r in K))
proof
let r being set;
assume r in K;
then (ex y being (Element of Omega) st (y = r & ( z . y ) is (Element of x)));
hence thesis by DD0,FUNCOP_1:7;
end;
then K = ( {} ) by XBOOLE_0:def 1;
hence thesis by PROB_1:4;
end;
end;
hence thesis by BJ2;
end;
then consider z being (Function of Omega,Omega2) such that AJ1: z is_random_variable_on F,F2;
z in X by AJ1;
hence thesis;
end;
end;
