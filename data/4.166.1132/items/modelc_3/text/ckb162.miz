environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,FINSEQ_1,MODELC_2,SUBSET_1,ZF_LANG,XREAL_0,ORDINAL1,FUNCT_1,RELAT_1,XXREAL_0,INT_1,ARYTM_3,ARYTM_1,CARD_1,STRUCT_0,TARSKI,XBOOLEAN,LATTICES,CAT_3,ORDINAL4,ZF_MODEL,MODELC_1,FINSET_1,SEQ_1,REAL_1,CARD_3,SERIES_1,ZFMISC_1,MSUALG_3,ORDERS_1,SUBSTUT1,FSM_1,FSM_2,VALUED_1,MODELC_3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,FINSET_1,CARD_1,NUMBERS,XCMPLX_0,XREAL_0,REAL_1,XXREAL_0,NAT_1,RELAT_1,FUNCT_1,RELSET_1,FINSEQ_1,ORDERS_1,FUNCT_2,INT_1,SEQ_1,SERIES_1,PARTFUN1,STRUCT_0,MODELC_1,MODELC_2,RFINSEQ2,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB54,CKB55,CKB56,CKB64,CKB76,CKB77,CKB82,CKB106,CKB108,CKB114,CKB115,CKB132,CKB134,CKB138,CKB140,CKB142,CKB148,CKB149,CKB150,CKB151,CKB152,CKB153,CKB154,CKB155,CKB156,CKB157,CKB159,CKB160;
definitions TARSKI,MODELC_2,SERIES_1,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB54,CKB55,CKB56,CKB64,CKB76,CKB77,CKB82,CKB106,CKB108,CKB114,CKB115,CKB132,CKB134,CKB138,CKB140,CKB142,CKB149,CKB150,CKB151,CKB152,CKB153,CKB154,CKB155,CKB156,CKB157,CKB159,CKB160;
theorems XBOOLE_0,ZFMISC_1,XBOOLE_1,TARSKI,FUNCT_1,FUNCT_2,FUNCT_7,WELLORD2,NAT_1,INT_1,ENUMSET1,XREAL_1,FINSEQ_1,ORDERS_1,XXREAL_0,MODELC_1,MODELC_2,ORDINAL1,SUBSET_1,FINSEQ_4,SERIES_1,CARD_1,CARD_2,SERIES_2,FINSET_1,RFINSEQ2,FINSEQ_3,SUBSET,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB108,CKB110,CKB111,CKB112,CKB113,CKB114,CKB115,CKB116,CKB117,CKB118,CKB119,CKB120,CKB121,CKB122,CKB123,CKB124,CKB125,CKB126,CKB127,CKB128,CKB131,CKB132,CKB133,CKB134,CKB135,CKB136,CKB137,CKB138,CKB139,CKB140,CKB142,CKB143,CKB144,CKB145,CKB146,CKB147,CKB149,CKB150,CKB151,CKB152,CKB153,CKB154,CKB155,CKB156,CKB157,CKB158,CKB159,CKB160,CKB161;
schemes NAT_1,FUNCT_2,MODELC_2,TARSKI,FUNCT_1,FINSEQ_1,RECDEF_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,XXREAL_0,XREAL_0,NAT_1,INT_1,ORDERS_1,FINSET_1,MODELC_2,FINSEQ_1,NUMBERS,VALUED_0,MEMBERED,STRUCT_0,MODELC_1,CARD_1,RELSET_1,FUNCT_2,CKB19,CKB31,CKB53,CKB107,CKB109,CKB129,CKB130,CKB141,CKB148;
constructors KNASTER,MODELC_2,SERIES_1,REAL_1,NEWTON,RFINSEQ2,SEQ_1,RELSET_1,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB54,CKB55,CKB56,CKB64,CKB76,CKB77,CKB82,CKB106,CKB108,CKB114,CKB115,CKB132,CKB134,CKB138,CKB140,CKB142,CKB148,CKB149,CKB150,CKB151,CKB152,CKB153,CKB154,CKB155,CKB156,CKB157,CKB159,CKB160;
requirements REAL,NUMERALS,ARITHM,SUBSET,BOOLE;
begin
reserve n for Nat;
reserve x for set;
reserve w for (Element of ( Inf_seq ( AtomicFamily ) ));
reserve v for  neg-inner-most LTL-formula;
reserve U for (Choice_Function of ( BOOL ( Subformulae v ) ));
definition
let w;
let v;
let U;
func chosen_run (w,v,U) -> (sequence of ( LTLStates v ))
means
:Def50: (( it . ( 0 ) ) = ( init v ) & (for n holds ( it . ( n + 1 ) ) = ( chosen_next (( Shift (w,n) ),v,U,( CastNode (( it . n ),v) )) )));
existence
proof
deffunc G(set,set) = ( chosen_next (( Shift (w,( CastNat $1 )) ),v,U,( CastNode ($2,v) )) );
set LS = ( LTLStates v );
((ex y being set st (ex f being Function st (((y = ( f . ( 0 ) ) & ( dom f ) = ( NAT )) & ( f . ( 0 ) ) = ( init v )) & (for n being (Element of ( NAT )) holds ( f . ( n + 1 ) ) = G(n,( f . n )))))) & (for y1,y2 being set holds (((ex f being Function st (((y1 = ( f . ( 0 ) ) & ( dom f ) = ( NAT )) & ( f . ( 0 ) ) = ( init v )) & (for n being (Element of ( NAT )) holds ( f . ( n + 1 ) ) = G(n,( f . n ))))) & (ex f being Function st (((y2 = ( f . ( 0 ) ) & ( dom f ) = ( NAT )) & ( f . ( 0 ) ) = ( init v )) & (for n being (Element of ( NAT )) holds ( f . ( n + 1 ) ) = G(n,( f . n )))))) implies y1 = y2))) from RECDEF_1:sch 12;
then consider IT being Function such that A1: ( dom IT ) = ( NAT ) and A2: ( IT . ( 0 ) ) = ( init v ) and A3: (for n being (Element of ( NAT )) holds ( IT . ( n + 1 ) ) = G(n,( IT . n )));
A4: (for n being Nat holds ( IT . ( n + 1 ) ) = G(n,( IT . n )))
proof
let n being Nat;
reconsider n as (Element of ( NAT )) by ORDINAL1:def 12;
( IT . ( n + 1 ) ) = G(n,( IT . n )) by A3;
hence thesis;
end;
A5: (for n being Nat holds ( IT . ( n + 1 ) ) = ( chosen_next (( Shift (w,n) ),v,U,( CastNode (( IT . n ),v) )) ))
proof
let n;
( IT . ( n + 1 ) ) = ( chosen_next (( Shift (w,( CastNat n )) ),v,U,( CastNode (( IT . n ),v) )) ) by A4;
hence thesis by MODELC_2:def 1;
end;
(for x holds (x in ( NAT ) implies ( IT . x ) in LS))
proof
let x;
assume x in ( NAT );
then reconsider x as Nat;
A6: (x = ( 0 ) or ( 0 ) < ( ( 0 ) + x ));
now
per cases  by A6,NAT_1:19;
suppose A7: x = ( 0 );

set y = ( IT . x );
reconsider y as (Element of ( LTLNodes v )) by A2,A7,CKB106:def 1;
( IT . x ) = y;
hence thesis by A2,A7;
end;
suppose A8: 1 <= x;

set x1 = ( x - 1 );
reconsider x1 as Nat by A8,NAT_1:21;
set y = ( IT . x );
A9: y = ( IT . ( x1 + 1 ) )
.= G(x1,( IT . x1 )) by A4;
then reconsider y as (Element of ( LTLNodes v )) by CKB106:def 1;
( IT . x ) = y;
hence thesis by A9;
end;
end;
hence thesis;
end;
then reconsider IT as (sequence of LS) by A1,FUNCT_2:3;
take IT;
thus thesis by A2,A5;
end;
uniqueness
proof
deffunc G(set,set) = ( chosen_next (( Shift (w,( CastNat $1 )) ),v,U,( CastNode ($2,v) )) );
deffunc G1(Nat,set) = ( chosen_next (( Shift (w,$1) ),v,U,( CastNode ($2,v) )) );
set LS = ( LTLStates v );
A10: (for f,g being (Function of ( NAT ),( LTLStates v )) holds (((( f . ( 0 ) ) = ( init v ) & (for n holds ( f . ( n + 1 ) ) = G(n,( f . n )))) & (( g . ( 0 ) ) = ( init v ) & (for n holds ( g . ( n + 1 ) ) = G(n,( g . n ))))) implies f = g))
proof
let f being (Function of ( NAT ),LS),g being (Function of ( NAT ),LS);
assume that
A11: ( f . ( 0 ) ) = ( init v )
and
A12: (for n being Nat holds ( f . ( n + 1 ) ) = G(n,( f . n )))
and
A13: ( g . ( 0 ) ) = ( init v )
and
A14: (for n being Nat holds ( g . ( n + 1 ) ) = G(n,( g . n )));
defpred P[ Nat ]
 means
( f . $1 ) = ( g . $1 );
A15: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume P[ k ];
then ( f . ( k + 1 ) ) = G(k,( g . k )) by A12
.= ( g . ( k + 1 ) ) by A14;
hence thesis;
end;
A16: P[ ( 0 ) ] by A11,A13;
(for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A16,A15);
then A17: (for x holds (x in ( dom f ) implies ( f . x ) = ( g . x )));
(( dom f ) = ( NAT ) & ( dom g ) = ( NAT )) by FUNCT_2:def 1;
hence thesis by A17,FUNCT_1:2;
end;
(for f,g being (Function of ( NAT ),( LTLStates v )) holds (((( f . ( 0 ) ) = ( init v ) & (for n holds ( f . ( n + 1 ) ) = G1(n,( f . n )))) & (( g . ( 0 ) ) = ( init v ) & (for n holds ( g . ( n + 1 ) ) = G1(n,( g . n ))))) implies f = g))
proof
let f being (Function of ( NAT ),LS),g being (Function of ( NAT ),LS);
assume that
A18: ( f . ( 0 ) ) = ( init v )
and
A19: (for n holds ( f . ( n + 1 ) ) = G1(n,( f . n )))
and
A20: ( g . ( 0 ) ) = ( init v )
and
A21: (for n holds ( g . ( n + 1 ) ) = G1(n,( g . n )));
A22: (for n holds ( g . ( n + 1 ) ) = G(n,( g . n )))
proof
let n;
( g . ( n + 1 ) ) = ( chosen_next (( Shift (w,n) ),v,U,( CastNode (( g . n ),v) )) ) by A21;
hence thesis by MODELC_2:def 1;
end;
(for n holds ( f . ( n + 1 ) ) = G(n,( f . n )))
proof
let n;
( f . ( n + 1 ) ) = ( chosen_next (( Shift (w,n) ),v,U,( CastNode (( f . n ),v) )) ) by A19;
hence thesis by MODELC_2:def 1;
end;
hence thesis by A10,A18,A20,A22;
end;
hence thesis;
end;
end;
