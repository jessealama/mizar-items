environ
vocabularies RELAT_1,XBOOLE_0,TARSKI,ZFMISC_1,SUBSET_1,SETFAM_1,NET_1,STRUCT_0,PETRI;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,PARTIT_2,STRUCT_0,PETRI,CKB1,CKB3,CKB4,CKB11,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31;
definitions XBOOLE_0,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31;
theorems TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
schemes XBOOLE_0,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,CKB2,CKB9,CKB10;
constructors TARSKI,SUBSET_1,RELAT_1,STRUCT_0,PETRI,PARTIT_2,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31;
requirements SUBSET,BOOLE;
begin
reserve y for set;
theorem
Th26: (for N being Pnet holds (for x being (Element of ( Elements N )) holds (( Elements N ) <> ( {} ) implies ( exit (N,x) ) c= ( Elements N ))))
proof
let N being Pnet;
let x being (Element of ( Elements N ));
assume A1: ( Elements N ) <> ( {} );
A2: (( exit (N,x) ) = { x } implies ( exit (N,x) ) c= ( Elements N ))
proof
x in ( Elements N ) by A1;
then A3: (for y holds (y in { x } implies y in ( Elements N ))) by TARSKI:def 1;
assume ( exit (N,x) ) = { x };
hence thesis by A3,TARSKI:def 3;
end;
(( exit (N,x) ) = { x } or ( exit (N,x) ) = ( Post (N,x) )) by A1,CKB32:1;
hence thesis by A2,CKB23:1;
end;
