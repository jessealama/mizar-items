environ
vocabularies RELAT_1,XBOOLE_0,TARSKI,ZFMISC_1,SUBSET_1,SETFAM_1,NET_1,STRUCT_0,PETRI;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,PARTIT_2,STRUCT_0,PETRI,CKB1,CKB3,CKB4,CKB11,CKB17,CKB18,CKB19,CKB20,CKB27;
definitions XBOOLE_0,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27;
theorems TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
schemes XBOOLE_0,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,CKB2,CKB9,CKB10;
constructors TARSKI,SUBSET_1,RELAT_1,STRUCT_0,PETRI,PARTIT_2,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve N for PT_net_Str;
definition
let N being Pnet;
let x being (Element of ( Elements N ));
assume A1: ( Elements N ) <> ( {} );
func exit (N,x) -> set means 
:Def11: ((x in (the carrier of N) implies it = { x }) & (x in (the carrier' of N) implies it = ( Post (N,x) )));
existence
proof
(not (x in (the carrier of N) & x in (the carrier' of N))) by CKB12:1;
hence thesis;
end;
uniqueness by A1,XBOOLE_0:def 3;
end;
