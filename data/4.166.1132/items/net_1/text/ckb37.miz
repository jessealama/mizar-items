environ
vocabularies RELAT_1,XBOOLE_0,TARSKI,ZFMISC_1,SUBSET_1,SETFAM_1,NET_1,STRUCT_0,PETRI;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,PARTIT_2,STRUCT_0,PETRI,CKB1,CKB3,CKB4,CKB11,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31,CKB35,CKB36;
definitions XBOOLE_0,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31,CKB35,CKB36;
theorems TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36;
schemes XBOOLE_0,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,CKB2,CKB9,CKB10;
constructors TARSKI,SUBSET_1,RELAT_1,STRUCT_0,PETRI,PARTIT_2,CKB1,CKB3,CKB4,CKB17,CKB18,CKB19,CKB20,CKB27,CKB31,CKB35,CKB36;
requirements SUBSET,BOOLE;
begin
reserve y for set;
definition
let N being PT_net_Str;
let x being (Element of (the carrier' of N));
func Postc (N,x)
means
(y in it iff (y in (the carrier of N) & [ x,y ] in ( Flow N )));
existence
proof
defpred P[ set ]
 means
[ x,$1 ] in ( Flow N );
thus (ex IT being set st (for y being set holds (y in IT iff (y in (the carrier of N) & P[ y ])))) from XBOOLE_0:sch 1;
end;
uniqueness
proof
let X being set,Y being set;
assume that
A4: (y in X iff (y in (the carrier of N) & [ x,y ] in ( Flow N )))
and
A5: (y in Y iff (y in (the carrier of N) & [ x,y ] in ( Flow N )));
A6: (y in Y implies y in X)
proof
assume y in Y;
then (y in (the carrier of N) & [ x,y ] in ( Flow N )) by A5;
hence thesis by A4;
end;
(y in X implies y in Y)
proof
assume y in X;
then (y in (the carrier of N) & [ x,y ] in ( Flow N )) by A4;
hence thesis by A5;
end;
hence thesis by A6,TARSKI:1;
end;
end;
