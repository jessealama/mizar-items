environ
vocabularies RLVECT_1,SUBSET_1,REAL_1,RELAT_1,ARYTM_3,SUPINF_2,CARD_1,XCMPLX_0,ANPROJ_1,ARYTM_1,XBOOLE_0,FUNCT_2,NUMBERS,FUNCT_1,FUNCSDOM,ZFMISC_1,INCSP_1,COLLSP,RELAT_2,PARSP_2,VECTSP_1,AFF_2,ANALOAF,ANPROJ_2;
notations XBOOLE_0,SUBSET_1,NUMBERS,FUNCT_1,FUNCT_2,DOMAIN_1,STRUCT_0,RLVECT_1,REAL_1,FUNCSDOM,COLLSP,ANPROJ_1,CKB13,CKB14,CKB15;
definitions COLLSP,ANPROJ_1,BINOP_1,FUNCSDOM,RLVECT_1,STRUCT_0,ALGSTR_0,CKB13,CKB14,CKB15;
theorems RLVECT_1,FUNCT_2,FUNCSDOM,COLLSP,ANPROJ_1,ENUMSET1,XCMPLX_0,XCMPLX_1,FUNCOP_1,STRUCT_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,NUMBERS,STRUCT_0,COLLSP,REAL_1,ANPROJ_1,XREAL_0,ORDINAL1;
constructors DOMAIN_1,REAL_1,FUNCSDOM,BINOP_2,ANPROJ_1,RELSET_1,CKB13,CKB14,CKB15;
requirements NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve V for RealLinearSpace;
reserve p for (Element of V);
reserve q for (Element of V);
reserve r for (Element of V);
reserve a for Real;
reserve b for Real;
reserve c for Real;
theorem
Th7: (((p,q,r are_LinDep  & (not  are_Prop p,q)) & p,q,r are_Prop_Vect ) implies (ex a st (ex b st r = ( ( a * p ) + ( b * q ) ))))
proof
assume that
A1: p,q,r are_LinDep 
and
A2: (not  are_Prop p,q)
and
A3: p,q,r are_Prop_Vect ;
consider a,b,c such that A4: ( ( ( a * p ) + ( b * q ) ) + ( c * r ) ) = ( 0. V ) and A5: ((a <> ( 0 ) or b <> ( 0 )) or c <> ( 0 )) by A1,ANPROJ_1:def 2;
(not q is  zero) by A3,CKB13:def 1;
then A6: q <> ( 0. V );
(not p is  zero) by A3,CKB13:def 1;
then A7: p <> ( 0. V );
A8: c <> ( 0 )
proof
assume A9: (not thesis);
then ( 0. V ) = ( ( ( a * p ) + ( b * q ) ) + ( 0. V ) ) by A4,RLVECT_1:10
.= ( ( a * p ) + ( b * q ) ) by RLVECT_1:4;
then A10: ( a * p ) = ( - ( b * q ) ) by RLVECT_1:6
.= ( ( - b ) * q ) by CKB16:1;
A11: (a <> ( 0 ) & b <> ( 0 ))
proof
A12:now
assume A13: b = ( 0 );
then ( 0. V ) = ( ( ( a * p ) + ( 0. V ) ) + ( ( 0 ) * r ) ) by A4,A9,RLVECT_1:10
.= ( ( ( a * p ) + ( 0. V ) ) + ( 0. V ) ) by RLVECT_1:10
.= ( ( a * p ) + ( 0. V ) ) by RLVECT_1:4
.= ( a * p ) by RLVECT_1:4;
hence contradiction by A7,A5,A9,A13,RLVECT_1:11;
end;
A14:now
assume A15: a = ( 0 );
then ( 0. V ) = ( ( ( 0. V ) + ( b * q ) ) + ( ( 0 ) * r ) ) by A4,A9,RLVECT_1:10
.= ( ( ( 0. V ) + ( b * q ) ) + ( 0. V ) ) by RLVECT_1:10
.= ( ( b * q ) + ( 0. V ) ) by RLVECT_1:4
.= ( b * q ) by RLVECT_1:4;
hence contradiction by A6,A5,A9,A15,RLVECT_1:11;
end;
assume (not thesis);
hence contradiction by A14,A12;
end;
then ( - b ) <> ( 0 );
hence contradiction by A2,A11,A10,ANPROJ_1:def 1;
end;
( c * r ) = ( - ( ( a * p ) + ( b * q ) ) ) by A4,RLVECT_1:def 10
.= ( ( - ( a * p ) ) + ( - ( b * q ) ) ) by RLVECT_1:31
.= ( ( ( - a ) * p ) + ( - ( b * q ) ) ) by CKB16:1
.= ( ( ( - a ) * p ) + ( ( - b ) * q ) ) by CKB16:1;
then ( ( c " ) * ( c * r ) ) = ( ( ( c " ) * ( ( - a ) * p ) ) + ( ( c " ) * ( ( - b ) * q ) ) ) by RLVECT_1:def 5
.= ( ( ( ( c " ) * ( - a ) ) * p ) + ( ( c " ) * ( ( - b ) * q ) ) ) by RLVECT_1:def 7
.= ( ( ( ( c " ) * ( - a ) ) * p ) + ( ( ( c " ) * ( - b ) ) * q ) ) by RLVECT_1:def 7;
then ( ( ( ( c " ) * ( - a ) ) * p ) + ( ( ( c " ) * ( - b ) ) * q ) ) = ( ( ( c " ) * c ) * r ) by RLVECT_1:def 7
.= ( 1 * r ) by A8,XCMPLX_0:def 7
.= r by RLVECT_1:def 8;
hence thesis;
end;
