environ
vocabularies WAYBEL_0,WAYBEL11,WAYBEL_9,SUBSET_1,WAYBEL17,EQREL_1,ORDINAL2,FUNCT_1,STRUCT_0,TARSKI,YELLOW_1,XBOOLE_0,ORDERS_2,RELAT_2,SEQM_3,XXREAL_0,RELAT_1,FUNCOP_1,LATTICES,LATTICE3,NEWTON,REWRITE1,YELLOW_0,FUNCT_2,ZFMISC_1,BORSUK_1,FUNCT_5,MCART_1,PRE_TOPC,CAT_1,MONOID_0,WAYBEL_3,PBOOLE,CARD_3,FUNCT_4,WAYBEL24;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,BINOP_1,DOMAIN_1,FUNCT_5,MONOID_0,CARD_3,PBOOLE,FUNCOP_1,STRUCT_0,PRE_TOPC,ORDERS_2,LATTICE3,FUNCT_7,YELLOW_0,ORDERS_3,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_3,WAYBEL_9,WAYBEL11,WAYBEL17,YELLOW_3,CKB11,CKB13;
definitions TARSKI,WAYBEL_0,LATTICE3,ORDERS_2,MONOID_0,XBOOLE_0,BINOP_1,STRUCT_0,CKB11,CKB13;
theorems WAYBEL_0,TARSKI,FUNCT_1,FUNCT_2,YELLOW_0,YELLOW_2,WAYBEL_1,ZFMISC_1,LATTICE3,WAYBEL10,CAT_2,WAYBEL17,YELLOW_3,MCART_1,FUNCT_5,YELLOW_5,YELLOW10,WAYBEL_9,FUNCOP_1,YELLOW_1,ORDERS_2,WAYBEL_3,CARD_3,FUNCT_7,RELAT_1,WAYBEL15,RELSET_1,XBOOLE_0,XBOOLE_1,CKB1,CKB4,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB17,CKB18;
schemes XBOOLE_0,CKB6,CKB7;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0,LATTICE3,YELLOW_0,MONOID_0,WAYBEL_0,YELLOW_1,YELLOW_3,WAYBEL_3,WAYBEL10,WAYBEL11,WAYBEL17,PRE_TOPC,RELAT_1,CKB2,CKB3,CKB16,CKB19,CKB20,CKB21,CKB22;
constructors FUNCT_7,BORSUK_1,MONOID_0,ORDERS_3,WAYBEL_1,WAYBEL_3,WAYBEL17,YELLOW_3,CKB11,CKB13;
requirements SUBSET,BOOLE;
begin
reserve X1 for non  empty RelStr;
reserve X2 for non  empty RelStr;
reserve Y for non  empty RelStr;
reserve f for (Function of [: X1,X2 :],Y);
reserve x for (Element of X1);
reserve y for (Element of X2);
theorem
Th12: (for R,S,T being LATTICE holds (for f being (Function of [: R,S :],T) holds ((for a being (Element of R) holds (for b being (Element of S) holds (( Proj (f,a) ) is  monotone & ( Proj (f,b) ) is  monotone))) implies f is  monotone)))
proof
let R being LATTICE;
let S being LATTICE;
let T being LATTICE;
let f being (Function of [: R,S :],T);
assume A1: (for a being (Element of R) holds (for b being (Element of S) holds (( Proj (f,a) ) is  monotone & ( Proj (f,b) ) is  monotone)));
now
let x being (Element of [: R,S :]);
let y being (Element of [: R,S :]);
assume A2: x <= y;
then A3: ( x `1 ) <= ( y `1 ) by YELLOW_3:12;
A4: ( x `2 ) <= ( y `2 ) by A2,YELLOW_3:12;
A5: ( f . (( x `1 ),( y `2 )) ) = ( ( Proj (f,( x `1 )) ) . ( y `2 ) ) by CKB12:1;
(( Proj (f,( x `1 )) ) is  monotone & ( f . (( x `1 ),( x `2 )) ) = ( ( Proj (f,( x `1 )) ) . ( x `2 ) )) by A1,CKB12:1;
then A6: ( f . [ ( x `1 ),( x `2 ) ] ) <= ( f . [ ( x `1 ),( y `2 ) ] ) by A4,A5,WAYBEL_1:def 2;
A7: ( f . (( y `1 ),( y `2 )) ) = ( ( Proj (f,( y `2 )) ) . ( y `1 ) ) by CKB14:1;
(( Proj (f,( y `2 )) ) is  monotone & ( f . (( x `1 ),( y `2 )) ) = ( ( Proj (f,( y `2 )) ) . ( x `1 ) )) by A1,CKB14:1;
then ( f . [ ( x `1 ),( y `2 ) ] ) <= ( f . [ ( y `1 ),( y `2 ) ] ) by A3,A7,WAYBEL_1:def 2;
then A8: ( f . [ ( x `1 ),( x `2 ) ] ) <= ( f . [ ( y `1 ),( y `2 ) ] ) by A6,YELLOW_0:def 2;
A9: [: (the carrier of R),(the carrier of S) :] = (the carrier of [: R,S :]) by YELLOW_3:def 2;
then ( f . [ ( y `1 ),( y `2 ) ] ) = ( f . y ) by MCART_1:21;
hence ( f . x ) <= ( f . y ) by A8,A9,MCART_1:21;
end;
hence thesis by WAYBEL_1:def 2;
end;
