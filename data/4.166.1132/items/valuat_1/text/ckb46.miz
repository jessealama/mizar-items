environ
vocabularies SUBSET_1,NUMBERS,XBOOLE_0,FUNCT_2,QC_LANG1,FUNCT_1,RELAT_1,TARSKI,MARGREL1,XBOOLEAN,CQC_LANG,ARYTM_3,FINSEQ_1,NAT_1,XXREAL_0,ZF_LANG,FUNCOP_1,REALSET1,BVFUNC_2,ZF_MODEL,ZF_LANG1,QC_LANG3,CARD_1,CLASSES2,VALUAT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,FUNCT_2,NAT_1,FINSEQ_1,QC_LANG1,QC_LANG3,CQC_LANG,MARGREL1,XXREAL_0,CKB1,CKB4,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB28,CKB39;
definitions XBOOLEAN,CKB1,CKB5,CKB9,CKB10,CKB12,CKB14,CKB28,CKB39;
theorems TARSKI,FINSEQ_1,FUNCT_1,FUNCT_2,FUNCOP_1,QC_LANG1,QC_LANG2,QC_LANG3,CQC_LANG,MARGREL1,RELSET_1,RELAT_1,FINSEQ_3,XBOOLE_0,XBOOLE_1,XBOOLEAN,ORDINAL1,CARD_1,CKB1,CKB3,CKB5,CKB6,CKB7,CKB9,CKB10,CKB12,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45;
schemes QC_LANG1,CQC_LANG,FUNCT_2;
registrations XBOOLE_0,FUNCT_1,RELSET_1,MEMBERED,MARGREL1,QC_LANG1,CQC_LANG,XXREAL_0,FUNCT_2,CARD_1,CKB2;
constructors XXREAL_0,MEMBERED,MARGREL1,QC_LANG3,CQC_LANG,RELSET_1,CKB1,CKB4,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB28,CKB39;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve i for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve y for bound_QC-variable;
reserve s9 for QC-formula;
theorem
Th43: ((x <> y & (not x in ( still_not-bound_in s9 ))) implies (not x in ( still_not-bound_in ( s9 . y ) )))
proof
defpred PP[ (Element of ( QC-WFF )) ]
 means
((x <> y & (not x in ( still_not-bound_in $1 ))) implies (not x in ( still_not-bound_in ( $1 . y ) )));
A1:now
let s being (Element of ( QC-WFF ));
thus (s is  atomic implies PP[ s ])
proof
assume that
A2: s is  atomic
and
A3: x <> y
and
A4: (not x in ( still_not-bound_in s ));
thus (not x in ( still_not-bound_in ( s . y ) ))
proof
set l = ( the_arguments_of s );
set ll = ( Subst (l,( ( a. ( 0 ) ) .--> y )) );
A5: ( still_not-bound_in s ) = ( still_not-bound_in l ) by A2,QC_LANG3:4
.= ( variables_in (l,( bound_QC-variables )) ) by QC_LANG3:2
.= { ( l . k ): ((1 <= k & k <= ( len l )) & ( l . k ) in ( bound_QC-variables )) } by QC_LANG3:def 1;
A6: (x in { ( ll . k ): ((1 <= k & k <= ( len ll )) & ( ll . k ) in ( bound_QC-variables )) } implies x in { ( l . i ): ((1 <= i & i <= ( len l )) & ( l . i ) in ( bound_QC-variables )) })
proof
assume x in { ( ll . k ): ((1 <= k & k <= ( len ll )) & ( ll . k ) in ( bound_QC-variables )) };
then consider k such that A7: x = ( ll . k ) and A8: 1 <= k and A9: k <= ( len ll ) and ( ll . k ) in ( bound_QC-variables );
A10: k <= ( len l ) by A9,CQC_LANG:def 1;
then x = ( l . k ) by A3,A7,A8,CQC_LANG:3;
hence thesis by A8,A10;
end;
A11: ( s . y ) = ( ( the_pred_symbol_of s ) ! ( Subst (l,( ( a. ( 0 ) ) .--> y )) ) ) by A2,CQC_LANG:16;
A12: (( s . y ) is  atomic & ( the_arguments_of ( s . y ) ) = ll)
proof
consider k being (Element of ( NAT )),p being (QC-pred_symbol of k),l2 being (QC-variable_list of k) such that A13: s = ( p ! l2 ) by A2,QC_LANG1:def 16;
l2 = l by A2,A13,QC_LANG1:def 21;
then ( len l ) = k by CARD_1:def 7;
then ( len ( Subst (l,( ( a. ( 0 ) ) .--> y )) ) ) = k by CQC_LANG:def 1;
then reconsider l3 = ( Subst (l,( ( a. ( 0 ) ) .--> y )) ) as (QC-variable_list of k) by CARD_1:def 7;
A14: ( s . y ) = ( p ! l3 ) by A2,A11,A13,QC_LANG1:def 20;
hence ( s . y ) is  atomic by QC_LANG1:def 16;
hence thesis by A14,QC_LANG1:def 21;
end;
then ( still_not-bound_in ( the_arguments_of ( s . y ) ) ) = ( variables_in (ll,( bound_QC-variables )) ) by QC_LANG3:2
.= { ( ll . k ): ((1 <= k & k <= ( len ll )) & ( ll . k ) in ( bound_QC-variables )) } by QC_LANG3:def 1;
hence thesis by A4,A5,A12,A6,QC_LANG3:4;
end;

end;

thus PP[ ( VERUM ) ] by CQC_LANG:15;
thus ((s is  negative & PP[ ( the_argument_of s ) ]) implies PP[ s ])
proof
assume that
A15: s is  negative
and
A16: ((((x <> y & (not x in ( still_not-bound_in ( the_argument_of s ) ))) implies (not x in ( still_not-bound_in ( ( the_argument_of s ) . y ) ))) & x <> y) & (not x in ( still_not-bound_in s )));
(not x in ( still_not-bound_in ( 'not' ( ( the_argument_of s ) . y ) ) )) by A15,A16,QC_LANG3:6,QC_LANG3:7;
hence thesis by A15,CQC_LANG:18;
end;

thus (((s is  conjunctive & PP[ ( the_left_argument_of s ) ]) & PP[ ( the_right_argument_of s ) ]) implies PP[ s ])
proof
assume that
A17: s is  conjunctive
and
A18: (((((x <> y & (not x in ( still_not-bound_in ( the_left_argument_of s ) ))) implies (not x in ( still_not-bound_in ( ( the_left_argument_of s ) . y ) ))) & ((x <> y & (not x in ( still_not-bound_in ( the_right_argument_of s ) ))) implies (not x in ( still_not-bound_in ( ( the_right_argument_of s ) . y ) )))) & x <> y) & (not x in ( still_not-bound_in s )));
( still_not-bound_in s ) = ( ( still_not-bound_in ( the_left_argument_of s ) ) \/ ( still_not-bound_in ( the_right_argument_of s ) ) ) by A17,QC_LANG3:9;
then (not x in ( ( still_not-bound_in ( ( the_left_argument_of s ) . y ) ) \/ ( still_not-bound_in ( ( the_right_argument_of s ) . y ) ) )) by A18,XBOOLE_0:def 3;
then (not x in ( still_not-bound_in ( ( ( the_left_argument_of s ) . y ) '&' ( ( the_right_argument_of s ) . y ) ) )) by QC_LANG3:10;
hence thesis by A17,CQC_LANG:20;
end;

thus ((s is  universal & PP[ ( the_scope_of s ) ]) implies PP[ s ])
proof
assume that
A19: s is  universal
and
A20: ((x <> y & (not x in ( still_not-bound_in ( the_scope_of s ) ))) implies (not x in ( still_not-bound_in ( ( the_scope_of s ) . y ) )))
and
A21: x <> y
and
A22: (not x in ( still_not-bound_in s ));
A23: ( still_not-bound_in s ) = ( ( still_not-bound_in ( the_scope_of s ) ) \ { ( bound_in s ) } ) by A19,QC_LANG3:11;
thus (not x in ( still_not-bound_in ( s . y ) ))
proof
A24:now
( still_not-bound_in ( All (x,( ( the_scope_of s ) . y )) ) ) = ( ( still_not-bound_in ( ( the_scope_of s ) . y ) ) \ { x } ) by QC_LANG3:12;
then A25: ((not x in ( still_not-bound_in ( All (x,( ( the_scope_of s ) . y )) ) )) iff ((not x in ( still_not-bound_in ( ( the_scope_of s ) . y ) )) or x in { x })) by XBOOLE_0:def 5;
assume x in { ( bound_in s ) };
then x = ( bound_in s ) by TARSKI:def 1;
hence thesis by A19,A21,A25,CQC_LANG:23,TARSKI:def 1;
end;
now
assume (not x in ( still_not-bound_in ( the_scope_of s ) ));
then (not x in ( ( still_not-bound_in ( ( the_scope_of s ) . y ) ) \ { ( bound_in s ) } )) by A20,A21,XBOOLE_0:def 5;
then (not x in ( still_not-bound_in ( All (( bound_in s ),( ( the_scope_of s ) . y )) ) )) by QC_LANG3:12;
hence thesis by A19,A22,CQC_LANG:22,CQC_LANG:23;
end;
hence thesis by A22,A23,A24,XBOOLE_0:def 5;
end;

end;

end;
(for s being (Element of ( QC-WFF )) holds PP[ s ]) from QC_LANG1:sch 2(A1);
hence thesis;
end;
