environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,FUNCT_1,FINSET_1,CARD_1,XXREAL_0,TARSKI,ARYTM_1,RELAT_1,ZFMISC_1,RELAT_2,ORDERS_1,WELLORD1,FUNCT_2,NAT_1,FINSEQ_1,ARYTM_3,ARROW;
notations ORDERS_1,RELAT_1,RELAT_2,RELSET_1,XBOOLE_0,SUBSET_1,TARSKI,FINSET_1,FUNCT_1,FUNCT_2,CARD_1,XXREAL_0,ZFMISC_1,NAT_1,NUMBERS,FINSEQ_1,XCMPLX_0,WELLORD1,CKB1,CKB4,CKB6;
definitions RELAT_1,FUNCT_2,WELLORD1,CKB4,CKB6;
theorems RELSET_1,ZFMISC_1,TARSKI,FUNCT_2,FINSEQ_4,FINSEQ_1,FINSEQ_3,NAT_1,ORDINAL1,XREAL_1,FUNCT_1,XXREAL_0,PARTFUN1,INT_1,CARD_2,CARD_1,XBOOLE_0,SUBSET_1,RELAT_2,RELAT_1,ORDERS_1,XBOOLE_1,WELLORD2,WELLORD1,CKB2,CKB3,CKB4,CKB6;
schemes XBOOLE_0,FUNCT_2,NAT_1,RELSET_1;
registrations RELSET_1,FINSET_1,NAT_1,INT_1,XREAL_0,XBOOLE_0,ORDINAL1,CKB5,CKB7;
constructors XXREAL_0,FUNCT_2,REAL_1,FINSEQ_1,INT_1,RELAT_2,PARTFUN1,WELLORD1,RELSET_1,CKB1,CKB4,CKB6;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
reserve A for non  empty set;
reserve a for (Element of A);
reserve b for (Element of A);
reserve c for (Element of A);
definition
let A;
redefine func LinOrders A means 
:Def3: (for R being set holds (R in it iff R is  connected  connected (Order of A)));
compatibility
proof
A1:now
let R being set;
assume A2: R in ( LinOrders A );
then reconsider R9 = R as (Relation of A) by CKB4:def 1;
now
let a being set;
assume a in A;
then [ a,a ] in R by A2,CKB4:def 1;
hence a in ( dom R9 ) by RELAT_1:def 4;
end;
then A c= ( dom R9 ) by TARSKI:def 3;
then A3: ( dom R9 ) = A by XBOOLE_0:def 10;
now
let a being set;
assume a in A;
then [ a,a ] in R by A2,CKB4:def 1;
hence a in ( rng R9 ) by RELAT_1:def 5;
end;
then A c= ( rng R9 ) by TARSKI:def 3;
then A4: ( field R9 ) = ( A \/ A ) by A3,XBOOLE_0:def 10;
(for a,b being set holds (((a in A & b in A) & a <> b) implies ([ a,b ] in R or [ b,a ] in R))) by A2,CKB4:def 1;
then A5: R9 is_connected_in A by RELAT_2:def 6;
(for a being set holds (a in A implies [ a,a ] in R)) by A2,CKB4:def 1;
then A6: R9 is_reflexive_in A by RELAT_2:def 1;
(for a,b being set holds ((((a in A & b in A) & [ a,b ] in R) & [ b,a ] in R) implies a = b)) by A2,CKB6:def 1;
then A7: R9 is_antisymmetric_in A by RELAT_2:def 4;
(for a,b,c being set holds (((((a in A & b in A) & c in A) & [ a,b ] in R) & [ b,c ] in R) implies [ a,c ] in R)) by A2,CKB4:def 1;
then R9 is_transitive_in A by RELAT_2:def 8;
hence R is  connected  connected (Order of A) by A3,A4,A5,A6,A7,PARTFUN1:def 2,RELAT_2:def 9,RELAT_2:def 12,RELAT_2:def 14,RELAT_2:def 16;
end;
A8:now
let R being set;
assume A9: R is  connected  connected (Order of A);
then reconsider R9 = R as  connected (Order of A);
A10:now
let a;
let b;
( dom R9 ) = A by PARTFUN1:def 2;
then A c= ( ( dom R9 ) \/ ( rng R9 ) ) by XBOOLE_1:7;
then A11: ( field R9 ) = A by XBOOLE_0:def 10;
A12: (R9 is_connected_in ( field R9 ) & R9 is_reflexive_in ( field R9 )) by RELAT_2:def 9,RELAT_2:def 14;
(a = b or a <> b);
hence ([ a,b ] in R or [ b,a ] in R) by A11,A12,RELAT_2:def 1,RELAT_2:def 6;
end;
(for a holds (for b holds (for c holds (([ a,b ] in R & [ b,c ] in R) implies [ a,c ] in R)))) by A9,ORDERS_1:5;
then A13: R in ( LinPreorders A ) by A9,A10,CKB4:def 1;
(for a holds (for b holds (([ a,b ] in R & [ b,a ] in R) implies a = b))) by A9,ORDERS_1:4;
hence R in ( LinOrders A ) by A13,CKB6:def 1;
end;
let it0 being (Subset of ( LinPreorders A ));
thus (it0 = ( LinOrders A ) implies (for R being set holds (R in it0 iff R is  connected  connected (Order of A)))) by A1,A8;
assume A14: (for R being set holds (R in it0 iff R is  connected  connected (Order of A)));
now
let R being set;
(R in it0 iff R is  connected  connected (Order of A)) by A14;
hence (R in it0 iff R in ( LinOrders A )) by A1,A8;
end;
hence thesis by TARSKI:1;
end;
end;
