environ
vocabularies XBOOLE_0,FUNCT_1,RELAT_1,PBOOLE,SUBSET_1,CARD_3,REALSET1,TARSKI,ZFMISC_1,PARTFUN1,STRUCT_0,MSUALG_1,MSUALG_2,PRELAMB,MSUALG_3,FINSEQ_1,MARGREL1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,MCART_1,UNIALG_2,QC_LANG1,GROUP_6,MSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,STRUCT_0,FUNCT_1,PARTFUN1,MCART_1,FUNCT_2,FINSEQ_1,PBOOLE,TREES_2,FINSEQ_2,CARD_3,LANG1,TREES_4,DTCONSTR,MSUALG_1,MSUALG_2,MSUALG_3,CKB2,CKB3,CKB4,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40,CKB43;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40,CKB43;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,TREES_3,PARTFUN1,FINSEQ_3,FINSEQ_2,CKB1,CKB2,CKB3,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB37,CKB39,CKB40,CKB41,CKB42,CKB43;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,FUNCT_2,PARTFUN1,RELSET_1,PRE_POLY,CKB5,CKB6,CKB8,CKB9,CKB19,CKB21,CKB25,CKB27,CKB36,CKB38;
constructors XXREAL_0,NAT_1,NAT_D,CARD_3,FINSEQOP,DTCONSTR,MSUALG_3,RELSET_1,PBOOLE,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40,CKB43;
requirements NUMERALS,BOOLE,SUBSET;
begin
definition
let S being non void non empty ManySortedSign;
let X being  non-empty (ManySortedSet of (the carrier of S));
func Reverse X -> (ManySortedFunction of ( FreeGen X ),X)
means
:Def20: (for s being (SortSymbol of S) holds ( it . s ) = ( Reverse (s,X) ));
existence
proof
defpred P[ set,set ]
 means
(for s being (SortSymbol of S) holds (s = $1 implies $2 = ( Reverse (s,X) )));
set I = (the carrier of S);
set FG = ( FreeGen X );
A1: (for i being set holds (i in I implies (ex u being set st P[ i,u ])))
proof
let i being set;
assume i in I;
then reconsider s = i as (SortSymbol of S);
take ( Reverse (s,X) );
let s1 being (SortSymbol of S);
assume s1 = i;
hence thesis;
end;
consider H being Function such that A2: (( dom H ) = I & (for i being set holds (i in I implies P[ i,( H . i ) ]))) from CLASSES1:sch 1(A1);
reconsider H as (ManySortedSet of I) by A2,PARTFUN1:def 2,RELAT_1:def 18;
(for x being set holds (x in ( dom H ) implies ( H . x ) is Function))
proof
let i being set;
assume i in ( dom H );
then reconsider s = i as (SortSymbol of S) by A2;
( H . s ) = ( Reverse (s,X) ) by A2;
hence thesis;
end;
then reconsider H as (ManySortedFunction of I) by FUNCOP_1:def 6;
(for i being set holds (i in I implies ( H . i ) is (Function of ( FG . i ),( X . i ))))
proof
let i being set;
assume i in I;
then reconsider s = i as (SortSymbol of S);
(( ( FreeGen X ) . s ) = ( FreeGen (s,X) ) & ( H . i ) = ( Reverse (s,X) )) by A2,CKB40:def 1;
hence thesis;
end;
then reconsider H as (ManySortedFunction of FG,X) by PBOOLE:def 15;
take H;
let s being (SortSymbol of S);
thus thesis by A2;
end;
uniqueness
proof
let A being (ManySortedFunction of ( FreeGen X ),X),B being (ManySortedFunction of ( FreeGen X ),X);
assume that
A3: (for s being (SortSymbol of S) holds ( A . s ) = ( Reverse (s,X) ))
and
A4: (for s being (SortSymbol of S) holds ( B . s ) = ( Reverse (s,X) ));
(for i being set holds (i in (the carrier of S) implies ( A . i ) = ( B . i )))
proof
let i being set;
assume i in (the carrier of S);
then reconsider s = i as (SortSymbol of S);
( A . s ) = ( Reverse (s,X) ) by A3;
hence thesis by A4;
end;
hence thesis by PBOOLE:3;
end;
end;
