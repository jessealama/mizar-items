environ
vocabularies XBOOLE_0,FUNCT_1,RELAT_1,PBOOLE,SUBSET_1,CARD_3,REALSET1,TARSKI,ZFMISC_1,PARTFUN1,STRUCT_0,MSUALG_1,MSUALG_2,PRELAMB,MSUALG_3,FINSEQ_1,MARGREL1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,MCART_1,UNIALG_2,QC_LANG1,GROUP_6,MSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,STRUCT_0,FUNCT_1,PARTFUN1,MCART_1,FUNCT_2,FINSEQ_1,PBOOLE,TREES_2,FINSEQ_2,CARD_3,LANG1,TREES_4,DTCONSTR,MSUALG_1,MSUALG_2,MSUALG_3,CKB2,CKB3,CKB4,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,TREES_3,PARTFUN1,FINSEQ_3,FINSEQ_2,CKB1,CKB2,CKB3,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB37,CKB39;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,FUNCT_2,PARTFUN1,RELSET_1,PRE_POLY,CKB5,CKB6,CKB8,CKB9,CKB19,CKB21,CKB25,CKB27,CKB36,CKB38;
constructors XXREAL_0,NAT_1,NAT_D,CARD_3,FINSEQOP,DTCONSTR,MSUALG_3,RELSET_1,PBOOLE,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
definition
let S being non void non empty ManySortedSign;
let X being  non-empty (ManySortedSet of (the carrier of S));
func FreeGen X -> (GeneratorSet of ( FreeMSA X ))
means
:Def18: (for s being (SortSymbol of S) holds ( it . s ) = ( FreeGen (s,X) ));
existence
proof
deffunc F((Element of S)) = ( FreeGen ($1,X) );
set FM = ( FreeMSA X );
set D = ( DTConMSA X );
consider f being Function such that A1: (( dom f ) = (the carrier of S) & (for s being (Element of S) holds ( f . s ) = F(s))) from FUNCT_1:sch 4;
reconsider f as (ManySortedSet of (the carrier of S)) by A1,PARTFUN1:def 2,RELAT_1:def 18;
f c= (the Sorts of FM)
proof
let x;
assume x in (the carrier of S);
then reconsider s = x as (SortSymbol of S);
( f . s ) = ( FreeGen (s,X) ) by A1;
hence thesis;
end;
then reconsider f as (MSSubset of FM) by PBOOLE:def 18;
(the Sorts of ( GenMSAlg f )) = (the Sorts of FM)
proof
defpred P[ set ]
 means
$1 in ( union ( rng (the Sorts of ( GenMSAlg f )) ) );
(the Sorts of ( GenMSAlg f )) is (MSSubset of FM) by MSUALG_2:def 9;
hence A2: (the Sorts of ( GenMSAlg f )) c= (the Sorts of FM) by PBOOLE:def 18;
A3: (for nt being (Symbol of D) holds (for ts being (FinSequence of ( TS D )) holds ((nt ==> ( roots ts ) & (for t being (DecoratedTree of (the carrier of D)) holds (t in ( rng ts ) implies P[ t ]))) implies P[ ( nt -tree ts ) ])))
proof
set G = ( GenMSAlg f );
set OU = ( [: (the carrier' of S),{ (the carrier of S) } :] \/ ( Union ( coprod (X qua (ManySortedSet of (the carrier of S))) ) ) );
let nt being (Symbol of D);
let ts being (FinSequence of ( TS D ));
assume that
A4: nt ==> ( roots ts )
and
A5: (for t being (DecoratedTree of (the carrier of D)) holds (t in ( rng ts ) implies P[ t ]));
reconsider sy = nt as (Element of OU);
A6: [ nt,( roots ts ) ] in (the Rules of D) by A4,LANG1:def 1;
then reconsider rt = ( roots ts ) as (Element of ( OU * )) by ZFMISC_1:87;
[ sy,rt ] in ( REL X ) by A4,LANG1:def 1;
then sy in [: (the carrier' of S),{ (the carrier of S) } :] by CKB16:def 1;
then consider o being (OperSymbol of S),x2 being (Element of { (the carrier of S) }) such that A7: sy = [ o,x2 ] by DOMAIN_1:1;
set ar = ( the_arity_of o );
set rs = ( the_result_sort_of o );
A8: x2 = (the carrier of S) by TARSKI:def 1;
[ nt,( roots ts ) ] in ( REL X ) by A4,LANG1:def 1;
then A9: ( len rt ) = ( len ar ) by A7,A8,CKB17:1;
reconsider B = (the Sorts of G) as (MSSubset of FM) by MSUALG_2:def 9;
A10: ( dom B ) = (the carrier of S) by PARTFUN1:def 2;
A11: ( dom ( roots ts ) ) = ( dom ts ) by TREES_3:def 18;
( rng ar ) c= (the carrier of S) by FINSEQ_1:def 4;
then A12: ( dom ( B * ar ) ) = ( dom ar ) by A10,RELAT_1:27;
A13: (( Seg ( len rt ) ) = ( dom rt ) & ( Seg ( len ar ) ) = ( dom ar )) by FINSEQ_1:def 3;
then A14: ( dom ts ) = ( dom ar ) by A6,A7,A8,A11,CKB17:1;
A15: (for x holds (x in ( dom ( B * ar ) ) implies ( ts . x ) in ( ( B * ar ) . x )))
proof
let x;
assume A16: x in ( dom ( B * ar ) );
then reconsider n = x as Nat by A12;
A17: ( ts . n ) in ( rng ts ) by A12,A11,A9,A13,A16,FUNCT_1:def 3;
( rng ts ) c= ( TS D ) by FINSEQ_1:def 4;
then reconsider T = ( ts . x ) as (Element of ( TS D )) by A17;
P[ T ] by A5,A17;
then consider A being set such that A18: T in A and A19: A in ( rng (the Sorts of G) ) by TARSKI:def 4;
set b = ( ar /. n );
set A1 = { a where a is (Element of ( TS D )): ((ex x being set st (x in ( X . b ) & a = ( root-tree [ x,b ] ))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) = b))) };
A20: A1 = ( FreeSort (X,b) )
.= ( ( FreeSort X ) . b ) by CKB26:def 1;
A21: (ex t being DecoratedTree st (t = ( ts . n ) & ( rt . n ) = ( t . ( {} ) ))) by A12,A11,A9,A13,A16,TREES_3:def 18;
consider s being set such that A22: s in ( dom (the Sorts of G) ) and A23: ( (the Sorts of G) . s ) = A by A19,FUNCT_1:def 3;
reconsider s as (SortSymbol of S) by A22,PARTFUN1:def 2;
A24: (( rng rt ) c= ( [: (the carrier' of S),{ (the carrier of S) } :] \/ ( Union ( coprod X ) ) ) & ( rt . n ) in ( rng rt )) by A12,A9,A13,A16,FINSEQ_1:def 4,FUNCT_1:def 3;
A25:now
per cases  by A24,XBOOLE_0:def 3;
suppose A26: ( rt . n ) in [: (the carrier' of S),{ (the carrier of S) } :];

then consider o1 being (OperSymbol of S),x2 being (Element of { (the carrier of S) }) such that A27: ( rt . n ) = [ o1,x2 ] by DOMAIN_1:1;
A28: x2 = (the carrier of S) by TARSKI:def 1;
then ( the_result_sort_of o1 ) = ( ar . n ) by A6,A7,A8,A12,A11,A14,A16,A26,A27,CKB17:1
.= b by A12,A16,PARTFUN1:def 6;
hence T in ( ( FreeSort X ) . b ) by A20,A21,A27,A28;
end;
suppose A29: ( rt . n ) in ( Union ( coprod X ) );

then ( rt . n ) in ( coprod (( ar . n ),X) ) by A6,A7,A8,A12,A11,A14,A16,CKB17:1;
then ( rt . n ) in ( coprod (b,X) ) by A12,A16,PARTFUN1:def 6;
then A30: (ex a being set st (a in ( X . b ) & ( rt . n ) = [ a,b ])) by CKB3:def 1;
reconsider tt = ( rt . n ) as (Terminal of D) by A29,CKB20:1;
T = ( root-tree tt ) by A21,DTCONSTR:9;
hence T in ( ( FreeSort X ) . b ) by A20,A30;
end;
end;
A31:now
assume b <> s;
then A32: ( ( FreeSort X ) . s ) misses ( ( FreeSort X ) . b ) by CKB32:1;
( (the Sorts of G) . s ) c= ( (the Sorts of FM) . s ) by A2,PBOOLE:def 2;
hence contradiction by A18,A23,A25,A32,XBOOLE_0:3;
end;
( ( B * ar ) . x ) = ( B . ( ar . n ) ) by A16,FUNCT_1:12
.= ( B . ( ar /. n ) ) by A12,A16,PARTFUN1:def 6;
hence thesis by A18,A23,A31;
end;
set AR = (the Arity of S);
set RS = (the ResultSort of S);
set BH = ( ( B # ) * (the Arity of S) );
set O = (the carrier' of S);
A33: ( Den (o,FM) ) = ( ( FreeOper X ) . o ) by MSUALG_1:def 6
.= ( DenOp (o,X) ) by CKB34:def 1;
A34: (( Sym (o,X) ) = [ o,(the carrier of S) ] & nt = [ o,(the carrier of S) ]) by A7,TARSKI:def 1;
( AR . o ) = ar by MSUALG_1:def 1;
then ( BH . o ) = ( product ( B * ar ) ) by CKB1:1;
then A35: ts in ( BH . o ) by A12,A11,A9,A13,A15,CARD_3:9;
( dom ( DenOp (o,X) ) ) = ( ( ( ( FreeSort X ) # ) * AR ) . o ) by FUNCT_2:def 1;
then ts in ( dom ( DenOp (o,X) ) ) by A4,A34,CKB30:1;
then ts in ( ( dom ( DenOp (o,X) ) ) /\ ( BH . o ) ) by A35,XBOOLE_0:def 4;
then A36: ts in ( dom ( ( DenOp (o,X) ) | ( BH . o ) ) ) by RELAT_1:61;
then ( ( ( DenOp (o,X) ) | ( BH . o ) ) . ts ) = ( ( DenOp (o,X) ) . ts ) by FUNCT_1:47
.= ( nt -tree ts ) by A4,A34,CKB33:def 1;
then A37: ( nt -tree ts ) in ( rng ( ( Den (o,FM) ) | ( BH . o ) ) ) by A33,A36,FUNCT_1:def 3;
(( RS . o ) = rs & ( dom ( B * RS ) ) = O) by MSUALG_1:def 2,PARTFUN1:def 2;
then A38: ( ( B * RS ) . o ) = ( B . rs ) by FUNCT_1:12;
B is  opers_closed by MSUALG_2:def 9;
then B is_closed_on o by MSUALG_2:def 6;
then A39: ( rng ( ( Den (o,FM) ) | ( BH . o ) ) ) c= ( ( B * RS ) . o ) by MSUALG_2:def 5;
( B . rs ) in ( rng B ) by A10,FUNCT_1:def 3;
hence thesis by A39,A37,A38,TARSKI:def 4;
end;
A40: (for s being (Symbol of D) holds (s in ( Terminals D ) implies P[ ( root-tree s ) ]))
proof
let t being (Symbol of D);
assume t in ( Terminals D );
then t in ( Union ( coprod X ) ) by CKB20:1;
then t in ( union ( rng ( coprod X ) ) ) by CARD_3:def 4;
then consider A being set such that A41: t in A and A42: A in ( rng ( coprod X ) ) by TARSKI:def 4;
consider s being set such that A43: s in ( dom ( coprod X ) ) and A44: ( ( coprod X ) . s ) = A by A42,FUNCT_1:def 3;
reconsider s as (SortSymbol of S) by A43,PARTFUN1:def 2;
A = ( coprod (s,X) ) by A44,CKB7:def 1;
then (ex a being set st (a in ( X . s ) & t = [ a,s ])) by A41,CKB3:def 1;
then A45: ( root-tree t ) in ( FreeGen (s,X) ) by CKB37:def 1;
f is (MSSubset of ( GenMSAlg f )) by MSUALG_2:def 17;
then f c= (the Sorts of ( GenMSAlg f )) by PBOOLE:def 18;
then ( f . s ) c= ( (the Sorts of ( GenMSAlg f )) . s ) by PBOOLE:def 2;
then A46: ( FreeGen (s,X) ) c= ( (the Sorts of ( GenMSAlg f )) . s ) by A1;
( dom (the Sorts of ( GenMSAlg f )) ) = (the carrier of S) by PARTFUN1:def 2;
then ( (the Sorts of ( GenMSAlg f )) . s ) in ( rng (the Sorts of ( GenMSAlg f )) ) by FUNCT_1:def 3;
hence thesis by A46,A45,TARSKI:def 4;
end;
A47: (for t being (DecoratedTree of (the carrier of D)) holds (t in ( TS D ) implies P[ t ])) from DTCONSTR:sch 7(A40,A3);
A48: ( union ( rng (the Sorts of FM) ) ) c= ( union ( rng (the Sorts of ( GenMSAlg f )) ) )
proof
set D = ( DTConMSA X );
let x;
assume x in ( union ( rng (the Sorts of FM) ) );
then consider A being set such that A49: x in A and A50: A in ( rng (the Sorts of FM) ) by TARSKI:def 4;
consider s being set such that A51: s in ( dom ( FreeSort X ) ) and A52: ( ( FreeSort X ) . s ) = A by A50,FUNCT_1:def 3;
reconsider s as (SortSymbol of S) by A51,PARTFUN1:def 2;
A = ( FreeSort (X,s) ) by A52,CKB26:def 1
.= { a where a is (Element of ( TS D )): ((ex x being set st (x in ( X . s ) & a = ( root-tree [ x,s ] ))) or (ex o1 being (OperSymbol of S) st ([ o1,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o1 ) = s))) };
then (ex a being (Element of ( TS D )) st (a = x & ((ex x being set st (x in ( X . s ) & a = ( root-tree [ x,s ] ))) or (ex o1 being (OperSymbol of S) st ([ o1,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o1 ) = s))))) by A49;
hence thesis by A47;
end;
let x;
assume x in (the carrier of S);
then reconsider s = x as (SortSymbol of S);
( (the Sorts of FM) . s ) c= ( (the Sorts of ( GenMSAlg f )) . s )
proof
let a being set;
assume A53: a in ( (the Sorts of FM) . s );
(the carrier of S) = ( dom (the Sorts of FM) ) by PARTFUN1:def 2;
then ( (the Sorts of FM) . s ) in ( rng (the Sorts of FM) ) by FUNCT_1:def 3;
then a in ( union ( rng (the Sorts of FM) ) ) by A53,TARSKI:def 4;
then consider A being set such that A54: a in A and A55: A in ( rng (the Sorts of ( GenMSAlg f )) ) by A48,TARSKI:def 4;
consider b being set such that A56: b in ( dom (the Sorts of ( GenMSAlg f )) ) and A57: ( (the Sorts of ( GenMSAlg f )) . b ) = A by A55,FUNCT_1:def 3;
reconsider b as (SortSymbol of S) by A56,PARTFUN1:def 2;
now
assume b <> s;
then ( ( FreeSort X ) . s ) misses ( ( FreeSort X ) . b ) by CKB32:1;
then A58: ( ( ( FreeSort X ) . s ) /\ ( ( FreeSort X ) . b ) ) = ( {} ) by XBOOLE_0:def 7;
( (the Sorts of ( GenMSAlg f )) . b ) c= ( (the Sorts of FM) . b ) by A2,PBOOLE:def 2;
hence contradiction by A53,A54,A57,A58,XBOOLE_0:def 4;
end;
hence thesis by A54,A57;
end;
hence thesis;
end;
then reconsider f as (GeneratorSet of FM) by CKB11:def 1;
take f;
thus thesis by A1;
end;
uniqueness
proof
let A being (GeneratorSet of ( FreeMSA X )),B being (GeneratorSet of ( FreeMSA X ));
assume that
A59: (for s being (SortSymbol of S) holds ( A . s ) = ( FreeGen (s,X) ))
and
A60: (for s being (SortSymbol of S) holds ( B . s ) = ( FreeGen (s,X) ));
(for i being set holds (i in (the carrier of S) implies ( A . i ) = ( B . i )))
proof
let i being set;
assume i in (the carrier of S);
then reconsider s = i as (SortSymbol of S);
( A . s ) = ( FreeGen (s,X) ) by A59;
hence thesis by A60;
end;
hence thesis by PBOOLE:3;
end;
end;
