environ
vocabularies XBOOLE_0,FUNCT_1,RELAT_1,PBOOLE,SUBSET_1,CARD_3,REALSET1,TARSKI,ZFMISC_1,PARTFUN1,STRUCT_0,MSUALG_1,MSUALG_2,PRELAMB,MSUALG_3,FINSEQ_1,MARGREL1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,MCART_1,UNIALG_2,QC_LANG1,GROUP_6,MSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,STRUCT_0,FUNCT_1,PARTFUN1,MCART_1,FUNCT_2,FINSEQ_1,PBOOLE,TREES_2,FINSEQ_2,CARD_3,LANG1,TREES_4,DTCONSTR,MSUALG_1,MSUALG_2,MSUALG_3,CKB2,CKB3,CKB4,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,TREES_3,PARTFUN1,FINSEQ_3,FINSEQ_2,CKB1,CKB2,CKB3,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB37,CKB39,CKB40,CKB41;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,FUNCT_2,PARTFUN1,RELSET_1,PRE_POLY,CKB5,CKB6,CKB8,CKB9,CKB19,CKB21,CKB25,CKB27,CKB36,CKB38;
constructors XXREAL_0,NAT_1,NAT_D,CARD_3,FINSEQOP,DTCONSTR,MSUALG_3,RELSET_1,PBOOLE,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
theorem
(for S being non void non empty ManySortedSign holds (for X being  non-empty (ManySortedSet of (the carrier of S)) holds ( union ( rng ( FreeGen X ) ) ) = { ( root-tree t ) where t is (Symbol of ( DTConMSA X )): t in ( Terminals ( DTConMSA X ) ) }))
proof
let S being non void non empty ManySortedSign;
let X being  non-empty (ManySortedSet of (the carrier of S));
set D = ( DTConMSA X );
set A = ( union ( rng ( FreeGen X ) ) );
set B = { ( root-tree t ) where t is (Symbol of D): t in ( Terminals D ) };
thus A c= B
proof
let x;
assume x in A;
then consider C being set such that A1: x in C and A2: C in ( rng ( FreeGen X ) ) by TARSKI:def 4;
consider s being set such that A3: s in ( dom ( FreeGen X ) ) and A4: ( ( FreeGen X ) . s ) = C by A2,FUNCT_1:def 3;
reconsider s as (SortSymbol of S) by A3,PARTFUN1:def 2;
C = ( FreeGen (s,X) ) by A4,CKB40:def 1
.= { ( root-tree t ) where t is (Symbol of D): (t in ( Terminals D ) & ( t `2 ) = s) } by CKB39:1;
then (ex t being (Symbol of D) st ((x = ( root-tree t ) & t in ( Terminals D )) & ( t `2 ) = s)) by A1;
hence thesis;
end;

let x;
assume x in B;
then consider t being (Symbol of D) such that A5: x = ( root-tree t ) and A6: t in ( Terminals D );
consider s being (SortSymbol of S),a being set such that a in ( X . s ) and A7: t = [ a,s ] by A6,CKB22:1;
( t `2 ) = s by A7,MCART_1:7;
then x in { ( root-tree tt ) where tt is (Symbol of D): (tt in ( Terminals D ) & ( tt `2 ) = s) } by A5,A6;
then x in ( FreeGen (s,X) ) by CKB39:1;
then A8: x in ( ( FreeGen X ) . s ) by CKB40:def 1;
( dom ( FreeGen X ) ) = (the carrier of S) by PARTFUN1:def 2;
then ( ( FreeGen X ) . s ) in ( rng ( FreeGen X ) ) by FUNCT_1:def 3;
hence thesis by A8,TARSKI:def 4;
end;
