environ
vocabularies XBOOLE_0,FUNCT_1,RELAT_1,PBOOLE,SUBSET_1,CARD_3,REALSET1,TARSKI,ZFMISC_1,PARTFUN1,STRUCT_0,MSUALG_1,MSUALG_2,PRELAMB,MSUALG_3,FINSEQ_1,MARGREL1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,MCART_1,UNIALG_2,QC_LANG1,GROUP_6,MSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,STRUCT_0,FUNCT_1,PARTFUN1,MCART_1,FUNCT_2,FINSEQ_1,PBOOLE,TREES_2,FINSEQ_2,CARD_3,LANG1,TREES_4,DTCONSTR,MSUALG_1,MSUALG_2,MSUALG_3,CKB2,CKB3,CKB4,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,TREES_3,PARTFUN1,FINSEQ_3,FINSEQ_2,CKB1,CKB2,CKB3,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB37,CKB39,CKB40,CKB41,CKB42;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,FUNCT_2,PARTFUN1,RELSET_1,PRE_POLY,CKB5,CKB6,CKB8,CKB9,CKB19,CKB21,CKB25,CKB27,CKB36,CKB38;
constructors XXREAL_0,NAT_1,NAT_D,CARD_3,FINSEQOP,DTCONSTR,MSUALG_3,RELSET_1,PBOOLE,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35,CKB37,CKB40;
requirements NUMERALS,BOOLE,SUBSET;
begin
definition
let S being non void non empty ManySortedSign;
let X being  non-empty (ManySortedSet of (the carrier of S));
let s being (SortSymbol of S);
func Reverse (s,X) -> (Function of ( FreeGen (s,X) ),( X . s ))
means
:Def19: (for t being (Symbol of ( DTConMSA X )) holds (( root-tree t ) in ( FreeGen (s,X) ) implies ( it . ( root-tree t ) ) = ( t `1 )));
existence
proof
set A = ( FreeGen (s,X) );
set D = ( DTConMSA X );
defpred P[ set,set ]
 means
(for t being (Symbol of D) holds ($1 = ( root-tree t ) implies $2 = ( t `1 )));
A1: (for x being set holds (x in A implies (ex a being set st (a in ( X . s ) & P[ x,a ]))))
proof
let x being set;
assume x in A;
then x in { ( root-tree t ) where t is (Symbol of D): (t in ( Terminals D ) & ( t `2 ) = s) } by CKB39:1;
then consider t being (Symbol of D) such that A2: x = ( root-tree t ) and A3: t in ( Terminals D ) and A4: ( t `2 ) = s;
consider s1 being (SortSymbol of S),a being set such that A5: a in ( X . s1 ) and A6: t = [ a,s1 ] by A3,CKB22:1;
take a;
thus a in ( X . s ) by A4,A5,A6,MCART_1:7;
let t1 being (Symbol of D);
assume x = ( root-tree t1 );
then t = t1 by A2,TREES_4:4;
hence thesis by A6,MCART_1:7;
end;
consider f being Function such that A7: ((( dom f ) = A & ( rng f ) c= ( X . s )) & (for x being set holds (x in A implies P[ x,( f . x ) ]))) from FUNCT_1:sch 5(A1);
reconsider f as (Function of A,( X . s )) by A7,FUNCT_2:2;
take f;
let t being (Symbol of D);
assume ( root-tree t ) in A;
hence thesis by A7;
end;
uniqueness
proof
set D = ( DTConMSA X );
set C = { ( root-tree t ) where t is (Symbol of D): (t in ( Terminals D ) & ( t `2 ) = s) };
let A being (Function of ( FreeGen (s,X) ),( X . s )),B being (Function of ( FreeGen (s,X) ),( X . s ));
assume that
A8: (for t being (Symbol of ( DTConMSA X )) holds (( root-tree t ) in ( FreeGen (s,X) ) implies ( A . ( root-tree t ) ) = ( t `1 )))
and
A9: (for t being (Symbol of ( DTConMSA X )) holds (( root-tree t ) in ( FreeGen (s,X) ) implies ( B . ( root-tree t ) ) = ( t `1 )));
A10: ( FreeGen (s,X) ) = C by CKB39:1;
A11: (for i being set holds (i in C implies ( A . i ) = ( B . i )))
proof
let i being set;
assume A12: i in C;
then consider t being (Symbol of D) such that A13: i = ( root-tree t ) and t in ( Terminals D ) and ( t `2 ) = s;
( A . ( root-tree t ) ) = ( t `1 ) by A8,A10,A12,A13;
hence thesis by A9,A10,A12,A13;
end;
(( dom A ) = C & ( dom B ) = C) by A10,FUNCT_2:def 1;
hence thesis by A11,FUNCT_1:2;
end;
end;
