environ
vocabularies XBOOLE_0,FUNCT_1,RELAT_1,PBOOLE,SUBSET_1,CARD_3,REALSET1,TARSKI,ZFMISC_1,PARTFUN1,STRUCT_0,MSUALG_1,MSUALG_2,PRELAMB,MSUALG_3,FINSEQ_1,MARGREL1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,MCART_1,UNIALG_2,QC_LANG1,GROUP_6,MSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,STRUCT_0,FUNCT_1,PARTFUN1,MCART_1,FUNCT_2,FINSEQ_1,PBOOLE,TREES_2,FINSEQ_2,CARD_3,LANG1,TREES_4,DTCONSTR,MSUALG_1,MSUALG_2,MSUALG_3,CKB2,CKB3,CKB4,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,TREES_3,PARTFUN1,FINSEQ_3,FINSEQ_2,CKB1,CKB2,CKB3,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,FUNCT_2,PARTFUN1,RELSET_1,PRE_POLY,CKB5,CKB6,CKB8,CKB9,CKB19,CKB21,CKB25,CKB27,CKB36;
constructors XXREAL_0,NAT_1,NAT_D,CARD_3,FINSEQOP,DTCONSTR,MSUALG_3,RELSET_1,PBOOLE,CKB2,CKB3,CKB7,CKB11,CKB13,CKB14,CKB16,CKB18,CKB23,CKB24,CKB26,CKB33,CKB34,CKB35;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
definition
let S being non void non empty ManySortedSign;
let X being  non-empty (ManySortedSet of (the carrier of S));
let s being (SortSymbol of S);
func FreeGen (s,X) -> (Subset of ( ( FreeSort X ) . s ))
means
:Def17: (for x being set holds (x in it iff (ex a being set st (a in ( X . s ) & x = ( root-tree [ a,s ] )))));
existence
proof
defpred P[ set ]
 means
(ex a being set st (a in ( X . s ) & $1 = ( root-tree [ a,s ] )));
set D = ( DTConMSA X );
consider A being set such that A1: (for x holds (x in A iff (x in ( ( FreeSort X ) . s ) & P[ x ]))) from XBOOLE_0:sch 1;
A c= ( ( FreeSort X ) . s )
proof
let x;
assume x in A;
hence thesis by A1;
end;
then reconsider A as (Subset of ( ( FreeSort X ) . s ));
(for x holds (x in A iff P[ x ]))
proof
( dom ( coprod X ) ) = (the carrier of S) by PARTFUN1:def 2;
then ( ( coprod X ) . s ) in ( rng ( coprod X ) ) by FUNCT_1:def 3;
then A2: ( coprod (s,X) ) in ( rng ( coprod X ) ) by CKB7:def 1;
A3: ( Terminals D ) = ( Union ( coprod X ) ) by CKB20:1;
let x;
thus (x in A implies P[ x ]) by A1;
set A = { aa where aa is (Element of ( TS D )): ((ex x being set st (x in ( X . s ) & aa = ( root-tree [ x,s ] ))) or (ex o1 being (OperSymbol of S) st ([ o1,(the carrier of S) ] = ( aa . ( {} ) ) & ( the_result_sort_of o1 ) = s))) };
assume A4: P[ x ];
then consider a being set such that A5: a in ( X . s ) and A6: x = ( root-tree [ a,s ] );
A7: ( ( FreeSort X ) . s ) = ( FreeSort (X,s) ) by CKB26:def 1;
set sa = [ a,s ];
sa in ( coprod (s,X) ) by A5,CKB3:def 1;
then sa in ( union ( rng ( coprod X ) ) ) by A2,TARSKI:def 4;
then A8: sa in ( Terminals D ) by A3,CARD_3:def 4;
then reconsider sa as (Symbol of D);
reconsider b = ( root-tree sa ) as (Element of ( TS D )) by A8,DTCONSTR:def 1;
b in A by A5;
hence thesis by A1,A4,A6,A7;
end;
hence thesis;
end;
uniqueness
proof
let A being (Subset of ( ( FreeSort X ) . s )),B being (Subset of ( ( FreeSort X ) . s ));
assume that
A9: (for x being set holds (x in A iff (ex a being set st (a in ( X . s ) & x = ( root-tree [ a,s ] )))))
and
A10: (for x being set holds (x in B iff (ex a being set st (a in ( X . s ) & x = ( root-tree [ a,s ] )))));
thus A c= B
proof
let x being set;
assume x in A;
then (ex a being set st (a in ( X . s ) & x = ( root-tree [ a,s ] ))) by A9;
hence thesis by A10;
end;

let x being set;
assume x in B;
then (ex a being set st (a in ( X . s ) & x = ( root-tree [ a,s ] ))) by A10;
hence thesis by A9;
end;
end;
