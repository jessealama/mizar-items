environ
vocabularies NUMBERS,STRUCT_0,ZFMISC_1,RLVECT_1,ALGSTR_0,VECTSP_1,XBOOLE_0,SUPINF_2,MESFUNC1,SUBSET_1,RELAT_1,FINSEQ_1,ARYTM_3,PARTFUN1,TARSKI,CARD_3,NAT_1,ORDINAL4,FUNCT_1,FVSUM_1,ALGSTR_1,BINOP_1,LATTICES,PRE_POLY,ALGSEQ_1,FINSET_1,ARYTM_1,FUNCOP_1,GROUP_1,FUNCT_4,ORDINAL1,XXREAL_0,FINSEQ_2,MEMBER_1,FUNCT_2,CARD_1,POLYNOM1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,PBOOLE,RELSET_1,FINSET_1,ORDINAL1,PARTFUN1,FUNCT_2,FINSEQ_1,STRUCT_0,ALGSTR_0,FUNCT_3,XXREAL_0,BINOP_1,NAT_1,ALGSTR_1,RLVECT_1,FINSEQ_2,GROUP_1,VECTSP_1,FUNCOP_1,FUNCT_7,MATRLIN,VFUNCT_1,FVSUM_1,PRE_POLY,RECDEF_1;
definitions TARSKI,XBOOLE_0,FUNCT_1,FUNCT_2,RLVECT_1,VECTSP_1,GROUP_1,FINSEQ_2,STRUCT_0,ALGSTR_0,FUNCOP_1;
theorems FUNCT_1,FINSET_1,FINSEQ_3,FINSEQ_4,ZFMISC_1,FINSEQ_1,FUNCT_2,RLVECT_1,VECTSP_1,FUNCOP_1,TARSKI,FUNCT_7,BINOP_1,RELAT_1,MATRLIN,FINSEQ_2,ORDINAL1,FINSEQ_5,NAT_1,PBOOLE,SUBSET_1,FVSUM_1,FUNCT_3,GROUP_1,XBOOLE_0,XBOOLE_1,RLVECT_2,PARTFUN1,XREAL_1,XXREAL_0,PRE_POLY,VFUNCT_1;
schemes FRAENKEL,FUNCT_2,FINSEQ_2,FINSEQ_1,FINSEQ_4,SUBSET_1,BINOP_1;
registrations SUBSET_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XREAL_0,CARD_1,MEMBERED,FINSEQ_1,FINSEQ_2,STRUCT_0,VECTSP_1,ALGSTR_1,VALUED_0,PRE_POLY,RELSET_1,VFUNCT_1,FUNCT_2,CKB1,CKB2;
constructors BINOP_1,FINSEQOP,SETWISEO,FINSEQ_4,RFUNCT_3,FUNCT_7,ALGSTR_1,FVSUM_1,MATRLIN,RECDEF_1,RELSET_1,PBOOLE,VFUNCT_1;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
theorem
Th5: (for K being non  empty addLoopStr holds (for p1,p2 being (FinSequence of (the carrier of K)) holds (( dom p1 ) = ( dom p2 ) implies ( dom ( p1 + p2 ) ) = ( dom p1 ))))
proof
let K being non  empty addLoopStr;
let p1 being (FinSequence of (the carrier of K));
let p2 being (FinSequence of (the carrier of K));
assume A1: ( dom p1 ) = ( dom p2 );
A2: (( rng <: p1,p2 :> ) c= [: ( rng p1 ),( rng p2 ) :] & [: ( rng p1 ),( rng p2 ) :] c= [: (the carrier of K),(the carrier of K) :]) by FUNCT_3:51,ZFMISC_1:96;
A3: [: (the carrier of K),(the carrier of K) :] = ( dom (the addF of K) ) by FUNCT_2:def 1;
thus ( dom ( p1 + p2 ) ) = ( dom ( (the addF of K) .: (p1,p2) ) ) by FVSUM_1:def 3
.= ( dom <: p1,p2 :> ) by A2,A3,RELAT_1:27,XBOOLE_1:1
.= ( ( dom p1 ) /\ ( dom p2 ) ) by FUNCT_3:def 7
.= ( dom p1 ) by A1;
end;
