environ
vocabularies NUMBERS,STRUCT_0,ZFMISC_1,RLVECT_1,ALGSTR_0,VECTSP_1,XBOOLE_0,SUPINF_2,MESFUNC1,SUBSET_1,RELAT_1,FINSEQ_1,ARYTM_3,PARTFUN1,TARSKI,CARD_3,NAT_1,ORDINAL4,FUNCT_1,FVSUM_1,ALGSTR_1,BINOP_1,LATTICES,PRE_POLY,ALGSEQ_1,FINSET_1,ARYTM_1,FUNCOP_1,GROUP_1,FUNCT_4,ORDINAL1,XXREAL_0,FINSEQ_2,MEMBER_1,FUNCT_2,CARD_1,POLYNOM1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,PBOOLE,RELSET_1,FINSET_1,ORDINAL1,PARTFUN1,FUNCT_2,FINSEQ_1,STRUCT_0,ALGSTR_0,FUNCT_3,XXREAL_0,BINOP_1,NAT_1,ALGSTR_1,RLVECT_1,FINSEQ_2,GROUP_1,VECTSP_1,FUNCOP_1,FUNCT_7,MATRLIN,VFUNCT_1,FVSUM_1,PRE_POLY,RECDEF_1,CKB8,CKB9,CKB21,CKB22,CKB23,CKB24,CKB25,CKB32,CKB34,CKB35,CKB38,CKB41;
definitions TARSKI,XBOOLE_0,FUNCT_1,FUNCT_2,RLVECT_1,VECTSP_1,GROUP_1,FINSEQ_2,STRUCT_0,ALGSTR_0,FUNCOP_1,CKB8,CKB9,CKB21,CKB22,CKB25,CKB34,CKB35,CKB38,CKB41;
theorems FUNCT_1,FINSET_1,FINSEQ_3,FINSEQ_4,ZFMISC_1,FINSEQ_1,FUNCT_2,RLVECT_1,VECTSP_1,FUNCOP_1,TARSKI,FUNCT_7,BINOP_1,RELAT_1,MATRLIN,FINSEQ_2,ORDINAL1,FINSEQ_5,NAT_1,PBOOLE,SUBSET_1,FVSUM_1,FUNCT_3,GROUP_1,XBOOLE_0,XBOOLE_1,RLVECT_2,PARTFUN1,XREAL_1,XXREAL_0,PRE_POLY,VFUNCT_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB18,CKB19,CKB20,CKB21,CKB22,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43;
schemes FRAENKEL,FUNCT_2,FINSEQ_2,FINSEQ_1,FINSEQ_4,SUBSET_1,BINOP_1;
registrations SUBSET_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XREAL_0,CARD_1,MEMBERED,FINSEQ_1,FINSEQ_2,STRUCT_0,VECTSP_1,ALGSTR_1,VALUED_0,PRE_POLY,RELSET_1,VFUNCT_1,FUNCT_2,CKB1,CKB2,CKB16,CKB17;
constructors BINOP_1,FINSEQOP,SETWISEO,FINSEQ_4,RFUNCT_3,FUNCT_7,ALGSTR_1,FVSUM_1,MATRLIN,RECDEF_1,RELSET_1,PBOOLE,VFUNCT_1,CKB9,CKB21,CKB22,CKB23,CKB25,CKB32,CKB34,CKB35,CKB38,CKB41;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
definition
let n being Ordinal;
let L being  Abelian  add-associative  right_zeroed  right_complementable  commutative non empty doubleLoopStr;
let p being (Series of n,L);
let q being (Series of n,L);
redefine func p *' q;

commutativity
proof
let p being (Series of n,L),q being (Series of n,L);
reconsider pq = ( p *' q ),qp = ( q *' p ) as (Function of ( Bags n ),(the carrier of L));
now
let b being (Element of ( Bags n ));
defpred P[ set,set ]
 means
(ex b1,b2 being (bag of n) st (( ( decomp b ) . $1 ) = <* b1,b2 *> & ( ( decomp b ) . $2 ) = <* b2,b1 *>));
consider s being (FinSequence of (the carrier of L)) such that A1: ( pq . b ) = ( Sum s ) and A2: ( len s ) = ( len ( decomp b ) ) and A3: (for k being (Element of ( NAT )) holds (k in ( dom s ) implies (ex b1,b2 being (bag of n) st (( ( decomp b ) /. k ) = <* b1,b2 *> & ( s /. k ) = ( ( p . b1 ) * ( q . b2 ) ))))) by CKB41:def 1;
A4: ( dom s ) = ( dom ( decomp b ) ) by A2,FINSEQ_3:29;
then reconsider ds = ( dom s ) as non empty set;
A5:now
let e being set;
assume A6: e in ds;
then consider b1 being (bag of n),b2 being (bag of n) such that A7: ( ( decomp b ) /. e ) = <* b1,b2 *> and A8: b = ( b1 + b2 ) by A4,PRE_POLY:68;
consider d being (Element of ( NAT )) such that A9: d in ( dom ( decomp b ) ) and A10: ( ( decomp b ) /. d ) = <* b2,b1 *> by A8,PRE_POLY:69;
reconsider d as set;
take d;
thus d in ds by A2,A9,FINSEQ_3:29;
thus P[ e,d ]
proof
take b1;
take b2;
thus thesis by A4,A6,A7,A9,A10,PARTFUN1:def 6;
end;

end;
consider f being (Function of ds,ds) such that A11: (for e being set holds (e in ds implies P[ e,( f . e ) ])) from FUNCT_2:sch 1(A5);
A12: ( dom f ) = ds by FUNCT_2:def 1;
ds c= ( rng f )
proof
let x being set;
assume A13: x in ds;
then consider b1 being (bag of n),b2 being (bag of n) such that A14: ( ( decomp b ) . x ) = <* b1,b2 *> and A15: ( ( decomp b ) . ( f . x ) ) = <* b2,b1 *> by A11;
A16: ( f . x ) in ( rng f ) by A12,A13,FUNCT_1:def 3;
then A17: ( f . ( f . x ) ) in ( rng f ) by A12,FUNCT_1:def 3;
consider b3 being (bag of n),b4 being (bag of n) such that A18: ( ( decomp b ) . ( f . x ) ) = <* b3,b4 *> and A19: ( ( decomp b ) . ( f . ( f . x ) ) ) = <* b4,b3 *> by A11,A16;
(b3 = b2 & b4 = b1) by A15,A18,FINSEQ_1:77;
hence thesis by A4,A13,A17,A14,A19,FUNCT_1:def 4;
end;
then A20: ( rng f ) = ds by XBOOLE_0:def 10;
f is  one-to-one
proof
let x1 being set,x2 being set;
assume that
A21: x1 in ( dom f )
and
A22: x2 in ( dom f )
and
A23: ( f . x1 ) = ( f . x2 );
consider b3 being (bag of n),b4 being (bag of n) such that A24: ( ( decomp b ) . x2 ) = <* b3,b4 *> and A25: ( ( decomp b ) . ( f . x2 ) ) = <* b4,b3 *> by A11,A22;
consider b1 being (bag of n),b2 being (bag of n) such that A26: ( ( decomp b ) . x1 ) = <* b1,b2 *> and A27: ( ( decomp b ) . ( f . x1 ) ) = <* b2,b1 *> by A11,A21;
(b2 = b4 & b1 = b3) by A23,A27,A25,FINSEQ_1:77;
hence thesis by A4,A21,A22,A26,A24,FUNCT_1:def 4;
end;
then reconsider f as (Permutation of ( dom s )) by A20,FUNCT_2:57;
consider t being (FinSequence of (the carrier of L)) such that A28: ( qp . b ) = ( Sum t ) and A29: ( len t ) = ( len ( decomp b ) ) and A30: (for k being (Element of ( NAT )) holds (k in ( dom t ) implies (ex b1,b2 being (bag of n) st (( ( decomp b ) /. k ) = <* b1,b2 *> & ( t /. k ) = ( ( q . b1 ) * ( p . b2 ) ))))) by CKB41:def 1;
A31: ( dom t ) = ( dom ( decomp b ) ) by A29,FINSEQ_3:29;
now
let i being (Element of ( NAT ));
reconsider fi = ( f . i ) as (Element of ( NAT ));
A32: ( dom s ) = ( dom ( decomp b ) ) by A2,FINSEQ_3:29;
assume A33: i in ( dom t );
then consider b1 being (bag of n),b2 being (bag of n) such that A34: ( ( decomp b ) /. i ) = <* b1,b2 *> and A35: ( t /. i ) = ( ( q . b1 ) * ( p . b2 ) ) by A30;
A36: ( t /. i ) = ( t . i ) by A33,PARTFUN1:def 6;
consider b5 being (bag of n),b6 being (bag of n) such that A37: ( ( decomp b ) . i ) = <* b5,b6 *> and A38: ( ( decomp b ) . ( f . i ) ) = <* b6,b5 *> by A4,A31,A11,A33;
( dom s ) = ( dom t ) by A2,A29,FINSEQ_3:29;
then ( ( decomp b ) /. i ) = ( ( decomp b ) . i ) by A33,A32,PARTFUN1:def 6;
then A39: (b1 = b5 & b2 = b6) by A34,A37,FINSEQ_1:77;
A40: ( f . i ) in ( rng f ) by A4,A31,A12,A33,FUNCT_1:def 3;
then A41: ( s /. fi ) = ( s . fi ) by PARTFUN1:def 6;
consider b3 being (bag of n),b4 being (bag of n) such that A42: ( ( decomp b ) /. fi ) = <* b3,b4 *> and A43: ( s /. fi ) = ( ( p . b3 ) * ( q . b4 ) ) by A3,A40;
A44: ( ( decomp b ) /. fi ) = ( ( decomp b ) . fi ) by A40,A32,PARTFUN1:def 6;
then b3 = b6 by A42,A38,FINSEQ_1:77;
hence ( t . i ) = ( s . ( f . i ) ) by A35,A42,A43,A38,A36,A41,A44,A39,FINSEQ_1:77;
end;
hence ( pq . b ) = ( qp . b ) by A1,A2,A28,A29,RLVECT_2:6;
end;
hence ( p *' q ) = ( q *' p ) by FUNCT_2:63;
end;
end;
