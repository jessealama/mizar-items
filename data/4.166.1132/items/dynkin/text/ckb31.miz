environ
vocabularies XBOOLE_0,PROB_1,SUBSET_1,SETFAM_1,NUMBERS,RELAT_1,FUNCT_1,FINSET_1,ARYTM_3,ORDINAL1,CARD_1,FUNCT_7,CARD_3,TARSKI,ZFMISC_1,PROB_2,XXREAL_0,MSSUBFAM,NAT_1,EQREL_1,DYNKIN,FINSUB_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,FINSET_1,CARD_1,NUMBERS,SETFAM_1,RELAT_1,FUNCT_1,FUNCT_2,NAT_1,FUNCT_7,CARD_3,PROB_1,FINSUB_1,PROB_2,XXREAL_0,CKB5,CKB7,CKB8,CKB10,CKB11,CKB12,CKB19;
definitions SUBSET_1,CARD_1,ORDINAL1,CARD_3,CKB7,CKB8,CKB11,CKB12,CKB19;
theorems TARSKI,FUNCT_1,ZFMISC_1,FUNCT_2,SUBSET_1,NAT_1,RELAT_1,SETFAM_1,PROB_2,FINSUB_1,XBOOLE_0,XBOOLE_1,PROB_1,ORDINAL1,XXREAL_0,FUNCT_7,MEASURE1,CKB1,CKB2,CKB4,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
schemes FUNCT_2,NAT_1,FINSET_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FINSET_1,XREAL_0,FUNCT_7,CKB3,CKB20;
constructors SETFAM_1,FINSUB_1,NAT_1,PROB_2,XREAL_0,FUNCT_7,ENUMSET1,RELSET_1,CKB5,CKB7,CKB8,CKB11,CKB12,CKB19;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for non  empty set;
reserve D for non  empty (Subset-Family of Omega);
reserve x for set;
reserve z for set;
reserve Y for set;
definition
let Omega being non  empty set;
let E being (Subset-Family of Omega);
func generated_Dynkin_System E -> (Dynkin_System of Omega) means 
:Def8: (E c= it & (for D being (Dynkin_System of Omega) holds (E c= D implies it c= D)));
existence
proof
defpred P[ set ]
 means
($1 is (Dynkin_System of Omega) & E c= $1);
consider Y such that A1: (for x holds (x in Y iff (x in ( bool ( bool Omega ) ) & P[ x ]))) from XBOOLE_0:sch 1;
( bool Omega ) is (Dynkin_System of Omega) by CKB21:1;
then reconsider Y as non  empty set by A1;
(for z holds (z in Y implies z is (Dynkin_System of Omega))) by A1;
then reconsider I = ( meet Y ) as (Dynkin_System of Omega) by CKB22:1;
take I;
(for y being (Element of Y) holds E c= y) by A1;
hence E c= I by CKB9:1;
let D being (Dynkin_System of Omega);
assume E c= D;
then D in Y by A1;
hence thesis by SETFAM_1:3;
end;
uniqueness
proof
let I1 being (Dynkin_System of Omega);
let I2 being (Dynkin_System of Omega);
assume A2: (E c= I1 & (for D being (Dynkin_System of Omega) holds (E c= D implies I1 c= D)));
assume (E c= I2 & (for D being (Dynkin_System of Omega) holds (E c= D implies I2 c= D)));
then (I1 c= I2 & I2 c= I1) by A2;
hence thesis by XBOOLE_0:def 10;
end;
end;
