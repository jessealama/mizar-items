environ
vocabularies XBOOLE_0,PROB_1,SUBSET_1,SETFAM_1,NUMBERS,RELAT_1,FUNCT_1,FINSET_1,ARYTM_3,ORDINAL1,CARD_1,FUNCT_7,CARD_3,TARSKI,ZFMISC_1,PROB_2,XXREAL_0,MSSUBFAM,NAT_1,EQREL_1,DYNKIN,FINSUB_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,FINSET_1,CARD_1,NUMBERS,SETFAM_1,RELAT_1,FUNCT_1,FUNCT_2,NAT_1,FUNCT_7,CARD_3,PROB_1,FINSUB_1,PROB_2,XXREAL_0,CKB5,CKB7;
definitions SUBSET_1,CARD_1,ORDINAL1,CARD_3,CKB7;
theorems TARSKI,FUNCT_1,ZFMISC_1,FUNCT_2,SUBSET_1,NAT_1,RELAT_1,SETFAM_1,PROB_2,FINSUB_1,XBOOLE_0,XBOOLE_1,PROB_1,ORDINAL1,XXREAL_0,FUNCT_7,MEASURE1,CKB1,CKB2,CKB4,CKB6,CKB7;
schemes FUNCT_2,NAT_1,FINSET_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FINSET_1,XREAL_0,FUNCT_7,CKB3;
constructors SETFAM_1,FINSUB_1,NAT_1,PROB_2,XREAL_0,FUNCT_7,ENUMSET1,RELSET_1,CKB5,CKB7;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for non empty set;
reserve f for (SetSequence of Omega);
reserve n for (Element of ( NAT ));
reserve m for (Element of ( NAT ));
definition
let Omega;
let f;
redefine attr f is  disjoint_valued
means
:Def3: (n < m implies ( f . n ) misses ( f . m ));
compatibility
proof
thus (f is  disjoint_valued implies (for n holds (for m holds (n < m implies ( f . n ) misses ( f . m ))))) by PROB_2:def 2;
assume A1: (n < m implies ( f . n ) misses ( f . m ));
now
let x being set,y being set;
assume A2: x <> y;
per cases ;
suppose (x in ( dom f ) & y in ( dom f ));

then reconsider n = x,m = y as (Element of ( NAT )) by FUNCT_2:def 1;
(n < m or n > m) by A2,XXREAL_0:1;
hence ( f . x ) misses ( f . y ) by A1;
end;
suppose (not (x in ( dom f ) & y in ( dom f )));

then (( f . x ) = ( {} ) or ( f . y ) = ( {} )) by FUNCT_1:def 2;
hence ( f . x ) misses ( f . y ) by XBOOLE_1:65;
end;
end;
hence thesis by PROB_2:def 2;
end;
end;
