environ
vocabularies NUMBERS,SEQ_1,REAL_1,SUBSET_1,FUNCT_1,COMPLEX1,POWER,XXREAL_0,XBOOLE_0,RSSPACE,SERIES_1,CARD_1,TARSKI,RELAT_1,ARYTM_3,CARD_3,RLVECT_1,RSSPACE3,NORMSP_1,RLSUB_1,XXREAL_2,XREAL_0,ORDINAL1,VALUED_0,VALUED_1,ALGSTR_0,ZFMISC_1,STRUCT_0,SUPINF_2,REALSET1,ARYTM_1,SEQ_2,ORDINAL2,PRE_TOPC,NAT_1,LOPBAN_1,LP_SPACE,NORMSP_0,METRIC_1,RELAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,RELAT_1,FUNCT_1,REALSET1,PARTFUN1,FUNCT_2,PRE_TOPC,DOMAIN_1,XXREAL_0,XREAL_0,ORDINAL1,NUMBERS,RLVECT_1,COMPLEX1,REAL_1,NAT_1,STRUCT_0,ALGSTR_0,RLSUB_1,NORMSP_0,NORMSP_1,VALUED_1,SEQ_1,SEQ_2,SERIES_1,POWER,RSSPACE,RSSPACE3,LOPBAN_1;
definitions TARSKI,REALSET1,BINOP_1,RLVECT_1,RLSUB_1,STRUCT_0,ALGSTR_0,VALUED_1,NORMSP_0;
theorems XBOOLE_0,RELAT_1,TARSKI,ABSVALUE,ZFMISC_1,SEQ_1,SEQM_3,SERIES_1,COMSEQ_3,FUNCT_1,NAT_1,SEQ_2,FUNCT_2,RLVECT_1,RLSUB_1,NORMSP_1,XREAL_0,RSSPACE2,XCMPLX_1,SEQ_4,POWER,RSSPACE,RSSPACE3,LOPBAN_1,HOLDER_1,XREAL_1,COMPLEX1,XXREAL_0,ORDINAL1,NORMSP_0;
schemes NAT_1,SEQ_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,REALSET1,STRUCT_0,RLVECT_1,LOPBAN_1,VALUED_0,RSSPACE,VALUED_1,FUNCT_2,NORMSP_0;
constructors PARTFUN1,BINOP_1,XXREAL_0,REAL_1,NAT_1,COMPLEX1,SEQ_2,SEQM_3,PREPOWER,SERIES_1,REALSET1,RLSUB_1,RSSPACE3,LOPBAN_1,SEQ_1,VALUED_1,RELSET_1,BINOP_2,RVSUM_1;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
definition
let x being Real_Sequence;
let p being Real;
func x rto_power p -> Real_Sequence means 
:Def1: (for n being (Element of ( NAT )) holds ( it . n ) = ( ( abs ( x . n ) ) to_power p ));
existence
proof
deffunc F(set) = ( ( abs ( x . $1 ) ) to_power p );
(ex q1 being Real_Sequence st (for n being (Element of ( NAT )) holds ( q1 . n ) = F(n))) from SEQ_1:sch 1;
then consider q1 being Real_Sequence such that A1: (for n being (Element of ( NAT )) holds ( q1 . n ) = ( ( abs ( x . n ) ) to_power p ));
take q1;
thus thesis by A1;
end;
uniqueness
proof
let a1 being Real_Sequence;
let a2 being Real_Sequence;
assume that
A2: (for n being (Element of ( NAT )) holds ( a1 . n ) = ( ( abs ( x . n ) ) to_power p ))
and
A3: (for n being (Element of ( NAT )) holds ( a2 . n ) = ( ( abs ( x . n ) ) to_power p ));
(for s being set holds (s in ( NAT ) implies ( a1 . s ) = ( a2 . s )))
proof
let s being set;
assume that
A4: s in ( NAT );
( a1 . s ) = ( ( abs ( x . s ) ) to_power p ) by A2,A4
.= ( a2 . s ) by A3,A4;
hence thesis;
end;
hence thesis by FUNCT_2:12;
end;
end;
