environ
vocabularies PBOOLE,FINSEQ_1,RELAT_1,TARSKI,XBOOLE_0,MSUALG_1,SUBSET_1,STRUCT_0,EQREL_1,FUNCT_1,ORDERS_2,ORDERS_1,RELAT_2,NATTRA_1,MARGREL1,XXREAL_0,SEQM_3,CARD_5,CARD_LAR,FUNCOP_1,CARD_3,SETFAM_1,OSALG_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,ORDERS_1,FUNCT_2,EQREL_1,SETFAM_1,PARTFUN1,FINSEQ_1,FUNCOP_1,FINSEQ_2,CARD_3,PBOOLE,ORDERS_2,STRUCT_0,MSUALG_1,ORDERS_3,CKB3,CKB4,CKB5,CKB6,CKB7,CKB10,CKB14,CKB16,CKB17;
definitions TARSKI,CKB10,CKB14,CKB16,CKB17;
theorems FUNCT_1,PARTFUN1,FINSEQ_1,FUNCOP_1,PBOOLE,FUNCT_2,CARD_3,FINSEQ_3,FINSEQ_2,RELAT_1,RELSET_1,EQREL_1,ZFMISC_1,ORDERS_3,MSUALG_1,ORDERS_2,RELAT_2,GRFUNC_1,FUNCT_4,ORDERS_1,CKB2,CKB8,CKB10,CKB14,CKB15,CKB16,CKB17;
schemes FUNCT_1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,EQREL_1,STRUCT_0,MSUALG_1,ORDERS_3,ORDINAL1,RELAT_1,PBOOLE,CKB1,CKB5,CKB6,CKB7,CKB9,CKB11,CKB12,CKB13;
constructors EQREL_1,ORDERS_3,RELSET_1,MSAFREE,CKB5,CKB6,CKB7,CKB10,CKB14,CKB16,CKB17;
requirements BOOLE,SUBSET;
begin
theorem
Th3: (for S being non empty non void OverloadedMSSign holds (S is  op-discrete iff (for x,y being (OperSymbol of S) holds (x ~= y implies x = y))))
proof
let S being non empty non void OverloadedMSSign;
set d = ( id (the carrier' of S) );
set opss = (the carrier' of S);
set ol = (the Overloading of S);
thus (S is  op-discrete implies (for x,y being (OperSymbol of S) holds (x ~= y implies x = y)))
proof
assume A1: S is  op-discrete;
let x being (OperSymbol of S),y being (OperSymbol of S);
assume x ~= y;
then [ x,y ] in (the Overloading of S) by CKB14:def 1;
then [ x,y ] in d by A1,CKB17:def 1;
hence thesis by RELAT_1:def 10;
end;

assume A2: (for x,y being (OperSymbol of S) holds (x ~= y implies x = y));
now
let x being set,y being set;
thus ([ x,y ] in ol implies (x in opss & x = y))
proof
assume A3: [ x,y ] in ol;
then (ex x1,y1 being set st (([ x,y ] = [ x1,y1 ] & x1 in opss) & y1 in opss)) by RELSET_1:2;
then reconsider x2 = x,y2 = y as (OperSymbol of S) by ZFMISC_1:27;
x2 ~= y2 by A3,CKB14:def 1;
hence thesis by A2;
end;

assume (x in opss & x = y);
hence [ x,y ] in ol by CKB14:def 1;
end;
hence (the Overloading of S) = d by RELAT_1:def 10;
end;
