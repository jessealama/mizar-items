environ
vocabularies NUMBERS,SCMPDS_2,SUBSET_1,FINSEQ_1,FSM_1,XXREAL_0,FUNCT_1,SCMP_GCD,ARYTM_3,GRAPH_2,NAT_1,RELAT_1,CLASSES1,AMI_2,AMI_1,SCMFSA6B,SCMPDS_4,UNIALG_2,SCMFSA7B,TURING_1,SCMFSA_7,INT_1,CARD_1,SCMPDS_7,AMI_3,ARYTM_1,VALUED_1,TARSKI,FUNCT_4,CIRCUIT2,GRAPHSP,MSUALG_1,XBOOLE_0,SCMISORT,SCMFSA_9,SCMFSA8B,COMPLEX1,SCPISORT,ORDINAL1,SCMNORM,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,VALUED_1,XCMPLX_0,FUNCT_4,INT_1,NAT_1,COMPLEX1,MEMSTR_0,EXTPRO_1,COMPOS_1,AMI_2,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,DOMAIN_1,FINSEQ_1,SCMPDS_7,SCMPDS_8,GRAPH_2,CLASSES1,XXREAL_0,CKB1,CKB21;
definitions SCMPDS_2,SCMP_GCD,AMI_3,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB1,CKB21;
theorems AMI_3,NAT_1,TARSKI,FUNCT_4,INT_1,SCMPDS_2,GRFUNC_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,ENUMSET1,SCMP_GCD,SCMPDS_7,SCMPDS_8,ABSVALUE,FINSEQ_1,FINSEQ_2,RFINSEQ,XBOOLE_1,XREAL_1,ORDINAL1,XXREAL_0,GRAPH_2,ZFMISC_1,FINSEQ_3,CLASSES1,AFINSQ_1,COMPOS_1,EXTPRO_1,PBOOLE,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB18,CKB19,CKB20,CKB21;
schemes NAT_1,FINSEQ_1,CKB15,CKB16,CKB17;
registrations SETFAM_1,RELAT_1,FUNCT_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMPDS_7,SCMPDS_8,XBOOLE_0,VALUED_0,ORDINAL1,CARD_1,VALUED_1,GRFUNC_1,COMPOS_1,AFINSQ_1,EXTPRO_1,FUNCT_4,MEMSTR_0,RELSET_1;
constructors DOMAIN_1,XXREAL_0,REAL_1,INT_2,SCM_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,SCMPDS_7,SCMPDS_8,CLASSES1,PRE_POLY,GRAPH_2,AMI_2,MEMSTR_0,RELSET_1,CKB1,CKB21;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve p0 for (Element of ( NAT ));
set j1 = ( AddTo (( GBP ),3,1) );
set j2 = ( (( GBP ),4) := (( GBP ),3) );
set j3 = ( AddTo (( GBP ),1,1) );
set j4 = ( (( GBP ),6) := (( GBP ),1) );
set k1 = ( (( GBP ),5) := (( intpos 4 ),( - 1 )) );
set k2 = ( SubFrom (( GBP ),5,( intpos 4 ),( 0 )) );
set k3 = ( (( GBP ),5) := (( intpos 4 ),( - 1 )) );
set k4 = ( (( intpos 4 ),( - 1 )) := (( intpos 4 ),( 0 )) );
set k5 = ( (( intpos 4 ),( 0 )) := (( GBP ),5) );
set k6 = ( AddTo (( GBP ),4,( - 1 )) );
set FA = ( Load ( (( GBP ),6) := ( 0 ) ) );
set TR = ( ( ( ( ( (( GBP ),5) := (( intpos 4 ),( - 1 )) ) ';' ( (( intpos 4 ),( - 1 )) := (( intpos 4 ),( 0 )) ) ) ';' ( (( intpos 4 ),( 0 )) := (( GBP ),5) ) ) ';' ( AddTo (( GBP ),4,( - 1 )) ) ) ';' ( AddTo (( GBP ),6,( - 1 )) ) );
set IF = ( if>0 (( GBP ),5,TR,FA) );
set B1 = ( ( ( (( GBP ),5) := (( intpos 4 ),( - 1 )) ) ';' ( SubFrom (( GBP ),5,( intpos 4 ),( 0 )) ) ) ';' ( if>0 (( GBP ),5,TR,FA) ) );
set WH = ( while>0 (( GBP ),6,B1) );
set J4 = ( ( ( j1 ';' j2 ) ';' j3 ) ';' j4 );
set B2 = ( J4 ';' WH );
set FR = ( for-down (( GBP ),2,1,B2) );
Lm5: ( card B1 ) = 10
proof
thus ( card B1 ) = ( ( card ( k1 ';' k2 ) ) + ( card IF ) ) by AFINSQ_1:17
.= ( 2 + ( card IF ) ) by SCMP_GCD:5
.= ( 2 + ( ( ( card TR ) + ( card FA ) ) + 2 ) ) by SCMPDS_6:65
.= ( 2 + ( ( ( ( card ( ( ( k3 ';' k4 ) ';' k5 ) ';' k6 ) ) + 1 ) + ( card FA ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( card ( ( k3 ';' k4 ) ';' k5 ) ) + 1 ) + 1 ) + ( card FA ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( ( card ( k3 ';' k4 ) ) + 1 ) + 1 ) + 1 ) + ( card FA ) ) + 2 ) ) by SCMP_GCD:4
.= ( 2 + ( ( ( ( ( 2 + 1 ) + 1 ) + 1 ) + ( card FA ) ) + 2 ) ) by SCMP_GCD:5
.= ( 2 + ( ( ( ( ( 2 + 1 ) + 1 ) + 1 ) + 1 ) + 2 ) ) by COMPOS_1:54
.= 10;
end;
Lm6: ( card B2 ) = 16
proof
thus ( card B2 ) = ( ( card ( ( ( j1 ';' j2 ) ';' j3 ) ';' j4 ) ) + ( card WH ) ) by AFINSQ_1:17
.= ( ( ( card ( ( j1 ';' j2 ) ';' j3 ) ) + 1 ) + ( card WH ) ) by SCMP_GCD:4
.= ( ( ( ( card ( j1 ';' j2 ) ) + 1 ) + 1 ) + ( card WH ) ) by SCMP_GCD:4
.= ( ( ( 2 + 1 ) + 1 ) + ( card WH ) ) by SCMP_GCD:5
.= ( ( ( 2 + 1 ) + 1 ) + ( 10 + 2 ) ) by Lm5,SCMPDS_8:17
.= 16;
end;
theorem
( card ( insert-sort (n,p0) ) ) = 23
proof
set i1 = ( ( GBP ) := ( 0 ) );
set i2 = ( (( GBP ),1) := ( 0 ) );
set i3 = ( (( GBP ),2) := ( n - 1 ) );
set i4 = ( (( GBP ),3) := p0 );
thus ( card ( insert-sort (n,p0) ) ) = ( ( card ( ( ( i1 ';' i2 ) ';' i3 ) ';' i4 ) ) + ( card FR ) ) by AFINSQ_1:17
.= ( ( ( card ( ( i1 ';' i2 ) ';' i3 ) ) + 1 ) + ( card FR ) ) by SCMP_GCD:4
.= ( ( ( ( card ( i1 ';' i2 ) ) + 1 ) + 1 ) + ( card FR ) ) by SCMP_GCD:4
.= ( ( ( 2 + 1 ) + 1 ) + ( card FR ) ) by SCMP_GCD:5
.= ( 4 + ( ( card B2 ) + 3 ) ) by SCMPDS_7:41
.= 23 by Lm6;
end;
