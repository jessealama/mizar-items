environ
vocabularies NUMBERS,SCMPDS_2,SUBSET_1,FINSEQ_1,FSM_1,XXREAL_0,FUNCT_1,SCMP_GCD,ARYTM_3,GRAPH_2,NAT_1,RELAT_1,CLASSES1,AMI_2,AMI_1,SCMFSA6B,SCMPDS_4,UNIALG_2,SCMFSA7B,TURING_1,SCMFSA_7,INT_1,CARD_1,SCMPDS_7,AMI_3,ARYTM_1,VALUED_1,TARSKI,FUNCT_4,CIRCUIT2,GRAPHSP,MSUALG_1,XBOOLE_0,SCMISORT,SCMFSA_9,SCMFSA8B,COMPLEX1,SCPISORT,ORDINAL1,SCMNORM,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,VALUED_1,XCMPLX_0,FUNCT_4,INT_1,NAT_1,COMPLEX1,MEMSTR_0,EXTPRO_1,COMPOS_1,AMI_2,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,DOMAIN_1,FINSEQ_1,SCMPDS_7,SCMPDS_8,GRAPH_2,CLASSES1,XXREAL_0,CKB1;
definitions SCMPDS_2,SCMP_GCD,AMI_3,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB1;
theorems AMI_3,NAT_1,TARSKI,FUNCT_4,INT_1,SCMPDS_2,GRFUNC_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,ENUMSET1,SCMP_GCD,SCMPDS_7,SCMPDS_8,ABSVALUE,FINSEQ_1,FINSEQ_2,RFINSEQ,XBOOLE_1,XREAL_1,ORDINAL1,XXREAL_0,GRAPH_2,ZFMISC_1,FINSEQ_3,CLASSES1,AFINSQ_1,COMPOS_1,EXTPRO_1,PBOOLE,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB18,CKB19,CKB20;
schemes NAT_1,FINSEQ_1,CKB15,CKB16,CKB17;
registrations SETFAM_1,RELAT_1,FUNCT_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMPDS_7,SCMPDS_8,XBOOLE_0,VALUED_0,ORDINAL1,CARD_1,VALUED_1,GRFUNC_1,COMPOS_1,AFINSQ_1,EXTPRO_1,FUNCT_4,MEMSTR_0,RELSET_1;
constructors DOMAIN_1,XXREAL_0,REAL_1,INT_2,SCM_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,SCMPDS_7,SCMPDS_8,CLASSES1,PRE_POLY,GRAPH_2,AMI_2,MEMSTR_0,RELSET_1,CKB1;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve p0 for (Element of ( NAT ));
definition
let n being (Element of ( NAT ));
let p0 being (Element of ( NAT ));
func insert-sort (n,p0) -> (Program of ( SCMPDS )) equals 
( ( ( ( ( ( GBP ) := ( 0 ) ) ';' ( (( GBP ),1) := ( 0 ) ) ) ';' ( (( GBP ),2) := ( n - 1 ) ) ) ';' ( (( GBP ),3) := p0 ) ) ';' ( for-down (( GBP ),2,1,( ( ( ( ( AddTo (( GBP ),3,1) ) ';' ( (( GBP ),4) := (( GBP ),3) ) ) ';' ( AddTo (( GBP ),1,1) ) ) ';' ( (( GBP ),6) := (( GBP ),1) ) ) ';' ( while>0 (( GBP ),6,( ( ( (( GBP ),5) := (( intpos 4 ),( - 1 )) ) ';' ( SubFrom (( GBP ),5,( intpos 4 ),( 0 )) ) ) ';' ( if>0 (( GBP ),5,( ( ( ( ( (( GBP ),5) := (( intpos 4 ),( - 1 )) ) ';' ( (( intpos 4 ),( - 1 )) := (( intpos 4 ),( 0 )) ) ) ';' ( (( intpos 4 ),( 0 )) := (( GBP ),5) ) ) ';' ( AddTo (( GBP ),4,( - 1 )) ) ) ';' ( AddTo (( GBP ),6,( - 1 )) ) ),( Load ( (( GBP ),6) := ( 0 ) ) )) ) )) ) )) ) );
coherence;
end;
