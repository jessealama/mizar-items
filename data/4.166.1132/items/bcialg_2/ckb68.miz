environ
vocabularies BCIALG_1,CARD_FIL,SUBSET_1,FUNCT_1,NUMBERS,STRUCT_0,POWER,CARD_1,ARYTM_3,XBOOLE_0,XXREAL_0,FUNCOP_1,NAT_1,SUPINF_2,RELAT_1,CHORD,WAYBEL15,GROUP_4,GROUP_1,ALG_1,EQREL_1,PARTFUN1,RELAT_2,ZFMISC_1,RCOMP_1,TARSKI,BINOP_1,GROUP_6,BCIALG_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,NAT_1,FUNCT_2,XXREAL_0,FUNCOP_1,BINOP_1,STRUCT_0,BCIALG_1,RELAT_2,PARTFUN1,EQREL_1,ALG_1,CKB1,CKB24,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43,CKB44,CKB50,CKB51,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB62;
definitions XBOOLE_0,TARSKI,STRUCT_0,BCIALG_1,RELAT_1,CKB1,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43,CKB44,CKB50,CKB51,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58;
theorems BCIALG_1,FUNCOP_1,NAT_1,XREAL_1,TARSKI,XBOOLE_0,RELAT_2,RELAT_1,XXREAL_0,ORDERS_1,XBOOLE_1,BINOP_1,EQREL_1,RELSET_1,ZFMISC_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB63,CKB64,CKB65,CKB66,CKB67;
schemes FUNCT_2,NAT_1,RELSET_1,XBOOLE_0,BINOP_1;
registrations BCIALG_1,SUBSET_1,NAT_1,RELSET_1,STRUCT_0,PARTFUN1,ORDINAL1,XREAL_0,CKB31,CKB33,CKB45,CKB54;
constructors BCIALG_1,BINOP_1,XXREAL_0,NAT_1,BINARITH,EQREL_1,RELSET_1,CKB1,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43,CKB44,CKB50,CKB51,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB62;
requirements NUMERALS,ARITHM,SUBSET,BOOLE;
begin
reserve X for BCI-algebra;
reserve I for (Ideal of X);
reserve x for (Element of X);
reserve y for (Element of X);
reserve j for (Element of ( NAT ));
reserve i for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve m for (Element of ( NAT ));
reserve E for (Congruence of X);
theorem
((for X holds (for x holds (for y holds (ex i st (ex j st (ex m st (ex n st ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power j ) = ( (( (y,( y \ x )) to_power m ),( x \ y )) to_power n )))))))) implies (for E holds (for I holds (I = ( Class (E,( 0. X )) ) implies E is (I-congruence of X,I)))))
proof
assume A1: (for X holds (for x holds (for y holds (ex i st (ex j st (ex m st (ex n st ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power j ) = ( (( (y,( y \ x )) to_power m ),( x \ y )) to_power n ))))))));
let E;
let I;
assume A2: I = ( Class (E,( 0. X )) );
now
let x being (Element of X),y being (Element of X);
((( x \ y ) in I & ( y \ x ) in I) implies [ x,y ] in E)
proof
assume that
A3: ( x \ y ) in I
and
A4: ( y \ x ) in I;
(ex z being set st ([ z,( y \ x ) ] in E & z in { ( 0. X ) })) by A2,A4,RELAT_1:def 13;
then A5: [ ( 0. X ),( y \ x ) ] in E by TARSKI:def 1;
(ex z being set st ([ z,( x \ y ) ] in E & z in { ( 0. X ) })) by A2,A3,RELAT_1:def 13;
then A6: [ ( 0. X ),( x \ y ) ] in E by TARSKI:def 1;
consider i being (Element of ( NAT )),j being (Element of ( NAT )),m being (Element of ( NAT )),n being (Element of ( NAT )) such that A7: ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power j ) = ( (( (y,( y \ x )) to_power m ),( x \ y )) to_power n ) by A1;
A8: ( field E ) = (the carrier of X) by EQREL_1:9;
A9: E is_reflexive_in ( field E ) by RELAT_2:def 9;
then [ x,x ] in E by A8,RELAT_2:def 1;
then A10: [ x,( (x,( x \ y )) to_power i ) ] in E by A2,A3,CKB67:1;
A11: [ x,( (( (x,( x \ y )) to_power i ),( y \ x )) to_power j ) ] in E
proof
defpred P[ (Element of ( NAT )) ]
 means
[ x,( (( (x,( x \ y )) to_power i ),( y \ x )) to_power $1 ) ] in E;
A12: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume [ x,( (( (x,( x \ y )) to_power i ),( y \ x )) to_power k ) ] in E;
then [ ( x \ ( 0. X ) ),( ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power k ) \ ( y \ x ) ) ] in E by A5,CKB50:def 1;
then [ x,( ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power k ) \ ( y \ x ) ) ] in E by BCIALG_1:2;
hence thesis by CKB5:1;
end;
A13: P[ ( 0 ) ] by A10,CKB2:1;
(for n holds P[ n ]) from NAT_1:sch 1(A13,A12);
hence thesis;
end;
[ y,y ] in E by A8,A9,RELAT_2:def 1;
then A14: [ y,( (y,( y \ x )) to_power m ) ] in E by A2,A4,CKB67:1;
A15: [ y,( (( (y,( y \ x )) to_power m ),( x \ y )) to_power n ) ] in E
proof
defpred P[ (Element of ( NAT )) ]
 means
[ y,( (( (y,( y \ x )) to_power m ),( x \ y )) to_power $1 ) ] in E;
A16: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume [ y,( (( (y,( y \ x )) to_power m ),( x \ y )) to_power k ) ] in E;
then [ ( y \ ( 0. X ) ),( ( (( (y,( y \ x )) to_power m ),( x \ y )) to_power k ) \ ( x \ y ) ) ] in E by A6,CKB50:def 1;
then [ y,( ( (( (y,( y \ x )) to_power m ),( x \ y )) to_power k ) \ ( x \ y ) ) ] in E by BCIALG_1:2;
hence thesis by CKB5:1;
end;
A17: P[ ( 0 ) ] by A14,CKB2:1;
(for n holds P[ n ]) from NAT_1:sch 1(A17,A16);
hence thesis;
end;
E is_symmetric_in ( field E ) by RELAT_2:def 11;
then (E is_transitive_in ( field E ) & [ ( (( (x,( x \ y )) to_power i ),( y \ x )) to_power j ),y ] in E) by A7,A8,A15,RELAT_2:def 3,RELAT_2:def 16;
hence thesis by A8,A11,RELAT_2:def 8;
end;
hence ([ x,y ] in E iff (( x \ y ) in I & ( y \ x ) in I)) by A2,CKB65:1;
end;
hence thesis by CKB53:def 1;
end;
