environ
vocabularies BCIALG_1,CARD_FIL,SUBSET_1,FUNCT_1,NUMBERS,STRUCT_0,POWER,CARD_1,ARYTM_3,XBOOLE_0,XXREAL_0,FUNCOP_1,NAT_1,SUPINF_2,RELAT_1,CHORD,WAYBEL15,GROUP_4,GROUP_1,ALG_1,EQREL_1,PARTFUN1,RELAT_2,ZFMISC_1,RCOMP_1,TARSKI,BINOP_1,GROUP_6,BCIALG_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,NAT_1,FUNCT_2,XXREAL_0,FUNCOP_1,BINOP_1,STRUCT_0,BCIALG_1,RELAT_2,PARTFUN1,EQREL_1,ALG_1,CKB1,CKB24,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43;
definitions XBOOLE_0,TARSKI,STRUCT_0,BCIALG_1,RELAT_1,CKB1,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43;
theorems BCIALG_1,FUNCOP_1,NAT_1,XREAL_1,TARSKI,XBOOLE_0,RELAT_2,RELAT_1,XXREAL_0,ORDERS_1,XBOOLE_1,BINOP_1,EQREL_1,RELSET_1,ZFMISC_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43;
schemes FUNCT_2,NAT_1,RELSET_1,XBOOLE_0,BINOP_1;
registrations BCIALG_1,SUBSET_1,NAT_1,RELSET_1,STRUCT_0,PARTFUN1,ORDINAL1,XREAL_0,CKB31,CKB33;
constructors BCIALG_1,BINOP_1,XXREAL_0,NAT_1,BINARITH,EQREL_1,RELSET_1,CKB1,CKB25,CKB26,CKB27,CKB28,CKB42,CKB43;
requirements NUMERALS,ARITHM,SUBSET,BOOLE;
begin
reserve X for BCI-algebra;
reserve x for (Element of X);
definition
let X;
let x;
assume A1: x is  nilpotent;
func ord x -> non empty (Element of ( NAT ))
means
:Def8: (( (( 0. X ),x) to_power it ) = ( 0. X ) & (for m being (Element of ( NAT )) holds ((( (( 0. X ),x) to_power m ) = ( 0. X ) & m <> ( 0 )) implies it <= m)));
existence
proof
defpred P[ Nat ]
 means
(ex w being (Element of ( NAT )) st ((w = $1 & ( (( 0. X ),x) to_power w ) = ( 0. X )) & w <> ( 0 )));
(ex k being non empty (Element of ( NAT )) st ( (( 0. X ),x) to_power k ) = ( 0. X )) by A1,CKB42:def 1;
then A2: (ex n being Nat st P[ n ]);
consider k being Nat such that A3: P[ k ] and A4: (for n being Nat holds (P[ n ] implies k <= n)) from NAT_1:sch 5(A2);
reconsider k as non empty (Element of ( NAT )) by A3;
take k;
thus thesis by A3,A4;
end;
uniqueness
proof
let n1 being non empty (Element of ( NAT )),n2 being non empty (Element of ( NAT ));
assume (((( (( 0. X ),x) to_power n1 ) = ( 0. X ) & (for m being (Element of ( NAT )) holds ((( (( 0. X ),x) to_power m ) = ( 0. X ) & m <> ( 0 )) implies n1 <= m))) & ( (( 0. X ),x) to_power n2 ) = ( 0. X )) & (for m being (Element of ( NAT )) holds ((( (( 0. X ),x) to_power m ) = ( 0. X ) & m <> ( 0 )) implies n2 <= m)));
then (n1 <= n2 & n2 <= n1);
hence thesis by XXREAL_0:1;
end;
correctness;
end;
