environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,PRE_POLY,TARSKI,CARD_1,UPROOTS,CARD_3,ARYTM_3,FINSEQ_1,NAT_1,XXREAL_0,FINSET_1,SUBSET_1,FINSEQ_2,XREAL_0,ORDINAL1,ARYTM_1,GLIB_003,TREES_1,GLIB_000,GLIB_001,REAL_1,PBOOLE,ZFMISC_1,FUNCT_2,ABIAN,PARTFUN1,MCART_1,GLIB_002,WAYBEL_0,RELAT_2,RCOMP_1,GRAPH_1,GLIB_004;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,CARD_1,NUMBERS,SUBSET_1,DOMAIN_1,MCART_1,XCMPLX_0,XXREAL_0,XREAL_0,REAL_1,RELAT_1,RELSET_1,PARTFUN1,FUNCT_1,FINSEQ_1,FINSEQ_2,SEQ_1,PBOOLE,FUNCT_2,RVSUM_1,ABIAN,ORDINAL1,UPROOTS,FINSET_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,RFUNCT_3,PRE_POLY,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB29,CKB30,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB54,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
definitions TARSKI,GLIB_000,GLIB_003,RVSUM_1,FUNCOP_1,CKB12,CKB13,CKB14,CKB15,CKB20,CKB23,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB57,CKB58,CKB59,CKB60,CKB62,CKB63;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSET_1,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,ABIAN,INT_1,JORDAN12,NAT_1,PARTFUN1,PBOOLE,RELAT_1,RVSUM_1,TARSKI,TREES_1,UPROOTS,XBOOLE_0,XBOOLE_1,XREAL_0,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,FINSOP_1,FUNCT_7,MCART_1,RELSET_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB18,CKB19,CKB20,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB51,CKB52,CKB53,CKB57,CKB58,CKB59,CKB60,CKB62,CKB63,CKB64,CKB65,CKB66;
schemes NAT_1,SUBSET_1,RECDEF_1,GRAPH_5,CQC_SIM1,PBOOLE;
registrations XBOOLE_0,SUBSET_1,RELAT_1,PARTFUN1,FRAENKEL,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,CARD_1,UPROOTS,MEMBERED,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,RELSET_1,PRE_POLY,INT_1,CKB17,CKB21,CKB31,CKB32,CKB50,CKB55,CKB56;
constructors DOMAIN_1,BINOP_2,FINSOP_1,RVSUM_1,GRAPH_2,RFUNCT_3,UPROOTS,GLIB_002,GLIB_003,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB30,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th31: (for G1 being  finite  real-weighted WGraph holds (for n being Nat holds (for G2 being (inducedSubgraph of G1,( ( ( PRIM:CompSeq G1 ) . n ) `1 ),( ( ( PRIM:CompSeq G1 ) . n ) `2 )) holds G2 is  connected)))
proof
let G1 being  finite  real-weighted WGraph;
defpred P[ Nat ]
 means
(for G2 being (inducedSubgraph of G1,( ( ( PRIM:CompSeq G1 ) . $1 ) `1 ),( ( ( PRIM:CompSeq G1 ) . $1 ) `2 )) holds G2 is  connected);
set G0 = ( ( PRIM:CompSeq G1 ) . ( 0 ) );
set v = ( choose ( the_Vertices_of G1 ) );
now
let n being Nat;
assume A1: P[ n ];
set Gn = ( ( PRIM:CompSeq G1 ) . n );
set Gn1 = ( ( PRIM:CompSeq G1 ) . ( n + 1 ) );
set e = ( choose ( PRIM:NextBestEdges Gn ) );
set v1 = ( ( the_Target_of G1 ) . e );
set v2 = ( ( the_Source_of G1 ) . e );
A2: Gn1 = ( PRIM:Step Gn ) by CKB62:def 1;
now
let Gn1s being (inducedSubgraph of G1,( Gn1 `1 ),( Gn1 `2 ));
A3: (( Gn1 `1 ) is non empty non empty (Subset of ( the_Vertices_of G1 )) & ( Gn1 `2 ) c= ( G1 .edgesBetween ( Gn1 `1 ) )) by CKB66:1;
then A4: ( the_Vertices_of Gn1s ) = ( Gn1 `1 ) by GLIB_000:def 37;
A5: ( the_Edges_of Gn1s ) = ( Gn1 `2 ) by A3,GLIB_000:def 37;
now
per cases ;
suppose ( PRIM:NextBestEdges Gn ) = ( {} );

then Gn1 = Gn by A2,CKB59:def 1;
hence Gn1s is  connected by A1;
end;
suppose A6: (( PRIM:NextBestEdges Gn ) <> ( {} ) & v2 in ( Gn `1 ));

then A7: Gn1 = [ ( ( Gn `1 ) \/ { v1 } ),( ( Gn `2 ) \/ { e } ) ] by A2,CKB59:def 1;
then A8: ( Gn1 `2 ) = ( ( Gn `2 ) \/ { e } ) by MCART_1:7;
A9: e in ( PRIM:NextBestEdges Gn ) by A6;
then reconsider v1 as (Vertex of G1) by FUNCT_2:5;
A10: e Joins v2,v1,G1 by A9,GLIB_000:def 13;
set Gns = the (inducedSubgraph of G1,( Gn `1 ),( Gn `2 ));
A11: Gns is  connected by A1;
A12: (( Gn `1 ) is non empty non empty (Subset of ( the_Vertices_of G1 )) & ( Gn `2 ) c= ( G1 .edgesBetween ( Gn `1 ) )) by CKB66:1;
then A13: ( the_Vertices_of Gns ) = ( Gn `1 ) by GLIB_000:def 37;
A14: ( Gn1 `1 ) = ( ( Gn `1 ) \/ { v1 } ) by A7,MCART_1:7;
then A15: ( the_Vertices_of Gns ) c= ( the_Vertices_of Gn1s ) by A4,A13,XBOOLE_1:7;
( the_Edges_of Gns ) = ( Gn `2 ) by A12,GLIB_000:def 37;
then reconsider Gns as (Subgraph of Gn1s) by A5,A8,A15,GLIB_000:44,XBOOLE_1:7;
set src = the (Vertex of Gns);
reconsider src9 = src as (Vertex of Gn1s) by GLIB_000:42;
e in { e } by TARSKI:def 1;
then e in ( the_Edges_of Gn1s ) by A5,A8,XBOOLE_0:def 3;
then A16: e Joins v2,v1,Gn1s by A10,GLIB_000:73;
now
let x being (Vertex of Gn1s);
now
per cases ;
suppose A17: x = v1;

reconsider v29 = v2 as (Vertex of Gns) by A6,A12,GLIB_000:def 37;
consider W being (Walk of Gns) such that A18: W is_Walk_from src,v29 by A11,GLIB_002:def 1;
reconsider W as (Walk of Gn1s) by GLIB_001:167;
W is_Walk_from src9,v2 by A18,GLIB_001:19;
then ( W .addEdge e ) is_Walk_from src9,x by A16,A17,GLIB_001:66;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
suppose x <> v1;

then (not x in { v1 }) by TARSKI:def 1;
then reconsider x9 = x as (Vertex of Gns) by A4,A14,A13,XBOOLE_0:def 3;
consider W being (Walk of Gns) such that A19: W is_Walk_from src,x9 by A11,GLIB_002:def 1;
reconsider W9 = W as (Walk of Gn1s) by GLIB_001:167;
W9 is_Walk_from src9,x by A19,GLIB_001:19;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
end;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
hence Gn1s is  connected by GLIB_002:6;
end;
suppose A20: (( PRIM:NextBestEdges Gn ) <> ( {} ) & (not v2 in ( Gn `1 )));

then A21: Gn1 = [ ( ( Gn `1 ) \/ { v2 } ),( ( Gn `2 ) \/ { e } ) ] by A2,CKB59:def 1;
then A22: ( Gn1 `2 ) = ( ( Gn `2 ) \/ { e } ) by MCART_1:7;
A23: e SJoins ( Gn `1 ),( ( the_Vertices_of G1 ) \ ( Gn `1 ) ),G1 by A20,CKB57:def 1;
then A24: e in ( the_Edges_of G1 ) by GLIB_000:def 15;
then reconsider v2 as (Vertex of G1) by FUNCT_2:5;
A25: e Joins v1,v2,G1 by A24,GLIB_000:def 13;
e in { e } by TARSKI:def 1;
then e in ( the_Edges_of Gn1s ) by A5,A22,XBOOLE_0:def 3;
then A26: e Joins v1,v2,Gn1s by A25,GLIB_000:73;
set Gns = the (inducedSubgraph of G1,( Gn `1 ),( Gn `2 ));
A27: Gns is  connected by A1;
A28: (( Gn `1 ) is non empty non empty (Subset of ( the_Vertices_of G1 )) & ( Gn `2 ) c= ( G1 .edgesBetween ( Gn `1 ) )) by CKB66:1;
then A29: ( the_Vertices_of Gns ) = ( Gn `1 ) by GLIB_000:def 37;
A30: ( Gn1 `1 ) = ( ( Gn `1 ) \/ { v2 } ) by A21,MCART_1:7;
then A31: ( the_Vertices_of Gns ) c= ( the_Vertices_of Gn1s ) by A4,A29,XBOOLE_1:7;
( the_Edges_of Gns ) = ( Gn `2 ) by A28,GLIB_000:def 37;
then reconsider Gns as (Subgraph of Gn1s) by A5,A22,A31,GLIB_000:44,XBOOLE_1:7;
set src = the (Vertex of Gns);
reconsider src9 = src as (Vertex of Gn1s) by GLIB_000:42;
A32: v1 in ( Gn `1 ) by A20,A23,GLIB_000:def 15;
now
let x being (Vertex of Gn1s);
now
per cases ;
suppose A33: x = v2;

reconsider v19 = v1 as (Vertex of Gns) by A32,A28,GLIB_000:def 37;
consider W being (Walk of Gns) such that A34: W is_Walk_from src,v19 by A27,GLIB_002:def 1;
reconsider W as (Walk of Gn1s) by GLIB_001:167;
W is_Walk_from src9,v1 by A34,GLIB_001:19;
then ( W .addEdge e ) is_Walk_from src9,x by A26,A33,GLIB_001:66;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
suppose x <> v2;

then (not x in { v2 }) by TARSKI:def 1;
then reconsider x9 = x as (Vertex of Gns) by A4,A30,A29,XBOOLE_0:def 3;
consider W being (Walk of Gns) such that A35: W is_Walk_from src,x9 by A27,GLIB_002:def 1;
reconsider W9 = W as (Walk of Gn1s) by GLIB_001:167;
W9 is_Walk_from src9,x by A35,GLIB_001:19;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
end;
hence (ex W being (Walk of Gn1s) st W is_Walk_from src9,x);
end;
hence Gn1s is  connected by GLIB_002:6;
end;
end;
hence Gn1s is  connected;
end;
hence P[ ( n + 1 ) ];
end;
then A36: (for n being Nat holds (P[ n ] implies P[ ( n + 1 ) ]));
now
let G being (inducedSubgraph of G1,( G0 `1 ),( G0 `2 ));
A37: G0 = ( PRIM:Init G1 ) by CKB62:def 1;
then ( G0 `1 ) = { v } by MCART_1:7;
then reconsider G9 = G as (inducedSubgraph of G1,{ v },( {} )) by A37,MCART_1:7;
G9 is  connected;
hence G is  connected;
end;
then A38: P[ ( 0 ) ];
(for n being Nat holds P[ n ]) from NAT_1:sch 2(A38,A36);
hence thesis;
end;
