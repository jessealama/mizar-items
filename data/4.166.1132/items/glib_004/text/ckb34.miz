environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,PRE_POLY,TARSKI,CARD_1,UPROOTS,CARD_3,ARYTM_3,FINSEQ_1,NAT_1,XXREAL_0,FINSET_1,SUBSET_1,FINSEQ_2,XREAL_0,ORDINAL1,ARYTM_1,GLIB_003,TREES_1,GLIB_000,GLIB_001,REAL_1,PBOOLE,ZFMISC_1,FUNCT_2,ABIAN,PARTFUN1,MCART_1,GLIB_002,WAYBEL_0,RELAT_2,RCOMP_1,GRAPH_1,GLIB_004;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,CARD_1,NUMBERS,SUBSET_1,DOMAIN_1,MCART_1,XCMPLX_0,XXREAL_0,XREAL_0,REAL_1,RELAT_1,RELSET_1,PARTFUN1,FUNCT_1,FINSEQ_1,FINSEQ_2,SEQ_1,PBOOLE,FUNCT_2,RVSUM_1,ABIAN,ORDINAL1,UPROOTS,FINSET_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,RFUNCT_3,PRE_POLY,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB29,CKB30,CKB33;
definitions TARSKI,GLIB_000,GLIB_003,RVSUM_1,FUNCOP_1,CKB12,CKB13,CKB14,CKB15,CKB20,CKB23,CKB33;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSET_1,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,ABIAN,INT_1,JORDAN12,NAT_1,PARTFUN1,PBOOLE,RELAT_1,RVSUM_1,TARSKI,TREES_1,UPROOTS,XBOOLE_0,XBOOLE_1,XREAL_0,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,FINSOP_1,FUNCT_7,MCART_1,RELSET_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB18,CKB19,CKB20,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB33;
schemes NAT_1,SUBSET_1,RECDEF_1,GRAPH_5,CQC_SIM1,PBOOLE;
registrations XBOOLE_0,SUBSET_1,RELAT_1,PARTFUN1,FRAENKEL,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,CARD_1,UPROOTS,MEMBERED,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,RELSET_1,PRE_POLY,INT_1,CKB17,CKB21,CKB31,CKB32;
constructors DOMAIN_1,BINOP_2,FINSOP_1,RVSUM_1,GRAPH_2,RFUNCT_3,UPROOTS,GLIB_002,GLIB_003,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB30,CKB33;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
definition
let G being  real-weighted WGraph;
let L being (DIJK:Labeling of G);
func DIJK:Step L -> (DIJK:Labeling of G)
equals
:Def8: L if ( DIJK:NextBestEdges L ) = ( {} ) otherwise [ ( ( L `1 ) +* ( ( ( the_Target_of G ) . ( choose ( DIJK:NextBestEdges L ) ) ) .--> ( ( ( L `1 ) . ( ( the_Source_of G ) . ( choose ( DIJK:NextBestEdges L ) ) ) ) + ( ( the_Weight_of G ) . ( choose ( DIJK:NextBestEdges L ) ) ) ) ) ),( ( L `2 ) \/ { ( choose ( DIJK:NextBestEdges L ) ) } ) ];
coherence
proof
set V = ( the_Vertices_of G );
set E = ( the_Edges_of G );
set BE = ( DIJK:NextBestEdges L );
set e = ( choose BE );
set nE = ( ( L `2 ) \/ { e } );
set s = ( ( the_Source_of G ) . e );
set t = ( ( the_Target_of G ) . e );
set val = ( ( ( L `1 ) . s ) + ( ( the_Weight_of G ) . e ) );
now
assume A1: BE <> ( {} );
then e in BE;
then reconsider e9 = e as (Element of E);
A2: e in BE by A1;
then reconsider t9 = t as (Element of V) by FUNCT_2:5;
(( L `2 ) in ( bool E ) & { e9 } c= E) by A2,MCART_1:10,ZFMISC_1:31;
then A3: nE c= E by XBOOLE_1:8;
({ t9 } c= V & ( dom ( ( L `1 ) +* ( t .--> val ) ) ) = ( ( dom ( L `1 ) ) \/ { t } )) by CKB1:1;
then A4: ( dom ( ( L `1 ) +* ( t .--> val ) ) ) c= V by XBOOLE_1:8;
( rng ( ( L `1 ) +* ( t .--> val ) ) ) c= ( REAL );
then ( ( L `1 ) +* ( t .--> val ) ) in ( PFuncs (V,( REAL )) ) by A4,PARTFUN1:def 3;
hence [ ( ( L `1 ) +* ( t .--> val ) ),nE ] is (DIJK:Labeling of G) by A3,ZFMISC_1:def 2;
end;
hence thesis;
end;
consistency;
end;
