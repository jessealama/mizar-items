environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,PRE_POLY,TARSKI,CARD_1,UPROOTS,CARD_3,ARYTM_3,FINSEQ_1,NAT_1,XXREAL_0,FINSET_1,SUBSET_1,FINSEQ_2,XREAL_0,ORDINAL1,ARYTM_1,GLIB_003,TREES_1,GLIB_000,GLIB_001,REAL_1,PBOOLE,ZFMISC_1,FUNCT_2,ABIAN,PARTFUN1,MCART_1,GLIB_002,WAYBEL_0,RELAT_2,RCOMP_1,GRAPH_1,GLIB_004;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,CARD_1,NUMBERS,SUBSET_1,DOMAIN_1,MCART_1,XCMPLX_0,XXREAL_0,XREAL_0,REAL_1,RELAT_1,RELSET_1,PARTFUN1,FUNCT_1,FINSEQ_1,FINSEQ_2,SEQ_1,PBOOLE,FUNCT_2,RVSUM_1,ABIAN,ORDINAL1,UPROOTS,FINSET_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,RFUNCT_3,PRE_POLY,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB29,CKB30,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB54,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB79,CKB81;
definitions TARSKI,GLIB_000,GLIB_003,RVSUM_1,FUNCOP_1,CKB12,CKB13,CKB14,CKB15,CKB20,CKB23,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB57,CKB58,CKB59,CKB60,CKB62,CKB63,CKB79;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSET_1,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_002,GLIB_003,ABIAN,INT_1,JORDAN12,NAT_1,PARTFUN1,PBOOLE,RELAT_1,RVSUM_1,TARSKI,TREES_1,UPROOTS,XBOOLE_0,XBOOLE_1,XREAL_0,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,FINSOP_1,FUNCT_7,MCART_1,RELSET_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB18,CKB19,CKB20,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB51,CKB52,CKB53,CKB57,CKB58,CKB59,CKB60,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB79,CKB82,CKB83,CKB84;
schemes NAT_1,SUBSET_1,RECDEF_1,GRAPH_5,CQC_SIM1,PBOOLE;
registrations XBOOLE_0,SUBSET_1,RELAT_1,PARTFUN1,FRAENKEL,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,CARD_1,UPROOTS,MEMBERED,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,RELSET_1,PRE_POLY,INT_1,CKB17,CKB21,CKB31,CKB32,CKB50,CKB55,CKB56,CKB69,CKB70,CKB78,CKB80;
constructors DOMAIN_1,BINOP_2,FINSOP_1,RVSUM_1,GRAPH_2,RFUNCT_3,UPROOTS,GLIB_002,GLIB_003,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB12,CKB13,CKB14,CKB15,CKB20,CKB22,CKB23,CKB30,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB79;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
(for G1 being  finite  connected  real-weighted WGraph holds (for G2 being (inducedWSubgraph of G1,( ( PRIM:MST G1 ) `1 ),( ( PRIM:MST G1 ) `2 )) holds G2 is (minimumSpanningTree of G1)))
proof
let G1 being  finite  connected  real-weighted WGraph;
set PMST = ( PRIM:MST G1 );
let G2 being (inducedWSubgraph of G1,( PMST `1 ),( PMST `2 ));
reconsider G29 = G2 as  Tree-like _Graph by CKB76:1;
set VG1 = ( the_Vertices_of G1 );
set EG1 = ( the_Edges_of G1 );
set WG1 = ( the_Weight_of G1 );
set PCS = ( PRIM:CompSeq G1 );
A1: ( PMST `1 ) = VG1 by CKB77:1;
( PMST `2 ) in ( bool EG1 ) by MCART_1:10;
then ( PMST `2 ) c= EG1;
then A2: ( PMST `2 ) c= ( G1 .edgesBetween ( PMST `1 ) ) by A1,GLIB_000:34;
A3: ( PMST `1 ) c= VG1 by CKB77:1;
then A4: ( the_Vertices_of G2 ) = VG1 by A1,A2,GLIB_000:def 37;
A5: ( the_Edges_of G2 ) = ( PMST `2 ) by A1,A2,A3,GLIB_000:def 37;
A6: G2 is  Tree-like by CKB76:1;
now
set X = { x where x is (Element of ( G1 .allWSubgraphs() )): x is (minimumSpanningTree of G1) };
now
let x being set;
assume x in X;
then (ex G2 being (Element of ( G1 .allWSubgraphs() )) st (x = G2 & G2 is (minimumSpanningTree of G1)));
hence x in ( G1 .allWSubgraphs() );
end;
then reconsider X as  finite (Subset of ( G1 .allWSubgraphs() )) by TARSKI:def 3;
defpred Z[  finite _Graph,Nat ]
 means
((not ( ( PCS . ( $2 + 1 ) ) `2 ) c= ( the_Edges_of $1 )) & (for n being Nat holds (n <= $2 implies ( ( PCS . n ) `2 ) c= ( the_Edges_of $1 ))));
defpred P[  finite _Graph, finite _Graph ]
 means
(( card ( ( the_Edges_of $1 ) /\ ( the_Edges_of G2 ) ) ) > ( card ( ( the_Edges_of $2 ) /\ ( the_Edges_of G2 ) ) ) or (( card ( ( the_Edges_of $1 ) /\ ( the_Edges_of G2 ) ) ) = ( card ( ( the_Edges_of $2 ) /\ ( the_Edges_of G2 ) ) ) & (for k1,k2 being Nat holds ((Z[ $1,k1 ] & Z[ $2,k2 ]) implies k1 >= k2))));
A7: ( G1 .edgesBetween VG1 ) = EG1 by GLIB_000:34;
now
set M = the (minimumSpanningTree of G1);
set M9 = ( M | ( WGraphSelectors ) );
(M9 == M & ( the_Weight_of M9 ) = ( the_Weight_of M )) by CKB18:1;
then reconsider M9 as (minimumSpanningTree of G1) by CKB83:1;
( dom M9 ) = ( WGraphSelectors ) by CKB19:1;
then M9 in ( G1 .allWSubgraphs() ) by CKB20:def 1;
then M9 in X;
hence X <> ( {} );
end;
then reconsider X as non  empty  finite (Subset of ( G1 .allWSubgraphs() ));
assume A8: (not G2 is (minimumSpanningTree of G1));
A9:now
let G being (Element of X);
G in X;
then (ex G9 being (Element of ( G1 .allWSubgraphs() )) st (G = G9 & G9 is (minimumSpanningTree of G1)));
then reconsider G9 = G as (minimumSpanningTree of G1);
defpred P4[ Nat ]
 means
(not ( ( PCS . $1 ) `2 ) c= ( the_Edges_of G9 ));
A10: ( the_Vertices_of G2 ) = ( the_Vertices_of G9 ) by A4,GLIB_000:def 33;
A11:now
assume A12: ( the_Edges_of G2 ) = ( the_Edges_of G9 );
( the_Weight_of G2 ) = ( WG1 | ( the_Edges_of G2 ) ) by GLIB_003:def 10
.= ( the_Weight_of G9 ) by A12,GLIB_003:def 10;
hence contradiction by A8,A10,A12,CKB83:1,GLIB_000:86;
end;
now
assume ( the_Edges_of G2 ) c= ( the_Edges_of G9 );
then ( the_Edges_of G2 ) c< ( the_Edges_of G9 ) by A11,XBOOLE_0:def 8;
then ( ( G2 .size() ) + 1 ) < ( ( G9 .size() ) + 1 ) by CARD_2:48,XREAL_1:8;
then A13: ( G2 .order() ) < ( ( G9 .size() ) + 1 ) by A6,GLIB_002:46;
( G2 .order() ) = ( G9 .order() ) by A4,GLIB_000:def 33;
hence contradiction by A13,GLIB_002:46;
end;
then A14: (ex n being Nat st P4[ n ]) by A5;
consider k3 being Nat such that A15: (P4[ k3 ] & (for n being Nat holds (P4[ n ] implies k3 <= n))) from NAT_1:sch 5(A14);
now
assume k3 = ( 0 );
then A16: (not ( ( PRIM:Init G1 ) `2 ) c= ( the_Edges_of G9 )) by A15,CKB62:def 1;
( ( PRIM:Init G1 ) `2 ) = ( {} ) by MCART_1:7;
hence contradiction by A16,XBOOLE_1:2;
end;
then consider k2 being Nat such that A17: ( k2 + 1 ) = k3 by NAT_1:6;
( ( k2 + 1 ) - 1 ) < ( k3 - ( 0 ) ) by A17,XREAL_1:15;
then A18: ( ( PCS . k2 ) `2 ) c= ( the_Edges_of G9 ) by A15;
now
let n being Nat;
assume n <= k2;
then ( ( PCS . n ) `2 ) c= ( ( PCS . k2 ) `2 ) by CKB72:1;
hence ( ( PCS . n ) `2 ) c= ( the_Edges_of G9 ) by A18,XBOOLE_1:1;
end;
hence (ex k1 being Nat st Z[ G,k1 ]) by A15,A17;
end;
now
let x being (Element of X);
let y being (Element of X);
let z being (Element of X);
assume that
A19: P[ x,y ]
and
A20: P[ y,z ];
y in X;
then consider y9 being (WSubgraph of G1) such that A21: y9 = y and ( dom y9 ) = ( WGraphSelectors ) by CKB20:def 1;
set CY = ( card ( ( the_Edges_of y9 ) /\ ( the_Edges_of G2 ) ) );
x in X;
then consider x9 being (WSubgraph of G1) such that A22: x9 = x and ( dom x9 ) = ( WGraphSelectors ) by CKB20:def 1;
z in X;
then consider z9 being (WSubgraph of G1) such that A23: z9 = z and ( dom z9 ) = ( WGraphSelectors ) by CKB20:def 1;
set CZ = ( card ( ( the_Edges_of z9 ) /\ ( the_Edges_of G2 ) ) );
set CX = ( card ( ( the_Edges_of x9 ) /\ ( the_Edges_of G2 ) ) );
now
per cases  by A19,A22,A21;
suppose A24: CX > CY;

now
per cases  by A20,A21,A23;
suppose CY > CZ;

hence P[ x,z ] by A22,A23,A24,XXREAL_0:2;
end;
suppose (CY = CZ & (for ky,kz being Nat holds ((Z[ y9,ky ] & Z[ z9,kz ]) implies ky >= kz)));

hence P[ x,z ] by A22,A23,A24;
end;
end;
hence P[ x,z ];
end;
suppose A25: (CX = CY & (for kx,ky being Nat holds ((Z[ x9,kx ] & Z[ y9,ky ]) implies kx >= ky)));

now
per cases  by A20,A21,A23;
suppose CY > CZ;

hence P[ x,z ] by A22,A23,A25;
end;
suppose A26: (CY = CZ & (for ky,kz being Nat holds ((Z[ y9,ky ] & Z[ z9,kz ]) implies ky >= kz)));

consider zy being Nat such that A27: Z[ y,zy ] by A9;
now
let kx being Nat;
let kz being Nat;
assume (Z[ x9,kx ] & Z[ z9,kz ]);
then (kx >= zy & zy >= kz) by A21,A25,A26,A27;
hence kx >= kz by XXREAL_0:2;
end;
hence P[ x,z ] by A22,A23,A25,A26;
end;
end;
hence P[ x,z ];
end;
end;
hence P[ x,z ];
end;
then A28: (for x,y,z being (Element of X) holds ((P[ x,y ] & P[ y,z ]) implies P[ x,z ]));
A29:now
let G being (Element of X);
let k1 being Nat;
let k2 being Nat;
assume A30: (Z[ G,k1 ] & Z[ G,k2 ]);
then ( k2 + 1 ) > k1;
then A31: k2 >= k1 by NAT_1:13;
( k1 + 1 ) > k2 by A30;
then k1 >= k2 by NAT_1:13;
hence k1 = k2 by A31,XXREAL_0:1;
end;
now
let x being (Element of X);
let y being (Element of X);
x in X;
then consider x9 being (WSubgraph of G1) such that A32: x9 = x and ( dom x9 ) = ( WGraphSelectors ) by CKB20:def 1;
set CX = ( card ( ( the_Edges_of x9 ) /\ ( the_Edges_of G2 ) ) );
y in X;
then consider y9 being (WSubgraph of G1) such that A33: y9 = y and ( dom y9 ) = ( WGraphSelectors ) by CKB20:def 1;
set CY = ( card ( ( the_Edges_of y9 ) /\ ( the_Edges_of G2 ) ) );
now
per cases  by XXREAL_0:1;
suppose CX < CY;

hence (P[ x,y ] or P[ y,x ]) by A32,A33;
end;
suppose A34: CY = CX;

consider k1 being Nat such that A35: Z[ x,k1 ] by A9;
consider k2 being Nat such that A36: Z[ y,k2 ] by A9;
now
per cases ;
suppose A37: k1 >= k2;

now
let z1 being Nat;
let z2 being Nat;
assume that
A38: Z[ x,z1 ]
and
A39: Z[ y,z2 ];
z1 = k1 by A29,A35,A38;
hence z1 >= z2 by A29,A36,A37,A39;
end;
hence (P[ x,y ] or P[ y,x ]) by A32,A33,A34;
end;
suppose A40: k1 < k2;

now
let z1 being Nat;
let z2 being Nat;
assume that
A41: Z[ x,z1 ]
and
A42: Z[ y,z2 ];
z1 = k1 by A29,A35,A41;
hence z1 <= z2 by A29,A36,A40,A42;
end;
hence (P[ x,y ] or P[ y,x ]) by A32,A33,A34;
end;
end;
hence (P[ x,y ] or P[ y,x ]);
end;
suppose CX > CY;

hence (P[ x,y ] or P[ y,x ]) by A32,A33;
end;
end;
hence (P[ x,y ] or P[ y,x ]);
end;
then A43: (for x,y being (Element of X) holds (P[ x,y ] or P[ y,x ]));
A44: ((X is  finite & X <> ( {} )) & X c= X);
consider M being (Element of X) such that A45: (M in X & (for y being (Element of X) holds (y in X implies P[ M,y ]))) from CQC_SIM1:sch 4(A44,A43,A28);
(ex x being (Element of ( G1 .allWSubgraphs() )) st (M = x & x is (minimumSpanningTree of G1))) by A45;
then reconsider M as (minimumSpanningTree of G1);
defpred P2[ Nat ]
 means
(not ( ( PCS . $1 ) `2 ) c= ( the_Edges_of M ));
A46: ( the_Vertices_of G2 ) = ( the_Vertices_of M ) by A4,GLIB_000:def 33;
A47:now
assume A48: ( the_Edges_of G2 ) = ( the_Edges_of M );
( the_Weight_of G2 ) = ( WG1 | ( the_Edges_of G2 ) ) by GLIB_003:def 10
.= ( the_Weight_of M ) by A48,GLIB_003:def 10;
hence contradiction by A8,A46,A48,CKB83:1,GLIB_000:86;
end;
now
assume ( the_Edges_of G2 ) c= ( the_Edges_of M );
then ( the_Edges_of G2 ) c< ( the_Edges_of M ) by A47,XBOOLE_0:def 8;
then ( ( G2 .size() ) + 1 ) < ( ( M .size() ) + 1 ) by CARD_2:48,XREAL_1:8;
then A49: ( G2 .order() ) < ( ( M .size() ) + 1 ) by A6,GLIB_002:46;
( G2 .order() ) = ( M .order() ) by A4,GLIB_000:def 33;
hence contradiction by A49,GLIB_002:46;
end;
then A50: (ex k being Nat st P2[ k ]) by A5;
consider k being Nat such that A51: (P2[ k ] & (for n being Nat holds (P2[ n ] implies k <= n))) from NAT_1:sch 5(A50);
now
assume k = ( 0 );
then A52: (not ( ( PRIM:Init G1 ) `2 ) c= ( the_Edges_of M )) by A51,CKB62:def 1;
( ( PRIM:Init G1 ) `2 ) = ( {} ) by MCART_1:7;
hence contradiction by A52,XBOOLE_1:2;
end;
then consider k1o being Nat such that A53: k = ( k1o + 1 ) by NAT_1:6;
set Gk1b = ( PCS . k1o );
set Gk = ( PCS . k );
( ( k1o + 1 ) - 1 ) < ( k - ( 0 ) ) by A53,XREAL_1:15;
then A54: ( Gk1b `2 ) c= ( the_Edges_of M ) by A51;
set Next = ( PRIM:NextBestEdges Gk1b );
set ep = ( choose Next );
A55: Gk = ( PRIM:Step Gk1b ) by A53,CKB62:def 1;
then A56: Next <> ( {} ) by A51,A54,CKB59:def 1;
then A57: ep SJoins ( Gk1b `1 ),( VG1 \ ( Gk1b `1 ) ),G1 by CKB57:def 1;
(ex v being (Vertex of G1) st ((not v in ( Gk1b `1 )) & Gk = [ ( ( Gk1b `1 ) \/ { v } ),( ( Gk1b `2 ) \/ { ep } ) ])) by A55,A56,CKB64:1;
then A58: ( Gk `2 ) = ( ( Gk1b `2 ) \/ { ep } ) by MCART_1:7;
then A59: (not { ep } c= ( the_Edges_of M )) by A51,A54,XBOOLE_1:8;
then A60: (not ep in ( the_Edges_of M )) by ZFMISC_1:31;
set Mep = the (inducedWSubgraph of G1,VG1,( ( the_Edges_of M ) \/ { ep } ));
A61: ep in Next by A56;
then { ep } c= EG1 by ZFMISC_1:31;
then ( ( the_Edges_of M ) \/ { ep } ) c= EG1 by XBOOLE_1:8;
then A62: (VG1 c= VG1 & ( ( the_Edges_of M ) \/ { ep } ) c= ( G1 .edgesBetween VG1 )) by GLIB_000:34;
then A63: ( the_Vertices_of Mep ) = VG1 by GLIB_000:def 37;
VG1 = ( the_Vertices_of M ) by GLIB_000:def 33;
then (VG1 c= VG1 & M is (inducedWSubgraph of G1,VG1,( the_Edges_of M ))) by A7,GLIB_000:def 37;
then A64: ( Mep .cost() ) = ( ( M .cost() ) + ( WG1 . ep ) ) by A61,A60,A7,CKB25:1;
set MG2 = ( ( the_Edges_of M ) /\ ( the_Edges_of G2 ) );
A65: ( Gk `2 ) c= ( PMST `2 ) by CKB84:1;
ep in { ep } by TARSKI:def 1;
then A66: ep in ( Gk `2 ) by A58,XBOOLE_0:def 3;
then A67: ( { ep } /\ ( the_Edges_of G2 ) ) = { ep } by A5,A65,ZFMISC_1:46;
now
assume ( MG2 /\ { ep } ) <> ( {} );
then consider x being set such that A68: x in ( MG2 /\ { ep } ) by XBOOLE_0:def 1;
x in { ep } by A68,XBOOLE_0:def 4;
then A69: x = ep by TARSKI:def 1;
x in MG2 by A68,XBOOLE_0:def 4;
then x in ( the_Edges_of M ) by XBOOLE_0:def 4;
hence contradiction by A59,A69,ZFMISC_1:31;
end;
then A70: MG2 misses { ep } by XBOOLE_0:def 7;
set v1 = ( ( the_Source_of Mep ) . ep );
set v2 = ( ( the_Target_of Mep ) . ep );
set V = ( Gk1b `1 );
A71: ( the_Weight_of Mep ) = ( WG1 | ( the_Edges_of Mep ) ) by GLIB_003:def 10;
A72: VG1 = ( the_Vertices_of M ) by GLIB_000:def 33;
then reconsider V as non  empty (Subset of ( the_Vertices_of M )) by CKB66:1;
A73: ( the_Edges_of Mep ) = ( ( the_Edges_of M ) \/ { ep } ) by A62,GLIB_000:def 37;
( the_Vertices_of M ) c= ( the_Vertices_of Mep ) by A63;
then reconsider M9 = M as  connected (Subgraph of Mep) by A73,GLIB_000:44,XBOOLE_1:7;
ep in { ep } by TARSKI:def 1;
then A74: ep in ( the_Edges_of Mep ) by A73,XBOOLE_0:def 3;
( the_Vertices_of Mep ) = ( the_Vertices_of M ) by A63,GLIB_000:def 33;
then reconsider v1,v2 as (Vertex of M) by A74,FUNCT_2:5;
consider W being (Walk of M9) such that A75: W is_Walk_from v2,v1 by GLIB_002:def 1;
set PW = the (Path of W);
reconsider P = PW as (Path of Mep) by GLIB_001:175;
A76: PW is_Walk_from v2,v1 by A75,GLIB_001:160;
then A77: P is_Walk_from v2,v1 by GLIB_001:19;
A78:now
reconsider PM = P as (Walk of M);
let n being  odd (Element of ( NAT ));
assume that
A79: (1 < n & n <= ( len P ))
and
A80: ( P . n ) = v2;
v2 = ( P .first() ) by A77,GLIB_001:def 23
.= ( P . ( ( 2 * ( 0 ) ) + 1 ) ) by GLIB_001:def 6;
then n = ( len P ) by A79,A80,GLIB_001:def 28;
then ( P .last() ) = v2 by A80,GLIB_001:def 7
.= ( P .first() ) by A77,GLIB_001:def 23;
then P is  closed by GLIB_001:def 24;
then A81: PM is  closed by GLIB_001:176;
PM is non  trivial by A79,GLIB_001:126;
then PM is  Cycle-like by A81,GLIB_001:def 31;
hence contradiction by GLIB_002:def 2;
end;
A82: ep Joins v1,v2,Mep by A74,GLIB_000:def 13;
then A83: ep Joins ( P .last() ),v2,Mep by A77,GLIB_001:def 23;
ep Joins v1,v2,G1 by A82,GLIB_000:72;
then A84: ep Joins v1,v2,G29 by A5,A66,A65,GLIB_000:73;
then ((( ( the_Source_of G2 ) . ep ) = v1 & ( ( the_Target_of G2 ) . ep ) = v2) or (( ( the_Target_of G2 ) . ep ) = v1 & ( ( the_Source_of G2 ) . ep ) = v2)) by GLIB_000:def 13;
then v1 <> v2 by A5,A66,A65,A84,GLIB_000:def 18;
then v1 <> ( P .first() ) by A77,GLIB_001:def 23;
then ( P .last() ) <> ( P .first() ) by A77,GLIB_001:def 23;
then A85: P is  open by GLIB_001:def 24;
( PW .edges() ) c= ( the_Edges_of M );
then ( P .edges() ) c= ( the_Edges_of M ) by GLIB_001:110;
then (not ep in ( P .edges() )) by A59,ZFMISC_1:31;
then A86: ( P .addEdge ep ) is  Path-like by A85,A83,A78,GLIB_001:150;
( P .addEdge ep ) is_Walk_from v2,v2 by A77,A82,GLIB_001:66;
then A87: ( P .addEdge ep ) is  closed by GLIB_001:119;
( the_Vertices_of M ) c= ( the_Vertices_of Mep ) by A63;
then reconsider M9 = M as  connected (Subgraph of Mep) by A73,GLIB_000:44,XBOOLE_1:7;
( the_Vertices_of M9 ) = ( the_Vertices_of Mep ) by A63,GLIB_000:def 33;
then M9 is  spanning by GLIB_000:def 33;
then A88: Mep is  connected by GLIB_002:23;
A89: v2 = ( P . 1 ) by A76,GLIB_001:17;
set C = ( P .addEdge ep );
A90: v1 = ( P . ( len P ) ) by A76,GLIB_001:17;
A91: (( ( the_Source_of G1 ) . ep ) = v1 & ( ( the_Target_of G1 ) . ep ) = v2) by A74,GLIB_000:def 32;
now
per cases  by A57,A91,GLIB_000:def 15;
suppose A92: (v1 in ( Gk1b `1 ) & v2 in ( VG1 \ ( Gk1b `1 ) ));

A93: (( len C ) = ( ( len P ) + 2 ) & ( C . ( ( len P ) + 1 ) ) = ep) by A83,GLIB_001:64,GLIB_001:65;
defpred P3[ Nat ]
 means
(($1 is  odd & $1 <= ( len P )) & ( P . $1 ) in ( Gk1b `1 ));
A94: (ex n being Nat st P3[ n ]) by A90,A92;
consider m being Nat such that A95: (P3[ m ] & (for n being Nat holds (P3[ n ] implies m <= n))) from NAT_1:sch 5(A94);
reconsider m as  odd (Element of ( NAT )) by A95,ORDINAL1:def 12;
(1 <= m & m <> 1) by A89,A92,A95,ABIAN:12,XBOOLE_0:def 5;
then 1 < m by XXREAL_0:1;
then ( 1 + 1 ) <= m by NAT_1:13;
then reconsider m2k = ( m - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by INT_1:5;
A96: m2k < ( m - ( 0 ) ) by XREAL_1:15;
then A97: m2k < ( len P ) by A95,XXREAL_0:2;
then A98: (not ( P . m2k ) in ( Gk1b `1 )) by A95,A96;
set em = ( P . ( m2k + 1 ) );
A99: em in ( P .edges() ) by A97,GLIB_001:100;
then consider i being  even (Element of ( NAT )) such that A100: 1 <= i and A101: i <= ( len P ) and A102: ( P . i ) = em by GLIB_001:99;
i in ( dom P ) by A100,A101,FINSEQ_3:25;
then A103: ( C . i ) = em by A83,A102,GLIB_001:65;
take em;
( C .edges() ) = ( ( P .edges() ) \/ { ep } ) by A83,GLIB_001:111;
hence em in ( C .edges() ) by A99,XBOOLE_0:def 3;
A104: ( ( len P ) + 1 ) <= ( ( len P ) + 2 ) by XREAL_1:7;
( ( len P ) + ( 0 ) ) < ( ( len P ) + 1 ) by XREAL_1:8;
then i < ( ( len P ) + 1 ) by A101,XXREAL_0:2;
hence em <> ep by A86,A100,A103,A93,A104,GLIB_001:138;
( m2k + 2 ) = m;
then A105: em Joins ( PW . m2k ),( PW . m ),M by A97,GLIB_001:def 3;
then ( PW . m2k ) in ( the_Vertices_of M ) by GLIB_000:13;
then ( PW . m2k ) in ( ( the_Vertices_of M ) \ ( Gk1b `1 ) ) by A98,XBOOLE_0:def 5;
hence em SJoins V,( ( the_Vertices_of M ) \ V ),M by A95,A105,GLIB_000:17;
end;
suppose A106: (v2 in ( Gk1b `1 ) & v1 in ( VG1 \ ( Gk1b `1 ) ));

A107: (( len C ) = ( ( len P ) + 2 ) & ( C . ( ( len P ) + 1 ) ) = ep) by A83,GLIB_001:64,GLIB_001:65;
defpred P3[ Nat ]
 means
(($1 is  odd & $1 <= ( len P )) & ( P . $1 ) in ( VG1 \ ( Gk1b `1 ) ));
A108: (ex n being Nat st P3[ n ]) by A90,A106;
consider m being Nat such that A109: (P3[ m ] & (for n being Nat holds (P3[ n ] implies m <= n))) from NAT_1:sch 5(A108);
reconsider m as  odd (Element of ( NAT )) by A109,ORDINAL1:def 12;
(1 <= m & m <> 1) by A89,A106,A109,ABIAN:12,XBOOLE_0:def 5;
then 1 < m by XXREAL_0:1;
then ( 1 + 1 ) <= m by NAT_1:13;
then reconsider m2k = ( m - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by INT_1:5;
A110: m2k < ( m - ( 0 ) ) by XREAL_1:15;
then A111: m2k < ( len P ) by A109,XXREAL_0:2;
A112:now
assume A113: (not ( P . m2k ) in ( Gk1b `1 ));
( P . m2k ) in VG1 by A72,A111,GLIB_001:7;
then ( P . m2k ) in ( VG1 \ ( Gk1b `1 ) ) by A113,XBOOLE_0:def 5;
hence contradiction by A109,A110,A111;
end;
set em = ( P . ( m2k + 1 ) );
A114: em in ( P .edges() ) by A111,GLIB_001:100;
then consider i being  even (Element of ( NAT )) such that A115: 1 <= i and A116: i <= ( len P ) and A117: ( P . i ) = em by GLIB_001:99;
i in ( dom P ) by A115,A116,FINSEQ_3:25;
then A118: ( C . i ) = em by A83,A117,GLIB_001:65;
take em;
( C .edges() ) = ( ( P .edges() ) \/ { ep } ) by A83,GLIB_001:111;
hence em in ( C .edges() ) by A114,XBOOLE_0:def 3;
A119: ( ( len P ) + 1 ) <= ( ( len P ) + 2 ) by XREAL_1:7;
( ( len P ) + ( 0 ) ) < ( ( len P ) + 1 ) by XREAL_1:8;
then i < ( ( len P ) + 1 ) by A116,XXREAL_0:2;
hence em <> ep by A86,A115,A118,A107,A119,GLIB_001:138;
( m2k + 2 ) = m;
then em Joins ( PW . m2k ),( PW . m ),M by A111,GLIB_001:def 3;
hence em SJoins V,( ( the_Vertices_of M ) \ V ),M by A72,A109,A112,GLIB_000:17;
end;
end;
then consider em being set such that A120: em in ( C .edges() ) and A121: em <> ep and A122: em SJoins V,( ( the_Vertices_of M ) \ V ),M;
set M2 = the  weight-inheriting  [Weighted] (removeEdge of Mep,em);
reconsider M2 as (WSubgraph of G1) by GLIB_003:9;
A123: ( M2 .order() ) = ( card VG1 ) by A63,GLIB_000:53
.= ( M .order() ) by GLIB_000:def 33;
A124: em SJoins V,( VG1 \ V ),G1 by A72,A122,GLIB_000:72;
then A125: ( WG1 . ep ) <= ( WG1 . em ) by A56,CKB57:def 1;
set M29 = ( M2 | ( WGraphSelectors ) );
A126: M29 == M2 by CKB18:1;
A127: ( the_Edges_of M2 ) = ( ( ( the_Edges_of M ) \/ { ep } ) \ { em } ) by A73,GLIB_000:51;
then A128: ( the_Edges_of M29 ) = ( ( ( the_Edges_of M ) \/ { ep } ) \ { em } ) by A126,GLIB_000:def 34;
{ em } c= ( ( the_Edges_of M ) \/ { ep } ) by A73,A120,ZFMISC_1:31;
then ( M2 .size() ) = ( ( card ( ( the_Edges_of M ) \/ { ep } ) ) - ( card { em } ) ) by A127,CARD_2:44
.= ( ( card ( ( the_Edges_of M ) \/ { ep } ) ) - 1 ) by CARD_1:30
.= ( ( ( card ( the_Edges_of M ) ) + 1 ) - 1 ) by A60,CARD_2:41
.= ( M .size() );
then A129: ( M2 .order() ) = ( ( M2 .size() ) + 1 ) by A123,GLIB_002:46;
A130: ( the_Weight_of M29 ) = ( the_Weight_of M2 ) by CKB18:1;
then reconsider M29 as (WSubgraph of G1) by A126,GLIB_003:8;
A131: ( the_Vertices_of M29 ) = ( the_Vertices_of M2 ) by A126,GLIB_000:def 34
.= VG1 by A63,GLIB_000:53;
( P .addEdge ep ) is non  trivial by A83,GLIB_001:132;
then C is  Cycle-like by A86,A87,GLIB_001:def 31;
then M2 is  connected by A120,A88,GLIB_002:5;
then M2 is  Tree-like by A129,GLIB_002:47;
then M29 is  Tree-like by CKB18:1,GLIB_002:48;
then reconsider M29 as  spanning  Tree-like (WSubgraph of G1) by A131,GLIB_000:def 33;
( ( M2 .cost() ) + ( ( the_Weight_of Mep ) . em ) ) = ( Mep .cost() ) by A120,CKB24:1;
then ( M2 .cost() ) = ( ( Mep .cost() ) - ( ( the_Weight_of Mep ) . em ) );
then ( M2 .cost() ) = ( ( ( M .cost() ) + ( WG1 . ep ) ) - ( WG1 . em ) ) by A120,A64,A71,FUNCT_1:49;
then ( M29 .cost() ) = ( ( ( M .cost() ) + ( WG1 . ep ) ) - ( WG1 . em ) ) by A126,A130,GLIB_000:def 34;
then A132: ( ( ( M29 .cost() ) + ( WG1 . em ) ) - ( WG1 . em ) ) <= ( ( ( M .cost() ) + ( WG1 . ep ) ) - ( WG1 . ep ) ) by A125,XREAL_1:13;
now
let G3 being  spanning  Tree-like (WSubgraph of G1);
( M .cost() ) <= ( G3 .cost() ) by CKB79:def 1;
hence ( M29 .cost() ) <= ( G3 .cost() ) by A132,XXREAL_0:2;
end;
then reconsider M29 as (minimumSpanningTree of G1) by CKB79:def 1;
set MG29 = ( ( the_Edges_of M29 ) /\ ( the_Edges_of G2 ) );
A133: MG29 = ( ( ( ( the_Edges_of M ) \/ { ep } ) /\ ( the_Edges_of G2 ) ) \ ( { em } /\ ( the_Edges_of G2 ) ) ) by A128,XBOOLE_1:50;
( dom M29 ) = ( WGraphSelectors ) by CKB19:1;
then M29 in ( G1 .allWSubgraphs() ) by CKB20:def 1;
then A134: M29 in X;
A135:now
thus (not ( ( PCS . ( k1o + 1 ) ) `2 ) c= ( the_Edges_of M )) by A51,A53;
let n being Nat;
assume n <= k1o;
then ( ( PCS . n ) `2 ) c= ( Gk1b `2 ) by CKB72:1;
hence ( ( PCS . n ) `2 ) c= ( the_Edges_of M ) by A54,XBOOLE_1:1;
end;
A136:now
consider k2 being Nat such that A137: Z[ M29,k2 ] by A9,A134;
A138:now
set Vr = ( VG1 \ V );
assume A139: em in ( Gk1b `2 );
A140: ( Gk1b `2 ) c= ( G1 .edgesBetween ( Gk1b `1 ) ) by CKB66:1;
then ( ( the_Target_of G1 ) . em ) in ( Gk1b `1 ) by A139,GLIB_000:31;
then A141: (not ( ( the_Target_of G1 ) . em ) in Vr) by XBOOLE_0:def 5;
( ( the_Source_of G1 ) . em ) in ( Gk1b `1 ) by A139,A140,GLIB_000:31;
then (not ( ( the_Source_of G1 ) . em ) in Vr) by XBOOLE_0:def 5;
hence contradiction by A124,A141,GLIB_000:def 15;
end;
now
let x being set;
assume A142: x in ( Gk `2 );
now
per cases  by A58,A142,XBOOLE_0:def 3;
suppose x in ( Gk1b `2 );

then (x in ( ( the_Edges_of M ) \/ { ep } ) & (not x in { em })) by A54,A138,TARSKI:def 1,XBOOLE_0:def 3;
hence x in ( the_Edges_of M29 ) by A128,XBOOLE_0:def 5;
end;
suppose A143: x in { ep };

then x = ep by TARSKI:def 1;
then A144: (not x in { em }) by A121,TARSKI:def 1;
x in ( ( the_Edges_of M ) \/ { ep } ) by A143,XBOOLE_0:def 3;
hence x in ( the_Edges_of M29 ) by A128,A144,XBOOLE_0:def 5;
end;
end;
hence x in ( the_Edges_of M29 );
end;
then A145: ( Gk `2 ) c= ( the_Edges_of M29 ) by TARSKI:def 3;
A146:now
assume k2 < k;
then ( k2 + 1 ) <= k by NAT_1:13;
then ( ( PCS . ( k2 + 1 ) ) `2 ) c= ( Gk `2 ) by CKB72:1;
hence contradiction by A137,A145,XBOOLE_1:1;
end;
assume A147: em in ( the_Edges_of G2 );
now
let x being set;
assume x in { em };
then x = em by TARSKI:def 1;
hence x in ( ( ( the_Edges_of M ) \/ { ep } ) /\ ( the_Edges_of G2 ) ) by A73,A120,A147,XBOOLE_0:def 4;
end;
then A148: { em } c= ( ( ( the_Edges_of M ) \/ { ep } ) /\ ( the_Edges_of G2 ) ) by TARSKI:def 3;
MG29 = ( ( ( ( the_Edges_of M ) \/ { ep } ) /\ ( the_Edges_of G2 ) ) \ { em } ) by A133,A147,ZFMISC_1:46;
then ( card MG29 ) = ( ( card ( ( the_Edges_of Mep ) /\ ( the_Edges_of G2 ) ) ) - ( card { em } ) ) by A73,A148,CARD_2:44
.= ( ( card ( ( the_Edges_of Mep ) /\ ( the_Edges_of G2 ) ) ) - 1 ) by CARD_1:30
.= ( ( card ( MG2 \/ { ep } ) ) - 1 ) by A73,A67,XBOOLE_1:23
.= ( ( ( card MG2 ) + ( card { ep } ) ) - 1 ) by A70,CARD_2:40
.= ( ( ( card MG2 ) + 1 ) - 1 ) by CARD_1:30
.= ( card MG2 );
then A149: k1o >= k2 by A45,A134,A135,A137;
( ( k1o + 1 ) - 1 ) < ( k - ( 0 ) ) by A53,XREAL_1:15;
hence contradiction by A146,A149,XXREAL_0:2;
end;
now
assume ( { em } /\ ( the_Edges_of G2 ) ) <> ( {} );
then consider x being set such that A150: x in ( { em } /\ ( the_Edges_of G2 ) ) by XBOOLE_0:def 1;
(x in { em } & x in ( the_Edges_of G2 )) by A150,XBOOLE_0:def 4;
hence contradiction by A136,TARSKI:def 1;
end;
then A151: MG29 = ( MG2 \/ ( { ep } /\ ( the_Edges_of G2 ) ) ) by A133,XBOOLE_1:23;
now
assume ( MG2 /\ { ep } ) <> ( {} );
then consider x being set such that A152: x in ( MG2 /\ { ep } ) by XBOOLE_0:def 1;
x in { ep } by A152,XBOOLE_0:def 4;
then A153: x = ep by TARSKI:def 1;
x in MG2 by A152,XBOOLE_0:def 4;
then x in ( the_Edges_of M ) by XBOOLE_0:def 4;
hence contradiction by A59,A153,ZFMISC_1:31;
end;
then MG2 misses { ep } by XBOOLE_0:def 7;
then ( card MG29 ) = ( ( card MG2 ) + ( card { ep } ) ) by A67,A151,CARD_2:40
.= ( ( card MG2 ) + 1 ) by CARD_1:30;
then ( ( card MG2 ) + ( 0 ) ) >= ( ( card MG2 ) + 1 ) by A45,A134;
hence contradiction by XREAL_1:6;
end;
hence thesis;
end;
