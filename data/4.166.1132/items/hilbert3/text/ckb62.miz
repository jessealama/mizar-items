environ
vocabularies INT_1,ABIAN,ARYTM_1,ZFMISC_1,FUNCT_1,RELAT_1,TARSKI,FUNCOP_1,FUNCT_2,FUNCT_6,XBOOLE_0,PBOOLE,SUBSET_1,NUMBERS,NAT_1,HILBERT1,CARD_1,FUNCT_3,CARD_3,MCART_1,PARTFUN1,FINSEQ_4,XBOOLEAN,QC_LANG1,HILBERT2,FUNCT_5,ARYTM_3,FUNCT_4,XXREAL_0,HILBERT3,XCMPLX_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,RELAT_1,FUNCT_1,PBOOLE,CARD_3,ABIAN,PARTFUN1,FUNCT_2,BINOP_1,NAT_1,XXREAL_0,FUNCT_3,FUNCOP_1,FUNCT_4,FUNCT_5,FUNCT_6,PRALG_1,PRALG_2,MSUALG_3,HILBERT1,HILBERT2,CKB29,CKB34,CKB35,CKB36,CKB46,CKB47,CKB48,CKB58;
definitions PBOOLE,FUNCT_1,FUNCT_2,TARSKI,HILBERT1,ABIAN,FUNCOP_1,RELAT_1,XBOOLE_0,BINOP_1,SUBSET_1,CKB29,CKB35,CKB36,CKB46,CKB47,CKB48,CKB58;
theorems PBOOLE,ZFMISC_1,MSUALG_3,FUNCT_2,RELAT_1,RELSET_1,FUNCT_1,FUNCT_3,TARSKI,FUNCOP_1,PARTFUN2,PRALG_2,CARD_3,FUNCT_6,MSSUBFAM,FUNCT_5,FUNCTOR0,CAT_2,HILBERT1,FUNCT_4,INT_1,TOPREAL6,PRALG_1,XBOOLE_0,XBOOLE_1,XCMPLX_1,ABIAN,XREAL_1,XXREAL_0,CARD_1,PARTFUN1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB31,CKB32,CKB33,CKB35,CKB36,CKB38,CKB39,CKB40,CKB41,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58;
schemes HILBERT2,FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,PARTFUN1,FUNCT_2,FUNCOP_1,FUNCT_4,NUMBERS,XREAL_0,INT_1,PBOOLE,ABIAN,HILBERT1,FUNCT_7,RELSET_1,ZFMISC_1,MSSUBFAM,CKB1,CKB2,CKB18,CKB30,CKB37,CKB42,CKB43,CKB44,CKB45,CKB53,CKB59,CKB60,CKB61;
constructors XXREAL_0,NAT_D,REALSET1,MSSUBFAM,ABIAN,CAT_2,PRALG_1,PRALG_2,MSUALG_3,HILBERT2,RELSET_1,CKB29,CKB35,CKB36,CKB46,CKB47,CKB48,CKB58;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve p for (Element of ( HP-WFF ));
reserve q for (Element of ( HP-WFF ));
reserve V for SetValuation;
registration
let p;
let q;
cluster ( ( p '&' q ) => q ) ->  canonical;
coherence
proof
let V;
take f = ( pr2 (( SetVal (V,p) ),( SetVal (V,q) )) );
let P being (Permutation of V);
A1: ( dom ( Perm (P,( ( p '&' q ) => q )) ) ) = ( SetVal (V,( ( p '&' q ) => q )) ) by FUNCT_2:def 1
.= ( Funcs (( SetVal (V,( p '&' q )) ),( SetVal (V,q) )) ) by CKB35:def 1
.= ( Funcs ([: ( SetVal (V,p) ),( SetVal (V,q) ) :],( SetVal (V,q) )) ) by CKB35:def 1;
hence f in ( dom ( Perm (P,( ( p '&' q ) => q )) ) ) by FUNCT_2:8;
then f in ( Funcs (( SetVal (V,( p '&' q )) ),( SetVal (V,q) )) ) by A1,CKB35:def 1;
then reconsider F = f as (Function of ( SetVal (V,( p '&' q )) ),( SetVal (V,q) )) by FUNCT_2:66;
thus ( ( Perm (P,( ( p '&' q ) => q )) ) . f ) = ( ( ( Perm (P,q) ) * F ) * ( ( Perm (P,( p '&' q )) ) " ) ) by CKB54:1
.= ( ( ( Perm (P,q) ) * F ) * ( [: ( Perm (P,p) ),( Perm (P,q) ) :] " ) ) by CKB51:1
.= ( ( ( Perm (P,q) ) * F ) * [: ( ( Perm (P,p) ) " ),( ( Perm (P,q) ) " ) :] ) by FUNCTOR0:6
.= ( ( Perm (P,q) ) * ( F * [: ( ( Perm (P,p) ) " ),( ( Perm (P,q) ) " ) :] ) ) by RELAT_1:36
.= ( ( Perm (P,q) ) * ( ( ( Perm (P,q) ) " ) * F ) ) by CKB20:1
.= ( ( ( Perm (P,q) ) * ( ( Perm (P,q) ) " ) ) * F ) by RELAT_1:36
.= ( ( id ( SetVal (V,q) ) ) * F ) by FUNCT_2:61
.= f by FUNCT_2:17;
end;
end;
