environ
vocabularies INT_1,ABIAN,ARYTM_1,ZFMISC_1,FUNCT_1,RELAT_1,TARSKI,FUNCOP_1,FUNCT_2,FUNCT_6,XBOOLE_0,PBOOLE,SUBSET_1,NUMBERS,NAT_1,HILBERT1,CARD_1,FUNCT_3,CARD_3,MCART_1,PARTFUN1,FINSEQ_4,XBOOLEAN,QC_LANG1,HILBERT2,FUNCT_5,ARYTM_3,FUNCT_4,XXREAL_0,HILBERT3,XCMPLX_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,RELAT_1,FUNCT_1,PBOOLE,CARD_3,ABIAN,PARTFUN1,FUNCT_2,BINOP_1,NAT_1,XXREAL_0,FUNCT_3,FUNCOP_1,FUNCT_4,FUNCT_5,FUNCT_6,PRALG_1,PRALG_2,MSUALG_3,HILBERT1,HILBERT2,CKB29,CKB34,CKB35,CKB36,CKB46,CKB47,CKB48;
definitions PBOOLE,FUNCT_1,FUNCT_2,TARSKI,HILBERT1,ABIAN,FUNCOP_1,RELAT_1,XBOOLE_0,BINOP_1,SUBSET_1,CKB29,CKB35,CKB36,CKB46,CKB47,CKB48;
theorems PBOOLE,ZFMISC_1,MSUALG_3,FUNCT_2,RELAT_1,RELSET_1,FUNCT_1,FUNCT_3,TARSKI,FUNCOP_1,PARTFUN2,PRALG_2,CARD_3,FUNCT_6,MSSUBFAM,FUNCT_5,FUNCTOR0,CAT_2,HILBERT1,FUNCT_4,INT_1,TOPREAL6,PRALG_1,XBOOLE_0,XBOOLE_1,XCMPLX_1,ABIAN,XREAL_1,XXREAL_0,CARD_1,PARTFUN1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB31,CKB32,CKB33,CKB35,CKB36,CKB38,CKB39,CKB40,CKB41,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52;
schemes HILBERT2,FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,PARTFUN1,FUNCT_2,FUNCOP_1,FUNCT_4,NUMBERS,XREAL_0,INT_1,PBOOLE,ABIAN,HILBERT1,FUNCT_7,RELSET_1,ZFMISC_1,MSSUBFAM,CKB1,CKB2,CKB18,CKB30,CKB37,CKB42,CKB43,CKB44,CKB45;
constructors XXREAL_0,NAT_D,REALSET1,MSSUBFAM,ABIAN,CAT_2,PRALG_1,PRALG_2,MSUALG_3,HILBERT2,RELSET_1,CKB29,CKB35,CKB36,CKB46,CKB47,CKB48;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve n for (Element of ( NAT ));
reserve p for (Element of ( HP-WFF ));
reserve r for (Element of ( HP-WFF ));
reserve s for (Element of ( HP-WFF ));
reserve V for SetValuation;
reserve P for (Permutation of V);
registration
let V;
let P;
let p;
cluster ( Perm (P,p) ) ->  bijective;
coherence
proof
defpred P[ (Element of ( HP-WFF )) ]
 means
( Perm (P,$1) ) is  bijective;
A1: (for n holds P[ ( prop n ) ])
proof
let n;
(( SetVal (V,( prop n )) ) = ( V . n ) & ( Perm (P,( prop n )) ) = ( P . n )) by CKB35:def 1,CKB47:def 1;
hence thesis by CKB46:def 1;
end;
A2: (for r holds (for s holds ((P[ r ] & P[ s ]) implies (P[ ( r '&' s ) ] & P[ ( r => s ) ]))))
proof
let r;
let s;
assume ( Perm (P,r) ) is  bijective;
then reconsider r9 = ( Perm (P,r) ) as (Permutation of ( SetVal (V,r) ));
assume ( Perm (P,s) ) is  bijective;
then reconsider s9 = ( Perm (P,s) ) as (Permutation of ( SetVal (V,s) ));
(( SetVal (V,( r '&' s )) ) = [: ( SetVal (V,r) ),( SetVal (V,s) ) :] & ( Perm (P,( r '&' s )) ) = [: r9,s9 :]) by CKB35:def 1,CKB51:1;
hence ( Perm (P,( r '&' s )) ) is  bijective by CKB28:1;
(( SetVal (V,( r => s )) ) = ( Funcs (( SetVal (V,r) ),( SetVal (V,s) )) ) & ( Perm (P,( r => s )) ) = ( r9 => s9 )) by CKB35:def 1,CKB52:1;
hence thesis;
end;
( Perm (P,( VERUM )) ) = ( id ( SetVal (V,( VERUM )) ) ) by CKB49:1;
then A3: P[ ( VERUM ) ];
(for p holds P[ p ]) from HILBERT2:sch 2(A3,A1,A2);
hence thesis;
end;
end;
