environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,MARGREL1,BVFUNC_1,XBOOLEAN,FUNCT_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,BVFUNC_1;
definitions XBOOLEAN;
theorems MARGREL1,BINARITH,BVFUNC_1,XBOOLEAN,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
registrations XBOOLE_0,XBOOLEAN,MARGREL1;
constructors BINARITH,BVFUNC_1;
requirements ARITHM;
begin
reserve Y for non empty set;
theorem
(for a,b,c being (Element of ( Funcs (Y,( BOOLEAN )) )) holds ((( c 'imp' a ) = ( I_el Y ) & ( c 'imp' b ) = ( I_el Y )) implies ( c 'imp' ( a '&' b ) ) = ( I_el Y )))
proof
let a being (Element of ( Funcs (Y,( BOOLEAN )) )),b being (Element of ( Funcs (Y,( BOOLEAN )) )),c being (Element of ( Funcs (Y,( BOOLEAN )) ));
assume that
A1: ( c 'imp' a ) = ( I_el Y )
and
A2: ( c 'imp' b ) = ( I_el Y );
(for x being (Element of Y) holds ( ( c 'imp' ( a '&' b ) ) . x ) = ( TRUE ))
proof
let x being (Element of Y);
( ( c 'imp' a ) . x ) = ( TRUE ) by A1,BVFUNC_1:def 11;
then A3: ( ( 'not' ( c . x ) ) 'or' ( a . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
( ( c 'imp' b ) . x ) = ( TRUE ) by A2,BVFUNC_1:def 11;
then A4: ( ( 'not' ( c . x ) ) 'or' ( b . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
( ( c 'imp' ( a '&' b ) ) . x ) = ( ( 'not' ( c . x ) ) 'or' ( ( a '&' b ) . x ) ) by BVFUNC_1:def 8
.= ( ( 'not' ( c . x ) ) 'or' ( ( a . x ) '&' ( b . x ) ) ) by MARGREL1:def 20
.= ( ( TRUE ) '&' ( TRUE ) ) by A3,A4,XBOOLEAN:9
.= ( TRUE );
hence thesis;
end;
hence thesis by BVFUNC_1:def 11;
end;
