environ
vocabularies CIRCCOMB,STRUCT_0,XBOOLE_0,MSUALG_1,GFACIRC1,FUNCT_4,LATTICES,CIRCUIT1,MSAFREE2,FINSEQ_1,TWOSCOMP,PARTFUN1,RELAT_1,MCART_1,FACIRC_1,SUBSET_1,FSM_1,MARGREL1,FUNCT_1,CIRCUIT2,XBOOLEAN,ARYTM_3,FTACELL1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,NAT_1,MCART_1,RELAT_1,STRUCT_0,FUNCT_1,PARTFUN1,FINSEQ_1,MARGREL1,BINARITH,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,GFACIRC1,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB53,CKB54,CKB63,CKB64,CKB65,CKB66,CKB79,CKB80,CKB89,CKB90,CKB91,CKB92;
definitions FACIRC_1,GFACIRC1,XBOOLEAN,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB53,CKB54,CKB63,CKB64,CKB65,CKB66,CKB79,CKB80,CKB89,CKB90,CKB91,CKB92;
theorems XBOOLE_0,XBOOLE_1,ZFMISC_1,ENUMSET1,MCART_1,FUNCT_1,FINSEQ_2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,CIRCCMB2,GFACIRC1,XBOOLEAN,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98;
registrations RELAT_1,MARGREL1,CARD_3,CIRCCOMB,FACIRC_1,ORDINAL1,FINSEQ_1,FUNCT_1;
constructors ENUMSET1,BINARITH,CIRCUIT1,CIRCUIT2,FACIRC_1,TWOSCOMP,NAT_1,GFACIRC1,RELSET_1,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB53,CKB54,CKB63,CKB64,CKB65,CKB66,CKB79,CKB80,CKB89,CKB90,CKB91,CKB92;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Lm37: (for am,bm,cm,dm being non pair set holds (for cin being set holds (for s being (State of ( BitFTA3Circ (am,bm,cm,dm,cin) )) holds (for a123x,a123y,a123z being (Element of ( BOOLEAN )) holds (((a123x = ( s . [ <* ( GFA3AdderOutput (am,bm,cm) ),cin *>,( and2b ) ] ) & a123y = ( s . [ <* cin,dm *>,( and2b ) ] )) & a123z = ( s . [ <* dm,( GFA3AdderOutput (am,bm,cm) ) *>,( and2b ) ] )) implies ( ( Following s ) . ( GFA3CarryOutput (( GFA3AdderOutput (am,bm,cm) ),cin,dm) ) ) = ( 'not' ( ( a123x 'or' a123y ) 'or' a123z ) ))))))
proof
let am being non pair set,bm being non pair set,cm being non pair set,dm being non pair set;
let cin being set;
set S = ( BitFTA3Str (am,bm,cm,dm,cin) );
set C = ( BitFTA3Circ (am,bm,cm,dm,cin) );
set A1 = ( GFA3AdderOutput (am,bm,cm) );
set A2 = ( GFA3CarryOutput (A1,cin,dm) );
set A1cin = [ <* A1,cin *>,( and2b ) ];
set cindm = [ <* cin,dm *>,( and2b ) ];
set dmA1 = [ <* dm,A1 *>,( and2b ) ];
let s being (State of C);
let a123x being (Element of ( BOOLEAN )),a123y being (Element of ( BOOLEAN )),a123z being (Element of ( BOOLEAN ));
assume that
A1: ((a123x = ( s . A1cin ) & a123y = ( s . cindm )) & a123z = ( s . dmA1 ));
A2: (A1cin in (the carrier of S) & cindm in (the carrier of S)) by CKB86:1;
A3: (dmA1 in (the carrier of S) & ( dom s ) = (the carrier of S)) by CKB86:1,CIRCUIT1:3;
( InnerVertices S ) = (the carrier' of S) by FACIRC_1:37;
then A2 in (the carrier' of S) by CKB87:1;
hence ( ( Following s ) . A2 ) = ( ( nor3 ) . ( s * <* A1cin,cindm,dmA1 *> ) ) by FACIRC_1:35
.= ( ( nor3 ) . <* a123x,a123y,a123z *> ) by A1,A2,A3,FINSEQ_2:126
.= ( 'not' ( ( a123x 'or' a123y ) 'or' a123z ) ) by TWOSCOMP:def 28;
end;
