environ
vocabularies CIRCCOMB,STRUCT_0,XBOOLE_0,MSUALG_1,GFACIRC1,FUNCT_4,LATTICES,CIRCUIT1,MSAFREE2,FINSEQ_1,TWOSCOMP,PARTFUN1,RELAT_1,MCART_1,FACIRC_1,SUBSET_1,FSM_1,MARGREL1,FUNCT_1,CIRCUIT2,XBOOLEAN,ARYTM_3,FTACELL1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,NAT_1,MCART_1,RELAT_1,STRUCT_0,FUNCT_1,PARTFUN1,FINSEQ_1,MARGREL1,BINARITH,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,GFACIRC1,CKB1,CKB2;
definitions FACIRC_1,GFACIRC1,XBOOLEAN,CKB1,CKB2;
theorems XBOOLE_0,XBOOLE_1,ZFMISC_1,ENUMSET1,MCART_1,FUNCT_1,FINSEQ_2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,CIRCCMB2,GFACIRC1,XBOOLEAN,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7;
registrations RELAT_1,MARGREL1,CARD_3,CIRCCOMB,FACIRC_1,ORDINAL1,FINSEQ_1,FUNCT_1;
constructors ENUMSET1,BINARITH,CIRCUIT1,CIRCUIT2,FACIRC_1,TWOSCOMP,NAT_1,GFACIRC1,RELSET_1,CKB1,CKB2;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th4: (for ap,bp,cp,dp,cin being set holds ((((((((((((((((ap in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) )) & bp in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & cp in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & dp in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & cin in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* ap,bp *>,( xor2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & ( GFA0AdderOutput (ap,bp,cp) ) in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* ap,bp *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* bp,cp *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* cp,ap *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & ( GFA0CarryOutput (ap,bp,cp) ) in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* ( GFA0AdderOutput (ap,bp,cp) ),cin *>,( xor2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & ( GFA0AdderOutput (( GFA0AdderOutput (ap,bp,cp) ),cin,dp) ) in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* ( GFA0AdderOutput (ap,bp,cp) ),cin *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* cin,dp *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & [ <* dp,( GFA0AdderOutput (ap,bp,cp) ) *>,( and2 ) ] in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))) & ( GFA0CarryOutput (( GFA0AdderOutput (ap,bp,cp) ),cin,dp) ) in (the carrier of ( BitFTA0Str (ap,bp,cp,dp,cin) ))))
proof
let ap being set,bp being set,cp being set,dp being set,cin being set;
set S1 = ( BitGFA0Str (ap,bp,cp) );
set A1 = ( GFA0AdderOutput (ap,bp,cp) );
set C1 = ( GFA0CarryOutput (ap,bp,cp) );
set S2 = ( BitGFA0Str (A1,cin,dp) );
set A2 = ( GFA0AdderOutput (A1,cin,dp) );
set C2 = ( GFA0CarryOutput (A1,cin,dp) );
set apbp0 = [ <* ap,bp *>,( xor2 ) ];
set apbp = [ <* ap,bp *>,( and2 ) ];
set bpcp = [ <* bp,cp *>,( and2 ) ];
set cpap = [ <* cp,ap *>,( and2 ) ];
set A1cin0 = [ <* A1,cin *>,( xor2 ) ];
set A1cin = [ <* A1,cin *>,( and2 ) ];
set cindp = [ <* cin,dp *>,( and2 ) ];
set dpA1 = [ <* dp,A1 *>,( and2 ) ];
A1: (cp in (the carrier of S1) & apbp0 in (the carrier of S1)) by GFACIRC1:36;
A2: (apbp in (the carrier of S1) & bpcp in (the carrier of S1)) by GFACIRC1:36;
A3: (A1 in (the carrier of S2) & cin in (the carrier of S2)) by GFACIRC1:36;
A4: (cpap in (the carrier of S1) & C1 in (the carrier of S1)) by GFACIRC1:36;
A5: C2 in (the carrier of S2) by GFACIRC1:36;
A6: (cindp in (the carrier of S2) & dpA1 in (the carrier of S2)) by GFACIRC1:36;
A7: (A2 in (the carrier of S2) & A1cin in (the carrier of S2)) by GFACIRC1:36;
A8: (dp in (the carrier of S2) & A1cin0 in (the carrier of S2)) by GFACIRC1:36;
(ap in (the carrier of S1) & bp in (the carrier of S1)) by GFACIRC1:36;
hence thesis by A1,A2,A4,A3,A8,A7,A6,A5,FACIRC_1:20;
end;
