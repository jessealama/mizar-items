environ
vocabularies CIRCCOMB,STRUCT_0,XBOOLE_0,MSUALG_1,GFACIRC1,FUNCT_4,LATTICES,CIRCUIT1,MSAFREE2,FINSEQ_1,TWOSCOMP,PARTFUN1,RELAT_1,MCART_1,FACIRC_1,SUBSET_1,FSM_1,MARGREL1,FUNCT_1,CIRCUIT2,XBOOLEAN,ARYTM_3,FTACELL1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,NAT_1,MCART_1,RELAT_1,STRUCT_0,FUNCT_1,PARTFUN1,FINSEQ_1,MARGREL1,BINARITH,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,GFACIRC1,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28;
definitions FACIRC_1,GFACIRC1,XBOOLEAN,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28;
theorems XBOOLE_0,XBOOLE_1,ZFMISC_1,ENUMSET1,MCART_1,FUNCT_1,FINSEQ_2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,CIRCCMB2,GFACIRC1,XBOOLEAN,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33;
registrations RELAT_1,MARGREL1,CARD_3,CIRCCOMB,FACIRC_1,ORDINAL1,FINSEQ_1,FUNCT_1;
constructors ENUMSET1,BINARITH,CIRCUIT1,CIRCUIT2,FACIRC_1,TWOSCOMP,NAT_1,GFACIRC1,RELSET_1,CKB1,CKB2,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th14: (for ap,bm,cp,dm,cin being set holds ((((((((((((((((ap in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) )) & bm in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & cp in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & dm in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & cin in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* ap,bm *>,( xor2c ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & ( GFA1AdderOutput (ap,bm,cp) ) in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* ap,bm *>,( and2c ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* bm,cp *>,( and2a ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* cp,ap *>,( and2 ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & ( GFA1CarryOutput (ap,bm,cp) ) in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* ( GFA1AdderOutput (ap,bm,cp) ),cin *>,( xor2c ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & ( GFA2AdderOutput (( GFA1AdderOutput (ap,bm,cp) ),cin,dm) ) in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* ( GFA1AdderOutput (ap,bm,cp) ),cin *>,( and2a ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* cin,dm *>,( and2c ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & [ <* dm,( GFA1AdderOutput (ap,bm,cp) ) *>,( and2b ) ] in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))) & ( GFA2CarryOutput (( GFA1AdderOutput (ap,bm,cp) ),cin,dm) ) in (the carrier of ( BitFTA1Str (ap,bm,cp,dm,cin) ))))
proof
let ap being set;
let bm being set;
let cp being set;
let dm being set;
let cin being set;
set S1 = ( BitGFA1Str (ap,bm,cp) );
set A1 = ( GFA1AdderOutput (ap,bm,cp) );
set C1 = ( GFA1CarryOutput (ap,bm,cp) );
set S2 = ( BitGFA2Str (A1,cin,dm) );
set A2 = ( GFA2AdderOutput (A1,cin,dm) );
set C2 = ( GFA2CarryOutput (A1,cin,dm) );
set apbm0 = [ <* ap,bm *>,( xor2c ) ];
set apbm = [ <* ap,bm *>,( and2c ) ];
set bmcp = [ <* bm,cp *>,( and2a ) ];
set cpap = [ <* cp,ap *>,( and2 ) ];
set A1cin0 = [ <* A1,cin *>,( xor2c ) ];
set A1cin = [ <* A1,cin *>,( and2a ) ];
set cindm = [ <* cin,dm *>,( and2c ) ];
set dmA1 = [ <* dm,A1 *>,( and2b ) ];
A1: (cp in (the carrier of S1) & apbm0 in (the carrier of S1)) by GFACIRC1:68;
A2: (apbm in (the carrier of S1) & bmcp in (the carrier of S1)) by GFACIRC1:68;
A3: (A1 in (the carrier of S2) & cin in (the carrier of S2)) by GFACIRC1:100;
A4: (cpap in (the carrier of S1) & C1 in (the carrier of S1)) by GFACIRC1:68;
A5: C2 in (the carrier of S2) by GFACIRC1:100;
A6: (cindm in (the carrier of S2) & dmA1 in (the carrier of S2)) by GFACIRC1:100;
A7: (A2 in (the carrier of S2) & A1cin in (the carrier of S2)) by GFACIRC1:100;
A8: (dm in (the carrier of S2) & A1cin0 in (the carrier of S2)) by GFACIRC1:100;
(ap in (the carrier of S1) & bm in (the carrier of S1)) by GFACIRC1:68;
hence thesis by A1,A2,A4,A3,A8,A7,A6,A5,FACIRC_1:20;
end;
