environ
vocabularies NUMBERS,XBOOLE_0,NAT_1,ORDINAL1,CARD_1,FUNCT_1,FINSET_1,CARD_3,REAL_1,NEWTON,ARYTM_3,RELAT_1,XXREAL_0,SUBSET_1,ZFMISC_1,MCART_1,TARSKI,CARD_2,FINSEQ_2,FINSEQ_1,ORDINAL4,PARTFUN1,FUNCT_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,REAL_1,NAT_1,NAT_D,RELAT_1,FUNCT_1,FINSEQ_1,FINSET_1,ORDINAL1,WELLORD2,MCART_1,DOMAIN_1,CARD_2,FINSEQ_2,RELSET_1,FUNCT_2,BINOP_1,FUNCT_4,PARTFUN1,NEWTON,CARD_3,XXREAL_0;
definitions TARSKI,FUNCT_1,WELLORD2,RELAT_1,XBOOLE_0,BINOP_1,ORDINAL1,CARD_3;
theorems TARSKI,ZFMISC_1,NAT_1,ORDINAL1,ORDINAL3,WELLORD2,FUNCT_1,FUNCT_2,FUNCT_4,PARTFUN1,MCART_1,CARD_3,ORDERS_1,CARD_1,CARD_2,NEWTON,FINSEQ_1,FINSEQ_2,RELAT_1,XBOOLE_0,XBOOLE_1,XCMPLX_1,XREAL_1,XXREAL_0,NAT_D,CKB1,CKB2,CKB3;
schemes NAT_1,FUNCT_1,XBOOLE_0,BINOP_1,CLASSES1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FINSET_1,XXREAL_0,NAT_1,CARD_1,MEMBERED,FINSEQ_1,FINSEQ_2,CARD_3,XCMPLX_0,RELSET_1;
constructors PARTFUN1,WELLORD2,BINOP_1,DOMAIN_1,FUNCOP_1,FUNCT_4,ORDINAL3,XXREAL_0,NAT_1,NAT_D,MEMBERED,CARD_2,CARD_3,NEWTON,FINSUB_1,RELSET_1;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve k for Nat;
reserve n for Nat;
reserve n1 for Nat;
reserve n2 for Nat;
reserve m2 for Nat;
reserve m1 for Nat;
theorem
Lm1: (( ( 2 |^ n1 ) * ( ( 2 * m1 ) + 1 ) ) = ( ( 2 |^ n2 ) * ( ( 2 * m2 ) + 1 ) ) implies n1 <= n2)
proof
assume A1: ( ( 2 |^ n1 ) * ( ( 2 * m1 ) + 1 ) ) = ( ( 2 |^ n2 ) * ( ( 2 * m2 ) + 1 ) );
assume A2: n1 > n2;
then consider n being Nat such that A3: n1 = ( n2 + n ) by NAT_1:10;
n <> ( 0 ) by A2,A3;
then consider k being Nat such that A4: n = ( k + 1 ) by NAT_1:6;
A5: ( 2 |^ n2 ) <> ( 0 ) by CKB3:1;
reconsider k as (Element of ( NAT )) by ORDINAL1:def 12;
( 2 |^ n1 ) = ( ( 2 |^ n2 ) * ( 2 |^ ( k + 1 ) ) ) by A3,A4,NEWTON:8;
then ( ( 2 |^ n1 ) * ( ( 2 * m1 ) + 1 ) ) = ( ( 2 |^ n2 ) * ( ( 2 |^ ( k + 1 ) ) * ( ( 2 * m1 ) + 1 ) ) );
then ( ( 2 |^ ( k + 1 ) ) * ( ( 2 * m1 ) + 1 ) ) = ( ( 2 * m2 ) + 1 ) by A1,A5,XCMPLX_1:5;
then ( ( 2 * m2 ) + 1 ) = ( ( ( 2 |^ k ) * ( 2 |^ 1 ) ) * ( ( 2 * m1 ) + 1 ) ) by NEWTON:8
.= ( ( 2 * ( 2 |^ k ) ) * ( ( 2 * m1 ) + 1 ) ) by NEWTON:5
.= ( 2 * ( ( 2 |^ k ) * ( ( 2 * m1 ) + 1 ) ) );
then A6: 2 divides ( ( 2 * m2 ) + 1 ) by NAT_D:def 3;
2 divides ( 2 * m2 ) by NAT_D:def 3;
hence contradiction by A6,NAT_D:7,NAT_D:10;
end;
