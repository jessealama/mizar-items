environ
vocabularies XBOOLE_0,ALGSTR_0,VECTSP_1,MESFUNC1,GROUP_1,SUBSET_1,RELAT_1,STRUCT_0,RLVECT_1,LATTICES,FUNCSDOM,BINOP_1,SUPINF_2,ARYTM_3,ARYTM_1,FUNCT_1,ZFMISC_1,FUNCT_5,MCART_1,VECTSP_2;
notations XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_2,BINOP_1,FUNCT_5,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_1,FUNCSDOM,FUNCT_3,CKB3,CKB5,CKB6,CKB8,CKB20,CKB21,CKB36,CKB39,CKB40,CKB41,CKB44,CKB47,CKB50,CKB51,CKB54;
definitions VECTSP_1,RLVECT_1,STRUCT_0,GROUP_1,ALGSTR_0,CKB3,CKB20,CKB21,CKB44,CKB47,CKB50,CKB51,CKB54;
theorems VECTSP_1,TARSKI,RLVECT_1,GROUP_1,CARD_1,ALGSTR_0,CKB1,CKB3,CKB7,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB44,CKB45,CKB47,CKB48,CKB50,CKB51,CKB52,CKB54;
registrations XBOOLE_0,STRUCT_0,VECTSP_1,ALGSTR_0,CKB2,CKB4,CKB9,CKB10,CKB36,CKB37,CKB38,CKB41,CKB42,CKB43,CKB46,CKB49,CKB53;
constructors FUNCT_3,VECTSP_1,FUNCSDOM,FUNCT_5,CKB3,CKB21,CKB36,CKB41,CKB44,CKB47,CKB50,CKB51,CKB54;
requirements SUBSET,BOOLE;
begin
reserve R for Ring;
theorem
Th71: (for x,y being (Scalar of R) holds (for v,w being (Vector of ( LeftModule R )) holds (((( x * ( v + w ) ) = ( ( x * v ) + ( x * w ) ) & ( ( x + y ) * v ) = ( ( x * v ) + ( y * v ) )) & ( ( x * y ) * v ) = ( x * ( y * v ) )) & ( ( 1. R ) * v ) = v)))
proof
set MLT = (the multF of R);
set LS = VectSpStr (# (the carrier of R),(the addF of R),( 0. R ),MLT #);
(for x,y being (Scalar of R) holds (for v,w being (Vector of LS) holds (((( x * ( v + w ) ) = ( ( x * v ) + ( x * w ) ) & ( ( x + y ) * v ) = ( ( x * v ) + ( y * v ) )) & ( ( x * y ) * v ) = ( x * ( y * v ) )) & ( ( 1_ R ) * v ) = v)))
proof
let x being (Scalar of R),y being (Scalar of R);
let v being (Vector of LS),w being (Vector of LS);
reconsider v9 = v,w9 = w as (Scalar of R);
thus ( x * ( v + w ) ) = ( x * ( v9 + w9 ) )
.= ( ( x * v9 ) + ( x * w9 ) ) by VECTSP_1:def 7
.= ( ( x * v ) + ( x * w ) );
thus ( ( x + y ) * v ) = ( ( x + y ) * v9 )
.= ( ( x * v9 ) + ( y * v9 ) ) by VECTSP_1:def 7
.= ( ( x * v ) + ( y * v ) );
thus ( ( x * y ) * v ) = ( ( x * y ) * v9 )
.= ( x * ( y * v9 ) ) by GROUP_1:def 3
.= ( x * ( y * v ) );
thus ( ( 1_ R ) * v ) = ( ( 1_ R ) * v9 )
.= v by VECTSP_1:def 8;
end;
hence thesis;
end;
