environ
vocabularies NUMBERS,XBOOLE_0,PROB_1,MEASURE1,SUBSET_1,SEQFUNC,MESFUNC5,PARTFUN1,XXREAL_0,ORDINAL1,NAT_1,RELAT_1,ARYTM_3,ARYTM_1,FUNCT_1,XREAL_0,ORDINAL2,CARD_1,COMPLEX1,SEQ_2,SUPINF_2,XXREAL_2,RINFSUP1,TARSKI,MEASURE6,REAL_1,PBOOLE,MESFUNC1,VALUED_1,FUNCT_3,MESFUNC2,SUPINF_1,VALUED_0,RFUNCT_3,SERIES_1,CARD_3,MESFUNC8,MSSUBFAM,SETFAM_1,INTEGRA5,FUNCOP_1,ZFMISC_1,FUNCT_2,MEASURE2,MESFUNC9;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,REAL_1,XXREAL_0,VALUED_0,RELAT_1,FUNCT_1,RELSET_1,BINOP_1,FUNCT_2,PARTFUN1,NAT_1,PROB_1,SETFAM_1,SUPINF_1,SUPINF_2,XXREAL_2,MEASURE1,MEASURE2,EXTREAL1,MESFUNC1,MEASURE6,MESFUNC2,SEQFUNC,MESFUNC5,MESFUNC8,RINFSUP2,FUNCOP_1,CKB16,CKB17,CKB18,CKB19,CKB26,CKB27;
definitions MESFUNC1,MEASURE6,MESFUNC5,BINOP_1,RINFSUP2,MESFUNC8,TARSKI,VALUED_0,XXREAL_3,CKB17,CKB18,CKB19,CKB26,CKB27;
theorems TARSKI,PARTFUN1,FUNCT_1,SUPINF_2,EXTREAL1,EXTREAL2,MESFUNC1,XREAL_0,XBOOLE_0,XBOOLE_1,XCMPLX_1,MESFUNC2,XREAL_1,XXREAL_0,MESFUNC5,PROB_1,NAT_1,RELAT_1,FUNCT_3,ZFMISC_1,FUNCT_2,MEASURE1,MESFUNC6,SEQFUNC,ORDINAL1,SETFAM_1,MESFUNC8,RINFSUP2,MESFUNC7,SEQ_4,RELSET_1,MEASURE2,XXREAL_2,VALUED_0,FUNCOP_1,XXREAL_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes FUNCT_2,NAT_1,BINOP_1,RECDEF_1,SEQFUNC,FUNCT_1;
registrations SUBSET_1,NAT_1,XREAL_0,MEMBERED,ORDINAL1,PARTFUN1,MEASURE1,FUNCT_2,RELAT_1,XBOOLE_0,NUMBERS,XXREAL_0,XCMPLX_0,MESFUNC8,FUNCT_1,VALUED_0,XXREAL_3,RELSET_1;
constructors REAL_1,EXTREAL1,EXTREAL2,BINOP_1,NEWTON,MESFUNC1,MEASURE2,MEASURE6,MESFUNC2,MESFUNC5,MESFUNC8,RINFSUP2,SUPINF_1,SEQFUNC,RELSET_1,BINOP_2,CKB16,CKB17,CKB18,CKB19,CKB26,CKB27;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve X for non  empty set;
reserve S for (SigmaField of X);
reserve E for (Element of S);
reserve F for (Functional_Sequence of X,( ExtREAL ));
reserve n for Nat;
reserve D for set;
theorem
Th29: ((F is  additive & F is  with_the_same_dom) implies ( dom ( ( Partial_Sums F ) . n ) ) = ( dom ( F . ( 0 ) ) ))
proof
assume that
A1: F is  additive
and
A2: F is  with_the_same_dom;
now
let D being set;
A3: ( dom ( F . ( 0 ) ) ) in { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n };
assume D in ( meet { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } );
then D in ( dom ( F . ( 0 ) ) ) by A3,SETFAM_1:def 1;
hence D in ( meet { ( dom ( F . ( 0 ) ) ) } ) by SETFAM_1:10;
end;
then A4: ( meet { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } ) c= ( meet { ( dom ( F . ( 0 ) ) ) } ) by TARSKI:def 3;
now
let D being set;
assume D in ( meet { ( dom ( F . ( 0 ) ) ) } );
then A5: D in ( dom ( F . ( 0 ) ) ) by SETFAM_1:10;
A6: (for E being set holds (E in { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } implies D in E))
proof
let E being set;
assume E in { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n };
then (ex k1 being (Element of ( NAT )) st (E = ( dom ( F . k1 ) ) & k1 <= n));
hence thesis by A2,A5,MESFUNC8:def 2;
end;
( dom ( F . ( 0 ) ) ) in { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n };
hence D in ( meet { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } ) by A6,SETFAM_1:def 1;
end;
then ( meet { ( dom ( F . ( 0 ) ) ) } ) c= ( meet { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } ) by TARSKI:def 3;
then ( meet { ( dom ( F . k ) ) where k is (Element of ( NAT )): k <= n } ) = ( meet { ( dom ( F . ( 0 ) ) ) } ) by A4,XBOOLE_0:def 10;
then ( dom ( ( Partial_Sums F ) . n ) ) = ( meet { ( dom ( F . ( 0 ) ) ) } ) by A1,CKB35:1;
hence thesis by SETFAM_1:10;
end;
