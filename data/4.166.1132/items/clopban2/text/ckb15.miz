environ
vocabularies NUMBERS,CLVECT_1,LOPBAN_1,RELAT_1,RLVECT_1,CFUNCT_1,FUNCT_1,ARYTM_3,XXREAL_2,NORMSP_1,XXREAL_0,PRE_TOPC,CLOPBAN1,CARD_1,REAL_1,XREAL_0,ORDINAL1,ORDINAL2,SUBSET_1,RSSPACE,LOPBAN_2,BINOP_1,STRUCT_0,COMPLEX1,ALGSTR_0,XBOOLE_0,GROUP_1,SUPINF_2,MESFUNC1,FUNCSDOM,VECTSP_1,LATTICES,CFUNCDOM,CSSPACE3,REWRITE1,NAT_1,RSSPACE3,SEQ_2,ZFMISC_1,XCMPLX_0,PREPOWER,COMSEQ_1,SERIES_1,CSSPACE,ARYTM_1,CLOPBAN2,NORMSP_0,METRIC_1,RELAT_2,SEQ_4;
notations XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_1,PARTFUN1,FUNCT_2,PRE_TOPC,BINOP_1,STRUCT_0,ALGSTR_0,XCMPLX_0,XXREAL_0,XREAL_0,ORDINAL1,NUMBERS,XXREAL_2,REAL_1,PSCOMP_1,RLVECT_1,VALUED_1,SEQ_4,FUNCSDOM,COMPLEX1,GROUP_1,VECTSP_1,SERIES_1,CFUNCT_1,COMSEQ_1,COMSEQ_3,NORMSP_0,CLVECT_1,CSSPACE,CSSPACE3,CLOPBAN1,CFUNCDOM,PREPOWER,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9;
definitions STRUCT_0,GROUP_1,VECTSP_1,CLOPBAN1,BINOP_1,RLVECT_1,ALGSTR_0,CLVECT_1,CFUNCDOM,NORMSP_0,CKB4,CKB5,CKB6,CKB7,CKB9;
theorems ABSVALUE,RLVECT_1,VECTSP_1,BINOP_1,XCMPLX_0,SERIES_1,FUNCT_1,FUNCT_2,SEQ_4,PREPOWER,STRUCT_0,CLOPBAN1,CLVECT_1,COMPLEX1,CFUNCDOM,CSSPACE3,COMSEQ_3,CSSPACE,GROUP_1,XREAL_1,XXREAL_0,ALGSTR_0,VALUED_1,GRCAT_1,NORMSP_0,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
schemes BINOP_1;
registrations XBOOLE_0,FUNCT_1,ORDINAL1,RELSET_1,FUNCT_2,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,MEMBERED,STRUCT_0,CLVECT_1,CSSPACE3,CLOPBAN1,CFUNCDOM,ALGSTR_0,VALUED_1,VALUED_0,NORMSP_0;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,REAL_1,NAT_1,PREPOWER,COMSEQ_3,PSCOMP_1,CSSPACE3,CLOPBAN1,CFUNCDOM,VECTSP_1,SEQ_1,XXREAL_2,SERIES_1,SEQ_4,RELSET_1,BINOP_2,RVSUM_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
theorem
Th9: (for X being ComplexNormSpace holds (for f,g,h being (Element of ( BoundedLinearOperators (X,X) )) holds ( f * ( g + h ) ) = ( ( f * g ) + ( f * h ) )))
proof
let X being ComplexNormSpace;
let f being (Element of ( BoundedLinearOperators (X,X) ));
let g being (Element of ( BoundedLinearOperators (X,X) ));
let h being (Element of ( BoundedLinearOperators (X,X) ));
set BLOP = ( C_NormSpace_of_BoundedLinearOperators (X,X) );
set ADD = ( Add_ (( BoundedLinearOperators (X,X) ),( C_VectorSpace_of_LinearOperators (X,X) )) );
set mf = ( modetrans (f,X,X) );
set mg = ( modetrans (g,X,X) );
set mh = ( modetrans (h,X,X) );
set mgh = ( modetrans (( g + h ),X,X) );
( ADD . (( mf * mg ),( mf * mh )) ) = ( mf * mgh )
proof
reconsider fh = ( mf * mh ) as (VECTOR of BLOP) by CLOPBAN1:def 7;
reconsider fg = ( mf * mg ) as (VECTOR of BLOP) by CLOPBAN1:def 7;
reconsider k = ( mf * mgh ) as (VECTOR of BLOP) by CLOPBAN1:def 7;
reconsider hh = h as (VECTOR of BLOP);
reconsider gg = g as (VECTOR of BLOP);
A1: (gg = mg & hh = mh) by CLOPBAN1:def 9;
(for x being (VECTOR of X) holds ( ( mf * mgh ) . x ) = ( ( ( mf * mg ) . x ) + ( ( mf * mh ) . x ) ))
proof
let x being (VECTOR of X);
(( g + h ) = ( gg + hh ) & ( modetrans (( g + h ),X,X) ) = ( g + h )) by CLOPBAN1:def 9;
then A2: ( mgh . x ) = ( ( mg . x ) + ( mh . x ) ) by A1,CLOPBAN1:34;
thus ( ( mf * mgh ) . x ) = ( mf . ( mgh . x ) ) by CKB10:1
.= ( ( mf . ( mg . x ) ) + ( mf . ( mh . x ) ) ) by A2,GRCAT_1:def 8
.= ( ( ( mf * mg ) . x ) + ( mf . ( mh . x ) ) ) by CKB10:1
.= ( ( ( mf * mg ) . x ) + ( ( mf * mh ) . x ) ) by CKB10:1;
end;
then k = ( fg + fh ) by CLOPBAN1:34;
hence thesis;
end;
hence thesis;
end;
