environ
vocabularies NUMBERS,SUBSET_1,CQC_LANG,QC_LANG1,XBOOLE_0,VALUAT_1,SUBSTUT1,FINSEQ_1,RELAT_1,ARYTM_3,XXREAL_0,CARD_1,NAT_1,TARSKI,FUNCT_1,ORDINAL4,FINSEQ_2,ZFMISC_1,CQC_THE1,MCART_1,XBOOLEAN,BVFUNC_2,ZF_MODEL,SUBSTUT2,SUBLEMMA,FUNCOP_1,FUNCT_4,FINSET_1,ORDINAL1,CALCUL_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FINSEQ_1,RELAT_1,FUNCT_1,QC_LANG1,CARD_1,NUMBERS,ORDINAL1,FINSEQ_2,XXREAL_0,NAT_1,FUNCOP_1,CQC_LANG,FINSET_1,VALUAT_1,CQC_THE1,RELSET_1,PARTFUN1,FUNCT_2,DOMAIN_1,MCART_1,SUBSTUT1,SUBSTUT2,SUBLEMMA,CKB1,CKB2,CKB3,CKB4,CKB19,CKB20;
definitions TARSKI,XBOOLE_0,FINSEQ_2,FUNCOP_1,CKB1,CKB2,CKB3,CKB4,CKB19,CKB20;
theorems TARSKI,FUNCT_1,MCART_1,XBOOLE_0,XBOOLE_1,QC_LANG1,ZFMISC_1,RELAT_1,QC_LANG3,QC_LANG2,SUBSTUT1,FUNCT_4,SUBLEMMA,NAT_1,FINSEQ_1,FINSEQ_3,VALUAT_1,FINSEQ_2,SUBSTUT2,FUNCOP_1,CQC_THE1,FINSET_1,CARD_2,CQC_SIM1,CARD_1,CARD_4,GRFUNC_1,XREAL_1,ORDINAL1,XXREAL_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
schemes XBOOLE_0,NAT_1,CLASSES1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,QC_LANG1,CQC_LANG,CARD_1,FINSEQ_2,RELAT_1;
constructors PARTFUN1,WELLORD2,DOMAIN_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_2,CQC_THE1,SUBSTUT2,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB19,CKB20;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve p for (Element of ( CQC-WFF ));
reserve q for (Element of ( CQC-WFF ));
reserve x for bound_QC-variable;
reserve y for bound_QC-variable;
reserve f for (FinSequence of ( CQC-WFF ));
reserve g for (FinSequence of ( CQC-WFF ));
reserve PR for (FinSequence of [: ( set_of_CQC-WFF-seq ),( Proof_Step_Kinds ) :]);
definition
let PR;
let n being Nat;
pred PR,n is_a_correct_step 
means
:Def7: (ex f st (( Suc f ) is_tail_of ( Ant f ) & ( ( PR . n ) `1 ) = f)) if ( ( PR . n ) `2 ) = ( 0 ),(ex f st ( ( PR . n ) `1 ) = ( f ^ <* ( VERUM ) *> )) if ( ( PR . n ) `2 ) = 1,(ex i st (ex f st (ex g st (((((1 <= i & i < n) & ( Ant f ) is_Subsequence_of ( Ant g )) & ( Suc f ) = ( Suc g )) & ( ( PR . i ) `1 ) = f) & ( ( PR . n ) `1 ) = g)))) if ( ( PR . n ) `2 ) = 2,(ex i st (ex j st (ex f st (ex g st (((((((((((1 <= i & i < n) & 1 <= j) & j < i) & ( len f ) > 1) & ( len g ) > 1) & ( Ant ( Ant f ) ) = ( Ant ( Ant g ) )) & ( 'not' ( Suc ( Ant f ) ) ) = ( Suc ( Ant g ) )) & ( Suc f ) = ( Suc g )) & f = ( ( PR . j ) `1 )) & g = ( ( PR . i ) `1 )) & ( ( Ant ( Ant f ) ) ^ <* ( Suc f ) *> ) = ( ( PR . n ) `1 )))))) if ( ( PR . n ) `2 ) = 3,(ex i st (ex j st (ex f st (ex g st (ex p st ((((((((((1 <= i & i < n) & 1 <= j) & j < i) & ( len f ) > 1) & ( Ant f ) = ( Ant g )) & ( Suc ( Ant f ) ) = ( 'not' p )) & ( 'not' ( Suc f ) ) = ( Suc g )) & f = ( ( PR . j ) `1 )) & g = ( ( PR . i ) `1 )) & ( ( Ant ( Ant f ) ) ^ <* p *> ) = ( ( PR . n ) `1 ))))))) if ( ( PR . n ) `2 ) = 4,(ex i st (ex j st (ex f st (ex g st (((((((1 <= i & i < n) & 1 <= j) & j < i) & ( Ant f ) = ( Ant g )) & f = ( ( PR . j ) `1 )) & g = ( ( PR . i ) `1 )) & ( ( Ant f ) ^ <* ( ( Suc f ) '&' ( Suc g ) ) *> ) = ( ( PR . n ) `1 )))))) if ( ( PR . n ) `2 ) = 5,(ex i st (ex f st (ex p st (ex q st ((((1 <= i & i < n) & ( p '&' q ) = ( Suc f )) & f = ( ( PR . i ) `1 )) & ( ( Ant f ) ^ <* p *> ) = ( ( PR . n ) `1 )))))) if ( ( PR . n ) `2 ) = 6,(ex i st (ex f st (ex p st (ex q st ((((1 <= i & i < n) & ( p '&' q ) = ( Suc f )) & f = ( ( PR . i ) `1 )) & ( ( Ant f ) ^ <* q *> ) = ( ( PR . n ) `1 )))))) if ( ( PR . n ) `2 ) = 7,(ex i st (ex f st (ex p st (ex x st (ex y st ((((1 <= i & i < n) & ( Suc f ) = ( All (x,p) )) & f = ( ( PR . i ) `1 )) & ( ( Ant f ) ^ <* ( p . (x,y) ) *> ) = ( ( PR . n ) `1 ))))))) if ( ( PR . n ) `2 ) = 8,(ex i st (ex f st (ex p st (ex x st (ex y st ((((((1 <= i & i < n) & ( Suc f ) = ( p . (x,y) )) & (not y in ( still_not-bound_in ( Ant f ) ))) & (not y in ( still_not-bound_in ( All (x,p) ) ))) & f = ( ( PR . i ) `1 )) & ( ( Ant f ) ^ <* ( All (x,p) ) *> ) = ( ( PR . n ) `1 ))))))) if ( ( PR . n ) `2 ) = 9
;consistency;
end;
