environ
vocabularies NUMBERS,SUBSET_1,ARYTM_3,ARYTM_1,XXREAL_0,CARD_1,INT_1,RELAT_1,NAT_1,PARTFUN1,FUNCT_1,NEWTON,FINSEQ_1,FUNCOP_1,TARSKI,PRGCOR_1;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,FUNCT_1,FINSEQ_1,INT_1,RELSET_1,FUNCOP_1,PARTFUN1,NAT_1,NAT_D,NEWTON,CKB9;
definitions TARSKI,CKB9;
theorems FINSEQ_1,NAT_1,FUNCT_1,XCMPLX_1,PRE_FF,INT_1,NEWTON,CARD_4,FINSEQ_3,FUNCOP_1,TARSKI,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,WSIERP_1,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13;
schemes NAT_1,FINSEQ_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,XXREAL_0,XREAL_0,NAT_1,INT_1,NEWTON,WSIERP_1,CKB6;
constructors XXREAL_0,REAL_1,NAT_1,NAT_D,NEWTON,BINARITH,RELSET_1,CKB9;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
definition
let n being Integer;
let m being Integer;
func idiv_prg (n,m) -> Integer means 
:Def2: (ex i being Integer st ((m = ( 0 ) implies it = ( 0 )) & ((not m = ( 0 )) implies (((n >= ( 0 ) & m > ( 0 )) implies it = ( idiv1_prg (n,m) )) & ((not (n >= ( 0 ) & m > ( 0 ))) implies (((n >= ( 0 ) & m < ( 0 )) implies ((i = ( idiv1_prg (n,( - m )) ) & (( ( - m ) * i ) = n implies it = ( - i ))) & (( ( - m ) * i ) <> n implies it = ( ( - i ) - 1 )))) & ((not (n >= ( 0 ) & m < ( 0 ))) implies (((n < ( 0 ) & m > ( 0 )) implies ((i = ( idiv1_prg (( - n ),m) ) & (( m * i ) = ( - n ) implies it = ( - i ))) & (( m * i ) <> ( - n ) implies it = ( ( - i ) - 1 )))) & ((not (n < ( 0 ) & m > ( 0 ))) implies it = ( idiv1_prg (( - n ),( - m )) ))))))))));
existence
proof
defpred P[ Integer ]
 means
((m = ( 0 ) implies ( n div m ) = ( 0 )) & ((not m = ( 0 )) implies (((n >= ( 0 ) & m > ( 0 )) implies ( n div m ) = ( idiv1_prg (n,m) )) & ((not (n >= ( 0 ) & m > ( 0 ))) implies (((n >= ( 0 ) & m < ( 0 )) implies (($1 = ( idiv1_prg (n,( - m )) ) & (( ( - m ) * $1 ) = n implies ( n div m ) = ( - $1 ))) & (( ( - m ) * $1 ) <> n implies ( n div m ) = ( ( - $1 ) - 1 )))) & ((not (n >= ( 0 ) & m < ( 0 ))) implies (((n < ( 0 ) & m > ( 0 )) implies (($1 = ( idiv1_prg (( - n ),m) ) & (( m * $1 ) = ( - n ) implies ( n div m ) = ( - $1 ))) & (( m * $1 ) <> ( - n ) implies ( n div m ) = ( ( - $1 ) - 1 )))) & ((not (n < ( 0 ) & m > ( 0 ))) implies ( n div m ) = ( idiv1_prg (( - n ),( - m )) )))))))));
per cases ;
suppose m = ( 0 );

hence thesis;
end;
suppose A1: m <> ( 0 );

now
per cases ;
case A2: n >= ( 0 );
now
per cases  by A1;
case m > ( 0 );
then P[ ( idiv1_prg (n,m) ) ] by A2,CKB12:1;
hence (ex i being Integer st P[ i ]);
end;
case A3: m < ( 0 );
then reconsider n2 = n,m2 = ( - m ) as (Element of ( NAT )) by A2,INT_1:3;
A4: ( - m ) > ( 0 ) by A3,XREAL_1:58;
now
per cases ;
case A5: ( ( - m ) * ( idiv1_prg (n,( - m )) ) ) = n;
A6: ( idiv1_prg (n,( - m )) ) = ( n div ( - m ) ) by A2,A4,CKB12:1;
then ( n div m ) = ( - ( n2 div m2 ) ) by A3,A5,CKB13:1;
hence (ex i being Integer st P[ i ]) by A3,A5,A6;
end;
case A7: ( ( - m ) * ( idiv1_prg (n,( - m )) ) ) <> n;
A8: ( idiv1_prg (n,( - m )) ) = ( n div ( - m ) ) by A2,A4,CKB12:1;
then ( n div m ) = ( ( - ( n2 div m2 ) ) - 1 ) by A3,A7,CKB13:1;
hence (ex i being Integer st P[ i ]) by A3,A7,A8;
end;
end;
hence (ex i being Integer st P[ i ]);
end;
end;
hence (ex i being Integer st P[ i ]);
end;
case A9: n < ( 0 );
now
per cases  by A1;
case A10: m < ( 0 );
A11: ( n div m ) = [\ ( n / m ) /] by INT_1:def 9
.= [\ ( ( - n ) / ( - m ) ) /] by XCMPLX_1:191
.= ( ( - n ) div ( - m ) ) by INT_1:def 9;
( - m ) > ( 0 ) by A10,XREAL_1:58;
then P[ ( idiv1_prg (( - n ),( - m )) ) ] by A9,A11,CKB12:1;
hence (ex i being Integer st P[ i ]);
end;
case A12: m > ( 0 );
then reconsider n2 = ( - n ),m2 = m as (Element of ( NAT )) by A9,INT_1:3;
now
per cases ;
case A13: ( m * ( idiv1_prg (( - n ),m) ) ) = ( - n );
A14: ( idiv1_prg (( - n ),m) ) = ( ( - n ) div m ) by A9,A12,CKB12:1;
then ( n div m ) = ( - ( n2 div m2 ) ) by A9,A12,A13,CKB13:1;
hence (ex i being Integer st P[ i ]) by A9,A12,A13,A14;
end;
case A15: ( m * ( idiv1_prg (( - n ),m) ) ) <> ( - n );
A16: ( idiv1_prg (( - n ),m) ) = ( ( - n ) div m ) by A9,A12,CKB12:1;
then ( n div m ) = ( ( - ( n2 div m2 ) ) - 1 ) by A9,A12,A15,CKB13:1;
hence (ex i being Integer st P[ i ]) by A9,A12,A15,A16;
end;
end;
hence (ex i being Integer st P[ i ]);
end;
end;
hence (ex i being Integer st P[ i ]);
end;
end;
hence thesis;
end;
end;
uniqueness;
end;
