environ
vocabularies ORDERS_2,XBOOLE_0,SUBSET_1,ORDERS_1,XXREAL_0,YELLOW_1,RELAT_2,WELLORD2,RELAT_1,TARSKI,TREES_1,EQREL_1,TAXONOM1,SETFAM_1,ZFMISC_1,ABIAN,PRE_TOPC,LATTICES,ORDINAL1,PARTIT1,TAXONOM2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,ORDINAL1,RELSET_1,STRUCT_0,ORDERS_2,EQREL_1,ABIAN,PARTIT1,ORDERS_1,YELLOW_1,TAXONOM1,CKB1,CKB2;
definitions TARSKI,EQREL_1,TAXONOM1,SETFAM_1,XBOOLE_0,CKB1,CKB2;
theorems TARSKI,TAXONOM1,PARTIT1,EQREL_1,ZFMISC_1,ORDERS_2,ORDERS_1,RELAT_1,RELSET_1,SETFAM_1,REALSET1,ABIAN,YELLOW_1,WELLORD2,ORDINAL1,XBOOLE_0,XBOOLE_1,CKB1,CKB2;
schemes XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,EQREL_1,YELLOW_1;
constructors SETFAM_1,REALSET1,ABIAN,YELLOW_1,TAXONOM1,RELSET_1,CKB1,CKB2;
requirements BOOLE,SUBSET;
begin
reserve a for set;
reserve x for set;
reserve y for set;
theorem
Th1: (for a being set holds ( InclPoset { { a } } ) is non  empty  reflexive  transitive  antisymmetric  with_superior  with_comparable_down)
proof
let a being set;
set A = { { a } };
set R9 = ( RelIncl A );
reconsider R = R9 as (Relation of A);
set L = RelStr (# A,R #);
A1: L is  with_superior
proof
set max1 = { a };
reconsider max9 = max1 as (Element of L) by TARSKI:def 1;
take max9;
A2: (for y being set holds ((y in ( field R ) & y <> max9) implies [ y,max9 ] in R))
proof
let y being set;
assume that
A3: y in ( field R )
and
A4: y <> max9;
( field R ) c= ( A \/ A ) by RELSET_1:8;
hence thesis by A3,A4,TARSKI:def 1;
end;
[ max9,max9 ] in R by WELLORD2:def 1;
then max9 in ( field R ) by RELAT_1:15;
hence thesis by A2,ORDERS_1:def 13;
end;
A5: (for x,y being (Element of L) holds ((ex z being (Element of L) st (z <= x & z <= y)) implies (x <= y or y <= x)))
proof
let x being (Element of L);
let y being (Element of L);
assume (ex z being (Element of L) st (z <= x & z <= y));
A6: y = { a } by TARSKI:def 1;
x = { a } by TARSKI:def 1;
then [ x,y ] in R by A6,WELLORD2:def 1;
hence thesis by ORDERS_2:def 5;
end;
RelStr (# A,R #) = ( InclPoset A ) by YELLOW_1:def 1;
hence thesis by A1,A5,CKB2:def 1;
end;
