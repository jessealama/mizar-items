environ
vocabularies STACKS_1,XBOOLE_0,STRUCT_0,ZFMISC_1,SUBSET_1,FUNCT_1,NUMBERS,NAT_1,TARSKI,ARYTM_3,RELAT_1,FINSEQ_1,FINSEQ_3,ORDINAL4,FUNCOP_1,PARTFUN1,CARD_1,XXREAL_0,COMPLEX1,GLIB_000,RELAT_2,EQREL_1,FILTER_1,BINOP_1,MCART_1,ORDERS_1,WELLORD1,ARYTM_1,SETFAM_1,FUNCT_2,AOFA_000,PBOOLE,FUNCT_4,MATRIX_7,REWRITE1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,FUNCT_1,RELAT_2,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,DOMAIN_1,FUNCT_3,FUNCOP_1,ORDERS_1,FUNCT_4,NUMBERS,XXREAL_0,NAT_1,NAT_D,FINSEQ_1,FINSEQ_2,EQREL_1,FINSEQ_3,PBOOLE,FUNCT_7,STRUCT_0,FILTER_1,REWRITE1,ABCMIZ_1,AOFA_000,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,RELAT_2,PARTFUN1,FUNCT_2,FINSEQ_1,BINOP_1,FILTER_1,REWRITE1,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
theorems TARSKI,XBOOLE_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,NAT_1,NAT_D,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_3,FUNCOP_1,WSIERP_1,BINOP_1,POLYALG1,EQREL_1,WELLORD2,RELSET_1,ORDINAL1,XREAL_1,NAT_2,ZFMISC_1,SETFAM_1,RELAT_1,XBOOLE_0,ORDERS_1,MATRIX_7,FUNCT_7,FILTER_1,FUNCT_4,REWRITE1,XXREAL_0,MSUALG_8,HILBERT2,RLVECT_3,FINSEQOP,FINSEQ_2,CKB3,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes XBOOLE_0,RELSET_1,NAT_1,FUNCT_2,BINOP_1,RECDEF_1,ALTCAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,CKB4,CKB6;
registrations XBOOLE_0,RELSET_1,STRUCT_0,RELAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,FUNCT_2,NAT_1,ORDINAL1,XXREAL_0,XREAL_0,CARD_1,EQREL_1,SUBSET_1,REWRITE1,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20;
constructors BINOP_1,DOMAIN_1,XXREAL_0,RELSET_1,FILTER_1,FUNCT_7,REWRITE1,ABCMIZ_1,POLYNOM3,NAT_D,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
reserve i for Nat;
reserve A for non  empty set;
registration
let A being non  empty set;
cluster ( StandardStackSystem A ) ->  pop-finite;
coherence
proof
set X = ( StandardStackSystem A );
let f being (Function of ( NAT ),(the carrier' of X));
assume that
E1: (for i being Nat holds (for s being (stack of X) holds (( f . i ) = s implies ((not  emp s) & ( f . ( i + 1 ) ) = ( pop s )))));
reconsider g = ( f . 1 ) as (Element of ( A * )) by CKB18:def 1;
defpred P[ Nat ]
 means
(ex i st (ex g being (Element of ( A * )) st (g = ( f . i ) & $1 = ( len g ))));
E2: (ex k being Nat st P[ k ])
proof
take k = ( len g );
take i = 1;
take g;
thus thesis;
end;
E3: (for k being Nat holds ((k <> ( 0 ) & P[ k ]) implies (ex n being Nat st (n < k & P[ n ]))))
proof
let k being Nat;
assume E4: k <> ( 0 );
then consider n0 being Nat such that E7: k = ( n0 + 1 ) by NAT_1:6;
given i being Nat,g being (Element of ( A * )) such that
E5: (g = ( f . i ) & k = ( len g ));

reconsider s = g as (stack of X) by E5;
reconsider h = ( pop s ) as (Element of ( A * )) by CKB18:def 1;
take n = ( len h );
E8: s is non  empty by E4,E5;
then (not  emp s) by CKB18:def 1;
then E6: (( f . ( i + 1 ) ) = ( pop s ) & h = ( Del (g,1) )) by E1,E5,CKB18:def 1;
1 in ( dom g ) by E8,FINSEQ_5:6;
then n0 = n by E7,E5,E6,FINSEQ_3:109;
hence thesis by E7,E6,NAT_1:13;
end;
P[ ( 0 ) ] from NAT_1:sch 7(E2,E3);
then consider i being Nat,g being (Element of ( A * )) such that E9: (g = ( f . i ) & ( 0 ) = ( len g ));
reconsider s = g as (stack of X) by E9;
(g is  empty & (not  emp s)) by E1,E9;
hence thesis by CKB18:def 1;
end;
end;
