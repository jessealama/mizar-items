environ
vocabularies STACKS_1,XBOOLE_0,STRUCT_0,ZFMISC_1,SUBSET_1,FUNCT_1,NUMBERS,NAT_1,TARSKI,ARYTM_3,RELAT_1,FINSEQ_1,FINSEQ_3,ORDINAL4,FUNCOP_1,PARTFUN1,CARD_1,XXREAL_0,COMPLEX1,GLIB_000,RELAT_2,EQREL_1,FILTER_1,BINOP_1,MCART_1,ORDERS_1,WELLORD1,ARYTM_1,SETFAM_1,FUNCT_2,AOFA_000,PBOOLE,FUNCT_4,MATRIX_7,REWRITE1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,FUNCT_1,RELAT_2,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,DOMAIN_1,FUNCT_3,FUNCOP_1,ORDERS_1,FUNCT_4,NUMBERS,XXREAL_0,NAT_1,NAT_D,FINSEQ_1,FINSEQ_2,EQREL_1,FINSEQ_3,PBOOLE,FUNCT_7,STRUCT_0,FILTER_1,REWRITE1,ABCMIZ_1,AOFA_000,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB32,CKB40,CKB49,CKB56,CKB58,CKB61,CKB66,CKB71;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,RELAT_2,PARTFUN1,FUNCT_2,FINSEQ_1,BINOP_1,FILTER_1,REWRITE1,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB40,CKB49,CKB56,CKB58,CKB61,CKB66,CKB71;
theorems TARSKI,XBOOLE_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,NAT_1,NAT_D,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_3,FUNCOP_1,WSIERP_1,BINOP_1,POLYALG1,EQREL_1,WELLORD2,RELSET_1,ORDINAL1,XREAL_1,NAT_2,ZFMISC_1,SETFAM_1,RELAT_1,XBOOLE_0,ORDERS_1,MATRIX_7,FUNCT_7,FILTER_1,FUNCT_4,REWRITE1,XXREAL_0,MSUALG_8,HILBERT2,RLVECT_3,FINSEQOP,FINSEQ_2,CKB3,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB33,CKB35,CKB36,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB66,CKB67,CKB69,CKB70,CKB71,CKB72,CKB73;
schemes XBOOLE_0,RELSET_1,NAT_1,FUNCT_2,BINOP_1,RECDEF_1,ALTCAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,CKB4,CKB6,CKB37,CKB38,CKB39,CKB68;
registrations XBOOLE_0,RELSET_1,STRUCT_0,RELAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,FUNCT_2,NAT_1,ORDINAL1,XXREAL_0,XREAL_0,CARD_1,EQREL_1,SUBSET_1,REWRITE1,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB34,CKB57,CKB59,CKB65;
constructors BINOP_1,DOMAIN_1,XXREAL_0,RELSET_1,FILTER_1,FUNCT_7,REWRITE1,ABCMIZ_1,POLYNOM3,NAT_D,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB40,CKB49,CKB56,CKB58,CKB61,CKB66,CKB71;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
reserve i for Nat;
reserve j for Nat;
reserve X for StackAlgebra;
reserve s for (stack of X);
theorem
Th13: ((not  emp s) implies ( core ( pop s ) ) = ( core s ))
proof
set R = ( ConstructionRed X );
set A = (the carrier' of X);
assume AA: (not  emp s);
A0:  emp ( core ( pop s ) ) by CKB71:def 1;
consider t being (the carrier' of X) -valued (RedSequence of R) such that A1: (( t . 1 ) = ( pop s ) & ( t . ( len t ) ) = ( core ( pop s ) )) and A2: (for i holds ((1 <= i & i < ( len t )) implies ((not  emp ( t /. i )) & ( t /. ( i + 1 ) ) = ( pop ( t /. i ) )))) by CKB71:def 1;
[ s,( pop s ) ] in R by AA,CKB66:def 1;
then reconsider u = <* s,( pop s ) *> as (RedSequence of R) by REWRITE1:7;
(( u . 2 ) = ( pop s ) & ( len u ) = 2) by FINSEQ_1:44;
then reconsider v = ( u $^ t ) as (RedSequence of R) by A1,REWRITE1:8;
A3: v = ( <* s *> ^ t ) by REWRITE1:2;
then A4: ( v . 1 ) = s by FINSEQ_1:41;
then reconsider v as A -valued (RedSequence of R) by CKB67:1;
A7: ( len <* s *> ) = 1 by FINSEQ_1:40;
then A5: ( len v ) = ( 1 + ( len t ) ) by A3,FINSEQ_1:22;
( len t ) in ( dom t ) by FINSEQ_5:6;
then A6: ( v . ( len v ) ) = ( t . ( len t ) ) by A3,A7,A5,FINSEQ_1:def 7;
now
let i;
assume B1: (1 <= i & i < ( len v ));
i in ( NAT ) by ORDINAL1:def 12;
then (i in ( dom v ) & ( i + 1 ) in ( dom v )) by B1,MSUALG_8:1;
then B3: (( v /. i ) = ( v . i ) & ( v /. ( i + 1 ) ) = ( v . ( i + 1 ) )) by PARTFUN1:def 6;
consider j such that B4: i = ( 1 + j ) by B1,NAT_1:10;
B5: j < ( len t ) by A5,B1,B4,XREAL_1:6;
per cases  by B1,XXREAL_0:1;
suppose C1: i = 1;

hence (not  emp ( v /. i )) by AA,A3,B3,FINSEQ_1:41;
1 in ( dom t ) by FINSEQ_5:6;
hence ( v /. ( i + 1 ) ) = ( t . 1 ) by A3,A7,B3,C1,FINSEQ_1:def 7
.= ( pop ( v /. i ) ) by C1,A1,A3,B3,FINSEQ_1:41;
end;
suppose i > 1;

then B6: (j >= 1 & j in ( NAT )) by B4,NAT_1:13,ORDINAL1:def 12;
then (j in ( dom t ) & i in ( dom t )) by B4,B5,MSUALG_8:1;
then (((( t . j ) = ( v . i ) & ( t /. j ) = ( t . j )) & ( t . i ) = ( v . ( i + 1 ) )) & ( t /. i ) = ( t . i )) by A3,A7,B4,FINSEQ_1:def 7,PARTFUN1:def 6;
hence ((not  emp ( v /. i )) & ( v /. ( i + 1 ) ) = ( pop ( v /. i ) )) by A2,B3,B4,B5,B6;
end;
end;
hence thesis by A0,A1,A4,A6,CKB71:def 1;
end;
