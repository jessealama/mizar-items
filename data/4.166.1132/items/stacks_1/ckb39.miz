environ
vocabularies STACKS_1,XBOOLE_0,STRUCT_0,ZFMISC_1,SUBSET_1,FUNCT_1,NUMBERS,NAT_1,TARSKI,ARYTM_3,RELAT_1,FINSEQ_1,FINSEQ_3,ORDINAL4,FUNCOP_1,PARTFUN1,CARD_1,XXREAL_0,COMPLEX1,GLIB_000,RELAT_2,EQREL_1,FILTER_1,BINOP_1,MCART_1,ORDERS_1,WELLORD1,ARYTM_1,SETFAM_1,FUNCT_2,AOFA_000,PBOOLE,FUNCT_4,MATRIX_7,REWRITE1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,FUNCT_1,RELAT_2,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,DOMAIN_1,FUNCT_3,FUNCOP_1,ORDERS_1,FUNCT_4,NUMBERS,XXREAL_0,NAT_1,NAT_D,FINSEQ_1,FINSEQ_2,EQREL_1,FINSEQ_3,PBOOLE,FUNCT_7,STRUCT_0,FILTER_1,REWRITE1,ABCMIZ_1,AOFA_000,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB32;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,RELAT_2,PARTFUN1,FUNCT_2,FINSEQ_1,BINOP_1,FILTER_1,REWRITE1,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
theorems TARSKI,XBOOLE_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,NAT_1,NAT_D,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_3,FUNCOP_1,WSIERP_1,BINOP_1,POLYALG1,EQREL_1,WELLORD2,RELSET_1,ORDINAL1,XREAL_1,NAT_2,ZFMISC_1,SETFAM_1,RELAT_1,XBOOLE_0,ORDERS_1,MATRIX_7,FUNCT_7,FILTER_1,FUNCT_4,REWRITE1,XXREAL_0,MSUALG_8,HILBERT2,RLVECT_3,FINSEQOP,FINSEQ_2,CKB3,CKB5,CKB7,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25,CKB33,CKB35,CKB36;
schemes XBOOLE_0,RELSET_1,NAT_1,FUNCT_2,BINOP_1,RECDEF_1,ALTCAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,CKB4,CKB6,CKB37,CKB38;
registrations XBOOLE_0,RELSET_1,STRUCT_0,RELAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,FUNCT_2,NAT_1,ORDINAL1,XXREAL_0,XREAL_0,CARD_1,EQREL_1,SUBSET_1,REWRITE1,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB34;
constructors BINOP_1,DOMAIN_1,XXREAL_0,RELSET_1,FILTER_1,FUNCT_7,REWRITE1,ABCMIZ_1,POLYNOM3,NAT_D,CKB1,CKB2,CKB5,CKB7,CKB8,CKB9,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24,CKB25;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
scheme UNIQsch { X() -> StackAlgebra,s() -> (stack of X()),A() -> non empty set,e() -> (Element of A()),d(set,set) -> (Element of A()) } : (for a1,a2 being (Element of A()) holds (((ex F being (Function of (the carrier' of X()),A()) st ((a1 = ( F . s() ) & (for s1 being (stack of X()) holds ( emp s1 implies ( F . s1 ) = e()))) & (for s1 being (stack of X()) holds (for e being (Element of X()) holds ( F . ( push (e,s1) ) ) = d(e,( F . s1 )))))) & (ex F being (Function of (the carrier' of X()),A()) st ((a2 = ( F . s() ) & (for s1 being (stack of X()) holds ( emp s1 implies ( F . s1 ) = e()))) & (for s1 being (stack of X()) holds (for e being (Element of X()) holds ( F . ( push (e,s1) ) ) = d(e,( F . s1 ))))))) implies a1 = a2))
proof
let a1 being (Element of A()),a2 being (Element of A());
given F1 being (Function of (the carrier' of X()),A()) such that
A1: ((a1 = ( F1 . s() ) & (for s1 being (stack of X()) holds ( emp s1 implies ( F1 . s1 ) = e()))) & (for s1 being (stack of X()) holds (for e being (Element of X()) holds ( F1 . ( push (e,s1) ) ) = d(e,( F1 . s1 )))));

given F2 being (Function of (the carrier' of X()),A()) such that
A2: ((a2 = ( F2 . s() ) & (for s1 being (stack of X()) holds ( emp s1 implies ( F2 . s1 ) = e()))) & (for s1 being (stack of X()) holds (for e being (Element of X()) holds ( F2 . ( push (e,s1) ) ) = d(e,( F2 . s1 )))));

defpred P[ (stack of X()) ]
 means
( F1 . $1 ) = ( F2 . $1 );
A3:now
let s being (stack of X());
assume  emp s;
then (( F1 . s ) = e() & ( F2 . s ) = e()) by A1,A2;
hence P[ s ];
end;
A4:now
let s being (stack of X());
let e being (Element of X());
assume P[ s ];
then ( F1 . ( push (e,s) ) ) = d(e,( F2 . s )) by A1;
hence P[ ( push (e,s) ) ] by A2;
end;
P[ s() ] from CKB37:sch 1(A3,A4);
hence a1 = a2 by A1,A2;
end;
