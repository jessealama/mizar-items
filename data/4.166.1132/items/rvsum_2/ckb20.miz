environ
vocabularies FINSEQ_1,FINSEQ_2,ARYTM_1,FUNCT_1,RELAT_1,BINOP_1,SETWISEO,SQUARE_1,FUNCOP_1,RVSUM_1,RVSUM_2,CARD_3,XBOOLE_0,COMPLEX1,XCMPLX_0,VALUED_0,BINOP_2,ZFMISC_1,NUMBERS,SUBSET_1,NAT_1,TARSKI,ORDINAL4,ORDINAL1,ARYTM_3,CARD_1,VALUED_1,XREAL_0;
notations TARSKI,SUBSET_1,ZFMISC_1,ORDINAL1,CARD_1,NUMBERS,VALUED_0,XBOOLE_0,XCMPLX_0,XREAL_0,COMPLEX1,NAT_1,SQUARE_1,RELAT_1,FUNCT_1,PARTFUN1,BINOP_2,FUNCT_2,BINOP_1,FUNCOP_1,FINSEQ_1,FINSEQ_2,VALUED_1,SEQ_4,FINSEQOP,SETWOP_2,RVSUM_1,CKB1,CKB3,CKB8,CKB9,CKB14,CKB15;
definitions BINOP_1,FINSEQOP,FINSEQ_1,SQUARE_1,FINSEQ_2,TARSKI,VALUED_1,XCMPLX_0,RVSUM_1,COMPLEX1,XBOOLE_0,SEQ_4,CARD_1,CKB3,CKB8,CKB14;
theorems FUNCT_1,FUNCT_2,FINSEQ_1,FUNCOP_1,FINSEQ_2,FINSEQOP,SETWOP_2,RELAT_1,FINSOP_1,ZFMISC_1,XCMPLX_0,BINOP_2,FINSEQ_3,VALUED_0,VALUED_1,RFUNCT_1,RVSUM_1,SEQ_4,CARD_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB16,CKB17,CKB18,CKB19;
schemes NAT_1,FUNCT_2;
registrations FUNCT_1,FUNCT_2,FUNCOP_1,NUMBERS,XREAL_0,BINOP_2,MEMBERED,FINSEQ_1,FINSEQ_2,VALUED_0,VALUED_1,RELAT_1,RVSUM_1,NEWTON,CARD_1,CKB2;
constructors BINOP_1,COMPLEX1,SETWISEO,SQUARE_1,BINOP_2,FINSEQOP,FINSOP_1,RELSET_1,RVSUM_1,SEQ_4,CARD_1,CARD_3,CKB1,CKB3,CKB8,CKB9,CKB14,CKB15;
requirements NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve F1 for  complex-valued FinSequence;
reserve F2 for  complex-valued FinSequence;
definition
let F1;
let F2;
redefine func F1 - F2 -> (FinSequence of ( COMPLEX ))
equals
( ( diffcomplex ) .: (F1,F2) );
coherence by CKB7:1;
compatibility
proof
reconsider F3 = F1,F4 = F2 as (FinSequence of ( COMPLEX )) by CKB7:1;
let F being (FinSequence of ( COMPLEX ));
A1: ( dom ( F1 - F2 ) ) = ( ( dom F1 ) /\ ( dom F2 ) ) by VALUED_1:12;
( dom ( diffcomplex ) ) = [: ( COMPLEX ),( COMPLEX ) :] by FUNCT_2:def 1;
then A2: [: ( rng F3 ),( rng F4 ) :] c= ( dom ( diffcomplex ) ) by ZFMISC_1:96;
then A3: ( dom ( ( diffcomplex ) .: (F1,F2) ) ) = ( ( dom F1 ) /\ ( dom F2 ) ) by FUNCOP_1:69;
thus (F = ( F1 - F2 ) implies F = ( ( diffcomplex ) .: (F1,F2) ))
proof
assume A4: F = ( F1 - F2 );
(for z being set holds (z in ( dom ( ( diffcomplex ) .: (F1,F2) ) ) implies ( F . z ) = ( ( diffcomplex ) . (( F1 . z ),( F2 . z )) )))
proof
let z being set;
assume z in ( dom ( ( diffcomplex ) .: (F1,F2) ) );
hence ( F . z ) = ( ( F1 . z ) - ( F2 . z ) ) by A1,A3,A4,VALUED_1:13
.= ( ( diffcomplex ) . (( F1 . z ),( F2 . z )) ) by BINOP_2:def 4;
end;
hence thesis by A1,A3,A4,FUNCOP_1:21;
end;

assume A5: F = ( ( diffcomplex ) .: (F1,F2) );
now
let c being set;
assume c in ( dom F );
hence ( F . c ) = ( ( diffcomplex ) . (( F1 . c ),( F2 . c )) ) by A5,FUNCOP_1:22
.= ( ( F1 . c ) - ( F2 . c ) ) by BINOP_2:def 4;
end;
hence thesis by A1,A2,A5,FUNCOP_1:69,VALUED_1:14;
end;
end;
