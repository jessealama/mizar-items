environ
vocabularies NUMBERS,XBOOLEAN,XXREAL_0,CARD_1,XBOOLE_0,SUBSET_1,FUNCT_2,MARGREL1,FUNCT_1,RELAT_1,TARSKI,FUNCOP_1,PARTIT1,EQREL_1,ZFMISC_1,SETFAM_1,BVFUNC_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,XBOOLEAN,MARGREL1,RELAT_1,FUNCT_1,FUNCT_2,SETFAM_1,EQREL_1,NUMBERS,PARTIT1,XXREAL_0,CKB1,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB36;
definitions TARSKI,XBOOLE_0,MARGREL1,XBOOLEAN,CKB1,CKB5,CKB6,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17,CKB20,CKB21,CKB36;
theorems TARSKI,FUNCT_1,FUNCT_2,MARGREL1,EQREL_1,SETFAM_1,PARTIT1,XBOOLE_0,FUNCOP_1,XBOOLEAN,CKB1,CKB5,CKB6,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37;
schemes DOMAIN_1,FUNCT_2,FUNCT_1,CKB2;
registrations SUBSET_1,XREAL_0,XBOOLEAN,EQREL_1,MARGREL1,FUNCT_1,FUNCT_2,CKB7,CKB14,CKB15;
constructors SETFAM_1,XXREAL_0,XREAL_0,PARTIT1,BINARITH,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB36;
requirements REAL,SUBSET,BOOLE,ARITHM;
begin
reserve Y for non empty set;
theorem
Th19: (for a,b being (Element of ( Funcs (Y,( BOOLEAN )) )) holds (( a 'imp' b ) = ( I_el Y ) iff a '<' b))
proof
let a being (Element of ( Funcs (Y,( BOOLEAN )) )),b being (Element of ( Funcs (Y,( BOOLEAN )) ));
A1: (for a,b being (Element of ( Funcs (Y,( BOOLEAN )) )) holds (a '<' b implies ( a 'imp' b ) = ( I_el Y )))
proof
let a being (Element of ( Funcs (Y,( BOOLEAN )) )),b being (Element of ( Funcs (Y,( BOOLEAN )) ));
consider k3 being Function such that A2: ( a 'imp' b ) = k3 and A3: ( dom k3 ) = Y and ( rng k3 ) c= ( BOOLEAN ) by FUNCT_2:def 2;
consider k4 being Function such that A4: ( I_el Y ) = k4 and A5: ( dom k4 ) = Y and ( rng k4 ) c= ( BOOLEAN ) by FUNCT_2:def 2;
assume A6: a '<' b;
A7: (for x being (Element of Y) holds (((( a . x ) = ( FALSE ) & ( b . x ) = ( FALSE )) or (( a . x ) = ( FALSE ) & ( b . x ) = ( TRUE ))) or (( a . x ) = ( TRUE ) & ( b . x ) = ( TRUE ))))
proof
let x being (Element of Y);
(( a . x ) = ( TRUE ) implies ( b . x ) = ( TRUE )) by A6,CKB36:def 1;
hence thesis by XBOOLEAN:def 3;
end;
A8: (for x being (Element of Y) holds ( ( 'not' ( a . x ) ) 'or' ( b . x ) ) = ( TRUE ))
proof
let x being (Element of Y);
(((( a . x ) = ( FALSE ) & ( b . x ) = ( FALSE )) or (( a . x ) = ( FALSE ) & ( b . x ) = ( TRUE ))) or (( a . x ) = ( TRUE ) & ( b . x ) = ( TRUE ))) by A7;
hence thesis;
end;
(for x being (Element of Y) holds ( ( a 'imp' b ) . x ) = ( ( I_el Y ) . x ))
proof
let x being (Element of Y);
(( ( a 'imp' b ) . x ) = ( ( 'not' ( a . x ) ) 'or' ( b . x ) ) & ( ( I_el Y ) . x ) = ( TRUE )) by CKB16:def 1,CKB21:def 1;
hence thesis by A8;
end;
then (for u being set holds (u in Y implies ( k3 . u ) = ( k4 . u ))) by A2,A4;
hence thesis by A2,A3,A4,A5,FUNCT_1:2;
end;
(for a,b being (Element of ( Funcs (Y,( BOOLEAN )) )) holds (( a 'imp' b ) = ( I_el Y ) implies a '<' b))
proof
let a being (Element of ( Funcs (Y,( BOOLEAN )) )),b being (Element of ( Funcs (Y,( BOOLEAN )) ));
assume A9: ( a 'imp' b ) = ( I_el Y );
A10: (for x being (Element of Y) holds ( ( 'not' ( a . x ) ) 'or' ( b . x ) ) = ( TRUE ))
proof
let x being (Element of Y);
( ( a 'imp' b ) . x ) = ( ( 'not' ( a . x ) ) 'or' ( b . x ) ) by CKB16:def 1;
hence thesis by A9,CKB21:def 1;
end;
(for x being (Element of Y) holds (((( a . x ) = ( FALSE ) & ( b . x ) = ( FALSE )) or (( a . x ) = ( FALSE ) & ( b . x ) = ( TRUE ))) or (( a . x ) = ( TRUE ) & ( b . x ) = ( TRUE ))))
proof
let x being (Element of Y);
A11: ((((( 'not' ( a . x ) ) = ( TRUE ) & ( b . x ) = ( FALSE )) or (( 'not' ( a . x ) ) = ( TRUE ) & ( b . x ) = ( TRUE ))) or (( 'not' ( a . x ) ) = ( FALSE ) & ( b . x ) = ( FALSE ))) or (( 'not' ( a . x ) ) = ( FALSE ) & ( b . x ) = ( TRUE ))) by XBOOLEAN:def 3;
( ( 'not' ( a . x ) ) 'or' ( b . x ) ) = ( TRUE ) by A10;
hence thesis by A11;
end;
then (for x being (Element of Y) holds (( a . x ) = ( TRUE ) implies ( b . x ) = ( TRUE )));
hence thesis by CKB36:def 1;
end;
hence thesis by A1;
end;
