environ
vocabularies POSET_1,ORDERS_1,RELAT_1,RELAT_2,XBOOLE_0,FUNCT_1,FUNCT_2,ORDINAL2,FUNCOP_1,SEQM_3,LATTICES,LATTICE3,YELLOW_0,WAYBEL_0,ABIAN,TARSKI,CARD_1,FUNCT_7,NAT_1,SUBSET_1,ORDERS_2,XXREAL_0,STRUCT_0,ARYTM_3,TREES_2,EQREL_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,ORDERS_1,RELSET_1,PARTFUN1,FUNCT_2,STRUCT_0,ORDERS_2,ORDERS_3,NUMBERS,NAT_1,FUNCT_7,XXREAL_0,XCMPLX_0,YELLOW_2,LATTICE3,YELLOW_0,WAYBEL_0,ABIAN,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48,CKB49;
definitions RELAT_1,LATTICE3,STRUCT_0,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48,CKB49;
theorems RELAT_1,RELSET_1,RELAT_2,ORDERS_2,TARSKI,FUNCT_1,FUNCT_2,XBOOLE_0,XBOOLE_1,ORDERS_1,ORDERS_3,FUNCOP_1,FUNCT_7,NAT_1,LATTICE3,YELLOW_0,ABIAN,YELLOW_2,WAYBEL_0,CKB1,CKB2,CKB3,CKB5,CKB6,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB47,CKB48,CKB49;
schemes NAT_1,RELSET_1,FUNCT_2;
registrations XBOOLE_0,ORDINAL1,FUNCT_1,PARTFUN1,STRUCT_0,ORDERS_2,XREAL_0,NAT_1,RELAT_1,WAYBEL10,YELLOW_0,WAYBEL24,FUNCT_7,RELSET_1,CKB4,CKB8,CKB9,CKB27,CKB28,CKB44,CKB45,CKB46;
constructors ORDERS_3,NAT_1,DOMAIN_1,XXREAL_0,ABIAN,LATTICE3,YELLOW_2,RELSET_1,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48,CKB49;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve P for  strict  chain-complete non  empty Poset;
reserve Q for  strict  chain-complete non  empty Poset;
reserve p for (Element of P);
reserve p1 for (Element of P);
reserve q for (Element of Q);
reserve q1 for (Element of Q);
reserve g for  monotone (Function of P,P);
reserve F for non  empty (Chain of ( ConPoset (P,Q) ));
theorem
Lm22: ( sup_func F ) is  monotone
proof
reconsider f = ( sup_func F ) as (Function of P,Q);
(for p holds (for p1 holds (p <= p1 implies (for q holds (for q1 holds ((q = ( f . p ) & q1 = ( f . p1 )) implies q <= q1))))))
proof
let p;
let p1;
assume A1: p <= p1;
(for q holds (for q1 holds ((q = ( f . p ) & q1 = ( f . p1 )) implies q <= q1)))
proof
let q;
let q1;
assume A2: (q = ( f . p ) & q1 = ( f . p1 ));
reconsider X = ( F -image p ) as non  empty (Chain of Q);
reconsider X1 = ( F -image p1 ) as non  empty (Chain of Q);
A3: ( ex_sup_of X,Q &  ex_sup_of X1,Q) by CKB6:def 1;
A4: q = ( sup X ) by A2,CKB49:def 1;
q1 = ( sup X1 ) by A2,CKB49:def 1;
then A5: X1 is_<=_than q1 by A3,YELLOW_0:def 9;
(for x being (Element of Q) holds (x in X implies x <= q1))
proof
let x being (Element of Q);
assume x in X;
then consider a being (Element of Q) such that A6: (x = a & (ex g being  continuous (Function of P,Q) st (g in F & a = ( g . p ))));
consider g being  continuous (Function of P,Q) such that A7: (g in F & a = ( g . p )) by A6;
reconsider b = ( g . p1 ) as (Element of Q);
A8: a <= b by A1,A7,ORDERS_3:def 5;
b in X1 by A7;
then b <= q1 by A5,LATTICE3:def 9;
hence thesis by A6,A8,ORDERS_2:3;
end;
then X is_<=_than q1 by LATTICE3:def 9;
hence thesis by A3,A4,YELLOW_0:def 9;
end;
hence thesis;
end;
hence thesis by ORDERS_3:def 5;
end;
