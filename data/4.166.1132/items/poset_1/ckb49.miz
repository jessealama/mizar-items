environ
vocabularies POSET_1,ORDERS_1,RELAT_1,RELAT_2,XBOOLE_0,FUNCT_1,FUNCT_2,ORDINAL2,FUNCOP_1,SEQM_3,LATTICES,LATTICE3,YELLOW_0,WAYBEL_0,ABIAN,TARSKI,CARD_1,FUNCT_7,NAT_1,SUBSET_1,ORDERS_2,XXREAL_0,STRUCT_0,ARYTM_3,TREES_2,EQREL_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,ORDERS_1,RELSET_1,PARTFUN1,FUNCT_2,STRUCT_0,ORDERS_2,ORDERS_3,NUMBERS,NAT_1,FUNCT_7,XXREAL_0,XCMPLX_0,YELLOW_2,LATTICE3,YELLOW_0,WAYBEL_0,ABIAN,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48;
definitions RELAT_1,LATTICE3,STRUCT_0,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48;
theorems RELAT_1,RELSET_1,RELAT_2,ORDERS_2,TARSKI,FUNCT_1,FUNCT_2,XBOOLE_0,XBOOLE_1,ORDERS_1,ORDERS_3,FUNCOP_1,FUNCT_7,NAT_1,LATTICE3,YELLOW_0,ABIAN,YELLOW_2,WAYBEL_0,CKB1,CKB2,CKB3,CKB5,CKB6,CKB7,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB47,CKB48;
schemes NAT_1,RELSET_1,FUNCT_2;
registrations XBOOLE_0,ORDINAL1,FUNCT_1,PARTFUN1,STRUCT_0,ORDERS_2,XREAL_0,NAT_1,RELAT_1,WAYBEL10,YELLOW_0,WAYBEL24,FUNCT_7,RELSET_1,CKB4,CKB8,CKB9,CKB27,CKB28,CKB44,CKB45,CKB46;
constructors ORDERS_3,NAT_1,DOMAIN_1,XXREAL_0,ABIAN,LATTICE3,YELLOW_2,RELSET_1,CKB6,CKB12,CKB21,CKB24,CKB32,CKB35,CKB39,CKB47,CKB48;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve y for set;
reserve P for  strict  chain-complete non empty Poset;
reserve Q for  strict  chain-complete non empty Poset;
reserve M for non empty (Chain of Q);
reserve p for (Element of P);
reserve F for non empty (Chain of ( ConPoset (P,Q) ));
definition
let P;
let Q;
let F;
func sup_func F -> (Function of P,Q)
means
:Def10: (for p holds (for M holds (M = ( F -image p ) implies ( it . p ) = ( sup M ))));
existence
proof
set X = (the carrier of P);
set Y = (the carrier of Q);
defpred U[ set,set ]
 means
(for p holds (for M holds ((p = $1 & M = ( F -image p )) implies $2 = ( sup M ))));
A1: (for x holds (x in X implies (ex y st (y in Y & U[ x,y ]))))
proof
let x;
assume x in X;
then reconsider x as (Element of P);
reconsider a = ( F -image x ) as non empty (Chain of Q);
set y = ( sup a );
take y;
thus thesis;
end;
consider IT being (Function of X,Y) such that A2: (for x holds (x in X implies U[ x,( IT . x ) ])) from FUNCT_2:sch 1(A1);
(for p holds (for M holds (M = ( F -image p ) implies ( IT . p ) = ( sup M )))) by A2;
hence thesis;
end;
uniqueness
proof
let f being (Function of P,Q),g being (Function of P,Q);
(((for p holds (for M holds (M = ( F -image p ) implies ( f . p ) = ( sup M )))) & (for p holds (for M holds (M = ( F -image p ) implies ( g . p ) = ( sup M ))))) implies f = g)
proof
assume A3: ((for p holds (for M holds (M = ( F -image p ) implies ( f . p ) = ( sup M )))) & (for p holds (for M holds (M = ( F -image p ) implies ( g . p ) = ( sup M )))));
set X = (the carrier of P);
(for x holds (x in X implies ( f . x ) = ( g . x )))
proof
let x;
assume x in X;
then reconsider p = x as (Element of P);
reconsider M = ( F -image p ) as non empty (Chain of Q);
( f . x ) = ( sup M ) by A3
.= ( g . x ) by A3;
hence thesis;
end;
hence thesis by FUNCT_2:12;
end;
hence thesis;
end;
end;
