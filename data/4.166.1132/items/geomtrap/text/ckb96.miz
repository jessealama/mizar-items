environ
vocabularies NUMBERS,RLVECT_1,REAL_1,PARSP_1,ANALOAF,ANALMETR,RELAT_1,ARYTM_3,SUPINF_2,CARD_1,SUBSET_1,STRUCT_0,DIRAF,ARYTM_1,PBOOLE,SYMSP_1,MCART_1,ZFMISC_1,BINOP_1,FUNCT_1,MIDSP_1,XBOOLE_0,GEOMTRAP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,DOMAIN_1,NUMBERS,XXREAL_0,REAL_1,STRUCT_0,DIRAF,RELSET_1,RLVECT_1,MIDSP_1,AFF_1,ANALOAF,BINOP_1,ANALMETR,CKB1,CKB6,CKB27,CKB46,CKB47,CKB54,CKB69,CKB71,CKB72,CKB74,CKB76,CKB78;
definitions STRUCT_0,RLVECT_1,CKB1,CKB6,CKB27,CKB46,CKB47,CKB54,CKB69,CKB71,CKB74,CKB76,CKB78;
theorems RLVECT_1,RELAT_1,DIRAF,ANALOAF,ANALMETR,AFF_1,ZFMISC_1,RLSUB_2,XCMPLX_0,XCMPLX_1,XREAL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB74,CKB76,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95;
schemes RELSET_1,BINOP_1,BINOP_2;
registrations SUBSET_1,RELSET_1,MEMBERED,STRUCT_0,ANALOAF,DIRAF,ANALMETR,CKB72,CKB73,CKB75,CKB77;
constructors BINOP_1,DOMAIN_1,XXREAL_0,REAL_1,MEMBERED,MIDSP_1,AFF_1,ANALMETR,CKB1,CKB6,CKB27,CKB46,CKB47,CKB54,CKB69,CKB71,CKB72,CKB74,CKB76,CKB78;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
definition
let IT being non  empty AfMidStruct;
attr IT is  MidOrdTrapSpace-like
means
:Def13: (for a,b,c,d,a1,b1,c1,d1,p,q being (Element of IT) holds (((((((((((((( a # b ) = ( b # a ) & ( a # a ) = a) & ( ( a # b ) # ( c # d ) ) = ( ( a # c ) # ( b # d ) )) & (ex p being (Element of IT) st ( p # a ) = b)) & (( a # b ) = ( a # c ) implies b = c)) & (a,b // c,d implies a,b // ( a # c ),( b # d ))) & (a,b // c,d implies (a,b // ( a # d ),( b # c ) or a,b // ( b # c ),( a # d )))) & (((((a,b // c,d & ( a # a1 ) = p) & ( b # b1 ) = p) & ( c # c1 ) = p) & ( d # d1 ) = p) implies a1,b1 // c1,d1)) & ((((((p <> q & p,q // a,a1) & p,q // b,b1) & p,q // c,c1) & p,q // d,d1) & a,b // c,d) implies a1,b1 // c1,d1)) & (a,b // b,c implies (a = b & b = c))) & (((a,b // a1,b1 & a,b // c1,d1) & a <> b) implies a1,b1 // c1,d1)) & (a,b // c,d implies (c,d // a,b & b,a // d,c))) & (ex d being (Element of IT) st (a,b // c,d or a,b // d,c))) & ((a,b // c,p & a,b // c,q) implies (a = b or p = q))));
end;
