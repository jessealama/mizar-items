environ
vocabularies XBOOLE_0,STRUCT_0,BINOP_1,SUBSET_1,FINSEQ_1,FUNCT_1,VALUED_1,RELAT_1,FINSET_1,TREES_2,ZFMISC_1,NUMBERS,CARD_1,MCART_1,ORDINAL4,FUNCOP_1,TARSKI,ORDINAL1,XXREAL_0,ARYTM_3,CARD_3,NAT_1,REAL_1,FUNCT_5,PRELAMB;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,REAL_1,BINOP_1,RELSET_1,FINSEQ_1,FINSEQ_2,FINSET_1,MCART_1,STRUCT_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,FUNCT_5,RVSUM_1,XCMPLX_0,NAT_1,TREES_1,TREES_2,XXREAL_0,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7;
definitions TARSKI,STRUCT_0,XBOOLE_0,BINOP_1,CKB4,CKB5,CKB6;
theorems FINSEQ_1,ZFMISC_1,TREES_2,FUNCOP_1,FUNCT_2,TARSKI,MCART_1,CARD_1,TREES_1,NAT_1,CARD_2,RVSUM_1,RELAT_1,XBOOLE_1,FINSEQ_2,CKB4,CKB5,CKB6;
schemes FUNCT_2,FINSEQ_2;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FINSET_1,NUMBERS,MEMBERED,FINSEQ_1,TREES_2,STRUCT_0,VALUED_0,RELSET_1,CARD_1,CKB1,CKB2;
constructors BINOP_1,FUNCT_3,XXREAL_0,NAT_1,RVSUM_1,TREES_2,MIDSP_1,FUNCT_5,RELSET_1,BINOP_2,FUNCOP_1,REAL_1,CKB1,CKB4,CKB5,CKB6;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve s for non empty typealg;
reserve T for (FinSequence of s);
reserve X for (FinSequence of s);
reserve Y for (FinSequence of s);
reserve x for (type of s);
reserve y for (type of s);
reserve z for (type of s);
reserve Tr for (PreProof of s);
definition
let s;
let Tr;
let v being (Element of ( dom Tr ));
attr v is  correct
means
:Def5: (( branchdeg v ) = ( 0 ) & (ex x st ( ( Tr . v ) `1 ) = [ <* x *>,x ])) if ( ( Tr . v ) `2 ) = ( 0 ),(( branchdeg v ) = 1 & (ex T st (ex x st (ex y st (( ( Tr . v ) `1 ) = [ T,( x /" y ) ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ ( T ^ <* y *> ),x ]))))) if ( ( Tr . v ) `2 ) = 1,(( branchdeg v ) = 1 & (ex T st (ex x st (ex y st (( ( Tr . v ) `1 ) = [ T,( y \ x ) ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ ( <* y *> ^ T ),x ]))))) if ( ( Tr . v ) `2 ) = 2,(( branchdeg v ) = 2 & (ex T st (ex X st (ex Y st (ex x st (ex y st (ex z st ((( ( Tr . v ) `1 ) = [ ( ( ( X ^ <* ( x /" y ) *> ) ^ T ) ^ Y ),z ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ T,y ]) & ( ( Tr . ( v ^ <* 1 *> ) ) `1 ) = [ ( ( X ^ <* x *> ) ^ Y ),z ])))))))) if ( ( Tr . v ) `2 ) = 3,(( branchdeg v ) = 2 & (ex T st (ex X st (ex Y st (ex x st (ex y st (ex z st ((( ( Tr . v ) `1 ) = [ ( ( ( X ^ T ) ^ <* ( y \ x ) *> ) ^ Y ),z ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ T,y ]) & ( ( Tr . ( v ^ <* 1 *> ) ) `1 ) = [ ( ( X ^ <* x *> ) ^ Y ),z ])))))))) if ( ( Tr . v ) `2 ) = 4,(( branchdeg v ) = 1 & (ex X st (ex x st (ex y st (ex Y st (( ( Tr . v ) `1 ) = [ ( ( X ^ <* ( x * y ) *> ) ^ Y ),z ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ ( ( ( X ^ <* x *> ) ^ <* y *> ) ^ Y ),z ])))))) if ( ( Tr . v ) `2 ) = 5,(( branchdeg v ) = 2 & (ex X st (ex Y st (ex x st (ex y st ((( ( Tr . v ) `1 ) = [ ( X ^ Y ),( x * y ) ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ X,x ]) & ( ( Tr . ( v ^ <* 1 *> ) ) `1 ) = [ Y,y ])))))) if ( ( Tr . v ) `2 ) = 6,(( branchdeg v ) = 2 & (ex T st (ex X st (ex Y st (ex y st (ex z st ((( ( Tr . v ) `1 ) = [ ( ( X ^ T ) ^ Y ),z ] & ( ( Tr . ( v ^ <* ( 0 ) *> ) ) `1 ) = [ T,y ]) & ( ( Tr . ( v ^ <* 1 *> ) ) `1 ) = [ ( ( X ^ <* y *> ) ^ Y ),z ]))))))) if ( ( Tr . v ) `2 ) = 7 otherwise contradiction;
correctness;
end;
