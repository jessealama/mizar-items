environ
vocabularies RELAT_2,ALTCAT_1,XBOOLE_0,MSUALG_6,FUNCTOR0,CAT_1,FUNCT_1,PZFMISC1,NATTRA_1,PBOOLE,STRUCT_0,SUBSET_1,REALSET1,RELAT_1,FUNCT_2,CARD_3,CAT_2,ZFMISC_1,TARSKI,FUNCTOR2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCTOR0,MCART_1,DOMAIN_1,RELAT_1,STRUCT_0,CARD_3,FUNCT_1,PBOOLE,FUNCT_2,BINOP_1,MULTOP_1,ALTCAT_1,CKB7,CKB9,CKB10,CKB11,CKB12;
definitions ALTCAT_1,BINOP_1,CKB7,CKB9,CKB10,CKB11,CKB12;
theorems MCART_1,MULTOP_1,FUNCT_2,ZFMISC_1,ALTCAT_1,PBOOLE,BINOP_1,TARSKI,ALTCAT_2,FUNCTOR0,CARD_3,XBOOLE_0,PARTFUN1,RELAT_1,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
schemes TARSKI,PBOOLE,MSSUBFAM,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,STRUCT_0,ALTCAT_1,FUNCTOR0,PBOOLE,FUNCT_1,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5;
constructors DOMAIN_1,CARD_3,FUNCTOR0,RELSET_1,CKB7,CKB9,CKB10,CKB11,CKB12;
requirements SUBSET,BOOLE;
begin
theorem
Th7: (for A,B being  transitive  with_units non empty AltCatStr holds (for F1,F2 being (Functor of A,B) holds (F1 is_transformable_to F2 implies (for t being (transformation of F1,F2) holds (( ( idt F2 ) `*` t ) = t & ( t `*` ( idt F1 ) ) = t)))))
proof
let A being  transitive  with_units non empty AltCatStr,B being  transitive  with_units non empty AltCatStr;
let F1 being (Functor of A,B),F2 being (Functor of A,B);
assume A1: F1 is_transformable_to F2;
let t being (transformation of F1,F2);
now
let a being (object of A);
A2: <^ ( F1 . a ),( F2 . a ) ^> <> ( {} ) by A1,CKB7:def 1;
thus ( ( ( idt F2 ) `*` t ) ! a ) = ( ( ( idt F2 ) ! a ) * ( t ! a ) ) by A1,CKB12:def 1
.= ( ( idm ( F2 . a ) ) * ( t ! a ) ) by CKB14:1
.= ( t ! a ) by A2,ALTCAT_1:20;
end;
hence ( ( idt F2 ) `*` t ) = t by A1,CKB13:1;
now
let a being (object of A);
A3: <^ ( F1 . a ),( F2 . a ) ^> <> ( {} ) by A1,CKB7:def 1;
thus ( ( t `*` ( idt F1 ) ) ! a ) = ( ( t ! a ) * ( ( idt F1 ) ! a ) ) by A1,CKB12:def 1
.= ( ( t ! a ) * ( idm ( F1 . a ) ) ) by CKB14:1
.= ( t ! a ) by A3,ALTCAT_1:def 17;
end;
hence thesis by A1,CKB13:1;
end;
