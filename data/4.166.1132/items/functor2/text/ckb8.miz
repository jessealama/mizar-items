environ
vocabularies RELAT_2,ALTCAT_1,XBOOLE_0,MSUALG_6,FUNCTOR0,CAT_1,FUNCT_1,PZFMISC1,NATTRA_1,PBOOLE,STRUCT_0,SUBSET_1,REALSET1,RELAT_1,FUNCT_2,CARD_3,CAT_2,ZFMISC_1,TARSKI,FUNCTOR2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCTOR0,MCART_1,DOMAIN_1,RELAT_1,STRUCT_0,CARD_3,FUNCT_1,PBOOLE,FUNCT_2,BINOP_1,MULTOP_1,ALTCAT_1,CKB7;
definitions ALTCAT_1,BINOP_1,CKB7;
theorems MCART_1,MULTOP_1,FUNCT_2,ZFMISC_1,ALTCAT_1,PBOOLE,BINOP_1,TARSKI,ALTCAT_2,FUNCTOR0,CARD_3,XBOOLE_0,PARTFUN1,RELAT_1,CKB6,CKB7;
schemes TARSKI,PBOOLE,MSSUBFAM,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,STRUCT_0,ALTCAT_1,FUNCTOR0,PBOOLE,FUNCT_1,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5;
constructors DOMAIN_1,CARD_3,FUNCTOR0,RELSET_1,CKB7;
requirements SUBSET,BOOLE;
begin
theorem
Th4: (for A,B being  transitive  with_units non empty AltCatStr holds (for F,F1,F2 being (Functor of A,B) holds ((F is_transformable_to F1 & F1 is_transformable_to F2) implies F is_transformable_to F2)))
proof
let A being  transitive  with_units non empty AltCatStr,B being  transitive  with_units non empty AltCatStr;
let F being (Functor of A,B),F1 being (Functor of A,B),F2 being (Functor of A,B);
assume A1: (F is_transformable_to F1 & F1 is_transformable_to F2);
let a being (object of A);
(<^ ( F . a ),( F1 . a ) ^> <> ( {} ) & <^ ( F1 . a ),( F2 . a ) ^> <> ( {} )) by A1,CKB7:def 1;
hence thesis by ALTCAT_1:def 2;
end;
