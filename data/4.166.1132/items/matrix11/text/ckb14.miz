environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,VECTSP_1,SUBSET_1,MATRIX_2,FUNCT_2,FINSEQ_1,FUNCT_1,ARYTM_3,SGRAPH1,XXREAL_0,TARSKI,CARD_1,FINSET_1,ORDINAL1,RELAT_1,ALGSTR_0,SETWISEO,BINOP_1,STRUCT_0,GROUP_1,ARYTM_1,FINSUB_1,INT_1,SUPINF_2,ABSVALUE,FINSEQ_2,CARD_3,ORDINAL4,FINSOP_1,ABIAN,MATRIX_1,TREES_1,ZFMISC_1,INCSP_1,AFINSQ_1,PARTFUN1,MATRIX_3,RLVECT_1,RVSUM_1,FVSUM_1,FUNCT_5,FUNCT_4,MATRIX11;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,FINSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSEQ_1,BINOP_1,STRUCT_0,ALGSTR_0,NAT_D,RLVECT_1,GROUP_1,VECTSP_1,SETWISEO,SETWOP_2,FINSEQ_2,FINSEQOP,MATRIX_1,FINSUB_1,MATRIX_2,NAT_1,FVSUM_1,CAT_2,FINSOP_1,GROUP_4,MATRIX_3,CARD_1,FINSEQ_7,FUNCT_4,ORDINAL1,SGRAPH1,MATRIX_6,CKB1,CKB9;
definitions BINOP_1,FINSEQ_2,FINSEQ_1,TARSKI,XBOOLE_0,MATRIX_1,MATRIX_3,FVSUM_1,RELAT_1,ALGSTR_0,CKB9;
theorems FINSEQ_1,FINSEQ_2,TARSKI,FUNCT_2,NAT_1,BINOP_1,FUNCT_1,SETWISEO,VECTSP_1,ZFMISC_1,FVSUM_1,SETWOP_2,MATRIX_1,MATRIX_2,FUNCOP_1,FINSUB_1,FINSEQ_3,RLVECT_1,RELAT_1,FINSOP_1,XBOOLE_0,XBOOLE_1,GROUP_1,MATRIX_3,FINSEQ_5,FINSET_1,GROUP_4,XREAL_1,MATRIX_7,ORDINAL1,MATRIX_4,CARD_1,CARD_2,MATRIX_9,STIRL2_1,RADIX_1,REWRITE1,FINSEQ_7,SGRAPH1,WELLORD2,FRAENKEL,FUNCT_5,FUNCT_4,NAT_D,XXREAL_0,PARTFUN1,CKB2,CKB3,CKB4,CKB9,CKB10,CKB11,CKB12,CKB13;
schemes FUNCT_2,NAT_1,FINSEQ_1,FINSEQ_2,MATRIX_1,BINOP_1,FUNCT_1,SETWISEO;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,PARTFUN1,FUNCT_2,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,STRUCT_0,GROUP_1,VECTSP_1,MATRIX_2,FVSUM_1,CARD_1,RELSET_1,FINSEQ_2,CKB5,CKB6,CKB7,CKB8;
constructors RELAT_2,WELLORD2,SETWISEO,XXREAL_0,NAT_1,NAT_D,FINSOP_1,SETWOP_2,FINSEQ_7,CAT_2,ALGSTR_1,GROUP_4,FVSUM_1,SGRAPH1,MATRIX_6,MATRIX_7,RELSET_1,CKB9;
requirements ARITHM,NUMERALS,REAL,BOOLE,SUBSET;
begin
reserve i for Nat;
reserve j for Nat;
reserve k for Nat;
reserve n for Nat;
reserve P for (Permutation of ( Seg n ));
theorem
Th8: (for P being (Permutation of ( Seg n )) holds (P is  being_transposition implies (for i holds (for j holds (i < j implies (( P . i ) = j iff ((((i in ( dom P ) & j in ( dom P )) & ( P . i ) = j) & ( P . j ) = i) & (for k holds (((k <> i & k <> j) & k in ( dom P )) implies ( P . k ) = k)))))))))
proof
let P;
assume P is  being_transposition;
then consider i9,j9 being Nat such that i9 in ( dom P ) and j9 in ( dom P ) and i9 <> j9 and A1: ( P . i9 ) = j9 and A2: ( P . j9 ) = i9 and A3: (for k holds (((k <> i9 & k <> j9) & k in ( dom P )) implies ( P . k ) = k)) by MATRIX_2:def 11;
let i;
let j;
assume that
A4: i < j;
thus (( P . i ) = j implies ((((i in ( dom P ) & j in ( dom P )) & ( P . i ) = j) & ( P . j ) = i) & (for k holds (((k <> i & k <> j) & k in ( dom P )) implies ( P . k ) = k))))
proof
A5: ( dom P ) = ( Seg n ) by FUNCT_2:52;
A6: ( rng P ) = ( Seg n ) by FUNCT_2:def 3;
assume A7: ( P . i ) = j;
then A8: i in ( dom P ) by A4,FUNCT_1:def 2;
then (i = j9 or i = i9) by A4,A3,A7;
hence thesis by A1,A2,A3,A7,A8,A6,A5,FUNCT_1:def 3;
end;

thus thesis;
end;
