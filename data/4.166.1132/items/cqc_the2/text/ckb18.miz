environ
vocabularies SUBSET_1,CQC_LANG,QC_LANG1,FINSEQ_1,ZFMISC_1,CQC_THE1,NUMBERS,XBOOLEAN,BVFUNC_2,XBOOLE_0,FUNCT_1,TARSKI,RCOMP_1,MCART_1,NAT_1,XXREAL_0,ARYTM_3,CARD_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,FINSEQ_1,FUNCT_1,MCART_1,DOMAIN_1,QC_LANG1,QC_LANG2,CQC_LANG,CQC_THE1,XXREAL_0;
definitions CQC_THE1;
theorems TARSKI,ZFMISC_1,LUKASI_1,CQC_LANG,CQC_THE1,ENUMSET1,QC_LANG1,QC_LANG2,QC_LANG3,PROCAL_1,XBOOLE_0,XBOOLE_1,XXREAL_0,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes NAT_1;
registrations XBOOLE_0,RELSET_1,XREAL_0,CQC_LANG,ORDINAL1,LUKASI_1;
constructors DOMAIN_1,XXREAL_0,XREAL_0,CQC_THE1;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve p for (Element of ( CQC-WFF ));
reserve q for (Element of ( CQC-WFF ));
theorem
Lm14: ((( p => q ) is  valid & ( q => p ) is  valid) iff ( p <=> q ) is  valid)
proof
thus ((( p => q ) is  valid & ( q => p ) is  valid) implies ( p <=> q ) is  valid)
proof
assume (( p => q ) is  valid & ( q => p ) is  valid);
then ( ( p => q ) '&' ( q => p ) ) is  valid by CKB12:1;
hence thesis by QC_LANG2:def 4;
end;

assume ( p <=> q ) is  valid;
then ( ( p => q ) '&' ( q => p ) ) is  valid by QC_LANG2:def 4;
hence thesis by CKB6:1;
end;
