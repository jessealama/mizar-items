environ
vocabularies XBOOLE_0,FUNCT_1,TARSKI,ZFMISC_1,RELAT_1,FUNCOP_1,SUBSET_1,PARTFUN1,FUNCT_2,ORDINAL1,FUNCT_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCOP_1;
definitions TARSKI,FUNCT_2,PARTFUN1,XBOOLE_0,BINOP_1,FUNCOP_1,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,PARTFUN1,FUNCOP_1,ZFMISC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,ENUMSET1,ORDINAL1,CKB1;
schemes FUNCT_1,PARTFUN1,XBOOLE_0;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCOP_1,RELSET_1,ZFMISC_1;
constructors PARTFUN1,BINOP_1,FUNCOP_1,RELSET_1,ORDINAL1;
requirements BOOLE,SUBSET;
begin
reserve x for set;
reserve y for set;
reserve z for set;
reserve X for set;
reserve Y for set;
reserve Z for set;
theorem
Th1: ((for z holds (z in Z implies (ex x st (ex y st z = [ x,y ])))) implies (ex X st (ex Y st Z c= [: X,Y :])))
proof
assume A1: (for z holds (z in Z implies (ex x st (ex y st z = [ x,y ]))));
defpred P[ set ]
 means
(ex y st [ $1,y ] in Z);
consider X such that A2: (x in X iff (x in ( union ( union Z ) ) & P[ x ])) from XBOOLE_0:sch 1;
defpred P[ set ]
 means
(ex x st [ x,$1 ] in Z);
consider Y such that A3: (y in Y iff (y in ( union ( union Z ) ) & P[ y ])) from XBOOLE_0:sch 1;
take X;
take Y;
let z;
assume A4: z in Z;
then consider x,y such that A5: z = [ x,y ] by A1;
x in ( union ( union Z ) ) by A4,A5,ZFMISC_1:134;
then A6: x in X by A2,A4,A5;
y in ( union ( union Z ) ) by A4,A5,ZFMISC_1:134;
then y in Y by A3,A4,A5;
hence thesis by A5,A6,ZFMISC_1:87;
end;
