environ
vocabularies STRUCT_0,XBOOLE_0,RELAT_1,CAT_1,SUBSET_1,TARSKI,FUNCT_1,ZFMISC_1,MCART_1,YELLOW_1,LATTICE3,ORDERS_2,FILTER_1,WAYBEL_1,WAYBEL_0,XXREAL_0,PBOOLE,EQREL_1,CLASSES2,BINOP_1,LATTICES,QC_LANG1,REWRITE1,SETFAM_1,CONLAT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,STRUCT_0,LATTICES,ORDERS_2,YELLOW_1,WAYBEL_1,LATTICE3,SETFAM_1,WAYBEL_0,CKB1,CKB5,CKB8,CKB9,CKB10,CKB15,CKB16,CKB17,CKB18,CKB30,CKB31,CKB32,CKB40,CKB41,CKB42,CKB48;
definitions TARSKI,BINOP_1,CKB1,CKB15,CKB17,CKB18,CKB30,CKB31,CKB32,CKB41,CKB42,CKB48;
theorems TARSKI,RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,LATTICES,MCART_1,LATTICE3,YELLOW_1,ORDERS_2,FILTER_1,VECTSP_8,SETFAM_1,WAYBEL_0,RELSET_1,XBOOLE_0,XBOOLE_1,CKB1,CKB15,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB41,CKB42,CKB47,CKB48;
schemes BINOP_1;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0,LATTICES,LATTICE3,YELLOW_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB11,CKB12,CKB13,CKB14,CKB40,CKB43,CKB44,CKB45,CKB46;
constructors SETFAM_1,BINOP_1,DOMAIN_1,LATTICE3,WAYBEL_1,STRUCT_0,RELSET_1,CKB1,CKB5,CKB15,CKB17,CKB18,CKB30,CKB31,CKB32,CKB40,CKB41,CKB42,CKB48;
requirements SUBSET,BOOLE;
begin
registration
let C being FormalContext;
cluster  concept-like non empty for ConceptStr over C;
existence
proof
set o = the (Object of C);
set A = ( ( ObjectDerivation C ) . { o } );
{ o } c= (the carrier of C)
proof
let x being set;
assume x in { o };
then x = o by TARSKI:def 1;
hence thesis;
end;
then reconsider t = { o } as (Subset of (the carrier of C));
A c= (the carrier' of C)
proof
let x being set;
assume x in A;
then x in { a where a is (Attribute of C): (for o being (Object of C) holds (o in t implies o is-connected-with a)) } by CKB17:def 1;
then (ex x9 being (Attribute of C) st (x9 = x & (for o being (Object of C) holds (o in t implies o is-connected-with x9))));
hence thesis;
end;
then reconsider A as (Subset of (the carrier' of C));
set O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . { o } ) );
O c= (the carrier of C)
proof
let x being set;
assume x in O;
then x in { o9 where o9 is (Object of C): (for a being (Attribute of C) holds (a in ( ( ObjectDerivation C ) . t ) implies o9 is-connected-with a)) } by CKB18:def 1;
then (ex x9 being (Object of C) st (x9 = x & (for a being (Attribute of C) holds (a in ( ( ObjectDerivation C ) . t ) implies x9 is-connected-with a))));
hence thesis;
end;
then reconsider O as (Subset of (the carrier of C));
set M9 = ConceptStr (# O,A #);
(o in { o } & t c= ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . t ) )) by CKB23:1,TARSKI:def 1;
then reconsider M9 as non empty ConceptStr over C by CKB41:def 1;
( ( ObjectDerivation C ) . (the Extent of M9) ) = ( ( ObjectDerivation C ) . t ) by CKB25:1
.= (the Intent of M9);
then M9 is  concept-like by CKB48:def 1;
hence thesis;
end;
end;
