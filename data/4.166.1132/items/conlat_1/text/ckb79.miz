environ
vocabularies STRUCT_0,XBOOLE_0,RELAT_1,CAT_1,SUBSET_1,TARSKI,FUNCT_1,ZFMISC_1,MCART_1,YELLOW_1,LATTICE3,ORDERS_2,FILTER_1,WAYBEL_1,WAYBEL_0,XXREAL_0,PBOOLE,EQREL_1,CLASSES2,BINOP_1,LATTICES,QC_LANG1,REWRITE1,SETFAM_1,CONLAT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,STRUCT_0,LATTICES,ORDERS_2,YELLOW_1,WAYBEL_1,LATTICE3,SETFAM_1,WAYBEL_0,CKB1,CKB5,CKB8,CKB9,CKB10,CKB15,CKB16,CKB17,CKB18,CKB30,CKB31,CKB32,CKB40,CKB41,CKB42,CKB48,CKB50,CKB56,CKB57,CKB60,CKB61,CKB67,CKB68,CKB69,CKB70,CKB74,CKB75,CKB78;
definitions TARSKI,BINOP_1,CKB1,CKB15,CKB17,CKB18,CKB30,CKB31,CKB32,CKB41,CKB42,CKB48,CKB56,CKB57,CKB60,CKB61,CKB67,CKB69,CKB74,CKB78;
theorems TARSKI,RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,LATTICES,MCART_1,LATTICE3,YELLOW_1,ORDERS_2,FILTER_1,VECTSP_8,SETFAM_1,WAYBEL_0,RELSET_1,XBOOLE_0,XBOOLE_1,CKB1,CKB15,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB41,CKB42,CKB47,CKB48,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB69,CKB71,CKB72,CKB73,CKB74,CKB77,CKB78;
schemes BINOP_1;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0,LATTICES,LATTICE3,YELLOW_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB11,CKB12,CKB13,CKB14,CKB40,CKB43,CKB44,CKB45,CKB46,CKB49,CKB51,CKB58,CKB59,CKB76;
constructors SETFAM_1,BINOP_1,DOMAIN_1,LATTICE3,WAYBEL_1,STRUCT_0,RELSET_1,CKB1,CKB5,CKB15,CKB17,CKB18,CKB30,CKB31,CKB32,CKB40,CKB41,CKB42,CKB48,CKB56,CKB57,CKB60,CKB61,CKB67,CKB68,CKB69,CKB74,CKB75,CKB78;
requirements SUBSET,BOOLE;
begin
definition
let C being FormalContext;
func B-join C -> (BinOp of ( B-carrier C ))
means
:Def22: (for CP1,CP2 being  strict (FormalConcept of C) holds (ex O being (Subset of (the carrier of C)) st (ex A being (Subset of (the carrier' of C)) st ((( it . (CP1,CP2) ) = ConceptStr (# O,A #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of CP1) \/ (the Extent of CP2) ) ) )) & A = ( (the Intent of CP1) /\ (the Intent of CP2) )))));
existence
proof
defpred P[ (FormalConcept of C),(FormalConcept of C),set ]
 means
(ex O being (Subset of (the carrier of C)) st (ex A being (Subset of (the carrier' of C)) st (($3 = ConceptStr (# O,A #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of $1) \/ (the Extent of $2) ) ) )) & A = ( (the Intent of $1) /\ (the Intent of $2) ))));
A1: (for CP1 being (Element of ( B-carrier C )) holds (for CP2 being (Element of ( B-carrier C )) holds (ex CP being (Element of ( B-carrier C )) st P[ CP1,CP2,CP ])))
proof
let CP1 being (Element of ( B-carrier C ));
let CP2 being (Element of ( B-carrier C ));
set O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of CP1) \/ (the Extent of CP2) ) ) );
set A = ( (the Intent of CP1) /\ (the Intent of CP2) );
reconsider O9 = ( (the Extent of CP1) \/ (the Extent of CP2) ) as (Subset of (the carrier of C));
set CP = ConceptStr (# O,A #);
A2: ( ( ObjectDerivation C ) . O ) = ( ( ObjectDerivation C ) . O9 ) by CKB25:1
.= ( ( ( ObjectDerivation C ) . (the Extent of CP1) ) /\ ( ( ObjectDerivation C ) . (the Extent of CP2) ) ) by CKB36:1
.= ( (the Intent of CP1) /\ ( ( ObjectDerivation C ) . (the Extent of CP2) ) ) by CKB48:def 1
.= ( (the Intent of CP1) /\ (the Intent of CP2) ) by CKB48:def 1;
then (( ( AttributeDerivation C ) . A ) = O & ConceptStr (# O,A #) is non empty) by CKB47:1,CKB25:1;
then CP in { ConceptStr (# E,I #) where E is (Subset of (the carrier of C)),I is (Subset of (the carrier' of C)): ((ConceptStr (# E,I #) is non empty & ( ( ObjectDerivation C ) . E ) = I) & ( ( AttributeDerivation C ) . I ) = E) } by A2;
hence thesis;
end;
consider f being (Function of [: ( B-carrier C ),( B-carrier C ) :],( B-carrier C )) such that A3: (for CP1 being (Element of ( B-carrier C )) holds (for CP2 being (Element of ( B-carrier C )) holds P[ CP1,CP2,( f . (CP1,CP2) ) ])) from BINOP_1:sch 3(A1);
reconsider f as (BinOp of ( B-carrier C ));
take f;
(for CP1,CP2 being  strict (FormalConcept of C) holds (ex O being (Subset of (the carrier of C)) st (ex A being (Subset of (the carrier' of C)) st ((( f . (CP1,CP2) ) = ConceptStr (# O,A #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of CP1) \/ (the Extent of CP2) ) ) )) & A = ( (the Intent of CP1) /\ (the Intent of CP2) )))))
proof
let CP1 being  strict (FormalConcept of C),CP2 being  strict (FormalConcept of C);
(CP1 is (Element of ( B-carrier C )) & CP2 is (Element of ( B-carrier C ))) by CKB77:1;
hence thesis by A3;
end;
hence thesis;
end;
uniqueness
proof
let F1 being (BinOp of ( B-carrier C )),F2 being (BinOp of ( B-carrier C ));
assume A4: (for CP1,CP2 being  strict (FormalConcept of C) holds (ex O being (Subset of (the carrier of C)) st (ex A being (Subset of (the carrier' of C)) st ((( F1 . (CP1,CP2) ) = ConceptStr (# O,A #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of CP1) \/ (the Extent of CP2) ) ) )) & A = ( (the Intent of CP1) /\ (the Intent of CP2) )))));
assume A5: (for CP1,CP2 being  strict (FormalConcept of C) holds (ex O being (Subset of (the carrier of C)) st (ex A being (Subset of (the carrier' of C)) st ((( F2 . (CP1,CP2) ) = ConceptStr (# O,A #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of CP1) \/ (the Extent of CP2) ) ) )) & A = ( (the Intent of CP1) /\ (the Intent of CP2) )))));
A6: (for X being set holds (X in [: ( B-carrier C ),( B-carrier C ) :] implies ( F1 . X ) = ( F2 . X )))
proof
let X being set;
assume X in [: ( B-carrier C ),( B-carrier C ) :];
then consider A being set,B being set such that A7: A in ( B-carrier C ) and A8: B in ( B-carrier C ) and A9: X = [ A,B ] by ZFMISC_1:def 2;
reconsider B as  strict (FormalConcept of C) by A8,CKB77:1;
reconsider A as  strict (FormalConcept of C) by A7,CKB77:1;
((ex O being (Subset of (the carrier of C)) st (ex At being (Subset of (the carrier' of C)) st ((( F1 . (A,B) ) = ConceptStr (# O,At #) & O = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of A) \/ (the Extent of B) ) ) )) & At = ( (the Intent of A) /\ (the Intent of B) )))) & (ex O9 being (Subset of (the carrier of C)) st (ex At9 being (Subset of (the carrier' of C)) st ((( F2 . (A,B) ) = ConceptStr (# O9,At9 #) & O9 = ( ( AttributeDerivation C ) . ( ( ObjectDerivation C ) . ( (the Extent of A) \/ (the Extent of B) ) ) )) & At9 = ( (the Intent of A) /\ (the Intent of B) ))))) by A4,A5;
hence thesis by A9;
end;
(( dom F1 ) = [: ( B-carrier C ),( B-carrier C ) :] & ( dom F2 ) = [: ( B-carrier C ),( B-carrier C ) :]) by FUNCT_2:def 1;
hence thesis by A6,FUNCT_1:2;
end;
end;
