environ
vocabularies NUMBERS,SUBSET_1,XBOOLE_0,CARD_1,ZFMISC_1,FINSEQ_1,FUNCT_1,CARD_3,RELAT_1,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,INT_1,MCART_1,PARTFUN1,ORDINAL1,ARYTM_3,ARYTM_1,XXREAL_0,FUNCT_2,FUNCT_5,TARSKI,AMI_2,GROUP_9,FINSET_1,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,FINSET_1,CARD_3,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,XXREAL_0,BINOP_1,MCART_1,DOMAIN_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,CAT_2,FINSEQ_1,FINSEQ_4,RECDEF_2,CKB1,CKB2,CKB3,CKB4,CKB6,CKB8;
definitions TARSKI,FUNCOP_1,CARD_1,FINSEQ_1,MCART_1,CKB3,CKB4,CKB8;
theorems ZFMISC_1,FUNCT_2,TARSKI,CAT_2,FUNCOP_1,ENUMSET1,INT_1,CARD_3,FINSEQ_4,MCART_1,FUNCT_4,XBOOLE_0,XBOOLE_1,ORDINAL1,RELAT_1,NUMBERS,NAT_1,DOMAIN_1,FINSEQ_1,FUNCT_7,RECDEF_2,CKB3,CKB4,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,INT_1,FINSEQ_1,CARD_3,RELAT_1,FINSET_1,ORDINAL2,CARD_1,FUNCT_1,CARD_2,RELSET_1,FUNCT_2,CKB5,CKB7,CKB10;
constructors DOMAIN_1,XXREAL_0,NAT_D,FINSEQ_4,CAT_2,CARD_3,ABIAN,SETFAM_1,RELSET_1,FINSEQ_2,RECDEF_2,CKB2,CKB3,CKB4,CKB6,CKB8;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
Lm1:now
let k being (Element of ( SCM-Memory ));
(k in { ( NAT ) } or k in ( SCM-Data-Loc )) by XBOOLE_0:def 3;
hence (k = ( NAT ) or k in ( SCM-Data-Loc )) by TARSKI:def 1;
end;
definition
func SCM-OK -> (Function of ( SCM-Memory ),( { ( INT ) } \/ { ( NAT ) } )) means 
:Def5: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( it . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( it . k ) = ( INT ))));
existence
proof
defpred P[ set,set ]
 means
(($1 = ( NAT ) & $2 = ( NAT )) or ($1 in ( SCM-Data-Loc ) & $2 = ( INT )));
A1:now
let k being (Element of ( SCM-Memory ));
A2: ( { ( INT ) } \/ { ( NAT ) } ) = { ( INT ),( NAT ) } by ENUMSET1:1;
then A3: ( NAT ) in ( { ( INT ) } \/ { ( NAT ) } ) by TARSKI:def 2;
A4: (P[ k,( NAT ) ] or P[ k,( INT ) ]) by Lm1;
( INT ) in ( { ( INT ) } \/ { ( NAT ) } ) by A2,TARSKI:def 2;
hence (ex b being (Element of ( { ( INT ) } \/ { ( NAT ) } )) st P[ k,b ]) by A3,A4;
end;
consider h being (Function of ( SCM-Memory ),( { ( INT ) } \/ { ( NAT ) } )) such that A5: (for a being (Element of ( SCM-Memory )) holds P[ a,( h . a ) ]) from FUNCT_2:sch 3(A1);
take h;
let k being (Element of ( SCM-Memory ));
A6: P[ k,( h . k ) ] by A5;
hence (k = ( NAT ) implies ( h . k ) = ( NAT )) by CKB14:1;
thus (k in ( SCM-Data-Loc ) implies ( h . k ) = ( INT )) by A6,CKB14:1;
thus thesis;
end;
uniqueness
proof
let f being (Function of ( SCM-Memory ),( { ( INT ) } \/ { ( NAT ) } ));
let g being (Function of ( SCM-Memory ),( { ( INT ) } \/ { ( NAT ) } ));
assume that
A7: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( f . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( f . k ) = ( INT ))))
and
A8: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( g . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( g . k ) = ( INT ))));
now
let k being (Element of ( SCM-Memory ));
now
per cases  by Lm1;
suppose A9: k = ( NAT );

hence ( f . k ) = ( NAT ) by A7
.= ( g . k ) by A8,A9;
end;
suppose A10: k in ( SCM-Data-Loc );

hence ( f . k ) = ( INT ) by A7
.= ( g . k ) by A8,A10;
end;
end;
hence ( f . k ) = ( g . k );
end;
hence thesis by FUNCT_2:63;
end;
end;
