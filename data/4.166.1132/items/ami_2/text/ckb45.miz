environ
vocabularies NUMBERS,SUBSET_1,XBOOLE_0,CARD_1,ZFMISC_1,FINSEQ_1,FUNCT_1,CARD_3,RELAT_1,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,INT_1,MCART_1,PARTFUN1,ORDINAL1,ARYTM_3,ARYTM_1,XXREAL_0,FUNCT_2,FUNCT_5,TARSKI,AMI_2,GROUP_9,FINSET_1,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,FINSET_1,CARD_3,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,XXREAL_0,BINOP_1,MCART_1,DOMAIN_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,CAT_2,FINSEQ_1,FINSEQ_4,RECDEF_2,CKB1,CKB2,CKB3,CKB4,CKB6,CKB8,CKB16,CKB22,CKB27,CKB28,CKB32,CKB36,CKB37,CKB39,CKB41,CKB42;
definitions TARSKI,FUNCOP_1,CARD_1,FINSEQ_1,MCART_1,CKB3,CKB4,CKB8,CKB16,CKB27,CKB28,CKB32,CKB36,CKB37,CKB39,CKB41,CKB42;
theorems ZFMISC_1,FUNCT_2,TARSKI,CAT_2,FUNCOP_1,ENUMSET1,INT_1,CARD_3,FINSEQ_4,MCART_1,FUNCT_4,XBOOLE_0,XBOOLE_1,ORDINAL1,RELAT_1,NUMBERS,NAT_1,DOMAIN_1,FINSEQ_1,FUNCT_7,RECDEF_2,CKB3,CKB4,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB19,CKB20,CKB21,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,INT_1,FINSEQ_1,CARD_3,RELAT_1,FINSET_1,ORDINAL2,CARD_1,FUNCT_1,CARD_2,RELSET_1,FUNCT_2,CKB5,CKB7,CKB10,CKB17,CKB18,CKB44;
constructors DOMAIN_1,XXREAL_0,NAT_D,FINSEQ_4,CAT_2,CARD_3,ABIAN,SETFAM_1,RELSET_1,FINSEQ_2,RECDEF_2,CKB2,CKB3,CKB4,CKB6,CKB8,CKB16,CKB27,CKB28,CKB32,CKB36,CKB37,CKB39,CKB41,CKB42;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
reserve x for set;
definition
let x being (Element of ( SCM-Instr ));
let s being SCM-State;
func SCM-Exec-Res (x,s) -> SCM-State equals 
( SCM-Chg (( SCM-Chg (s,( x address_1 ),( s . ( x address_2 ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 1,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) + ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 2,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) - ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 3,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) * ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 4,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) div ( s . ( x address_2 ) ) )) ),( x address_2 ),( ( s . ( x address_1 ) ) mod ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 5,( {} ),<* mk,ml *> ]),( SCM-Chg (s,( x jump_address )) ) if (ex mk being (Element of ( NAT )) st x = [ 6,<* mk *>,( {} ) ]),( SCM-Chg (s,( IFEQ (( s . ( x cond_address ) ),( 0 ),( x cjump_address ),( succ ( IC s ) )) )) ) if (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( SCM-Data-Loc )) st x = [ 7,<* mk *>,<* ml *> ])),( SCM-Chg (s,( IFGT (( s . ( x cond_address ) ),( 0 ),( x cjump_address ),( succ ( IC s ) )) )) ) if (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( SCM-Data-Loc )) st x = [ 8,<* mk *>,<* ml *> ])) otherwise s;
consistency by MCART_1:25;
coherence;
end;
