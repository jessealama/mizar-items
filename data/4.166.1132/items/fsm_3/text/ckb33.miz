environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,AFINSQ_1,NAT_1,REWRITE3,XXREAL_0,ARYTM_3,CARD_1,FINSEQ_1,ORDINAL4,RELAT_1,FUNCT_1,FLANG_1,FSM_1,STRUCT_0,ZFMISC_1,TARSKI,FINSET_1,REWRITE2,PRELAMB,FSM_2,LANG1,REWRITE1,MCART_1,FSM_3;
notations CARD_1,TARSKI,XBOOLE_0,ZFMISC_1,XCMPLX_0,NAT_1,DOMAIN_1,FUNCT_1,RELSET_1,XXREAL_0,FINSET_1,AFINSQ_1,SUBSET_1,REWRITE1,CATALAN2,FLANG_1,STRUCT_0,NUMBERS,MCART_1,FINSEQ_1,REWRITE3,CKB13,CKB18,CKB19,CKB22,CKB26,CKB28,CKB29;
definitions STRUCT_0,CKB13,CKB19,CKB22,CKB26,CKB29;
theorems AFINSQ_1,CARD_1,FLANG_1,FUNCT_1,NAT_1,ORDINAL1,RELAT_1,RELSET_1,REWRITE1,STRUCT_0,SUBSET_1,TARSKI,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ZFMISC_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,MCART_1,REWRITE3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13,CKB16,CKB17,CKB19,CKB22,CKB24,CKB26,CKB27,CKB29;
schemes FINSEQ_1,FRAENKEL,NAT_1,RELSET_1;
registrations CARD_1,NAT_1,XREAL_0,XBOOLE_0,MEMBERED,XXREAL_0,STRUCT_0,SUBSET_1,REWRITE1,AFINSQ_1,RELAT_1,FINSET_1,FINSEQ_1,REWRITE3,CATALAN2,FUNCT_1,RELSET_1,CKB8,CKB14,CKB15,CKB18,CKB20,CKB21,CKB23,CKB25,CKB28,CKB30,CKB31,CKB32;
constructors XXREAL_0,NAT_1,MEMBERED,REWRITE1,FLANG_1,XREAL_0,REWRITE3,RELSET_1,CKB13,CKB18,CKB19,CKB22,CKB26,CKB28,CKB29;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve E for non  empty set;
reserve F for (Subset of ( E ^omega ));
reserve A for non  empty automaton over F;
definition
let E;
let F;
let A;
func _bool A ->  strict automaton over ( Lex E ) means 
:Def6: (( the semiautomaton of it ) = ( _bool ( the semiautomaton of A ) ) & (the FinalS of it) = { Q where Q is (Element of it): Q meets (the FinalS of A) });
existence
proof
reconsider SA = ( the semiautomaton of A ) as non  empty semiautomaton over F;
set cA = (the carrier of ( _bool SA ));
reconsider tA = (the Tran of ( _bool SA )) as (Relation of [: cA,( Lex E ) :],cA);
set iA = (the InitS of ( _bool SA ));
{ Q where Q is (Element of ( _bool SA )): Q meets (the FinalS of A) } is (Subset of cA)
proof
defpred P[ set ]
 means
$1 meets (the FinalS of A);
{ Q where Q is (Element of ( _bool SA )): P[ Q ] } c= (the carrier of ( _bool SA )) from FRAENKEL:sch 10;
hence thesis;
end;
then reconsider fA = { Q where Q is (Element of ( _bool SA )): Q meets (the FinalS of A) } as (Subset of cA);
set bA = automaton (# cA,tA,iA,fA #);
reconsider bA as  strict non  empty  deterministic automaton over ( Lex E ) by CKB29:def 1;
take bA;
thus thesis;
end;
uniqueness;
end;
