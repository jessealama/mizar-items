environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,NUMBERS,BINOP_1,FUNCT_1,BINOP_2,RELAT_1,ZFMISC_1,CFUNCT_1,FUNCOP_1,CARD_1,COMPLEX1,ARYTM_3,RLVECT_1,CLVECT_1,ARYTM_1,ALGSTR_0,SUPINF_2,CLOPBAN1,STRUCT_0,GROUP_1,MESFUNC1,FUNCSDOM,VECTSP_1,CFUNCDOM;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,DOMAIN_1,FUNCOP_1,BINOP_2,STRUCT_0,ALGSTR_0,RLVECT_1,COMPLEX1,CFUNCT_1,GROUP_1,VECTSP_1,FUNCSDOM,CLVECT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB30,CKB34,CKB39,CKB41,CKB45;
definitions RLVECT_1,STRUCT_0,GROUP_1,CLVECT_1,BINOP_1,ALGSTR_0,VECTSP_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB30,CKB34,CKB41,CKB45;
theorems CLVECT_1,FUNCT_2,BINOP_1,FUNCOP_1,RLVECT_1,VECTSP_1,TARSKI,COMPLEX1,BINOP_2,GROUP_1,ALGSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB37,CKB38,CKB41,CKB44,CKB45;
schemes BINOP_1,FUNCT_2;
registrations XBOOLE_0,RELSET_1,NUMBERS,VECTSP_1,CLVECT_1,ALGSTR_0,CKB31,CKB35,CKB36,CKB39,CKB40,CKB42,CKB43;
constructors DOMAIN_1,BINOP_2,COMPLEX1,FUNCSDOM,CLVECT_1,VECTSP_1,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB30,CKB34,CKB39,CKB41,CKB45;
requirements SUBSET,BOOLE,ARITHM;
begin
reserve z for set;
reserve A for non  empty set;
reserve a for Complex;
reserve b for Complex;
registration
let A;
cluster ( CAlgebra A ) ->  strict  Abelian  add-associative  right_zeroed  right_complementable  commutative  associative  right_unital  right-distributive  vector-distributive  scalar-distributive  scalar-associative  vector-associative;
coherence
proof
set C = ( CAlgebra A );
thus C is  strict;
thus C is  Abelian
proof
let x being (Element of C);
let y being (Element of C);
thus ( x + y ) = ( y + x ) by CKB11:1;
end;

thus C is  add-associative
proof
let x being (Element of C);
let y being (Element of C);
let z being (Element of C);
thus ( ( x + y ) + z ) = ( x + ( y + z ) ) by CKB12:1;
end;

thus C is  right_zeroed
proof
let x being (Element of C);
reconsider f = x as (Element of ( Funcs (A,( COMPLEX )) ));
thus ( x + ( 0. C ) ) = ( ( ComplexFuncAdd A ) . (( ComplexFuncZero A ),f) ) by CKB11:1
.= x by CKB16:1;
end;

thus C is  right_complementable
proof
let x being (Element of C);
reconsider f = x as (Element of ( Funcs (A,( COMPLEX )) ));
reconsider t = ( ( ComplexFuncExtMult A ) . [ ( - ( 1r ) ),f ] ) as (Element of C);
take t;
thus thesis by CKB17:1;
end;

thus C is  commutative
proof
let x being (Element of C);
let y being (Element of C);
thus ( x * y ) = ( y * x ) by CKB13:1;
end;

thus C is  associative
proof
let x being (Element of C);
let y being (Element of C);
let z being (Element of C);
thus ( ( x * y ) * z ) = ( x * ( y * z ) ) by CKB14:1;
end;

thus C is  right_unital
proof
let x being (Element of C);
reconsider f = x as (Element of ( Funcs (A,( COMPLEX )) ));
thus ( x * ( 1. C ) ) = ( ( ComplexFuncMult A ) . (( ComplexFuncUnit A ),f) ) by CKB13:1
.= x by CKB15:1;
end;

thus C is  right-distributive
proof
let x being (Element of C);
let y being (Element of C);
let z being (Element of C);
thus ( x * ( y + z ) ) = ( ( x * y ) + ( x * z ) ) by CKB22:1;
end;

thus C is  vector-distributive
proof
let a;
let x being (Element of C);
let y being (Element of C);
thus ( a * ( x + y ) ) = ( ( a * x ) + ( a * y ) ) by CKB21:1;
end;

thus C is  scalar-distributive
proof
let a;
let b;
let x being (Element of C);
thus ( ( a + b ) * x ) = ( ( a * x ) + ( b * x ) ) by CKB20:1;
end;

thus C is  scalar-associative
proof
let a;
let b;
let x being (Element of C);
thus ( a * ( b * x ) ) = ( ( a * b ) * x ) by CKB19:1;
end;

let x being (Element of C);
let y being (Element of C);
let a;
thus thesis by CKB23:1;
end;
end;
