environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,REAL_1,SEQ_1,PROB_1,RPR_1,CARD_1,ARYTM_3,RELAT_1,SEQ_2,FUNCT_1,ARYTM_1,ORDINAL2,XREAL_0,ORDINAL1,XXREAL_0,COMPLEX1,EQREL_1,TARSKI,ZFMISC_1,NAT_1,CARD_3,VALUED_1,PROB_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,XREAL_0,COMPLEX1,RELAT_1,REAL_1,FUNCT_1,FUNCT_2,VALUED_1,SEQ_1,SEQ_2,PROB_1,NAT_1,XXREAL_0,CKB3,CKB4,CKB13;
definitions PROB_1,SUBSET_1,CKB4,CKB13;
theorems FUNCT_1,FUNCT_2,SEQ_2,SUBSET_1,PROB_1,NAT_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_0,XCMPLX_1,COMPLEX1,XREAL_1,ORDINAL1,VALUED_1,VALUED_0,RELAT_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13;
schemes FUNCT_1,FUNCT_2,NAT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,VALUED_0,PROB_1,CKB8;
constructors XXREAL_0,REAL_1,NAT_1,COMPLEX1,VALUED_1,SEQ_1,SEQ_2,PROB_1,XXREAL_1,RELSET_1,CKB3,CKB4,CKB13;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for set;
reserve m for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve x for set;
reserve y for set;
reserve Sigma for (SigmaField of Omega);
reserve ASeq for (SetSequence of Sigma);
definition
let Omega;
let Sigma;
let ASeq;
redefine attr ASeq is  disjoint_valued
means
(for m holds (for n holds (m <> n implies ( ASeq . m ) misses ( ASeq . n ))));
compatibility
proof
thus (ASeq is  disjoint_valued implies (for m holds (for n holds (m <> n implies ( ASeq . m ) misses ( ASeq . n ))))) by CKB13:def 1;
A1: ( dom ASeq ) = ( NAT ) by FUNCT_2:def 1;
assume A2: (for m holds (for n holds (m <> n implies ( ASeq . m ) misses ( ASeq . n ))));
let x;
let y;
assume A3: x <> y;
per cases ;
suppose (x in ( dom ASeq ) & y in ( dom ASeq ));

hence thesis by A1,A2,A3;
end;
suppose (not (x in ( dom ASeq ) & y in ( dom ASeq )));

then (( ASeq . x ) = ( {} ) or ( ASeq . y ) = ( {} )) by FUNCT_1:def 2;
hence thesis by XBOOLE_1:65;
end;
end;
end;
