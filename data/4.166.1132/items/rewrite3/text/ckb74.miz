environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,AFINSQ_1,NAT_1,FINSEQ_1,RELAT_1,ORDINAL4,FUNCT_1,ARYTM_3,XXREAL_0,CARD_1,ARYTM_1,REWRITE1,STRUCT_0,FSM_1,ZFMISC_1,FINSET_1,REWRITE2,PRELAMB,TARSKI,MCART_1,REWRITE3;
notations TARSKI,XBOOLE_0,ZFMISC_1,XCMPLX_0,NAT_1,FUNCT_1,RELSET_1,XXREAL_0,FINSET_1,RELAT_1,AFINSQ_1,SUBSET_1,REWRITE1,CATALAN2,FLANG_1,STRUCT_0,NUMBERS,MCART_1,FINSEQ_1,CKB14,CKB15,CKB18,CKB24,CKB36,CKB53;
definitions TARSKI,STRUCT_0,CKB15,CKB18,CKB24,CKB36,CKB53;
theorems AFINSQ_1,CALCUL_1,FLANG_1,FLANG_2,FUNCT_1,NAT_1,RELAT_1,RELSET_1,REWRITE1,STRUCT_0,TARSKI,XREAL_1,XXREAL_0,ZFMISC_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,MCART_1,REWRITE2,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB15,CKB16,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73;
schemes FINSEQ_1,NAT_1,RELSET_1;
registrations CARD_1,RELSET_1,NAT_1,XREAL_0,XBOOLE_0,MEMBERED,XXREAL_0,STRUCT_0,SUBSET_1,REWRITE1,AFINSQ_1,RELAT_1,FUNCT_1,FINSEQ_1,CATALAN2,CKB14,CKB17;
constructors XXREAL_0,NAT_1,FSM_1,MEMBERED,REWRITE1,FLANG_1,XREAL_0,RELSET_1,CKB14,CKB15,CKB18,CKB24,CKB36,CKB53;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve E for non  empty set;
reserve F for (Subset of ( E ^omega ));
reserve k for Nat;
reserve TS for non  empty transition-system over F;
theorem
Th67: (TS is  deterministic implies (for P,Q being (RedSequence of ( ==>.-relation TS )) holds (( P . 1 ) = ( Q . 1 ) implies (for k holds ((k in ( dom P ) & k in ( dom Q )) implies ( P . k ) = ( Q . k ))))))
proof
assume A1: TS is  deterministic;
let P being (RedSequence of ( ==>.-relation TS ));
let Q being (RedSequence of ( ==>.-relation TS ));
assume that
A2: ( P . 1 ) = ( Q . 1 );
defpred P[ Nat ]
 means
(($1 in ( dom P ) & $1 in ( dom Q )) implies ( P . $1 ) = ( Q . $1 ));
A3:now
let k;
assume A4: P[ k ];
now
assume A5: (( k + 1 ) in ( dom P ) & ( k + 1 ) in ( dom Q ));
per cases ;
suppose A6: (k in ( dom P ) & k in ( dom Q ));

then ([ ( P . k ),( P . ( k + 1 ) ) ] in ( ==>.-relation TS ) & [ ( Q . k ),( Q . ( k + 1 ) ) ] in ( ==>.-relation TS )) by A5,REWRITE1:def 2;
hence ( P . ( k + 1 ) ) = ( Q . ( k + 1 ) ) by A1,A4,A6,CKB50:1;
end;
suppose ((not k in ( dom P )) or (not k in ( dom Q )));

then k = ( 0 ) by A5,REWRITE2:1;
hence ( P . ( k + 1 ) ) = ( Q . ( k + 1 ) ) by A2;
end;
end;
hence P[ ( k + 1 ) ];
end;
A7: P[ ( 0 ) ] by FINSEQ_3:25;
(for k holds P[ k ]) from NAT_1:sch 2(A7,A3);
hence thesis;
end;
