environ
vocabularies INTEGRA1,INTEGRA2,FINSEQ_1,SEQ_1,SEQ_2,ORDINAL2,ARYTM_1,RELAT_1,FUNCT_1,PARTFUN1,XBOOLE_0,FUNCT_3,INTEGR15,REALSET1,XCMPLX_0,COMPLEX1,COMSEQ_1,SETWISEO,SUBSET_1,NUMBERS,ORDINAL1,CARD_1,ORDINAL4,NAT_1,TARSKI,CARD_3,MEASURE7,ARYTM_3,XREAL_0,BINOP_2,XXREAL_0,XXREAL_2,INTEGRA5,VALUED_1,REAL_1,XXREAL_1,FUNCT_2,MEASURE5;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,NAT_1,RELAT_1,FUNCT_1,FUNCT_2,REAL_1,RCOMP_1,VALUED_1,RELSET_1,PARTFUN1,SEQ_1,SEQ_2,FINSEQ_1,FINSEQ_2,BINOP_2,BINOP_1,SETWOP_2,RVSUM_1,XXREAL_0,MEASURE5,INTEGRA1,INTEGRA2,INTEGRA3,INTEGRA5,INTEGR15,MESFUN6C,COMSEQ_1,COMSEQ_2,COMSEQ_3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9;
definitions XBOOLE_0,INTEGRA5,INTEGR15,FINSEQ_1,COMPLEX1,RVSUM_1,CKB6,CKB7,CKB8;
theorems XBOOLE_0,XBOOLE_1,XCMPLX_0,XREAL_0,INTEGRA1,COMSEQ_3,RFUNCT_1,COMPLEX1,RELSET_1,BINOP_2,FINSOP_1,NAT_1,XXREAL_0,RELAT_1,ORDINAL1,XREAL_1,SEQ_2,FINSEQ_1,RVSUM_1,FUNCT_1,FUNCT_2,INTEGRA5,FINSEQ_3,INTEGRA6,INTEGR15,VALUED_1,MESFUN6C,CKB1,CKB6,CKB7,CKB8;
schemes FUNCT_2,FINSEQ_1,NAT_1;
registrations NUMBERS,XREAL_0,INTEGRA1,FUNCT_2,BINOP_2,MEMBERED,ORDINAL1,VALUED_0,RELSET_1,FINSEQ_1,MEASURE5,CKB2,CKB3;
constructors REAL_1,MONOID_0,MEASURE6,BINOP_2,SEQ_1,INTEGRA5,RELSET_1,INTEGR15,FINSOP_1,SETWISEO,COMSEQ_2,COMSEQ_3,MESFUN6C,SQUARE_1,SEQ_2,INTEGRA3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
definition
let A being non  empty  closed_interval (Subset of ( REAL ));
let f being (Function of A,( COMPLEX ));
let T being (DivSequence of A);
let S being (middle_volume_Sequence of f,T);
func middle_sum (f,S) -> Complex_Sequence means 
:Def6: (for i being (Element of ( NAT )) holds ( it . i ) = ( middle_sum (f,( S . i )) ));
existence
proof
deffunc H1((Element of ( NAT ))) = ( middle_sum (f,( S . $1 )) );
thus (ex IT being Complex_Sequence st (for i being (Element of ( NAT )) holds ( IT . i ) = H1(i))) from FUNCT_2:sch 4;
end;
uniqueness
proof
let F1 being Complex_Sequence;
let F2 being Complex_Sequence;
assume that
A1: (for i being (Element of ( NAT )) holds ( F1 . i ) = ( middle_sum (f,( S . i )) ))
and
A2: (for i being (Element of ( NAT )) holds ( F2 . i ) = ( middle_sum (f,( S . i )) ));
(for i being (Element of ( NAT )) holds ( F1 . i ) = ( F2 . i ))
proof
let i being (Element of ( NAT ));
( F1 . i ) = ( middle_sum (f,( S . i )) ) by A1
.= ( F2 . i ) by A2;
hence ( F1 . i ) = ( F2 . i );
end;
hence F1 = F2 by FUNCT_2:63;
end;
end;
