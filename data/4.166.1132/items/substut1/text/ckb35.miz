environ
vocabularies NUMBERS,SUBSET_1,QC_LANG1,CQC_LANG,FINSEQ_1,PARTFUN1,XBOOLE_0,FUNCT_1,RELAT_1,XXREAL_0,NAT_1,TARSKI,FINSET_1,ZFMISC_1,ZF_LANG,CLASSES2,CARD_1,BVFUNC_2,ORDINAL4,REALSET1,XBOOLEAN,MARGREL1,MCART_1,ARYTM_3,SUBSTUT1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,NUMBERS,FINSEQ_1,NAT_1,QC_LANG1,QC_LANG3,PARTFUN1,SEQ_4,CQC_LANG,FINSET_1,RELSET_1,FUNCT_2,DOMAIN_1,MCART_1,XXREAL_0,CKB1,CKB3,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30;
definitions TARSKI,FUNCT_1,QC_LANG1,QC_LANG3,CKB1,CKB5,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30;
theorems TARSKI,FINSEQ_1,FUNCT_1,MCART_1,CQC_SIM1,XBOOLE_0,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,XBOOLE_1,CARD_2,CARD_3,FUNCT_2,PARTFUN1,RELSET_1,NAT_1,QC_LANG2,FINSEQ_3,CARD_1,XXREAL_0,ORDINAL1,CKB1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34;
schemes FUNCT_1,FUNCT_2,QC_LANG1,QC_LANG3,NAT_1,XBOOLE_0,FRAENKEL,FINSEQ_1,CLASSES1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,PARTFUN1,FINSET_1,MEMBERED,FINSEQ_1,RFINSEQ,QC_LANG1,CQC_LANG,XXREAL_0,CARD_1,CKB2,CKB4,CKB11,CKB21,CKB31;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,SEQ_4,QC_LANG3,CQC_SIM1,RELSET_1,CKB1,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30;
requirements REAL,NUMERALS,SUBSET,BOOLE;
begin
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve ll for (CQC-variable_list of k);
reserve p for QC-formula;
reserve e for (Element of ( vSUB ));
definition
func QC-Sub-WFF -> non  empty set means 
:Def17: (it is  QC-Sub-closed & (for D being non  empty set holds (D is  QC-Sub-closed implies it c= D)));
existence
proof
set e = the (Element of ( vSUB ));
defpred P[ set ]
 means
(for D being non  empty set holds (D is  QC-Sub-closed implies $1 in D));
consider D0 being set such that A1: (for x being set holds (x in D0 iff (x in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] & P[ x ]))) from XBOOLE_0:sch 1;
([ <* [ ( 0 ),( 0 ) ] *>,e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] & (for D being non  empty set holds (D is  QC-Sub-closed implies [ <* [ ( 0 ),( 0 ) ] *>,e ] in D))) by CKB30:def 1,CKB33:1;
then reconsider D0 as non  empty set by A1;
take D0;
D0 c= [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :]
proof
let x being set;
thus thesis by A1;
end;
hence D0 is (Subset of [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :]);
thus (for k being (Element of ( NAT )) holds (for p being (QC-pred_symbol of k) holds (for ll being (QC-variable_list of k) holds (for e being (Element of ( vSUB )) holds [ ( <* p *> ^ ll ),e ] in D0))))
proof
let k being (Element of ( NAT ));
let p being (QC-pred_symbol of k);
let ll being (QC-variable_list of k);
let e being (Element of ( vSUB ));
([ ( <* p *> ^ ll ),e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] & (for D being non  empty set holds (D is  QC-Sub-closed implies [ ( <* p *> ^ ll ),e ] in D))) by CKB30:def 1,CKB34:1;
hence thesis by A1;
end;

thus (for e holds [ <* [ ( 0 ),( 0 ) ] *>,e ] in D0)
proof
let e;
([ <* [ ( 0 ),( 0 ) ] *>,e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] & (for D being non  empty set holds (D is  QC-Sub-closed implies [ <* [ ( 0 ),( 0 ) ] *>,e ] in D))) by CKB30:def 1,CKB33:1;
hence thesis by A1;
end;

thus (for p being (FinSequence of [: ( NAT ),( NAT ) :]) holds (for e being (Element of ( vSUB )) holds ([ p,e ] in D0 implies [ ( <* [ 1,( 0 ) ] *> ^ p ),e ] in D0)))
proof
let p being (FinSequence of [: ( NAT ),( NAT ) :]);
let e being (Element of ( vSUB ));
assume A2: [ p,e ] in D0;
A3: (for D being non  empty set holds (D is  QC-Sub-closed implies [ ( <* [ 1,( 0 ) ] *> ^ p ),e ] in D))
proof
let D being non  empty set;
assume A4: D is  QC-Sub-closed;
then [ p,e ] in D by A1,A2;
hence thesis by A4,CKB30:def 1;
end;
( <* [ 1,( 0 ) ] *> ^ p ) in ( [: ( NAT ),( NAT ) :] * ) by FINSEQ_1:def 11;
then [ ( <* [ 1,( 0 ) ] *> ^ p ),e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] by ZFMISC_1:def 2;
hence thesis by A1,A3;
end;

thus (for p,q being (FinSequence of [: ( NAT ),( NAT ) :]) holds (for e being (Element of ( vSUB )) holds (([ p,e ] in D0 & [ q,e ] in D0) implies [ ( ( <* [ 2,( 0 ) ] *> ^ p ) ^ q ),e ] in D0)))
proof
let p being (FinSequence of [: ( NAT ),( NAT ) :]);
let q being (FinSequence of [: ( NAT ),( NAT ) :]);
let e being (Element of ( vSUB ));
assume that
A5: ([ p,e ] in D0 & [ q,e ] in D0);
A6: (for D being non  empty set holds (D is  QC-Sub-closed implies [ ( ( <* [ 2,( 0 ) ] *> ^ p ) ^ q ),e ] in D))
proof
let D being non  empty set;
assume A7: D is  QC-Sub-closed;
then ([ p,e ] in D & [ q,e ] in D) by A1,A5;
hence thesis by A7,CKB30:def 1;
end;
( ( <* [ 2,( 0 ) ] *> ^ p ) ^ q ) in ( [: ( NAT ),( NAT ) :] * ) by FINSEQ_1:def 11;
then [ ( ( <* [ 2,( 0 ) ] *> ^ p ) ^ q ),e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] by ZFMISC_1:def 2;
hence thesis by A1,A6;
end;

thus (for x being bound_QC-variable holds (for p being (FinSequence of [: ( NAT ),( NAT ) :]) holds (for e being (Element of ( vSUB )) holds ([ p,( ( QSub ) . [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] ) ] in D0 implies [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] in D0))))
proof
let x being bound_QC-variable;
let p being (FinSequence of [: ( NAT ),( NAT ) :]);
let e being (Element of ( vSUB ));
assume A8: [ p,( ( QSub ) . [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] ) ] in D0;
A9: (for D being non  empty set holds (D is  QC-Sub-closed implies [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] in D))
proof
let D being non  empty set;
assume A10: D is  QC-Sub-closed;
then [ p,( ( QSub ) . [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] ) ] in D by A1,A8;
hence thesis by A10,CKB30:def 1;
end;
( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ) is (FinSequence of [: ( NAT ),( NAT ) :]) by CKB32:1;
then ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ) in ( [: ( NAT ),( NAT ) :] * ) by FINSEQ_1:def 11;
then [ ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ),e ] in [: ( [: ( NAT ),( NAT ) :] * ),( vSUB ) :] by ZFMISC_1:def 2;
hence thesis by A1,A9;
end;

let D being non  empty set;
assume that
A11: D is  QC-Sub-closed;
let x being set;
assume x in D0;
hence thesis by A1,A11;
end;
uniqueness
proof
let D1 being non  empty set;
let D2 being non  empty set;
assume (((D1 is  QC-Sub-closed & (for D being non  empty set holds (D is  QC-Sub-closed implies D1 c= D))) & D2 is  QC-Sub-closed) & (for D being non  empty set holds (D is  QC-Sub-closed implies D2 c= D)));
then (D1 c= D2 & D2 c= D1);
hence thesis by XBOOLE_0:def 10;
end;
end;
