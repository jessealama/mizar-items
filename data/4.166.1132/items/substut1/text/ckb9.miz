environ
vocabularies NUMBERS,SUBSET_1,QC_LANG1,CQC_LANG,FINSEQ_1,PARTFUN1,XBOOLE_0,FUNCT_1,RELAT_1,XXREAL_0,NAT_1,TARSKI,FINSET_1,ZFMISC_1,ZF_LANG,CLASSES2,CARD_1,BVFUNC_2,ORDINAL4,REALSET1,XBOOLEAN,MARGREL1,MCART_1,ARYTM_3,SUBSTUT1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,NUMBERS,FINSEQ_1,NAT_1,QC_LANG1,QC_LANG3,PARTFUN1,SEQ_4,CQC_LANG,FINSET_1,RELSET_1,FUNCT_2,DOMAIN_1,MCART_1,XXREAL_0,CKB1,CKB3,CKB5,CKB7,CKB8;
definitions TARSKI,FUNCT_1,QC_LANG1,QC_LANG3,CKB1,CKB5,CKB7,CKB8;
theorems TARSKI,FINSEQ_1,FUNCT_1,MCART_1,CQC_SIM1,XBOOLE_0,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,XBOOLE_1,CARD_2,CARD_3,FUNCT_2,PARTFUN1,RELSET_1,NAT_1,QC_LANG2,FINSEQ_3,CARD_1,XXREAL_0,ORDINAL1,CKB1,CKB5,CKB6,CKB7,CKB8;
schemes FUNCT_1,FUNCT_2,QC_LANG1,QC_LANG3,NAT_1,XBOOLE_0,FRAENKEL,FINSEQ_1,CLASSES1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,PARTFUN1,FINSET_1,MEMBERED,FINSEQ_1,RFINSEQ,QC_LANG1,CQC_LANG,XXREAL_0,CARD_1,CKB2,CKB4;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,SEQ_4,QC_LANG3,CQC_SIM1,RELSET_1,CKB1,CKB5,CKB7,CKB8;
requirements REAL,NUMERALS,SUBSET,BOOLE;
begin
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve y for bound_QC-variable;
reserve Sub for CQC_Substitution;
definition
let l being (FinSequence of ( bound_QC-variables ));
let Sub;
func CQC_Subst (l,Sub) -> (FinSequence of ( bound_QC-variables )) equals 
( CQC_Subst (( @ l ),Sub) );
coherence
proof
( len ( CQC_Subst (( @ l ),Sub) ) ) = ( len ( @ l ) ) by CKB7:def 1;
then A1: ( dom ( CQC_Subst (( @ l ),Sub) ) ) = ( Seg ( len ( @ l ) ) ) by FINSEQ_1:def 3;
A2: (for k holds (k in ( Seg ( len ( @ l ) ) ) implies ((( ( @ l ) . k ) in ( dom Sub ) implies ( ( CQC_Subst (( @ l ),Sub) ) . k ) = ( Sub . ( ( @ l ) . k ) )) & ((not ( ( @ l ) . k ) in ( dom Sub )) implies ( ( CQC_Subst (( @ l ),Sub) ) . k ) = ( ( @ l ) . k )))))
proof
let k;
assume k in ( Seg ( len ( @ l ) ) );
then (1 <= k & k <= ( len ( @ l ) )) by FINSEQ_1:1;
hence thesis by CKB7:def 1;
end;
( rng ( CQC_Subst (( @ l ),Sub) ) ) c= ( bound_QC-variables )
proof
let y being set;
assume y in ( rng ( CQC_Subst (( @ l ),Sub) ) );
then consider x being set such that A3: x in ( dom ( CQC_Subst (( @ l ),Sub) ) ) and A4: ( ( CQC_Subst (( @ l ),Sub) ) . x ) = y by FUNCT_1:def 3;
reconsider x as (Element of ( NAT )) by A3;
now
per cases ;
case A5: ( ( @ l ) . x ) in ( dom Sub );
then ( ( CQC_Subst (( @ l ),Sub) ) . x ) = ( Sub . ( ( @ l ) . x ) ) by A1,A2,A3;
hence ( ( CQC_Subst (( @ l ),Sub) ) . x ) in ( bound_QC-variables ) by A5,CKB6:1;
end;
case A6: (not ( ( @ l ) . x ) in ( dom Sub ));
A7: ( rng l ) c= ( bound_QC-variables );
x in ( dom ( @ l ) ) by A1,A3,FINSEQ_1:def 3;
then A8: ( ( @ l ) . x ) in ( rng ( @ l ) ) by FUNCT_1:3;
( ( CQC_Subst (( @ l ),Sub) ) . x ) = ( ( @ l ) . x ) by A1,A2,A3,A6;
hence ( ( CQC_Subst (( @ l ),Sub) ) . x ) in ( bound_QC-variables ) by A8,A7;
end;
end;
hence thesis by A4;
end;
hence thesis by FINSEQ_1:def 4;
end;
end;
