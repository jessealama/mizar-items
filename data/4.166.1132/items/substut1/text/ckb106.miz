environ
vocabularies NUMBERS,SUBSET_1,QC_LANG1,CQC_LANG,FINSEQ_1,PARTFUN1,XBOOLE_0,FUNCT_1,RELAT_1,XXREAL_0,NAT_1,TARSKI,FINSET_1,ZFMISC_1,ZF_LANG,CLASSES2,CARD_1,BVFUNC_2,ORDINAL4,REALSET1,XBOOLEAN,MARGREL1,MCART_1,ARYTM_3,SUBSTUT1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,NUMBERS,FINSEQ_1,NAT_1,QC_LANG1,QC_LANG3,PARTFUN1,SEQ_4,CQC_LANG,FINSET_1,RELSET_1,FUNCT_2,DOMAIN_1,MCART_1,XXREAL_0,CKB1,CKB3,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB41,CKB42,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB85,CKB86,CKB87,CKB88,CKB89,CKB91,CKB97;
definitions TARSKI,FUNCT_1,QC_LANG1,QC_LANG3,CKB1,CKB5,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB44,CKB45,CKB48,CKB49,CKB50,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB85,CKB88,CKB89,CKB91,CKB97;
theorems TARSKI,FINSEQ_1,FUNCT_1,MCART_1,CQC_SIM1,XBOOLE_0,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,XBOOLE_1,CARD_2,CARD_3,FUNCT_2,PARTFUN1,RELSET_1,NAT_1,QC_LANG2,FINSEQ_3,CARD_1,XXREAL_0,ORDINAL1,CKB1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB43,CKB44,CKB45,CKB48,CKB49,CKB50,CKB53,CKB54,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB85,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105;
schemes FUNCT_1,FUNCT_2,QC_LANG1,QC_LANG3,NAT_1,XBOOLE_0,FRAENKEL,FINSEQ_1,CLASSES1,CKB52,CKB76,CKB83,CKB84;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,PARTFUN1,FINSET_1,MEMBERED,FINSEQ_1,RFINSEQ,QC_LANG1,CQC_LANG,XXREAL_0,CARD_1,CKB2,CKB4,CKB11,CKB21,CKB31,CKB37,CKB55,CKB66,CKB98;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,SEQ_4,QC_LANG3,CQC_SIM1,RELSET_1,CKB1,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB41,CKB42,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB85,CKB86,CKB87,CKB88,CKB89,CKB91,CKB97;
requirements REAL,NUMERALS,SUBSET,BOOLE;
begin
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve P for (QC-pred_symbol of k);
reserve ll for (CQC-variable_list of k);
reserve e for (Element of ( vSUB ));
reserve S9 for (Element of ( QC-Sub-WFF ));
reserve S1 for (Element of ( QC-Sub-WFF ));
reserve S2 for (Element of ( QC-Sub-WFF ));
reserve B for (Element of [: ( QC-Sub-WFF ),( bound_QC-variables ) :]);
reserve SQ for (second_Q_comp of B);
reserve S for (Element of ( CQC-Sub-WFF ));
scheme SubCQCInd { Pro[set] } : (for S holds Pro[ S ])
provided
A1: (for S,S9 being (Element of ( CQC-Sub-WFF )) holds (for x being bound_QC-variable holds (for SQ being (second_Q_comp of [ S,x ]) holds (for k being (Element of ( NAT )) holds (for ll being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds (for e being (Element of ( vSUB )) holds ((((Pro[ ( Sub_P (P,ll,e) ) ] & (S is  Sub_VERUM implies Pro[ S ])) & (Pro[ S ] implies Pro[ ( Sub_not S ) ])) & (((( S `2 ) = ( S9 `2 ) & Pro[ S ]) & Pro[ S9 ]) implies Pro[ ( Sub_& (S,S9) ) ])) & (([ S,x ] is  quantifiable & Pro[ S ]) implies Pro[ ( Sub_All ([ S,x ],SQ) ) ])))))))))
proof
defpred Pro1[ (Element of ( QC-Sub-WFF )) ]
 means
($1 is (Element of ( CQC-Sub-WFF )) implies Pro[ $1 ]);
A2: (for S being (Element of ( QC-Sub-WFF )) holds (Pro1[ S ] implies Pro1[ ( Sub_not S ) ]))
proof
let S being (Element of ( QC-Sub-WFF ));
assume A3: Pro1[ S ];
assume ( Sub_not S ) is (Element of ( CQC-Sub-WFF ));
then ( Sub_not S ) in ( CQC-Sub-WFF );
then consider S9 being (Element of ( QC-Sub-WFF )) such that A4: ( Sub_not S ) = S9 and A5: ( S9 `1 ) is (Element of ( CQC-WFF ));
( S9 `1 ) = ( 'not' ( S `1 ) ) by A4,MCART_1:7;
then ( S `1 ) is (Element of ( CQC-WFF )) by A5,CQC_LANG:8;
then S in ( CQC-Sub-WFF );
hence thesis by A1,A3;
end;
A6: (for k being (Element of ( NAT )) holds (for P being (QC-pred_symbol of k) holds (for ll being (QC-variable_list of k) holds (for e being (Element of ( vSUB )) holds Pro1[ ( Sub_P (P,ll,e) ) ]))))
proof
let k being (Element of ( NAT ));
let P being (QC-pred_symbol of k);
let ll being (QC-variable_list of k);
let e being (Element of ( vSUB ));
assume ( Sub_P (P,ll,e) ) is (Element of ( CQC-Sub-WFF ));
then ( Sub_P (P,ll,e) ) in ( CQC-Sub-WFF );
then A7: (ex S1 being (Element of ( QC-Sub-WFF )) st (( Sub_P (P,ll,e) ) = S1 & ( S1 `1 ) is (Element of ( CQC-WFF ))));
( Sub_P (P,ll,e) ) = [ ( P ! ll ),e ] by CKB39:1;
then A8: ( P ! ll ) is (Element of ( CQC-WFF )) by A7,MCART_1:7;
then A9: { ( ll . j ): ((1 <= j & j <= ( len ll )) & ( ll . j ) in ( fixed_QC-variables )) } = ( {} ) by CQC_LANG:7;
{ ( ll . i ): ((1 <= i & i <= ( len ll )) & ( ll . i ) in ( free_QC-variables )) } = ( {} ) by A8,CQC_LANG:7;
then ll is (CQC-variable_list of k) by A9,CQC_LANG:5;
hence thesis by A1;
end;
A10: (for S1,S2 being (Element of ( QC-Sub-WFF )) holds (((( S1 `2 ) = ( S2 `2 ) & Pro1[ S1 ]) & Pro1[ S2 ]) implies Pro1[ ( Sub_& (S1,S2) ) ]))
proof
let S1 being (Element of ( QC-Sub-WFF ));
let S2 being (Element of ( QC-Sub-WFF ));
assume that
A11: ( S1 `2 ) = ( S2 `2 )
and
A12: (Pro1[ S1 ] & Pro1[ S2 ]);
assume ( Sub_& (S1,S2) ) is (Element of ( CQC-Sub-WFF ));
then ( Sub_& (S1,S2) ) in ( CQC-Sub-WFF );
then consider S9 being (Element of ( QC-Sub-WFF )) such that A13: ( Sub_& (S1,S2) ) = S9 and A14: ( S9 `1 ) is (Element of ( CQC-WFF ));
( Sub_& (S1,S2) ) = [ ( ( S1 `1 ) '&' ( S2 `1 ) ),( S1 `2 ) ] by A11,CKB45:def 1;
then A15: ( S9 `1 ) = ( ( S1 `1 ) '&' ( S2 `1 ) ) by A13,MCART_1:7;
then ( S2 `1 ) is (Element of ( CQC-WFF )) by A14,CQC_LANG:9;
then A16: S2 in ( CQC-Sub-WFF );
( S1 `1 ) is (Element of ( CQC-WFF )) by A14,A15,CQC_LANG:9;
then S1 in ( CQC-Sub-WFF );
hence thesis by A1,A11,A12,A16;
end;
A17: (for x being bound_QC-variable holds (for S being (Element of ( QC-Sub-WFF )) holds (for SQ being (second_Q_comp of [ S,x ]) holds (([ S,x ] is  quantifiable & Pro1[ S ]) implies Pro1[ ( Sub_All ([ S,x ],SQ) ) ]))))
proof
let x being bound_QC-variable;
let S being (Element of ( QC-Sub-WFF ));
let SQ being (second_Q_comp of [ S,x ]);
assume that
A18: [ S,x ] is  quantifiable
and
A19: Pro1[ S ];
assume ( Sub_All ([ S,x ],SQ) ) is (Element of ( CQC-Sub-WFF ));
then ( Sub_All ([ S,x ],SQ) ) in ( CQC-Sub-WFF );
then consider S9 being (Element of ( QC-Sub-WFF )) such that A20: ( Sub_All ([ S,x ],SQ) ) = S9 and A21: ( S9 `1 ) is (Element of ( CQC-WFF ));
A22: ( [ S,x ] `1 ) = S by MCART_1:7;
( Sub_All ([ S,x ],SQ) ) = [ ( All (( [ S,x ] `2 ),( ( [ S,x ] `1 ) `1 )) ),SQ ] by A18,CKB50:def 1;
then ( S9 `1 ) = ( All (( [ S,x ] `2 ),( ( [ S,x ] `1 ) `1 )) ) by A20,MCART_1:7;
then ( ( [ S,x ] `1 ) `1 ) is (Element of ( CQC-WFF )) by A21,CQC_LANG:13;
then S in ( CQC-Sub-WFF ) by A22;
hence thesis by A1,A18,A19;
end;
A23: (for S being (Element of ( QC-Sub-WFF )) holds (S is  Sub_VERUM implies Pro1[ S ])) by A1;
(for S being (Element of ( QC-Sub-WFF )) holds Pro1[ S ]) from CKB52:sch 1(A6,A23,A2,A10,A17);
hence thesis;
end;
