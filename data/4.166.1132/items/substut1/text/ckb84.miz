environ
vocabularies NUMBERS,SUBSET_1,QC_LANG1,CQC_LANG,FINSEQ_1,PARTFUN1,XBOOLE_0,FUNCT_1,RELAT_1,XXREAL_0,NAT_1,TARSKI,FINSET_1,ZFMISC_1,ZF_LANG,CLASSES2,CARD_1,BVFUNC_2,ORDINAL4,REALSET1,XBOOLEAN,MARGREL1,MCART_1,ARYTM_3,SUBSTUT1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,NUMBERS,FINSEQ_1,NAT_1,QC_LANG1,QC_LANG3,PARTFUN1,SEQ_4,CQC_LANG,FINSET_1,RELSET_1,FUNCT_2,DOMAIN_1,MCART_1,XXREAL_0,CKB1,CKB3,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB41,CKB42,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
definitions TARSKI,FUNCT_1,QC_LANG1,QC_LANG3,CKB1,CKB5,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB44,CKB45,CKB48,CKB49,CKB50,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
theorems TARSKI,FINSEQ_1,FUNCT_1,MCART_1,CQC_SIM1,XBOOLE_0,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,XBOOLE_1,CARD_2,CARD_3,FUNCT_2,PARTFUN1,RELSET_1,NAT_1,QC_LANG2,FINSEQ_3,CARD_1,XXREAL_0,ORDINAL1,CKB1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB40,CKB43,CKB44,CKB45,CKB48,CKB49,CKB50,CKB53,CKB54,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82;
schemes FUNCT_1,FUNCT_2,QC_LANG1,QC_LANG3,NAT_1,XBOOLE_0,FRAENKEL,FINSEQ_1,CLASSES1,CKB52,CKB76,CKB83;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,PARTFUN1,FINSET_1,MEMBERED,FINSEQ_1,RFINSEQ,QC_LANG1,CQC_LANG,XXREAL_0,CARD_1,CKB2,CKB4,CKB11,CKB21,CKB31,CKB37,CKB55,CKB66;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,SEQ_4,QC_LANG3,CQC_SIM1,RELSET_1,CKB1,CKB5,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB35,CKB38,CKB40,CKB41,CKB42,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB53,CKB56,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
requirements REAL,NUMERALS,SUBSET,BOOLE;
begin
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve P for (QC-pred_symbol of k);
reserve e for (Element of ( vSUB ));
reserve S for (Element of ( QC-Sub-WFF ));
reserve S1 for (Element of ( QC-Sub-WFF ));
reserve S2 for (Element of ( QC-Sub-WFF ));
reserve B for (Element of [: ( QC-Sub-WFF ),( bound_QC-variables ) :]);
reserve SQ for (second_Q_comp of B);
scheme SubQCFuncUniq { D() -> non  empty set,F1() -> (Function of ( QC-Sub-WFF ),D()),F2() -> (Function of ( QC-Sub-WFF ),D()),V() -> (Element of D()),A(set) -> (Element of D()),N(set) -> (Element of D()),C(set,set) -> (Element of D()),R(set,set) -> (Element of D()) } : F1() = F2()
provided
A1: (for S being (Element of ( QC-Sub-WFF )) holds (for d1,d2 being (Element of D()) holds (((((S is  Sub_VERUM implies ( F1() . S ) = V()) & (S is  Sub_atomic implies ( F1() . S ) = A(S))) & ((S is  Sub_negative & d1 = ( F1() . ( Sub_the_argument_of S ) )) implies ( F1() . S ) = N(d1))) & (((S is  Sub_conjunctive & d1 = ( F1() . ( Sub_the_left_argument_of S ) )) & d2 = ( F1() . ( Sub_the_right_argument_of S ) )) implies ( F1() . S ) = C(d1,d2))) & ((S is  Sub_universal & d1 = ( F1() . ( Sub_the_scope_of S ) )) implies ( F1() . S ) = R(S,d1)))))
and
A2: (for S being (Element of ( QC-Sub-WFF )) holds (for d1,d2 being (Element of D()) holds (((((S is  Sub_VERUM implies ( F2() . S ) = V()) & (S is  Sub_atomic implies ( F2() . S ) = A(S))) & ((S is  Sub_negative & d1 = ( F2() . ( Sub_the_argument_of S ) )) implies ( F2() . S ) = N(d1))) & (((S is  Sub_conjunctive & d1 = ( F2() . ( Sub_the_left_argument_of S ) )) & d2 = ( F2() . ( Sub_the_right_argument_of S ) )) implies ( F2() . S ) = C(d1,d2))) & ((S is  Sub_universal & d1 = ( F2() . ( Sub_the_scope_of S ) )) implies ( F2() . S ) = R(S,d1)))))
proof
defpred Pro[ (Element of ( QC-Sub-WFF )) ]
 means
( F1() . $1 ) = ( F2() . $1 );
A3: (for k holds (for P being (QC-pred_symbol of k) holds (for l being (QC-variable_list of k) holds (for e being (Element of ( vSUB )) holds Pro[ ( Sub_P (P,l,e) ) ]))))
proof
let k;
let P being (QC-pred_symbol of k);
let l being (QC-variable_list of k);
let e being (Element of ( vSUB ));
thus ( F1() . ( Sub_P (P,l,e) ) ) = A(( Sub_P (P,l,e) )) by A1
.= ( F2() . ( Sub_P (P,l,e) ) ) by A2;
end;
A4: (for x being bound_QC-variable holds (for S being (Element of ( QC-Sub-WFF )) holds (for SQ being (second_Q_comp of [ S,x ]) holds (([ S,x ] is  quantifiable & Pro[ S ]) implies Pro[ ( Sub_All ([ S,x ],SQ) ) ]))))
proof
let x being bound_QC-variable;
let S being (Element of ( QC-Sub-WFF ));
let SQ being (second_Q_comp of [ S,x ]);
assume that
A5: [ S,x ] is  quantifiable
and
A6: ( F1() . S ) = ( F2() . S );
A7: ( Sub_All ([ S,x ],SQ) ) is  Sub_universal by A5,CKB68:1;
( Sub_the_scope_of ( Sub_All ([ S,x ],SQ) ) ) = ( [ S,x ] `1 ) by A5,CKB75:1;
then ( Sub_the_scope_of ( Sub_All ([ S,x ],SQ) ) ) = S by MCART_1:7;
hence ( F1() . ( Sub_All ([ S,x ],SQ) ) ) = R(( Sub_All ([ S,x ],SQ) ),( F2() . ( Sub_the_scope_of ( Sub_All ([ S,x ],SQ) ) ) )) by A1,A6,A7
.= ( F2() . ( Sub_All ([ S,x ],SQ) ) ) by A2,A7;
end;
A8: (for S being (Element of ( QC-Sub-WFF )) holds (S is  Sub_VERUM implies Pro[ S ]))
proof
let S being (Element of ( QC-Sub-WFF ));
assume A9: S is  Sub_VERUM;
then ( F1() . S ) = V() by A1;
hence thesis by A2,A9;
end;
A10: (for S1,S2 being (Element of ( QC-Sub-WFF )) holds (((( S1 `2 ) = ( S2 `2 ) & Pro[ S1 ]) & Pro[ S2 ]) implies Pro[ ( Sub_& (S1,S2) ) ]))
proof
let S1 being (Element of ( QC-Sub-WFF ));
let S2 being (Element of ( QC-Sub-WFF ));
assume that
A11: ( S1 `2 ) = ( S2 `2 )
and
A12: (( F1() . S1 ) = ( F2() . S1 ) & ( F1() . S2 ) = ( F2() . S2 ));
A13: ( Sub_the_right_argument_of ( Sub_& (S1,S2) ) ) = S2 by A11,CKB73:1;
A14: (( Sub_& (S1,S2) ) is  Sub_conjunctive & ( Sub_the_left_argument_of ( Sub_& (S1,S2) ) ) = S1) by A11,CKB67:1,CKB72:1;
hence ( F1() . ( Sub_& (S1,S2) ) ) = C(( F2() . S1 ),( F2() . S2 )) by A1,A12,A13
.= ( F2() . ( Sub_& (S1,S2) ) ) by A2,A14,A13;
end;
A15: (for S being (Element of ( QC-Sub-WFF )) holds (Pro[ S ] implies Pro[ ( Sub_not S ) ]))
proof
let S being (Element of ( QC-Sub-WFF ));
assume that
A16: ( F1() . S ) = ( F2() . S );
A17: ( Sub_the_argument_of ( Sub_not S ) ) = S by CKB61:def 1;
hence ( F1() . ( Sub_not S ) ) = N(( F2() . S )) by A1,A16
.= ( F2() . ( Sub_not S ) ) by A2,A17;
end;
Pro[ S ] from CKB52:sch 1(A3,A8,A15,A10,A4);
hence thesis by FUNCT_2:63;
end;
