environ
vocabularies XBOOLE_0,STRUCT_0,ORDERS_2,SUBSET_1,XXREAL_0,RELAT_1,RELAT_2,REWRITE1,LATTICE3,ZFMISC_1,ORDERS_1,ARYTM_3,TARSKI,LATTICES,XXREAL_2,EQREL_1,FILTER_0,PBOOLE,ORDINAL2,FINSET_1,CAT_1,WELLORD1,YELLOW_0,CARD_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_2,RELSET_1,FINSET_1,TOLER_1,ORDERS_1,DOMAIN_1,CARD_1,STRUCT_0,LATTICES,ORDERS_2,LATTICE3,CKB2,CKB3,CKB4;
definitions STRUCT_0,RELAT_2,ORDERS_2,LATTICE3,WELLORD1,CKB2,CKB3,CKB4;
theorems TARSKI,ZFMISC_1,RELAT_2,ORDERS_2,LATTICE3,XBOOLE_0,XBOOLE_1,STRUCT_0,CKB2,CKB3,CKB4,CKB9,CKB10,CKB11;
schemes FINSET_1,RELSET_1,CKB1;
registrations XBOOLE_0,RELSET_1,FINSET_1,STRUCT_0,ORDERS_2,LATTICE3,CARD_1,ORDINAL1,CKB5,CKB6,CKB7,CKB8;
constructors TOLER_1,REALSET2,LATTICE3;
requirements BOOLE,SUBSET,NUMERALS;
begin
theorem
Th4: (for L being  transitive RelStr holds (for x,y being (Element of L) holds (x <= y implies (for X being set holds ((y is_<=_than X implies x is_<=_than X) & (x is_>=_than X implies y is_>=_than X))))))
proof
let L being  transitive RelStr;
let x being (Element of L),y being (Element of L);
assume A1: x <= y;
let X being set;
hereby
assume A2: y is_<=_than X;
thus x is_<=_than X
proof
let z being (Element of L);
assume z in X;
then z >= y by A2,LATTICE3:def 8;
hence thesis by A1,ORDERS_2:3;
end;

end;
assume A3: x is_>=_than X;
let z being (Element of L);
assume z in X;
then x >= z by A3,LATTICE3:def 9;
hence thesis by A1,ORDERS_2:3;
end;
