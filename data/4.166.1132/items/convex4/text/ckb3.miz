environ
vocabularies NUMBERS,XBOOLE_0,STRUCT_0,SUBSET_1,FUNCT_2,FINSET_1,FUNCT_1,CARD_1,FUNCOP_1,COMPLEX1,ALGSTR_0,RLVECT_2,TARSKI,NAT_1,CLVECT_1,FINSEQ_1,VALUED_1,RELAT_1,PARTFUN1,XXREAL_0,RLVECT_1,CFUNCT_1,CARD_3,SUPINF_2,RLSUB_1,ARYTM_3,ARYTM_1,QC_LANG1,BINOP_1,ZFMISC_1,RUSUB_4,REAL_1,REALSET1,XREAL_0,ORDINAL1,XCMPLX_0,CONVEX1,SETFAM_1,CSSPACE,PROB_2,CONVEX4,PRE_POLY;
notations TARSKI,XBOOLE_0,DOMAIN_1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,PRE_POLY,RELSET_1,FUNCT_2,FINSEQ_1,FINSEQ_4,ALGSTR_0,RLVECT_1,SETFAM_1,STRUCT_0,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,FINSET_1,PARTFUN1,FUNCOP_1,CARD_1,VALUED_1,XCMPLX_0,COMPLEX1,RVSUM_1,RUSUB_4,RUSUB_5,NAT_1,BINOP_1,REAL_1,RLVECT_2,CFUNCT_1,CLVECT_1,CSSPACE,REALSET1,CKB1,CKB2;
definitions FUNCT_1,TARSKI,XBOOLE_0,BINOP_1,RELAT_1,STRUCT_0,REALSET1,FINSEQ_1,CLVECT_1,COMPLEX1,RVSUM_1,XCMPLX_0,ALGSTR_0,RUSUB_4,RUSUB_5,CKB1;
theorems SUBSET_1,STRUCT_0,RVSUM_1,SETFAM_1,ENUMSET1,BINOP_1,CARD_1,CARD_2,FINSEQ_1,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,NAT_1,RLVECT_1,RLVECT_2,TARSKI,ZFMISC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,COMPLEX1,XCMPLX_1,FUNCOP_1,XREAL_1,XXREAL_0,FINSOP_1,CLVECT_1,CSSPACE,CONVEX1,PARTFUN1,XREAL_0,VALUED_1,ALGSTR_0,PRE_POLY,CKB1;
schemes DOMAIN_1,BINOP_1,SUBSET_1,FINSEQ_1,FUNCT_2,NAT_1,XBOOLE_0;
registrations STRUCT_0,MEMBERED,XXREAL_0,CSSPACE,RLVECT_1,RELSET_1,FINSET_1,XREAL_0,SUBSET_1,XCMPLX_0,CLVECT_1,XBOOLE_0,NUMBERS,NAT_1,FUNCT_2,VALUED_1,VALUED_0,CARD_1,FINSEQ_1;
constructors SETFAM_1,BINOP_1,FUNCOP_1,XXREAL_0,REAL_1,FINSEQ_4,COMPLEX1,REALSET1,BINOP_2,FINSOP_1,RVSUM_1,RLVECT_2,RUSUB_5,CSSPACE,RELSET_1,CKB1;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
Lm1:now
let V being non  empty addLoopStr;
let L being (Element of ( Funcs ((the carrier of V),( COMPLEX )) ));
A1: ( support L ) c= ( dom L ) by PRE_POLY:37;
thus ( Carrier L ) c= (the carrier of V)
proof
let x being set;
assume x in ( support L );
then x in ( dom L ) by A1;
hence thesis;
end;

end;
definition
let V being non  empty addLoopStr;
let L being (Element of ( Funcs ((the carrier of V),( COMPLEX )) ));
redefine func Carrier L -> (Subset of V) equals 
{ v where v is (Element of V): ( L . v ) <> ( 0c ) };
coherence by Lm1;
compatibility
proof
let X being (Subset of V);
set A = ( Carrier L );
set B = { v where v is (Element of V): ( L . v ) <> ( 0 ) };
thus (X = A implies X = B)
proof
assume A1: X = A;
thus X c= B
proof
let x being set;
assume A2: x in X;
then ( L . x ) <> ( 0 ) by A1,PRE_POLY:def 7;
hence thesis by A2;
end;

let x being set;
assume x in B;
then (ex v being (Element of V) st (x = v & ( L . v ) <> ( 0 )));
hence thesis by A1,PRE_POLY:def 7;
end;

assume A3: X = B;
thus X c= A
proof
let x being set;
assume x in X;
then (ex v being (Element of V) st (x = v & ( L . v ) <> ( 0 ))) by A3;
hence thesis by PRE_POLY:def 7;
end;

let x being set;
assume A4: x in A;
then A5: ( L . x ) <> ( 0 ) by PRE_POLY:def 7;
( Carrier L ) c= (the carrier of V) by Lm1;
hence thesis by A3,A4,A5;
end;
end;
