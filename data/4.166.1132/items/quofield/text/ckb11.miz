environ
vocabularies XBOOLE_0,STRUCT_0,SUBSET_1,ZFMISC_1,SUPINF_2,ALGSTR_0,MESFUNC1,MCART_1,VECTSP_2,RELAT_1,ARYTM_3,BINOP_1,RLVECT_1,LATTICES,SETFAM_1,FUNCSDOM,GROUP_1,ARYTM_1,FUNCT_1,VECTSP_1,MSSUBFAM,TARSKI,QUOFIELD,FUNCT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,MCART_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,SETFAM_1,BINOP_1,DOMAIN_1,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_2,VECTSP_1,TOPS_2,FUNCSDOM,GRCAT_1,GCD_1,GROUP_6,CKB1,CKB6,CKB7,CKB8,CKB9;
definitions VECTSP_1,VECTSP_2,STRUCT_0,XBOOLE_0,ALGSTR_0,CKB1,CKB8,CKB9;
theorems TARSKI,MCART_1,VECTSP_1,VECTSP_2,SUBSET_1,BINOP_1,RLVECT_1,FUNCT_1,FUNCT_2,GCD_1,RELAT_1,RELSET_1,GRCAT_1,TOPS_2,XBOOLE_0,GROUP_1,GROUP_6,STRUCT_0,CKB1,CKB2,CKB4,CKB5,CKB8,CKB9,CKB10;
schemes SUBSET_1,BINOP_1,FUNCT_2;
registrations SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0,VECTSP_1,ALGSTR_1,GCD_1,CKB3;
constructors PARTFUN1,DOMAIN_1,TOPS_2,GRCAT_1,GROUP_6,GCD_1,ALGSTR_1,RELSET_1,CKB1,CKB6,CKB7,CKB8,CKB9;
requirements SUBSET,BOOLE;
begin
theorem
Th5: (for I being non degenerated  domRing-like  associative  commutative  Abelian non empty doubleLoopStr holds (for u,v,w being (Element of ( Q. I )) holds ( pmult (u,( pmult (v,w) )) ) = ( pmult (( pmult (u,v) ),w) )))
proof
let I being non degenerated  domRing-like  associative  commutative  Abelian non empty doubleLoopStr;
let u being (Element of ( Q. I )),v being (Element of ( Q. I )),w being (Element of ( Q. I ));
A1: ( v `2 ) <> ( 0. I ) by CKB4:1;
( w `2 ) <> ( 0. I ) by CKB4:1;
then ( ( v `2 ) * ( w `2 ) ) <> ( 0. I ) by A1,VECTSP_2:def 1;
then reconsider t = [ ( ( v `1 ) * ( w `1 ) ),( ( v `2 ) * ( w `2 ) ) ] as (Element of ( Q. I )) by CKB1:def 1;
( u `2 ) <> ( 0. I ) by CKB4:1;
then ( ( u `2 ) * ( v `2 ) ) <> ( 0. I ) by A1,VECTSP_2:def 1;
then reconsider s = [ ( ( u `1 ) * ( v `1 ) ),( ( u `2 ) * ( v `2 ) ) ] as (Element of ( Q. I )) by CKB1:def 1;
( pmult (u,( pmult (v,w) )) ) = [ ( ( u `1 ) * ( ( v `1 ) * ( w `1 ) ) ),( ( u `2 ) * ( t `2 ) ) ] by MCART_1:def 1
.= [ ( ( u `1 ) * ( ( v `1 ) * ( w `1 ) ) ),( ( u `2 ) * ( ( v `2 ) * ( w `2 ) ) ) ] by MCART_1:def 2
.= [ ( ( ( u `1 ) * ( v `1 ) ) * ( w `1 ) ),( ( u `2 ) * ( ( v `2 ) * ( w `2 ) ) ) ] by GROUP_1:def 3
.= [ ( ( ( u `1 ) * ( v `1 ) ) * ( w `1 ) ),( ( ( u `2 ) * ( v `2 ) ) * ( w `2 ) ) ] by GROUP_1:def 3
.= [ ( ( s `1 ) * ( w `1 ) ),( ( ( u `2 ) * ( v `2 ) ) * ( w `2 ) ) ] by MCART_1:def 1
.= ( pmult (( pmult (u,v) ),w) ) by MCART_1:def 2;
hence thesis;
end;
