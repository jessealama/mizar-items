environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,STRUCT_0,SUBSET_1,RELAT_1,FUNCT_1,SUPINF_2,CARD_3,NAT_1,PARTFUN1,FINSEQ_5,ORDINAL4,ARYTM_3,XXREAL_0,FINSEQ_3,FINSEQ_2,PRE_POLY,TARSKI,CARD_1,ORDERS_1,RELAT_2,FINSET_1,ARYTM_1,FUNCT_2,POLYNOM1,ALGSEQ_1,FUNCOP_1,FUNCT_4,MESFUNC1,LATTICES,VECTSP_1,BINOP_1,CLASSES1,GROUP_1,ZFMISC_1,POLYNOM3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,RELAT_1,RELAT_2,FUNCT_1,ORDERS_1,XXREAL_0,NAT_1,NAT_D,CLASSES1,RELSET_1,PARTFUN1,FINSET_1,FUNCT_2,FUNCOP_1,FINSEQ_1,PRE_POLY,FINSEQ_2,FINSEQ_5,FINSEQOP,BINOP_1,RVSUM_1,FUNCT_7,TREES_4,WSIERP_1,STRUCT_0,ALGSTR_0,MATRLIN,BINARITH,GROUP_1,RLVECT_1,VFUNCT_1,FVSUM_1,VECTSP_1,NORMSP_1,POLYNOM1,ALGSEQ_1,BHSP_1,RECDEF_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB17,CKB19;
definitions TARSKI,XBOOLE_0,RELAT_1,RELAT_2,PRE_POLY,RLVECT_1,GROUP_1,VECTSP_1,ALGSEQ_1,FINSEQ_2,FUNCT_2,STRUCT_0,CARD_1,ALGSTR_0,CKB10,CKB12,CKB17,CKB19;
theorems AXIOMS,TARSKI,ENUMSET1,RELSET_1,INT_1,NAT_1,CARD_1,RLVECT_1,VECTSP_1,ALGSEQ_1,RELAT_2,ORDERS_1,FUNCT_1,FUNCT_2,FUNCT_7,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FINSEQ_5,RFINSEQ,BINOP_1,CARD_3,RVSUM_1,FVSUM_1,MATRLIN,YELLOW15,POLYNOM1,RELAT_1,XBOOLE_0,RLVECT_2,XCMPLX_1,PARTFUN1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,BHSP_1,NORMSP_1,XREAL_0,NAT_D,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB10,CKB12,CKB14,CKB15,CKB16,CKB17,CKB19,CKB21;
schemes FUNCT_2,FINSEQ_1,FINSEQ_2,NAT_1,RELSET_1,SUBSET_1,BINOP_1,RECDEF_1,CKB9;
registrations RELAT_1,ORDINAL1,FUNCT_2,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,FINSEQ_2,REALSET1,FINSEQ_5,STRUCT_0,VECTSP_1,VALUED_0,FINSET_1,RELSET_1,PRE_POLY,VFUNCT_1,CARD_1,FUNCT_1,CKB18,CKB20;
constructors BINOP_1,SQUARE_1,FINSEQOP,REALSET1,RFINSEQ,NAT_D,FINSEQ_5,WSIERP_1,ALGSEQ_1,BHSP_1,DTCONSTR,TRIANG_1,POLYNOM1,SEQ_1,RECDEF_1,SEQ_2,SEQM_3,REAL_1,BINARITH,CLASSES1,RELSET_1,RELAT_1,FUNCT_7,MATRLIN,PRE_POLY,FVSUM_1,VFUNCT_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB12,CKB17,CKB19;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
theorem
Th9: (for n being (Element of ( NAT )) holds ( len ( Decomp (n,2) ) ) = ( n + 1 ))
proof
let n being (Element of ( NAT ));
deffunc F(Nat) = <* $1,( n -' $1 ) *>;
consider q being FinSequence such that A1: ( len q ) = n and A2: (for k being Nat holds (k in ( dom q ) implies ( q . k ) = F(k))) from FINSEQ_1:sch 2;
A3: ( dom q ) = ( Seg n ) by A1,FINSEQ_1:def 3;
set q1 = ( q ^ <* <* ( 0 ),n *> *> );
A4: ( dom q ) = ( Seg n ) by A1,FINSEQ_1:def 3;
A5: ( len q1 ) = ( n + 1 ) by A1,FINSEQ_2:16;
then A6: ( dom q1 ) = ( Seg ( n + 1 ) ) by FINSEQ_1:def 3;
now
let x1 being set;
let x2 being set;
assume that
A7: x1 in ( dom q1 )
and
A8: x2 in ( dom q1 )
and
A9: ( q1 . x1 ) = ( q1 . x2 );
reconsider k1 = x1,k2 = x2 as (Element of ( NAT )) by A7,A8;
x2 in ( ( Seg n ) \/ { ( n + 1 ) } ) by A6,A8,FINSEQ_1:9;
then A10: (x2 in ( Seg n ) or x2 in { ( n + 1 ) }) by XBOOLE_0:def 3;
x1 in ( ( Seg n ) \/ { ( n + 1 ) } ) by A6,A7,FINSEQ_1:9;
then A11: (x1 in ( Seg n ) or x1 in { ( n + 1 ) }) by XBOOLE_0:def 3;
now
per cases  by A11,A10,TARSKI:def 1;
suppose A12: (x1 in ( Seg n ) & x2 in ( Seg n ));

then A13: (( q1 . k1 ) = ( q . k1 ) & ( q1 . k2 ) = ( q . k2 )) by A3,FINSEQ_1:def 7;
(( q . k1 ) = <* k1,( n -' k1 ) *> & ( q . k2 ) = <* k2,( n -' k2 ) *>) by A2,A4,A12;
hence x1 = x2 by A9,A13,FINSEQ_1:77;
end;
suppose A14: (x1 in ( Seg n ) & x2 = ( n + 1 ));

then A15: ( q1 . k2 ) = <* ( 0 ),n *> by A1,FINSEQ_1:42;
( q1 . k1 ) = ( q . k1 ) by A3,A14,FINSEQ_1:def 7
.= <* k1,( n -' k1 ) *> by A2,A4,A14;
then k1 = ( 0 ) by A9,A15,FINSEQ_1:77;
hence x1 = x2 by A14,FINSEQ_1:1;
end;
suppose A16: (x1 = ( n + 1 ) & x2 in ( Seg n ));

then A17: ( q1 . k1 ) = <* ( 0 ),n *> by A1,FINSEQ_1:42;
( q1 . k2 ) = ( q . k2 ) by A3,A16,FINSEQ_1:def 7
.= <* k2,( n -' k2 ) *> by A2,A4,A16;
then k2 = ( 0 ) by A9,A17,FINSEQ_1:77;
hence x1 = x2 by A16,FINSEQ_1:1;
end;
suppose (x1 = ( n + 1 ) & x2 = ( n + 1 ));

hence x1 = x2;
end;
end;
hence x1 = x2;
end;
then q1 is  one-to-one by FUNCT_1:def 4;
then A18: ( card ( rng q1 ) ) = ( n + 1 ) by A5,FINSEQ_4:62;
A19: ( rng q ) c= ( rng q1 ) by FINSEQ_1:29;
A20: ( rng q1 ) = { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n }
proof
thus ( rng q1 ) c= { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n }
proof
let x being set;
assume x in ( rng q1 );
then consider j being Nat such that A21: j in ( dom q1 ) and A22: ( q1 . j ) = x by FINSEQ_2:10;
reconsider j as (Element of ( NAT )) by ORDINAL1:def 12;
j in ( ( Seg n ) \/ { ( n + 1 ) } ) by A6,A21,FINSEQ_1:9;
then A23: (j in ( Seg n ) or j in { ( n + 1 ) }) by XBOOLE_0:def 3;
now
per cases  by A23,TARSKI:def 1;
suppose A24: j in ( Seg n );

then A25: ( q1 . j ) = ( q . j ) by A3,FINSEQ_1:def 7;
(( q . j ) = <* j,( n -' j ) *> & j <= n) by A2,A4,A24,FINSEQ_1:1;
hence thesis by A22,A25;
end;
suppose j = ( n + 1 );

then ( q1 . j ) = <* ( 0 ),n *> by A1,FINSEQ_1:42
.= <* ( 0 ),( n -' ( 0 ) ) *> by NAT_D:40;
hence thesis by A22;
end;
end;
hence thesis;
end;

let x being set;
assume x in { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n };
then consider i being (Element of ( NAT )) such that A26: x = <* i,( n -' i ) *> and A27: i <= n;
A28: (i = ( 0 ) or i >= ( (( 0 ) qua Nat) + 1 )) by NAT_1:13;
now
per cases  by A27,A28,FINSEQ_1:1;
suppose A29: i = ( 0 );

A30: ( n + 1 ) in ( dom q1 ) by A6,FINSEQ_1:4;
( q1 . ( n + 1 ) ) = <* ( 0 ),n *> by A1,FINSEQ_1:42
.= x by A26,A29,NAT_D:40;
hence thesis by A30,FUNCT_1:def 3;
end;
suppose A31: i in ( Seg n );

then ( q . i ) = x by A2,A4,A26;
then x in ( rng q ) by A3,A31,FUNCT_1:def 3;
hence thesis by A19;
end;
end;
hence thesis;
end;
consider A being  finite (Subset of ( 2 -tuples_on ( NAT ) )) such that A32: ( Decomp (n,2) ) = ( SgmX (( TuplesOrder 2 ),A) ) and A33: (for p being (Element of ( 2 -tuples_on ( NAT ) )) holds (p in A iff ( Sum p ) = n)) by CKB19:def 1;
A34: A = { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n }
proof
thus A c= { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n }
proof
let x being set;
assume A35: x in A;
then reconsider p = x as (Element of ( 2 -tuples_on ( NAT ) ));
consider d1,d2 being (Element of ( NAT )) such that A36: p = <* d1,d2 *> by FINSEQ_2:100;
A37: ( d1 + d2 ) = ( Sum p ) by A36,RVSUM_1:77
.= n by A33,A35;
then ( n - d1 ) >= ( 0 );
then A38: d2 = ( n -' d1 ) by A37,XREAL_0:def 2;
d1 <= n by A37,NAT_1:11;
hence thesis by A36,A38;
end;

let x being set;
assume x in { <* i,( n -' i ) *> where i is (Element of ( NAT )): i <= n };
then consider i being (Element of ( NAT )) such that A39: x = <* i,( n -' i ) *> and A40: i <= n;
A41: ( n - i ) >= ( 0 ) by A40,XREAL_1:48;
( Sum <* i,( n -' i ) *> ) = ( i + ( n -' i ) ) by RVSUM_1:77
.= ( i + ( n - i ) ) by A41,XREAL_0:def 2
.= n;
hence thesis by A33,A39;
end;
( field ( TuplesOrder 2 ) ) = ( 2 -tuples_on ( NAT ) ) by ORDERS_1:15;
then ( TuplesOrder 2 ) linearly_orders ( 2 -tuples_on ( NAT ) ) by ORDERS_1:37;
hence thesis by A32,A34,A20,A18,ORDERS_1:38,PRE_POLY:11;
end;
