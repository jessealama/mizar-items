environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,STRUCT_0,SUBSET_1,RELAT_1,FUNCT_1,SUPINF_2,CARD_3,NAT_1,PARTFUN1,FINSEQ_5,ORDINAL4,ARYTM_3,XXREAL_0,FINSEQ_3,FINSEQ_2,PRE_POLY,TARSKI,CARD_1,ORDERS_1,RELAT_2,FINSET_1,ARYTM_1,FUNCT_2,POLYNOM1,ALGSEQ_1,FUNCOP_1,FUNCT_4,MESFUNC1,LATTICES,VECTSP_1,BINOP_1,CLASSES1,GROUP_1,ZFMISC_1,POLYNOM3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,RELAT_1,RELAT_2,FUNCT_1,ORDERS_1,XXREAL_0,NAT_1,NAT_D,CLASSES1,RELSET_1,PARTFUN1,FINSET_1,FUNCT_2,FUNCOP_1,FINSEQ_1,PRE_POLY,FINSEQ_2,FINSEQ_5,FINSEQOP,BINOP_1,RVSUM_1,FUNCT_7,TREES_4,WSIERP_1,STRUCT_0,ALGSTR_0,MATRLIN,BINARITH,GROUP_1,RLVECT_1,VFUNCT_1,FVSUM_1,VECTSP_1,NORMSP_1,POLYNOM1,ALGSEQ_1,BHSP_1,RECDEF_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB17,CKB19;
definitions TARSKI,XBOOLE_0,RELAT_1,RELAT_2,PRE_POLY,RLVECT_1,GROUP_1,VECTSP_1,ALGSEQ_1,FINSEQ_2,FUNCT_2,STRUCT_0,CARD_1,ALGSTR_0,CKB10,CKB12,CKB17,CKB19;
theorems AXIOMS,TARSKI,ENUMSET1,RELSET_1,INT_1,NAT_1,CARD_1,RLVECT_1,VECTSP_1,ALGSEQ_1,RELAT_2,ORDERS_1,FUNCT_1,FUNCT_2,FUNCT_7,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FINSEQ_5,RFINSEQ,BINOP_1,CARD_3,RVSUM_1,FVSUM_1,MATRLIN,YELLOW15,POLYNOM1,RELAT_1,XBOOLE_0,RLVECT_2,XCMPLX_1,PARTFUN1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,BHSP_1,NORMSP_1,XREAL_0,NAT_D,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB10,CKB12,CKB14,CKB15,CKB16,CKB17,CKB19,CKB21,CKB22,CKB23;
schemes FUNCT_2,FINSEQ_1,FINSEQ_2,NAT_1,RELSET_1,SUBSET_1,BINOP_1,RECDEF_1,CKB9;
registrations RELAT_1,ORDINAL1,FUNCT_2,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,FINSEQ_2,REALSET1,FINSEQ_5,STRUCT_0,VECTSP_1,VALUED_0,FINSET_1,RELSET_1,PRE_POLY,VFUNCT_1,CARD_1,FUNCT_1,CKB18,CKB20;
constructors BINOP_1,SQUARE_1,FINSEQOP,REALSET1,RFINSEQ,NAT_D,FINSEQ_5,WSIERP_1,ALGSEQ_1,BHSP_1,DTCONSTR,TRIANG_1,POLYNOM1,SEQ_1,RECDEF_1,SEQ_2,SEQM_3,REAL_1,BINARITH,CLASSES1,RELSET_1,RELAT_1,FUNCT_7,MATRLIN,PRE_POLY,FVSUM_1,VFUNCT_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB12,CKB17,CKB19;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
theorem
Th11: (for i,j,n,k1,k2 being (Element of ( NAT )) holds ((( ( Decomp (n,2) ) . i ) = <* k1,( n -' k1 ) *> & ( ( Decomp (n,2) ) . j ) = <* k2,( n -' k2 ) *>) implies (i < j iff k1 < k2)))
proof
let i being (Element of ( NAT )),j being (Element of ( NAT )),n being (Element of ( NAT )),k1 being (Element of ( NAT )),k2 being (Element of ( NAT ));
assume that
A1: ( ( Decomp (n,2) ) . i ) = <* k1,( n -' k1 ) *>
and
A2: ( ( Decomp (n,2) ) . j ) = <* k2,( n -' k2 ) *>;
A3: j in ( dom ( Decomp (n,2) ) ) by A2,FUNCT_1:def 2;
then A4: ( ( Decomp (n,2) ) . j ) = ( ( Decomp (n,2) ) /. j ) by PARTFUN1:def 6;
consider A being  finite (Subset of ( 2 -tuples_on ( NAT ) )) such that A5: ( Decomp (n,2) ) = ( SgmX (( TuplesOrder 2 ),A) ) and (for p being (Element of ( 2 -tuples_on ( NAT ) )) holds (p in A iff ( Sum p ) = n)) by CKB19:def 1;
( field ( TuplesOrder 2 ) ) = ( 2 -tuples_on ( NAT ) ) by ORDERS_1:15;
then A6: ( TuplesOrder 2 ) linearly_orders A by ORDERS_1:37,ORDERS_1:38;
A7: i in ( dom ( Decomp (n,2) ) ) by A1,FUNCT_1:def 2;
then A8: ( ( Decomp (n,2) ) . i ) = ( ( Decomp (n,2) ) /. i ) by PARTFUN1:def 6;
thus (i < j implies k1 < k2)
proof
assume A9: i < j;
then [ <* k1,( n -' k1 ) *>,<* k2,( n -' k2 ) *> ] in ( TuplesOrder 2 ) by A5,A6,A1,A2,A7,A3,A8,A4,PRE_POLY:def 2;
then A10: <* k1,( n -' k1 ) *> <= <* k2,( n -' k2 ) *> by CKB17:def 1;
<* k1,( n -' k1 ) *> <> <* k2,( n -' k2 ) *> by A5,A6,A1,A2,A7,A3,A8,A4,A9,PRE_POLY:def 2;
then <* k1,( n -' k1 ) *> < <* k2,( n -' k2 ) *> by A10,CKB12:def 1;
then consider t being (Element of ( NAT )) such that A11: t in ( Seg 2 ) and A12: ( <* k1,( n -' k1 ) *> . t ) < ( <* k2,( n -' k2 ) *> . t ) and A13: (for k being (Element of ( NAT )) holds ((1 <= k & k < t) implies ( <* k1,( n -' k1 ) *> . k ) = ( <* k2,( n -' k2 ) *> . k ))) by CKB10:def 1;
per cases  by A11,FINSEQ_1:2,TARSKI:def 2;
suppose A14: t = 1;

then ( <* k1,( n -' k1 ) *> . t ) = k1 by FINSEQ_1:44;
hence thesis by A12,A14,FINSEQ_1:44;
end;
suppose t = 2;

then ( <* k1,( n -' k1 ) *> . 1 ) = ( <* k2,( n -' k2 ) *> . 1 ) by A13;
then ( <* k1,( n -' k1 ) *> . 1 ) = k2 by FINSEQ_1:44;
then k1 = k2 by FINSEQ_1:44;
hence thesis by A12;
end;
end;

assume A15: k1 < k2;
A16: (for k being (Element of ( NAT )) holds ((1 <= k & k < 1) implies ( <* k1,( n -' k1 ) *> . k ) = ( <* k2,( n -' k2 ) *> . k )));
A17: ( <* k1,( n -' k1 ) *> . 1 ) = k1 by FINSEQ_1:44;
(1 in ( Seg 2 ) & ( <* k2,( n -' k2 ) *> . 1 ) = k2) by FINSEQ_1:1,FINSEQ_1:44;
then A18: <* k1,( n -' k1 ) *> < <* k2,( n -' k2 ) *> by A15,A17,A16,CKB10:def 1;
assume A19: i >= j;
per cases  by A19,XXREAL_0:1;
suppose i = j;

hence contradiction by A1,A2,A15,A17,FINSEQ_1:44;
end;
suppose A20: j < i;

then [ <* k2,( n -' k2 ) *>,<* k1,( n -' k1 ) *> ] in ( TuplesOrder 2 ) by A5,A6,A1,A2,A7,A3,A8,A4,PRE_POLY:def 2;
then A21: <* k2,( n -' k2 ) *> <= <* k1,( n -' k1 ) *> by CKB17:def 1;
<* k2,( n -' k2 ) *> <> <* k1,( n -' k1 ) *> by A5,A6,A1,A2,A7,A3,A8,A4,A20,PRE_POLY:def 2;
hence contradiction by A18,A21,CKB12:def 1;
end;
end;
