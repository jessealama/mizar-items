environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,STRUCT_0,SUBSET_1,RELAT_1,FUNCT_1,SUPINF_2,CARD_3,NAT_1,PARTFUN1,FINSEQ_5,ORDINAL4,ARYTM_3,XXREAL_0,FINSEQ_3,FINSEQ_2,PRE_POLY,TARSKI,CARD_1,ORDERS_1,RELAT_2,FINSET_1,ARYTM_1,FUNCT_2,POLYNOM1,ALGSEQ_1,FUNCOP_1,FUNCT_4,MESFUNC1,LATTICES,VECTSP_1,BINOP_1,CLASSES1,GROUP_1,ZFMISC_1,POLYNOM3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,RELAT_1,RELAT_2,FUNCT_1,ORDERS_1,XXREAL_0,NAT_1,NAT_D,CLASSES1,RELSET_1,PARTFUN1,FINSET_1,FUNCT_2,FUNCOP_1,FINSEQ_1,PRE_POLY,FINSEQ_2,FINSEQ_5,FINSEQOP,BINOP_1,RVSUM_1,FUNCT_7,TREES_4,WSIERP_1,STRUCT_0,ALGSTR_0,MATRLIN,BINARITH,GROUP_1,RLVECT_1,VFUNCT_1,FVSUM_1,VECTSP_1,NORMSP_1,POLYNOM1,ALGSEQ_1,BHSP_1,RECDEF_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB17;
definitions TARSKI,XBOOLE_0,RELAT_1,RELAT_2,PRE_POLY,RLVECT_1,GROUP_1,VECTSP_1,ALGSEQ_1,FINSEQ_2,FUNCT_2,STRUCT_0,CARD_1,ALGSTR_0,CKB10,CKB12,CKB17;
theorems AXIOMS,TARSKI,ENUMSET1,RELSET_1,INT_1,NAT_1,CARD_1,RLVECT_1,VECTSP_1,ALGSEQ_1,RELAT_2,ORDERS_1,FUNCT_1,FUNCT_2,FUNCT_7,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FINSEQ_5,RFINSEQ,BINOP_1,CARD_3,RVSUM_1,FVSUM_1,MATRLIN,YELLOW15,POLYNOM1,RELAT_1,XBOOLE_0,RLVECT_2,XCMPLX_1,PARTFUN1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,BHSP_1,NORMSP_1,XREAL_0,NAT_D,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB10,CKB12,CKB14,CKB15,CKB16,CKB17;
schemes FUNCT_2,FINSEQ_1,FINSEQ_2,NAT_1,RELSET_1,SUBSET_1,BINOP_1,RECDEF_1,CKB9;
registrations RELAT_1,ORDINAL1,FUNCT_2,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,FINSEQ_2,REALSET1,FINSEQ_5,STRUCT_0,VECTSP_1,VALUED_0,FINSET_1,RELSET_1,PRE_POLY,VFUNCT_1,CARD_1,FUNCT_1,CKB18;
constructors BINOP_1,SQUARE_1,FINSEQOP,REALSET1,RFINSEQ,NAT_D,FINSEQ_5,WSIERP_1,ALGSEQ_1,BHSP_1,DTCONSTR,TRIANG_1,POLYNOM1,SEQ_1,RECDEF_1,SEQ_2,SEQM_3,REAL_1,BINARITH,CLASSES1,RELSET_1,RELAT_1,FUNCT_7,MATRLIN,PRE_POLY,FVSUM_1,VFUNCT_1,CKB5,CKB6,CKB7,CKB8,CKB10,CKB12,CKB17;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
definition
let i being non empty (Element of ( NAT ));
let n being (Element of ( NAT ));
func Decomp (n,i) -> (FinSequence of ( i -tuples_on ( NAT ) ))
means
:Def4: (ex A being  finite (Subset of ( i -tuples_on ( NAT ) )) st (it = ( SgmX (( TuplesOrder i ),A) ) & (for p being (Element of ( i -tuples_on ( NAT ) )) holds (p in A iff ( Sum p ) = n))));
existence
proof
reconsider n1 = ( n + 1 ) as non empty set;
defpred P[ (Element of ( i -tuples_on ( NAT ) )) ]
 means
( Sum $1 ) = n;
consider A being (Subset of ( i -tuples_on ( NAT ) )) such that A1: (for p being (Element of ( i -tuples_on ( NAT ) )) holds (p in A iff P[ p ])) from SUBSET_1:sch 3;
A2: A c= ( i -tuples_on ( n + 1 ) )
proof
let x being set;
assume A3: x in A;
then reconsider p = x as (Element of ( i -tuples_on ( NAT ) ));
A4: ( Sum p ) = n by A1,A3;
( rng p ) c= ( n + 1 )
proof
let y being set;
assume that
A5: y in ( rng p )
and
A6: (not y in ( n + 1 ));
( rng p ) c= ( NAT ) by FINSEQ_1:def 4;
then reconsider k = y as (Element of ( NAT )) by A5;
(not y in { t where t is (Element of ( NAT )): t < ( n + 1 ) }) by A6,AXIOMS:4;
then A7: k >= ( n + 1 );
(ex j being Nat st (j in ( dom p ) & ( p . j ) = k)) by A5,FINSEQ_2:10;
then ( Sum p ) >= k by CKB4:1;
hence contradiction by A4,A7,NAT_1:13;
end;
then (( len p ) = i & p is (FinSequence of ( n + 1 ))) by CARD_1:def 7,FINSEQ_1:def 4;
then p is (Element of ( i -tuples_on n1 )) by FINSEQ_2:92;
hence thesis;
end;
( n + 1 ) is  finite by CARD_1:39;
then ( i -tuples_on ( n + 1 ) ) is  finite by YELLOW15:1;
then reconsider A as  finite (Subset of ( i -tuples_on ( NAT ) )) by A2;
take ( SgmX (( TuplesOrder i ),A) );
thus thesis by A1;
end;
uniqueness
proof
let p1 being (FinSequence of ( i -tuples_on ( NAT ) )),p2 being (FinSequence of ( i -tuples_on ( NAT ) ));
given A1 being  finite (Subset of ( i -tuples_on ( NAT ) )) such that
A8: p1 = ( SgmX (( TuplesOrder i ),A1) )
and
A9: (for p being (Element of ( i -tuples_on ( NAT ) )) holds (p in A1 iff ( Sum p ) = n));

given A2 being  finite (Subset of ( i -tuples_on ( NAT ) )) such that
A10: p2 = ( SgmX (( TuplesOrder i ),A2) )
and
A11: (for p being (Element of ( i -tuples_on ( NAT ) )) holds (p in A2 iff ( Sum p ) = n));

now
let x being set;
thus (x in A1 implies x in A2)
proof
assume A12: x in A1;
then reconsider p = x as (Element of ( i -tuples_on ( NAT ) ));
( Sum p ) = n by A9,A12;
hence thesis by A11;
end;

assume A13: x in A2;
then reconsider p = x as (Element of ( i -tuples_on ( NAT ) ));
( Sum p ) = n by A11,A13;
hence x in A1 by A9;
end;
hence thesis by A8,A10,TARSKI:1;
end;
end;
