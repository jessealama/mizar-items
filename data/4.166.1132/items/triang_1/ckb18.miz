environ
vocabularies NUMBERS,SUBSET_1,XBOOLE_0,ORDERS_1,ORDERS_2,WELLORD1,FINSET_1,XXREAL_0,TARSKI,STRUCT_0,FINSUB_1,SETFAM_1,RELAT_2,RELAT_1,CARD_1,PRE_POLY,FINSEQ_1,PROB_1,PBOOLE,NAT_1,FUNCT_1,ARYTM_3,FUNCOP_1,FUNCT_2,QC_LANG1,ORDINAL2,FINSEQ_2,PARTFUN1,TRIANG_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,RELAT_1,RELAT_2,SETFAM_1,ORDERS_1,DOMAIN_1,NAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,FINSEQ_1,FINSEQ_2,FINSUB_1,STRUCT_0,WELLORD1,SEQM_3,PBOOLE,ORDERS_2,FINSEQOP,FUNCOP_1,XXREAL_0,PRE_POLY,CKB5,CKB12,CKB13,CKB15,CKB17;
definitions RELAT_2,TARSKI,SETFAM_1,FUNCT_1,SEQM_3,WELLORD1,ORDERS_2,FINSEQ_2,SUBSET_1,CKB5,CKB13,CKB15,CKB17;
theorems RELAT_1,ORDERS_2,RELAT_2,ZFMISC_1,TARSKI,SUBSET_1,ORDERS_1,FINSUB_1,NAT_1,FUNCT_2,PBOOLE,FUNCT_1,FINSEQ_1,CARD_2,FINSEQ_4,FINSEQ_2,FUNCOP_1,SEQM_3,SETFAM_1,XBOOLE_0,XBOOLE_1,XXREAL_0,ORDINAL1,PARTFUN1,PRE_POLY,CKB2,CKB3,CKB5,CKB7,CKB8,CKB9,CKB10,CKB13,CKB15,CKB17;
schemes PBOOLE,CLASSES1,MSSUBFAM,PRE_POLY;
registrations XBOOLE_0,SUBSET_1,SETFAM_1,RELAT_1,ORDINAL1,FINSET_1,FINSUB_1,NUMBERS,XXREAL_0,NAT_1,FINSEQ_1,STRUCT_0,ORDERS_2,MEMBERED,VALUED_0,CARD_1,RELSET_1,FUNCT_1,FUNCT_2,PRE_POLY,CKB1,CKB4,CKB6,CKB11,CKB14,CKB16;
constructors SETFAM_1,WELLORD2,DOMAIN_1,FUNCT_3,FINSUB_1,XXREAL_0,NAT_1,TOLER_1,FINSEQOP,PBOOLE,ORDERS_2,SEQM_3,SEQ_1,XREAL_0,MEMBERED,RELSET_1,PRE_POLY,CKB5,CKB13,CKB15,CKB17;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
definition
func NatEmbSeq -> SetSequence
means
:Def6: (for n being Nat holds ( it . n ) = { f where f is (Element of ( Funcs (( Seg n ),( Seg ( n + 1 ) )) )): ( @ f ) is  increasing });
existence
proof
deffunc U((Element of ( NAT ))) = { f where f is (Element of ( Funcs (( Seg $1 ),( Seg ( $1 + 1 ) )) )): ( @ f ) is  increasing };
consider F being (ManySortedSet of ( NAT )) such that A1: (for n being (Element of ( NAT )) holds ( F . n ) = U(n)) from PBOOLE:sch 5;
reconsider F as SetSequence;
take F;
let n being Nat;
n in ( NAT ) by ORDINAL1:def 12;
hence thesis by A1;
end;
uniqueness
proof
let a being SetSequence,b being SetSequence;
assume that
A2: (for n being Nat holds ( a . n ) = { f where f is (Element of ( Funcs (( Seg n ),( Seg ( n + 1 ) )) )): ( @ f ) is  increasing })
and
A3: (for n being Nat holds ( b . n ) = { f where f is (Element of ( Funcs (( Seg n ),( Seg ( n + 1 ) )) )): ( @ f ) is  increasing });
now
let n being set;
assume n in ( NAT );
then reconsider n1 = n as (Element of ( NAT ));
( a . n1 ) = { f where f is (Element of ( Funcs (( Seg n1 ),( Seg ( n1 + 1 ) )) )): ( @ f ) is  increasing } by A2;
hence ( b . n ) c= ( a . n ) by A3;
end;
then A4: b c= a by PBOOLE:def 2;
now
let n being set;
assume n in ( NAT );
then reconsider n1 = n as (Element of ( NAT ));
( a . n1 ) = { f where f is (Element of ( Funcs (( Seg n1 ),( Seg ( n1 + 1 ) )) )): ( @ f ) is  increasing } by A2;
hence ( a . n ) c= ( b . n ) by A3;
end;
then a c= b by PBOOLE:def 2;
hence thesis by A4,PBOOLE:def 10;
end;
end;
