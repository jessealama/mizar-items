environ
vocabularies RLVECT_1,ALGSTR_0,XBOOLE_0,SUBSET_1,ARYTM_1,SUPINF_2,ARYTM_3,VECTSP_1,PARSP_1,ZFMISC_1,STRUCT_0,MCART_1,RELAT_1,GROUP_1,MESFUNC1,PARSP_2;
notations ZFMISC_1,SUBSET_1,MCART_1,DOMAIN_1,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_1,PARSP_1;
theorems MCART_1,VECTSP_1,PARSP_1,RLVECT_1,GROUP_1,CKB1;
registrations XBOOLE_0,STRUCT_0,VECTSP_1,PARSP_1;
constructors DOMAIN_1,PARSP_1;
begin
theorem
Lm2: (for F being  add-associative  right_zeroed  right_complementable non empty addLoopStr holds (for x,y being (Element of F) holds ((( x + ( - y ) ) = ( 0. F ) iff x = y) & (( x - y ) = ( 0. F ) iff x = y))))
proof
let F being  add-associative  right_zeroed  right_complementable non empty addLoopStr;
let x being (Element of F),y being (Element of F);
A1: (( x + ( - y ) ) = ( 0. F ) implies x = y)
proof
assume ( x + ( - y ) ) = ( 0. F );
then ( x + ( ( - y ) + y ) ) = ( ( 0. F ) + y ) by RLVECT_1:def 3;
then ( x + ( 0. F ) ) = ( ( 0. F ) + y ) by RLVECT_1:5;
then x = ( ( 0. F ) + y ) by RLVECT_1:4;
hence thesis by RLVECT_1:4;
end;
A2: (( x - y ) = ( 0. F ) implies x = y)
proof
assume ( x - y ) = ( 0. F );
then ( ( x + ( - y ) ) + y ) = ( ( 0. F ) + y ) by RLVECT_1:def 11;
then ( x + ( ( - y ) + y ) ) = ( ( 0. F ) + y ) by RLVECT_1:def 3;
then ( x + ( 0. F ) ) = ( ( 0. F ) + y ) by RLVECT_1:5;
then x = ( ( 0. F ) + y ) by RLVECT_1:4;
hence thesis by RLVECT_1:4;
end;
(x = y implies ( x - y ) = ( 0. F ))
proof
assume x = y;
then ( x - y ) = ( y + ( - y ) ) by RLVECT_1:def 11;
hence thesis by RLVECT_1:5;
end;
hence thesis by A1,A2,RLVECT_1:5;
end;
