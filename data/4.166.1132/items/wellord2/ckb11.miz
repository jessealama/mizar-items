environ
vocabularies RELAT_1,ORDINAL1,TARSKI,RELAT_2,WELLORD1,XBOOLE_0,SUBSET_1,ZFMISC_1,FUNCT_1,MCART_1,WELLORD2;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,WELLORD1,ORDINAL1,CKB1;
definitions TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,RELAT_2,WELLORD1,CKB1;
theorems TARSKI,FUNCT_1,RELAT_1,RELAT_2,ZFMISC_1,WELLORD1,ORDINAL1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10;
schemes FUNCT_1,RELAT_1,ORDINAL1,XBOOLE_0;
registrations RELAT_1,FUNCT_1,ORDINAL1;
constructors RELAT_2,ORDINAL1,WELLORD1,MCART_1,CKB1;
requirements SUBSET,BOOLE;
begin
reserve A for Ordinal;
reserve B for Ordinal;
theorem
Th11: (( RelIncl A ),( RelIncl B ) are_isomorphic  implies A = B)
proof
A1: ( field ( RelIncl A ) ) = A by CKB1:def 1;
assume A2: ( RelIncl A ),( RelIncl B ) are_isomorphic ;
A3:now
A4: ( RelIncl B ) is  well-ordering by CKB7:1;
A5: ( field ( RelIncl B ) ) = B by CKB1:def 1;
assume A6: A in B;
then A = ( ( RelIncl B ) -Seg A ) by CKB10:1;
then ( RelIncl A ) = ( ( RelIncl B ) |_2 ( ( RelIncl B ) -Seg A ) ) by A5,CKB8:1,WELLORD1:9;
hence contradiction by A2,A6,A5,A4,WELLORD1:40,WELLORD1:46;
end;
assume A <> B;
then A7: (A in B or B in A) by ORDINAL1:14;
then B = ( ( RelIncl A ) -Seg B ) by A3,CKB10:1;
then ( RelIncl B ) = ( ( RelIncl A ) |_2 ( ( RelIncl A ) -Seg B ) ) by A1,CKB8:1,WELLORD1:9;
hence contradiction by A2,A7,A3,A1,CKB7:1,WELLORD1:46;
end;
