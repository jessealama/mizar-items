environ
vocabularies NUMBERS,XBOOLE_0,FINSEQ_1,FUNCT_1,GRAPH_2,ARYTM_3,NAT_1,XXREAL_0,SUBSET_1,TREES_1,TARSKI,CARD_1,ORDINAL1,FINSET_1,MEMBERED,RELAT_1,ORDINAL4,GLIB_000,GLIB_001,ABIAN,ZFMISC_1,ARYTM_1,GRAPH_1,RCOMP_1,SETFAM_1,HELLY;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,FINSET_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,SETFAM_1,FUNCT_1,FINSEQ_1,MEMBERED,NAT_1,TREES_1,XXREAL_2,ABIAN,GRAPH_2,GLIB_000,GLIB_001,GLIB_002,CKB2,CKB27,CKB28,CKB34,CKB52;
definitions TARSKI,XBOOLE_0,GLIB_001,CKB2,CKB34,CKB52;
theorems TARSKI,NAT_1,GRAPH_5,SETFAM_1,XBOOLE_0,XBOOLE_1,GRFUNC_1,FUNCT_1,ZFMISC_1,ORDINAL1,FINSEQ_1,FINSEQ_2,FINSEQ_3,INT_1,EULER_1,CARD_1,XREAL_1,XXREAL_0,CHORD,ABIAN,GLIB_000,GLIB_001,GLIB_002,MSSCYC_1,MEMBERED,GRAPH_2,XXREAL_2,FINSEQ_4,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB30,CKB32,CKB33,CKB34,CKB35,CKB36,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
schemes NAT_1,FINSEQ_1;
registrations FINSET_1,XREAL_0,XXREAL_0,NAT_1,INT_1,RELAT_1,FINSEQ_1,ABIAN,MEMBERED,GLIB_000,GLIB_001,GLIB_002,XXREAL_2,CARD_1,FUNCT_1,XBOOLE_0,CKB14,CKB29,CKB31,CKB37,CKB38;
constructors DOMAIN_1,SETFAM_1,NAT_1,GRAPH_2,GLIB_001,GLIB_002,XXREAL_2,RELSET_1,RAT_1,CKB2,CKB34,CKB52;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
theorem
(for T being _Tree holds (for P1,P2,P3,P4 being (Path of T) holds (for a,b,c being (Vertex of T) holds (((((((P1 = ( T .pathBetween (a,b) ) & P2 = ( T .pathBetween (a,c) )) & P3 = ( T .pathBetween (b,a) )) & P4 = ( T .pathBetween (b,c) )) & (not b in ( P2 .vertices() ))) & (not c in ( P1 .vertices() ))) & (not a in ( P4 .vertices() ))) implies ( P1 . ( len ( maxPrefix (P1,P2) ) ) ) = ( P3 . ( len ( maxPrefix (P3,P4) ) ) )))))
proof
let T being _Tree;
let P1 being (Path of T);
let P2 being (Path of T);
let P3 being (Path of T);
let P4 being (Path of T);
let a being (Vertex of T);
let b being (Vertex of T);
let c being (Vertex of T);
assume that
A1: P1 = ( T .pathBetween (a,b) )
and
A2: P2 = ( T .pathBetween (a,c) )
and
A3: P3 = ( T .pathBetween (b,a) )
and
A4: P4 = ( T .pathBetween (b,c) )
and
A5: (not b in ( P2 .vertices() ))
and
A6: (not c in ( P1 .vertices() ))
and
A7: (not a in ( P4 .vertices() ));
now
assume P4 c= P3;
then A8: ( P4 .vertices() ) c= ( P3 .vertices() ) by CKB15:1;
c in ( P4 .vertices() ) by A4,CKB36:1;
then c in ( P3 .vertices() ) by A8;
hence contradiction by A1,A3,A6,CKB41:1;
end;
then (not c in ( P3 .vertices() )) by A3,A4,CKB46:1;
then A9: ( MiddleVertex (b,a,c) ) = ( P3 . ( len ( maxPrefix (P3,P4) ) ) ) by A3,A4,A7,CKB63:1;
( MiddleVertex (a,b,c) ) = ( P1 . ( len ( maxPrefix (P1,P2) ) ) ) by A1,A2,A5,A6,CKB63:1;
hence thesis by A9,CKB54:1;
end;
