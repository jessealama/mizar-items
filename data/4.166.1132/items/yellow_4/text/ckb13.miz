environ
vocabularies ORDERS_2,SUBSET_1,YELLOW_0,XXREAL_0,EQREL_1,LATTICE3,LATTICES,SETFAM_1,XBOOLE_0,RELAT_2,WAYBEL_0,TARSKI,STRUCT_0,ORDINAL2,REWRITE1,YELLOW_1,ZFMISC_1,RELAT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,LATTICE3,YELLOW_0,DOMAIN_1,STRUCT_0,ORDERS_2,YELLOW_1,WAYBEL_0,YELLOW_3,CKB3,CKB4,CKB5,CKB6;
definitions LATTICE3,TARSKI,WAYBEL_0,XBOOLE_0,CKB3,CKB4;
theorems LATTICE3,ORDERS_2,TARSKI,WAYBEL_0,YELLOW_0,YELLOW_1,YELLOW_2,YELLOW_3,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
registrations STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2;
constructors DOMAIN_1,LATTICE3,YELLOW_1,YELLOW_3,CKB3,CKB4,CKB5,CKB6;
requirements SUBSET,BOOLE;
begin
definition
let L being non  empty RelStr;
let D1 being (Subset of L);
let D2 being (Subset of L);
func D1 "\/" D2 -> (Subset of L) equals 
{ ( x "\/" y ) where x is (Element of L),y is (Element of L): (x in D1 & y in D2) };
coherence
proof
{ ( x "\/" y ) where x is (Element of L),y is (Element of L): (x in D1 & y in D2) } c= (the carrier of L)
proof
let q being set;
assume q in { ( x "\/" y ) where x is (Element of L),y is (Element of L): (x in D1 & y in D2) };
then (ex a,b being (Element of L) st ((q = ( a "\/" b ) & a in D1) & b in D2));
hence thesis;
end;
hence thesis;
end;
end;
