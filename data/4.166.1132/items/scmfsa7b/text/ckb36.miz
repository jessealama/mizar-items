environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_1,AMI_1,SCMFSA_2,RELAT_1,SCMFSA_7,ARYTM_3,ARYTM_1,TARSKI,FUNCT_1,XXREAL_0,PARTFUN1,CAT_1,NAT_1,CARD_1,FUNCOP_1,SCMFSA6A,ORDINAL4,AMI_3,FUNCT_4,INT_1,GRAPHSP,FSM_1,CIRCUIT2,SCMNORM,SCMFSA6B,GLIB_000,SF_MASTR,MSUALG_1,XBOOLE_0,PRE_POLY,UNIALG_2,AMISTD_2,SCMFSA7B,ORDINAL1,AFINSQ_1,PBOOLE,SCMFSA6C,STRUCT_0,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,COMPLEX1,NAT_1,INT_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSEQ_1,FINSEQ_2,FUNCT_4,DOMAIN_1,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,FUNCT_7,SCMFSA_2,AMISTD_1,AMISTD_2,FUNCOP_1,XXREAL_0,ENUMSET1,NAT_D,PBOOLE,AFINSQ_2,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,INT_2,PRE_POLY,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
definitions TARSKI,AFINSQ_1,RELAT_1,FINSEQ_1,FINSEQ_2,SCMFSA_2,FUNCOP_1,SCMFSA6A,SCMFSA6B,COMPOS_1,AMISTD_1,SCMFSA_7,EXTPRO_1,MEMSTR_0,AFINSQ_2,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
theorems SCMFSA_7,NAT_1,GRFUNC_1,FUNCT_1,FUNCT_4,FUNCT_7,ENUMSET1,SCMFSA_2,FUNCOP_1,INT_1,RELAT_1,TARSKI,SCMFSA6A,SF_MASTR,SCMFSA6B,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,AFINSQ_1,COMPOS_1,AFINSQ_2,CARD_1,EXTPRO_1,PARTFUN1,AMISTD_1,MEMSTR_0,CKB1,CKB2,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes NAT_1,AFINSQ_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,FINSEQ_1,FUNCT_7,SCMFSA_2,SF_MASTR,SCMFSA6B,ORDINAL1,FINSET_1,FINSEQ_2,CARD_1,AFINSQ_1,COMPOS_1,AFINSQ_2,ORDINAL5,EXTPRO_1,PBOOLE,FUNCT_4,STRUCT_0,SCMFSA6A,SCMFSA_4,MEMSTR_0,VALUED_1,SCMFSA10,AMISTD_2,CKB3,CKB5,CKB11,CKB12;
constructors ENUMSET1,XXREAL_0,REAL_1,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,NAT_D,RELSET_1,PRE_POLY,DOMAIN_1,AFINSQ_2,PARTFUN3,PBOOLE,AMISTD_1,AMISTD_2,AMI_3,MEMSTR_0,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th26: (for i being (Instruction of ( SCM+FSA )) holds (for a being Int-Location holds (for s being (State of ( SCM+FSA )) holds ((not i destroy a) implies ( ( Exec (i,s) ) . a ) = ( s . a )))))
proof
let i being (Instruction of ( SCM+FSA ));
let a being Int-Location;
let s being (State of ( SCM+FSA ));
assume A1: (not i destroy a);
per cases  by NAT_1:36,SCMFSA_2:16;
suppose ( InsCode i ) = ( 0 );

then i = ( halt ( SCM+FSA ) ) by SCMFSA_2:95;
hence thesis by EXTPRO_1:def 3;
end;
suppose ( InsCode i ) = 1;

then consider da,db being Int-Location such that A5: i = ( da := db ) by SCMFSA_2:30;
da <> a by A1,A5,CKB16:def 1;
hence thesis by A5,SCMFSA_2:63;
end;
suppose ( InsCode i ) = 2;

then consider da,db being Int-Location such that A6: i = ( AddTo (da,db) ) by SCMFSA_2:31;
da <> a by A1,A6,CKB16:def 1;
hence thesis by A6,SCMFSA_2:64;
end;
suppose ( InsCode i ) = 3;

then consider da,db being Int-Location such that A7: i = ( SubFrom (da,db) ) by SCMFSA_2:32;
da <> a by A1,A7,CKB16:def 1;
hence thesis by A7,SCMFSA_2:65;
end;
suppose ( InsCode i ) = 4;

then consider da,db being Int-Location such that A8: i = ( MultBy (da,db) ) by SCMFSA_2:33;
da <> a by A1,A8,CKB16:def 1;
hence thesis by A8,SCMFSA_2:66;
end;
suppose ( InsCode i ) = 5;

then consider da,db being Int-Location such that A9: i = ( Divide (da,db) ) by SCMFSA_2:34;
(da <> a & db <> a) by A1,A9,CKB16:def 1;
hence thesis by A9,SCMFSA_2:67;
end;
suppose ( InsCode i ) = 6;

then (ex loc being (Element of ( NAT )) st i = ( goto loc )) by SCMFSA_2:35;
hence thesis by SCMFSA_2:69;
end;
suppose ( InsCode i ) = 7;

then (ex loc being (Element of ( NAT )) st (ex da being Int-Location st i = ( da =0_goto loc ))) by SCMFSA_2:36;
hence thesis by SCMFSA_2:70;
end;
suppose ( InsCode i ) = 8;

then (ex loc being (Element of ( NAT )) st (ex da being Int-Location st i = ( da >0_goto loc ))) by SCMFSA_2:37;
hence thesis by SCMFSA_2:71;
end;
suppose ( InsCode i ) = 9;

then consider db,da being Int-Location,g being FinSeq-Location such that A10: i = ( da := (g,db) ) by SCMFSA_2:38;
da <> a by A1,A10,CKB16:def 1;
hence thesis by A10,SCMFSA_2:72;
end;
suppose ( InsCode i ) = 10;

then (ex db,da being Int-Location st (ex g being FinSeq-Location st i = ( (g,db) := da ))) by SCMFSA_2:39;
hence thesis by SCMFSA_2:73;
end;
suppose ( InsCode i ) = 11;

then consider da being Int-Location,g being FinSeq-Location such that A11: i = ( da :=len g ) by SCMFSA_2:40;
da <> a by A1,A11,CKB16:def 1;
hence thesis by A11,SCMFSA_2:74;
end;
suppose ( InsCode i ) = 12;

then (ex da being Int-Location st (ex g being FinSeq-Location st i = ( g :=<0,...,0> da ))) by SCMFSA_2:41;
hence thesis by SCMFSA_2:75;
end;
end;
