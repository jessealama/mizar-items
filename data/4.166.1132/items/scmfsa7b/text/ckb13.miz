environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_1,AMI_1,SCMFSA_2,RELAT_1,SCMFSA_7,ARYTM_3,ARYTM_1,TARSKI,FUNCT_1,XXREAL_0,PARTFUN1,CAT_1,NAT_1,CARD_1,FUNCOP_1,SCMFSA6A,ORDINAL4,AMI_3,FUNCT_4,INT_1,GRAPHSP,FSM_1,CIRCUIT2,SCMNORM,SCMFSA6B,GLIB_000,SF_MASTR,MSUALG_1,XBOOLE_0,PRE_POLY,UNIALG_2,AMISTD_2,SCMFSA7B,ORDINAL1,AFINSQ_1,PBOOLE,SCMFSA6C,STRUCT_0,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,COMPLEX1,NAT_1,INT_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSEQ_1,FINSEQ_2,FUNCT_4,DOMAIN_1,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,FUNCT_7,SCMFSA_2,AMISTD_1,AMISTD_2,FUNCOP_1,XXREAL_0,ENUMSET1,NAT_D,PBOOLE,AFINSQ_2,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,INT_2,PRE_POLY;
definitions TARSKI,AFINSQ_1,RELAT_1,FINSEQ_1,FINSEQ_2,SCMFSA_2,FUNCOP_1,SCMFSA6A,SCMFSA6B,COMPOS_1,AMISTD_1,SCMFSA_7,EXTPRO_1,MEMSTR_0,AFINSQ_2;
theorems SCMFSA_7,NAT_1,GRFUNC_1,FUNCT_1,FUNCT_4,FUNCT_7,ENUMSET1,SCMFSA_2,FUNCOP_1,INT_1,RELAT_1,TARSKI,SCMFSA6A,SF_MASTR,SCMFSA6B,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,AFINSQ_1,COMPOS_1,AFINSQ_2,CARD_1,EXTPRO_1,PARTFUN1,AMISTD_1,MEMSTR_0,CKB1,CKB2,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10;
schemes NAT_1,AFINSQ_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,FINSEQ_1,FUNCT_7,SCMFSA_2,SF_MASTR,SCMFSA6B,ORDINAL1,FINSET_1,FINSEQ_2,CARD_1,AFINSQ_1,COMPOS_1,AFINSQ_2,ORDINAL5,EXTPRO_1,PBOOLE,FUNCT_4,STRUCT_0,SCMFSA6A,SCMFSA_4,MEMSTR_0,VALUED_1,SCMFSA10,AMISTD_2,CKB3,CKB5,CKB11,CKB12;
constructors ENUMSET1,XXREAL_0,REAL_1,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,NAT_D,RELSET_1,PRE_POLY,DOMAIN_1,AFINSQ_2,PARTFUN3,PBOOLE,AMISTD_1,AMISTD_2,AMI_3,MEMSTR_0;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve P for (Instruction-Sequence of ( SCM+FSA ));
theorem
(for s being (State of ( SCM+FSA )) holds (for f being FinSeq-Location holds (for p being (FinSequence of ( INT )) holds ((( ( IExec (( f := p ),P,s) ) . f ) = p & (for a being  read-write Int-Location holds ((a <> ( intloc 1 ) & a <> ( intloc 2 )) implies ( ( IExec (( f := p ),P,s) ) . a ) = ( s . a )))) & (for g being FinSeq-Location holds (g <> f implies ( ( IExec (( f := p ),P,s) ) . g ) = ( s . g )))))))
proof
let s being (State of ( SCM+FSA ));
let f being FinSeq-Location;
let p being (FinSequence of ( INT ));
A1: ( ( s +* ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) ) . ( intloc ( 0 ) ) ) = ( ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) . ( intloc ( 0 ) ) ) by FUNCT_4:13,SCMFSA6A:41
.= 1 by SCMFSA6A:43;
reconsider s1 = ( s +* ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) ) as ( 0 ) -started (State of ( SCM+FSA ));
A2: ( f := p ) c= ( P +* ( f := p ) ) by FUNCT_4:25;
thus ( ( IExec (( f := p ),P,s) ) . f ) = ( ( Result (( P +* ( f := p ) ),s1) ) . f )
.= p by A1,A2,SCMFSA_7:7;
hereby
let a being  read-write Int-Location;
(a <> ( intloc ( 0 ) ) & a <> ( IC ( SCM+FSA ) )) by SCMFSA_2:56;
then B6: (not a in ( dom ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) )) by SCMFSA6A:42,TARSKI:def 2;
assume A3: (a <> ( intloc 1 ) & a <> ( intloc 2 ));
thus ( ( IExec (( f := p ),P,s) ) . a ) = ( ( Result (( P +* ( f := p ) ),( s +* ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) )) ) . a )
.= ( s1 . a ) by A1,A2,A3,SCMFSA_7:7
.= ( s . a ) by B6,FUNCT_4:11;
end;
let g being FinSeq-Location;
assume A5: g <> f;
(g <> ( intloc ( 0 ) ) & g <> ( IC ( SCM+FSA ) )) by SCMFSA_2:57,SCMFSA_2:58;
then B6: (not g in ( dom ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) )) by SCMFSA6A:42,TARSKI:def 2;
thus ( ( IExec (( f := p ),P,s) ) . g ) = ( ( Result (( P +* ( f := p ) ),( s +* ( Initialize ( ( intloc ( 0 ) ) .--> 1 ) ) )) ) . g )
.= ( s1 . g ) by A1,A2,A5,SCMFSA_7:7
.= ( s . g ) by B6,FUNCT_4:11;
end;
