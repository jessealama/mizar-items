environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_1,AMI_1,SCMFSA_2,RELAT_1,SCMFSA_7,ARYTM_3,ARYTM_1,TARSKI,FUNCT_1,XXREAL_0,PARTFUN1,CAT_1,NAT_1,CARD_1,FUNCOP_1,SCMFSA6A,ORDINAL4,AMI_3,FUNCT_4,INT_1,GRAPHSP,FSM_1,CIRCUIT2,SCMNORM,SCMFSA6B,GLIB_000,SF_MASTR,MSUALG_1,XBOOLE_0,PRE_POLY,UNIALG_2,AMISTD_2,SCMFSA7B,ORDINAL1,AFINSQ_1,PBOOLE,SCMFSA6C,STRUCT_0,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,COMPLEX1,NAT_1,INT_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSEQ_1,FINSEQ_2,FUNCT_4,DOMAIN_1,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,FUNCT_7,SCMFSA_2,AMISTD_1,AMISTD_2,FUNCOP_1,XXREAL_0,ENUMSET1,NAT_D,PBOOLE,AFINSQ_2,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,INT_2,PRE_POLY,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
definitions TARSKI,AFINSQ_1,RELAT_1,FINSEQ_1,FINSEQ_2,SCMFSA_2,FUNCOP_1,SCMFSA6A,SCMFSA6B,COMPOS_1,AMISTD_1,SCMFSA_7,EXTPRO_1,MEMSTR_0,AFINSQ_2,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
theorems SCMFSA_7,NAT_1,GRFUNC_1,FUNCT_1,FUNCT_4,FUNCT_7,ENUMSET1,SCMFSA_2,FUNCOP_1,INT_1,RELAT_1,TARSKI,SCMFSA6A,SF_MASTR,SCMFSA6B,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,AFINSQ_1,COMPOS_1,AFINSQ_2,CARD_1,EXTPRO_1,PARTFUN1,AMISTD_1,MEMSTR_0,CKB1,CKB2,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36;
schemes NAT_1,AFINSQ_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,FINSEQ_1,FUNCT_7,SCMFSA_2,SF_MASTR,SCMFSA6B,ORDINAL1,FINSET_1,FINSEQ_2,CARD_1,AFINSQ_1,COMPOS_1,AFINSQ_2,ORDINAL5,EXTPRO_1,PBOOLE,FUNCT_4,STRUCT_0,SCMFSA6A,SCMFSA_4,MEMSTR_0,VALUED_1,SCMFSA10,AMISTD_2,CKB3,CKB5,CKB11,CKB12;
constructors ENUMSET1,XXREAL_0,REAL_1,SCMFSA_7,SCMFSA6A,SF_MASTR,SCMFSA6B,NAT_D,RELSET_1,PRE_POLY,DOMAIN_1,AFINSQ_2,PARTFUN3,PBOOLE,AMISTD_1,AMISTD_2,AMI_3,MEMSTR_0,CKB14,CKB15,CKB16,CKB17,CKB18,CKB32,CKB33;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th27: (for s being (State of ( SCM+FSA )) holds (for P being (Instruction-Sequence of ( SCM+FSA )) holds (for I being (Program of ( SCM+FSA )) holds (for a being Int-Location holds (((not I destroy a) & I is_closed_on s,P) implies (for k being (Element of ( NAT )) holds ( ( Comput (( P +* I ),( Initialize s ),k) ) . a ) = ( s . a )))))))
proof
let s being (State of ( SCM+FSA ));
let P being (Instruction-Sequence of ( SCM+FSA ));
let I being (Program of ( SCM+FSA ));
let a being Int-Location;
assume A2: (not I destroy a);
defpred P[ Nat ]
 means
( ( Comput (( P +* I ),( Initialize s ),$1) ) . a ) = ( s . a );
A3: I c= ( P +* I ) by FUNCT_4:25;
assume A4: I is_closed_on s,P;
A5:now
let k being (Element of ( NAT ));
assume A6: P[ k ];
set l = ( IC ( Comput (( P +* I ),( Initialize s ),k) ) );
A7: l in ( dom I ) by A4,CKB32:def 1;
then ( ( P +* I ) . l ) = ( I . l ) by A3,GRFUNC_1:2;
then ( ( P +* I ) . l ) in ( rng I ) by A7,FUNCT_1:def 3;
then A8: (not ( ( P +* I ) . l ) destroy a) by A2,CKB17:def 1;
A9: ( dom ( P +* I ) ) = ( NAT ) by PARTFUN1:def 2;
( ( Comput (( P +* I ),( Initialize s ),( k + 1 )) ) . a ) = ( ( Following (( P +* I ),( Comput (( P +* I ),( Initialize s ),k) )) ) . a ) by EXTPRO_1:3
.= ( ( Exec (( ( P +* I ) . ( IC ( Comput (( P +* I ),( Initialize s ),k) ) ) ),( Comput (( P +* I ),( Initialize s ),k) )) ) . a ) by A9,PARTFUN1:def 6
.= ( ( Comput (( P +* I ),( s +* ( Start-At (( 0 ),( SCM+FSA )) ) ),k) ) . a ) by A8,CKB36:1
.= ( s . a ) by A6;
hence P[ ( k + 1 ) ];
end;
A10: (not a in ( dom ( Start-At (( 0 ),( SCM+FSA )) ) )) by SCMFSA_2:102;
( ( Comput (( P +* I ),( Initialize s ),( 0 )) ) . a ) = ( ( Initialize s ) . a ) by EXTPRO_1:2
.= ( s . a ) by A10,FUNCT_4:11;
then A11: P[ ( 0 ) ];
thus (for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A11,A5);
end;
