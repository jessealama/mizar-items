environ
vocabularies NUMBERS,SUBSET_1,CARD_1,AMI_2,INT_1,XBOOLE_0,FINSEQ_1,TARSKI,RELAT_1,ARYTM_3,FUNCT_1,CARD_3,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,COMPLEX1,MCART_1,PARTFUN1,ORDINAL1,XXREAL_0,ARYTM_1,FUNCT_2,ZFMISC_1,FUNCT_5,SCMPDS_1,GROUP_9,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,PARTFUN1,FUNCT_2,BINOP_1,MCART_1,NUMBERS,XCMPLX_0,CARD_3,INT_1,NAT_1,FINSEQ_1,FINSEQ_4,FUNCOP_1,FUNCT_4,XXREAL_0,CAT_2,AMI_2,INT_2,RECDEF_2,CKB4;
definitions TARSKI,FINSEQ_1,FUNCOP_1,AMI_2,CKB4;
theorems AMI_2,CAT_2,CARD_3,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,FUNCT_4,MCART_1,TARSKI,ZFMISC_1,INT_1,XBOOLE_0,XBOOLE_1,NAT_D,NUMBERS,ORDINAL1,RECDEF_2,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,RELSET_1,FUNCOP_1,NUMBERS,XREAL_0,NAT_1,INT_1,FINSEQ_1,CARD_3,AMI_2,ORDINAL2,XXREAL_0,FUNCT_1,CARD_2,FUNCT_2,CKB6;
constructors XXREAL_0,NAT_1,NAT_D,FINSEQ_4,CAT_2,AMI_2,SETFAM_1,DOMAIN_1,RELSET_1,FUNCOP_1,RECDEF_2,CKB4;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
theorem
(((ex j st k = ( ( 2 * j ) + 1 )) implies (k <> ( 0 ) & (not (ex j st k = ( ( 2 * j ) + 2 ))))) & ((ex j st k = ( ( 2 * j ) + 2 )) implies (k <> ( 0 ) & (not (ex j st k = ( ( 2 * j ) + 1 ))))))
proof
thus ((ex j st k = ( ( 2 * j ) + 1 )) implies (k <> ( 0 ) & (not (ex j st k = ( ( 2 * j ) + 2 )))))
proof
given j such that
A1: k = ( ( 2 * j ) + 1 );

thus k <> ( 0 ) by A1;
given i such that
A2: k = ( ( 2 * i ) + 2 );

A3: ( ( 2 * i ) + ( 2 * 1 ) ) = ( ( 2 * ( i + 1 ) ) + ( 0 ) );
1 = ( ( ( 2 * i ) + 2 ) mod 2 ) by A1,A2,NAT_D:def 2
.= ( 0 ) by A3,NAT_D:def 2;
hence thesis;
end;

thus ((ex j st k = ( ( 2 * j ) + 2 )) implies (k <> ( 0 ) & (not (ex j st k = ( ( 2 * j ) + 1 )))))
proof
given j such that
A4: k = ( ( 2 * j ) + 2 );

thus k <> ( 0 ) by A4;
given i such that
A5: k = ( ( 2 * i ) + 1 );

A6: ( ( 2 * j ) + ( 2 * 1 ) ) = ( ( 2 * ( j + 1 ) ) + ( 0 ) );
1 = ( ( ( 2 * j ) + 2 ) mod 2 ) by A4,A5,NAT_D:def 2
.= ( 0 ) by A6,NAT_D:def 2;
hence contradiction;
end;

end;
