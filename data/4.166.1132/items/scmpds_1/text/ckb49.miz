environ
vocabularies NUMBERS,SUBSET_1,CARD_1,AMI_2,INT_1,XBOOLE_0,FINSEQ_1,TARSKI,RELAT_1,ARYTM_3,FUNCT_1,CARD_3,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,COMPLEX1,MCART_1,PARTFUN1,ORDINAL1,XXREAL_0,ARYTM_1,FUNCT_2,ZFMISC_1,FUNCT_5,SCMPDS_1,GROUP_9,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,CARD_1,PARTFUN1,FUNCT_2,BINOP_1,MCART_1,NUMBERS,XCMPLX_0,CARD_3,INT_1,NAT_1,FINSEQ_1,FINSEQ_4,FUNCOP_1,FUNCT_4,XXREAL_0,CAT_2,AMI_2,INT_2,RECDEF_2,CKB4,CKB9,CKB10,CKB18,CKB19,CKB22,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB34,CKB35,CKB37,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB46,CKB47,CKB48;
definitions TARSKI,FINSEQ_1,FUNCOP_1,AMI_2,CKB4,CKB9,CKB18,CKB19,CKB22,CKB27,CKB28,CKB30,CKB32,CKB34,CKB35,CKB37,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB46,CKB47,CKB48;
theorems AMI_2,CAT_2,CARD_3,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,FUNCT_4,MCART_1,TARSKI,ZFMISC_1,INT_1,XBOOLE_0,XBOOLE_1,NAT_D,NUMBERS,ORDINAL1,RECDEF_2,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,RELSET_1,FUNCOP_1,NUMBERS,XREAL_0,NAT_1,INT_1,FINSEQ_1,CARD_3,AMI_2,ORDINAL2,XXREAL_0,FUNCT_1,CARD_2,FUNCT_2,CKB6,CKB15;
constructors XXREAL_0,NAT_1,NAT_D,FINSEQ_4,CAT_2,AMI_2,SETFAM_1,DOMAIN_1,RELSET_1,FUNCOP_1,RECDEF_2,CKB4,CKB9,CKB18,CKB19,CKB22,CKB26,CKB27,CKB28,CKB29,CKB30,CKB32,CKB34,CKB35,CKB37,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB46,CKB47,CKB48;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve d1 for (Element of ( SCM-Data-Loc ));
reserve d2 for (Element of ( SCM-Data-Loc ));
reserve k1 for Integer;
reserve k2 for Integer;
definition
let x being (Element of ( SCMPDS-Instr ));
let s being SCMPDS-State;
func SCM-Exec-Res (x,s) -> SCMPDS-State equals 
( SCM-Chg (s,( jump_address (s,( x const_INT )) )) ) if (ex k1 st x = [ ( 0 ),( {} ),<* k1 *> ]),( SCM-Chg (( SCM-Chg (s,( x P21address ),( x P22const )) ),( succ ( IC s ) )) ) if (ex d1 st (ex k1 st x = [ 2,( {} ),<* d1,k1 *> ])),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P21address ),( x P22const )) ),(( IC s ) qua (Element of ( NAT )))) ),( succ ( IC s ) )) ) if (ex d1 st (ex k1 st x = [ 3,( {} ),<* d1,k1 *> ])),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( s . ( Address_Add (s,( x address_1 ),( RetSP )) ) )) ),( PopInstrLoc (s,( Address_Add (s,( x address_1 ),( RetIC )) )) )) ) if (ex d1 st x = [ 1,( {} ),<* d1 *> ]),( SCM-Chg (s,( IFEQ (( s . ( Address_Add (s,( x P31address ),( x P32const )) ) ),( 0 ),( succ ( IC s ) ),( jump_address (s,( x P33const )) )) )) ) if (ex d1 st (ex k1 st (ex k2 st x = [ 4,( {} ),<* d1,k1,k2 *> ]))),( SCM-Chg (s,( IFGT (( s . ( Address_Add (s,( x P31address ),( x P32const )) ) ),( 0 ),( succ ( IC s ) ),( jump_address (s,( x P33const )) )) )) ) if (ex d1 st (ex k1 st (ex k2 st x = [ 5,( {} ),<* d1,k1,k2 *> ]))),( SCM-Chg (s,( IFGT (( 0 ),( s . ( Address_Add (s,( x P31address ),( x P32const )) ) ),( succ ( IC s ) ),( jump_address (s,( x P33const )) )) )) ) if (ex d1 st (ex k1 st (ex k2 st x = [ 6,( {} ),<* d1,k1,k2 *> ]))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P31address ),( x P32const )) ),( x P33const )) ),( succ ( IC s ) )) ) if (ex d1 st (ex k1 st (ex k2 st x = [ 7,( {} ),<* d1,k1,k2 *> ]))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P31address ),( x P32const )) ),( ( s . ( Address_Add (s,( x P31address ),( x P32const )) ) ) + ( x P33const ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex k1 st (ex k2 st x = [ 8,( {} ),<* d1,k1,k2 *> ]))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P41address ),( x P43const )) ),( ( s . ( Address_Add (s,( x P41address ),( x P43const )) ) ) + ( s . ( Address_Add (s,( x P42address ),( x P44const )) ) ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex d2 st (ex k1 st (ex k2 st x = [ 9,( {} ),<* d1,d2,k1,k2 *> ])))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P41address ),( x P43const )) ),( ( s . ( Address_Add (s,( x P41address ),( x P43const )) ) ) - ( s . ( Address_Add (s,( x P42address ),( x P44const )) ) ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex d2 st (ex k1 st (ex k2 st x = [ 10,( {} ),<* d1,d2,k1,k2 *> ])))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P41address ),( x P43const )) ),( ( s . ( Address_Add (s,( x P41address ),( x P43const )) ) ) * ( s . ( Address_Add (s,( x P42address ),( x P44const )) ) ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex d2 st (ex k1 st (ex k2 st x = [ 11,( {} ),<* d1,d2,k1,k2 *> ])))),( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P41address ),( x P43const )) ),( s . ( Address_Add (s,( x P42address ),( x P44const )) ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex d2 st (ex k1 st (ex k2 st x = [ 13,( {} ),<* d1,d2,k1,k2 *> ])))),( SCM-Chg (( SCM-Chg (( SCM-Chg (s,( Address_Add (s,( x P41address ),( x P43const )) ),( ( s . ( Address_Add (s,( x P41address ),( x P43const )) ) ) div ( s . ( Address_Add (s,( x P42address ),( x P44const )) ) ) )) ),( Address_Add (s,( x P42address ),( x P44const )) ),( ( s . ( Address_Add (s,( x P41address ),( x P43const )) ) ) mod ( s . ( Address_Add (s,( x P42address ),( x P44const )) ) ) )) ),( succ ( IC s ) )) ) if (ex d1 st (ex d2 st (ex k1 st (ex k2 st x = [ 12,( {} ),<* d1,d2,k1,k2 *> ])))) otherwise s;
coherence;
consistency by MCART_1:25;
end;
