environ
vocabularies STRUCT_0,VECTSP_1,FUNCT_1,ZFMISC_1,XBOOLE_0,FUNCOP_1,SUPINF_2,ALGSTR_0,ARYTM_3,SUBSET_1,RELAT_1,ARYTM_1,RLVECT_1,MESFUNC1,BINOP_1,FUNCT_5,TARSKI,HAHNBAN,HAHNBAN1,MSSUBFAM,UNIALG_1,LATTICES,RLSUB_1,VECTSP10,GROUP_6,RELAT_2,SPPOL_1,BILINEAR;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,DOMAIN_1,FUNCT_1,RELAT_1,STRUCT_0,ALGSTR_0,RLVECT_1,BINOP_1,GROUP_1,VECTSP_1,RELSET_1,FUNCT_2,FUNCOP_1,FUNCT_5,VECTSP_4,HAHNBAN1,VECTSP10,GRCAT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB17,CKB18,CKB31,CKB38,CKB39,CKB40,CKB41,CKB48;
definitions HAHNBAN1,TARSKI,XBOOLE_0,VECTSP_4,BINOP_1,STRUCT_0,GRCAT_1,FUNCT_2,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB17,CKB18,CKB31,CKB38,CKB39,CKB40,CKB41;
theorems FUNCT_5,XBOOLE_1,FUNCT_2,HAHNBAN1,VECTSP_1,FUNCOP_1,RLVECT_1,VECTSP_4,TARSKI,FUNCT_1,REALSET1,ZFMISC_1,DOMAIN_1,VECTSP10,GROUP_1,BINOP_1,STRUCT_0,VECTSP_2,GRCAT_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41;
schemes BINOP_1;
registrations SUBSET_1,RELSET_1,STRUCT_0,VECTSP_1,VECTSP_4,HAHNBAN1,VECTSP10,FUNCT_2,ZFMISC_1,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60;
constructors BORSUK_1,VECTSP10,FUNCOP_1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB9,CKB17,CKB18,CKB31,CKB38,CKB39,CKB40,CKB41;
requirements SUBSET,BOOLE;
begin
registration
let K being  Abelian  add-associative  right_zeroed non  empty addLoopStr;
let V being non  empty VectSpStr over K;
let W being non  empty VectSpStr over K;
let f being  additiveSAF (Form of V,W);
let g being  additiveSAF (Form of V,W);
cluster ( f + g ) ->  additiveSAF;
correctness
proof
let w being (Vector of W);
set Ffg = ( FunctionalSAF (( f + g ),w) );
set Ff = ( FunctionalSAF (f,w) );
set Fg = ( FunctionalSAF (g,w) );
let v being (Vector of V);
let y being (Vector of V);
A1: Ff is  additive by CKB39:def 1;
A2: Fg is  additive by CKB39:def 1;
thus ( Ffg . ( v + y ) ) = ( ( Ff + Fg ) . ( v + y ) ) by CKB23:1
.= ( ( Ff . ( v + y ) ) + ( Fg . ( v + y ) ) ) by HAHNBAN1:def 3
.= ( ( ( Ff . v ) + ( Ff . y ) ) + ( Fg . ( v + y ) ) ) by A1,GRCAT_1:def 8
.= ( ( ( Ff . v ) + ( Ff . y ) ) + ( ( Fg . v ) + ( Fg . y ) ) ) by A2,GRCAT_1:def 8
.= ( ( ( ( Ff . v ) + ( Ff . y ) ) + ( Fg . v ) ) + ( Fg . y ) ) by RLVECT_1:def 3
.= ( ( ( ( Ff . v ) + ( Fg . v ) ) + ( Ff . y ) ) + ( Fg . y ) ) by RLVECT_1:def 3
.= ( ( ( ( Ff + Fg ) . v ) + ( Ff . y ) ) + ( Fg . y ) ) by HAHNBAN1:def 3
.= ( ( ( Ff + Fg ) . v ) + ( ( Ff . y ) + ( Fg . y ) ) ) by RLVECT_1:def 3
.= ( ( ( Ff + Fg ) . v ) + ( ( Ff + Fg ) . y ) ) by HAHNBAN1:def 3
.= ( ( Ffg . v ) + ( ( Ff + Fg ) . y ) ) by CKB23:1
.= ( ( Ffg . v ) + ( Ffg . y ) ) by CKB23:1;
end;
end;
