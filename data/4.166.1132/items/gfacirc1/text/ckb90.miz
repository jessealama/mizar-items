environ
vocabularies NUMBERS,SUBSET_1,MARGREL1,FUNCT_1,FINSEQ_2,FINSEQ_1,XBOOLEAN,TWOSCOMP,CARD_1,RELAT_1,ORDINAL4,TARSKI,XBOOLE_0,CLASSES1,FSM_1,FACIRC_1,CIRCUIT2,MSAFREE2,CIRCCOMB,STRUCT_0,GLIB_000,MSUALG_1,FUNCT_4,LATTICES,CIRCUIT1,PARTFUN1,ARYTM_3,GFACIRC1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,NAT_1,RELAT_1,NUMBERS,STRUCT_0,FUNCT_1,FUNCT_2,FINSEQ_1,FINSEQ_2,MARGREL1,CLASSES1,BINARITH,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,CKB4,CKB6,CKB8,CKB10,CKB20,CKB21,CKB22,CKB23,CKB24,CKB39,CKB40,CKB41,CKB49,CKB50,CKB59,CKB60,CKB63,CKB64,CKB65,CKB66,CKB67,CKB82,CKB83,CKB84;
definitions TARSKI,XBOOLE_0,CIRCUIT2,FACIRC_1,MSAFREE2,XBOOLEAN,CKB4,CKB6,CKB8,CKB10,CKB20,CKB21,CKB22,CKB23,CKB24,CKB39,CKB40,CKB41,CKB49,CKB50,CKB59,CKB60,CKB63,CKB64,CKB65,CKB66,CKB67,CKB82,CKB83,CKB84;
theorems TARSKI,XBOOLE_0,XBOOLE_1,ZFMISC_1,ENUMSET1,RELAT_1,ORDINAL1,FUNCT_1,FUNCT_2,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_6,BINARITH,CIRCUIT1,CIRCUIT2,CIRCCOMB,FACIRC_1,TWOSCOMP,CIRCCMB2,FACIRC_2,XBOOLEAN,CLASSES1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89;
schemes FUNCT_2,FACIRC_1,CKB1,CKB2,CKB3;
registrations RELAT_1,MARGREL1,FINSEQ_2,CARD_3,STRUCT_0,CIRCCOMB,FACIRC_1,ORDINAL1,FINSEQ_1,FUNCT_1,MSAFREE2;
constructors ENUMSET1,XXREAL_0,CLASSES1,BINARITH,CIRCUIT1,CIRCUIT2,FACIRC_1,TWOSCOMP,NAT_1,RELSET_1,CKB4,CKB6,CKB8,CKB10,CKB20,CKB21,CKB22,CKB23,CKB24,CKB39,CKB40,CKB41,CKB49,CKB50,CKB59,CKB60,CKB63,CKB64,CKB65,CKB66,CKB67,CKB82,CKB83,CKB84;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
theorem
Th72: (for x,y,z being set holds (z <> [ <* x,y *>,( xor2c ) ] implies (for s being (State of ( GFA1AdderCirc (x,y,z) )) holds (for a1a2,a1,a2,a3 being (Element of ( BOOLEAN )) holds ((a1a2 = ( s . [ <* x,y *>,( xor2c ) ] ) & a3 = ( s . z )) implies ( ( Following s ) . ( GFA1AdderOutput (x,y,z) ) ) = ( a1a2 'xor' ( 'not' a3 ) ))))))
proof
set f = ( xor2c );
let x being set;
let y being set;
let z being set;
assume that
A1: z <> [ <* x,y *>,f ];
set A = ( GFA1AdderCirc (x,y,z) );
set xy = [ <* x,y *>,f ];
let s being (State of A);
let a1a2 being (Element of ( BOOLEAN ));
let a1 being (Element of ( BOOLEAN ));
let a2 being (Element of ( BOOLEAN ));
let a3 being (Element of ( BOOLEAN ));
assume that
A2: (a1a2 = ( s . xy ) & a3 = ( s . z ));
thus ( ( Following s ) . ( GFA1AdderOutput (x,y,z) ) ) = ( f . <* ( s . xy ),( s . z ) *> ) by A1,CKB19:1
.= ( a1a2 'xor' ( 'not' a3 ) ) by A2,CKB10:def 1;
end;
