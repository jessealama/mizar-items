environ
vocabularies NUMBERS,XREAL_0,ORDINAL1,SUBSET_1,INT_1,RAT_1,RELAT_1,ARYTM_1,NEWTON,ARYTM_3,CARD_1,PREPOWER,FUNCT_1,XXREAL_0,NAT_1,REAL_1,SEQ_1,SEQ_2,ORDINAL2,SQUARE_1,XXREAL_2,SEQ_4,COMPLEX1,VALUED_0,POWER,ABIAN;
notations SUBSET_1,NEWTON,ORDINAL1,XCMPLX_0,XREAL_0,XXREAL_0,COMPLEX1,INT_1,RAT_1,REAL_1,NUMBERS,NAT_1,SEQ_1,SEQ_2,SEQM_3,SQUARE_1,SEQ_4,PREPOWER,ABIAN,XXREAL_2,CKB4,CKB5;
definitions SQUARE_1,XCMPLX_0,INT_1,ABIAN,XXREAL_2,CKB4;
theorems ABSVALUE,NAT_1,SEQ_2,SEQM_3,INT_1,SEQ_4,NEWTON,PREPOWER,TARSKI,FUNCT_2,XREAL_0,XCMPLX_1,XREAL_1,XXREAL_0,ABIAN,CKB1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes SEQ_1;
registrations NUMBERS,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,INT_1,RAT_1,MEMBERED,NEWTON,PREPOWER,XBOOLE_0,SEQ_4,ABIAN;
constructors REAL_1,SQUARE_1,NAT_1,SEQ_2,SEQM_3,SEQ_4,NEWTON,PREPOWER,SEQ_1,XXREAL_2,RELSET_1,ABIAN,BINOP_2,CKB4,CKB5;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve a for  real number;
reserve b for  real number;
reserve c for  real number;
reserve k for Integer;
definition
let a being  real number;
let b being  real number;
func a to_power b ->  real number means 
:Def2: it = ( a #R b ) if a > ( 0 ),it = ( 0 ) if (a = ( 0 ) & b > ( 0 )),(ex k st (k = b & it = ( a #Z k ))) if b is Integer;
consistency
proof
let IT being  real number;
thus (((a > ( 0 ) & a = ( 0 )) & b > ( 0 )) implies (IT = ( a #R b ) iff IT = ( 0 )));
thus ((a > ( 0 ) & b is Integer) implies (IT = ( a #R b ) iff (ex k st (k = b & IT = ( a #Z k )))))
proof
assume A1: a > ( 0 );
assume b is Integer;
then reconsider b as Integer;
( a #R b ) = ( a #Q b ) by A1,PREPOWER:74
.= ( a #Z b ) by A1,PREPOWER:99;
hence thesis;
end;

(((a = ( 0 ) & b > ( 0 )) & b is Integer) implies (IT = ( 0 ) iff (ex k st (k = b & IT = ( a #Z k )))))
proof
assume A2: a = ( 0 );
assume that
A3: b > ( 0 )
and
A4: b is Integer;
b in ( NAT ) by A3,A4,INT_1:3;
then reconsider b as Nat;
( a #Z b ) = ( a |^ b ) by PREPOWER:36
.= ( 0 ) by A2,A3,NAT_1:14,NEWTON:11;
hence thesis;
end;
hence thesis;
end;
existence
proof
now
assume b is Integer;
then reconsider k = b as Integer;
take c = ( a #Z k );
thus (ex k st (k = b & c = ( a #Z k )));
end;
hence thesis;
end;
uniqueness;
end;
