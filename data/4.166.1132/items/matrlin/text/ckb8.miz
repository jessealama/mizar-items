environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,MATRIX_1,FINSEQ_3,RELAT_1,FINSEQ_1,TARSKI,ARYTM_3,XXREAL_0,CARD_1,TREES_1,FUNCT_1,INCSP_1,ORDINAL4,SUBSET_1,VECTSP_1,RLVECT_2,RLVECT_3,CARD_3,ARYTM_1,SUPINF_2,RLVECT_5,FINSET_1,STRUCT_0,RLSUB_1,ALGSTR_0,PARTFUN1,RLVECT_1,ZFMISC_1,QC_LANG1,FUNCT_2,VALUED_1,PRE_POLY,FINSEQ_2,RVSUM_1,FINSEQ_4,FVSUM_1,MATRLIN,MSSUBFAM,UNIALG_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,NAT_1,MOD_2,FINSEQ_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_3,STRUCT_0,ALGSTR_0,MATRIX_1,MATRIX_3,FVSUM_1,RLVECT_1,VECTSP_1,VECTSP_4,VECTSP_6,VECTSP_7,FINSET_1,FINSEQ_3,FINSEQ_2,FINSEQOP,BINOP_1,XXREAL_0,PRE_POLY,GRCAT_1,CKB1,CKB6;
definitions TARSKI,FVSUM_1,FUNCOP_1,ALGSTR_0,PRE_POLY;
theorems TARSKI,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,VECTSP_1,VECTSP_4,VECTSP_6,VECTSP_7,RLVECT_1,FUNCT_1,FUNCT_2,FUNCT_3,MATRIX_1,MATRIX_2,MATRIX_3,MOD_2,ZFMISC_1,NAT_1,FVSUM_1,SUBSET_1,FINSEQOP,FUNCOP_1,RELAT_1,PARTFUN2,XBOOLE_0,XBOOLE_1,RLVECT_2,ORDINAL1,PARTFUN1,PRE_POLY,GRCAT_1,CKB2,CKB3,CKB4,CKB5,CKB7;
schemes FINSEQ_1,FINSEQ_2,FUNCT_2,MATRIX_1,NAT_1,FINSEQ_4;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,FUNCT_2,FINSET_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,STRUCT_0,VECTSP_1,MATRIX_1,CARD_1,VECTSP_7,MOD_2,GRCAT_1,PRE_POLY,RELAT_1,FUNCT_1,FINSEQ_4;
constructors PARTFUN1,BINOP_1,FUNCT_3,SQUARE_1,NAT_1,VECTSP_6,VECTSP_7,MOD_2,FVSUM_1,MATRIX_3,RELSET_1,PRE_POLY,GRCAT_1,CKB1,CKB6;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve K for Field;
reserve V for (VectSp of K);
reserve KL1 for (Linear_Combination of V);
reserve KL2 for (Linear_Combination of V);
reserve KL3 for (Linear_Combination of V);
reserve X for (Subset of V);
theorem
Th10: (((((X is  linearly-independent & ( Carrier KL1 ) c= X) & ( Carrier KL2 ) c= X) & ( Carrier KL3 ) c= X) & ( Sum KL1 ) = ( ( Sum KL2 ) + ( Sum KL3 ) )) implies KL1 = ( KL2 + KL3 ))
proof
assume that
A1: (X is  linearly-independent & ( Carrier KL1 ) c= X)
and
A2: (( Carrier KL2 ) c= X & ( Carrier KL3 ) c= X)
and
A3: ( Sum KL1 ) = ( ( Sum KL2 ) + ( Sum KL3 ) );
(( Carrier ( KL2 + KL3 ) ) c= ( ( Carrier KL2 ) \/ ( Carrier KL3 ) ) & ( ( Carrier KL2 ) \/ ( Carrier KL3 ) ) c= X) by A2,VECTSP_6:23,XBOOLE_1:8;
then A4: ( Carrier ( KL2 + KL3 ) ) c= X by XBOOLE_1:1;
( Sum KL1 ) = ( Sum ( KL2 + KL3 ) ) by A3,VECTSP_6:44;
hence thesis by A1,A4,CKB7:1;
end;
