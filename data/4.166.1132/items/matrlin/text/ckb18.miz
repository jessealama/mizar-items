environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,MATRIX_1,FINSEQ_3,RELAT_1,FINSEQ_1,TARSKI,ARYTM_3,XXREAL_0,CARD_1,TREES_1,FUNCT_1,INCSP_1,ORDINAL4,SUBSET_1,VECTSP_1,RLVECT_2,RLVECT_3,CARD_3,ARYTM_1,SUPINF_2,RLVECT_5,FINSET_1,STRUCT_0,RLSUB_1,ALGSTR_0,PARTFUN1,RLVECT_1,ZFMISC_1,QC_LANG1,FUNCT_2,VALUED_1,PRE_POLY,FINSEQ_2,RVSUM_1,FINSEQ_4,FVSUM_1,MATRLIN,MSSUBFAM,UNIALG_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,NAT_1,MOD_2,FINSEQ_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_3,STRUCT_0,ALGSTR_0,MATRIX_1,MATRIX_3,FVSUM_1,RLVECT_1,VECTSP_1,VECTSP_4,VECTSP_6,VECTSP_7,FINSET_1,FINSEQ_3,FINSEQ_2,FINSEQOP,BINOP_1,XXREAL_0,PRE_POLY,GRCAT_1,CKB1,CKB6,CKB11,CKB13,CKB14,CKB15;
definitions TARSKI,FVSUM_1,FUNCOP_1,ALGSTR_0,PRE_POLY,CKB11,CKB13,CKB14,CKB15;
theorems TARSKI,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,VECTSP_1,VECTSP_4,VECTSP_6,VECTSP_7,RLVECT_1,FUNCT_1,FUNCT_2,FUNCT_3,MATRIX_1,MATRIX_2,MATRIX_3,MOD_2,ZFMISC_1,NAT_1,FVSUM_1,SUBSET_1,FINSEQOP,FUNCOP_1,RELAT_1,PARTFUN2,XBOOLE_0,XBOOLE_1,RLVECT_2,ORDINAL1,PARTFUN1,PRE_POLY,GRCAT_1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes FINSEQ_1,FINSEQ_2,FUNCT_2,MATRIX_1,NAT_1,FINSEQ_4;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,FUNCT_2,FINSET_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,STRUCT_0,VECTSP_1,MATRIX_1,CARD_1,VECTSP_7,MOD_2,GRCAT_1,PRE_POLY,RELAT_1,FUNCT_1,FINSEQ_4,CKB12;
constructors PARTFUN1,BINOP_1,FUNCT_3,SQUARE_1,NAT_1,VECTSP_6,VECTSP_7,MOD_2,FVSUM_1,MATRIX_3,RELSET_1,PRE_POLY,GRCAT_1,CKB1,CKB6,CKB11,CKB13,CKB14,CKB15;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve k for Nat;
reserve x for set;
reserve K for Field;
reserve V1 for  finite-dimensional (VectSp of K);
reserve F for (FinSequence of V1);
theorem
Th15: (for V1 being  add-associative  right_zeroed  right_complementable non  empty addLoopStr holds (for F being (FinSequence of V1) holds ((for k holds (k in ( dom F ) implies ( F /. k ) = ( 0. V1 ))) implies ( Sum F ) = ( 0. V1 ))))
proof
let V1 being  add-associative  right_zeroed  right_complementable non  empty addLoopStr;
let F being (FinSequence of V1);
assume A1: (for k holds (k in ( dom F ) implies ( F /. k ) = ( 0. V1 )));
defpred P[ (FinSequence of V1) ]
 means
((for k holds (k in ( dom $1 ) implies ( $1 /. k ) = ( 0. V1 ))) implies ( Sum $1 ) = ( 0. V1 ));
A2: (for p being (FinSequence of V1) holds (for x being (Element of V1) holds (P[ p ] implies P[ ( p ^ <* x *> ) ])))
proof
let p being (FinSequence of V1);
let x being (Element of V1);
assume A3: ((for k holds (k in ( dom p ) implies ( p /. k ) = ( 0. V1 ))) implies ( Sum p ) = ( 0. V1 ));
A4: ( ( len p ) + 1 ) in ( Seg ( ( len p ) + 1 ) ) by FINSEQ_1:4;
assume A5: (for k holds (k in ( dom ( p ^ <* x *> ) ) implies ( ( p ^ <* x *> ) /. k ) = ( 0. V1 )));
A6: (for k holds (k in ( dom p ) implies ( p /. k ) = ( 0. V1 )))
proof
A7: ( dom p ) c= ( dom ( p ^ <* x *> ) ) by FINSEQ_1:26;
let k;
assume that
A8: k in ( dom p );
reconsider k1 = k as (Element of ( NAT )) by ORDINAL1:def 12;
thus ( p /. k ) = ( p . k ) by A8,PARTFUN1:def 6
.= ( ( p ^ <* x *> ) . k1 ) by A8,FINSEQ_1:def 7
.= ( ( p ^ <* x *> ) /. k ) by A8,A7,PARTFUN1:def 6
.= ( 0. V1 ) by A5,A8,A7;
end;
( len ( p ^ <* x *> ) ) = ( ( len p ) + ( len <* x *> ) ) by FINSEQ_1:22
.= ( ( len p ) + 1 ) by FINSEQ_1:39;
then A9: ( ( len p ) + 1 ) in ( dom ( p ^ <* x *> ) ) by A4,FINSEQ_1:def 3;
A10: x = ( ( p ^ <* x *> ) . ( ( len p ) + 1 ) ) by FINSEQ_1:42;
thus ( Sum ( p ^ <* x *> ) ) = ( ( Sum p ) + ( Sum <* x *> ) ) by RLVECT_1:41
.= ( ( Sum p ) + x ) by RLVECT_1:44
.= ( ( Sum p ) + ( ( p ^ <* x *> ) /. ( ( len p ) + 1 ) ) ) by A9,A10,PARTFUN1:def 6
.= ( ( 0. V1 ) + ( 0. V1 ) ) by A3,A5,A6,A9
.= ( 0. V1 ) by RLVECT_1:def 4;
end;
A11: P[ ( <*> (the carrier of V1) ) ] by RLVECT_1:43;
(for p being (FinSequence of V1) holds P[ p ]) from FINSEQ_2:sch 2(A11,A2);
hence thesis by A1;
end;
