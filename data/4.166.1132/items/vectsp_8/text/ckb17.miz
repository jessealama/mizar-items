environ
vocabularies VECTSP_1,STRUCT_0,GROUP_4,XXREAL_2,LATTICES,RLSUB_2,RLSUB_1,XBOOLE_0,SUBSET_1,GROUP_2,FUNCT_1,ZFMISC_1,RELAT_1,SUPINF_2,SETFAM_1,ARYTM_3,PBOOLE,TARSKI,EQREL_1,REWRITE1,LATTICE3,RLVECT_3,GROUP_6,VECTSP_8,MSSUBFAM,UNIALG_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,LATTICE4,SETFAM_1,RLVECT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,STRUCT_0,VECTSP_1,LATTICES,VECTSP_5,LATTICE3,VECTSP_4,VECTSP_7,GRCAT_1,MOD_2,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB10;
definitions LATTICE3,TARSKI,XBOOLE_0,CKB1,CKB2,CKB6,CKB7,CKB10;
theorems TARSKI,VECTSP_5,LATTICES,LATTICE3,LATTICE4,VECTSP_4,SETFAM_1,VECTSP_7,MOD_2,SUBSET_1,FUNCT_1,FUNCT_2,XBOOLE_0,XBOOLE_1,STRUCT_0,GRCAT_1,CKB1,CKB2,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes FUNCT_2,DOMAIN_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,STRUCT_0,LATTICES,VECTSP_2,VECTSP_4,VECTSP_5,GRCAT_1,MOD_2,RELSET_1,CKB3;
constructors SETFAM_1,BINOP_1,REALSET1,VECTSP_5,VECTSP_7,MOD_2,LATTICE3,LATTICE4,RELSET_1,GRCAT_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB10;
requirements BOOLE,SUBSET;
begin
definition
let L being non  empty LattStr;
redefine attr L is  complete
means
(for X being (Subset of L) holds (ex a being (Element of L) st (a is_less_than X & (for b being (Element of L) holds (b is_less_than X implies b [= a)))));
compatibility
proof
hereby
assume A1: L is  complete;
let X being (Subset of L);
set Y = { c where c is (Element of L): c is_less_than X };
consider p being (Element of L) such that A2: Y is_less_than p and A3: (for r being (Element of L) holds (Y is_less_than r implies p [= r)) by A1,LATTICE3:def 18;
take p;
thus p is_less_than X
proof
let q being (Element of L);
assume A4: q in X;
Y is_less_than q
proof
let s being (Element of L);
assume s in Y;
then (ex t being (Element of L) st (s = t & t is_less_than X));
hence thesis by A4,LATTICE3:def 16;
end;
hence thesis by A3;
end;

let b being (Element of L);
assume b is_less_than X;
then b in Y;
hence b [= p by A2,LATTICE3:def 17;
end;
assume A5: (for X being (Subset of L) holds (ex a being (Element of L) st (a is_less_than X & (for b being (Element of L) holds (b is_less_than X implies b [= a)))));
let X being set;
defpred P[ (Element of L) ]
 means
X is_less_than $1;
set Y = { c where c is (Element of L): P[ c ] };
Y is (Subset of L) from DOMAIN_1:sch 7;
then consider p being (Element of L) such that A6: p is_less_than Y and A7: (for r being (Element of L) holds (r is_less_than Y implies r [= p)) by A5;
take p;
thus X is_less_than p
proof
let q being (Element of L);
assume A8: q in X;
q is_less_than Y
proof
let s being (Element of L);
assume s in Y;
then (ex t being (Element of L) st (s = t & X is_less_than t));
hence thesis by A8,LATTICE3:def 17;
end;
hence thesis by A7;
end;

let r being (Element of L);
assume X is_less_than r;
then r in Y;
hence thesis by A6,LATTICE3:def 16;
end;
end;
