environ
vocabularies TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,SUBSET_1,FINSUB_1,BINOP_1,FINSET_1,FUNCOP_1,SETWISEO;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,RELAT_1,FUNCT_1,FINSUB_1,RELSET_1,FINSET_1,PARTFUN1,FUNCT_2,BINOP_1,FUNCOP_1,CKB16,CKB18,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB33,CKB47,CKB56,CKB64;
definitions BINOP_1,TARSKI,RELAT_1,CKB16,CKB18,CKB33,CKB56,CKB64;
theorems FINSUB_1,ZFMISC_1,SUBSET_1,BINOP_1,TARSKI,FUNCT_1,FUNCT_2,FUNCOP_1,ENUMSET1,RELAT_1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB16,CKB18,CKB19,CKB20,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74;
schemes FINSET_1,FUNCT_2,BINOP_1,SUBSET_1,CKB17,CKB30,CKB31,CKB32;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,FINSET_1,FINSUB_1,CKB15,CKB21;
constructors ENUMSET1,PARTFUN1,BINOP_1,FUNCOP_1,FINSET_1,FINSUB_1,RELSET_1,CKB16,CKB18,CKB25,CKB26,CKB27,CKB28,CKB29,CKB33,CKB47,CKB56,CKB64;
requirements BOOLE,SUBSET;
begin
definition
let A being set;
func singleton A -> (Function of A,( Fin A ))
means
:Def6: (for x being set holds (x in A implies ( it . x ) = { x }));
existence
proof
deffunc U(set) = { $1 };
A1:now
let x being set;
assume A2: x in A;
then reconsider A9 = A as non empty set;
reconsider x9 = x as (Element of A9) by A2;
{. x9 .} in ( Fin A9 );
hence U(x) in ( Fin A );
end;
thus (ex f being (Function of A,( Fin A )) st (for x being set holds (x in A implies ( f . x ) = U(x)))) from FUNCT_2:sch 2(A1);
end;
uniqueness
proof
let IT being (Function of A,( Fin A )),IT9 being (Function of A,( Fin A ));
assume that
A3: (for x being set holds (x in A implies ( IT . x ) = { x }))
and
A4: (for x being set holds (x in A implies ( IT9 . x ) = { x }));
now
let x being set;
assume A5: x in A;
then ( IT . x ) = { x } by A3;
hence ( IT . x ) = ( IT9 . x ) by A4,A5;
end;
hence thesis by FUNCT_2:12;
end;
end;
