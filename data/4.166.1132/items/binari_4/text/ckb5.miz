environ
vocabularies NUMBERS,XBOOLE_0,NAT_1,INT_1,XXREAL_0,CARD_1,RELAT_1,ARYTM_3,POWER,EUCLID,FINSEQ_1,BINOP_2,ZFMISC_1,TARSKI,FUNCT_1,FINSEQ_2,MARGREL1,BINARITH,ARYTM_1,SUBSET_1,PARTFUN1,XBOOLEAN,BINARI_2,BINARI_3,FUNCOP_1,ORDINAL4,COMPLEX1,NEWTON,BINARI_4;
notations INT_1,SUBSET_1,XBOOLEAN,MARGREL1,FUNCOP_1,POWER,BINARITH,BINARI_2,BINARI_3,SERIES_1,NUMBERS,XXREAL_0,XBOOLE_0,NAT_1,NAT_D,BINOP_2,EUCLID,TARSKI,PARTFUN1,FUNCT_1,RELAT_1,ZFMISC_1,INT_2,FINSEQOP,NEWTON,FINSEQ_1,FINSEQ_2;
definitions FINSEQ_2,XBOOLEAN,EUCLID;
theorems POWER,NAT_1,PRE_FF,ABSVALUE,BINARI_3,INT_1,BINARITH,NAT_2,BINARI_2,FINSEQ_1,FINSEQ_2,FINSEQ_4,FUNCOP_1,RVSUM_1,FUNCT_2,ZFMISC_1,INT_3,EULER_2,PEPIN,PREPOWER,XREAL_1,XXREAL_0,XBOOLEAN,NAT_D,VALUED_1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4;
schemes NAT_1;
registrations XBOOLE_0,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,XBOOLEAN,MARGREL1,VALUED_0,FINSEQ_1,FINSEQ_2,RELAT_1,FUNCT_1,CARD_1;
constructors XXREAL_0,REAL_1,NAT_D,FINSEQOP,NEWTON,SERIES_1,BINARITH,BINARI_2,EUCLID,BINARI_3,RVSUM_1,RELSET_1;
requirements REAL,BOOLE,SUBSET,NUMERALS,ARITHM;
begin
reserve n for non  empty Nat;
reserve j for Nat;
reserve l for Nat;
theorem
Th5: (for n being non  empty Nat holds (for x,y being (Tuple of n,( BOOLEAN )) holds ((x = ( 0* n ) & y = ( 0* n )) implies ( carry (x,y) ) = ( 0* n ))))
proof
let n being non  empty Nat;
let x being (Tuple of n,( BOOLEAN ));
let y being (Tuple of n,( BOOLEAN ));
assume that
A1: x = ( 0* n )
and
A2: y = ( 0* n );
A3: (for j being Nat holds ((1 < j & j <= n) implies ( ( carry (x,y) ) . j ) = ( 0 )))
proof
let j being Nat;
assume that
A4: 1 < j
and
A5: j <= n;
reconsider k = ( j - 1 ) as (Element of ( NAT )) by A4,INT_1:5;
( k + 1 ) = j;
then A6: (1 <= k & k < n) by A4,A5,NAT_1:13;
then A7: k in ( Seg n ) by FINSEQ_1:1;
( len ( 0* n ) ) = n by CARD_1:def 7;
then A8: ( x /. k ) = ( ( 0* n ) . k ) by A1,A6,FINSEQ_4:15
.= ( FALSE ) by A7,FUNCOP_1:7;
A9: j = ( k + 1 );
( len ( carry (x,y) ) ) = n by CARD_1:def 7;
then ( ( carry (x,y) ) . j ) = ( ( carry (x,y) ) /. j ) by A4,A5,FINSEQ_4:15
.= ( ( ( ( FALSE ) '&' ( FALSE ) ) 'or' ( ( FALSE ) '&' ( ( carry (x,y) ) /. k ) ) ) 'or' ( ( FALSE ) '&' ( ( carry (x,y) ) /. k ) ) ) by A1,A2,A6,A9,A8,BINARITH:def 2
.= ( FALSE );
hence thesis;
end;
( len ( carry (x,y) ) ) = n by CARD_1:def 7;
then 1 <= ( len ( carry (x,y) ) ) by NAT_1:14;
then A10: ( ( carry (x,y) ) . 1 ) = ( ( carry (x,y) ) /. 1 ) by FINSEQ_4:15
.= ( 0 ) by BINARITH:def 2;
(for l being Nat holds (l in ( Seg n ) implies ( ( carry (x,y) ) . l ) = ( ( 0* n ) . l )))
proof
let l being Nat;
assume that
A11: l in ( Seg n );
A12: 1 <= l by A11,FINSEQ_1:1;
A13: ( ( 0* n ) . l ) = ( 0 ) by A11,FUNCOP_1:7;
per cases  by A11,A12,CKB4:1,FINSEQ_1:1;
suppose l = 1;

hence thesis by A10,A11,FUNCOP_1:7;
end;
suppose A14: (( 1 + 1 ) <= l & l <= n);

then 1 < l by NAT_1:13;
hence thesis by A3,A13,A14;
end;
end;
hence thesis by A1,FINSEQ_2:119;
end;
