environ
vocabularies NUMBERS,XBOOLE_0,NAT_1,INT_1,XXREAL_0,CARD_1,RELAT_1,ARYTM_3,POWER,EUCLID,FINSEQ_1,BINOP_2,ZFMISC_1,TARSKI,FUNCT_1,FINSEQ_2,MARGREL1,BINARITH,ARYTM_1,SUBSET_1,PARTFUN1,XBOOLEAN,BINARI_2,BINARI_3,FUNCOP_1,ORDINAL4,COMPLEX1,NEWTON,BINARI_4;
notations INT_1,SUBSET_1,XBOOLEAN,MARGREL1,FUNCOP_1,POWER,BINARITH,BINARI_2,BINARI_3,SERIES_1,NUMBERS,XXREAL_0,XBOOLE_0,NAT_1,NAT_D,BINOP_2,EUCLID,TARSKI,PARTFUN1,FUNCT_1,RELAT_1,ZFMISC_1,INT_2,FINSEQOP,NEWTON,FINSEQ_1,FINSEQ_2;
definitions FINSEQ_2,XBOOLEAN,EUCLID;
theorems POWER,NAT_1,PRE_FF,ABSVALUE,BINARI_3,INT_1,BINARITH,NAT_2,BINARI_2,FINSEQ_1,FINSEQ_2,FINSEQ_4,FUNCOP_1,RVSUM_1,FUNCT_2,ZFMISC_1,INT_3,EULER_2,PEPIN,PREPOWER,XREAL_1,XXREAL_0,XBOOLEAN,NAT_D,VALUED_1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes NAT_1;
registrations XBOOLE_0,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,XBOOLEAN,MARGREL1,VALUED_0,FINSEQ_1,FINSEQ_2,RELAT_1,FUNCT_1,CARD_1;
constructors XXREAL_0,REAL_1,NAT_D,FINSEQOP,NEWTON,SERIES_1,BINARITH,BINARI_2,EUCLID,BINARI_3,RVSUM_1,RELSET_1;
requirements REAL,BOOLE,SUBSET,NUMERALS,ARITHM;
begin
reserve n for non empty Nat;
reserve l for Nat;
reserve m for Nat;
theorem
Th13: (( l + m ) <= ( ( 2 to_power ( n -' 1 ) ) - 1 ) implies ( ( carry (( n -BinarySequence l ),( n -BinarySequence m )) ) /. n ) = ( FALSE ))
proof
set L = ( n -BinarySequence l );
set M = ( n -BinarySequence m );
set F = ( FALSE );
set T = ( TRUE );
assume A1: ( l + m ) <= ( ( 2 to_power ( n -' 1 ) ) - 1 );
then A2: l < ( 2 to_power ( n -' 1 ) ) by CKB8:1;
n >= 1 by NAT_1:14;
then ( n - 1 ) >= ( 1 - 1 ) by XREAL_1:9;
then ( n -' 1 ) = ( n - 1 ) by XREAL_0:def 2;
then ( 2 to_power ( n -' 1 ) ) < ( 2 to_power n ) by POWER:39,XREAL_1:146;
then A3: ( ( 2 to_power ( n -' 1 ) ) - 1 ) < ( ( 2 to_power n ) - 1 ) by XREAL_1:14;
assume (not ( ( carry (L,M) ) /. n ) = F);
then A4: ( ( carry (L,M) ) /. n ) = T by XBOOLEAN:def 3;
A5: m < ( 2 to_power ( n -' 1 ) ) by A1,CKB8:1;
1 <= n by NAT_1:14;
then A6: n in ( Seg n ) by FINSEQ_1:1;
then A7: ( M /. n ) = ( IFEQ (( ( m div ( 2 to_power ( n -' 1 ) ) ) mod 2 ),( 0 ),F,T) ) by BINARI_3:def 1
.= ( IFEQ (( ( 0 ) mod 2 ),( 0 ),F,T) ) by A5,NAT_D:27
.= ( IFEQ (( 0 ),( 0 ),F,T) ) by NAT_D:26
.= F by FUNCOP_1:def 8;
( L /. n ) = ( IFEQ (( ( l div ( 2 to_power ( n -' 1 ) ) ) mod 2 ),( 0 ),F,T) ) by A6,BINARI_3:def 1
.= ( IFEQ (( ( 0 ) mod 2 ),( 0 ),F,T) ) by A2,NAT_D:27
.= ( IFEQ (( 0 ),( 0 ),F,T) ) by NAT_D:26
.= F by FUNCOP_1:def 8;
then ( ( L + M ) /. n ) = ( ( F 'xor' F ) 'xor' T ) by A4,A6,A7,BINARITH:def 5
.= T;
then A8: ( Absval ( L + M ) ) >= ( 2 to_power ( n -' 1 ) ) by CKB12:1;
( l + m ) < ( 2 to_power ( n -' 1 ) ) by A1,XREAL_1:146,XXREAL_0:2;
hence contradiction by A1,A3,A8,CKB11:1,XXREAL_0:2;
end;
