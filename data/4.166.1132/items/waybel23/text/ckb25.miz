environ
vocabularies XBOOLE_0,ORDERS_2,SUBSET_1,WAYBEL_8,WAYBEL_3,STRUCT_0,TARSKI,WAYBEL_0,XXREAL_0,RCOMP_1,RELAT_2,YELLOW_1,CARD_FIL,YELLOW_0,ORDINAL2,LATTICE3,EQREL_1,FINSET_1,CAT_1,REWRITE1,LATTICES,PRE_TOPC,CARD_1,SETFAM_1,RLVECT_3,ORDINAL1,XXREAL_2,ZFMISC_1,FUNCT_1,WELLORD2,RELAT_1,SEQM_3,YELLOW_2,WAYBEL_1,WELLORD1,FUNCT_2,WAYBEL23;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,DOMAIN_1,STRUCT_0,FINSET_1,ORDINAL1,CARD_1,PRE_TOPC,ORDERS_2,CANTOR_1,LATTICE3,YELLOW_0,YELLOW_1,YELLOW_2,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_8,CKB2,CKB17,CKB18,CKB19,CKB20;
definitions TARSKI,LATTICE3,YELLOW_0,XBOOLE_0,STRUCT_0,CKB17,CKB18,CKB19,CKB20;
theorems TARSKI,SETFAM_1,ZFMISC_1,FUNCT_1,FUNCT_2,CANTOR_1,LATTICE3,YELLOW_0,YELLOW_1,YELLOW_2,YELLOW_3,YELLOW_5,YELLOW12,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_7,WAYBEL_8,WAYBEL10,WAYBEL13,WAYBEL20,WAYBEL21,XBOOLE_0,XBOOLE_1,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB24;
schemes ORDINAL1,FUNCT_2,MONOID_1;
registrations RELSET_1,FINSET_1,CARD_1,STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_3,WAYBEL_7,WAYBEL_8,WAYBEL14,SUBSET_1,CKB21,CKB22,CKB23;
constructors SETFAM_1,DOMAIN_1,LATTICE3,CANTOR_1,ORDERS_3,WAYBEL_1,WAYBEL_3,WAYBEL_8,RELSET_1,WAYBEL20,TOPS_2,CKB2,CKB17,CKB18,CKB19,CKB20;
requirements SUBSET,BOOLE;
begin
theorem
Th16: (for L being non  empty RelStr holds (for S being (Subset of L) holds (S is  join-closed iff (for x,y being (Element of L) holds (((x in S & y in S) &  ex_sup_of { x,y },L) implies ( sup { x,y } ) in S)))))
proof
let L being non  empty RelStr;
let S being (Subset of L);
thus (S is  join-closed implies (for x,y being (Element of L) holds (((x in S & y in S) &  ex_sup_of { x,y },L) implies ( sup { x,y } ) in S)))
proof
assume S is  join-closed;
then A1: ( subrelstr S ) is  join-inheriting by CKB18:def 1;
let x being (Element of L);
let y being (Element of L);
assume that
A2: x in S
and
A3: y in S
and
A4:  ex_sup_of { x,y },L;
(the carrier of ( subrelstr S )) = S by YELLOW_0:def 15;
hence thesis by A1,A2,A3,A4,YELLOW_0:def 17;
end;

assume A5: (for x,y being (Element of L) holds (((x in S & y in S) &  ex_sup_of { x,y },L) implies ( sup { x,y } ) in S));
now
let x being (Element of L);
let y being (Element of L);
assume that
A6: x in (the carrier of ( subrelstr S ))
and
A7: y in (the carrier of ( subrelstr S ))
and
A8:  ex_sup_of { x,y },L;
(the carrier of ( subrelstr S )) = S by YELLOW_0:def 15;
hence ( sup { x,y } ) in (the carrier of ( subrelstr S )) by A5,A6,A7,A8;
end;
then ( subrelstr S ) is  join-inheriting by YELLOW_0:def 17;
hence thesis by CKB18:def 1;
end;
