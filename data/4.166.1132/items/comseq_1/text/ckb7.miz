environ
vocabularies FUNCT_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,TARSKI,XCMPLX_0,ORDINAL1,VALUED_0,FUNCOP_1,COMPLEX1,CARD_1,XBOOLE_0,ARYTM_3,VALUED_1,ARYTM_1,COMSEQ_1;
notations TARSKI,SUBSET_1,XCMPLX_0,NUMBERS,COMPLEX1,RELAT_1,FUNCT_1,NAT_1,ORDINAL1,RELSET_1,FUNCOP_1,VALUED_0,VALUED_1,CKB1,CKB5;
definitions VALUED_1,RELAT_1,COMPLEX1;
theorems COMPLEX1,FUNCT_1,FUNCT_2,TARSKI,SEQ_1,RELSET_1,XCMPLX_1,XCMPLX_0,FUNCOP_1,VALUED_1,ZFMISC_1,RELAT_1,CKB2,CKB3;
schemes CLASSES1,CKB4;
registrations XBOOLE_0,ORDINAL1,RELSET_1,FUNCT_2,NUMBERS,MEMBERED,VALUED_0,VALUED_1,XCMPLX_0,CKB6;
constructors PARTFUN1,FUNCOP_1,REAL_1,COMPLEX1,SEQ_1,VALUED_1,RELSET_1;
requirements NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve x for set;
reserve seq for Complex_Sequence;
theorem
Th3: (seq is  non-zero iff (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0c ))))
proof
thus (seq is  non-zero implies (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0c ))))
proof
assume A1: seq is  non-zero;
let x;
assume x in ( NAT );
then x in ( dom seq ) by CKB3:1;
then ( seq . x ) in ( rng seq ) by FUNCT_1:def 3;
hence thesis by A1,RELAT_1:def 9;
end;

assume A2: (for x holds (x in ( NAT ) implies ( seq . x ) <> ( 0c )));
assume ( 0 ) in ( rng seq );
then (ex x st (x in ( dom seq ) & ( seq . x ) = ( 0 ))) by FUNCT_1:def 3;
hence contradiction by A2;
end;
