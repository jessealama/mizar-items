environ
vocabularies RLVECT_1,ALGSTR_0,BINOP_1,VECTSP_1,LATTICES,XBOOLE_0,SUBSET_1,ARYTM_1,RELAT_1,ARYTM_3,RLSUB_1,SUPINF_2,GROUP_1,STRUCT_0,TARSKI,REALSET1,ZFMISC_1,FUNCT_1,MESFUNC1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,REALSET1,FUNCT_1,FUNCT_2,STRUCT_0,ALGSTR_0,DOMAIN_1,BINOP_1,RLVECT_1,GROUP_1,VECTSP_1,CKB2,CKB10;
definitions TARSKI,RLVECT_1,XBOOLE_0,BINOP_1,REALSET1,STRUCT_0,ALGSTR_0,VECTSP_1,CKB2,CKB10;
theorems FUNCT_1,FUNCT_2,TARSKI,VECTSP_1,ZFMISC_1,RLVECT_1,RELAT_1,VECTSP_2,RELSET_1,XBOOLE_0,XBOOLE_1,STRUCT_0,ALGSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29;
schemes XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,REALSET1,STRUCT_0,VECTSP_1,RELAT_1,ALGSTR_0;
constructors PARTFUN1,BINOP_1,REALSET1,VECTSP_1,RLVECT_1,RELSET_1,CKB2,CKB10;
requirements SUBSET,BOOLE;
begin
reserve GF for  add-associative  right_zeroed  right_complementable  Abelian  associative  well-unital  distributive non empty doubleLoopStr;
reserve V for  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over GF;
reserve X for  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over GF;
reserve Y for  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over GF;
theorem
Th34: ((V is (Subspace of X) & X is (Subspace of Y)) implies V is (Subspace of Y))
proof
assume that
A1: V is (Subspace of X)
and
A2: X is (Subspace of Y);
((the carrier of V) c= (the carrier of X) & (the carrier of X) c= (the carrier of Y)) by A1,A2,CKB10:def 1;
then A3: (the carrier of V) c= (the carrier of Y) by XBOOLE_1:1;
A4: (the addF of V) = ( (the addF of Y) || (the carrier of V) )
proof
set AY = (the addF of Y);
set VX = (the carrier of X);
set AX = (the addF of X);
set VV = (the carrier of V);
set AV = (the addF of V);
VV c= VX by A1,CKB10:def 1;
then A5: [: VV,VV :] c= [: VX,VX :] by ZFMISC_1:96;
AV = ( AX || VV ) by A1,CKB10:def 1;
then AV = ( ( AY || VX ) || VV ) by A2,CKB10:def 1;
hence thesis by A5,FUNCT_1:51;
end;
set MY = (the lmult of Y);
set MX = (the lmult of X);
set MV = (the lmult of V);
set VX = (the carrier of X);
set VV = (the carrier of V);
VV c= VX by A1,CKB10:def 1;
then A6: [: (the carrier of GF),VV :] c= [: (the carrier of GF),(the carrier of X) :] by ZFMISC_1:95;
MV = ( MX | ([: (the carrier of GF),VV :] qua set) ) by A1,CKB10:def 1;
then MV = ( ( MY | ([: (the carrier of GF),VX :] qua set) ) | ([: (the carrier of GF),VV :] qua set) ) by A2,CKB10:def 1;
then A7: MV = ( MY | ([: (the carrier of GF),VV :] qua set) ) by A6,FUNCT_1:51;
( 0. V ) = ( 0. X ) by A1,CKB10:def 1;
then ( 0. V ) = ( 0. Y ) by A2,CKB10:def 1;
hence thesis by A3,A4,A7,CKB10:def 1;
end;
