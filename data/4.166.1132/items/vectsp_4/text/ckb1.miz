environ
vocabularies RLVECT_1,ALGSTR_0,BINOP_1,VECTSP_1,LATTICES,XBOOLE_0,SUBSET_1,ARYTM_1,RELAT_1,ARYTM_3,RLSUB_1,SUPINF_2,GROUP_1,STRUCT_0,TARSKI,REALSET1,ZFMISC_1,FUNCT_1,MESFUNC1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,REALSET1,FUNCT_1,FUNCT_2,STRUCT_0,ALGSTR_0,DOMAIN_1,BINOP_1,RLVECT_1,GROUP_1,VECTSP_1;
definitions TARSKI,RLVECT_1,XBOOLE_0,BINOP_1,REALSET1,STRUCT_0,ALGSTR_0,VECTSP_1;
theorems FUNCT_1,FUNCT_2,TARSKI,VECTSP_1,ZFMISC_1,RLVECT_1,RELAT_1,VECTSP_2,RELSET_1,XBOOLE_0,XBOOLE_1,STRUCT_0,ALGSTR_0;
schemes XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,REALSET1,STRUCT_0,VECTSP_1,RELAT_1,ALGSTR_0;
constructors PARTFUN1,BINOP_1,REALSET1,VECTSP_1,RLVECT_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
theorem
Lm1: (for GF being  add-associative  right_zeroed  right_complementable  Abelian  commutative  associative  well-unital  distributive non empty doubleLoopStr holds (for V being  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over GF holds (for a,b being (Element of GF) holds (for v being (Element of V) holds ( ( a - b ) * v ) = ( ( a * v ) - ( b * v ) )))))
proof
let GF being  add-associative  right_zeroed  right_complementable  Abelian  commutative  associative  well-unital  distributive non empty doubleLoopStr;
let V being  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital non empty VectSpStr over GF;
let a being (Element of GF),b being (Element of GF);
let v being (Element of V);
thus ( ( a - b ) * v ) = ( ( a * v ) + ( ( - b ) * v ) ) by VECTSP_1:def 15
.= ( ( a * v ) - ( b * v ) ) by VECTSP_1:21;
end;
