environ
vocabularies NUMBERS,SUBSET_1,CARD_1,XBOOLE_0,STRUCT_0,SCMFSA7B,FUNCSDOM,AMI_3,AMI_1,AMI_2,FUNCT_7,TARSKI,RELAT_1,ZFMISC_1,FSM_1,FUNCT_1,CAT_1,FINSEQ_1,GRAPHSP,FUNCT_2,CARD_3,ORDINAL1,ARYTM_3,ARYTM_1,SUPINF_2,FUNCOP_1,SCMRING1,GLIB_000,FUNCT_4,ALGSTR_0,RECDEF_2,COMPOS_1,AMISTD_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,FUNCT_1,CARD_1,FUNCT_2,RECDEF_2,STRUCT_0,ALGSTR_0,FUNCSDOM,MCART_1,CARD_3,FINSEQ_1,NUMBERS,FUNCOP_1,FUNCT_4,FUNCT_7,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,SCMRING1,CKB2,CKB4,CKB6,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
definitions STRUCT_0,AMI_3,FUNCOP_1,SCMRING1,COMPOS_1,EXTPRO_1,CARD_1,NAT_1,AMI_2,MEMSTR_0,CKB2,CKB4,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
theorems AMI_2,AMI_3,AMI_5,CARD_3,FUNCOP_1,ENUMSET1,FUNCT_4,MCART_1,SCMRING1,TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,FUNCT_7,ARYTM_3,NAT_1,FINSEQ_1,FUNCT_1,PARTFUN1,PBOOLE,RELAT_1,RECDEF_2,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB2,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,RELSET_1,FUNCOP_1,FINSEQ_1,CARD_3,STRUCT_0,AMI_3,SCMRING1,AMI_2,FUNCT_1,FUNCT_2,ALGSTR_0,ALGSTR_1,GCD_1,COMPOS_1,EXTPRO_1,MEMSTR_0,CARD_1,CKB1,CKB3;
constructors XXREAL_0,FINSEQ_4,REALSET1,CAT_2,AMI_3,SCMRING1,PRE_POLY,RECDEF_2,FUNCT_7,MEMSTR_0,RELSET_1,CKB2,CKB4,CKB6,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve R for  good Ring;
reserve r for (Element of R);
reserve a for (Data-Location of R);
reserve b for (Data-Location of R);
reserve i1 for (Element of ( NAT ));
theorem
Th8: (for I being set holds (I is (Instruction of ( SCM R )) iff (((((((I = [ ( 0 ),( {} ),( {} ) ] or (ex a st (ex b st I = ( a := b )))) or (ex a st (ex b st I = ( AddTo (a,b) )))) or (ex a st (ex b st I = ( SubFrom (a,b) )))) or (ex a st (ex b st I = ( MultBy (a,b) )))) or (ex i1 st I = ( goto (i1,R) ))) or (ex a st (ex i1 st I = ( a =0_goto i1 )))) or (ex a st (ex r st I = ( a := r ))))))
proof
let J being set;
A1: (the Instructions of ( SCM R )) = ( SCM-Instr R ) by CKB2:def 1;
thus (J is (Instruction of ( SCM R )) implies (((((((J = [ ( 0 ),( {} ),( {} ) ] or (ex a st (ex b st J = ( a := b )))) or (ex a st (ex b st J = ( AddTo (a,b) )))) or (ex a st (ex b st J = ( SubFrom (a,b) )))) or (ex a st (ex b st J = ( MultBy (a,b) )))) or (ex i1 st J = ( goto (i1,R) ))) or (ex a st (ex i1 st J = ( a =0_goto i1 )))) or (ex a st (ex r st J = ( a := r )))))
proof
assume J is (Instruction of ( SCM R ));
then (J in ( ( ( { [ ( 0 ),( {} ),( {} ) ] } \/ { [ I,( {} ),<* a,b *> ] where I is (Element of ( Segm 8 )),a is (Element of ( Data-Locations ( SCM ) )),b is (Element of ( Data-Locations ( SCM ) )): I in { 1,2,3,4 } } ) \/ { [ 6,<* i *>,( {} ) ] where i is (Element of ( NAT )): (not contradiction) } ) \/ { [ 7,<* i *>,<* a *> ] where i is (Element of ( NAT )),a is (Element of ( Data-Locations ( SCM ) )): (not contradiction) } ) or J in { [ 5,( {} ),<* a,r *> ] where a is (Element of ( Data-Locations ( SCM ) )),r is (Element of R): (not contradiction) }) by A1,AMI_3:27,XBOOLE_0:def 3;
then ((J in ( ( { [ ( 0 ),( {} ),( {} ) ] } \/ { [ I,( {} ),<* a,b *> ] where I is (Element of ( Segm 8 )),a is (Element of ( Data-Locations ( SCM ) )),b is (Element of ( Data-Locations ( SCM ) )): I in { 1,2,3,4 } } ) \/ { [ 6,<* i *>,( {} ) ] where i is (Element of ( NAT )): (not contradiction) } ) or J in { [ 7,<* i *>,<* a *> ] where i is (Element of ( NAT )),a is (Element of ( Data-Locations ( SCM ) )): (not contradiction) }) or J in { [ 5,( {} ),<* a,r *> ] where a is (Element of ( Data-Locations ( SCM ) )),r is (Element of R): (not contradiction) }) by XBOOLE_0:def 3;
then A2: (((J in ( { [ ( 0 ),( {} ),( {} ) ] } \/ { [ I,( {} ),<* a,b *> ] where I is (Element of ( Segm 8 )),a is (Element of ( Data-Locations ( SCM ) )),b is (Element of ( Data-Locations ( SCM ) )): I in { 1,2,3,4 } } ) or J in { [ 6,<* i *>,( {} ) ] where i is (Element of ( NAT )): (not contradiction) }) or J in { [ 7,<* i *>,<* a *> ] where i is (Element of ( NAT )),a is (Element of ( Data-Locations ( SCM ) )): (not contradiction) }) or J in { [ 5,( {} ),<* a,r *> ] where a is (Element of ( Data-Locations ( SCM ) )),r is (Element of R): (not contradiction) }) by XBOOLE_0:def 3;
per cases  by A2,XBOOLE_0:def 3;
suppose J in { [ ( 0 ),( {} ),( {} ) ] };

hence thesis by TARSKI:def 1;
end;
suppose J in { [ 6,<* i *>,( {} ) ] where i is (Element of ( NAT )): (not contradiction) };

then consider i being (Element of ( NAT )) such that A3: J = [ 6,<* i *>,( {} ) ] and (not contradiction);
reconsider i as (Element of ( NAT ));
J = ( goto (i,R) ) by A3;
hence thesis;
end;
suppose J in { [ 7,<* i *>,<* a *> ] where i is (Element of ( NAT )),a is (Element of ( Data-Locations ( SCM ) )): (not contradiction) };

then consider i being (Element of ( NAT )),a being (Element of ( Data-Locations ( SCM ) )) such that A4: J = [ 7,<* i *>,<* a *> ] and (not contradiction);
reconsider A = a as (Data-Location of R) by CKB5:1,AMI_3:27;
reconsider I = i as (Element of ( NAT ));
J = ( A =0_goto I ) by A4;
hence thesis;
end;
suppose J in { [ 5,( {} ),<* a,r *> ] where a is (Element of ( Data-Locations ( SCM ) )),r is (Element of R): (not contradiction) };

then consider a being (Element of ( Data-Locations ( SCM ) )),r being (Element of R) such that A5: J = [ 5,( {} ),<* a,r *> ] and (not contradiction);
reconsider A = a as (Data-Location of R) by CKB5:1,AMI_3:27;
J = ( A := r ) by A5;
hence thesis;
end;
suppose J in { [ I,( {} ),<* a,b *> ] where I is (Element of ( Segm 8 )),a is (Element of ( Data-Locations ( SCM ) )),b is (Element of ( Data-Locations ( SCM ) )): I in { 1,2,3,4 } };

then consider I being (Element of ( Segm 8 )),a,b being (Element of ( Data-Locations ( SCM ) )) such that A6: (J = [ I,( {} ),<* a,b *> ] & I in { 1,2,3,4 });
reconsider A = a,B = b as (Data-Location of R) by CKB5:1,AMI_3:27;
(((J = ( A := B ) or J = ( AddTo (A,B) )) or J = ( SubFrom (A,B) )) or J = ( MultBy (A,B) )) by A6,ENUMSET1:def 2;
hence thesis;
end;
end;

thus thesis by A1,SCMRING1:18;
end;
