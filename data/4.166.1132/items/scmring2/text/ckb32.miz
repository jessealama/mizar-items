environ
vocabularies NUMBERS,SUBSET_1,CARD_1,XBOOLE_0,STRUCT_0,SCMFSA7B,FUNCSDOM,AMI_3,AMI_1,AMI_2,FUNCT_7,TARSKI,RELAT_1,ZFMISC_1,FSM_1,FUNCT_1,CAT_1,FINSEQ_1,GRAPHSP,FUNCT_2,CARD_3,ORDINAL1,ARYTM_3,ARYTM_1,SUPINF_2,FUNCOP_1,SCMRING1,GLIB_000,FUNCT_4,ALGSTR_0,RECDEF_2,COMPOS_1,AMISTD_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,FUNCT_1,CARD_1,FUNCT_2,RECDEF_2,STRUCT_0,ALGSTR_0,FUNCSDOM,MCART_1,CARD_3,FINSEQ_1,NUMBERS,FUNCOP_1,FUNCT_4,FUNCT_7,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,SCMRING1,CKB2,CKB4,CKB6,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
definitions STRUCT_0,AMI_3,FUNCOP_1,SCMRING1,COMPOS_1,EXTPRO_1,CARD_1,NAT_1,AMI_2,MEMSTR_0,CKB2,CKB4,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
theorems AMI_2,AMI_3,AMI_5,CARD_3,FUNCOP_1,ENUMSET1,FUNCT_4,MCART_1,SCMRING1,TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,FUNCT_7,ARYTM_3,NAT_1,FINSEQ_1,FUNCT_1,PARTFUN1,PBOOLE,RELAT_1,RECDEF_2,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB2,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,RELSET_1,FUNCOP_1,FINSEQ_1,CARD_3,STRUCT_0,AMI_3,SCMRING1,AMI_2,FUNCT_1,FUNCT_2,ALGSTR_0,ALGSTR_1,GCD_1,COMPOS_1,EXTPRO_1,MEMSTR_0,CARD_1,CKB1,CKB3,CKB20;
constructors XXREAL_0,FINSEQ_4,REALSET1,CAT_2,AMI_3,SCMRING1,PRE_POLY,RECDEF_2,FUNCT_7,MEMSTR_0,RELSET_1,CKB2,CKB4,CKB6,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve R for  good Ring;
theorem
Th21: (for I being (Instruction of ( SCM R )) holds (I = [ ( 0 ),( {} ),( {} ) ] implies I is  halting))
proof
let I being (Instruction of ( SCM R ));
assume that
A1: I = [ ( 0 ),( {} ),( {} ) ];
A2: ( I `3_3 ) = ( {} ) by A1,RECDEF_2:def 3;
then A3: ((not (ex mk,ml being (Element of ( Data-Locations ( SCM ) )) st I = [ 1,( {} ),<* mk,ml *> ])) & (not (ex mk,ml being (Element of ( Data-Locations ( SCM ) )) st I = [ 2,( {} ),<* mk,ml *> ]))) by RECDEF_2:def 3;
A4: (not (ex mk being (Element of ( Data-Locations ( SCM ) )) st (ex r being (Element of R) st I = [ 5,( {} ),<* mk,r *> ]))) by A2,RECDEF_2:def 3;
( I `2_3 ) = ( {} ) by A1,RECDEF_2:def 2;
then A5: ((not (ex mk being (Element of ( NAT )) st I = [ 6,<* mk *>,( {} ) ])) & (not (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( Data-Locations ( SCM ) )) st I = [ 7,<* mk *>,<* ml *> ])))) by RECDEF_2:def 2;
reconsider L = I as (Element of ( SCM-Instr R )) by A1,SCMRING1:18;
let s being (State of ( SCM R ));
A6: (the Object-Kind of ( SCM R )) = ( SCM-OK R ) by CKB2:def 1;
reconsider t = s as (SCM-State of R) by A6,CARD_3:107;
A7: ((not (ex mk,ml being (Element of ( Data-Locations ( SCM ) )) st I = [ 3,( {} ),<* mk,ml *> ])) & (not (ex mk,ml being (Element of ( Data-Locations ( SCM ) )) st I = [ 4,( {} ),<* mk,ml *> ]))) by A2,RECDEF_2:def 3;
thus ( Exec (I,s) ) = ( SCM-Exec-Res (L,t) ) by CKB23:1
.= s by A3,A7,A5,A4,AMI_3:27,SCMRING1:def 14;
end;
