environ
vocabularies TARSKI,QC_LANG3,PBOOLE,MSUALG_1,CATALG_1,FINSEQ_1,XBOOLE_0,ZFMISC_1,ARYTM_3,CARD_1,NAT_1,NUMBERS,XXREAL_0,ZF_LANG1,ORDINAL1,TREES_A,ABIAN,CARD_3,MEMBER_1,FINSET_1,FUNCOP_1,FUNCT_1,TREES_4,TREES_2,MSATERM,RELAT_1,MCART_1,MSAFREE,ZF_MODEL,AOFA_000,FINSEQ_2,PARTFUN1,QC_LANG1,FUNCT_2,ORDINAL4,CAT_3,TREES_3,ABCMIZ_0,ABCMIZ_1,ABCMIZ_A,STRUCT_0,FACIRC_1,INSTALG1,MSUALG_2,COMPUT_1,BINTREE1,TREES_9,ARYTM_1,FUNCT_6,SUBSET_1,MARGREL1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FACIRC_1,ENUMSET1,FUNCOP_1,XCMPLX_0,XXREAL_0,NAT_1,NAT_D,MCART_1,FINSET_1,CARD_1,NUMBERS,CARD_3,FINSEQ_1,FINSEQ_2,FINSEQ_4,FUNCT_6,TREES_1,TREES_2,TREES_3,TREES_4,TREES_9,PBOOLE,STRUCT_0,ORDINAL1,MSUALG_1,MSUALG_2,MSAFREE,EQUATION,MSATERM,INSTALG1,CATALG_1,MSAFREE3,AOFA_000,ABCMIZ_1,CKB8,CKB12;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,SUBSET_1,FINSEQ_1,MSAFREE,MSAFREE3,PBOOLE,MSUALG_1,ABCMIZ_1,CKB8,CKB12;
theorems TARSKI,XBOOLE_0,XBOOLE_1,TREES_1,XXREAL_0,XREAL_1,ZFMISC_1,FUNCT_1,FUNCT_2,FINSEQ_1,FINSEQ_2,ENUMSET1,FUNCT_6,INSTALG1,NAT_1,MCART_1,PBOOLE,RELAT_1,RELSET_1,CARD_1,CARD_5,ORDINAL1,MSUALG_2,TREES_3,TREES_4,FINSEQ_3,FUNCOP_1,MSAFREE,MSATERM,MSAFREE3,YELLOW11,PARTFUN1,WELLORD2,ABCMIZ_1,TREES_9,FACIRC_1,REALSET1,CKB1,CKB5,CKB6,CKB8,CKB9,CKB12;
schemes FUNCT_1,NAT_1,RECDEF_1,CLASSES1,FINSEQ_1,CKB2,CKB3,CKB4;
registrations XBOOLE_0,SUBSET_1,XREAL_0,ORDINAL1,FUNCT_1,FINSET_1,STRUCT_0,PBOOLE,MSUALG_2,FINSEQ_1,NAT_1,CARD_1,MSAFREE,TREES_3,TREES_2,FUNCOP_1,RELAT_1,INDEX_1,INSTALG1,MSAFREE3,WAYBEL26,FACIRC_1,ABCMIZ_1,REALSET1,MSATERM,ZFMISC_1,RELSET_1,CKB7,CKB10,CKB11,CKB13,CKB14,CKB15;
constructors RELSET_1,DOMAIN_1,WELLORD2,MSAFREE1,TREES_9,EQUATION,NAT_D,FINSEQ_4,CATALG_1,FACIRC_1,ABCMIZ_1,PRE_POLY,CKB8,CKB12;
requirements BOOLE,SUBSET,NUMERALS,ARITHM,REAL;
begin
theorem
(for S1,S2 being  standardized ConstructorSignature holds ((the carrier' of S1) = (the carrier' of S2) implies ( the ManySortedSign of S1 ) = ( the ManySortedSign of S2 )))
proof
let S1 being  standardized ConstructorSignature;
let S2 being  standardized ConstructorSignature;
assume that
A1: (the carrier' of S1) = (the carrier' of S2);
A2: ((the carrier of S1) = 3 & (the carrier of S2) = 3) by ABCMIZ_1:def 9,YELLOW11:1;
now
let o being (OperSymbol of S1);
reconsider o2 = o as (OperSymbol of S2) by A1;
per cases  by ABCMIZ_1:def 11;
suppose (o = ( * ) or o = ( non_op ));

then ((( (the Arity of S1) . o ) = <* ( an_Adj ) *> & ( (the Arity of S2) . o ) = <* ( an_Adj ) *>) or (( (the Arity of S1) . o ) = <* ( an_Adj ),( a_Type ) *> & ( (the Arity of S2) . o ) = <* ( an_Adj ),( a_Type ) *>)) by ABCMIZ_1:def 9;
hence ( (the Arity of S1) . o ) = ( (the Arity of S2) . o );
end;
suppose (o is  constructor & o2 is  constructor);

then (((( card ( ( o `2 ) `1 ) ) = ( len ( the_arity_of o ) ) & ( card ( ( o `2 ) `1 ) ) = ( len ( the_arity_of o2 ) )) & ( the_arity_of o ) = ( ( len ( the_arity_of o ) ) |-> ( a_Term ) )) & ( the_arity_of o2 ) = ( ( len ( the_arity_of o2 ) ) |-> ( a_Term ) )) by CKB8:def 1,ABCMIZ_1:37;
hence ( (the Arity of S1) . o ) = ( the_arity_of o2 )
.= ( (the Arity of S2) . o );
end;
end;
then A3: (the Arity of S1) = (the Arity of S2) by A1,A2,FUNCT_2:63;
now
let o being (OperSymbol of S1);
reconsider o2 = o as (OperSymbol of S2) by A1;
per cases  by ABCMIZ_1:def 11;
suppose (o = ( * ) or o = ( non_op ));

then ((( (the ResultSort of S1) . o ) = ( a_Type ) & ( (the ResultSort of S2) . o ) = ( a_Type )) or (( (the ResultSort of S1) . o ) = ( an_Adj ) & ( (the ResultSort of S2) . o ) = ( an_Adj ))) by ABCMIZ_1:def 9;
hence ( (the ResultSort of S1) . o ) = ( (the ResultSort of S2) . o );
end;
suppose (o is  constructor & o2 is  constructor);

then (( the_result_sort_of o ) = ( o `1 ) & ( the_result_sort_of o2 ) = ( o `1 )) by CKB8:def 1;
hence ( (the ResultSort of S1) . o ) = ( the_result_sort_of o2 )
.= ( (the ResultSort of S2) . o );
end;
end;
hence thesis by A1,A2,A3,FUNCT_2:63;
end;
