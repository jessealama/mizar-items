environ
vocabularies FUNCT_1,RELAT_1,ORDINAL1,XBOOLE_0,FUNCOP_1,ORDINAL3,ORDINAL2,TARSKI,SUBSET_1,SETFAM_1,ZFMISC_1,MCART_1,FUNCT_4,FINSET_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,RELAT_1,FUNCT_1,FUNCOP_1,MCART_1,SETFAM_1,ORDINAL1,ORDINAL2,ORDINAL3,SUBSET_1,DOMAIN_1,RELSET_1,FUNCT_2,FUNCT_3,FUNCT_4,CKB1,CKB2;
definitions TARSKI,XBOOLE_0,FUNCOP_1,RELAT_1,FUNCT_4,CKB1;
theorems FUNCT_1,ENUMSET1,MCART_1,ZFMISC_1,TARSKI,RELAT_1,ORDINAL3,ORDINAL1,XBOOLE_0,XBOOLE_1,FUNCT_3,FUNCOP_1,FUNCT_4,CKB1;
schemes FUNCT_1,PARTFUN1,ORDINAL2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,ORDINAL2,RELSET_1;
constructors DOMAIN_1,FUNCT_3,FUNCOP_1,ORDINAL3,FUNCT_4,SETFAM_1,RELSET_1,CKB1;
requirements SUBSET,BOOLE,NUMERALS;
begin
reserve x for set;
reserve y for set;
theorem
Lm1: { x } is  finite
proof
set p = ( { ( {} ) } --> x );
A1: ( dom p ) = { ( {} ) } by FUNCOP_1:13;
take p;
(for y holds (y in { x } iff (ex x st (x in ( dom p ) & y = ( p . x )))))
proof
let y;
thus (y in { x } implies (ex x st (x in ( dom p ) & y = ( p . x ))))
proof
assume y in { x };
then A2: y = x by TARSKI:def 1;
take ( {} );
thus ( {} ) in ( dom p ) by A1,TARSKI:def 1;
( {} ) in { ( {} ) } by TARSKI:def 1;
hence thesis by A2,FUNCOP_1:7;
end;

assume (ex z being set st (z in ( dom p ) & y = ( p . z )));
then y = x by FUNCOP_1:7;
hence thesis by TARSKI:def 1;
end;
hence ( rng p ) = { x } by FUNCT_1:def 3;
thus thesis by A1,ORDINAL3:15;
end;
