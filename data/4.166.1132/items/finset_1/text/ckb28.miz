environ
vocabularies FUNCT_1,RELAT_1,ORDINAL1,XBOOLE_0,FUNCOP_1,ORDINAL3,ORDINAL2,TARSKI,SUBSET_1,SETFAM_1,ZFMISC_1,MCART_1,FUNCT_4,FINSET_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,RELAT_1,FUNCT_1,FUNCOP_1,MCART_1,SETFAM_1,ORDINAL1,ORDINAL2,ORDINAL3,SUBSET_1,DOMAIN_1,RELSET_1,FUNCT_2,FUNCT_3,FUNCT_4,CKB1,CKB2;
definitions TARSKI,XBOOLE_0,FUNCOP_1,RELAT_1,FUNCT_4,CKB1;
theorems FUNCT_1,ENUMSET1,MCART_1,ZFMISC_1,TARSKI,RELAT_1,ORDINAL3,ORDINAL1,XBOOLE_0,XBOOLE_1,FUNCT_3,FUNCOP_1,FUNCT_4,CKB1,CKB3,CKB7,CKB18,CKB19,CKB23,CKB24,CKB26,CKB27;
schemes FUNCT_1,PARTFUN1,ORDINAL2,XBOOLE_0,CKB6;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,ORDINAL2,RELSET_1,CKB4,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB20,CKB21,CKB22,CKB25;
constructors DOMAIN_1,FUNCT_3,FUNCOP_1,ORDINAL3,FUNCT_4,SETFAM_1,RELSET_1,CKB1;
requirements SUBSET,BOOLE,NUMERALS;
begin
reserve A for set;
reserve B for set;
reserve x for set;
scheme Finite { A() -> set,P[set] } : P[ A() ]
provided
A1: A() is  finite
and
A2: P[ ( {} ) ]
and
A3: (for x,B being set holds (((x in A() & B c= A()) & P[ B ]) implies P[ ( B \/ { x } ) ]))
proof
now
assume A() <> ( {} );
defpred R[ set ]
 means
(ex B st (B = $1 & P[ B ]));
consider G being set such that A4: (for x holds (x in G iff (x in ( bool A() ) & R[ x ]))) from XBOOLE_0:sch 1;
G c= ( bool A() )
proof
let x;
assume x in G;
hence thesis by A4;
end;
then reconsider GA = G as (Subset-Family of A());
( {} ) c= A() by XBOOLE_1:2;
then GA <> ( {} ) by A2,A4;
then consider B such that A5: B in GA and A6: (for X being set holds (X in GA implies (B c= X implies B = X))) by A1,CKB27:1;
A7: (ex A st (A = B & P[ A ])) by A4,A5;
now
set x = the (Element of ( A() \ B ));
assume B <> A();
then (not A() c= B) by A5,XBOOLE_0:def 10;
then A8: ( A() \ B ) <> ( {} ) by XBOOLE_1:37;
then A9: x in A() by XBOOLE_0:def 5;
then A10: P[ ( B \/ { x } ) ] by A3,A5,A7;
{ x } c= A() by A9,ZFMISC_1:31;
then ( B \/ { x } ) c= A() by A5,XBOOLE_1:8;
then A11: ( B \/ { x } ) in GA by A4,A10;
(not x in B) by A8,XBOOLE_0:def 5;
then (not { x } c= B) by ZFMISC_1:31;
then ( B \/ { x } ) <> B by XBOOLE_1:7;
hence contradiction by A6,A11,XBOOLE_1:7;
end;
hence thesis by A7;
end;
hence thesis by A2;
end;
