environ
vocabularies NUMBERS,FINSEQ_1,QC_LANG1,SUBSET_1,ZF_LANG,XBOOLEAN,XXREAL_0,CARD_1,ORDINAL4,BVFUNC_2,FUNCT_1,CLASSES2,MCART_1,REALSET1,ARYTM_3,NAT_1,RELAT_1,ARYTM_1,TARSKI,XBOOLE_0,QC_LANG2;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,XCMPLX_0,RELAT_1,FUNCT_1,NUMBERS,NAT_1,FINSEQ_1,MCART_1,QC_LANG1,XXREAL_0,CKB8,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB60;
definitions TARSKI,QC_LANG1,XBOOLE_0,CKB8,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB42,CKB43,CKB44,CKB46,CKB47,CKB60;
theorems TARSKI,ENUMSET1,NAT_1,FUNCT_1,FINSEQ_1,QC_LANG1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62;
schemes NAT_1,XBOOLE_0;
registrations RELSET_1,XREAL_0,FINSEQ_1,ORDINAL1;
constructors ENUMSET1,XXREAL_0,XREAL_0,NAT_1,QC_LANG1,CKB8,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB27,CKB28,CKB37,CKB38,CKB39,CKB40,CKB42,CKB43,CKB44,CKB46,CKB47,CKB60;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve F for (Element of ( QC-WFF ));
reserve H for (Element of ( QC-WFF ));
reserve H1 for (Element of ( QC-WFF ));
reserve x for bound_QC-variable;
theorem
Th60: (F is_immediate_constituent_of ( 'not' H ) iff F = H)
proof
thus (F is_immediate_constituent_of ( 'not' H ) implies F = H)
proof
( 'not' H ) is  negative by QC_LANG1:def 17;
then A1: ( ( ( @ ( 'not' H ) ) . 1 ) `1 ) = 1 by QC_LANG1:16;
A2:now
given H1 such that
A3: (( 'not' H ) = ( F '&' H1 ) or ( 'not' H ) = ( H1 '&' F ));

(( F '&' H1 ) is  conjunctive & ( H1 '&' F ) is  conjunctive) by QC_LANG1:def 18;
hence contradiction by A1,A3,QC_LANG1:16;
end;
A4:now
given x such that
A5: ( 'not' H ) = ( All (x,F) );

( All (x,F) ) is  universal by QC_LANG1:def 19;
hence contradiction by A1,A5,QC_LANG1:16;
end;
assume ((( 'not' H ) = ( 'not' F ) or (ex H1 st (( 'not' H ) = ( F '&' H1 ) or ( 'not' H ) = ( H1 '&' F )))) or (ex x st ( 'not' H ) = ( All (x,F) )));
hence thesis by A2,A4,FINSEQ_1:33;
end;

thus thesis by CKB60:def 1;
end;
