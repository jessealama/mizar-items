environ
vocabularies STRUCT_0,SUBSET_1,XBOOLE_0,FUNCT_1,NUMBERS,CARD_3,ORDINAL1,CARD_1,FUNCOP_1,FUNCT_4,RELAT_1,TARSKI,CAT_1,FSM_1,SETFAM_1,GLIB_000,FINSET_1,CIRCUIT2,NAT_1,ARYTM_3,XXREAL_0,MSUALG_1,TURING_1,PARTFUN1,MCART_1,ZFMISC_1,GRAPHSP,ARYTM_1,FUNCT_7,AMI_1,PBOOLE,SCMNORM,GROUP_9,RECDEF_2,COMPOS_1,AMISTD_2,CARD_5,UNIALG_1,MEMSTR_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,SUBSET_1,SETFAM_1,ORDINAL1,CARD_1,PBOOLE,NUMBERS,FUNCT_7,CARD_3,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,FINSET_1,NAT_1,FUNCOP_1,FUNCT_4,FINSEQ_1,FUNCT_2,DOMAIN_1,RECDEF_2,STRUCT_0,XXREAL_0,MEMSTR_0,COMPOS_1,CKB1,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19;
definitions TARSKI,STRUCT_0,FUNCOP_1,ORDINAL1,RELAT_1,PBOOLE,FUNCT_1,PARTFUN1,MCART_1,ZFMISC_1,COMPOS_1,MEMSTR_0,CARD_3,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19;
theorems ZFMISC_1,FUNCT_2,TARSKI,NAT_1,CQC_LANG,CARD_3,FINSEQ_1,FUNCT_4,FUNCOP_1,FINSET_1,FUNCT_1,GRFUNC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,MCART_1,ENUMSET1,SUBSET_1,XXREAL_0,FUNCT_7,INT_1,PARTFUN1,PBOOLE,RECDEF_2,FUNCT_5,COMPOS_1,MEMSTR_0,STRUCT_0,CKB2,CKB5,CKB6,CKB7,CKB12,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes NAT_1,FRAENKEL;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCT_2,FUNCOP_1,FUNCT_4,FINSET_1,XREAL_0,FINSEQ_1,CARD_3,STRUCT_0,INT_1,RELSET_1,GRFUNC_1,PRE_POLY,PBOOLE,COMPOS_1,MEMSTR_0,ZFMISC_1,CARD_1,CKB1,CKB3,CKB4,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15;
constructors SETFAM_1,DOMAIN_1,FUNCT_4,XXREAL_0,FUNCT_7,GRAPH_2,RELSET_1,PRE_POLY,PBOOLE,RECDEF_2,COMPOS_1,MEMSTR_0,CKB1,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve N for non empty  with_non-empty_elements set;
theorem
Th6: (i <= j implies (for N holds (for S being  halting  IC-Ins-separated non empty AMI-Struct over N holds (for p being ( NAT ) -defined (the Instructions of S) -valued Function holds (for s being (State of S) holds (( CurInstr (p,( Comput (p,s,i) )) ) = ( halt S ) implies ( Comput (p,s,j) ) = ( Comput (p,s,i) )))))))
proof
assume i <= j;
then consider k being Nat such that A1: j = ( i + k ) by NAT_1:10;
reconsider k as (Element of ( NAT )) by ORDINAL1:def 12;
A2: j = ( i + k ) by A1;
let N;
let S being  halting  IC-Ins-separated non empty AMI-Struct over N;
let p being ( NAT ) -defined (the Instructions of S) -valued Function;
let s being (State of S);
assume that
A3: ( CurInstr (p,( Comput (p,s,i) )) ) = ( halt S );
defpred P[ (Element of ( NAT )) ]
 means
( Comput (p,s,( i + $1 )) ) = ( Comput (p,s,i) );
A4:now
let k;
assume A5: P[ k ];
( Comput (p,s,( i + ( k + 1 ) )) ) = ( Comput (p,s,( ( i + k ) + 1 )) )
.= ( Following (p,( Comput (p,s,( i + k )) )) ) by CKB21:1
.= ( Comput (p,s,i) ) by A3,A5,CKB6:def 1;
hence P[ ( k + 1 ) ];
end;
A6: P[ ( 0 ) ];
(for k holds P[ k ]) from NAT_1:sch 1(A6,A4);
hence thesis by A2;
end;
