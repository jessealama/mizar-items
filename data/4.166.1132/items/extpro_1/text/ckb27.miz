environ
vocabularies STRUCT_0,SUBSET_1,XBOOLE_0,FUNCT_1,NUMBERS,CARD_3,ORDINAL1,CARD_1,FUNCOP_1,FUNCT_4,RELAT_1,TARSKI,CAT_1,FSM_1,SETFAM_1,GLIB_000,FINSET_1,CIRCUIT2,NAT_1,ARYTM_3,XXREAL_0,MSUALG_1,TURING_1,PARTFUN1,MCART_1,ZFMISC_1,GRAPHSP,ARYTM_1,FUNCT_7,AMI_1,PBOOLE,SCMNORM,GROUP_9,RECDEF_2,COMPOS_1,AMISTD_2,CARD_5,UNIALG_1,MEMSTR_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,SUBSET_1,SETFAM_1,ORDINAL1,CARD_1,PBOOLE,NUMBERS,FUNCT_7,CARD_3,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,FINSET_1,NAT_1,FUNCOP_1,FUNCT_4,FINSEQ_1,FUNCT_2,DOMAIN_1,RECDEF_2,STRUCT_0,XXREAL_0,MEMSTR_0,COMPOS_1,CKB1,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19,CKB24;
definitions TARSKI,STRUCT_0,FUNCOP_1,ORDINAL1,RELAT_1,PBOOLE,FUNCT_1,PARTFUN1,MCART_1,ZFMISC_1,COMPOS_1,MEMSTR_0,CARD_3,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19,CKB24;
theorems ZFMISC_1,FUNCT_2,TARSKI,NAT_1,CQC_LANG,CARD_3,FINSEQ_1,FUNCT_4,FUNCOP_1,FINSET_1,FUNCT_1,GRFUNC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,MCART_1,ENUMSET1,SUBSET_1,XXREAL_0,FUNCT_7,INT_1,PARTFUN1,PBOOLE,RECDEF_2,FUNCT_5,COMPOS_1,MEMSTR_0,STRUCT_0,CKB2,CKB5,CKB6,CKB7,CKB12,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26;
schemes NAT_1,FRAENKEL;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCT_2,FUNCOP_1,FUNCT_4,FINSET_1,XREAL_0,FINSEQ_1,CARD_3,STRUCT_0,INT_1,RELSET_1,GRFUNC_1,PRE_POLY,PBOOLE,COMPOS_1,MEMSTR_0,ZFMISC_1,CARD_1,CKB1,CKB3,CKB4,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15;
constructors SETFAM_1,DOMAIN_1,FUNCT_4,XXREAL_0,FUNCT_7,GRAPH_2,RELSET_1,PRE_POLY,PBOOLE,RECDEF_2,COMPOS_1,MEMSTR_0,CKB1,CKB2,CKB5,CKB6,CKB7,CKB16,CKB17,CKB18,CKB19,CKB24;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve N for non empty  with_non-empty_elements set;
theorem
Th9: (for S being  IC-Ins-separated  halting non empty AMI-Struct over N holds (for P being (Instruction-Sequence of S) holds (for s being (State of S) holds ((ex k st ( P . ( IC ( Comput (P,s,k) ) ) ) = ( halt S )) implies (for i holds ( Result (P,s) ) = ( Result (P,( Comput (P,s,i) )) ))))))
proof
let S being  IC-Ins-separated  halting non empty AMI-Struct over N;
let P being (Instruction-Sequence of S);
let s being (State of S);
given k such that
A1: ( P . ( IC ( Comput (P,s,k) ) ) ) = ( halt S );

let i;
A2: ( dom P ) = ( NAT ) by PARTFUN1:def 2;
set s9 = ( Comput (P,s,k) );
A3: ( CurInstr (P,s9) ) = ( halt S ) by A1,A2,PARTFUN1:def 6;
now
per cases ;
suppose i <= k;

then consider j being Nat such that A4: k = ( i + j ) by NAT_1:10;
reconsider j as (Element of ( NAT )) by ORDINAL1:def 12;
A5: ( Comput (P,s,k) ) = ( Comput (P,( Comput (P,s,i) ),j) ) by A4,CKB22:1;
A6: P halts_on ( Comput (P,s,i) ) by A3,A5,CKB19:def 1,A2;
thus ( Result (P,s) ) = s9 by A1,CKB26:1
.= ( Result (P,( Comput (P,s,i) )) ) by A3,A5,A6,CKB24:def 1;
end;
suppose A7: i >= k;

A8: ( Comput (P,( Comput (P,s,k) ),( 0 )) ) = ( Comput (P,s,k) ) by CKB20:1;
A9: ( Comput (P,s,i) ) = s9 by A3,A7,CKB23:1;
A10: P halts_on ( Comput (P,s,i) ) by CKB19:def 1,A2,A9,A3,A8;
thus ( Result (P,s) ) = s9 by A1,CKB26:1
.= ( Result (P,( Comput (P,s,i) )) ) by A3,A9,A8,A10,CKB24:def 1;
end;
end;
hence thesis;
end;
