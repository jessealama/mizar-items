environ
vocabularies NUMBERS,SUBSET_1,AFINSQ_1,NAT_1,ORDINAL4,XBOOLE_0,TARSKI,RELAT_1,FUNCT_1,ZFMISC_1,XXREAL_0,ARYTM_3,CARD_1,FINSEQ_1,PRE_POLY,NEWTON,SETFAM_1,FLANG_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,NAT_1,FUNCT_1,RELSET_1,FUNCT_2,SETFAM_1,XXREAL_0,AFINSQ_1,CATALAN2,CKB1,CKB2,CKB3,CKB4,CKB5;
definitions TARSKI;
theorems AFINSQ_1,NAT_1,ORDINAL1,SUBSET_1,TARSKI,XBOOLE_0,XBOOLE_1,XREAL_1,ZFMISC_1,XXREAL_0,FUNCT_2,RELAT_1,CKB6,CKB7,CKB8;
schemes CARD_FIL,DOMAIN_1,NAT_1,RECDEF_1,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,ORDINAL1,XXREAL_0,XREAL_0,NAT_1,AFINSQ_1,CATALAN2,FUNCT_1,RELSET_1;
constructors XXREAL_0,XREAL_0,NAT_1,CATALAN2,RELSET_1,ORDINAL4,CKB1,CKB2,CKB3,CKB4,CKB5;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve E for set;
reserve x for set;
reserve a for (Element of ( E ^omega ));
reserve b for (Element of ( E ^omega ));
theorem
Th4: (( a ^ b ) = <% x %> iff ((a = ( <%> E ) & b = <% x %>) or (b = ( <%> E ) & a = <% x %>)))
proof
thus (( a ^ b ) = <% x %> implies ((a = ( <%> E ) & b = <% x %>) or (b = ( <%> E ) & a = <% x %>)))
proof
assume A1: ( a ^ b ) = <% x %>;
then ( len ( a ^ b ) ) = 1 by AFINSQ_1:34;
then ( ( len a ) + ( len b ) ) = 1 by AFINSQ_1:17;
then ((( len a ) = 1 & b = ( <%> E )) or (a = ( <%> E ) & ( len b ) = 1)) by CKB8:1;
hence thesis by A1,AFINSQ_1:29;
end;

assume ((a = ( <%> E ) & b = <% x %>) or (b = ( <%> E ) & a = <% x %>));
hence thesis by AFINSQ_1:29;
end;
