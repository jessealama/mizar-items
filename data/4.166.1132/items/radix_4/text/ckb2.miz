environ
vocabularies NUMBERS,NAT_1,INT_1,XXREAL_0,ARYTM_3,RADIX_1,POWER,RELAT_1,RADIX_3,ARYTM_1,SUBSET_1,FINSEQ_1,NEWTON,CARD_1,FINSEQ_2,TARSKI,FUNCT_1,ORDINAL4,PARTFUN1,CARD_3,RADIX_4;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,NAT_1,NAT_D,FUNCT_1,PARTFUN1,NEWTON,POWER,XXREAL_0,FINSEQ_1,FINSEQ_2,GR_CY_1,RADIX_1,RADIX_3;
definitions RADIX_1;
theorems RADIX_1,POWER,NAT_1,INT_1,FINSEQ_1,FINSEQ_2,NEWTON,RVSUM_1,PREPOWER,JORDAN12,EULER_2,RADIX_3,XREAL_1,XXREAL_0,NAT_D,ORDINAL1,PARTFUN1,XREAL_0,CARD_1,CKB1;
schemes FINSEQ_2,NAT_1;
registrations RELSET_1,NUMBERS,XREAL_0,NAT_1,INT_1,MEMBERED,NEWTON,XBOOLE_0,VALUED_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,POWER,BINARITH,GR_CY_1,RADIX_3;
requirements REAL,SUBSET,BOOLE,NUMERALS,ARITHM;
begin
reserve k for Nat;
reserve i1 for Integer;
theorem
Lm1: (i1 in ( k -SD_Sub_S ) implies (i1 >= ( - ( Radix ( k -' 1 ) ) ) & i1 <= ( ( Radix ( k -' 1 ) ) - 1 )))
proof
A1: ( k -SD_Sub_S ) = { e where e is (Element of ( INT )): (( - ( Radix ( k -' 1 ) ) ) <= e & e <= ( ( Radix ( k -' 1 ) ) - 1 )) } by RADIX_3:def 1;
assume i1 in ( k -SD_Sub_S );
then (ex i being (Element of ( INT )) st ((i = i1 & ( - ( Radix ( k -' 1 ) ) ) <= i) & i <= ( ( Radix ( k -' 1 ) ) - 1 ))) by A1;
hence thesis;
end;
