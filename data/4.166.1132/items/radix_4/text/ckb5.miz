environ
vocabularies NUMBERS,NAT_1,INT_1,XXREAL_0,ARYTM_3,RADIX_1,POWER,RELAT_1,RADIX_3,ARYTM_1,SUBSET_1,FINSEQ_1,NEWTON,CARD_1,FINSEQ_2,TARSKI,FUNCT_1,ORDINAL4,PARTFUN1,CARD_3,RADIX_4;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,NAT_1,NAT_D,FUNCT_1,PARTFUN1,NEWTON,POWER,XXREAL_0,FINSEQ_1,FINSEQ_2,GR_CY_1,RADIX_1,RADIX_3;
definitions RADIX_1;
theorems RADIX_1,POWER,NAT_1,INT_1,FINSEQ_1,FINSEQ_2,NEWTON,RVSUM_1,PREPOWER,JORDAN12,EULER_2,RADIX_3,XREAL_1,XXREAL_0,NAT_D,ORDINAL1,PARTFUN1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4;
schemes FINSEQ_2,NAT_1;
registrations RELSET_1,NUMBERS,XREAL_0,NAT_1,INT_1,MEMBERED,NEWTON,XBOOLE_0,VALUED_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,POWER,BINARITH,GR_CY_1,RADIX_3;
requirements REAL,SUBSET,BOOLE,NUMERALS,ARITHM;
begin
reserve k for Nat;
reserve x for Nat;
reserve y for Nat;
theorem
Th2: (for x,y being Integer holds (for k being Nat holds (3 <= k implies ( SDSub_Add_Carry (( ( SDSub_Add_Carry (x,k) ) + ( SDSub_Add_Carry (y,k) ) ),k) ) = ( 0 ))))
proof
let x being Integer;
let y being Integer;
let k being Nat;
set CC = ( ( SDSub_Add_Carry (x,k) ) + ( SDSub_Add_Carry (y,k) ) );
(( - 1 ) <= ( SDSub_Add_Carry (x,k) ) & ( - 1 ) <= ( SDSub_Add_Carry (y,k) )) by RADIX_3:12;
then A1: ( ( - 1 ) + ( - 1 ) ) <= CC by XREAL_1:7;
assume k >= 3;
then A2: ( k - 1 ) >= ( 3 - 1 ) by XREAL_1:13;
then ( k - 1 ) > ( 0 ) by XXREAL_0:2;
then ( k - 1 ) = ( k -' 1 ) by XREAL_0:def 2;
then A3: ( Radix ( k -' 1 ) ) > 2 by A2,CKB1:1;
(( SDSub_Add_Carry (x,k) ) <= 1 & ( SDSub_Add_Carry (y,k) ) <= 1) by RADIX_3:12;
then CC <= ( 1 + 1 ) by XREAL_1:7;
then A4: CC < ( Radix ( k -' 1 ) ) by A3,XXREAL_0:2;
( - ( Radix ( k -' 1 ) ) ) <= ( - 2 ) by A3,XREAL_1:24;
then ( - ( Radix ( k -' 1 ) ) ) <= CC by A1,XXREAL_0:2;
hence thesis by A4,RADIX_3:def 3;
end;
