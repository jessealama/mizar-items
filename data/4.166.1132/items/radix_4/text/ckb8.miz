environ
vocabularies NUMBERS,NAT_1,INT_1,XXREAL_0,ARYTM_3,RADIX_1,POWER,RELAT_1,RADIX_3,ARYTM_1,SUBSET_1,FINSEQ_1,NEWTON,CARD_1,FINSEQ_2,TARSKI,FUNCT_1,ORDINAL4,PARTFUN1,CARD_3,RADIX_4;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,NAT_1,NAT_D,FUNCT_1,PARTFUN1,NEWTON,POWER,XXREAL_0,FINSEQ_1,FINSEQ_2,GR_CY_1,RADIX_1,RADIX_3;
definitions RADIX_1;
theorems RADIX_1,POWER,NAT_1,INT_1,FINSEQ_1,FINSEQ_2,NEWTON,RVSUM_1,PREPOWER,JORDAN12,EULER_2,RADIX_3,XREAL_1,XXREAL_0,NAT_D,ORDINAL1,PARTFUN1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7;
schemes FINSEQ_2,NAT_1;
registrations RELSET_1,NUMBERS,XREAL_0,NAT_1,INT_1,MEMBERED,NEWTON,XBOOLE_0,VALUED_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,POWER,BINARITH,GR_CY_1,RADIX_3;
requirements REAL,SUBSET,BOOLE,NUMERALS,ARITHM;
begin
reserve n for Nat;
reserve k for Nat;
reserve x for Nat;
theorem
Th5: (for k,x,n being Nat holds (((n >= 1 & k >= 3) & x is_represented_by ( n + 1 ),k) implies ( DigA_SDSub (( SD2SDSub ( DecSD (( x mod ( ( Radix k ) |^ n ) ),n,k) ) ),( n + 1 )) ) = ( SDSub_Add_Carry (( DigA (( DecSD (x,n,k) ),n) ),k) )))
proof
let k being Nat;
let x being Nat;
let n being Nat;
assume that
A1: n >= 1
and
A2: k >= 3;
set xn = ( x mod ( ( Radix k ) |^ n ) );
A3: ( n + 1 ) in ( Seg ( n + 1 ) ) by FINSEQ_1:3;
then ( DigA_SDSub (( SD2SDSub ( DecSD (xn,n,k) ) ),( n + 1 )) ) = ( SD2SDSubDigitS (( DecSD (xn,n,k) ),( n + 1 ),k) ) by RADIX_3:def 8
.= ( SD2SDSubDigit (( DecSD (xn,n,k) ),( n + 1 ),k) ) by A2,A3,RADIX_3:def 7,XXREAL_0:2
.= ( SDSub_Add_Carry (( DigA (( DecSD (xn,n,k) ),( ( n + 1 ) -' 1 )) ),k) ) by RADIX_3:def 6
.= ( SDSub_Add_Carry (( DigA (( DecSD (xn,n,k) ),( n + ( 0 ) )) ),k) ) by NAT_D:34
.= ( SDSub_Add_Carry (( DigA (( DecSD (x,n,k) ),n) ),k) ) by A1,CKB4:1;
hence thesis;
end;
