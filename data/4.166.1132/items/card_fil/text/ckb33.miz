environ
vocabularies FINSET_1,CARD_1,XBOOLE_0,SUBSET_1,CARD_5,SETFAM_1,TARSKI,ZFMISC_1,ORDINAL1,CARD_2,FUNCT_1,RELAT_1,ORDINAL2,FUNCT_2,CARD_3,FUNCOP_1,FUNCT_5,CARD_FIL;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,FUNCOP_1,BINOP_1,FUNCT_5,SETFAM_1,FINSET_1,ORDINAL1,CARD_1,RELSET_1,FUNCT_2,ORDINAL2,CARD_2,CARD_3,CARD_5,CKB4,CKB10,CKB14,CKB15,CKB18,CKB19,CKB20,CKB21,CKB23,CKB24,CKB25,CKB26,CKB29;
definitions TARSKI,FUNCT_1,CARD_1,XBOOLE_0,BINOP_1,SUBSET_1,CKB4,CKB14,CKB18,CKB19,CKB23,CKB24,CKB25,CKB26,CKB29;
theorems TARSKI,FUNCT_1,FUNCT_2,ORDINAL1,ORDINAL2,WELLORD2,CARD_1,CARD_2,CARD_5,SETFAM_1,ZFMISC_1,FUNCT_5,RELAT_1,SUBSET_1,FUNCOP_1,SETWISEO,RELSET_1,FRAENKEL,ORDERS_1,XBOOLE_0,XBOOLE_1,ORDINAL3,CARD_3,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
schemes FUNCT_1,FUNCT_2,DOMAIN_1,FRAENKEL,TREES_2,BINOP_1,CKB2;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FUNCOP_1,FINSET_1,CARD_1,CARD_5,CARD_3,CARD_2,CKB11;
constructors SETFAM_1,WELLORD2,BINOP_1,FUNCOP_1,ORDINAL2,FUNCT_5,CARD_2,CARD_5,NUMBERS,RELSET_1,CKB4,CKB14,CKB15,CKB18,CKB19,CKB23,CKB24,CKB25,CKB26,CKB29;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve X for  infinite set;
reserve Y for (Subset of X);
reserve Y1 for (Subset of X);
reserve Y2 for (Subset of X);
definition
let X;
func Frechet_Filter X -> (Filter of X)
equals
{ Y: ( card ( X \ Y ) ) in ( card X ) };
coherence
proof
defpred P[ set ]
 means
( card ( X \ $1 ) ) in ( card X );
set IT = { Y: P[ Y ] };
A1: IT is (Subset-Family of X) from DOMAIN_1:sch 7;
( card ( X \ X ) ) = ( card ( {} ) ) by XBOOLE_1:37
.= ( 0 );
then A2: ( card ( X \ X ) ) in ( card X ) by ORDINAL3:8;
X c= X;
then X in IT by A2;
then reconsider IT as non empty (Subset-Family of X) by A1;
A3: (for Y1 holds (Y1 in IT implies ( card ( X \ Y1 ) ) in ( card X )))
proof
let Y1;
assume Y1 in IT;
then A4: Y1 in { Y: P[ Y ] };
thus P[ Y1 ] from CKB2:sch 1(A4);
end;
IT is (Filter of X)
proof
thus (not ( {} ) in IT)
proof
assume ( {} ) in IT;
then ( card ( X \ ( {} ) ) ) in ( card X ) by A3;
hence contradiction;
end;

let Y1;
let Y2;
thus ((Y1 in IT & Y2 in IT) implies ( Y1 /\ Y2 ) in IT)
proof
assume (Y1 in IT & Y2 in IT);
then (( card ( X \ Y1 ) ) in ( card X ) & ( card ( X \ Y2 ) ) in ( card X )) by A3;
then ( ( card ( X \ Y1 ) ) +` ( card ( X \ Y2 ) ) ) in ( ( card X ) +` ( card X ) ) by CARD_2:96;
then A5: ( ( card ( X \ Y1 ) ) +` ( card ( X \ Y2 ) ) ) in ( card X ) by CARD_2:75;
( card ( X \ ( Y1 /\ Y2 ) ) ) = ( card ( ( X \ Y1 ) \/ ( X \ Y2 ) ) ) by XBOOLE_1:54;
then ( card ( X \ ( Y1 /\ Y2 ) ) ) in ( card X ) by A5,CARD_2:34,ORDINAL1:12;
hence thesis;
end;

thus ((Y1 in IT & Y1 c= Y2) implies Y2 in IT)
proof
assume (Y1 in IT & Y1 c= Y2);
then (( card ( X \ Y1 ) ) in ( card X ) & ( X \ Y2 ) c= ( X \ Y1 )) by A3,XBOOLE_1:34;
then ( card ( X \ Y2 ) ) in ( card X ) by CARD_1:11,ORDINAL1:12;
hence thesis;
end;

end;
hence thesis;
end;
end;
