environ
vocabularies FINSET_1,CARD_1,XBOOLE_0,SUBSET_1,CARD_5,SETFAM_1,TARSKI,ZFMISC_1,ORDINAL1,CARD_2,FUNCT_1,RELAT_1,ORDINAL2,FUNCT_2,CARD_3,FUNCOP_1,FUNCT_5,CARD_FIL;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,FUNCOP_1,BINOP_1,FUNCT_5,SETFAM_1,FINSET_1,ORDINAL1,CARD_1,RELSET_1,FUNCT_2,ORDINAL2,CARD_2,CARD_3,CARD_5,CKB4,CKB10,CKB14,CKB15,CKB18,CKB19,CKB20,CKB21,CKB23,CKB24,CKB25,CKB26,CKB29;
definitions TARSKI,FUNCT_1,CARD_1,XBOOLE_0,BINOP_1,SUBSET_1,CKB4,CKB14,CKB18,CKB19,CKB23,CKB24,CKB25,CKB26,CKB29;
theorems TARSKI,FUNCT_1,FUNCT_2,ORDINAL1,ORDINAL2,WELLORD2,CARD_1,CARD_2,CARD_5,SETFAM_1,ZFMISC_1,FUNCT_5,RELAT_1,SUBSET_1,FUNCOP_1,SETWISEO,RELSET_1,FRAENKEL,ORDERS_1,XBOOLE_0,XBOOLE_1,ORDINAL3,CARD_3,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB14,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes FUNCT_1,FUNCT_2,DOMAIN_1,FRAENKEL,TREES_2,BINOP_1,CKB2;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FUNCOP_1,FINSET_1,CARD_1,CARD_5,CARD_3,CARD_2,CKB11;
constructors SETFAM_1,WELLORD2,BINOP_1,FUNCOP_1,ORDINAL2,FUNCT_5,CARD_2,CARD_5,NUMBERS,RELSET_1,CKB4,CKB14,CKB15,CKB18,CKB19,CKB23,CKB24,CKB25,CKB26,CKB29;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve X for non empty set;
reserve Z for (Subset of X);
reserve Y1 for (Subset of X);
reserve F for (Filter of X);
reserve Uf for (Filter of X);
reserve S for (Subset-Family of X);
theorem
Th17: (for F holds (ex Uf st (F c= Uf & Uf is  being_ultrafilter)))
proof
let F;
set LargerF = { S: (F c= S & S is (Filter of X)) };
A1: F in LargerF;
{ S: (F c= S & S is (Filter of X)) } c= ( Filters X )
proof
defpred P[ set ]
 means
(F c= $1 & $1 is (Filter of X));
let F2 being set;
assume F2 in { S: (F c= S & S is (Filter of X)) };
then A2: F2 in { S: P[ S ] };
P[ F2 ] from CKB2:sch 1(A2);
hence thesis;
end;
then reconsider LargerF as non empty (Subset of ( Filters X )) by A1;
defpred P[ set ]
 means
(F c= $1 & $1 is (Filter of X));
(for Z being set holds ((Z c= LargerF & Z is  c=-linear) implies (ex Y being set st (Y in LargerF & (for X1 being set holds (X1 in Z implies X1 c= Y))))))
proof
let X1 being set;
assume that
A3: X1 c= LargerF
and
A4: X1 is  c=-linear;
per cases ;
suppose A5: X1 = ( {} );

take F;
thus thesis by A5;
end;
suppose X1 is non empty;

then reconsider X2 = X1 as non empty (Subset of ( Filters X )) by A3,XBOOLE_1:1;
A6: F c= ( union X2 )
proof
defpred P[ set ]
 means
(F c= $1 & $1 is (Filter of X));
consider F1 being set such that A7: F1 in X2 by XBOOLE_0:def 1;
A8: F1 in { S: P[ S ] } by A3,A7;
A9: P[ F1 ] from CKB2:sch 1(A8);
F1 c= ( union X2 ) by A7,ZFMISC_1:74;
hence thesis by A9,XBOOLE_1:1;
end;
( union X2 ) is (Filter of X) by A4,CKB31:1;
then ( union X2 ) in { S: (F c= S & S is (Filter of X)) } by A6;
then reconsider MF = ( union X2 ) as (Element of LargerF);
take MF;
thus thesis by ZFMISC_1:74;
end;
end;
then consider Uf1 being set such that A10: Uf1 in LargerF and A11: (for Z being set holds ((Z in LargerF & Z <> Uf1) implies (not Uf1 c= Z))) by ORDERS_1:65;
reconsider Uf1 as (Element of LargerF) by A10;
reconsider Uf = Uf1 as (Filter of X) by CKB30:1;
take Uf;
A12: Uf in { S: P[ S ] };
A13: P[ Uf ] from CKB2:sch 1(A12);
hence F c= Uf;
thus Uf is  being_ultrafilter
proof
let Z;
per cases ;
suppose Z in Uf;

hence thesis;
end;
suppose A14: (not Z in Uf);

( X \ Z ) in Uf
proof
assume A15: (not ( X \ Z ) in Uf);
A16: (for Y1 holds (Y1 in Uf implies Y1 meets Z))
proof
let Y1;
assume A17: Y1 in Uf;
assume Y1 misses Z;
then Y1 = ( Y1 \ Z ) by XBOOLE_1:83;
then Y1 c= ( X \ Z ) by XBOOLE_1:33;
hence contradiction by A15,A17,CKB4:def 1;
end;
then A18: ( Extend_Filter (Uf,Z) ) is (Filter of X) by CKB28:1;
A19: Z in ( Extend_Filter (Uf,Z) ) by A16,CKB28:1;
A20: Uf c= ( Extend_Filter (Uf,Z) ) by A16,CKB28:1;
then F c= ( Extend_Filter (Uf,Z) ) by A13,XBOOLE_1:1;
then ( Extend_Filter (Uf,Z) ) in LargerF by A18;
hence contradiction by A11,A14,A20,A19;
end;
hence thesis;
end;
end;

end;
