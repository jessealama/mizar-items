environ
vocabularies NUMBERS,SUBSET_1,CQC_LANG,QC_LANG1,SUBSTUT1,MCART_1,MARGREL1,REALSET1,FINSEQ_1,ORDINAL4,XBOOLEAN,CARD_1,ZFMISC_1,RELAT_1,BVFUNC_2,XBOOLE_0,FUNCT_1,TARSKI,ZF_LANG,FUNCT_4,FUNCOP_1,CLASSES2,SUBLEMMA,PARTFUN1,CQC_SIM1,ARYTM_3,XXREAL_0,ARYTM_1,SUBSTUT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FINSEQ_1,FUNCT_1,QC_LANG1,QC_LANG2,QC_LANG3,PARTFUN1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CQC_LANG,FUNCOP_1,RELAT_1,FUNCT_4,FUNCT_2,CQC_SIM1,DOMAIN_1,MCART_1,SUBSTUT1,SUBLEMMA,CKB7,CKB15,CKB16,CKB17,CKB18,CKB24,CKB31,CKB32,CKB33,CKB40;
definitions TARSKI,FUNCOP_1,CKB18,CKB31,CKB32,CKB33,CKB40;
theorems TARSKI,FUNCT_1,MCART_1,XBOOLE_0,XBOOLE_1,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,QC_LANG3,PARTFUN1,RELSET_1,QC_LANG2,SUBSTUT1,FUNCT_4,SUBLEMMA,CQC_SIM1,FUNCT_2,NAT_1,INT_1,XREAL_1,XXREAL_0,FUNCOP_1,FINSEQ_1,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB18,CKB21,CKB22,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB40,CKB41,CKB42,CKB43,CKB44;
schemes CQC_LANG,NAT_1,CKB19,CKB20,CKB39;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XXREAL_0,XREAL_0,NAT_1,INT_1,QC_LANG1,CQC_LANG,SUBSTUT1,SUBLEMMA,CARD_1;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,INT_1,QC_LANG3,CQC_SIM1,SUBLEMMA,RELSET_1,CKB7,CKB15,CKB17,CKB18,CKB24,CKB31,CKB32,CKB33,CKB40;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve k for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve p for (Element of ( CQC-WFF ));
reserve q for (Element of ( CQC-WFF ));
reserve r for (Element of ( CQC-WFF ));
reserve s for (Element of ( CQC-WFF ));
reserve x for bound_QC-variable;
theorem
(for n holds (for p holds ((for q holds (q is_subformula_of p implies ( QuantNbr q ) = n)) implies n = ( 0 ))))
proof
let n;
let p;
assume that
A1: (for q holds (q is_subformula_of p implies ( QuantNbr q ) = n));
defpred P[ (Element of ( CQC-WFF )) ]
 means
($1 is_subformula_of p implies ( QuantNbr $1 ) = ( 0 ));
A2: (for x holds (for r holds (P[ r ] implies P[ ( All (x,r) ) ])))
proof
let x;
let r;
assume that
P[ r ];
now
assume A3: ( All (x,r) ) is_subformula_of p;
r is_immediate_constituent_of ( All (x,r) ) by QC_LANG2:46;
then r is_proper_subformula_of p by A3,QC_LANG2:63;
then r is_subformula_of p by QC_LANG2:def 21;
then A4: ( QuantNbr r ) = n by A1;
( QuantNbr ( All (x,r) ) ) = n by A1,A3;
then ( n + ( - n ) ) = ( ( 1 + n ) + ( - n ) ) by A4,CQC_SIM1:18;
hence contradiction;
end;
hence thesis;
end;
A5: (for r holds (for s holds ((P[ r ] & P[ s ]) implies P[ ( r '&' s ) ])))
proof
let r;
let s;
assume that
A6: (P[ r ] & P[ s ]);
assume A7: ( r '&' s ) is_subformula_of p;
s is_immediate_constituent_of ( r '&' s ) by QC_LANG2:45;
then A8: s is_proper_subformula_of p by A7,QC_LANG2:63;
r is_immediate_constituent_of ( r '&' s ) by QC_LANG2:45;
then r is_proper_subformula_of p by A7,QC_LANG2:63;
then ( QuantNbr ( r '&' s ) ) = ( ( 0 ) + ( 0 ) ) by A6,A8,CQC_SIM1:17,QC_LANG2:def 21;
hence thesis;
end;
(for r holds (P[ r ] implies P[ ( 'not' r ) ]))
proof
let r;
assume that
A9: P[ r ];
A10: r is_immediate_constituent_of ( 'not' r ) by QC_LANG2:43;
assume ( 'not' r ) is_subformula_of p;
then r is_proper_subformula_of p by A10,QC_LANG2:63;
hence thesis by A9,CQC_SIM1:16,QC_LANG2:def 21;
end;
then A11: (for r holds (for s holds (for x holds (for k holds (for l being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds ((((P[ ( VERUM ) ] & P[ ( P ! l ) ]) & (P[ r ] implies P[ ( 'not' r ) ])) & ((P[ r ] & P[ s ]) implies P[ ( r '&' s ) ])) & (P[ r ] implies P[ ( All (x,r) ) ])))))))) by A5,A2,CQC_SIM1:14,CQC_SIM1:15;
A12: (for r holds P[ r ]) from CQC_LANG:sch 1(A11);
( QuantNbr p ) = n by A1;
hence thesis by A12;
end;
