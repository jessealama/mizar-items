environ
vocabularies NUMBERS,SUBSET_1,CQC_LANG,QC_LANG1,SUBSTUT1,MCART_1,MARGREL1,REALSET1,FINSEQ_1,ORDINAL4,XBOOLEAN,CARD_1,ZFMISC_1,RELAT_1,BVFUNC_2,XBOOLE_0,FUNCT_1,TARSKI,ZF_LANG,FUNCT_4,FUNCOP_1,CLASSES2,SUBLEMMA,PARTFUN1,CQC_SIM1,ARYTM_3,XXREAL_0,ARYTM_1,SUBSTUT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FINSEQ_1,FUNCT_1,QC_LANG1,QC_LANG2,QC_LANG3,PARTFUN1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CQC_LANG,FUNCOP_1,RELAT_1,FUNCT_4,FUNCT_2,CQC_SIM1,DOMAIN_1,MCART_1,SUBSTUT1,SUBLEMMA;
definitions TARSKI,FUNCOP_1;
theorems TARSKI,FUNCT_1,MCART_1,XBOOLE_0,XBOOLE_1,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,QC_LANG3,PARTFUN1,RELSET_1,QC_LANG2,SUBSTUT1,FUNCT_4,SUBLEMMA,CQC_SIM1,FUNCT_2,NAT_1,INT_1,XREAL_1,XXREAL_0,FUNCOP_1,FINSEQ_1,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5;
schemes CQC_LANG,NAT_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XXREAL_0,XREAL_0,NAT_1,INT_1,QC_LANG1,CQC_LANG,SUBSTUT1,SUBLEMMA,CARD_1;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,INT_1,QC_LANG3,CQC_SIM1,SUBLEMMA,RELSET_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve p for (Element of ( CQC-WFF ));
reserve q for (Element of ( CQC-WFF ));
reserve Sub for CQC_Substitution;
reserve S for (Element of ( CQC-Sub-WFF ));
reserve S1 for (Element of ( CQC-Sub-WFF ));
reserve S2 for (Element of ( CQC-Sub-WFF ));
theorem
Th5: (((for Sub holds (ex S st (( S `1 ) = p & ( S `2 ) = Sub))) & (for Sub holds (ex S st (( S `1 ) = q & ( S `2 ) = Sub)))) implies (for Sub holds (ex S st (( S `1 ) = ( p '&' q ) & ( S `2 ) = Sub))))
proof
assume that
A1: (for Sub holds (ex S st (( S `1 ) = p & ( S `2 ) = Sub)))
and
A2: (for Sub holds (ex S st (( S `1 ) = q & ( S `2 ) = Sub)));
let Sub;
consider S1 such that A3: (( S1 `1 ) = p & ( S1 `2 ) = Sub) by A1;
consider S2 such that A4: (( S2 `1 ) = q & ( S2 `2 ) = Sub) by A2;
S2 = [ q,Sub ] by A4,SUBSTUT1:10;
then [ q,Sub ] in ( QC-Sub-WFF );
then A5: [ ( @ q ),Sub ] in ( QC-Sub-WFF ) by QC_LANG1:def 11;
S1 = [ p,Sub ] by A3,SUBSTUT1:10;
then [ p,Sub ] in ( QC-Sub-WFF );
then [ ( @ p ),Sub ] in ( QC-Sub-WFF ) by QC_LANG1:def 11;
then [ ( ( <* [ 2,( 0 ) ] *> ^ ( @ p ) ) ^ ( @ q ) ),Sub ] in ( QC-Sub-WFF ) by A5,SUBSTUT1:def 16;
then reconsider S = [ ( p '&' q ),Sub ] as (Element of ( QC-Sub-WFF )) by QC_LANG1:def 14;
take S;
( S `1 ) = ( p '&' q ) by MCART_1:7;
then S in ( CQC-Sub-WFF ) by SUBSTUT1:def 39;
then reconsider S as (Element of ( CQC-Sub-WFF ));
( S `2 ) = Sub by MCART_1:7;
hence thesis by MCART_1:7;
end;
