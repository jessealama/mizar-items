environ
vocabularies NUMBERS,SUBSET_1,CQC_LANG,QC_LANG1,SUBSTUT1,MCART_1,MARGREL1,REALSET1,FINSEQ_1,ORDINAL4,XBOOLEAN,CARD_1,ZFMISC_1,RELAT_1,BVFUNC_2,XBOOLE_0,FUNCT_1,TARSKI,ZF_LANG,FUNCT_4,FUNCOP_1,CLASSES2,SUBLEMMA,PARTFUN1,CQC_SIM1,ARYTM_3,XXREAL_0,ARYTM_1,SUBSTUT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FINSEQ_1,FUNCT_1,QC_LANG1,QC_LANG2,QC_LANG3,PARTFUN1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CQC_LANG,FUNCOP_1,RELAT_1,FUNCT_4,FUNCT_2,CQC_SIM1,DOMAIN_1,MCART_1,SUBSTUT1,SUBLEMMA,CKB7,CKB15,CKB16,CKB17,CKB18,CKB24,CKB31,CKB32,CKB33;
definitions TARSKI,FUNCOP_1,CKB18,CKB31,CKB32,CKB33;
theorems TARSKI,FUNCT_1,MCART_1,XBOOLE_0,XBOOLE_1,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,QC_LANG3,PARTFUN1,RELSET_1,QC_LANG2,SUBSTUT1,FUNCT_4,SUBLEMMA,CQC_SIM1,FUNCT_2,NAT_1,INT_1,XREAL_1,XXREAL_0,FUNCOP_1,FINSEQ_1,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB18,CKB21,CKB22,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38;
schemes CQC_LANG,NAT_1,CKB19,CKB20;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XXREAL_0,XREAL_0,NAT_1,INT_1,QC_LANG1,CQC_LANG,SUBSTUT1,SUBLEMMA,CARD_1;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,NAT_1,INT_1,QC_LANG3,CQC_SIM1,SUBLEMMA,RELSET_1,CKB7,CKB15,CKB17,CKB18,CKB24,CKB31,CKB32,CKB33;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve k for (Element of ( NAT ));
reserve p for (Element of ( CQC-WFF ));
reserve q for (Element of ( CQC-WFF ));
reserve r for (Element of ( CQC-WFF ));
reserve s for (Element of ( CQC-WFF ));
reserve x for bound_QC-variable;
reserve P for (QC-pred_symbol of k);
scheme CQCInd3 { P[set] } : (for p holds (( QuantNbr p ) = ( 0 ) implies P[ p ]))
provided
A1: (for r holds (for s holds (for x holds (for k holds (for l being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds (((P[ ( VERUM ) ] & P[ ( P ! l ) ]) & (P[ r ] implies P[ ( 'not' r ) ])) & ((P[ r ] & P[ s ]) implies P[ ( r '&' s ) ]))))))))
proof
defpred Prop[ (Element of ( CQC-WFF )) ]
 means
(( QuantNbr $1 ) = ( 0 ) implies P[ $1 ]);
A2: (for x holds (for p holds (Prop[ p ] implies Prop[ ( All (x,p) ) ])))
proof
let x;
let p;
assume that
Prop[ p ];
assume ( QuantNbr ( All (x,p) ) ) = ( 0 );
then ( ( QuantNbr p ) + 1 ) = ( 0 ) by CQC_SIM1:18;
hence thesis;
end;
(for p holds (for q holds ((Prop[ p ] & Prop[ q ]) implies Prop[ ( p '&' q ) ])))
proof
let p;
let q;
assume that
A3: (Prop[ p ] & Prop[ q ]);
assume ( QuantNbr ( p '&' q ) ) = ( 0 );
then ( ( QuantNbr p ) + ( QuantNbr q ) ) = ( 0 ) by CQC_SIM1:17;
hence thesis by A1,A3;
end;
then A4: (for r holds (for s holds (for x holds (for k holds (for l being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds ((((Prop[ ( VERUM ) ] & Prop[ ( P ! l ) ]) & (Prop[ r ] implies Prop[ ( 'not' r ) ])) & ((Prop[ r ] & Prop[ s ]) implies Prop[ ( r '&' s ) ])) & (Prop[ r ] implies Prop[ ( All (x,r) ) ])))))))) by A1,A2,CQC_SIM1:16;
(for p holds Prop[ p ]) from CQC_LANG:sch 1(A4);
hence thesis;
end;
