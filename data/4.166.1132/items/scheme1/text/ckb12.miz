environ
vocabularies NUMBERS,SUBSET_1,REAL_1,RELAT_1,ARYTM_3,INT_1,CARD_1,XXREAL_0,SEQ_1,VALUED_0,FUNCT_1,NAT_1,TARSKI,ORDINAL2,ARYTM_1,XBOOLE_0,PARTFUN1,ZFMISC_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XCMPLX_0,REAL_1,NAT_1,NAT_D,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,VALUED_0,SEQ_1,XXREAL_0,RECDEF_1;
definitions TARSKI,XBOOLE_0;
theorems ZFMISC_1,NAT_1,FUNCT_1,FUNCT_2,SEQM_3,PARTFUN1,RELSET_1,XBOOLE_1,NAT_D,ORDINAL1,XXREAL_0,CKB1,CKB2,CKB3,CKB4;
schemes NAT_1,FUNCT_2,RECDEF_1,SUBSET_1,CLASSES1,XBOOLE_0,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11;
registrations ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,SEQM_3,VALUED_0;
constructors PARTFUN1,XXREAL_0,NAT_1,NAT_D,SEQ_1,SEQM_3,RECDEF_1,MEMBERED,RELSET_1;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve x for set;
scheme PartFuncExD299 { C,D() -> non empty set,P[set],F,G(set) -> (Element of D()) } : (ex f being (PartFunc of C(),D()) st (f is  total & (for c being (Element of C()) holds (c in ( dom f ) implies ((P[ c ] implies ( f . c ) = F(c)) & ((not P[ c ]) implies ( f . c ) = G(c)))))))
proof
defpred Y[ set ]
 means
(not P[ $1 ]);
A1: (for c being (Element of C()) holds (P[ c ] implies (not Y[ c ])));
consider f being (PartFunc of C(),D()) such that A2: ((for c being (Element of C()) holds (c in ( dom f ) iff (P[ c ] or Y[ c ]))) & (for c being (Element of C()) holds (c in ( dom f ) implies ((P[ c ] implies ( f . c ) = F(c)) & (Y[ c ] implies ( f . c ) = G(c)))))) from CKB10:sch 1(A1);
take f;
( dom f ) = C()
proof
thus ( dom f ) c= C();
let x;
assume x in C();
then reconsider b9 = x as (Element of C());
(P[ b9 ] or (not P[ b9 ]));
hence thesis by A2;
end;
hence f is  total by PARTFUN1:def 2;
thus thesis by A2;
end;
