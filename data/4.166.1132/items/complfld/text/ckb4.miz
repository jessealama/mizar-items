environ
vocabularies STRUCT_0,ALGSTR_0,NUMBERS,BINOP_2,MESFUNC1,COMPLEX1,SUPINF_2,XBOOLE_0,XCMPLX_0,SUBSET_1,ORDINAL1,ARYTM_3,FUNCT_1,RELAT_1,VECTSP_1,GROUP_1,RLVECT_1,BINOP_1,LATTICES,ARYTM_1,CARD_1,XXREAL_0,NAT_1,NEWTON,COMPTRIG,COMPLFLD;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,COMPLEX1,NAT_1,FUNCT_1,XXREAL_0,COMPTRIG,BINOP_1,BINOP_2,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,NEWTON,VECTSP_1,CKB1;
definitions RLVECT_1,GROUP_1,VECTSP_1,BINOP_1,COMPTRIG,STRUCT_0,COMPLEX1,ALGSTR_0,CKB1;
theorems STRUCT_0,COMPLEX1,RLVECT_1,VECTSP_1,XREAL_0,XCMPLX_0,XCMPLX_1,BINOP_2,GROUP_1,COMPTRIG,NEWTON,ORDINAL1,NAT_1,XREAL_1,CKB1;
schemes NAT_1;
registrations ORDINAL1,RELSET_1,NUMBERS,XCMPLX_0,NAT_1,COMPLEX1,STRUCT_0,VECTSP_1,XREAL_0,XBOOLE_0,CKB2,CKB3;
constructors BINOP_1,XXREAL_0,REAL_1,NAT_1,BINOP_2,NEWTON,COMPTRIG,VECTSP_1,RLVECT_1,CKB1;
requirements NUMERALS,SUBSET,BOOLE,ARITHM;
begin
registration
let a being  complex number;
let b being  complex number;
let x being (Element of ( F_Complex ));
let y being (Element of ( F_Complex ));
identify x + y with a + b when x = a,y = b;
compatibility
proof
reconsider a9 = a,b9 = b as (Element of ( COMPLEX )) by XCMPLX_0:def 2;
assume (x = a & y = b);
hence ( x + y ) = ( ( addcomplex ) . (a9,b9) ) by CKB1:def 1
.= ( a + b ) by BINOP_2:def 3;
end;
end;
