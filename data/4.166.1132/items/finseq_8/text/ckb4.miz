environ
vocabularies FINSEQ_8,ARYTM_1,RELAT_1,FINSEQ_1,FUNCT_1,FINSEQ_5,RFINSEQ,JORDAN3,ARYTM_3,NUMBERS,ORDINAL4,TARSKI,XBOOLE_0,XXREAL_0,CARD_1,SUBSET_1,NAT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,NAT_D,RELAT_1,RFINSEQ,FINSEQ_1,FUNCT_1,FINSEQ_6,FINSEQ_5,CKB1;
definitions FINSEQ_1;
theorems NAT_1,NAT_2,FINSEQ_1,FINSEQ_3,FINSEQ_5,FINSEQ_6,RFINSEQ,RELAT_1,XREAL_1,XBOOLE_1,XXREAL_0,ORDINAL1,XREAL_0,NAT_D,CKB2,CKB3;
schemes NAT_1;
registrations RELSET_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,ORDINAL1,XBOOLE_0,CARD_1;
constructors SQUARE_1,NAT_1,RFINSEQ,NAT_D,FINSEQ_5,FINSEQ_6,REAL_1,CKB1;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
theorem
(for D being non empty set holds (for k1,k2 being (Element of ( NAT )) holds ( mid (( <*> D ),k1,k2) ) = ( <*> D )))
proof
let D being non empty set;
let k1 being (Element of ( NAT )),k2 being (Element of ( NAT ));
per cases ;
suppose k1 <= k2;

hence ( mid (( <*> D ),k1,k2) ) = ( ( ( <*> D ) /^ ( k1 -' 1 ) ) | ( ( k2 -' k1 ) + 1 ) ) by FINSEQ_6:def 3
.= ( ( <*> D ) | ( ( k2 -' k1 ) + 1 ) ) by FINSEQ_6:80
.= ( <*> D ) by FINSEQ_5:78;
end;
suppose k1 > k2;

hence ( mid (( <*> D ),k1,k2) ) = ( Rev ( ( ( <*> D ) /^ ( k2 -' 1 ) ) | ( ( k1 -' k2 ) + 1 ) ) ) by FINSEQ_6:def 3
.= ( Rev ( ( <*> D ) | ( ( k1 -' k2 ) + 1 ) ) ) by FINSEQ_6:80
.= ( Rev ( <*> D ) ) by FINSEQ_5:78
.= ( <*> D ) by FINSEQ_5:79;
end;
end;
