environ
vocabularies NUMBERS,XBOOLE_0,FINSEQ_1,SUBSET_1,NAT_1,XXREAL_0,ARYTM_3,RELAT_1,ARYTM_1,ORDINAL4,FUNCT_1,RFINSEQ,PARTFUN1,CARD_1,AFINSQ_1,FUNCT_4,TARSKI,FUNCT_7;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,NUMBERS,XCMPLX_0,NAT_1,NAT_D,FUNCT_1,PARTFUN1,FINSEQ_1,FINSEQ_4,RFINSEQ,FUNCT_7,XXREAL_0,CKB6;
definitions FINSEQ_1;
theorems NAT_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,FINSEQ_6,RFINSEQ,INT_1,GENEALG1,FUNCT_7,XREAL_1,XXREAL_0,ORDINAL1,NAT_2,PARTFUN1,NAT_D,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB5;
registrations XBOOLE_0,RELAT_1,FUNCT_1,XXREAL_0,XREAL_0,INT_1,FINSEQ_1,FUNCT_7,ORDINAL1;
constructors PARTFUN1,FUNCT_4,XXREAL_0,REAL_1,NAT_1,INT_1,FINSEQ_4,RFINSEQ,NAT_D,FUNCT_7,RELSET_1;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve D for non  empty set;
reserve f for (FinSequence of D);
reserve p for (Element of D);
reserve i for Nat;
definition
let D being non  empty set;
let f being (FinSequence of D);
let i being Nat;
let p being (Element of D);
redefine func Replace (f,i,p) -> (FinSequence of D) equals 
:Def1: ( ( ( f | ( i -' 1 ) ) ^ <* p *> ) ^ ( f /^ i ) ) if (1 <= i & i <= ( len f )) otherwise f;
compatibility
proof
A1: ((not (1 <= i & i <= ( len f ))) implies ( f +* (i,p) ) = f)
proof
assume (not (1 <= i & i <= ( len f )));
then (not i in ( dom f )) by FINSEQ_3:25;
hence thesis by FUNCT_7:def 3;
end;
((1 <= i & i <= ( len f )) implies ( f +* (i,p) ) = ( ( ( f | ( i -' 1 ) ) ^ <* p *> ) ^ ( f /^ i ) ))
proof
assume (1 <= i & i <= ( len f ));
then i in ( dom f ) by FINSEQ_3:25;
hence thesis by FUNCT_7:98;
end;
hence thesis by A1;
end;
correctness
proof
reconsider i as (Element of ( NAT )) by ORDINAL1:def 12;
( f +* (i,p) ) is (FinSequence of D);
hence thesis;
end;
end;
