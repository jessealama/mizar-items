environ
vocabularies ARYTM_1,ARYTM_3,XBOOLE_0,CARD_1,CONVEX1,CONVEX2,CONVEX3,FINSEQ_1,FINSEQ_2,FINSEQ_4,FINSET_1,FUNCOP_1,FUNCT_1,FUNCT_2,FUNCT_4,MEMBERED,ORDERS_1,RELAT_1,RLVECT_1,RLVECT_2,RUSUB_4,SEMI_AF1,SETFAM_1,TARSKI,TOPS_1,RLAFFIN1,RLAFFIN2,ZFMISC_1,REAL_1,CARD_3,XXREAL_0,NAT_1,SUBSET_1,NUMBERS,ORDINAL1,STRUCT_0,SUPINF_2,ORDINAL4,VALUED_1,XREAL_0,PARTFUN1;
notations TARSKI,XBOOLE_0,SUBSET_1,ZFMISC_1,ORDINAL1,NUMBERS,NAT_1,XCMPLX_0,XXREAL_0,ORDERS_1,CARD_1,XREAL_0,REAL_1,FINSET_1,SETFAM_1,DOMAIN_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,RELSET_1,FINSEQ_1,STRUCT_0,FINSEQ_2,SEQ_1,FINSEQOP,RVSUM_1,RLVECT_1,RLVECT_2,RUSUB_4,CONVEX1,CONVEX2,CONVEX3,RLAFFIN1,FUNCT_4,FUNCOP_1,MEMBERED,XXREAL_2;
definitions ORDERS_1,RLVECT_2,TARSKI,XBOOLE_0;
theorems BORSUK_4,CARD_1,CARD_2,CARD_FIN,CONVEX1,CONVEX3,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FUNCOP_1,FUNCT_1,FUNCT_2,FUNCT_4,NAT_1,MEMBERED,PARTFUN1,RELAT_1,RLAFFIN1,RLTOPSP1,RUSUB_4,RLVECT_2,RLVECT_3,RLVECT_4,RVSUM_1,STIRL2_1,SIMPLEX0,TARSKI,WELLORD2,XBOOLE_0,XBOOLE_1,XCMPLX_1,XREAL_0,XREAL_1,XXREAL_0,XXREAL_2,ZFMISC_1,RLVECT_1,CKB1;
schemes FRAENKEL,FUNCT_2,NAT_1,RLVECT_4;
registrations CARD_1,FINSET_1,FINSEQ_2,FUNCT_2,MEMBERED,NAT_1,NUMBERS,RELAT_1,RLVECT_1,RLVECT_3,STRUCT_0,SUBSET_1,VALUED_0,XCMPLX_0,XREAL_0,XXREAL_0,XBOOLE_0,RLAFFIN1,SIMPLEX0,FUNCOP_1,XXREAL_3,REALSET1,SETFAM_1,XXREAL_2,ABIAN,PARTFUN1,RVSUM_1,FINSEQ_1,RELSET_1,DILWORTH,RLVECT_2;
constructors BINOP_2,CONVEX1,CONVEX3,DOMAIN_1,FINSEQOP,REAL_1,RLVECT_3,RVSUM_1,RUSUB_5,SEQ_1,SETFAM_1,RLAFFIN1,SIMPLEX0,XXREAL_2,FUNCT_4,RELSET_1,PARTFUN1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve V for RealLinearSpace;
reserve v for (VECTOR of V);
reserve w for (VECTOR of V);
reserve p for (VECTOR of V);
reserve A for (Subset of V);
theorem
Th1: (for L being (Linear_Combination of A) holds (((L is  convex & v <> ( Sum L )) & ( L . v ) <> ( 0 )) implies (ex p st ((p in ( conv ( A \ { v } ) ) & ( Sum L ) = ( ( ( L . v ) * v ) + ( ( 1 - ( L . v ) ) * p ) )) & ( ( ( 1 / ( L . v ) ) * ( Sum L ) ) + ( ( 1 - ( 1 / ( L . v ) ) ) * p ) ) = v))))
proof
let L being (Linear_Combination of A);
assume that
A1: L is  convex
and
A2: v <> ( Sum L )
and
A3: ( L . v ) <> ( 0 );
set Lv = ( L . v );
set 1Lv = ( 1 - ( L . v ) );
A4: ( Carrier L ) c= A by RLVECT_2:def 6;
( Carrier L ) <> ( {} ) by A1,CONVEX1:21;
then reconsider A1 = A as non  empty (Subset of V) by A4;
consider K being (Linear_Combination of { v }) such that A5: ( K . v ) = Lv by RLVECT_4:37;
A6: Lv <> 1
proof
assume A7: Lv = 1;
then ( Carrier L ) = { v } by A1,RLAFFIN1:64;
then ( Sum L ) = ( 1 * v ) by A7,RLVECT_2:35
.= v by RLVECT_1:def 8;
hence contradiction by A2;
end;
Lv <= 1 by A1,RLAFFIN1:63;
then Lv < 1 by A6,XXREAL_0:1;
then A8: 1Lv > ( 1 - 1 ) by XREAL_1:10;
v in ( Carrier L ) by A3;
then { v } c= A1 by A4,ZFMISC_1:31;
then K is (Linear_Combination of A1) by RLVECT_2:21;
then reconsider LK = ( L - K ) as (Linear_Combination of A1) by RLVECT_2:56;
( ( 1 / 1Lv ) * LK ) is (Linear_Combination of A) by RLVECT_2:44;
then A9: ( Carrier ( ( 1 / 1Lv ) * LK ) ) c= A1 by RLVECT_2:def 6;
( LK . v ) = ( Lv - Lv ) by A5,RLVECT_2:54;
then A10: ( ( ( 1 / 1Lv ) * LK ) . v ) = ( ( 1 / 1Lv ) * ( Lv - Lv ) ) by RLVECT_2:def 11;
then (not v in ( Carrier ( ( 1 / 1Lv ) * LK ) )) by RLVECT_2:19;
then A11: ( Carrier ( ( 1 / 1Lv ) * LK ) ) c= ( A \ { v } ) by A9,ZFMISC_1:34;
A12: ( Carrier K ) c= { v } by RLVECT_2:def 6;
A13: (for w being (Element of V) holds ( ( ( 1 / 1Lv ) * LK ) . w ) >= ( 0 ))
proof
let w being (Element of V);
A14: ( ( ( 1 / 1Lv ) * LK ) . w ) = ( ( 1 / 1Lv ) * ( LK . w ) ) by RLVECT_2:def 11
.= ( ( 1 / 1Lv ) * ( ( L . w ) - ( K . w ) ) ) by RLVECT_2:54;
per cases ;
suppose w = v;

hence thesis by A10;
end;
suppose w <> v;

then (not w in ( Carrier K )) by A12,TARSKI:def 1;
then A15: ( K . w ) = ( 0 );
( L . w ) >= ( 0 ) by A1,RLAFFIN1:62;
hence thesis by A8,A14,A15;
end;
end;
( sum LK ) = ( ( sum L ) - ( sum K ) ) by RLAFFIN1:36
.= ( ( sum L ) - Lv ) by A5,A12,RLAFFIN1:32
.= 1Lv by A1,RLAFFIN1:62;
then A16: ( sum ( ( 1 / 1Lv ) * LK ) ) = ( ( 1 / 1Lv ) * 1Lv ) by RLAFFIN1:35
.= 1 by A8,XCMPLX_1:106;
then ( ( 1 / 1Lv ) * LK ) is  convex by A13,RLAFFIN1:62;
then ( Carrier ( ( 1 / 1Lv ) * LK ) ) <> ( {} ) by CONVEX1:21;
then reconsider Av = ( A \ { v } ) as non  empty (Subset of V) by A11;
reconsider 1LK = ( ( 1 / 1Lv ) * LK ) as (Convex_Combination of Av) by A11,A13,A16,RLAFFIN1:62,RLVECT_2:def 6;
take p = ( Sum 1LK );
1LK in ( ConvexComb V ) by CONVEX3:def 1;
then p in { ( Sum M ) where M is (Convex_Combination of Av): M in ( ConvexComb V ) };
hence p in ( conv ( A \ { v } ) ) by CONVEX3:5;
A17: ( Sum LK ) = ( ( Sum L ) - ( Sum K ) ) by RLVECT_3:4
.= ( ( Sum L ) - ( Lv * v ) ) by A5,RLVECT_2:32;
then ( 1Lv * p ) = ( 1Lv * ( ( 1 / 1Lv ) * ( ( Sum L ) - ( Lv * v ) ) ) ) by RLVECT_3:2
.= ( ( 1Lv * ( 1 / 1Lv ) ) * ( ( Sum L ) - ( Lv * v ) ) ) by RLVECT_1:def 7
.= ( 1 * ( ( Sum L ) - ( Lv * v ) ) ) by A8,XCMPLX_1:106
.= ( ( Sum L ) - ( Lv * v ) ) by RLVECT_1:def 8;
hence ( Sum L ) = ( ( Lv * v ) + ( 1Lv * p ) ) by RLVECT_4:1;
( 1 - ( 1 / Lv ) ) = ( ( Lv / Lv ) - ( 1 / Lv ) ) by A3,XCMPLX_1:60
.= ( ( Lv - 1 ) / Lv ) by XCMPLX_1:120
.= ( ( - 1Lv ) / Lv )
.= ( - ( 1Lv / Lv ) ) by XCMPLX_1:187;
then ( ( 1 - ( 1 / Lv ) ) * ( Sum 1LK ) ) = ( ( - ( 1Lv / Lv ) ) * ( ( 1 / 1Lv ) * ( ( Sum L ) - ( Lv * v ) ) ) ) by A17,RLVECT_3:2
.= ( ( ( - ( 1Lv / Lv ) ) * ( 1 / 1Lv ) ) * ( ( Sum L ) - ( Lv * v ) ) ) by RLVECT_1:def 7
.= ( ( - ( ( 1Lv / Lv ) * ( 1 / 1Lv ) ) ) * ( ( Sum L ) - ( Lv * v ) ) )
.= ( ( - ( ( 1Lv / 1Lv ) * ( 1 / Lv ) ) ) * ( ( Sum L ) - ( Lv * v ) ) ) by XCMPLX_1:85
.= ( ( - ( 1 * ( 1 / Lv ) ) ) * ( ( Sum L ) - ( Lv * v ) ) ) by A8,XCMPLX_1:60
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) - ( ( - ( 1 / Lv ) ) * ( Lv * v ) ) ) by RLVECT_1:34
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) + ( - ( ( - ( 1 / Lv ) ) * ( Lv * v ) ) ) ) by RLVECT_1:def 11
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) + ( ( - ( - ( 1 / Lv ) ) ) * ( Lv * v ) ) ) by RLVECT_4:3
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) + ( ( ( 1 / Lv ) * Lv ) * v ) ) by RLVECT_1:def 7
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) + ( 1 * v ) ) by A3,XCMPLX_1:106
.= ( ( ( - ( 1 / Lv ) ) * ( Sum L ) ) + v ) by RLVECT_1:def 8
.= ( ( - ( ( 1 / Lv ) * ( Sum L ) ) ) + v ) by RLVECT_4:3;
hence ( ( ( 1 / Lv ) * ( Sum L ) ) + ( ( 1 - ( 1 / Lv ) ) * p ) ) = ( ( ( ( 1 / Lv ) * ( Sum L ) ) + ( - ( ( 1 / Lv ) * ( Sum L ) ) ) ) + v ) by RLVECT_1:def 3
.= ( ( ( ( 1 / Lv ) * ( Sum L ) ) - ( ( 1 / Lv ) * ( Sum L ) ) ) + v ) by RLVECT_1:def 11
.= v by RLVECT_4:1;
end;
