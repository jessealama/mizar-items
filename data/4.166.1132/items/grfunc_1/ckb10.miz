environ
vocabularies FUNCT_1,TARSKI,RELAT_1,XBOOLE_0,SUBSET_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ENUMSET1,RELAT_1,FUNCT_1;
definitions TARSKI,RELAT_1,XBOOLE_0,FUNCT_1;
theorems TARSKI,XBOOLE_0,ZFMISC_1,FUNCT_1,RELAT_1,XBOOLE_1,ENUMSET1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9;
registrations FUNCT_1,RELAT_1;
constructors TARSKI,SUBSET_1,FUNCT_1,ENUMSET1;
requirements SUBSET,BOOLE;
begin
reserve p for set;
reserve x for set;
reserve x1 for set;
reserve x2 for set;
reserve y for set;
reserve y1 for set;
reserve y2 for set;
reserve z1 for set;
reserve z2 for set;
theorem
({ [ x1,y1 ],[ x2,y2 ] } is Function iff (x1 = x2 implies y1 = y2))
proof
thus (({ [ x1,y1 ],[ x2,y2 ] } is Function & x1 = x2) implies y1 = y2)
proof
A1: ([ x1,y1 ] in { [ x1,y1 ],[ x2,y2 ] } & [ x2,y2 ] in { [ x1,y1 ],[ x2,y2 ] }) by TARSKI:def 2;
assume { [ x1,y1 ],[ x2,y2 ] } is Function;
hence thesis by A1,FUNCT_1:def 1;
end;

assume A2: (x1 = x2 implies y1 = y2);
now
thus (p in { [ x1,y1 ],[ x2,y2 ] } implies (ex x st (ex y st [ x,y ] = p)))
proof
assume p in { [ x1,y1 ],[ x2,y2 ] };
then (p = [ x1,y1 ] or p = [ x2,y2 ]) by TARSKI:def 2;
hence thesis;
end;

let x;
let z1;
let z2;
A3: ((([ x,z1 ] = [ x1,y1 ] & [ x,z2 ] = [ x1,y1 ]) or ([ x,z1 ] = [ x2,y2 ] & [ x,z2 ] = [ x2,y2 ])) implies ((z1 = y1 & z2 = y1) or (z1 = y2 & z2 = y2))) by ZFMISC_1:27;
A4:now
assume A5: (([ x,z1 ] = [ x1,y1 ] & [ x,z2 ] = [ x2,y2 ]) or ([ x,z1 ] = [ x2,y2 ] & [ x,z2 ] = [ x1,y1 ]));
then (x = x1 & x = x2) by ZFMISC_1:27;
hence z1 = z2 by A2,A5,ZFMISC_1:27;
end;
assume ([ x,z1 ] in { [ x1,y1 ],[ x2,y2 ] } & [ x,z2 ] in { [ x1,y1 ],[ x2,y2 ] });
hence z1 = z2 by A3,A4,TARSKI:def 2;
end;
hence thesis by FUNCT_1:def 1;
end;
