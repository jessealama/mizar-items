environ
vocabularies NUMBERS,PBOOLE,FUNCT_1,CARD_3,RELAT_1,TARSKI,FINSEQ_1,ORDINAL4,XBOOLE_0,SUBSET_1,HILBERT1,TREES_1,TREES_A,CARD_1,ARYTM_3,TREES_2,TREES_4,TREES_3,TREES_9,FUNCT_6,QC_LANG1,XBOOLEAN,ZF_LANG,GLIB_000,XXREAL_0,NAT_1,ORDINAL1,ZFMISC_1,PARTFUN1,FUNCT_4,FUNCOP_1,HILBERT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,CARD_3,RELAT_1,ORDINAL1,FUNCT_1,PARTFUN1,NAT_1,FINSEQ_1,FUNCOP_1,FUNCT_4,FUNCT_6,PBOOLE,TREES_1,TREES_2,TREES_3,TREES_4,TREES_9,HILBERT1,XXREAL_0,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
definitions TARSKI,FUNCT_1,HILBERT1,PARTFUN1,FUNCOP_1,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
theorems PBOOLE,ZFMISC_1,FUNCT_1,HILBERT1,ORDERS_1,SUBSET_1,TARSKI,FUNCT_4,FUNCOP_1,WELLFND1,CARD_3,GRFUNC_1,NAT_1,FINSEQ_1,TREES_1,TREES_4,TREES_2,TREES_9,FINSEQ_2,TREES_3,RELAT_1,ORDINAL1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,CARD_1,PARTFUN1,EQREL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
schemes PBOOLE,NAT_1,FINSEQ_1,CKB6;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XREAL_0,NAT_1,FINSEQ_1,TREES_2,TREES_3,HILBERT1,TREES_4,CKB10,CKB11,CKB12;
constructors PARTFUN1,FUNCT_4,XXREAL_0,XREAL_0,NAT_1,CARD_3,PBOOLE,TREES_4,TREES_9,HILBERT1,RELSET_1,CKB13,CKB18,CKB19,CKB20;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve p for (Element of ( HP-WFF ));
reserve q for (Element of ( HP-WFF ));
reserve r for (Element of ( HP-WFF ));
reserve s for (Element of ( HP-WFF ));
scheme HPInd { P[set] } : (for r holds P[ r ])
provided
A1: P[ ( VERUM ) ]
and
A2: (for n holds P[ ( prop n ) ])
and
A3: (for r holds (for s holds ((P[ r ] & P[ s ]) implies (P[ ( r '&' s ) ] & P[ ( r => s ) ]))))
proof
set X = { p where p is (Element of ( HP-WFF )): P[ p ] };
X c= ( HP-WFF )
proof
let x being set;
assume x in X;
then (ex p being (Element of ( HP-WFF )) st (x = p & P[ p ]));
hence thesis;
end;
then reconsider X as (Subset of ( HP-WFF ));
let r;
A4: r in ( HP-WFF );
A5: X is  with_propositional_variables
proof
let n;
P[ ( prop n ) ] by A2;
hence thesis;
end;
A6: X is  with_implication
proof
let p;
let q;
assume p in X;
then A7: (ex x being (Element of ( HP-WFF )) st (p = x & P[ x ]));
assume q in X;
then (ex x being (Element of ( HP-WFF )) st (q = x & P[ x ]));
then P[ ( p => q ) ] by A3,A7;
hence thesis;
end;
A8: ( HP-WFF ) c= ( ( NAT ) * ) by HILBERT1:def 5;
A9: X c= ( ( NAT ) * )
proof
let x being set;
assume x in X;
then x in ( HP-WFF );
hence thesis by A8;
end;
A10: X is  with_conjunction
proof
let p;
let q;
assume p in X;
then A11: (ex x being (Element of ( HP-WFF )) st (p = x & P[ x ]));
assume q in X;
then (ex x being (Element of ( HP-WFF )) st (q = x & P[ x ]));
then P[ ( p '&' q ) ] by A3,A11;
hence thesis;
end;
( VERUM ) in X by A1;
then X is  with_VERUM by CKB14:def 1;
then ( HP-WFF ) c= X by A9,A6,A10,A5,HILBERT1:def 6;
then r in X by A4;
then (ex p being (Element of ( HP-WFF )) st (r = p & P[ p ]));
hence thesis;
end;
