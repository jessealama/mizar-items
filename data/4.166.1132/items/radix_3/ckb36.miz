environ
vocabularies NUMBERS,NAT_1,INT_1,XXREAL_0,RADIX_1,ARYTM_1,ARYTM_3,POWER,RELAT_1,CARD_1,FINSEQ_1,NEWTON,SUBSET_1,TARSKI,XBOOLE_0,FINSEQ_2,FUNCT_1,PARTFUN1,CARD_3,ORDINAL4,RADIX_3;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,INT_1,NAT_1,NAT_D,FUNCT_1,PARTFUN1,NEWTON,POWER,FINSEQ_1,FINSEQ_2,GR_CY_1,RADIX_1,CKB6,CKB7,CKB20,CKB21,CKB23,CKB24,CKB30,CKB31,CKB33,CKB34;
definitions TARSKI,RADIX_1,CKB6,CKB7,CKB23,CKB24,CKB30,CKB31,CKB33,CKB34;
theorems RADIX_1,POWER,NAT_1,INT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,PRE_FF,NEWTON,RVSUM_1,PREPOWER,JORDAN12,FINSEQ_3,RADIX_2,XREAL_1,XXREAL_0,NAT_D,ORDINAL1,PARTFUN1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes NAT_1,FINSEQ_2;
registrations RELSET_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,NEWTON,XBOOLE_0,VALUED_0,FINSEQ_2,CARD_1,FINSEQ_1,CKB18,CKB19;
constructors REAL_1,NAT_D,NEWTON,POWER,BINARITH,GR_CY_1,RADIX_1,RELSET_1,CKB6,CKB7,CKB20,CKB21,CKB23,CKB24,CKB30,CKB31,CKB33,CKB34;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve k for Nat;
reserve i1 for Integer;
reserve i2 for Integer;
theorem
(((2 <= k & i1 in ( k -SD )) & i2 in ( k -SD_Sub )) implies ( SDSub_Add_Data (( i1 + i2 ),k) ) in ( k -SD_Sub_S ))
proof
assume that
A1: 2 <= k
and
A2: (i1 in ( k -SD ) & i2 in ( k -SD_Sub ));
set z = ( i1 + i2 );
(i1 <= ( ( Radix k ) - 1 ) & i2 <= ( Radix ( k -' 1 ) )) by A2,CKB8:1,RADIX_1:13;
then A3: z <= ( ( ( Radix k ) - 1 ) + ( Radix ( k -' 1 ) ) ) by XREAL_1:7;
(( ( - ( Radix k ) ) + 1 ) <= i1 & ( ( - ( Radix ( k -' 1 ) ) ) - 1 ) <= i2) by A2,CKB8:1,RADIX_1:13;
then A4: ( ( ( - ( Radix k ) ) + 1 ) + ( ( - ( Radix ( k -' 1 ) ) ) - 1 ) ) <= z by XREAL_1:7;
A5: (( SDSub_Add_Data (z,k) ) >= ( - ( Radix ( k -' 1 ) ) ) & ( SDSub_Add_Data (z,k) ) <= ( ( Radix ( k -' 1 ) ) - 1 ))
proof
now
per cases ;
case A6: z < ( - ( Radix ( k -' 1 ) ) );
then ( z + 1 ) <= ( - ( Radix ( k -' 1 ) ) ) by INT_1:7;
then z <= ( ( - ( Radix ( k -' 1 ) ) ) - 1 ) by XREAL_1:19;
then z <= ( ( - ( Radix ( k -' 1 ) ) ) + ( - 1 ) );
then z <= ( ( ( - ( Radix k ) ) + ( Radix ( k -' 1 ) ) ) + ( - 1 ) ) by A1,CKB3:1,XXREAL_0:2;
then A7: z <= ( ( - ( Radix k ) ) + ( ( Radix ( k -' 1 ) ) + ( - 1 ) ) );
( ( - ( Radix ( k -' 1 ) ) ) + ( - ( Radix k ) ) ) <= ( z + ( 0 ) ) by A4;
then A8: ( ( - ( Radix ( k -' 1 ) ) ) - ( 0 ) ) <= ( z - ( - ( Radix k ) ) ) by XREAL_1:21;
( SDSub_Add_Carry (z,k) ) = ( - 1 ) by A6,CKB23:def 1;
hence thesis by A8,A7,XREAL_1:20;
end;
case A9: (( - ( Radix ( k -' 1 ) ) ) <= z & z < ( Radix ( k -' 1 ) ));
then (( SDSub_Add_Carry (z,k) ) = ( 0 ) & ( z + 1 ) <= ( Radix ( k -' 1 ) )) by CKB23:def 1,INT_1:7;
hence thesis by A9,XREAL_1:19;
end;
case A10: ( Radix ( k -' 1 ) ) <= z;
then ( ( Radix k ) - ( Radix ( k -' 1 ) ) ) <= z by A1,CKB2:1,XXREAL_0:2;
then A11: ( ( Radix k ) + ( - ( Radix ( k -' 1 ) ) ) ) <= z;
A12: z <= ( ( Radix k ) + ( ( Radix ( k -' 1 ) ) - 1 ) ) by A3;
( SDSub_Add_Carry (z,k) ) = 1 by A10,CKB23:def 1;
hence thesis by A11,A12,XREAL_1:19,XREAL_1:20;
end;
end;
hence thesis;
end;
( SDSub_Add_Data (z,k) ) is (Element of ( INT )) by INT_1:def 2;
hence thesis by A5;
end;
