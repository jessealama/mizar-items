environ
vocabularies NUMBERS,SUBSET_1,XBOOLE_0,ARYTM_1,CARD_1,RELAT_1,FINSEQ_1,QUANTAL1,UNIALG_1,UNIALG_2,FUNCT_1,MSAFREE,TARSKI,STRUCT_0,FINSEQ_2,PRELAMB,CQC_SIM1,MSUALG_3,FUNCOP_1,PARTFUN1,FUNCT_2,NAT_1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,CARD_3,TREES_2,QC_LANG1,FREEALG;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,NAT_1,RELAT_1,RELSET_1,FUNCT_1,PARTFUN1,FINSEQ_1,FUNCT_2,FUNCOP_1,FINSEQ_2,CARD_3,TREES_2,TREES_3,TREES_4,MARGREL1,STRUCT_0,UNIALG_1,UNIALG_2,LANG1,DTCONSTR,PRE_POLY,ALG_1,CKB1,CKB4,CKB5,CKB6,CKB9,CKB10,CKB13,CKB14,CKB18,CKB19,CKB26,CKB27,CKB28;
definitions TARSKI,UNIALG_2,DTCONSTR,XBOOLE_0,FINSEQ_2,FUNCOP_1,MARGREL1,CKB1,CKB6,CKB9,CKB10,CKB13,CKB14,CKB18,CKB19,CKB26,CKB27,CKB28;
theorems FINSEQ_1,FINSEQ_2,PARTFUN1,FUNCT_1,FUNCT_2,NAT_1,ZFMISC_1,UNIALG_1,ALG_1,TARSKI,FUNCOP_1,UNIALG_2,LANG1,DTCONSTR,RELAT_1,XBOOLE_0,XBOOLE_1,TREES_3,MARGREL1,FINSEQ_3,CARD_1,CKB1,CKB3,CKB6,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB17,CKB18,CKB19,CKB21,CKB22,CKB26,CKB27,CKB28;
schemes PARTFUN1,FINSEQ_1,RELSET_1,DTCONSTR;
registrations XBOOLE_0,SUBSET_1,RELAT_1,ORDINAL1,PARTFUN1,XREAL_0,FINSEQ_1,FINSEQ_2,TREES_3,STRUCT_0,UNIALG_1,UNIALG_2,DTCONSTR,CARD_1,RELSET_1,MARGREL1,FUNCT_1,CKB2,CKB7,CKB8,CKB15,CKB16,CKB20,CKB23,CKB24,CKB25;
constructors DOMAIN_1,XCMPLX_0,XXREAL_0,XREAL_0,FINSEQOP,DTCONSTR,ALG_1,RELSET_1,PRE_POLY,CKB1,CKB9,CKB10,CKB13,CKB14,CKB18,CKB19,CKB26,CKB27,CKB28;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
definition
let f being non empty (FinSequence of ( NAT ));
let D being  disjoint_with_NAT non empty set;
func FreeUnivAlgNSG (f,D) ->  strict Universal_Algebra
equals
UAStr (# ( TS ( DTConUA (f,D) ) ),( FreeOpSeqNSG (f,D) ) #);
coherence
proof
set A = ( TS ( DTConUA (f,D) ) );
set AA = UAStr (# A,( FreeOpSeqNSG (f,D) ) #);
(for n being Nat holds (for h being (PartFunc of ( A * ),A) holds ((n in ( dom (the charact of AA) ) & h = ( (the charact of AA) . n )) implies h is  quasi_total)))
proof
let n being Nat;
let h being (PartFunc of ( A * ),A);
assume (n in ( dom (the charact of AA) ) & h = ( (the charact of AA) . n ));
then h = ( FreeOpNSG (n,f,D) ) by CKB28:def 1;
hence thesis;
end;
then A1: (the charact of AA) is  quasi_total by MARGREL1:def 24;
(for n being Nat holds (for h being (PartFunc of ( A * ),A) holds ((n in ( dom (the charact of AA) ) & h = ( (the charact of AA) . n )) implies h is  homogeneous)))
proof
let n being Nat;
let h being (PartFunc of ( A * ),A);
assume (n in ( dom (the charact of AA) ) & h = ( (the charact of AA) . n ));
then h = ( FreeOpNSG (n,f,D) ) by CKB28:def 1;
hence thesis;
end;
then A2: (the charact of AA) is  homogeneous by MARGREL1:def 23;
(for n being set holds (n in ( dom (the charact of AA) ) implies ( (the charact of AA) . n ) is non empty))
proof
let n being set;
assume A3: n in ( dom (the charact of AA) );
then reconsider n as (Element of ( NAT ));
( (the charact of AA) . n ) = ( FreeOpNSG (n,f,D) ) by A3,CKB28:def 1;
hence thesis;
end;
then A4: (the charact of AA) is  non-empty by FUNCT_1:def 9;
( len ( FreeOpSeqNSG (f,D) ) ) = ( len f ) by CKB28:def 1;
then (the charact of AA) <> ( {} );
hence thesis by A1,A2,A4,UNIALG_1:def 1,UNIALG_1:def 2,UNIALG_1:def 3;
end;
end;
