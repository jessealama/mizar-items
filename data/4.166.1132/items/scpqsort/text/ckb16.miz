environ
vocabularies NUMBERS,SCMPDS_2,SUBSET_1,FSM_1,SCMPDS_4,AMI_1,TURING_1,SCMFSA8A,SCMFSA_7,AMI_3,INT_1,SCMFSA8B,CARD_1,ARYTM_3,FUNCT_1,XXREAL_0,UNIALG_2,SCMFSA7B,SCMFSA6B,RELAT_1,FUNCT_4,AMI_2,SCMFSA_9,ARYTM_1,VALUED_1,TARSKI,GRAPHSP,CIRCUIT2,MSUALG_1,NAT_1,FUNCOP_1,CARD_3,FINSEQ_1,GRAPH_2,SCPISORT,SCMP_GCD,CLASSES1,SCPQSORT,ORDINAL1,SCMNORM,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,FUNCT_2,SUBSET_1,CARD_1,NUMBERS,XXREAL_0,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_4,PBOOLE,VALUED_1,XCMPLX_0,RECDEF_1,INT_1,NAT_1,STRUCT_0,MEMSTR_0,EXTPRO_1,AMI_2,FUNCT_7,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,CARD_3,FINSEQ_1,SCMPDS_8,GRAPH_2,CLASSES1,COMPOS_1,SCPISORT,CKB15;
definitions SCMPDS_2,SCMP_GCD,COMPOS_1,EXTPRO_1,SCPISORT,MEMSTR_0,TARSKI,FUNCT_7,XBOOLE_0,FUNCOP_1,NAT_1,AFINSQ_1,FUNCT_4,CKB15;
theorems AMI_3,NAT_1,TARSKI,FUNCT_4,SCMPDS_2,FUNCT_7,GRFUNC_1,SCMPDS_4,SCMPDS_5,SCMPDS_7,SCMPDS_8,FINSEQ_1,FINSEQ_2,RFINSEQ,SCPISORT,XBOOLE_1,XREAL_1,XXREAL_0,GRAPH_2,MEMSTR_0,ORDINAL1,CLASSES1,SCMPDS_6,SCMP_GCD,INT_1,COMPOS_1,AFINSQ_1,EXTPRO_1,PBOOLE,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
schemes NAT_1,SCMPDS_8;
registrations XBOOLE_0,SETFAM_1,FUNCT_1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMPDS_8,ORDINAL1,VALUED_0,VALUED_1,RELAT_1,COMPOS_1,AFINSQ_1,MEMSTR_0,EXTPRO_1,FUNCT_4,FUNCT_7,FUNCOP_1,PRE_POLY,PBOOLE,SCMPDS_3,CKB1;
constructors REAL_1,RECDEF_1,NEWTON,MESFUNC1,SCM_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,SCMPDS_8,SCPISORT,CLASSES1,GRAPH_2,VALUED_1,AMI_2,SCMPDS_1,PRE_POLY,AMISTD_1,AMISTD_2,SCMPDS_7,PBOOLE,AMISTD_5,MEMSTR_0,CKB15;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve p0 for (Element of ( NAT ));
definition
let n being (Element of ( NAT ));
let p0 being (Element of ( NAT ));
func QuickSort (n,p0) -> (Program of ( SCMPDS )) equals 
( ( ( ( ( ( GBP ) := ( 0 ) ) ';' ( ( SBP ) := 1 ) ) ';' ( (( SBP ),( p0 + n )) := ( p0 + 1 ) ) ) ';' ( (( SBP ),( ( p0 + n ) + 1 )) := ( p0 + n ) ) ) ';' ( while>0 (( GBP ),1,( ( ( (( GBP ),2) := (( SBP ),( ( p0 + n ) + 1 )) ) ';' ( SubFrom (( GBP ),2,( SBP ),( p0 + n )) ) ) ';' ( if>0 (( GBP ),2,( ( ( ( (( GBP ),2) := (( SBP ),( p0 + n )) ) ';' ( (( GBP ),4) := (( SBP ),( ( p0 + n ) + 1 )) ) ) ';' ( Partition ) ) ';' ( ( ( ( ( ( (( SBP ),( ( p0 + n ) + 3 )) := (( SBP ),( ( p0 + n ) + 1 )) ) ';' ( (( SBP ),( ( p0 + n ) + 1 )) := (( GBP ),4) ) ) ';' ( (( SBP ),( ( p0 + n ) + 2 )) := (( GBP ),4) ) ) ';' ( AddTo (( SBP ),( ( p0 + n ) + 1 ),( - 1 )) ) ) ';' ( AddTo (( SBP ),( ( p0 + n ) + 2 ),1) ) ) ';' ( AddTo (( GBP ),1,2) ) ) ),( Load ( AddTo (( GBP ),1,( - 2 )) ) )) ) )) ) );
coherence;
end;
