environ
vocabularies NUMBERS,SCMPDS_2,SUBSET_1,FSM_1,SCMPDS_4,AMI_1,TURING_1,SCMFSA8A,SCMFSA_7,AMI_3,INT_1,SCMFSA8B,CARD_1,ARYTM_3,FUNCT_1,XXREAL_0,UNIALG_2,SCMFSA7B,SCMFSA6B,RELAT_1,FUNCT_4,AMI_2,SCMFSA_9,ARYTM_1,VALUED_1,TARSKI,GRAPHSP,CIRCUIT2,MSUALG_1,NAT_1,FUNCOP_1,CARD_3,FINSEQ_1,GRAPH_2,SCPISORT,SCMP_GCD,CLASSES1,SCPQSORT,ORDINAL1,SCMNORM,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,FUNCT_2,SUBSET_1,CARD_1,NUMBERS,XXREAL_0,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_4,PBOOLE,VALUED_1,XCMPLX_0,RECDEF_1,INT_1,NAT_1,STRUCT_0,MEMSTR_0,EXTPRO_1,AMI_2,FUNCT_7,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,CARD_3,FINSEQ_1,SCMPDS_8,GRAPH_2,CLASSES1,COMPOS_1,SCPISORT,CKB15,CKB16;
definitions SCMPDS_2,SCMP_GCD,COMPOS_1,EXTPRO_1,SCPISORT,MEMSTR_0,TARSKI,FUNCT_7,XBOOLE_0,FUNCOP_1,NAT_1,AFINSQ_1,FUNCT_4,CKB15,CKB16;
theorems AMI_3,NAT_1,TARSKI,FUNCT_4,SCMPDS_2,FUNCT_7,GRFUNC_1,SCMPDS_4,SCMPDS_5,SCMPDS_7,SCMPDS_8,FINSEQ_1,FINSEQ_2,RFINSEQ,SCPISORT,XBOOLE_1,XREAL_1,XXREAL_0,GRAPH_2,MEMSTR_0,ORDINAL1,CLASSES1,SCMPDS_6,SCMP_GCD,INT_1,COMPOS_1,AFINSQ_1,EXTPRO_1,PBOOLE,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes NAT_1,SCMPDS_8;
registrations XBOOLE_0,SETFAM_1,FUNCT_1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMPDS_2,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMPDS_8,ORDINAL1,VALUED_0,VALUED_1,RELAT_1,COMPOS_1,AFINSQ_1,MEMSTR_0,EXTPRO_1,FUNCT_4,FUNCT_7,FUNCOP_1,PRE_POLY,PBOOLE,SCMPDS_3,CKB1;
constructors REAL_1,RECDEF_1,NEWTON,MESFUNC1,SCM_1,SCMPDS_4,SCMPDS_5,SCMPDS_6,SCMP_GCD,SCMPDS_8,SCPISORT,CLASSES1,GRAPH_2,VALUED_1,AMI_2,SCMPDS_1,PRE_POLY,AMISTD_1,AMISTD_2,SCMPDS_7,PBOOLE,AMISTD_5,MEMSTR_0,CKB15,CKB16;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
set i1 = ( (( GBP ),7) := (( GBP ),5) );
set i2 = ( AddTo (( GBP ),5,( - 1 )) );
set i3 = ( (( GBP ),6) := (( intpos 4 ),( 0 )) );
set i4 = ( SubFrom (( GBP ),6,( intpos 2 ),( 0 )) );
set i5 = ( AddTo (( GBP ),4,( - 1 )) );
set i6 = ( AddTo (( GBP ),7,( - 1 )) );
set i7 = ( Load ( (( GBP ),5) := ( 0 ) ) );
set IF1 = ( if>0 (( GBP ),6,( i5 ';' i6 ),i7) );
set WB1 = ( ( ( ( i1 ';' i2 ) ';' i3 ) ';' i4 ) ';' IF1 );
set WH1 = ( while>0 (( GBP ),5,WB1) );
set j1 = ( (( GBP ),5) := (( GBP ),7) );
set j2 = ( AddTo (( GBP ),7,( - 1 )) );
set j3 = ( (( GBP ),6) := (( intpos 2 ),( 0 )) );
set j4 = ( SubFrom (( GBP ),6,( intpos 3 ),( 0 )) );
set j5 = ( AddTo (( GBP ),3,1) );
set j6 = ( AddTo (( GBP ),5,( - 1 )) );
set j7 = ( Load ( (( GBP ),7) := ( 0 ) ) );
set IF2 = ( if>0 (( GBP ),6,( j5 ';' j6 ),j7) );
set WB2 = ( ( ( ( j1 ';' j2 ) ';' j3 ) ';' j4 ) ';' IF2 );
set WH2 = ( while>0 (( GBP ),7,WB2) );
set k1 = ( (( GBP ),5) := (( GBP ),4) );
set k2 = ( SubFrom (( GBP ),5,( GBP ),2) );
set k3 = ( (( GBP ),3) := (( GBP ),2) );
set k4 = ( AddTo (( GBP ),3,1) );
set K4 = ( ( ( k1 ';' k2 ) ';' k3 ) ';' k4 );
set k5 = ( (( GBP ),6) := (( intpos 4 ),( 0 )) );
set k6 = ( (( intpos 4 ),( 0 )) := (( intpos 3 ),( 0 )) );
set k7 = ( (( intpos 3 ),( 0 )) := (( GBP ),6) );
set k8 = ( AddTo (( GBP ),5,( - 2 )) );
set k9 = ( AddTo (( GBP ),3,1) );
set k0 = ( AddTo (( GBP ),4,( - 1 )) );
set IF3 = ( if>0 (( GBP ),5,( ( ( ( ( k5 ';' k6 ) ';' k7 ) ';' k8 ) ';' k9 ) ';' k0 )) );
set WB3 = ( ( WH1 ';' WH2 ) ';' IF3 );
set WH3 = ( while>0 (( GBP ),5,WB3) );
set j8 = ( (( GBP ),6) := (( intpos 4 ),( 0 )) );
set j9 = ( (( intpos 4 ),( 0 )) := (( intpos 2 ),( 0 )) );
Lm7: ( card WB1 ) = 9
proof
thus ( card WB1 ) = ( ( card ( ( ( i1 ';' i2 ) ';' i3 ) ';' i4 ) ) + ( card IF1 ) ) by AFINSQ_1:17
.= ( 4 + ( card IF1 ) ) by CKB7:1
.= ( 4 + ( ( ( card ( i5 ';' i6 ) ) + ( card i7 ) ) + 2 ) ) by SCMPDS_6:65
.= ( 4 + ( ( 2 + ( card i7 ) ) + 2 ) ) by SCMP_GCD:5
.= ( 4 + ( ( 2 + 1 ) + 2 ) ) by COMPOS_1:54
.= 9;
end;
Lm11: ( card WH1 ) = 11
proof
thus ( card WH1 ) = ( 9 + 2 ) by Lm7,SCMPDS_8:17
.= 11;
end;
Lm12: ( card WB2 ) = 9
proof
thus ( card WB2 ) = ( ( card ( ( ( j1 ';' j2 ) ';' j3 ) ';' j4 ) ) + ( card IF2 ) ) by AFINSQ_1:17
.= ( 4 + ( card IF2 ) ) by CKB7:1
.= ( 4 + ( ( ( card ( j5 ';' j6 ) ) + ( card j7 ) ) + 2 ) ) by SCMPDS_6:65
.= ( 4 + ( ( 2 + ( card j7 ) ) + 2 ) ) by SCMP_GCD:5
.= ( 4 + ( ( 2 + 1 ) + 2 ) ) by COMPOS_1:54
.= 9;
end;
Lm13: ( card WH2 ) = 11
proof
thus ( card WH2 ) = ( 9 + 2 ) by Lm12,SCMPDS_8:17
.= 11;
end;
Lm17: ( card WB3 ) = 29
proof
thus ( card WB3 ) = ( ( card ( WH1 ';' WH2 ) ) + ( card IF3 ) ) by AFINSQ_1:17
.= ( ( 11 + 11 ) + ( card IF3 ) ) by Lm11,Lm13,AFINSQ_1:17
.= ( 22 + ( ( card ( ( ( ( ( k5 ';' k6 ) ';' k7 ) ';' k8 ) ';' k9 ) ';' k0 ) ) + 1 ) ) by SCMPDS_6:75
.= ( 22 + ( ( ( card ( ( ( ( k5 ';' k6 ) ';' k7 ) ';' k8 ) ';' k9 ) ) + 1 ) + 1 ) ) by SCMP_GCD:4
.= ( 22 + ( ( ( ( card ( ( ( k5 ';' k6 ) ';' k7 ) ';' k8 ) ) + 1 ) + 1 ) + 1 ) ) by SCMP_GCD:4
.= ( 22 + ( ( ( ( ( card ( ( k5 ';' k6 ) ';' k7 ) ) + 1 ) + 1 ) + 1 ) + 1 ) ) by SCMP_GCD:4
.= ( 22 + ( ( ( ( ( ( card ( k5 ';' k6 ) ) + 1 ) + 1 ) + 1 ) + 1 ) + 1 ) ) by SCMP_GCD:4
.= ( 22 + ( ( ( ( ( 2 + 1 ) + 1 ) + 1 ) + 1 ) + 1 ) ) by SCMP_GCD:5
.= 29;
end;
Lm18: ( card WH3 ) = 31
proof
thus ( card WH3 ) = ( 29 + 2 ) by Lm17,SCMPDS_8:17
.= 31;
end;
theorem
Th12: ( card ( Partition ) ) = 38
proof
thus ( card ( Partition ) ) = ( ( card ( ( ( K4 ';' WH3 ) ';' j8 ) ';' j9 ) ) + 1 ) by SCMP_GCD:4
.= ( ( ( card ( ( K4 ';' WH3 ) ';' j8 ) ) + 1 ) + 1 ) by SCMP_GCD:4
.= ( ( ( ( card ( K4 ';' WH3 ) ) + 1 ) + 1 ) + 1 ) by SCMP_GCD:4
.= ( ( ( ( ( card K4 ) + ( card WH3 ) ) + 1 ) + 1 ) + 1 ) by AFINSQ_1:17
.= ( ( ( ( 4 + 31 ) + 1 ) + 1 ) + 1 ) by Lm18,CKB7:1
.= 38;
end;
