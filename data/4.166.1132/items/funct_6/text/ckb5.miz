environ
vocabularies FUNCT_1,SUBSET_1,NUMBERS,FUNCT_2,XBOOLE_0,CARD_3,FINSEQ_1,RELAT_1,FINSEQ_2,FUNCOP_1,TARSKI,ZFMISC_1,FUNCT_5,PARTFUN1,SETFAM_1,FINSEQ_4,MCART_1,FUNCT_6,ORDINAL1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,MCART_1,SETFAM_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCT_3,WELLORD2,FUNCOP_1,FUNCT_4,FUNCT_5,ORDINAL1,CARD_3;
definitions TARSKI,FUNCT_1,WELLORD2,XBOOLE_0,BINOP_1,FUNCOP_1;
theorems TARSKI,ENUMSET1,ZFMISC_1,MCART_1,FUNCT_1,SETFAM_1,FUNCT_2,FUNCT_3,FUNCOP_1,CARD_1,CARD_3,FUNCT_4,FUNCT_5,PARTFUN1,WELLORD2,RELAT_1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4;
schemes FUNCT_1,PARTFUN1,CARD_3,CLASSES1,XBOOLE_0;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,ORDINAL1,RELSET_1;
constructors ENUMSET1,SETFAM_1,PARTFUN1,WELLORD2,BINOP_1,FUNCT_3,FUNCOP_1,FUNCT_4,FUNCT_5,CARD_3,RELSET_1;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
reserve y for set;
reserve z for set;
reserve X for set;
reserve Y for set;
reserve f for Function;
theorem
([: X,Y :] <> ( {} ) implies (( curry ( [: X,Y :] --> z ) ) = ( X --> ( Y --> z ) ) & ( curry' ( [: X,Y :] --> z ) ) = ( Y --> ( X --> z ) )))
proof
assume A1: [: X,Y :] <> ( {} );
A2: ( dom ( [: X,Y :] --> z ) ) = [: X,Y :] by FUNCOP_1:13;
A3: ( dom ( X --> z ) ) = X by FUNCOP_1:13;
A4:now
let x;
assume A5: x in Y;
then consider f such that A6: (( ( curry' ( [: X,Y :] --> z ) ) . x ) = f & ( dom f ) = X) and ( rng f ) c= ( rng ( [: X,Y :] --> z ) ) and A7: (for y holds (y in X implies ( f . y ) = ( ( [: X,Y :] --> z ) . (y,x) ))) by A1,A2,FUNCT_5:32;
A8:now
let y;
assume A9: y in X;
then A10: ( f . y ) = ( ( [: X,Y :] --> z ) . (y,x) ) by A7;
(( ( X --> z ) . y ) = z & [ y,x ] in [: X,Y :]) by A5,A9,FUNCOP_1:7,ZFMISC_1:87;
hence ( f . y ) = ( ( X --> z ) . y ) by A10,FUNCOP_1:7;
end;
( ( Y --> ( X --> z ) ) . x ) = ( X --> z ) by A5,FUNCOP_1:7;
hence ( ( curry' ( [: X,Y :] --> z ) ) . x ) = ( ( Y --> ( X --> z ) ) . x ) by A3,A6,A8,FUNCT_1:2;
end;
A11: ( dom ( Y --> z ) ) = Y by FUNCOP_1:13;
A12:now
let x;
assume A13: x in X;
then consider f such that A14: (( ( curry ( [: X,Y :] --> z ) ) . x ) = f & ( dom f ) = Y) and ( rng f ) c= ( rng ( [: X,Y :] --> z ) ) and A15: (for y holds (y in Y implies ( f . y ) = ( ( [: X,Y :] --> z ) . (x,y) ))) by A1,A2,FUNCT_5:29;
A16:now
let y;
assume A17: y in Y;
then A18: ( f . y ) = ( ( [: X,Y :] --> z ) . (x,y) ) by A15;
(( ( Y --> z ) . y ) = z & [ x,y ] in [: X,Y :]) by A13,A17,FUNCOP_1:7,ZFMISC_1:87;
hence ( f . y ) = ( ( Y --> z ) . y ) by A18,FUNCOP_1:7;
end;
( ( X --> ( Y --> z ) ) . x ) = ( Y --> z ) by A13,FUNCOP_1:7;
hence ( ( curry ( [: X,Y :] --> z ) ) . x ) = ( ( X --> ( Y --> z ) ) . x ) by A11,A14,A16,FUNCT_1:2;
end;
(( dom ( X --> ( Y --> z ) ) ) = X & ( dom ( curry ( [: X,Y :] --> z ) ) ) = X) by A1,A2,FUNCOP_1:13,FUNCT_5:24;
hence ( curry ( [: X,Y :] --> z ) ) = ( X --> ( Y --> z ) ) by A12,FUNCT_1:2;
(( dom ( Y --> ( X --> z ) ) ) = Y & ( dom ( curry' ( [: X,Y :] --> z ) ) ) = Y) by A1,A2,FUNCOP_1:13,FUNCT_5:24;
hence thesis by A4,FUNCT_1:2;
end;
