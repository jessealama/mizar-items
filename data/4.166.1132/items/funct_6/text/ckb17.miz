environ
vocabularies FUNCT_1,SUBSET_1,NUMBERS,FUNCT_2,XBOOLE_0,CARD_3,FINSEQ_1,RELAT_1,FINSEQ_2,FUNCOP_1,TARSKI,ZFMISC_1,FUNCT_5,PARTFUN1,SETFAM_1,FINSEQ_4,MCART_1,FUNCT_6,ORDINAL1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,MCART_1,SETFAM_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCT_3,WELLORD2,FUNCOP_1,FUNCT_4,FUNCT_5,ORDINAL1,CARD_3;
definitions TARSKI,FUNCT_1,WELLORD2,XBOOLE_0,BINOP_1,FUNCOP_1;
theorems TARSKI,ENUMSET1,ZFMISC_1,MCART_1,FUNCT_1,SETFAM_1,FUNCT_2,FUNCT_3,FUNCOP_1,CARD_1,CARD_3,FUNCT_4,FUNCT_5,PARTFUN1,WELLORD2,RELAT_1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes FUNCT_1,PARTFUN1,CARD_3,CLASSES1,XBOOLE_0;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,ORDINAL1,RELSET_1;
constructors ENUMSET1,SETFAM_1,PARTFUN1,WELLORD2,BINOP_1,FUNCT_3,FUNCOP_1,FUNCT_4,FUNCT_5,CARD_3,RELSET_1;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
reserve y for set;
reserve y1 for set;
reserve z for set;
reserve X for set;
reserve Y for set;
reserve Z for set;
reserve V1 for set;
reserve V2 for set;
reserve f for Function;
reserve g for Function;
theorem
((((( uncurry f ) in ( PFuncs ([: X,Y :],Z) ) or ( uncurry' f ) in ( PFuncs ([: Y,X :],Z) )) & ( rng f ) c= ( PFuncs (V1,V2) )) & ( dom f ) c= X) implies f in ( PFuncs (X,( PFuncs (Y,Z) )) ))
proof
assume that
A1: (( uncurry f ) in ( PFuncs ([: X,Y :],Z) ) or ( uncurry' f ) in ( PFuncs ([: Y,X :],Z) ))
and
A2: ( rng f ) c= ( PFuncs (V1,V2) )
and
A3: ( dom f ) c= X;
A4: ((ex g st ((( uncurry f ) = g & ( dom g ) c= [: X,Y :]) & ( rng g ) c= Z)) or (ex g st ((( uncurry' f ) = g & ( dom g ) c= [: Y,X :]) & ( rng g ) c= Z))) by A1,PARTFUN1:def 3;
( uncurry' f ) = ( ~ ( uncurry f ) ) by FUNCT_5:def 4;
then A5: ( dom ( uncurry' f ) ) c= [: Y,X :] by A4,FUNCT_4:45;
( rng f ) c= ( PFuncs (Y,Z) )
proof
let y;
assume A6: y in ( rng f );
then consider x such that A7: (x in ( dom f ) & y = ( f . x )) by FUNCT_1:def 3;
(ex g st ((y = g & ( dom g ) c= V1) & ( rng g ) c= V2)) by A2,A6,PARTFUN1:def 3;
then reconsider h = y as Function;
A8: ( rng h ) c= Z
proof
let z;
assume z in ( rng h );
then (ex y1 st (y1 in ( dom h ) & z = ( h . y1 ))) by FUNCT_1:def 3;
then (z in ( rng ( uncurry f ) ) & z in ( rng ( uncurry' f ) )) by A7,FUNCT_5:38,FUNCT_5:39;
hence thesis by A4;
end;
( dom h ) c= Y
proof
let z;
assume z in ( dom h );
then [ z,x ] in ( dom ( uncurry' f ) ) by A7,FUNCT_5:39;
hence thesis by A5,ZFMISC_1:87;
end;
hence thesis by A8,PARTFUN1:def 3;
end;
hence thesis by A3,PARTFUN1:def 3;
end;
