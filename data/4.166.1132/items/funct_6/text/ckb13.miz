environ
vocabularies FUNCT_1,SUBSET_1,NUMBERS,FUNCT_2,XBOOLE_0,CARD_3,FINSEQ_1,RELAT_1,FINSEQ_2,FUNCOP_1,TARSKI,ZFMISC_1,FUNCT_5,PARTFUN1,SETFAM_1,FINSEQ_4,MCART_1,FUNCT_6,ORDINAL1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,MCART_1,SETFAM_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCT_3,WELLORD2,FUNCOP_1,FUNCT_4,FUNCT_5,ORDINAL1,CARD_3;
definitions TARSKI,FUNCT_1,WELLORD2,XBOOLE_0,BINOP_1,FUNCOP_1;
theorems TARSKI,ENUMSET1,ZFMISC_1,MCART_1,FUNCT_1,SETFAM_1,FUNCT_2,FUNCT_3,FUNCOP_1,CARD_1,CARD_3,FUNCT_4,FUNCT_5,PARTFUN1,WELLORD2,RELAT_1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes FUNCT_1,PARTFUN1,CARD_3,CLASSES1,XBOOLE_0;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,ORDINAL1,RELSET_1;
constructors ENUMSET1,SETFAM_1,PARTFUN1,WELLORD2,BINOP_1,FUNCT_3,FUNCOP_1,FUNCT_4,FUNCT_5,CARD_3,RELSET_1;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve x for set;
reserve y for set;
reserve y1 for set;
reserve y2 for set;
reserve z for set;
reserve X for set;
reserve Y for set;
reserve Z for set;
reserve V1 for set;
reserve V2 for set;
reserve f for Function;
reserve g for Function;
reserve f1 for Function;
theorem
((((( uncurry f ) in ( Funcs ([: X,Y :],Z) ) or ( uncurry' f ) in ( Funcs ([: Y,X :],Z) )) & ( rng f ) c= ( PFuncs (V1,V2) )) & ( dom f ) = X) implies f in ( Funcs (X,( Funcs (Y,Z) )) ))
proof
assume that
A1: (( uncurry f ) in ( Funcs ([: X,Y :],Z) ) or ( uncurry' f ) in ( Funcs ([: Y,X :],Z) ))
and
A2: ( rng f ) c= ( PFuncs (V1,V2) )
and
A3: ( dom f ) = X;
A4: ( uncurry' f ) = ( ~ ( uncurry f ) ) by FUNCT_5:def 4;
A5: ((ex g st ((( uncurry f ) = g & ( dom g ) = [: X,Y :]) & ( rng g ) c= Z)) or (ex g st ((( uncurry' f ) = g & ( dom g ) = [: Y,X :]) & ( rng g ) c= Z))) by A1,FUNCT_2:def 2;
then A6: ( dom ( uncurry' f ) ) = [: Y,X :] by A4,FUNCT_4:46;
( rng f ) c= ( Funcs (Y,Z) )
proof
let y;
assume A7: y in ( rng f );
then consider x such that A8: x in ( dom f ) and A9: y = ( f . x ) by FUNCT_1:def 3;
(ex g st ((y = g & ( dom g ) c= V1) & ( rng g ) c= V2)) by A2,A7,PARTFUN1:def 3;
then reconsider h = y as Function;
A10: ( dom h ) = Y
proof
thus ( dom h ) c= Y
proof
let z;
assume z in ( dom h );
then [ z,x ] in ( dom ( uncurry' f ) ) by A8,A9,FUNCT_5:39;
hence thesis by A6,ZFMISC_1:87;
end;

let z;
assume z in Y;
then [ z,x ] in [: Y,X :] by A3,A8,ZFMISC_1:87;
then [ x,z ] in ( dom ( uncurry f ) ) by A4,A6,FUNCT_4:42;
then consider y1,f1,y2 such that A11: [ x,z ] = [ y1,y2 ] and y1 in ( dom f ) and A12: (f1 = ( f . y1 ) & y2 in ( dom f1 )) by FUNCT_5:def 2;
x = y1 by A11,ZFMISC_1:27;
hence thesis by A9,A11,A12,ZFMISC_1:27;
end;
( rng h ) c= Z
proof
let z;
assume z in ( rng h );
then (ex y1 st (y1 in ( dom h ) & z = ( h . y1 ))) by FUNCT_1:def 3;
then (z in ( rng ( uncurry f ) ) & z in ( rng ( uncurry' f ) )) by A8,A9,FUNCT_5:38,FUNCT_5:39;
hence thesis by A5;
end;
hence thesis by A10,FUNCT_2:def 2;
end;
hence thesis by A3,FUNCT_2:def 2;
end;
