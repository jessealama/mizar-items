environ
vocabularies NUMBERS,NAT_1,XREAL_0,ORDINAL1,PROB_1,FINSEQ_1,ZFMISC_1,XBOOLE_0,CARD_1,ARYTM_3,XXREAL_0,ARYTM_1,RELAT_1,SEQ_1,FUNCT_1,SEQ_2,ORDINAL2,SUBSET_1,COMPLEX1,RPR_1,TARSKI,VALUED_0,EQREL_1,CARD_3,PROB_2,SERIES_1,XXREAL_2,FINSEQ_2,SETFAM_1,BINOP_2,SETWISEO,FINSOP_1,SEQM_3,SETLIM_2,PROB_3,SEQ_4;
notations FINSEQ_1,ORDINAL1,CARD_3,REAL_1,RELAT_1,TARSKI,XBOOLE_0,RVSUM_1,FINSOP_1,SUBSET_1,NUMBERS,XCMPLX_0,XREAL_0,SETFAM_1,BINOP_1,SETWOP_2,BINOP_2,SETWISEO,NAT_1,FINSEQ_2,COMPLEX1,SEQ_1,SEQ_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,PROB_1,PROB_2,KURATO_0,SETLIM_2,SEQM_3,SETLIM_1,RINFSUP1,SERIES_1,XXREAL_0,CKB9,CKB10,CKB19,CKB25,CKB56,CKB59,CKB61,CKB62,CKB69,CKB70,CKB77;
definitions TARSKI,XBOOLE_0,RELAT_1,FINSEQ_1,FINSEQ_2,CKB9,CKB10,CKB19,CKB25,CKB61,CKB62;
theorems FUNCT_1,FUNCT_2,SEQ_1,ABSVALUE,SEQ_2,SUBSET_1,NAT_1,TARSKI,XBOOLE_0,XBOOLE_1,PROB_2,SETLIM_2,RINFSUP1,RELAT_1,SETFAM_1,ZFMISC_1,SEQM_3,CARD_3,SETLIM_1,PROB_1,FINSUB_1,SERIES_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,RVSUM_1,FINSOP_1,SETWISEO,BINOP_2,XREAL_1,XXREAL_0,ORDINAL1,VALUED_0,FUNCOP_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB57,CKB58,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB71,CKB72,CKB74,CKB75,CKB76,CKB78,CKB79,CKB80;
schemes CLASSES1,NAT_1,RECDEF_1,FINSEQ_2,PARTFUN1;
registrations SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XREAL_0,NAT_1,MEMBERED,PROB_1,VALUED_0,SEQ_2,FINSEQ_1,CKB26,CKB27,CKB28,CKB29,CKB73;
constructors SETFAM_1,PARTFUN1,SETWISEO,XXREAL_0,REAL_1,NAT_1,BINOP_2,COMPLEX1,SEQ_2,SEQM_3,PROB_2,FINSOP_1,RVSUM_1,SERIES_1,BINOP_1,KURATO_0,SETLIM_1,RINFSUP1,SETLIM_2,SEQ_1,PROB_1,RELSET_1,SETWOP_2,CKB9,CKB10,CKB19,CKB25,CKB56,CKB59,CKB61,CKB62,CKB69,CKB70,CKB77;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve n for Nat;
reserve m for Nat;
reserve k for Nat;
reserve x for set;
reserve y for set;
reserve Omega for non empty set;
reserve Sigma for (SigmaField of Omega);
reserve P for (Probability of Sigma);
theorem
Th69: (for FSeq being (FinSequence of Sigma) holds (for ASeq being (SetSequence of Sigma) holds (((for k holds (k in ( dom FSeq ) implies ( ASeq . k ) = ( FSeq . k ))) & (for k holds ((not k in ( dom FSeq )) implies ( ASeq . k ) = ( {} )))) implies (((( Partial_Sums ( P * ASeq ) ) is  convergent & ( Sum ( P * ASeq ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) )) & ( P . ( Union ASeq ) ) <= ( Sum ( P * ASeq ) )) & ( Sum ( P * FSeq ) ) = ( Sum ( P * ASeq ) )))))
proof
let FSeq being (FinSequence of Sigma);
let ASeq being (SetSequence of Sigma);
assume that
A1: (for k holds (k in ( dom FSeq ) implies ( ASeq . k ) = ( FSeq . k )))
and
A2: (for k holds ((not k in ( dom FSeq )) implies ( ASeq . k ) = ( {} )));
A3: ( ASeq . ( 0 ) ) = ( {} ) by A1,A2,CKB68:1;
A4: ( ( P * ASeq ) . ( 0 ) ) = ( P . ( ASeq . ( 0 ) ) ) by FUNCT_2:15
.= ( 0 ) by A3,VALUED_0:def 19;
A5: (for k holds (k in ( dom FSeq ) implies ( ( P * ASeq ) . k ) = ( ( P * FSeq ) . k )))
proof
let k;
assume that
A6: k in ( dom FSeq );
k in ( NAT ) by ORDINAL1:def 12;
hence ( ( P * ASeq ) . k ) = ( P . ( ASeq . k ) ) by FUNCT_2:15
.= ( P . ( FSeq . k ) ) by A1,A6
.= ( ( P * FSeq ) . k ) by A6,FUNCT_1:13;
end;
1 = ( ( 0 ) + 1 );
then A7: ( ( Partial_Sums ( P * ASeq ) ) . 1 ) = ( ( ( Partial_Sums ( P * ASeq ) ) . ( 0 ) ) + ( ( P * ASeq ) . 1 ) ) by SERIES_1:def 1
.= ( ( ( P * ASeq ) . ( 0 ) ) + ( ( P * ASeq ) . 1 ) ) by SERIES_1:def 1
.= ( ( P * ASeq ) . 1 ) by A4;
A8: (( len FSeq ) >= 1 implies (( ( Partial_Sums ( P * ASeq ) ) . 1 ) = ( ( P * FSeq ) . 1 ) & (for m holds ((m <> ( 0 ) & m < ( len FSeq )) implies ( ( Partial_Sums ( P * ASeq ) ) . ( m + 1 ) ) = ( ( ( Partial_Sums ( P * ASeq ) ) . m ) + ( ( P * FSeq ) . ( m + 1 ) ) )))))
proof
assume ( len FSeq ) >= 1;
then 1 in ( dom FSeq ) by CKB3:1;
hence ( ( Partial_Sums ( P * ASeq ) ) . 1 ) = ( ( P * FSeq ) . 1 ) by A5,A7;
thus (for m holds ((m <> ( 0 ) & m < ( len FSeq )) implies ( ( Partial_Sums ( P * ASeq ) ) . ( m + 1 ) ) = ( ( ( Partial_Sums ( P * ASeq ) ) . m ) + ( ( P * FSeq ) . ( m + 1 ) ) )))
proof
let m;
assume that
m <> ( 0 )
and
A9: m < ( len FSeq );
reconsider m1 = m as (Element of ( NAT )) by ORDINAL1:def 12;
( m + 1 ) in ( Seg ( len FSeq ) ) by A9,FINSEQ_3:11;
then A10: ( m + 1 ) in ( dom FSeq ) by FINSEQ_1:def 3;
thus ( ( Partial_Sums ( P * ASeq ) ) . ( m + 1 ) ) = ( ( ( Partial_Sums ( P * ASeq ) ) . m1 ) + ( ( P * ASeq ) . ( m1 + 1 ) ) ) by SERIES_1:def 1
.= ( ( ( Partial_Sums ( P * ASeq ) ) . m ) + ( ( P * FSeq ) . ( m + 1 ) ) ) by A5,A10;
end;

end;
defpred P[ Nat ]
 means
( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + $1 ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) );
A11: (for m being Nat holds ( ( P * ASeq ) . ( ( ( len FSeq ) + 1 ) + m ) ) = ( 0 ))
proof
set k = ( ( len FSeq ) + 1 );
let m being Nat;
reconsider m1 = m as (Element of ( NAT )) by ORDINAL1:def 12;
( k + m ) >= k by NAT_1:11;
then ( ( ( len FSeq ) + 1 ) + m ) > ( len FSeq ) by CKB1:1;
then (not ( ( ( len FSeq ) + 1 ) + m ) in ( dom FSeq )) by FINSEQ_3:25;
then A12: ( ASeq . ( ( ( len FSeq ) + 1 ) + m ) ) = ( {} ) by A2;
thus ( ( P * ASeq ) . ( ( ( len FSeq ) + 1 ) + m ) ) = ( P . ( ASeq . ( ( ( len FSeq ) + 1 ) + m1 ) ) ) by FUNCT_2:15
.= ( 0 ) by A12,VALUED_0:def 19;
end;
A13: (for k holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k;
assume that
A14: ( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + k ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) );
reconsider k1 = k as (Element of ( NAT )) by ORDINAL1:def 12;
( ( Partial_Sums ( P * ASeq ) ) . ( ( ( ( len FSeq ) + 1 ) + k ) + 1 ) ) = ( ( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + k1 ) ) + ( ( P * ASeq ) . ( ( ( len FSeq ) + 1 ) + ( k1 + 1 ) ) ) ) by SERIES_1:def 1
.= ( ( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + k ) ) + ( 0 ) ) by A11;
hence thesis by A14;
end;
now
let n being (Element of ( NAT ));
( ( Partial_Diff_Union ASeq ) . n ) c= ( ASeq . n ) by CKB21:1;
hence ( ( P * ( Partial_Diff_Union ASeq ) ) . n ) <= ( ( P * ASeq ) . n ) by CKB6:1;
end;
then A15: (for n being (Element of ( NAT )) holds ( ( Partial_Sums ( P * ( Partial_Diff_Union ASeq ) ) ) . n ) <= ( ( Partial_Sums ( P * ASeq ) ) . n )) by SERIES_1:14;
A17: ( Partial_Sums ( P * ( Partial_Diff_Union ASeq ) ) ) is  convergent by CKB54:1;
( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + ( 0 ) ) ) = ( ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) ) + ( ( P * ASeq ) . ( ( ( len FSeq ) + 1 ) + ( 0 ) ) ) ) by SERIES_1:def 1
.= ( ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) ) + ( 0 ) ) by A11;
then A18: P[ ( 0 ) ];
A19: (for k holds P[ k ]) from NAT_1:sch 2(A18,A13);
A20: (for m holds (( ( len FSeq ) + 1 ) <= m implies ( ( Partial_Sums ( P * ASeq ) ) . m ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) )))
proof
let m;
assume ( ( len FSeq ) + 1 ) <= m;
then (ex k being Nat st m = ( ( ( len FSeq ) + 1 ) + k )) by NAT_1:10;
hence thesis by A19;
end;
then A21: ( lim ( Partial_Sums ( P * ASeq ) ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) ) by CKB4:1;
then A22: ( Sum ( P * ASeq ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) ) by SERIES_1:def 3;
A23: ( Sum ( P * FSeq ) ) = ( Sum ( P * ASeq ) )
proof
now
per cases ;
suppose ( len FSeq ) = ( 0 );

then (( len ( P * FSeq ) ) = ( 0 ) & ( Sum ( P * ASeq ) ) = ( 0 )) by A4,A22,CKB78:1,SERIES_1:def 1;
hence thesis by CKB79:1;
end;
suppose A24: ( len FSeq ) <> ( 0 );

then 1 <= ( len FSeq ) by NAT_1:14;
then A25: 1 <= ( len ( P * FSeq ) ) by CKB78:1;
then consider seq1 being Real_Sequence such that A26: ( seq1 . 1 ) = ( ( P * FSeq ) . 1 ) and A27: (for n holds ((( 0 ) <> n & n < ( len ( P * FSeq ) )) implies ( seq1 . ( n + 1 ) ) = ( ( seq1 . n ) + ( ( P * FSeq ) . ( n + 1 ) ) ))) and A28: ( Sum ( P * FSeq ) ) = ( seq1 . ( len ( P * FSeq ) ) ) by CKB80:1;
defpred P[ set,set ]
 means
(ex n st (((n = $1 & (n = ( 0 ) implies $2 = ( 0 ))) & ((n <> ( 0 ) & n <= ( len ( P * FSeq ) )) implies $2 = ( seq1 . n ))) & ((n <> ( 0 ) & n > ( len ( P * FSeq ) )) implies $2 = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) ))));
(ex seq being Real_Sequence st (for n holds (((n = ( 0 ) implies ( seq . n ) = ( 0 )) & ((n <> ( 0 ) & n <= ( len ( P * FSeq ) )) implies ( seq . n ) = ( seq1 . n ))) & ((n <> ( 0 ) & n > ( len ( P * FSeq ) )) implies ( seq . n ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) )))))
proof
A29: (for x holds (x in ( NAT ) implies (ex y st P[ x,y ])))
proof
let x being set;
assume x in ( NAT );
then reconsider n = x as (Element of ( NAT ));
now
per cases ;
case n = ( 0 );
hence P[ x,( 0 ) ];
end;
case (n <> ( 0 ) & n <= ( len ( P * FSeq ) ));
hence P[ x,( seq1 . n ) ];
end;
case (n <> ( 0 ) & (not n <= ( len ( P * FSeq ) )));
hence P[ x,( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) ) ];
end;
end;
hence thesis;
end;
consider f being Function such that A30: (( dom f ) = ( NAT ) & (for x holds (x in ( NAT ) implies P[ x,( f . x ) ]))) from CLASSES1:sch 1(A29);
now
let x;
assume x in ( NAT );
then (ex n st (((n = x & (n = ( 0 ) implies ( f . x ) = ( 0 ))) & ((n <> ( 0 ) & n <= ( len ( P * FSeq ) )) implies ( f . x ) = ( seq1 . n ))) & ((n <> ( 0 ) & n > ( len ( P * FSeq ) )) implies ( f . x ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) )))) by A30;
hence ( f . x ) is  real;
end;
then reconsider f as Real_Sequence by A30,SEQ_1:1;
take seq = f;
let n;
n in ( NAT ) by ORDINAL1:def 12;
then (ex k st (((k = n & (k = ( 0 ) implies ( seq . n ) = ( 0 ))) & ((k <> ( 0 ) & k <= ( len ( P * FSeq ) )) implies ( seq . n ) = ( seq1 . k ))) & ((k <> ( 0 ) & k > ( len ( P * FSeq ) )) implies ( seq . n ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) )))) by A30;
hence thesis;
end;
then consider seq2 being Real_Sequence such that A31: (for n holds (((n = ( 0 ) implies ( seq2 . n ) = ( 0 )) & ((n <> ( 0 ) & n <= ( len ( P * FSeq ) )) implies ( seq2 . n ) = ( seq1 . n ))) & ((n <> ( 0 ) & n > ( len ( P * FSeq ) )) implies ( seq2 . n ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) ))));
defpred P[ Nat ]
 means
( seq2 . $1 ) = ( ( Partial_Sums ( P * ASeq ) ) . $1 );
A32: (for k holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k;
assume that
A33: P[ k ];
now
per cases ;
case k = ( 0 );
thus ( seq2 . 1 ) = ( ( Partial_Sums ( P * ASeq ) ) . 1 ) by A8,A24,A25,A26,A31,NAT_1:14;
end;
case A34: (k <> ( 0 ) & k <= ( ( len ( P * FSeq ) ) - 1 ));
then A35: ( k + ( 0 ) ) < ( ( ( len ( P * FSeq ) ) - 1 ) + 1 ) by XREAL_1:8;
then A36: k < ( len FSeq ) by CKB78:1;
( k + 1 ) <= ( ( ( len ( P * FSeq ) ) - 1 ) + 1 ) by A34,XREAL_1:7;
hence ( seq2 . ( k + 1 ) ) = ( seq1 . ( k + 1 ) ) by A31
.= ( ( seq1 . k ) + ( ( P * FSeq ) . ( k + 1 ) ) ) by A27,A34,A35
.= ( ( ( Partial_Sums ( P * ASeq ) ) . k ) + ( ( P * FSeq ) . ( k + 1 ) ) ) by A31,A33,A34,A35
.= ( ( Partial_Sums ( P * ASeq ) ) . ( k + 1 ) ) by A8,A24,A34,A36,NAT_1:14;
end;
case (k <> ( 0 ) & (not k <= ( ( len ( P * FSeq ) ) - 1 )));
then A37: ( k + 1 ) > ( ( ( len ( P * FSeq ) ) - 1 ) + 1 ) by XREAL_1:8;
then ( k + 1 ) >= ( ( len ( P * FSeq ) ) + 1 ) by NAT_1:13;
then consider i being Nat such that A38: ( k + 1 ) = ( ( ( len ( P * FSeq ) ) + 1 ) + i ) by NAT_1:10;
thus ( seq2 . ( k + 1 ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) ) by A31,A37
.= ( ( Partial_Sums ( P * ASeq ) ) . ( len FSeq ) ) by CKB78:1
.= ( ( Partial_Sums ( P * ASeq ) ) . ( ( ( len FSeq ) + 1 ) + i ) ) by A19
.= ( ( Partial_Sums ( P * ASeq ) ) . ( k + 1 ) ) by A38,CKB78:1;
end;
end;
hence thesis;
end;
( seq2 . ( 0 ) ) = ( ( P * ASeq ) . ( 0 ) ) by A4,A31
.= ( ( Partial_Sums ( P * ASeq ) ) . ( 0 ) ) by SERIES_1:def 1;
then A39: P[ ( 0 ) ];
A40: (for k holds P[ k ]) from NAT_1:sch 2(A39,A32);
( len ( P * FSeq ) ) <> ( 0 ) by A24,CKB78:1;
then ( seq2 . ( len ( P * FSeq ) ) ) = ( Sum ( P * FSeq ) ) by A28,A31;
hence ( Sum ( P * FSeq ) ) = ( ( Partial_Sums ( P * ASeq ) ) . ( len ( P * FSeq ) ) ) by A40
.= ( Sum ( P * ASeq ) ) by A22,CKB78:1;
end;
end;
hence thesis;
end;
( Partial_Sums ( P * ASeq ) ) is  convergent by A20,CKB4:1;
then ( lim ( Partial_Sums ( P * ( Partial_Diff_Union ASeq ) ) ) ) <= ( lim ( Partial_Sums ( P * ASeq ) ) ) by A17,A15,SEQ_2:18;
then ( Sum ( P * ( Partial_Diff_Union ASeq ) ) ) <= ( lim ( Partial_Sums ( P * ASeq ) ) ) by SERIES_1:def 3;
then ( Sum ( P * ( Partial_Diff_Union ASeq ) ) ) <= ( Sum ( P * ASeq ) ) by SERIES_1:def 3;
then ( P . ( Union ( Partial_Diff_Union ASeq ) ) ) <= ( Sum ( P * ASeq ) ) by CKB55:1;
hence thesis by A20,A21,A23,CKB4:1,CKB24:1,SERIES_1:def 3;
end;
