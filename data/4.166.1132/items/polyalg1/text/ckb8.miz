environ
vocabularies NUMBERS,STRUCT_0,ALGSTR_0,VECTSP_1,FUNCSDOM,BINOP_1,SUBSET_1,FUNCT_1,ZFMISC_1,XBOOLE_0,CARD_1,FUNCOP_1,RELAT_1,GROUP_1,LATTICES,MESFUNC1,NAT_1,ARYTM_3,SUPINF_2,POLYNOM3,RLVECT_1,ARYTM_1,ALGSTR_1,FINSEQ_1,RFINSEQ,FINSEQ_3,XXREAL_0,ORDINAL4,PARTFUN1,CARD_3,REALSET1,TARSKI,UNIALG_2,RLSUB_1,SETFAM_1,POLYNOM1,ALGSEQ_1,POLYALG1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,NUMBERS,XCMPLX_0,REALSET1,NAT_1,STRUCT_0,ALGSTR_0,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCOP_1,FINSEQ_1,RFINSEQ,BINOP_1,NAT_D,GROUP_1,RLVECT_1,VFUNCT_1,VECTSP_1,NORMSP_1,BHSP_1,POLYNOM1,ALGSTR_1,ALGSEQ_1,POLYNOM3,POLYNOM5,VECTSP_4,XXREAL_0,CKB1,CKB3,CKB5;
definitions TARSKI,RLVECT_1,GROUP_1,VECTSP_1,VECTSP_4,BINOP_1,REALSET1,STRUCT_0,ALGSTR_0,CKB3;
theorems TARSKI,NAT_1,RLVECT_1,VECTSP_1,FUNCT_1,FUNCT_2,FUNCOP_1,FINSEQ_1,FINSEQ_3,FINSEQ_5,RFINSEQ,BINOP_1,POLYNOM1,POLYNOM3,ZFMISC_1,POLYNOM5,BINOM,RELAT_1,VECTSP_4,SETFAM_1,ALGSTR_1,XBOOLE_0,XBOOLE_1,GROUP_1,XREAL_1,ORDINAL1,NORMSP_1,PARTFUN1,CARD_1,NAT_D,CKB3,CKB6,CKB7;
schemes SUBSET_1,BINOP_1;
registrations XBOOLE_0,SUBSET_1,RELSET_1,XREAL_0,NAT_1,FINSEQ_1,REALSET1,STRUCT_0,VECTSP_1,FVSUM_1,POLYNOM3,POLYNOM5,BINOM,ORDINAL1,VFUNCT_1,FUNCT_2,CKB1,CKB2,CKB4;
constructors SETFAM_1,BINOP_1,XXREAL_0,REALSET1,RFINSEQ,NAT_D,ALGSTR_1,VECTSP_4,BHSP_1,POLYNOM1,POLYNOM3,POLYNOM5,SEQ_1,REAL_1,RELSET_1,FUNCOP_1,FVSUM_1,VFUNCT_1,CKB1,CKB3;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
definition
let L being non  empty doubleLoopStr;
func Formal-Series L ->  strict non  empty AlgebraStr over L means 
:Def2: ((((((for x being set holds (x in (the carrier of it) iff x is (sequence of L))) & (for x,y being (Element of it) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x + y ) = ( p + q ))))) & (for x,y being (Element of it) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x * y ) = ( p *' q ))))) & (for a being (Element of L) holds (for x being (Element of it) holds (for p being (sequence of L) holds (x = p implies ( a * x ) = ( a * p )))))) & ( 0. it ) = ( 0_. L )) & ( 1. it ) = ( 1_. L ));
existence
proof
A1: ( 0_. L ) in { x where x is (sequence of L): (not contradiction) };
then reconsider Ca = { x where x is (sequence of L): (not contradiction) } as non  empty set;
reconsider Ze = ( 0_. L ) as (Element of Ca) by A1;
defpred P[ set,set,set ]
 means
(ex p,q being (sequence of L) st ((p = $1 & q = $2) & $3 = ( p + q )));
A2: (for x,y being (Element of Ca) holds (ex u being (Element of Ca) st P[ x,y,u ]))
proof
let x being (Element of Ca);
let y being (Element of Ca);
x in Ca;
then consider p being (sequence of L) such that A3: x = p;
y in Ca;
then consider q being (sequence of L) such that A4: y = q;
( p + q ) in Ca;
then reconsider u = ( p + q ) as (Element of Ca);
take u;
take p;
take q;
thus thesis by A3,A4;
end;
consider Ad being (Function of [: Ca,Ca :],Ca) such that A5: (for x,y being (Element of Ca) holds P[ x,y,( Ad . (x,y) ) ]) from BINOP_1:sch 3(A2);
( 1_. L ) in { x where x is (sequence of L): (not contradiction) };
then reconsider Un = ( 1_. L ) as (Element of Ca);
defpred P[ set,set,set ]
 means
(ex p,q being (sequence of L) st ((p = $1 & q = $2) & $3 = ( p *' q )));
A6: (for x,y being (Element of Ca) holds (ex u being (Element of Ca) st P[ x,y,u ]))
proof
let x being (Element of Ca);
let y being (Element of Ca);
x in Ca;
then consider p being (sequence of L) such that A7: x = p;
y in Ca;
then consider q being (sequence of L) such that A8: y = q;
( p *' q ) in Ca;
then reconsider u = ( p *' q ) as (Element of Ca);
take u;
take p;
take q;
thus thesis by A7,A8;
end;
consider Mu being (Function of [: Ca,Ca :],Ca) such that A9: (for x,y being (Element of Ca) holds P[ x,y,( Mu . (x,y) ) ]) from BINOP_1:sch 3(A6);
defpred P[ (Element of L),set,set ]
 means
(ex p being (sequence of L) st (p = $2 & $3 = ( $1 * p )));
A10: (for a being (Element of L) holds (for x being (Element of Ca) holds (ex u being (Element of Ca) st P[ a,x,u ])))
proof
let a being (Element of L);
let x being (Element of Ca);
x in Ca;
then consider q being (sequence of L) such that A11: x = q;
( a * q ) in Ca;
then reconsider u = ( a * q ) as (Element of Ca);
take u;
take q;
thus thesis by A11;
end;
consider lm being (Function of [: (the carrier of L),Ca :],Ca) such that A12: (for a being (Element of L) holds (for x being (Element of Ca) holds P[ a,x,( lm . (a,x) ) ])) from BINOP_1:sch 3(A10);
reconsider P = AlgebraStr (# Ca,Ad,Mu,Ze,Un,lm #) as  strict non  empty AlgebraStr over L;
take P;
thus (for x being set holds (x in (the carrier of P) iff x is (sequence of L)))
proof
let x being set;
thus (x in (the carrier of P) implies x is (sequence of L))
proof
assume x in (the carrier of P);
then (ex p being (sequence of L) st x = p);
hence thesis;
end;

thus thesis;
end;

thus (for x,y being (Element of P) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x + y ) = ( p + q ))))
proof
let x being (Element of P);
let y being (Element of P);
let p being (sequence of L);
let q being (sequence of L);
assume A13: (x = p & y = q);
(ex p1,q1 being (sequence of L) st ((p1 = x & q1 = y) & ( Ad . (x,y) ) = ( p1 + q1 ))) by A5;
hence thesis by A13;
end;

thus (for x,y being (Element of P) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x * y ) = ( p *' q ))))
proof
let x being (Element of P);
let y being (Element of P);
let p being (sequence of L);
let q being (sequence of L);
assume A14: (x = p & y = q);
(ex p1,q1 being (sequence of L) st ((p1 = x & q1 = y) & ( Mu . (x,y) ) = ( p1 *' q1 ))) by A9;
hence thesis by A14;
end;

thus (for a being (Element of L) holds (for x being (Element of P) holds (for p being (sequence of L) holds (x = p implies ( a * x ) = ( a * p )))))
proof
let a being (Element of L);
let x being (Element of P);
let p being (sequence of L);
assume that
A15: x = p;
(ex p1 being (sequence of L) st (x = p1 & ( lm . (a,x) ) = ( a * p1 ))) by A12;
hence thesis by A15;
end;

thus ( 0. P ) = ( 0_. L );
thus thesis;
end;
uniqueness
proof
let P1 being  strict non  empty AlgebraStr over L;
let P2 being  strict non  empty AlgebraStr over L;
assume that
A16: (for x being set holds (x in (the carrier of P1) iff x is (sequence of L)))
and
A17: (for x,y being (Element of P1) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x + y ) = ( p + q ))))
and
A18: (for x,y being (Element of P1) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x * y ) = ( p *' q ))))
and
A19: (for a being (Element of L) holds (for x being (Element of P1) holds (for p being (sequence of L) holds (x = p implies ( a * x ) = ( a * p )))))
and
A20: (( 0. P1 ) = ( 0_. L ) & ( 1. P1 ) = ( 1_. L ))
and
A21: (for x being set holds (x in (the carrier of P2) iff x is (sequence of L)))
and
A22: (for x,y being (Element of P2) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x + y ) = ( p + q ))))
and
A23: (for x,y being (Element of P2) holds (for p,q being (sequence of L) holds ((x = p & y = q) implies ( x * y ) = ( p *' q ))))
and
A24: (for a being (Element of L) holds (for x being (Element of P2) holds (for p being (sequence of L) holds (x = p implies ( a * x ) = ( a * p )))))
and
A25: (( 0. P2 ) = ( 0_. L ) & ( 1. P2 ) = ( 1_. L ));
A26:now
let x being set;
(x in (the carrier of P1) iff x is (sequence of L)) by A16;
hence (x in (the carrier of P1) iff x in (the carrier of P2)) by A21;
end;
then A27: (the carrier of P1) = (the carrier of P2) by TARSKI:1;
now
let a being (Element of L);
let x being (Element of P1);
reconsider p = x as (sequence of L) by A16;
reconsider x1 = x as (Element of P2) by A26;
reconsider a1 = a as (Element of L);
thus ( (the lmult of P1) . (a,x) ) = ( a * x )
.= ( a1 * p ) by A19
.= ( a1 * x1 ) by A24
.= ( (the lmult of P2) . (a,x) );
end;
then A28: (the lmult of P1) = (the lmult of P2) by A27,BINOP_1:2;
A29:now
let x being (Element of P1);
let y being (Element of P2);
reconsider y1 = y as (Element of P1) by A26;
reconsider x1 = x as (Element of P2) by A26;
reconsider p = x as (sequence of L) by A16;
reconsider q = y as (sequence of L) by A21;
thus ( (the multF of P1) . (x,y) ) = ( x * y1 )
.= ( p *' q ) by A18
.= ( x1 * y ) by A23
.= ( (the multF of P2) . (x,y) );
end;
now
let x being (Element of P1);
let y being (Element of P2);
reconsider y1 = y as (Element of P1) by A26;
reconsider x1 = x as (Element of P2) by A26;
reconsider p = x as (sequence of L) by A16;
reconsider q = y as (sequence of L) by A21;
thus ( (the addF of P1) . (x,y) ) = ( x + y1 )
.= ( p + q ) by A17
.= ( x1 + y ) by A22
.= ( (the addF of P2) . (x,y) );
end;
then (the addF of P1) = (the addF of P2) by A27,BINOP_1:2;
hence thesis by A20,A25,A27,A29,A28,BINOP_1:2;
end;
end;
