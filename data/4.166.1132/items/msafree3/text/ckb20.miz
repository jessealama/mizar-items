environ
vocabularies XBOOLE_0,STRUCT_0,MSUALG_1,CARD_3,RELAT_1,FUNCT_1,SUBSET_1,PBOOLE,MSUALG_3,TARSKI,FUNCT_6,MEMBER_1,CATALG_1,ZF_MODEL,MSUALG_2,MSAFREE,FUNCOP_1,CARD_1,LANG1,ZFMISC_1,TREES_4,MCART_1,MARGREL1,FINSEQ_1,MSATERM,UNIALG_2,DTCONSTR,FINSET_1,TREES_2,TREES_9,ZF_LANG1,TREES_3,TREES_A,NUMBERS,ARYTM_3,ORDINAL4,XXREAL_0,NAT_1,PARTFUN1,MSUALG_6,PRELAMB;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,FUNCT_1,RELSET_1,STRUCT_0,NUMBERS,NAT_1,MCART_1,FINSET_1,CARD_3,FINSEQ_1,FINSEQ_2,TREES_1,TREES_2,FUNCT_6,TREES_3,TREES_4,DTCONSTR,LANG1,PBOOLE,TREES_9,MSUALG_1,MSUALG_2,MSAFREE,FUNCOP_1,MSUALG_3,EQUATION,MSATERM,MSUALG_6,CATALG_1,XXREAL_0,CKB2,CKB4,CKB17,CKB18;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_2,MSUALG_6,CATALG_1,CKB4,CKB17,CKB18;
theorems TARSKI,ZFMISC_1,FUNCT_1,FUNCT_2,FINSEQ_1,FINSEQ_3,NAT_1,MCART_1,PBOOLE,RELAT_1,CARD_3,CARD_5,FUNCT_6,TREES_3,MSUALG_1,INSTALG1,TREES_4,PRE_CIRC,TREES_1,TREES_2,MSUALG_2,MSUALG_3,MSAFREE,MSATERM,EQUATION,MSUALG_6,XBOOLE_0,XBOOLE_1,ORDINAL1,PARTFUN1,TREES_9,FINSEQ_2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB17,CKB18,CKB19;
schemes PBOOLE,MSATERM;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XREAL_0,FINSEQ_1,TREES_2,TREES_3,TREES_9,STRUCT_0,RELSET_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,MSATERM,INDEX_1,MSUALG_6,MSUALG_9,INSTALG1,CATALG_1,PRE_CIRC,MSSUBFAM,PBOOLE,CKB1,CKB9,CKB13,CKB14,CKB15,CKB16;
constructors DOMAIN_1,XXREAL_0,NAT_1,TREES_9,MSSUBFAM,MSUALG_3,MSATERM,MSUALG_6,CATALG_1,EQUATION,SEQ_4,RELSET_1,FINSEQ_2,CKB4,CKB17,CKB18;
requirements BOOLE,SUBSET,NUMERALS;
begin
reserve y for set;
theorem
Th11: (for S being ManySortedSign holds (for s,x being set holds ((s in (the carrier of S) implies ( ( S variables_in ( root-tree [ x,s ] ) ) . s ) = { x }) & (for s9 being set holds ((s9 <> s or (not s in (the carrier of S))) implies ( ( S variables_in ( root-tree [ x,s ] ) ) . s9 ) = ( {} ))))))
proof
let S being ManySortedSign;
let s being set,x being set;
reconsider t = ( root-tree [ x,s ] ) as DecoratedTree;
A1: ( [ x,s ] `2 ) = s by MCART_1:7;
t = { [ ( {} ),[ x,s ] ] } by TREES_4:6;
then A2: ( rng t ) = { [ x,s ] } by RELAT_1:9;
A3: ( [ x,s ] `1 ) = x by MCART_1:7;
hereby
assume s in (the carrier of S);
then A4: ( ( S variables_in t ) . s ) = { ( a `1 ) where a is (Element of ( rng t )): ( a `2 ) = s } by CKB17:def 1;
thus ( ( S variables_in ( root-tree [ x,s ] ) ) . s ) = { x }
proof
hereby
let y;
assume y in ( ( S variables_in ( root-tree [ x,s ] ) ) . s );
then consider a being (Element of ( rng t )) such that A5: y = ( a `1 ) and ( a `2 ) = s by A4;
a = [ x,s ] by A2,TARSKI:def 1;
hence y in { x } by A3,A5,TARSKI:def 1;
end;
[ x,s ] in ( rng t ) by A2,TARSKI:def 1;
then x in { ( a `1 ) where a is (Element of ( rng t )): ( a `2 ) = s } by A3,A1;
hence thesis by A4,ZFMISC_1:31;
end;

end;
let s9 being set;
assume that
A6: (s9 <> s or (not s in (the carrier of S)));
set y = the (Element of ( ( S variables_in ( root-tree [ x,s ] ) ) . s9 ));
assume A7: ( ( S variables_in ( root-tree [ x,s ] ) ) . s9 ) <> ( {} );
then A8: y in ( ( S variables_in t ) . s9 );
( dom ( S variables_in t ) ) = (the carrier of S) by PARTFUN1:def 2;
then A9: s9 in (the carrier of S) by A7,FUNCT_1:def 2;
then ( ( S variables_in t ) . s9 ) = { ( a `1 ) where a is (Element of ( rng t )): ( a `2 ) = s9 } by CKB17:def 1;
then (ex a being (Element of ( rng t )) st (y = ( a `1 ) & ( a `2 ) = s9)) by A8;
hence thesis by A2,A1,A6,A9,TARSKI:def 1;
end;
