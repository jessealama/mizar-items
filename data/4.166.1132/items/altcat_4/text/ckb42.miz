environ
vocabularies ALTCAT_1,XBOOLE_0,CAT_1,RELAT_1,ALTCAT_3,CAT_3,RELAT_2,FUNCTOR0,FUNCT_1,FUNCT_2,ZFMISC_1,STRUCT_0,PBOOLE,MSUALG_3,MSUALG_6,ALTCAT_2,REALSET1,TARSKI,ALTCAT_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,MULTOP_1,PBOOLE,REALSET1,STRUCT_0,MSUALG_3,ALTCAT_1,ALTCAT_2,ALTCAT_3,FUNCTOR0;
definitions ALTCAT_1,ALTCAT_3,FUNCTOR0,MSUALG_3,STRUCT_0,TARSKI,FUNCT_2,XBOOLE_0,PBOOLE,BINOP_1,REALSET1,ALTCAT_2;
theorems ALTCAT_1,ALTCAT_2,ALTCAT_3,FUNCT_1,FUNCT_2,FUNCTOR0,MCART_1,MULTOP_1,FUNCTOR1,FUNCTOR2,MSUALG_3,PBOOLE,RELAT_1,ZFMISC_1,XBOOLE_0,XBOOLE_1,PARTFUN1,CKB2,CKB3,CKB4,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB40,CKB41;
schemes PBOOLE,XBOOLE_0;
registrations SUBSET_1,RELSET_1,FUNCOP_1,STRUCT_0,FUNCT_1,RELAT_1,ALTCAT_1,ALTCAT_2,FUNCTOR0,FUNCTOR2,PBOOLE,CKB1,CKB6,CKB7,CKB39;
constructors REALSET1,MSUALG_3,FUNCTOR0,ALTCAT_3,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve C for category;
reserve o1 for (object of C);
reserve o2 for (object of C);
theorem
Th38: (for D being non  empty (subcategory of C) holds (for o1,o2 being (object of C) holds (for p1,p2 being (object of D) holds (for m being (Morphism of o1,o2) holds (for m1 being (Morphism of o2,o1) holds (for n being (Morphism of p1,p2) holds (for n1 being (Morphism of p2,p1) holds ((((((p1 = o1 & p2 = o2) & m = n) & m1 = n1) & <^ p1,p2 ^> <> ( {} )) & <^ p2,p1 ^> <> ( {} )) implies ((m is_left_inverse_of m1 iff n is_left_inverse_of n1) & (m is_right_inverse_of m1 iff n is_right_inverse_of n1))))))))))
proof
let D being non  empty (subcategory of C);
let o1 being (object of C);
let o2 being (object of C);
let p1 being (object of D);
let p2 being (object of D);
let m being (Morphism of o1,o2);
let m1 being (Morphism of o2,o1);
let n being (Morphism of p1,p2);
let n1 being (Morphism of p2,p1);
assume that
A1: p1 = o1
and
A2: p2 = o2
and
A3: (((m = n & m1 = n1) & <^ p1,p2 ^> <> ( {} )) & <^ p2,p1 ^> <> ( {} ));
thus (m is_left_inverse_of m1 iff n is_left_inverse_of n1)
proof
thus (m is_left_inverse_of m1 implies n is_left_inverse_of n1)
proof
assume A4: m is_left_inverse_of m1;
thus ( n * n1 ) = ( m * m1 ) by A1,A2,A3,ALTCAT_2:32
.= ( idm o2 ) by A4,ALTCAT_3:def 1
.= ( idm p2 ) by A2,ALTCAT_2:34;
end;

assume A5: n is_left_inverse_of n1;
thus ( m * m1 ) = ( n * n1 ) by A1,A2,A3,ALTCAT_2:32
.= ( idm p2 ) by A5,ALTCAT_3:def 1
.= ( idm o2 ) by A2,ALTCAT_2:34;
end;

thus (m is_right_inverse_of m1 implies n is_right_inverse_of n1)
proof
assume A6: m is_right_inverse_of m1;
thus ( n1 * n ) = ( m1 * m ) by A1,A2,A3,ALTCAT_2:32
.= ( idm o1 ) by A6,ALTCAT_3:def 1
.= ( idm p1 ) by A1,ALTCAT_2:34;
end;

assume A7: n is_right_inverse_of n1;
thus ( m1 * m ) = ( n1 * n ) by A1,A2,A3,ALTCAT_2:32
.= ( idm p1 ) by A7,ALTCAT_3:def 1
.= ( idm o1 ) by A1,ALTCAT_2:34;
end;
