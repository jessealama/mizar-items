environ
vocabularies NUMBERS,FUNCT_1,FINSEQ_1,NAT_1,RELAT_1,FINSET_1,CARD_1,XBOOLE_0,TARSKI,XXREAL_0,SUBSET_1,PARTFUN1,ARYTM_1,ARYTM_3,ORDINAL4,FINSEQ_4,FUNCT_2,EQREL_1,CARD_3,SETFAM_1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,RELAT_1,CARD_1,SETFAM_1,EQREL_1,NUMBERS,XCMPLX_0,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,NAT_1,FINSEQ_1,FINSEQ_3,XXREAL_0,CKB1;
definitions FUNCT_1,TARSKI,XBOOLE_0,FINSEQ_1,CKB1;
theorems CARD_1,CARD_2,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,INT_1,NAT_1,PARTFUN1,TARSKI,WELLORD2,ZFMISC_1,RELAT_1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ORDINAL1,GRFUNC_1,EQREL_1,RELSET_1,SETFAM_1,CKB1,CKB2,CKB3;
schemes FINSEQ_1,FINSET_1,NAT_1,FUNCT_1,FINSEQ_2,FUNCT_2;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FINSET_1,XREAL_0,INT_1,FINSEQ_1,ORDINAL1,CARD_1,RELSET_1,SUBSET_1,EQREL_1,NAT_1,PARTFUN1,FUNCT_2,XXREAL_0,MEMBERED;
constructors ENUMSET1,WELLORD2,FUNCT_2,XXREAL_0,REAL_1,PARTFUN1,NAT_1,INT_1,FINSEQ_3,RELSET_1,EQREL_1,SETFAM_1,CKB1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve f for Function;
reserve x for set;
reserve y for set;
reserve z for set;
theorem
Th4: (f is_one-to-one_at x iff (x in ( dom f ) & (for z holds ((z in ( dom f ) & x <> z) implies ( f . x ) <> ( f . z )))))
proof
thus (f is_one-to-one_at x implies (x in ( dom f ) & (for z holds ((z in ( dom f ) & x <> z) implies ( f . x ) <> ( f . z )))))
proof
assume A1: f is_one-to-one_at x;
hence x in ( dom f ) by CKB2:1;
let z;
assume that
A2: z in ( dom f )
and
A3: x <> z
and
A4: ( f . x ) = ( f . z );
( f . x ) in { ( f . x ) } by TARSKI:def 1;
then z in ( f " { ( f . x ) } ) by A2,A4,FUNCT_1:def 7;
then z in { x } by A1,CKB3:1;
hence thesis by A3,TARSKI:def 1;
end;

assume that
A5: x in ( dom f )
and
A6: (for z holds ((z in ( dom f ) & x <> z) implies ( f . x ) <> ( f . z )))
and
A7: (not f is_one-to-one_at x);
( f " { ( f . x ) } ) <> { x } by A5,A7,CKB3:1;
then consider y such that A8: ((y in ( f " { ( f . x ) } ) & (not y in { x })) or (y in { x } & (not y in ( f " { ( f . x ) } )))) by TARSKI:1;
( f . x ) in { ( f . x ) } by TARSKI:def 1;
then A9: x in ( f " { ( f . x ) } ) by A5,FUNCT_1:def 7;
now
per cases  by A8;
suppose A10: (y in ( f " { ( f . x ) } ) & (not y in { x }));

then ( f . y ) in { ( f . x ) } by FUNCT_1:def 7;
then A11: ( f . y ) = ( f . x ) by TARSKI:def 1;
(y in ( dom f ) & x <> y) by A10,FUNCT_1:def 7,TARSKI:def 1;
hence thesis by A6,A11;
end;
suppose ((not y in ( f " { ( f . x ) } )) & y in { x });

hence thesis by A9,TARSKI:def 1;
end;
end;
hence thesis;
end;
