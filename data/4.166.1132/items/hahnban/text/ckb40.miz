environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,PARTFUN1,FUNCT_1,TARSKI,RELAT_1,SUPINF_1,XXREAL_0,ORDINAL1,ARYTM_3,ORDINAL2,XXREAL_2,RLVECT_1,RLSUB_1,STRUCT_0,SUPINF_2,RLSUB_2,FINSEQ_4,MCART_1,RLVECT_3,REAL_1,CARD_1,MSSUBFAM,UNIALG_1,COMPLEX1,FUNCOP_1,ARYTM_1,ALGSTR_0,XREAL_0,REALSET1,ZFMISC_1,NORMSP_1,HAHNBAN,NORMSP_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,STRUCT_0,ALGSTR_0,REAL_1,RELAT_1,REALSET1,FUNCT_1,FUNCT_2,RLVECT_1,RLSUB_1,RLSUB_2,NORMSP_0,NORMSP_1,SUPINF_1,PARTFUN1,FUNCOP_1,RLVECT_3,DOMAIN_1,XXREAL_2,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB33,CKB34;
definitions TARSKI,RLSUB_1,RLSUB_2,RLVECT_1,ORDINAL1,XBOOLE_0,STRUCT_0,ALGSTR_0,XXREAL_2,SUPINF_1,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
theorems PARTFUN1,RLSUB_1,FUNCT_2,ZFMISC_1,FUNCOP_1,TREES_2,TARSKI,FUNCT_1,GRFUNC_1,RLVECT_1,RLSUB_2,RLVECT_4,MCART_1,RLVECT_3,ABSVALUE,NORMSP_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,NUMBERS,STRUCT_0,ALGSTR_0,XXREAL_2,NORMSP_0,SETFAM_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB35,CKB36,CKB37,CKB38,CKB39;
schemes ORDERS_1,DOMAIN_1,FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,PARTFUN1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,STRUCT_0,RLVECT_1,RLSUB_1,ALGSTR_0,FUNCT_2,FUNCT_1,RELAT_1,DOMAIN_1,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
constructors BINOP_1,REAL_1,COMPLEX1,SUPINF_1,REALSET1,RFUNCT_3,RLSUB_2,RLVECT_2,RLVECT_3,NORMSP_1,XXREAL_2,RELSET_1,XXREAL_1,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve V for RealLinearSpace;
theorem
Lm2: ( the RLSStruct of V ) is RealLinearSpace
proof
A1: (for v9,w9 being (VECTOR of V) holds (for v,w being (VECTOR of ( the RLSStruct of V )) holds ((v = v9 & w = w9) implies (( v + w ) = ( v9 + w9 ) & (for r being Real holds ( r * v ) = ( r * v9 ))))));
( the RLSStruct of V ) is  Abelian  add-associative  right_zeroed  right_complementable  vector-distributive  scalar-distributive  scalar-associative  scalar-unital
proof
hereby
let v being (VECTOR of ( the RLSStruct of V )),w being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v,w9 = w as (VECTOR of V);
thus ( v + w ) = ( w9 + v9 ) by A1
.= ( w + v );
end;
hereby
let u being (VECTOR of ( the RLSStruct of V )),v being (VECTOR of ( the RLSStruct of V )),w being (VECTOR of ( the RLSStruct of V ));
reconsider u9 = u,v9 = v,w9 = w as (VECTOR of V);
thus ( ( u + v ) + w ) = ( ( u9 + v9 ) + w9 )
.= ( u9 + ( v9 + w9 ) ) by RLVECT_1:def 3
.= ( u + ( v + w ) );
end;
hereby
let v being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v as (VECTOR of V);
thus ( v + ( 0. ( the RLSStruct of V ) ) ) = ( v9 + ( 0. V ) )
.= v by RLVECT_1:4;
end;
thus ( the RLSStruct of V ) is  right_complementable
proof
let v being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v as (VECTOR of V);
consider w9 being (VECTOR of V) such that A2: ( v9 + w9 ) = ( 0. V ) by ALGSTR_0:def 11;
reconsider w = w9 as (VECTOR of ( the RLSStruct of V ));
take w;
thus thesis by A2;
end;

hereby
let a being  real number;
let v being (VECTOR of ( the RLSStruct of V )),w being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v,w9 = w as (VECTOR of V);
thus ( a * ( v + w ) ) = ( a * ( v9 + w9 ) )
.= ( ( a * v9 ) + ( a * w9 ) ) by RLVECT_1:def 5
.= ( ( a * v ) + ( a * w ) );
end;
hereby
let a being  real number,b being  real number;
let v being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v as (VECTOR of V);
thus ( ( a + b ) * v ) = ( ( a + b ) * v9 )
.= ( ( a * v9 ) + ( b * v9 ) ) by RLVECT_1:def 6
.= ( ( a * v ) + ( b * v ) );
end;
hereby
let a being  real number,b being  real number;
let v being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v as (VECTOR of V);
thus ( ( a * b ) * v ) = ( ( a * b ) * v9 )
.= ( a * ( b * v9 ) ) by RLVECT_1:def 7
.= ( a * ( b * v ) );
end;
let v being (VECTOR of ( the RLSStruct of V ));
reconsider v9 = v as (VECTOR of V);
thus ( 1 * v ) = ( 1 * v9 )
.= v by RLVECT_1:def 8;
end;
hence thesis;
end;
