environ
vocabularies NUMBERS,XXREAL_0,XREAL_0,ORDINAL1,SUBSET_1,SEQ_1,COMPLEX1,SQUARE_1,NEWTON,RELAT_1,ARYTM_3,ARYTM_1,CARD_1,POWER,PREPOWER,FUNCT_1,SERIES_1,VALUED_1,NAT_1,REAL_1,SERIES_3,ABIAN;
notations SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NEWTON,REAL_1,NAT_1,PREPOWER,COMPLEX1,VALUED_1,SEQ_1,ABIAN,POWER,SERIES_1,FUNCT_2;
definitions SQUARE_1,XCMPLX_0;
theorems XCMPLX_1,SQUARE_1,SIN_COS2,POLYEQ_2,ABSVALUE,NEWTON,POWER,ASYMPT_1,XREAL_1,PREPOWER,FUNCT_2,SERIES_1,SEQ_1,COMPLEX1,POLYEQ_1,XXREAL_0,ABIAN,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37;
schemes NAT_1;
registrations NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,MEMBERED,COMPLEX1,NEWTON,VALUED_1,FUNCT_2,VALUED_0,RELSET_1,XBOOLE_0,CKB1;
constructors REAL_1,SQUARE_1,NAT_1,SEQ_1,NEWTON,PREPOWER,SERIES_1,VALUED_1,PARTFUN1,RELSET_1,BINOP_2,ABIAN;
requirements REAL,SUBSET,BOOLE,NUMERALS,ARITHM;
begin
reserve a for  positive  real number;
reserve b for  positive  real number;
reserve c for  positive  real number;
theorem
(a >= 1 implies ( ( a to_power b ) + ( a to_power c ) ) >= ( 2 * ( a to_power ( sqrt ( b * c ) ) ) ))
proof
A1: ( ( b + c ) / 2 ) >= ( ( 2 * ( sqrt ( b * c ) ) ) / 2 ) by SIN_COS2:1,XREAL_1:72;
set p = ( a to_power c );
set o = ( a to_power b );
(o > ( 0 ) & p > ( 0 )) by POWER:34;
then ( ( a to_power b ) + ( a to_power c ) ) >= ( 2 * ( sqrt ( ( a to_power b ) * ( a to_power c ) ) ) ) by SIN_COS2:1;
then (( a to_power ( b + c ) ) > ( 0 ) & ( ( a to_power b ) + ( a to_power c ) ) >= ( 2 * ( sqrt ( a to_power ( b + c ) ) ) )) by POWER:27,POWER:34;
then ( ( a to_power b ) + ( a to_power c ) ) >= ( 2 * ( ( a to_power ( b + c ) ) to_power ( 1 / 2 ) ) ) by ASYMPT_1:83;
then A2: ( ( a to_power b ) + ( a to_power c ) ) >= ( 2 * ( a to_power ( ( 1 / 2 ) * ( b + c ) ) ) ) by POWER:33;
assume a >= 1;
then ( a #R ( ( b + c ) / 2 ) ) >= ( a #R ( sqrt ( b * c ) ) ) by A1,PREPOWER:82;
then ( a to_power ( ( b + c ) / 2 ) ) >= ( a #R ( sqrt ( b * c ) ) ) by POWER:def 2;
then ( a to_power ( ( b + c ) / 2 ) ) >= ( a to_power ( sqrt ( b * c ) ) ) by POWER:def 2;
then ( 2 * ( a to_power ( ( b + c ) / 2 ) ) ) >= ( 2 * ( a to_power ( sqrt ( b * c ) ) ) ) by XREAL_1:64;
hence thesis by A2,XXREAL_0:2;
end;
