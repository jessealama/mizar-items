environ
vocabularies NUMBERS,XXREAL_0,XREAL_0,ORDINAL1,SUBSET_1,SEQ_1,COMPLEX1,SQUARE_1,NEWTON,RELAT_1,ARYTM_3,ARYTM_1,CARD_1,POWER,PREPOWER,FUNCT_1,SERIES_1,VALUED_1,NAT_1,REAL_1,SERIES_3,ABIAN;
notations SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NEWTON,REAL_1,NAT_1,PREPOWER,COMPLEX1,VALUED_1,SEQ_1,ABIAN,POWER,SERIES_1,FUNCT_2;
definitions SQUARE_1,XCMPLX_0;
theorems XCMPLX_1,SQUARE_1,SIN_COS2,POLYEQ_2,ABSVALUE,NEWTON,POWER,ASYMPT_1,XREAL_1,PREPOWER,FUNCT_2,SERIES_1,SEQ_1,COMPLEX1,POLYEQ_1,XXREAL_0,ABIAN,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38;
schemes NAT_1;
registrations NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,MEMBERED,COMPLEX1,NEWTON,VALUED_1,FUNCT_2,VALUED_0,RELSET_1,XBOOLE_0,CKB1;
constructors REAL_1,SQUARE_1,NAT_1,SEQ_1,NEWTON,PREPOWER,SERIES_1,VALUED_1,PARTFUN1,RELSET_1,BINOP_2,ABIAN;
requirements REAL,SUBSET,BOOLE,NUMERALS,ARITHM;
begin
reserve a for  positive  real number;
reserve b for  positive  real number;
reserve c for  positive  real number;
theorem
((a >= b & b >= c) implies ( ( ( a to_power a ) * ( b to_power b ) ) * ( c to_power c ) ) >= ( ( ( a * b ) * c ) to_power ( ( ( a + b ) + c ) / 3 ) ))
proof
assume that
A1: a >= b
and
A2: b >= c;
A3: ( ( b / c ) to_power ( ( b - c ) / 3 ) ) = ( ( b / c ) #R ( ( b - c ) / 3 ) ) by POWER:def 2;
(( b / c ) >= 1 & ( b - c ) >= ( c - c )) by A2,XREAL_1:9,XREAL_1:181;
then A4: ( ( b / c ) to_power ( ( b - c ) / 3 ) ) >= 1 by A3,PREPOWER:85;
A5: ( ( a / b ) to_power ( ( a - b ) / 3 ) ) = ( ( a / b ) #R ( ( a - b ) / 3 ) ) by POWER:def 2;
(( a / b ) >= 1 & ( a - b ) >= ( b - b )) by A1,XREAL_1:9,XREAL_1:181;
then ( ( a / b ) to_power ( ( a - b ) / 3 ) ) >= 1 by A5,PREPOWER:85;
then A6: ( ( ( a / b ) to_power ( ( a - b ) / 3 ) ) * ( ( b / c ) to_power ( ( b - c ) / 3 ) ) ) >= ( 1 * 1 ) by A4,XREAL_1:66;
a >= c by A1,A2,XXREAL_0:2;
then A7: (( a / c ) >= 1 & ( a - c ) >= ( c - c )) by XREAL_1:9,XREAL_1:181;
( ( a / c ) to_power ( ( a - c ) / 3 ) ) = ( ( a / c ) #R ( ( a - c ) / 3 ) ) by POWER:def 2;
then ( ( a / c ) to_power ( ( a - c ) / 3 ) ) >= 1 by A7,PREPOWER:85;
then ( ( ( ( a / b ) to_power ( ( a - b ) / 3 ) ) * ( ( b / c ) to_power ( ( b - c ) / 3 ) ) ) * ( ( a / c ) to_power ( ( a - c ) / 3 ) ) ) >= 1 by A6,XREAL_1:66;
then ( ( ( ( a to_power ( ( a - b ) / 3 ) ) / ( b to_power ( ( a - b ) / 3 ) ) ) * ( ( b / c ) to_power ( ( b - c ) / 3 ) ) ) * ( ( a / c ) to_power ( ( a - c ) / 3 ) ) ) >= 1 by POWER:31;
then A8: ( ( ( ( a to_power ( ( a - b ) / 3 ) ) / ( b to_power ( ( a - b ) / 3 ) ) ) * ( ( b to_power ( ( b - c ) / 3 ) ) / ( c to_power ( ( b - c ) / 3 ) ) ) ) * ( ( a / c ) to_power ( ( a - c ) / 3 ) ) ) >= 1 by POWER:31;
set t = ( b to_power ( ( ( a + b ) + c ) / 3 ) );
set s = ( b to_power b );
set r = ( c to_power ( ( ( a + b ) + c ) / 3 ) );
set q = ( c to_power c );
set p = ( a to_power ( ( ( a + b ) + c ) / 3 ) );
set o = ( a to_power a );
set j = ( c to_power ( ( a - c ) / 3 ) );
set i = ( a to_power ( ( a - c ) / 3 ) );
set h = ( c to_power ( ( b - c ) / 3 ) );
set w = ( b to_power ( ( b - c ) / 3 ) );
set v = ( b to_power ( ( a - b ) / 3 ) );
set u = ( a to_power ( ( a - b ) / 3 ) );
A9: (p > ( 0 ) & r > ( 0 )) by POWER:34;
A10: t > ( 0 ) by POWER:34;
( ( ( ( a to_power ( ( a - b ) / 3 ) ) / ( b to_power ( ( a - b ) / 3 ) ) ) * ( ( b to_power ( ( b - c ) / 3 ) ) / ( c to_power ( ( b - c ) / 3 ) ) ) ) * ( ( a to_power ( ( a - c ) / 3 ) ) / ( c to_power ( ( a - c ) / 3 ) ) ) ) = ( ( ( u * w ) / ( v * h ) ) * ( i / j ) ) by XCMPLX_1:76
.= ( ( ( u * w ) * i ) / ( ( v * h ) * j ) ) by XCMPLX_1:76
.= ( ( ( ( a to_power ( ( a - b ) / 3 ) ) * ( a to_power ( ( a - c ) / 3 ) ) ) * ( b to_power ( ( b - c ) / 3 ) ) ) / ( ( ( b to_power ( ( a - b ) / 3 ) ) * ( c to_power ( ( a - c ) / 3 ) ) ) * ( c to_power ( ( b - c ) / 3 ) ) ) )
.= ( ( ( a to_power ( ( ( a - b ) / 3 ) + ( ( a - c ) / 3 ) ) ) * ( b to_power ( ( b - c ) / 3 ) ) ) / ( ( ( b to_power ( ( a - b ) / 3 ) ) * ( c to_power ( ( a - c ) / 3 ) ) ) * ( c to_power ( ( b - c ) / 3 ) ) ) ) by POWER:27
.= ( ( ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) * ( b to_power ( ( b - c ) / 3 ) ) ) / ( ( b to_power ( ( a - b ) / 3 ) ) * ( ( c to_power ( ( a - c ) / 3 ) ) * ( c to_power ( ( b - c ) / 3 ) ) ) ) )
.= ( ( ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) * ( b to_power ( ( b - c ) / 3 ) ) ) / ( ( b to_power ( ( a - b ) / 3 ) ) * ( c to_power ( ( ( a - c ) / 3 ) + ( ( b - c ) / 3 ) ) ) ) ) by POWER:27
.= ( ( ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) / ( c to_power ( ( ( a + b ) - ( 2 * c ) ) / 3 ) ) ) * ( ( b to_power ( ( b - c ) / 3 ) ) / ( b to_power ( ( a - b ) / 3 ) ) ) ) by XCMPLX_1:76
.= ( ( ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) / ( c to_power ( ( ( a + b ) - ( 2 * c ) ) / 3 ) ) ) * ( b to_power ( ( ( b - c ) / 3 ) - ( ( a - b ) / 3 ) ) ) ) by POWER:29
.= ( ( ( 1 / ( c to_power ( ( ( a + b ) - ( 2 * c ) ) / 3 ) ) ) * ( b to_power ( ( ( ( 2 * b ) - a ) - c ) / 3 ) ) ) * ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) )
.= ( ( ( c to_power ( - ( ( ( a + b ) - ( 2 * c ) ) / 3 ) ) ) * ( b to_power ( ( ( ( 2 * b ) - a ) - c ) / 3 ) ) ) * ( a to_power ( ( ( ( 2 * a ) - b ) - c ) / 3 ) ) ) by POWER:28
.= ( ( ( a to_power ( ( ( 3 * a ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) * ( c to_power ( ( ( 3 * c ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) ) * ( b to_power ( ( ( 3 * b ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) )
.= ( ( ( ( a to_power ( ( 3 * a ) / 3 ) ) / ( a to_power ( ( ( a + b ) + c ) / 3 ) ) ) * ( c to_power ( ( ( 3 * c ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) ) * ( b to_power ( ( ( 3 * b ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) ) by POWER:29
.= ( ( ( ( a to_power ( ( 3 * a ) / 3 ) ) / ( a to_power ( ( ( a + b ) + c ) / 3 ) ) ) * ( ( c to_power ( ( 3 * c ) / 3 ) ) / ( c to_power ( ( ( a + b ) + c ) / 3 ) ) ) ) * ( b to_power ( ( ( 3 * b ) / 3 ) - ( ( ( a + b ) + c ) / 3 ) ) ) ) by POWER:29
.= ( ( ( ( a to_power a ) / ( a to_power ( ( ( a + b ) + c ) / 3 ) ) ) * ( ( c to_power c ) / ( c to_power ( ( ( a + b ) + c ) / 3 ) ) ) ) * ( ( b to_power b ) / ( b to_power ( ( ( a + b ) + c ) / 3 ) ) ) ) by POWER:29
.= ( ( ( o * q ) / ( p * r ) ) * ( s / t ) ) by XCMPLX_1:76
.= ( ( ( ( a to_power a ) * ( c to_power c ) ) * ( b to_power b ) ) / ( ( ( a to_power ( ( ( a + b ) + c ) / 3 ) ) * ( c to_power ( ( ( a + b ) + c ) / 3 ) ) ) * ( b to_power ( ( ( a + b ) + c ) / 3 ) ) ) ) by XCMPLX_1:76;
then ( ( ( o * q ) * s ) / ( ( p * r ) * t ) ) >= 1 by A8,POWER:31;
then ( ( ( ( o * q ) * s ) / ( ( p * r ) * t ) ) * ( ( p * r ) * t ) ) >= ( 1 * ( ( p * r ) * t ) ) by A9,A10,XREAL_1:64;
then ( ( ( a to_power a ) * ( c to_power c ) ) * ( b to_power b ) ) >= ( ( ( a to_power ( ( ( a + b ) + c ) / 3 ) ) * ( c to_power ( ( ( a + b ) + c ) / 3 ) ) ) * ( b to_power ( ( ( a + b ) + c ) / 3 ) ) ) by A9,A10,XCMPLX_1:87;
then ( ( ( a to_power a ) * ( c to_power c ) ) * ( b to_power b ) ) >= ( ( ( a * c ) to_power ( ( ( a + b ) + c ) / 3 ) ) * ( b to_power ( ( ( a + b ) + c ) / 3 ) ) ) by POWER:30;
then ( ( a to_power a ) * ( ( b to_power b ) * ( c to_power c ) ) ) >= ( ( ( a * c ) * b ) to_power ( ( ( a + b ) + c ) / 3 ) ) by POWER:30;
hence thesis;
end;
