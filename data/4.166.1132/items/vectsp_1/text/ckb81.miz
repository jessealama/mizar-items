environ
vocabularies XBOOLE_0,ALGSTR_0,STRUCT_0,NUMBERS,BINOP_2,CARD_1,XREAL_0,SUBSET_1,ORDINAL1,ARYTM_3,RLVECT_1,SUPINF_2,ARYTM_1,RELAT_1,MESFUNC1,GROUP_1,LATTICES,BINOP_1,FUNCT_1,ZFMISC_1,XXREAL_0,VECTSP_1,MEMBERED;
notations XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,FUNCT_1,FUNCT_2,BINOP_1,ORDINAL1,XCMPLX_0,XXREAL_0,XREAL_0,NAT_D,BINOP_2,MEMBERED,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,CKB1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB19,CKB24,CKB25,CKB26,CKB38,CKB44,CKB45,CKB54,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB67;
definitions RLVECT_1,STRUCT_0,GROUP_1,ALGSTR_0,CKB1,CKB11,CKB12,CKB13,CKB14,CKB19,CKB24,CKB25,CKB26,CKB44,CKB45,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
theorems FUNCT_2,RLVECT_1,XCMPLX_0,BINOP_2,GROUP_1,NAT_1,XREAL_1,XREAL_0,ALGSTR_0,CKB1,CKB7,CKB11,CKB12,CKB13,CKB14,CKB19,CKB20,CKB21,CKB24,CKB25,CKB26,CKB30,CKB39,CKB40,CKB41,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB79,CKB80;
schemes FUNCT_2;
registrations ORDINAL1,RELSET_1,NUMBERS,XREAL_0,STRUCT_0,GROUP_1,ALGSTR_0,REAL_1,MEMBERED,CKB2,CKB3,CKB5,CKB8,CKB15,CKB16,CKB22,CKB23,CKB27,CKB28,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB42,CKB54,CKB55,CKB56,CKB66,CKB78,CKB4,CKB6,CKB17,CKB18,CKB29;
constructors BINOP_1,XXREAL_0,NAT_1,BINARITH,RLVECT_1,GROUP_1,BINOP_2,NAT_D,RELSET_1,MEMBERED,CKB1,CKB11,CKB12,CKB13,CKB14,CKB19,CKB24,CKB25,CKB45,CKB54,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve F for Field;
reserve x for (Element of F);
theorem
(for F being  add-associative  right_zeroed  right_complementable  commutative  associative  well-unital non  degenerated  almost_left_invertible  distributive non  empty doubleLoopStr holds (for x being (Element of F) holds (x <> ( 0. F ) implies ( ( x " ) " ) = x)))
proof
let F being  add-associative  right_zeroed  right_complementable  commutative  associative  well-unital non  degenerated  almost_left_invertible  distributive non  empty doubleLoopStr;
let x being (Element of F);
assume A1: x <> ( 0. F );
(x <> ( 0. F ) implies ( x " ) <> ( 0. F ))
proof
assume A2: x <> ( 0. F );
assume (not thesis);
then ( 1. F ) = ( x * ( 0. F ) ) by A2,CKB44:def 1;
hence contradiction by CKB47:1;
end;
then ( ( x " ) * ( ( x " ) " ) ) = ( 1. F ) by A1,CKB44:def 1;
then ( ( x * ( x " ) ) * ( ( x " ) " ) ) = ( x * ( 1. F ) ) by GROUP_1:def 3;
then ( ( 1. F ) * ( ( x " ) " ) ) = ( x * ( 1. F ) ) by A1,CKB44:def 1;
then ( ( x " ) " ) = ( x * ( 1. F ) ) by CKB19:def 1;
hence thesis by CKB19:def 1;
end;
