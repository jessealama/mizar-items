environ
vocabularies NUMBERS,XBOOLE_0,FUZZY_1,RELAT_1,SUBSET_1,FUNCT_1,XXREAL_2,XXREAL_0,ORDINAL2,XXREAL_1,CARD_1,INTEGRA1,TARSKI,XREAL_0,ORDINAL1,ARYTM_3,ARYTM_1,FUZZY_2,ZFMISC_1,PARTFUN1,VALUED_1,SEQ_4,FUZZY_4,MEASURE5;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,BINOP_1,RELAT_1,RELSET_1,PARTFUN1,XXREAL_2,FUNCT_4,SEQ_1,INTEGRA1,RCOMP_1,MEASURE6,FUZZY_1,FUZZY_2,SEQ_4,MEASURE5,CKB5,CKB7;
definitions TARSKI,FUZZY_1,FUZZY_2,BINOP_1,RELAT_1;
theorems FUZZY_1,FUNCT_3,PARTFUN1,FUNCT_1,INTEGRA1,INTEGRA2,ZFMISC_1,SEQ_4,SUBSET_1,XBOOLE_0,FUZZY_2,XXREAL_0,FUNCT_4,XXREAL_2,XREAL_1,RELSET_1,MEMBERED,FUNCT_2,RELAT_1,MEASURE5,CKB2,CKB3,CKB4,CKB6;
schemes PARTFUN1,BINOP_1;
registrations XBOOLE_0,SUBSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,INTEGRA1,RELAT_1,VALUED_0,RELSET_1,MEASURE5,CKB1;
constructors FUNCT_4,REAL_1,SQUARE_1,RFUNCT_1,MEASURE6,INTEGRA1,FUZZY_2,SEQ_1,XXREAL_2,SEQ_4,RELSET_1,RELAT_1,FUZZY_1,BINOP_2,RVSUM_1,BINOP_1,CKB5;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve z for set;
definition
let C1 being non empty set;
let C2 being non empty set;
let h being (RMembership_Func of C2,C1);
redefine func converse h -> (RMembership_Func of C1,C2)
means
:Def1: (for x holds (for y holds ([ x,y ] in [: C1,C2 :] implies ( it . (x,y) ) = ( h . (y,x) ))));
coherence
proof
set IT = ( converse h );
A1: ( dom h ) = [: C2,C1 :] by FUNCT_2:def 1;
then A2: ( dom IT ) = [: C1,C2 :] by FUNCT_4:46;
( rng h ) c= [. ( 0 ),1 .] by RELAT_1:def 19;
then A3: ( rng IT ) c= [. ( 0 ),1 .] by A1,FUNCT_4:47;
then ( rng IT ) c= ( REAL ) by MEMBERED:3;
then reconsider IT as (PartFunc of [: C1,C2 :],( REAL )) by A2,RELSET_1:4;
IT is (Membership_Func of [: C1,C2 :]) by A2,A3,FUNCT_2:def 1,RELAT_1:def 19;
hence thesis;
end;
compatibility
proof
let IT being (RMembership_Func of C1,C2);
A4: ( dom h ) = [: C2,C1 :] by FUNCT_2:def 1;
thus (IT = ( ~ h ) implies (for x holds (for y holds ([ x,y ] in [: C1,C2 :] implies ( IT . (x,y) ) = ( h . (y,x) )))))
proof
assume A5: IT = ( ~ h );
let x;
let y;
assume [ x,y ] in [: C1,C2 :];
then [ y,x ] in ( dom h ) by A4,ZFMISC_1:88;
hence thesis by A5,FUNCT_4:def 2;
end;

A6: ( dom IT ) = [: C1,C2 :] by FUNCT_2:def 1;
A7: (for x holds (x in ( dom IT ) iff (ex y st (ex z st (x = [ z,y ] & [ y,z ] in ( dom h ))))))
proof
let x;
thus (x in ( dom IT ) implies (ex y st (ex z st (x = [ z,y ] & [ y,z ] in ( dom h )))))
proof
assume x in ( dom IT );
then consider z,y such that A8: z in C1 and A9: y in C2 and A10: x = [ z,y ] by ZFMISC_1:def 2;
take y;
take z;
thus thesis by A4,A8,A9,A10,ZFMISC_1:def 2;
end;

thus thesis by A6,ZFMISC_1:88;
end;
assume (for x holds (for y holds ([ x,y ] in [: C1,C2 :] implies ( IT . (x,y) ) = ( h . (y,x) ))));
then (for y holds (for z holds ([ y,z ] in ( dom h ) implies ( IT . (z,y) ) = ( h . (y,z) )))) by ZFMISC_1:88;
hence thesis by A7,FUNCT_4:def 2;
end;
end;
