environ
vocabularies FUNCT_1,RELAT_1,XBOOLE_0,TARSKI,SUBSET_1,ZFMISC_1,RELAT_2,PARTFUN1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,CKB5;
definitions TARSKI,FUNCT_1,XBOOLE_0,RELAT_1,RELAT_2;
theorems TARSKI,FUNCT_1,GRFUNC_1,ZFMISC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,RELAT_2,CKB1,CKB2,CKB6,CKB7,CKB8;
schemes FUNCT_1,XBOOLE_0,CKB3,CKB9;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,CKB4;
constructors FUNCT_1,RELAT_2,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve y1 for set;
reserve y2 for set;
reserve P for set;
reserve X for set;
reserve Y for set;
scheme LambdaR { X,Y() -> set,F(set) -> set,P[set] } : (ex f being (PartFunc of X(),Y()) st ((for x holds (x in ( dom f ) iff (x in X() & P[ x ]))) & (for x holds (x in ( dom f ) implies ( f . x ) = F(x)))))
provided
A1: (for x holds (P[ x ] implies F(x) in Y()))
proof
defpred Q[ set,set ]
 means
(P[ $1 ] & $2 = F($1));
A2: (for x holds (for y1 holds (for y2 holds (((x in X() & Q[ x,y1 ]) & Q[ x,y2 ]) implies y1 = y2))));
A3: (for x holds (for y holds ((x in X() & Q[ x,y ]) implies y in Y()))) by A1;
consider f being (PartFunc of X(),Y()) such that A4: (for x holds (x in ( dom f ) iff (x in X() & (ex y st Q[ x,y ])))) and A5: (for x holds (x in ( dom f ) implies Q[ x,( f . x ) ])) from CKB9:sch 1(A3,A2);
take f;
thus (for x holds (x in ( dom f ) iff (x in X() & P[ x ])))
proof
let x;
thus (x in ( dom f ) implies (x in X() & P[ x ]))
proof
assume A6: x in ( dom f );
then (ex y st (P[ x ] & y = F(x))) by A4;
hence thesis by A6;
end;

assume that
A7: x in X()
and
A8: P[ x ];
(ex y st (P[ x ] & y = F(x))) by A8;
hence thesis by A4,A7;
end;

thus thesis by A5;
end;
