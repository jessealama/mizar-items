environ
vocabularies SUBSET_1,NUMBERS,CQC_LANG,QC_LANG1,XBOOLE_0,VALUAT_1,FUNCT_1,FINSEQ_1,SUBSTUT1,RELAT_1,TARSKI,FUNCT_4,FUNCOP_1,PARTFUN1,FUNCT_2,MCART_1,REALSET1,XBOOLEAN,ZF_MODEL,ORDINAL4,ZF_LANG,ARYTM_3,NAT_1,XXREAL_0,ZFMISC_1,BVFUNC_2,CLASSES2,ZF_LANG1,SUBLEMMA,CARD_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,FINSEQ_1,FUNCT_1,NAT_1,QC_LANG1,QC_LANG3,PARTFUN1,CARD_1,NUMBERS,XXREAL_0,FUNCOP_1,CQC_LANG,RELAT_1,FUNCT_4,SEQ_4,VALUAT_1,RELSET_1,FUNCT_2,MARGREL1,DOMAIN_1,MCART_1,SUBSTUT1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9,CKB14,CKB25,CKB29,CKB37,CKB39,CKB40,CKB41,CKB43,CKB44,CKB65,CKB66,CKB70,CKB71,CKB103,CKB104;
definitions TARSKI,XBOOLE_0,FUNCOP_1,CKB7,CKB9,CKB29,CKB37,CKB41,CKB43,CKB44,CKB70,CKB103,CKB104;
theorems TARSKI,FINSEQ_1,FUNCT_1,MCART_1,VALUAT_1,XBOOLE_0,XBOOLE_1,FINSEQ_2,CQC_LANG,QC_LANG1,ZFMISC_1,RELAT_1,QC_LANG3,FUNCOP_1,FUNCT_2,RELSET_1,QC_LANG2,SUBSTUT1,FUNCT_4,FUNCT_7,ORDINAL1,XXREAL_2,CARD_1,CKB1,CKB2,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB15,CKB16,CKB17,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB67,CKB68,CKB69,CKB70,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111;
schemes CQC_LANG,XBOOLE_0,SUBSTUT1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,MEMBERED,QC_LANG1,CQC_LANG,SUBSTUT1,XXREAL_0,XXREAL_2,CARD_1,RELSET_1,CKB18,CKB38;
constructors DOMAIN_1,FUNCT_4,XXREAL_0,SEQ_4,QC_LANG3,VALUAT_1,SUBSTUT1,RELSET_1,CKB5,CKB6,CKB7,CKB9,CKB14,CKB25,CKB29,CKB37,CKB39,CKB40,CKB41,CKB43,CKB44,CKB66,CKB70,CKB71,CKB103,CKB104;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve x for bound_QC-variable;
reserve S for (Element of ( CQC-Sub-WFF ));
reserve S9 for (Element of ( CQC-Sub-WFF ));
reserve xSQ for (second_Q_comp of [ S,x ]);
scheme SubCQCInd1 { Pro[set] } : (for S holds Pro[ S ])
provided
A1: (for S,S9 being (Element of ( CQC-Sub-WFF )) holds (for x being bound_QC-variable holds (for SQ being (second_Q_comp of [ S,x ]) holds (for k being (Element of ( NAT )) holds (for ll being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds (for e being (Element of ( vSUB )) holds ((((Pro[ ( Sub_P (P,ll,e) ) ] & (S is  Sub_VERUM implies Pro[ S ])) & (Pro[ S ] implies Pro[ ( Sub_not S ) ])) & (((( S `2 ) = ( S9 `2 ) & Pro[ S ]) & Pro[ S9 ]) implies Pro[ ( CQCSub_& (S,S9) ) ])) & (([ S,x ] is  quantifiable & Pro[ S ]) implies Pro[ ( CQCSub_All ([ S,x ],SQ) ) ])))))))))
proof
A2: (([ S,x ] is  quantifiable & Pro[ S ]) implies Pro[ ( Sub_All ([ S,x ],xSQ) ) ])
proof
assume that
A3: [ S,x ] is  quantifiable
and
A4: Pro[ S ];
( CQCSub_All ([ S,x ],xSQ) ) = ( Sub_All ([ S,x ],xSQ) ) by A3,CKB41:def 1;
hence thesis by A1,A3,A4;
end;
(((( S `2 ) = ( S9 `2 ) & Pro[ S ]) & Pro[ S9 ]) implies Pro[ ( Sub_& (S,S9) ) ])
proof
assume that
A5: ( S `2 ) = ( S9 `2 )
and
A6: (Pro[ S ] & Pro[ S9 ]);
( CQCSub_& (S,S9) ) = ( Sub_& (S,S9) ) by A5,CKB29:def 1;
hence thesis by A1,A5,A6;
end;
then A7: (for S,S9 being (Element of ( CQC-Sub-WFF )) holds (for x being bound_QC-variable holds (for SQ being (second_Q_comp of [ S,x ]) holds (for k being (Element of ( NAT )) holds (for ll being (CQC-variable_list of k) holds (for P being (QC-pred_symbol of k) holds (for e being (Element of ( vSUB )) holds ((((Pro[ ( Sub_P (P,ll,e) ) ] & (S is  Sub_VERUM implies Pro[ S ])) & (Pro[ S ] implies Pro[ ( Sub_not S ) ])) & (((( S `2 ) = ( S9 `2 ) & Pro[ S ]) & Pro[ S9 ]) implies Pro[ ( Sub_& (S,S9) ) ])) & (([ S,x ] is  quantifiable & Pro[ S ]) implies Pro[ ( Sub_All ([ S,x ],SQ) ) ]))))))))) by A1,A2;
thus thesis from SUBSTUT1:sch 5(A7);
end;
