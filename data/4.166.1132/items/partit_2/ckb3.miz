environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,MARGREL1,PARTIT1,EQREL_1,FUNCT_1,SETFAM_1,RELAT_1,ZFMISC_1,TARSKI,RELAT_2,XBOOLEAN,BVFUNC_2,BVFUNC_1,FUNCT_4,FUNCT_5,OPOSET_1,BINOP_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,MARGREL1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,FUNCT_2,BINOP_1,FUNCT_4,FUNCT_5,EQREL_1,PARTIT1,BVFUNC_1,BVFUNC_2,CKB1;
definitions BVFUNC_1,TARSKI,RELAT_2,XBOOLE_0,XBOOLEAN,RELSET_1,EQREL_1;
theorems TARSKI,FUNCT_1,FUNCT_2,BVFUNC_1,BVFUNC_2,RELSET_1,PARTIT1,SETFAM_1,SUBSET_1,FUNCT_4,RELAT_1,EQREL_1,RELAT_2,XBOOLE_0,XBOOLE_1,PARTFUN1,ORDERS_1,XBOOLEAN,MARGREL1,CARD_1,ZFMISC_1,CKB2;
schemes FUNCT_2;
registrations SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,EQREL_1,MARGREL1,PARTIT1,RELSET_1,XBOOLE_0,FUNCT_2;
constructors SETFAM_1,FUNCT_4,XCMPLX_0,BVFUNC_1,BVFUNC_2,RELSET_1,FUNCT_5,RELAT_2,DOMAIN_1,BINOP_1,CKB1;
requirements SUBSET,BOOLE,ARITHM;
begin
reserve Y for non empty set;
theorem
Th2: (for R,S being (Equivalence_Relation of Y) holds ( R \/ S ) c= ( R * S ))
proof
let R being (Equivalence_Relation of Y),S being (Equivalence_Relation of Y);
let x being (Element of Y),y being (Element of Y);
assume A1: [ x,y ] in ( R \/ S );
per cases  by A1,XBOOLE_0:def 3;
suppose A2: [ x,y ] in R;

[ y,y ] in S by EQREL_1:5;
hence thesis by A2,RELAT_1:def 8;
end;
suppose A3: [ x,y ] in S;

[ x,x ] in R by EQREL_1:5;
hence thesis by A3,RELAT_1:def 8;
end;
end;
