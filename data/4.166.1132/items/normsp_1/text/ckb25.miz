environ
vocabularies NUMBERS,RLVECT_1,STRUCT_0,SUBSET_1,ALGSTR_0,BINOP_1,FUNCT_1,ZFMISC_1,XBOOLE_0,REAL_1,PRE_TOPC,SUPINF_2,RLSUB_1,FUNCOP_1,CARD_1,RELAT_1,COMPLEX1,ARYTM_3,XXREAL_0,XREAL_0,ORDINAL1,ARYTM_1,NAT_1,TARSKI,SEQ_2,ORDINAL2,NORMSP_1,NORMSP_0,RELAT_2,METRIC_1,CKB4,CKB9;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,REAL_1,NAT_1,FUNCT_1,FUNCOP_1,FUNCT_2,BINOP_1,RELAT_1,SEQ_1,SEQ_2,DOMAIN_1,STRUCT_0,ALGSTR_0,PRE_TOPC,RLVECT_1,RLSUB_1,XXREAL_0,NORMSP_0,CKB1,CKB4,CKB9,CKB10,CKB12;
definitions RLVECT_1,STRUCT_0,FUNCT_1,ALGSTR_0,NORMSP_0,CKB4,CKB9,CKB10;
theorems TARSKI,NAT_1,FUNCT_1,SEQ_2,ABSVALUE,RLVECT_1,RLSUB_1,FUNCT_2,RELSET_1,XREAL_0,XBOOLE_0,XCMPLX_0,FUNCOP_1,XREAL_1,COMPLEX1,XXREAL_0,ORDINAL1,ALGSTR_0,RELAT_1,NORMSP_0,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24;
schemes FUNCT_2,NAT_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,STRUCT_0,RLVECT_1,ALGSTR_0,NORMSP_0,CKB1,CKB2,CKB11,CKB17;
constructors BINOP_1,DOMAIN_1,FUNCOP_1,XXREAL_0,REAL_1,NAT_1,COMPLEX1,SEQ_2,RLSUB_1,SEQ_1,VALUED_1,RELSET_1,NORMSP_0,CKB1,CKB4,CKB9,CKB10;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve f for Function;
reserve d for set;
reserve s for set;
theorem
(for RNS being non empty 1-sorted holds (for x being (Element of RNS) holds (f is (sequence of RNS) iff (( dom f ) = ( NAT ) & (for d holds (d in ( NAT ) implies ( f . d ) is (Element of RNS)))))))
proof
let RNS being non empty 1-sorted;
let x being (Element of RNS);
thus (f is (sequence of RNS) implies (( dom f ) = ( NAT ) & (for d holds (d in ( NAT ) implies ( f . d ) is (Element of RNS)))))
proof
assume A1: f is (sequence of RNS);
then A2: ( rng f ) c= (the carrier of RNS) by RELAT_1:def 19;
A3: ( dom f ) = ( NAT ) by A1,FUNCT_2:def 1;
(for d holds (d in ( NAT ) implies ( f . d ) is (Element of RNS)))
proof
let d;
assume d in ( NAT );
then ( f . d ) in ( rng f ) by A3,FUNCT_1:def 3;
hence thesis by A2;
end;
hence thesis by A1,FUNCT_2:def 1;
end;

thus ((( dom f ) = ( NAT ) & (for d holds (d in ( NAT ) implies ( f . d ) is (Element of RNS)))) implies f is (sequence of RNS))
proof
assume that
A4: ( dom f ) = ( NAT )
and
A5: (for d holds (d in ( NAT ) implies ( f . d ) is (Element of RNS)));
(for s holds (s in ( rng f ) implies s in (the carrier of RNS)))
proof
let s;
assume s in ( rng f );
then consider d such that A6: d in ( dom f ) and A7: s = ( f . d ) by FUNCT_1:def 3;
( f . d ) is (Element of RNS) by A4,A5,A6;
hence thesis by A7;
end;
then ( rng f ) c= (the carrier of RNS) by TARSKI:def 3;
hence thesis by A4,FUNCT_2:def 1,RELSET_1:4;
end;

end;
