environ
vocabularies FUNCT_1,FUNCT_3,PARTFUN1,RELAT_1,ZFMISC_1,XBOOLE_0,TARSKI,SUBSET_1,BINOP_1,MCART_1,FUNCOP_1,WELLORD1,MSUALG_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCT_3,BINOP_1,WELLORD1,CKB2,CKB8;
definitions TARSKI,RELAT_1,BINOP_1,FUNCT_1,WELLORD1,PARTFUN1,CKB2,CKB8;
theorems ZFMISC_1,RELAT_1,RELSET_1,FUNCT_1,FUNCT_2,FUNCT_3,TARSKI,BINOP_1,MCART_1,XBOOLE_0,XBOOLE_1,GRFUNC_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8;
schemes FUNCT_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,RELSET_1;
constructors PARTFUN1,BINOP_1,FUNCT_3,RELSET_1,WELLORD1,CKB2,CKB8;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y1 for set;
reserve y2 for set;
registration
let A being set;
let z being set;
cluster ( A --> z ) ->  Function-like  Relation-like;
coherence
proof
thus ( A --> z ) is  Function-like
proof
let x;
let y1;
let y2;
assume that
A1: [ x,y1 ] in ( A --> z )
and
A2: [ x,y2 ] in ( A --> z );
y1 in { z } by A1,ZFMISC_1:87;
then A3: y1 = z by TARSKI:def 1;
y2 in { z } by A2,ZFMISC_1:87;
hence thesis by A3,TARSKI:def 1;
end;

thus (for x holds (x in ( A --> z ) implies (ex y1 st (ex y2 st [ y1,y2 ] = x)))) by RELAT_1:def 1;
end;
end;
