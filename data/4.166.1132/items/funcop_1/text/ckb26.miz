environ
vocabularies FUNCT_1,FUNCT_3,PARTFUN1,RELAT_1,ZFMISC_1,XBOOLE_0,TARSKI,SUBSET_1,BINOP_1,MCART_1,FUNCOP_1,WELLORD1,MSUALG_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCT_3,BINOP_1,WELLORD1,CKB2,CKB8;
definitions TARSKI,RELAT_1,BINOP_1,FUNCT_1,WELLORD1,PARTFUN1,CKB2,CKB8;
theorems ZFMISC_1,RELAT_1,RELSET_1,FUNCT_1,FUNCT_2,FUNCT_3,TARSKI,BINOP_1,MCART_1,XBOOLE_0,XBOOLE_1,GRFUNC_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes FUNCT_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,RELSET_1,CKB9,CKB13,CKB14,CKB15;
constructors PARTFUN1,BINOP_1,FUNCT_3,RELSET_1,WELLORD1,CKB2,CKB8;
requirements SUBSET,BOOLE;
begin
reserve A for set;
reserve x for set;
reserve y for set;
reserve z for set;
theorem
( ( A --> [ x,y ] ) ~ ) = ( A --> [ y,x ] )
proof
A1: ( dom ( ( A --> [ x,y ] ) ~ ) ) = ( dom ( A --> [ x,y ] ) ) by CKB2:def 1;
then A2: ( dom ( ( A --> [ x,y ] ) ~ ) ) = A by CKB19:1;
A3:now
let z;
assume A4: z in ( dom ( ( A --> [ x,y ] ) ~ ) );
then ( ( A --> [ x,y ] ) . z ) = [ x,y ] by A2,CKB10:1;
hence ( ( ( A --> [ x,y ] ) ~ ) . z ) = [ y,x ] by A1,A4,CKB2:def 1
.= ( ( A --> [ y,x ] ) . z ) by A2,A4,CKB10:1;
end;
( dom ( ( A --> [ x,y ] ) ~ ) ) = ( dom ( A --> [ y,x ] ) ) by A2,CKB19:1;
hence thesis by A3,FUNCT_1:2;
end;
