environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_2,MARGREL1,CARD_1,ARYTM_3,INT_2,NAT_1,RELAT_1,XXREAL_0,INT_1,ARYTM_1,GRCAT_1,XBOOLEAN,FINSEQ_1,PARTFUN1,FUNCT_1,POWER,BINARI_3,FUNCOP_1,XBOOLE_0,BINARITH,MATRIX_1,INCSP_1,ORDINAL4,FUNCT_7,FUNCT_2,TARSKI,TREES_1,IDEA_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,INT_2,NAT_1,NAT_D,MARGREL1,RELAT_1,FUNCT_1,FUNCOP_1,MATRIX_1,PARTFUN1,FUNCT_2,FUNCT_7,SERIES_1,FINSEQ_1,FINSEQ_2,RECDEF_1,BINARITH,BINARI_3,XXREAL_0,CKB8,CKB9,CKB12,CKB15,CKB17,CKB18,CKB19,CKB26,CKB29,CKB32,CKB33,CKB39,CKB40,CKB41;
definitions TARSKI,FINSEQ_2,XBOOLEAN,CKB8,CKB9,CKB15,CKB17,CKB18,CKB19,CKB26,CKB29,CKB32,CKB33,CKB39,CKB40,CKB41;
theorems NAT_1,NAT_2,NEWTON,INT_1,INT_2,FINSEQ_1,FINSEQ_2,FUNCT_1,FUNCT_2,FUNCT_7,FUNCOP_1,POWER,EULER_1,EULER_2,BINARITH,BINARI_3,MATRIX_1,RELSET_1,RELAT_1,XBOOLE_1,XREAL_1,XXREAL_0,XBOOLEAN,NAT_D,PARTFUN1,ORDINAL1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49;
schemes FINSEQ_1,FINSEQ_2,NAT_1,FUNCT_2;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCT_2,XXREAL_0,XREAL_0,NAT_1,INT_1,FINSEQ_1,MARGREL1,FUNCT_7,VALUED_0,CARD_1,FINSEQ_2,RELSET_1;
constructors PARTFUN1,XXREAL_0,NAT_1,NAT_D,SERIES_1,BINARITH,WSIERP_1,FUNCT_7,MATRIX_1,BINARI_3,RECDEF_1,RELSET_1,CKB8,CKB9,CKB12,CKB15,CKB17,CKB18,CKB19,CKB26,CKB29,CKB32,CKB33,CKB39,CKB40,CKB41;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve m for (FinSequence of ( NAT ));
reserve k1 for (FinSequence of ( NAT ));
reserve k2 for (FinSequence of ( NAT ));
theorem
Th32: (for n being non empty (Element of ( NAT )) holds (for m holds (for k1 holds (for k2 holds (((((((( len m ) >= 4 & ( m . 1 ) is_expressible_by n) & ( m . 2 ) is_expressible_by n) & ( m . 3 ) is_expressible_by n) & ( m . 4 ) is_expressible_by n) & ( k2 . 5 ) = ( k1 . 5 )) & ( k2 . 6 ) = ( k1 . 6 )) implies ( IDEAoperationB (( IDEAoperationB (m,k1,n) ),k2,n) ) = m)))))
proof
let n being non empty (Element of ( NAT ));
let m being (FinSequence of ( NAT )),k1 being (FinSequence of ( NAT )),k2 being (FinSequence of ( NAT ));
assume that
A1: ( len m ) >= 4
and
A2: ( m . 1 ) is_expressible_by n
and
A3: ( m . 2 ) is_expressible_by n
and
A4: ( m . 3 ) is_expressible_by n
and
A5: ( m . 4 ) is_expressible_by n
and
A6: ( k2 . 5 ) = ( k1 . 5 )
and
A7: ( k2 . 6 ) = ( k1 . 6 );
consider t10 being (Element of ( NAT )) such that A8: t10 = ( MUL_MOD (( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( n -BinarySequence ( m . 3 ) ) ) ),( k1 . 5 ),n) );
consider t11 being (Element of ( NAT )) such that A9: t11 = ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( n -BinarySequence ( m . 4 ) ) ) ),n) ),( k1 . 6 ),n) );
consider I1 being (FinSequence of ( NAT )) such that A10: I1 = ( IDEAoperationB (m,k1,n) );
1 <= ( len m ) by A1,XXREAL_0:2;
then 1 in ( Seg ( len m ) ) by FINSEQ_1:1;
then 1 in ( dom m ) by FINSEQ_1:def 3;
then A11: ( I1 . 1 ) = ( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A8,A9,A10,CKB40:def 1;
consider t20 being (Element of ( NAT )) such that A12: t20 = ( MUL_MOD (( Absval ( ( n -BinarySequence ( I1 . 1 ) ) 'xor' ( n -BinarySequence ( I1 . 3 ) ) ) ),( k2 . 5 ),n) );
3 <= ( len m ) by A1,XXREAL_0:2;
then 3 in ( Seg ( len m ) ) by FINSEQ_1:1;
then 3 in ( dom m ) by FINSEQ_1:def 3;
then A13: ( I1 . 3 ) = ( Absval ( ( n -BinarySequence ( m . 3 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A8,A9,A10,CKB40:def 1;
then A14: t20 = ( MUL_MOD (( Absval ( ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( n -BinarySequence t11 ) ) 'xor' ( n -BinarySequence ( Absval ( ( n -BinarySequence ( m . 3 ) ) 'xor' ( n -BinarySequence t11 ) ) ) ) ) ),( k2 . 5 ),n) ) by A12,A11,BINARI_3:36
.= ( MUL_MOD (( Absval ( ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( n -BinarySequence t11 ) ) 'xor' ( ( n -BinarySequence ( m . 3 ) ) 'xor' ( n -BinarySequence t11 ) ) ) ),( k2 . 5 ),n) ) by BINARI_3:36
.= ( MUL_MOD (( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( ( n -BinarySequence t11 ) 'xor' ( ( n -BinarySequence t11 ) 'xor' ( n -BinarySequence ( m . 3 ) ) ) ) ) ),( k2 . 5 ),n) ) by CKB14:1
.= ( MUL_MOD (( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( ( ( n -BinarySequence t11 ) 'xor' ( n -BinarySequence t11 ) ) 'xor' ( n -BinarySequence ( m . 3 ) ) ) ) ),( k2 . 5 ),n) ) by CKB14:1
.= ( MUL_MOD (( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 3 ) ) ) ) ),( k2 . 5 ),n) ) by CKB10:1
.= t10 by A6,A8,CKB13:1;
consider t21 being (Element of ( NAT )) such that A15: t21 = ( MUL_MOD (( ADD_MOD (t20,( Absval ( ( n -BinarySequence ( I1 . 2 ) ) 'xor' ( n -BinarySequence ( I1 . 4 ) ) ) ),n) ),( k2 . 6 ),n) );
consider t12 being (Element of ( NAT )) such that A16: t12 = ( ADD_MOD (t10,t11,n) );
2 <= ( len m ) by A1,XXREAL_0:2;
then 2 in ( Seg ( len m ) ) by FINSEQ_1:1;
then 2 in ( dom m ) by FINSEQ_1:def 3;
then A17: ( I1 . 2 ) = ( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A8,A9,A16,A10,CKB40:def 1;
consider I2 being (FinSequence of ( NAT )) such that A18: I2 = ( IDEAoperationB (I1,k2,n) );
4 in ( Seg ( len m ) ) by A1,FINSEQ_1:1;
then 4 in ( dom m ) by FINSEQ_1:def 3;
then A19: ( I1 . 4 ) = ( Absval ( ( n -BinarySequence ( m . 4 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A8,A9,A16,A10,CKB40:def 1;
then A20: t21 = ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( n -BinarySequence t12 ) ) 'xor' ( n -BinarySequence ( Absval ( ( n -BinarySequence ( m . 4 ) ) 'xor' ( n -BinarySequence t12 ) ) ) ) ) ),n) ),( k2 . 6 ),n) ) by A15,A17,A14,BINARI_3:36
.= ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( n -BinarySequence t12 ) ) 'xor' ( ( n -BinarySequence ( m . 4 ) ) 'xor' ( n -BinarySequence t12 ) ) ) ),n) ),( k2 . 6 ),n) ) by BINARI_3:36
.= ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( ( n -BinarySequence t12 ) 'xor' ( ( n -BinarySequence t12 ) 'xor' ( n -BinarySequence ( m . 4 ) ) ) ) ) ),n) ),( k2 . 6 ),n) ) by CKB14:1
.= ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( ( ( n -BinarySequence t12 ) 'xor' ( n -BinarySequence t12 ) ) 'xor' ( n -BinarySequence ( m . 4 ) ) ) ) ),n) ),( k2 . 6 ),n) ) by CKB14:1
.= ( MUL_MOD (( ADD_MOD (t10,( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 4 ) ) ) ) ),n) ),( k2 . 6 ),n) ) by CKB10:1
.= t11 by A7,A9,CKB13:1;
A21:now
let j being Nat;
assume A22: j in ( Seg ( len m ) );
then j in ( Seg ( len I1 ) ) by A10,CKB40:def 1;
then A23: j in ( dom I1 ) by FINSEQ_1:def 3;
A24: j in ( dom m ) by A22,FINSEQ_1:def 3;
now
per cases ;
suppose A25: j = 1;

A26: ( m . 1 ) < ( 2 to_power n ) by A2,CKB15:def 1;
thus ( I2 . j ) = ( Absval ( ( n -BinarySequence ( I1 . 1 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A12,A15,A18,A20,A23,A25,CKB40:def 1
.= ( Absval ( ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( n -BinarySequence t11 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A11,BINARI_3:36
.= ( Absval ( ( n -BinarySequence ( m . 1 ) ) 'xor' ( ( n -BinarySequence t11 ) 'xor' ( n -BinarySequence t11 ) ) ) ) by CKB14:1
.= ( Absval ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 1 ) ) ) ) by CKB10:1
.= ( Absval ( n -BinarySequence ( m . 1 ) ) ) by CKB13:1
.= ( m . j ) by A25,A26,BINARI_3:35;
end;
suppose A27: j = 2;

A28: ( m . 2 ) < ( 2 to_power n ) by A3,CKB15:def 1;
thus ( I2 . j ) = ( Absval ( ( n -BinarySequence ( I1 . 2 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A16,A12,A15,A18,A14,A20,A23,A27,CKB40:def 1
.= ( Absval ( ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( n -BinarySequence t12 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A17,BINARI_3:36
.= ( Absval ( ( n -BinarySequence ( m . 2 ) ) 'xor' ( ( n -BinarySequence t12 ) 'xor' ( n -BinarySequence t12 ) ) ) ) by CKB14:1
.= ( Absval ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 2 ) ) ) ) by CKB10:1
.= ( Absval ( n -BinarySequence ( m . 2 ) ) ) by CKB13:1
.= ( m . j ) by A27,A28,BINARI_3:35;
end;
suppose A29: j = 3;

A30: ( m . 3 ) < ( 2 to_power n ) by A4,CKB15:def 1;
thus ( I2 . j ) = ( Absval ( ( n -BinarySequence ( I1 . 3 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A12,A15,A18,A20,A23,A29,CKB40:def 1
.= ( Absval ( ( ( n -BinarySequence ( m . 3 ) ) 'xor' ( n -BinarySequence t11 ) ) 'xor' ( n -BinarySequence t11 ) ) ) by A13,BINARI_3:36
.= ( Absval ( ( n -BinarySequence ( m . 3 ) ) 'xor' ( ( n -BinarySequence t11 ) 'xor' ( n -BinarySequence t11 ) ) ) ) by CKB14:1
.= ( Absval ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 3 ) ) ) ) by CKB10:1
.= ( Absval ( n -BinarySequence ( m . 3 ) ) ) by CKB13:1
.= ( m . j ) by A29,A30,BINARI_3:35;
end;
suppose A31: j = 4;

A32: ( m . 4 ) < ( 2 to_power n ) by A5,CKB15:def 1;
thus ( I2 . j ) = ( Absval ( ( n -BinarySequence ( I1 . 4 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A16,A12,A15,A18,A14,A20,A23,A31,CKB40:def 1
.= ( Absval ( ( ( n -BinarySequence ( m . 4 ) ) 'xor' ( n -BinarySequence t12 ) ) 'xor' ( n -BinarySequence t12 ) ) ) by A19,BINARI_3:36
.= ( Absval ( ( n -BinarySequence ( m . 4 ) ) 'xor' ( ( n -BinarySequence t12 ) 'xor' ( n -BinarySequence t12 ) ) ) ) by CKB14:1
.= ( Absval ( ( ZERO n ) 'xor' ( n -BinarySequence ( m . 4 ) ) ) ) by CKB10:1
.= ( Absval ( n -BinarySequence ( m . 4 ) ) ) by CKB13:1
.= ( m . j ) by A31,A32,BINARI_3:35;
end;
suppose A33: (((j <> 1 & j <> 2) & j <> 3) & j <> 4);

hence ( I2 . j ) = ( I1 . j ) by A18,A23,CKB40:def 1
.= ( m . j ) by A10,A24,A33,CKB40:def 1;
end;
end;
hence ( I2 . j ) = ( m . j );
end;
A34: ( Seg ( len m ) ) = ( dom m ) by FINSEQ_1:def 3;
( Seg ( len m ) ) = ( Seg ( len I1 ) ) by A10,CKB40:def 1
.= ( Seg ( len I2 ) ) by A18,CKB40:def 1
.= ( dom I2 ) by FINSEQ_1:def 3;
hence thesis by A10,A18,A34,A21,FINSEQ_1:13;
end;
