environ
vocabularies NUMBERS,FINSET_1,RELAT_1,FUNCT_1,XBOOLE_0,TARSKI,SUBSET_1,FINSEQ_1,NAT_1,FUNCT_4,FUNCOP_1,ZFMISC_1,CARD_1,ARYTM_3,CARD_2,ORDINAL2,XXREAL_0,PBOOLE,GLIB_000;
notations TARSKI,XBOOLE_0,DOMAIN_1,SUBSET_1,PBOOLE,RELAT_1,CARD_1,CARD_2,FUNCT_1,RELSET_1,FINSEQ_1,FINSET_1,NAT_1,FUNCT_2,FUNCOP_1,FUNCT_4,ORDINAL2,FINSEQ_4,NUMBERS,XXREAL_0,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB14,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59;
definitions FUNCOP_1,RELAT_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FUNCT_1,FUNCT_2,FUNCT_4,NAT_1,RELAT_1,FINSEQ_4,TARSKI,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB50,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59;
schemes NAT_1,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,NAT_1,CARD_1,FINSEQ_1,FINSEQ_4,FUNCT_2,PARTFUN1,RELSET_1,CKB1,CKB13,CKB15,CKB21,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49;
constructors DOMAIN_1,FUNCT_4,XXREAL_0,NAT_1,NAT_D,BINOP_2,CARD_2,FINSEQ_4,PBOOLE,ORDINAL3,WELLORD2,PARTFUN1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
scheme FinGraphOrderInd { P[ finite _Graph] } : (for G being  finite _Graph holds P[ G ])
provided
A1: (for G being  finite _Graph holds (( G .order() ) = 1 implies P[ G ]))
and
A2: (for k being non empty Nat holds ((for Gk being  finite _Graph holds (( Gk .order() ) = k implies P[ Gk ])) implies (for Gk1 being  finite _Graph holds (( Gk1 .order() ) = ( k + 1 ) implies P[ Gk1 ]))))
proof
defpred P2[ Nat ]
 means
(for G being  finite _Graph holds (( G .order() ) = $1 implies P[ G ]));
A3: (for k being non empty Nat holds (P2[ k ] implies P2[ ( k + 1 ) ])) by A2;
let G being  finite _Graph;
A4: ( G .order() ) = ( G .order() );
A5: P2[ 1 ] by A1;
(for k being non empty Nat holds P2[ k ]) from NAT_1:sch 10(A5,A3);
hence thesis by A4;
end;
