environ
vocabularies NUMBERS,FINSET_1,RELAT_1,FUNCT_1,XBOOLE_0,TARSKI,SUBSET_1,FINSEQ_1,NAT_1,FUNCT_4,FUNCOP_1,ZFMISC_1,CARD_1,ARYTM_3,CARD_2,ORDINAL2,XXREAL_0,PBOOLE,GLIB_000;
notations TARSKI,XBOOLE_0,DOMAIN_1,SUBSET_1,PBOOLE,RELAT_1,CARD_1,CARD_2,FUNCT_1,RELSET_1,FINSEQ_1,FINSET_1,NAT_1,FUNCT_2,FUNCOP_1,FUNCT_4,ORDINAL2,FINSEQ_4,NUMBERS,XXREAL_0,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB14,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33;
definitions FUNCOP_1,RELAT_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FUNCT_1,FUNCT_2,FUNCT_4,NAT_1,RELAT_1,FINSEQ_4,TARSKI,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34;
schemes NAT_1,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,NAT_1,CARD_1,FINSEQ_1,FINSEQ_4,FUNCT_2,PARTFUN1,RELSET_1,CKB1,CKB13,CKB15,CKB21,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40;
constructors DOMAIN_1,FUNCT_4,XXREAL_0,NAT_1,NAT_D,BINOP_2,CARD_2,FINSEQ_4,PBOOLE,ORDINAL3,WELLORD2,PARTFUN1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
registration
cluster  trivial  non-Dmulti ->  finite for _Graph;
coherence
proof
let G being _Graph;
assume that
A7: G is  trivial
and
A8: G is  non-Dmulti;
( card ( the_Vertices_of G ) ) = 1 by A7,CKB29:def 1;
then consider v being set such that A9: ( the_Vertices_of G ) = { v } by CARD_2:42;
now
set e1 = ( choose ( the_Edges_of G ) );
set v1 = ( ( the_Source_of G ) . e1 );
set v2 = ( ( the_Target_of G ) . e1 );
assume A10: (not ( the_Edges_of G ) is  finite);
then A11: ( the_Edges_of G ) <> ( {} );
v2 in ( the_Vertices_of G ) by A10,FUNCT_2:5;
then A12: v2 = v by A9,TARSKI:def 1;
v1 in ( the_Vertices_of G ) by A10,FUNCT_2:5;
then v1 = v by A9,TARSKI:def 1;
then A13: e1 DJoins v,v,G by A11,A12,CKB23:def 1;
now
let x being set;
set v1 = ( ( the_Source_of G ) . x );
set v2 = ( ( the_Target_of G ) . x );
hereby
assume x in { e1 };
then x = e1 by TARSKI:def 1;
hence x in ( the_Edges_of G ) by A11;
end;
assume A14: x in ( the_Edges_of G );
then v2 in ( the_Vertices_of G ) by FUNCT_2:5;
then A15: v2 = v by A9,TARSKI:def 1;
v1 in ( the_Vertices_of G ) by A14,FUNCT_2:5;
then v1 = v by A9,TARSKI:def 1;
then x DJoins v,v,G by A14,A15,CKB23:def 1;
then x = e1 by A8,A13,CKB31:def 1;
hence x in { e1 } by TARSKI:def 1;
end;
hence contradiction by A10,TARSKI:1;
end;
hence thesis by A9,CKB27:def 1;
end;
end;
