environ
vocabularies NUMBERS,FINSET_1,RELAT_1,FUNCT_1,XBOOLE_0,TARSKI,SUBSET_1,FINSEQ_1,NAT_1,FUNCT_4,FUNCOP_1,ZFMISC_1,CARD_1,ARYTM_3,CARD_2,ORDINAL2,XXREAL_0,PBOOLE,GLIB_000;
notations TARSKI,XBOOLE_0,DOMAIN_1,SUBSET_1,PBOOLE,RELAT_1,CARD_1,CARD_2,FUNCT_1,RELSET_1,FINSEQ_1,FINSET_1,NAT_1,FUNCT_2,FUNCOP_1,FUNCT_4,ORDINAL2,FINSEQ_4,NUMBERS,XXREAL_0,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB14,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB62,CKB63,CKB64,CKB72,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB88,CKB89,CKB90,CKB91,CKB94,CKB95,CKB96,CKB97,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112;
definitions FUNCOP_1,RELAT_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB62,CKB72,CKB74,CKB76,CKB77,CKB78,CKB95,CKB96,CKB97,CKB100,CKB101,CKB102,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FUNCT_1,FUNCT_2,FUNCT_4,NAT_1,RELAT_1,FINSEQ_4,TARSKI,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB50,CKB52,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB62,CKB66,CKB67,CKB72,CKB74,CKB76,CKB77,CKB78,CKB84,CKB85,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112;
schemes NAT_1,SUBSET_1,CKB60,CKB61;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,NAT_1,CARD_1,FINSEQ_1,FINSEQ_4,FUNCT_2,PARTFUN1,RELSET_1,CKB1,CKB13,CKB15,CKB21,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB65,CKB68,CKB69,CKB70,CKB71,CKB73,CKB80,CKB81,CKB82,CKB83,CKB86,CKB87,CKB92,CKB93;
constructors DOMAIN_1,FUNCT_4,XXREAL_0,NAT_1,NAT_D,BINOP_2,CARD_2,FINSEQ_4,PBOOLE,ORDINAL3,WELLORD2,PARTFUN1,RELSET_1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB62,CKB63,CKB64,CKB72,CKB74,CKB76,CKB77,CKB78,CKB95,CKB96,CKB97,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB112;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
definition
let G being  finite _Graph;
let v being (Vertex of G);
redefine attr v is  endvertex
means
( v .degree() ) = 1;
compatibility
proof
hereby
assume v is  endvertex;
then consider e being set such that A1: ( v .edgesInOut() ) = { e } and A2: (not e Joins v,v,G) by CKB112:def 1;
now
per cases  by A1,ZFMISC_1:37;
suppose A3: (( v .edgesIn() ) = { e } & ( v .edgesOut() ) = { e });

then e in ( v .edgesOut() ) by TARSKI:def 1;
then A4: ( ( the_Source_of G ) . e ) = v by CKB99:1;
A5: e in ( v .edgesIn() ) by A3,TARSKI:def 1;
then ( ( the_Target_of G ) . e ) = v by CKB98:1;
hence ( v .degree() ) = 1 by A2,A5,A4,CKB22:def 1;
end;
suppose (( v .edgesIn() ) = ( {} ) & ( v .edgesOut() ) = { e });

hence ( v .degree() ) = 1 by CARD_1:27,CARD_1:30;
end;
suppose (( v .edgesIn() ) = { e } & ( v .edgesOut() ) = ( {} ));

hence ( v .degree() ) = 1 by CARD_1:27,CARD_1:30;
end;
end;
hence ( v .degree() ) = 1;
end;
assume A6: ( v .degree() ) = 1;
now
per cases ;
suppose A7: ( card ( v .edgesIn() ) ) = ( 0 );

then consider e being set such that A8: ( v .edgesOut() ) = { e } by A6,CARD_2:42;
A9: ( v .edgesIn() ) = ( {} ) by A7;
A10:now
assume e Joins v,v,G;
then (e in ( the_Edges_of G ) & ( ( the_Target_of G ) . e ) = v) by CKB22:def 1;
hence contradiction by A9,CKB98:1;
end;
( v .edgesInOut() ) = { e } by A9,A8;
hence thesis by A10,CKB112:def 1;
end;
suppose ( card ( v .edgesIn() ) ) <> ( 0 );

then ( 0 ) < ( card ( v .edgesIn() ) ) by NAT_1:3;
then A11: ( ( 0 ) + 1 ) <= ( card ( v .edgesIn() ) ) by NAT_1:13;
( card ( v .edgesIn() ) ) <= 1 by A6,NAT_1:11;
then A12: ( card ( v .edgesIn() ) ) = 1 by A11,XXREAL_0:1;
then consider e being set such that A13: ( v .edgesIn() ) = { e } by CARD_2:42;
A14: ( v .edgesOut() ) = ( {} ) by A6,A12;
A15:now
assume e Joins v,v,G;
then (e in ( the_Edges_of G ) & ( ( the_Source_of G ) . e ) = v) by CKB22:def 1;
hence contradiction by A14,CKB99:1;
end;
( v .edgesInOut() ) = { e } by A13,A14;
hence thesis by A15,CKB112:def 1;
end;
end;
hence thesis;
end;
end;
