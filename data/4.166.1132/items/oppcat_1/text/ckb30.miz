environ
vocabularies CAT_1,XBOOLE_0,PARTFUN1,ZFMISC_1,RELAT_1,STRUCT_0,GRAPH_1,SUBSET_1,FUNCT_1,ARYTM_0,ALGSTR_0,FUNCT_2,ARYTM_3,OPPCAT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCT_4,STRUCT_0,GRAPH_1,CAT_1,CKB1,CKB3,CKB4,CKB5,CKB9,CKB10;
definitions CAT_1,BINOP_1,GRAPH_1,CKB3,CKB4,CKB5,CKB9,CKB10;
theorems FUNCT_2,FUNCT_4,PARTFUN1,CAT_1,SUBSET_1,FUNCT_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29;
schemes FUNCT_2;
registrations XBOOLE_0,RELSET_1,FUNCT_2,CAT_1,STRUCT_0;
constructors PARTFUN1,BINOP_1,FUNCT_4,CAT_1,RELSET_1,CKB1,CKB3,CKB4,CKB5,CKB9,CKB10;
requirements SUBSET,BOOLE;
begin
reserve C for Category;
theorem
(for f being (Morphism of C) holds (( f opp ) is  invertible iff f is  invertible))
proof
let f being (Morphism of C);
thus (( f opp ) is  invertible implies f is  invertible)
proof
given g being (Morphism of ( C opp )) such that
A1: (( dom g ) = ( cod ( f opp ) ) & ( cod g ) = ( dom ( f opp ) ))
and
A2: (( ( f opp ) * g ) = ( id ( cod ( f opp ) ) ) & ( g * ( f opp ) ) = ( id ( dom ( f opp ) ) ));

take g9 = ( opp g );
thus (( dom g9 ) = ( cod f ) & ( cod g9 ) = ( dom f )) by A1;
then (( ( f * g9 ) opp ) = ( ( g9 opp ) * ( f opp ) ) & ( ( g9 * f ) opp ) = ( ( f opp ) * ( g9 opp ) )) by CKB22:1;
hence (( f * g9 ) = ( id ( cod f ) ) & ( g9 * f ) = ( id ( dom f ) )) by A2;
end;

given g being (Morphism of C) such that
A3: (( dom g ) = ( cod f ) & ( cod g ) = ( dom f ))
and
A4: (( f * g ) = ( id ( cod f ) ) & ( g * f ) = ( id ( dom f ) ));

take ( g opp );
thus (( dom ( g opp ) ) = ( cod ( f opp ) ) & ( cod ( g opp ) ) = ( dom ( f opp ) )) by A3;
then (( ( f * g ) opp ) = ( ( g opp ) * ( f opp ) ) & ( ( g * f ) opp ) = ( ( f opp ) * ( g opp ) )) by CKB23:1;
hence (( ( f opp ) * ( g opp ) ) = ( id ( cod ( f opp ) ) ) & ( ( g opp ) * ( f opp ) ) = ( id ( dom ( f opp ) ) )) by A4;
end;
