environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,ORDINAL1,SETFAM_1,AMI_1,FSM_1,FUNCT_4,FUNCOP_1,RELAT_1,TARSKI,STRUCT_0,FUNCT_1,CARD_3,ZFMISC_1,CIRCUIT2,CAT_1,NAT_1,GLIB_000,XXREAL_0,PARTFUN1,FINSEQ_1,ARYTM_3,CARD_1,GOBOARD5,FUNCT_2,FINSEQ_4,ARYTM_1,FINSET_1,FRECHET,AMISTD_1,SCMNORM,AFINSQ_1,COMPOS_1,AMISTD_2,PBOOLE,SCMFSA6B;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,SETFAM_1,ORDINAL1,CARD_1,XXREAL_0,NUMBERS,XCMPLX_0,NAT_1,MEMBERED,FUNCT_1,RELSET_1,PARTFUN1,MCART_1,VALUED_1,DOMAIN_1,CARD_3,FINSEQ_1,FINSEQ_4,FUNCOP_1,FINSET_1,FUNCT_4,FUNCT_7,AFINSQ_1,PBOOLE,STRUCT_0,GRAPH_2,NAT_D,XXREAL_2,MEMSTR_0,COMPOS_1,EXTPRO_1,FUNCT_2,CKB2,CKB3,CKB4,CKB6,CKB7,CKB10,CKB13,CKB32;
definitions TARSKI,STRUCT_0,COMPOS_1,EXTPRO_1,XBOOLE_0,MEMSTR_0,FUNCT_1,FUNCOP_1,NAT_1,RELAT_1,FUNCT_4,NAT_D,AFINSQ_1,VALUED_1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB10,CKB13,CKB32;
theorems TARSKI,FINSEQ_4,FINSEQ_1,NAT_1,FUNCT_4,FUNCT_1,FUNCT_2,ENUMSET1,ZFMISC_1,CARD_1,FUNCOP_1,CARD_3,ORDINAL1,MCART_1,FINSEQ_3,INT_1,SETFAM_1,REVROT_1,EXTPRO_1,RELSET_1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,COMPOS_1,FUNCT_7,PARTFUN1,XREAL_0,NAT_D,PBOOLE,AFINSQ_1,RECDEF_2,MEMSTR_0,GRFUNC_1,PARTFUN2,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB17,CKB18,CKB19,CKB20,CKB21,CKB23,CKB24,CKB25,CKB29,CKB30,CKB31,CKB32;
schemes NAT_1,FINSEQ_2,FUNCT_2;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCOP_1,FINSET_1,NUMBERS,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,CARD_3,REALSET1,FUNCT_7,STRUCT_0,CARD_1,XXREAL_2,RELSET_1,FUNCT_4,AFINSQ_1,ORDINAL1,ZFMISC_1,SUBSET_1,VALUED_1,COMPOS_1,EXTPRO_1,PBOOLE,PRE_POLY,MEMSTR_0,CKB1,CKB5,CKB14,CKB15,CKB16,CKB22,CKB26,CKB27,CKB28;
constructors WELLORD2,REAL_1,FINSEQ_4,REALSET1,NAT_D,XXREAL_2,COMPOS_1,EXTPRO_1,RELSET_1,PRE_POLY,GRAPH_2,AFINSQ_1,MCART_1,FUNCT_7,PBOOLE,XXREAL_1,FUNCT_4,MEMSTR_0,CKB2,CKB3,CKB4,CKB6,CKB7,CKB10,CKB13,CKB32;
requirements NUMERALS,BOOLE,REAL,SUBSET,ARITHM;
begin
reserve x for set;
reserve N for  with_non-empty_elements non  empty set;
reserve S for  IC-Ins-separated non  empty AMI-Struct over N;
reserve i for (Element of (the Instructions of S));
theorem
Th41: (for S being  IC-Ins-separated non  empty AMI-Struct over N holds (for il being (Element of ( NAT )) holds (for i being (Instruction of S) holds (i is  sequential implies ( NIC (i,il) ) = { ( succ il ) }))))
proof
let S being  IC-Ins-separated non  empty AMI-Struct over N;
let il being (Element of ( NAT ));
let i being (Instruction of S);
assume that
A1: (for s being (State of S) holds ( ( Exec (i,s) ) . ( IC S ) ) = ( succ ( IC s ) ));
now
let x being set;
A2:now
reconsider il1 = il as (Element of ( ObjectKind ( IC S ) )) by MEMSTR_0:def 3;
set I = i;
set t = the (State of S);
set P = the (Instruction-Sequence of S);
assume A3: x = ( succ il );
reconsider u = ( t +* (( IC S ),il1) ) as (Element of ( product (the Object-Kind of S) )) by CARD_3:107;
il in ( NAT );
then X: il in ( dom P ) by PARTFUN1:def 2;
A6: ( ( P +* (il,i) ) /. il ) = ( ( P +* (il,i) ) . il ) by PBOOLE:143
.= i by X,FUNCT_7:31;
( IC S ) in ( dom t ) by MEMSTR_0:2;
then A7: ( IC u ) = il by FUNCT_7:31;
then ( IC ( Following (( P +* (il,i) ),u) ) ) = ( succ il ) by A1,A6;
hence x in { ( IC ( Exec (i,ss) ) ) where ss is (Element of ( product (the Object-Kind of S) )): ( IC ss ) = il } by A3,A7,A6;
end;
now
assume x in { ( IC ( Exec (i,ss) ) ) where ss is (Element of ( product (the Object-Kind of S) )): ( IC ss ) = il };
then (ex s being (Element of ( product (the Object-Kind of S) )) st (x = ( IC ( Exec (i,s) ) ) & ( IC s ) = il));
hence x = ( succ il ) by A1;
end;
hence (x in { ( succ il ) } iff x in { ( IC ( Exec (i,ss) ) ) where ss is (Element of ( product (the Object-Kind of S) )): ( IC ss ) = il }) by A2,TARSKI:def 1;
end;
hence thesis by TARSKI:1;
end;
