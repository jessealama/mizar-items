environ
vocabularies AMI_1,SCMFSA_2,SCMFSA7B,SCMFSA6A,SF_MASTR,GRAPHSP,AMI_3,SCMFSA6B,TURING_1,AOFA_I00,SCMFSA8C,SCMFSA8B,SCMFSA8A,CARD_1,AMISTD_2,RELAT_1,TARSKI,XXREAL_0,ARYTM_3,FSM_1,XBOOLE_0,FUNCT_4,NUMBERS,SCMFSA6C,UNIALG_2,CIRCUIT2,FUNCT_1,MSUALG_1,SUBSET_1,NAT_1,STRUCT_0,FINSET_1,SCMFSA_1,ZFMISC_1,SCMNORM,PRE_FF,ARYTM_1,SFMASTR1,PARTFUN1,RELOC,PBOOLE,FUNCOP_1,COMPOS_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,FINSET_1,NAT_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,FUNCOP_1,PBOOLE,FUNCT_7,PRE_FF,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,AMISTD_2,SCMFSA_1,SCMFSA_2,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA8C,XXREAL_0,SEQ_4,CKB1;
definitions EXTPRO_1,COMPOS_1,SCMFSA_2,SCMFSA7B,FUNCOP_1,SCMFSA6A,MEMSTR_0,CKB1;
theorems TARSKI,ZFMISC_1,ENUMSET1,NAT_1,RELAT_1,FUNCT_1,FUNCT_2,LATTICE2,GRFUNC_1,SUBSET_1,FUNCT_4,PRE_FF,SCMFSA_2,MEMSTR_0,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA8C,XBOOLE_0,XBOOLE_1,XREAL_1,ORDINAL1,FUNCOP_1,XXREAL_0,AMI_3,XXREAL_2,PBOOLE,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_2,CKB1,CKB21,CKB22;
schemes NAT_1,DOMAIN_1,FRAENKEL,RECDEF_1;
registrations XBOOLE_0,SUBSET_1,SETFAM_1,FUNCT_1,ORDINAL1,FINSET_1,NUMBERS,XREAL_0,NAT_1,INT_1,MEMBERED,AMI_5,SCMFSA_2,SF_MASTR,SCMFSA6B,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8C,SCMFSA_9,XXREAL_2,RELAT_1,SCMFSA10,AMISTD_2,COMPOS_1,EXTPRO_1,PBOOLE,FUNCT_4,FUNCOP_1,SCMFSA6A,STRUCT_0,MEMSTR_0,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
constructors DOMAIN_1,SETWISEO,SEQ_4,PRE_FF,SCM_1,SCMFSA6A,SF_MASTR,SCMFSA6B,SCMFSA6C,SCMFSA8A,SCMFSA8B,SCMFSA8C,RELSET_1,PRE_POLY,AMISTD_2,SCMFSA7B,SCMFSA_1,PBOOLE,AMISTD_1,COMPLEX1,INT_2,NAT_D,XXREAL_1,MEMSTR_0,CKB1;
requirements NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve P for (Instruction-Sequence of ( SCM+FSA ));
reserve S for (State of ( SCM+FSA ));
reserve I for (Program of ( SCM+FSA ));
reserve J for (Program of ( SCM+FSA ));
theorem
Th4: ((((I is_halting_on ( Initialized S ),P & J is_halting_on ( IExec (I,P,S) ),P) & I is_closed_on ( Initialized S ),P) & J is_closed_on ( IExec (I,P,S) ),P) implies ( I ';' J ) is_halting_on ( Initialized S ),P)
proof
assume that
A1: I is_halting_on ( Initialized S ),P
and
A2: J is_halting_on ( IExec (I,P,S) ),P
and
A3: I is_closed_on ( Initialized S ),P
and
A4: J is_closed_on ( IExec (I,P,S) ),P;
set s = ( Initialize ( Initialized S ) );
set p = ( P +* ( I ';' J ) );
A7: ( I ';' J ) c= p by FUNCT_4:25;
( Directed I ) c= ( I ';' J ) by SCMFSA6A:16;
then ( Directed I ) c= p by A7,XBOOLE_1:1;
then A8: ( p +* ( Directed I ) ) = p by FUNCT_4:98;
A9: ( DataPart ( Initialized S ) ) = ( DataPart s ) by MEMSTR_0:79;
then A10: I is_halting_on s,p by A1,A3,SCMFSA8B:5;
then A11: ( p +* I ) halts_on ( Initialize s ) by SCMFSA7B:def 7;
set s1 = ( Initialize s );
set p1 = ( p +* I );
A12: ( ( Initialized S ) . ( intloc ( 0 ) ) ) = 1 by SCMFSA6A:38;
then ( s . ( intloc ( 0 ) ) ) = 1 by A9,SCMFSA6A:7;
then A13: s1 = ( Initialized s ) by SCMFSA8C:4;
set JAt = ( Start-At (( 0 ),( SCM+FSA )) );
set s3 = ( Initialize ( Comput (p1,s1,( LifeSpan (p1,s1) )) ) );
set p3 = ( p1 +* J );
A14: J c= p3 by FUNCT_4:25;
set m3 = ( LifeSpan (p3,s3) );
A15: ( DataPart ( IExec (I,P,S) ) ) = ( DataPart ( IExec (I,P,( Initialized S )) ) ) by SCMFSA8C:3
.= ( DataPart ( IExec (I,p,s) ) ) by A1,A3,A9,A12,SCMFSA8C:20
.= ( DataPart ( Result (( p +* I ),( Initialized s )) ) ) by SCMFSA6B:def 1
.= ( DataPart ( Result (( p +* I ),( Initialized s )) ) )
.= ( DataPart ( Comput (p1,s1,( LifeSpan (p1,s1) )) ) ) by A13,A11,EXTPRO_1:23;
then J is_halting_on ( Comput (p1,s1,( LifeSpan (p1,s1) )) ),p1 by A2,A4,SCMFSA8B:5;
then A16: p3 halts_on s3 by SCMFSA7B:def 7;
( DataPart ( IExec (I,P,S) ) ) = ( DataPart s3 ) by A15,MEMSTR_0:79;
then A17: J is_closed_on s3,p3 by A4,SCMFSA8B:3;
A18: ( Reloc (J,( card I )) ) c= ( I ';' J ) by FUNCT_4:25;
set m1 = ( LifeSpan (p1,s1) );
set s4 = ( Comput (p,s,( m1 + 1 )) );
set p4 = p;
A21: ( Reloc (J,( card I )) ) c= p by A7,A18,XBOOLE_1:1;
reconsider m = ( ( m1 + 1 ) + m3 ) as (Element of ( NAT ));
reconsider kk = ( DataPart JAt ) as Function;
A22: ( DataPart s3 ) = ( ( DataPart ( Comput (p1,s1,m1) ) ) +* kk ) by FUNCT_4:71;
take m;
( IC ( Comput (p,s,m) ) ) in ( NAT );
hence ( IC ( Comput (p,s,m) ) ) in ( dom p ) by PARTFUN1:def 2;
A24: I is_closed_on s,p by A3,A9,SCMFSA8B:3;
then A25: ( IC s4 ) = ( card I ) by A10,A8,SCMFSA8A:22;
A26: ( Comput (p,s,( ( m1 + 1 ) + m3 )) ) = ( Comput (p,( Comput (p,s,( m1 + 1 )) ),m3) ) by EXTPRO_1:4;
( DataPart JAt ) = ( {} ) by MEMSTR_0:20;
then ( DataPart ( Comput (p1,s1,m1) ) ) = ( DataPart s3 ) by A22,FUNCT_4:98,XBOOLE_1:2;
then ( DataPart s4 ) = ( DataPart s3 ) by A24,A10,A8,SCMFSA8A:22;
then ( IncAddr (( CurInstr (p3,( Comput (p3,s3,m3) )) ),( card I )) ) = ( CurInstr (p,( Comput (p,s4,m3) )) ) by A25,A17,A21,A14,SCMFSA8C:16;
then ( IncAddr (( CurInstr (p3,( Comput (p3,s3,m3) )) ),( card I )) ) = ( CurInstr (p,( Comput (p,s,( ( m1 + 1 ) + m3 )) )) ) by A26;
then ( CurInstr (p,( Comput (p,s,m) )) ) = ( IncAddr (( halt ( SCM+FSA ) ),( card I )) ) by A16,EXTPRO_1:def 15
.= ( halt ( SCM+FSA ) ) by COMPOS_1:11;
hence thesis;
end;
