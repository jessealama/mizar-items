environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,CLVECT_1,NAT_1,SUBSET_1,FUNCT_1,SUPINF_2,SERIES_1,ARYTM_3,CARD_1,SEQ_2,FUNCOP_1,REAL_1,XXREAL_0,NORMSP_1,ARYTM_1,CARD_3,ORDINAL2,LOPBAN_3,RSSPACE3,VALUED_0,RELAT_1,XREAL_0,ORDINAL1,COMPLEX1,CFUNCT_1,XXREAL_2,CLOPBAN1,SEQ_1,POWER,CLOPBAN2,MESFUNC1,REWRITE1,VECTSP_1,PREPOWER,STRUCT_0,COMSEQ_3,PRE_TOPC,VALUED_1;
notations TARSKI,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,PRE_TOPC,DOMAIN_1,FUNCOP_1,XXREAL_0,XREAL_0,COMPLEX1,REAL_1,NAT_1,STRUCT_0,ALGSTR_0,ORDINAL1,NUMBERS,RLVECT_1,VECTSP_1,NORMSP_1,VALUED_1,SEQ_1,VALUED_0,SEQ_2,SERIES_1,PREPOWER,POWER,CFUNCT_1,NORMSP_0,CLVECT_1,CSSPACE3,BHSP_4,CLOPBAN1,CLOPBAN2,LOPBAN_3,RECDEF_1;
definitions SEQ_2,SERIES_1,CLVECT_1,BHSP_3,RLVECT_1,BINOP_1,ALGSTR_0,VECTSP_1;
theorems ABSVALUE,RLVECT_1,VECTSP_1,SEQ_1,SEQ_2,SEQM_3,SERIES_1,NAT_1,INT_1,FUNCT_2,SEQ_4,PREPOWER,CLVECT_1,CSSPACE3,LOPBAN_3,CLOPBAN1,CFUNCDOM,CLOPBAN2,GROUP_1,FUNCOP_1,XREAL_1,COMPLEX1,XXREAL_0,ORDINAL1,BHSP_4,NORMSP_1,ALGSTR_0,VALUED_0,NORMSP_0;
schemes NAT_1,FUNCT_2;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,STRUCT_0,CLOPBAN2,ALGSTR_0,VALUED_1,FUNCT_2,VALUED_0,FUNCOP_1,NORMSP_0;
constructors DOMAIN_1,XXREAL_0,REAL_1,NAT_1,COMPLEX1,SEQ_2,PREPOWER,SERIES_1,BHSP_3,BHSP_4,LOPBAN_3,CSSPACE3,CLOPBAN2,SEQ_1,VALUED_1,PARTFUN1,RECDEF_1,RELSET_1,BINOP_2,RVSUM_1;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
theorem
Th1: (for X being  add-associative  right_zeroed  right_complementable non  empty CNORMSTR holds (for seq being (sequence of X) holds ((for n being (Element of ( NAT )) holds ( seq . n ) = ( 0. X )) implies (for m being (Element of ( NAT )) holds ( ( Partial_Sums seq ) . m ) = ( 0. X )))))
proof
let X being  add-associative  right_zeroed  right_complementable non  empty CNORMSTR;
let seq being (sequence of X);
assume that
A1: (for n being (Element of ( NAT )) holds ( seq . n ) = ( 0. X ));
let m being (Element of ( NAT ));
defpred P[ (Element of ( NAT )) ]
 means
( seq . $1 ) = ( ( Partial_Sums seq ) . $1 );
A2: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume that
A3: P[ k ];
thus ( seq . ( k + 1 ) ) = ( ( 0. X ) + ( seq . ( k + 1 ) ) ) by RLVECT_1:4
.= ( ( ( Partial_Sums seq ) . k ) + ( seq . ( k + 1 ) ) ) by A1,A3
.= ( ( Partial_Sums seq ) . ( k + 1 ) ) by BHSP_4:def 1;
end;
A4: P[ ( 0 ) ] by BHSP_4:def 1;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A4,A2);
then seq = ( Partial_Sums seq ) by FUNCT_2:63;
hence thesis by A1;
end;
