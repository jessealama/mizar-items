environ
vocabularies NUMBERS,XBOOLE_0,NAT_1,FINSEQ_2,MARGREL1,BINARITH,ARYTM_3,POWER,SUBSET_1,ORDINAL4,FINSEQ_1,FUNCOP_1,XBOOLEAN,CARD_1,RELAT_1,REAL_1,FINSEQ_5,EUCLID,XXREAL_0,FUNCT_1,PARTFUN1,ARYTM_1,BINARI_2,ZFMISC_1,INT_1,ABIAN,BINARI_3;
notations XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,REAL_1,XXREAL_0,NAT_1,NAT_D,POWER,ABIAN,SERIES_1,MARGREL1,FUNCT_1,PARTFUN1,FUNCOP_1,FINSEQ_1,FINSEQ_5,FINSEQOP,ZFMISC_1,FINSEQ_2,BINARITH,BINARI_2,EUCLID,CKB25;
definitions FINSEQ_2,EUCLID,XBOOLEAN,CKB25;
theorems TARSKI,NAT_1,NAT_2,MARGREL1,POWER,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_4,FINSEQ_5,FINSEQ_6,BINARITH,BINARI_2,XREAL_1,XCMPLX_1,XBOOLEAN,NAT_D,PARTFUN1,XXREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29;
schemes NAT_1,NAT_2,FINSEQ_2;
registrations RELSET_1,XREAL_0,NAT_1,XBOOLEAN,MARGREL1,ZFMISC_1,NAT_2,ORDINAL1,XBOOLE_0,FINSEQ_2,INT_1,CARD_1,FINSEQ_1;
constructors XXREAL_0,NAT_1,NAT_D,FINSEQOP,SERIES_1,ZFMISC_1,BINARITH,FINSEQ_5,BINARI_2,ABIAN,EUCLID,BINOP_2,RELSET_1,CKB25;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
Lm2: (for n being non  empty Nat holds (for k being Nat holds ((( 2 to_power n ) <= k & k < ( 2 to_power ( n + 1 ) )) implies ( ( ( n + 1 ) -BinarySequence k ) . ( n + 1 ) ) = ( TRUE ))))
proof
let n being non  empty Nat;
let k being Nat;
assume that
A1: ( 2 to_power n ) <= k
and
A2: k < ( 2 to_power ( n + 1 ) );
k < ( ( 2 to_power n ) * ( 2 to_power 1 ) ) by A2,POWER:27;
then k < ( 2 * ( 2 to_power n ) ) by POWER:25;
then A3: k < ( ( 2 to_power n ) + ( 2 to_power n ) );
( ( n + 1 ) -' 1 ) = ( ( n + 1 ) - 1 ) by NAT_D:37
.= n;
then A4: ( ( k div ( 2 to_power ( ( n + 1 ) -' 1 ) ) ) mod 2 ) = ( 1 mod 2 ) by A1,A3,NAT_2:20
.= 1 by NAT_D:24;
A5: ( n + 1 ) in ( Seg ( n + 1 ) ) by FINSEQ_1:4;
then ( n + 1 ) in ( Seg ( len ( ( n + 1 ) -BinarySequence k ) ) ) by CARD_1:def 7;
then ( n + 1 ) in ( dom ( ( n + 1 ) -BinarySequence k ) ) by FINSEQ_1:def 3;
hence ( ( ( n + 1 ) -BinarySequence k ) . ( n + 1 ) ) = ( ( ( n + 1 ) -BinarySequence k ) /. ( n + 1 ) ) by PARTFUN1:def 6
.= ( IFEQ (( ( k div ( 2 to_power ( ( n + 1 ) -' 1 ) ) ) mod 2 ),( 0 ),( FALSE ),( TRUE )) ) by A5,CKB25:def 1
.= ( TRUE ) by A4,FUNCOP_1:def 8;
end;
