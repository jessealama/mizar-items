environ
vocabularies MSUALG_1,SUBSET_1,STRUCT_0,NUMBERS,XBOOLE_0,CARD_3,FINSEQ_1,FUNCOP_1,FINSEQ_2,PBOOLE,FUNCT_4,RELAT_1,PARTFUN1,FUNCT_1,TARSKI,MSAFREE2,FINSET_1,GLIB_000,MARGREL1,CIRCUIT1,FSM_1,CIRCUIT2,MCART_1,NAT_1,CARD_1,LATTICES,XBOOLEAN,CIRCCOMB;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,NAT_1,MCART_1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FINSET_1,FUNCT_2,FUNCOP_1,PARTFUN1,FUNCT_4,CARD_3,MARGREL1,PBOOLE,STRUCT_0,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CKB1,CKB9,CKB10,CKB11;
definitions TARSKI,PARTFUN1,MSUALG_1,FINSET_1,MSAFREE2,STRUCT_0,RELAT_1,XBOOLE_0,FUNCOP_1,PBOOLE,MARGREL1,CKB10,CKB11;
theorems TARSKI,ZFMISC_1,FINSEQ_1,FINSEQ_2,MSUALG_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,MSAFREE2,CIRCUIT1,CIRCUIT2,MCART_1,CARD_3,ORDINAL1,MONOID_1,RELSET_1,XBOOLE_0,XBOOLE_1,FINSET_1,CARD_1,FINSEQ_3,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes FUNCT_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,FINSEQ_1,MARGREL1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_2,MSAFREE2,FUNCT_4,RELSET_1,PRE_CIRC,CARD_1,FINSEQ_2,CKB2,CKB3,CKB4,CKB5,CKB6;
constructors MARGREL1,CIRCUIT1,CIRCUIT2,RELSET_1,XCMPLX_0,CKB9,CKB10,CKB11;
requirements NUMERALS,BOOLE,SUBSET;
begin
theorem
(for S1,S2 being  Circuit-like non  empty ManySortedSign holds (( InnerVertices S1 ) misses ( InnerVertices S2 ) implies ( S1 +* S2 ) is  Circuit-like))
proof
let S1 being  Circuit-like non  empty ManySortedSign;
let S2 being  Circuit-like non  empty ManySortedSign;
assume A1: ( InnerVertices S1 ) misses ( InnerVertices S2 );
set r1 = (the ResultSort of S1);
set r2 = (the ResultSort of S2);
let S being non  void non  empty ManySortedSign;
set r = (the ResultSort of S);
A2: ( dom r1 ) = (the carrier' of S1) by FUNCT_2:def 1;
assume A3: S = ( S1 +* S2 );
then A4: r = ( r1 +* r2 ) by CKB11:def 1;
A5: ( dom r2 ) = (the carrier' of S2) by FUNCT_2:def 1;
let o1 being (Gate of S);
let o2 being (Gate of S);
A6: (the carrier' of S) = ( (the carrier' of S1) \/ (the carrier' of S2) ) by A3,CKB11:def 1;
then (((not o1 in (the carrier' of S2)) & o1 in (the carrier' of S1)) or o1 in (the carrier' of S2)) by XBOOLE_0:def 3;
then A7: (((( r . o1 ) = ( r1 . o1 ) & ( r1 . o1 ) in ( rng r1 )) & o1 in (the carrier' of S1)) or ((( r . o1 ) = ( r2 . o1 ) & ( r2 . o1 ) in ( rng r2 )) & o1 in (the carrier' of S2))) by A4,A2,A5,A6,FUNCT_1:def 3,FUNCT_4:def 1;
(((not o2 in (the carrier' of S2)) & o2 in (the carrier' of S1)) or o2 in (the carrier' of S2)) by A6,XBOOLE_0:def 3;
then A8: (((( r . o2 ) = ( r1 . o2 ) & ( r1 . o2 ) in ( rng r1 )) & o2 in (the carrier' of S1)) or ((( r . o2 ) = ( r2 . o2 ) & ( r2 . o2 ) in ( rng r2 )) & o2 in (the carrier' of S2))) by A4,A2,A5,A6,FUNCT_1:def 3,FUNCT_4:def 1;
assume A9: ( the_result_sort_of o1 ) = ( the_result_sort_of o2 );
per cases  by A1,A9,A7,A8,XBOOLE_0:3;
suppose A10: (((( r . o1 ) = ( r1 . o1 ) & o1 in (the carrier' of S1)) & ( r . o2 ) = ( r1 . o2 )) & o2 in (the carrier' of S1));

then reconsider S = S1 as non  void  Circuit-like non  empty ManySortedSign;
reconsider p1 = o1,p2 = o2 as (Gate of S) by A10;
A11: ( the_result_sort_of p2 ) = ( r1 . p2 );
( the_result_sort_of p1 ) = ( r1 . p1 );
hence thesis by A9,A10,A11,MSAFREE2:def 6;
end;
suppose A12: (((( r . o1 ) = ( r2 . o1 ) & o1 in (the carrier' of S2)) & ( r . o2 ) = ( r2 . o2 )) & o2 in (the carrier' of S2));

then reconsider S = S2 as non  void  Circuit-like non  empty ManySortedSign;
reconsider p1 = o1,p2 = o2 as (Gate of S) by A12;
A13: ( the_result_sort_of p2 ) = ( r2 . p2 );
( the_result_sort_of p1 ) = ( r2 . p1 );
hence thesis by A9,A12,A13,MSAFREE2:def 6;
end;
end;
