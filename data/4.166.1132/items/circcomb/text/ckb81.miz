environ
vocabularies MSUALG_1,SUBSET_1,STRUCT_0,NUMBERS,XBOOLE_0,CARD_3,FINSEQ_1,FUNCOP_1,FINSEQ_2,PBOOLE,FUNCT_4,RELAT_1,PARTFUN1,FUNCT_1,TARSKI,MSAFREE2,FINSET_1,GLIB_000,MARGREL1,CIRCUIT1,FSM_1,CIRCUIT2,MCART_1,NAT_1,CARD_1,LATTICES,XBOOLEAN,CIRCCOMB;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,NAT_1,MCART_1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FINSET_1,FUNCT_2,FUNCOP_1,PARTFUN1,FUNCT_4,CARD_3,MARGREL1,PBOOLE,STRUCT_0,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CKB1,CKB9,CKB10,CKB11,CKB29,CKB30,CKB49,CKB54,CKB61,CKB62,CKB63,CKB64,CKB65;
definitions TARSKI,PARTFUN1,MSUALG_1,FINSET_1,MSAFREE2,STRUCT_0,RELAT_1,XBOOLE_0,FUNCOP_1,PBOOLE,MARGREL1,CKB10,CKB11,CKB29,CKB30,CKB49,CKB54,CKB61,CKB62,CKB63,CKB64,CKB65;
theorems TARSKI,ZFMISC_1,FINSEQ_1,FINSEQ_2,MSUALG_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,MSAFREE2,CIRCUIT1,CIRCUIT2,MCART_1,CARD_3,ORDINAL1,MONOID_1,RELSET_1,XBOOLE_0,XBOOLE_1,FINSET_1,CARD_1,FINSEQ_3,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB51,CKB52,CKB53,CKB54,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB69,CKB70,CKB72,CKB75,CKB76,CKB77,CKB79;
schemes FUNCT_1,CKB66,CKB67;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,FINSEQ_1,MARGREL1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_2,MSAFREE2,FUNCT_4,RELSET_1,PRE_CIRC,CARD_1,FINSEQ_2,CKB2,CKB3,CKB4,CKB5,CKB6,CKB20,CKB21,CKB50,CKB55,CKB68,CKB71,CKB73,CKB74,CKB78,CKB80;
constructors MARGREL1,CIRCUIT1,CIRCUIT2,RELSET_1,XCMPLX_0,CKB9,CKB10,CKB11,CKB29,CKB30,CKB49,CKB54,CKB61,CKB62,CKB63,CKB64,CKB65;
requirements NUMERALS,BOOLE,SUBSET;
begin
theorem
Th59: (for S1,S2 being non  empty ManySortedSign holds ((S1 is  gate`2isBoolean & S2 is  gate`2isBoolean) implies ( S1 +* S2 ) is  gate`2isBoolean))
proof
let S1 being non  empty ManySortedSign;
let S2 being non  empty ManySortedSign;
set S = ( S1 +* S2 );
assume that
A1: S1 is  gate`2isBoolean
and
A2: S2 is  gate`2isBoolean;
let g being set;
assume A3: g in (the carrier' of S);
let p being FinSequence;
assume that
A4: p = ( (the Arity of S) . g );
reconsider g as (Gate of S) by A3;
A5: ( dom (the Arity of S1) ) = (the carrier' of S1) by FUNCT_2:def 1;
A6: (the Arity of S) = ( (the Arity of S1) +* (the Arity of S2) ) by CKB11:def 1;
A7: ( dom (the Arity of S2) ) = (the carrier' of S2) by FUNCT_2:def 1;
A8: (the carrier' of S) = ( (the carrier' of S1) \/ (the carrier' of S2) ) by CKB11:def 1;
then A9: (g in (the carrier' of S1) or g in (the carrier' of S2)) by A3,XBOOLE_0:def 3;
A10:now
assume A11: (not g in (the carrier' of S2));
then reconsider g1 = g as (Gate of S1) by A8,A3,XBOOLE_0:def 3;
( (the Arity of S1) . g1 ) = p by A8,A6,A3,A4,A5,A7,A11,FUNCT_4:def 1;
hence thesis by A1,A9,A11,CKB63:def 1;
end;
now
assume A12: g in (the carrier' of S2);
then reconsider g2 = g as (Gate of S2);
( (the Arity of S2) . g2 ) = p by A8,A6,A4,A5,A7,A12,FUNCT_4:def 1;
hence thesis by A2,A12,CKB63:def 1;
end;
hence thesis by A10;
end;
