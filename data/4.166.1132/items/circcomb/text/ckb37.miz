environ
vocabularies MSUALG_1,SUBSET_1,STRUCT_0,NUMBERS,XBOOLE_0,CARD_3,FINSEQ_1,FUNCOP_1,FINSEQ_2,PBOOLE,FUNCT_4,RELAT_1,PARTFUN1,FUNCT_1,TARSKI,MSAFREE2,FINSET_1,GLIB_000,MARGREL1,CIRCUIT1,FSM_1,CIRCUIT2,MCART_1,NAT_1,CARD_1,LATTICES,XBOOLEAN,CIRCCOMB;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,NAT_1,MCART_1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FINSET_1,FUNCT_2,FUNCOP_1,PARTFUN1,FUNCT_4,CARD_3,MARGREL1,PBOOLE,STRUCT_0,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CKB1,CKB9,CKB10,CKB11,CKB29,CKB30;
definitions TARSKI,PARTFUN1,MSUALG_1,FINSET_1,MSAFREE2,STRUCT_0,RELAT_1,XBOOLE_0,FUNCOP_1,PBOOLE,MARGREL1,CKB10,CKB11,CKB29,CKB30;
theorems TARSKI,ZFMISC_1,FINSEQ_1,FINSEQ_2,MSUALG_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,MSAFREE2,CIRCUIT1,CIRCUIT2,MCART_1,CARD_3,ORDINAL1,MONOID_1,RELSET_1,XBOOLE_0,XBOOLE_1,FINSET_1,CARD_1,FINSEQ_3,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36;
schemes FUNCT_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,FINSEQ_1,MARGREL1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_2,MSAFREE2,FUNCT_4,RELSET_1,PRE_CIRC,CARD_1,FINSEQ_2,CKB2,CKB3,CKB4,CKB5,CKB6,CKB20,CKB21;
constructors MARGREL1,CIRCUIT1,CIRCUIT2,RELSET_1,XCMPLX_0,CKB9,CKB10,CKB11,CKB29,CKB30;
requirements NUMERALS,BOOLE,SUBSET;
begin
theorem
(for S1,S2 being non  empty ManySortedSign holds (for A1 being  finite-yielding  non-empty MSAlgebra over S1 holds (for A2 being  finite-yielding  non-empty MSAlgebra over S2 holds ((the Sorts of A1) tolerates (the Sorts of A2) implies ( A1 +* A2 ) is  finite-yielding))))
proof
let S1 being non  empty ManySortedSign;
let S2 being non  empty ManySortedSign;
let A1 being  finite-yielding  non-empty MSAlgebra over S1;
let A2 being  finite-yielding  non-empty MSAlgebra over S2;
assume that
A1: (the Sorts of A1) tolerates (the Sorts of A2);
let x being set;
set A = ( A1 +* A2 );
set SA = (the Sorts of A);
set SA1 = (the Sorts of A1);
set SA2 = (the Sorts of A2);
A2: ( dom SA1 ) = (the carrier of S1) by PARTFUN1:def 2;
A3: SA1 is  finite-yielding by MSAFREE2:def 11;
assume x in (the carrier of ( S1 +* S2 ));
then reconsider x as (Vertex of ( S1 +* S2 ));
A4: ( dom SA2 ) = (the carrier of S2) by PARTFUN1:def 2;
(the carrier of ( S1 +* S2 )) = ( (the carrier of S1) \/ (the carrier of S2) ) by CKB11:def 1;
then A5: (x in (the carrier of S1) or x in (the carrier of S2)) by XBOOLE_0:def 3;
A6: SA2 is  finite-yielding by MSAFREE2:def 11;
SA = ( SA1 +* SA2 ) by A1,CKB30:def 1;
then ((( SA . x ) = ( SA1 . x ) & ( SA1 . x ) is  finite) or (( SA . x ) = ( SA2 . x ) & ( SA2 . x ) is  finite)) by A1,A2,A4,A5,A3,A6,FINSET_1:def 4,FUNCT_4:13,FUNCT_4:15;
hence thesis;
end;
