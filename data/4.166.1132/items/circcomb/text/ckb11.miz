environ
vocabularies MSUALG_1,SUBSET_1,STRUCT_0,NUMBERS,XBOOLE_0,CARD_3,FINSEQ_1,FUNCOP_1,FINSEQ_2,PBOOLE,FUNCT_4,RELAT_1,PARTFUN1,FUNCT_1,TARSKI,MSAFREE2,FINSET_1,GLIB_000,MARGREL1,CIRCUIT1,FSM_1,CIRCUIT2,MCART_1,NAT_1,CARD_1,LATTICES,XBOOLEAN,CIRCCOMB;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,NAT_1,MCART_1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FINSET_1,FUNCT_2,FUNCOP_1,PARTFUN1,FUNCT_4,CARD_3,MARGREL1,PBOOLE,STRUCT_0,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CKB1,CKB9,CKB10;
definitions TARSKI,PARTFUN1,MSUALG_1,FINSET_1,MSAFREE2,STRUCT_0,RELAT_1,XBOOLE_0,FUNCOP_1,PBOOLE,MARGREL1,CKB10;
theorems TARSKI,ZFMISC_1,FINSEQ_1,FINSEQ_2,MSUALG_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,MSAFREE2,CIRCUIT1,CIRCUIT2,MCART_1,CARD_3,ORDINAL1,MONOID_1,RELSET_1,XBOOLE_0,XBOOLE_1,FINSET_1,CARD_1,FINSEQ_3,CKB7,CKB8,CKB10;
schemes FUNCT_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,FINSEQ_1,MARGREL1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_2,MSAFREE2,FUNCT_4,RELSET_1,PRE_CIRC,CARD_1,FINSEQ_2,CKB2,CKB3,CKB4,CKB5,CKB6;
constructors MARGREL1,CIRCUIT1,CIRCUIT2,RELSET_1,XCMPLX_0,CKB9,CKB10;
requirements NUMERALS,BOOLE,SUBSET;
begin
definition
let S1 being non  empty ManySortedSign;
let S2 being non  empty ManySortedSign;
func S1 +* S2 ->  strict non  empty ManySortedSign means 
:Def2: ((((the carrier of it) = ( (the carrier of S1) \/ (the carrier of S2) ) & (the carrier' of it) = ( (the carrier' of S1) \/ (the carrier' of S2) )) & (the Arity of it) = ( (the Arity of S1) +* (the Arity of S2) )) & (the ResultSort of it) = ( (the ResultSort of S1) +* (the ResultSort of S2) ));
existence
proof
set RESULT = ( (the ResultSort of S1) +* (the ResultSort of S2) );
set ARITY = ( (the Arity of S1) +* (the Arity of S2) );
set OPER = ( (the carrier' of S1) \/ (the carrier' of S2) );
reconsider CARR = ( (the carrier of S1) \/ (the carrier of S2) ) as non  empty set;
A1: ( dom (the ResultSort of S2) ) = (the carrier' of S2) by FUNCT_2:def 1;
( dom (the ResultSort of S1) ) = (the carrier' of S1) by FUNCT_2:def 1;
then A2: ( dom RESULT ) = OPER by A1,FUNCT_4:def 1;
A3: (the carrier of S1) c= CARR by XBOOLE_1:7;
A4: (the carrier of S2) c= CARR by XBOOLE_1:7;
( rng (the ResultSort of S2) ) c= (the carrier of S2) by RELAT_1:def 19;
then A5: ( rng (the ResultSort of S2) ) c= CARR by A4,XBOOLE_1:1;
( rng (the ResultSort of S1) ) c= (the carrier of S1) by RELAT_1:def 19;
then ( rng (the ResultSort of S1) ) c= CARR by A3,XBOOLE_1:1;
then A6: ( ( rng (the ResultSort of S1) ) \/ ( rng (the ResultSort of S2) ) ) c= CARR by A5,XBOOLE_1:8;
( rng RESULT ) c= ( ( rng (the ResultSort of S1) ) \/ ( rng (the ResultSort of S2) ) ) by FUNCT_4:17;
then ( rng RESULT ) c= CARR by A6,XBOOLE_1:1;
then reconsider RESULT as (Function of OPER,CARR) by A2,FUNCT_2:def 1,RELSET_1:4;
A7: ( dom (the Arity of S2) ) = (the carrier' of S2) by FUNCT_2:def 1;
( dom (the Arity of S1) ) = (the carrier' of S1) by FUNCT_2:def 1;
then A8: ( dom ARITY ) = OPER by A7,FUNCT_4:def 1;
A9: ( rng (the Arity of S1) ) c= ( (the carrier of S1) * ) by RELAT_1:def 19;
A10: ( rng (the Arity of S2) ) c= ( (the carrier of S2) * ) by RELAT_1:def 19;
( (the carrier of S2) * ) c= ( CARR * ) by FINSEQ_1:62,XBOOLE_1:7;
then A11: ( rng (the Arity of S2) ) c= ( CARR * ) by A10,XBOOLE_1:1;
( (the carrier of S1) * ) c= ( CARR * ) by FINSEQ_1:62,XBOOLE_1:7;
then ( rng (the Arity of S1) ) c= ( CARR * ) by A9,XBOOLE_1:1;
then A12: ( ( rng (the Arity of S1) ) \/ ( rng (the Arity of S2) ) ) c= ( CARR * ) by A11,XBOOLE_1:8;
( rng ARITY ) c= ( ( rng (the Arity of S1) ) \/ ( rng (the Arity of S2) ) ) by FUNCT_4:17;
then ( rng ARITY ) c= ( CARR * ) by A12,XBOOLE_1:1;
then reconsider ARITY as (Function of OPER,( CARR * )) by A8,FUNCT_2:def 1,RELSET_1:4;
take ManySortedSign (# CARR,OPER,ARITY,RESULT #);
thus thesis;
end;
uniqueness;
end;
