environ
vocabularies MSUALG_1,SUBSET_1,STRUCT_0,NUMBERS,XBOOLE_0,CARD_3,FINSEQ_1,FUNCOP_1,FINSEQ_2,PBOOLE,FUNCT_4,RELAT_1,PARTFUN1,FUNCT_1,TARSKI,MSAFREE2,FINSET_1,GLIB_000,MARGREL1,CIRCUIT1,FSM_1,CIRCUIT2,MCART_1,NAT_1,CARD_1,LATTICES,XBOOLEAN,CIRCCOMB;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,NAT_1,MCART_1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FINSET_1,FUNCT_2,FUNCOP_1,PARTFUN1,FUNCT_4,CARD_3,MARGREL1,PBOOLE,STRUCT_0,MSUALG_1,MSAFREE2,CIRCUIT1,CIRCUIT2,CKB1,CKB9,CKB10,CKB11;
definitions TARSKI,PARTFUN1,MSUALG_1,FINSET_1,MSAFREE2,STRUCT_0,RELAT_1,XBOOLE_0,FUNCOP_1,PBOOLE,MARGREL1,CKB10,CKB11;
theorems TARSKI,ZFMISC_1,FINSEQ_1,FINSEQ_2,MSUALG_1,FUNCT_1,FUNCT_2,FUNCT_4,PBOOLE,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,MSAFREE2,CIRCUIT1,CIRCUIT2,MCART_1,CARD_3,ORDINAL1,MONOID_1,RELSET_1,XBOOLE_0,XBOOLE_1,FINSET_1,CARD_1,FINSEQ_3,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
schemes FUNCT_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,FINSEQ_1,MARGREL1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_2,MSAFREE2,FUNCT_4,RELSET_1,PRE_CIRC,CARD_1,FINSEQ_2,CKB2,CKB3,CKB4,CKB5,CKB6;
constructors MARGREL1,CIRCUIT1,CIRCUIT2,RELSET_1,XCMPLX_0,CKB9,CKB10,CKB11;
requirements NUMERALS,BOOLE,SUBSET;
begin
theorem
(for f being  one-to-one Function holds (for S1,S2 being  Circuit-like non  empty ManySortedSign holds (((the ResultSort of S1) c= f & (the ResultSort of S2) c= f) implies ( S1 +* S2 ) is  Circuit-like)))
proof
let f being  one-to-one Function;
let S1 being  Circuit-like non  empty ManySortedSign;
let S2 being  Circuit-like non  empty ManySortedSign;
assume that
A1: (the ResultSort of S1) c= f
and
A2: (the ResultSort of S2) c= f;
let S being non  void non  empty ManySortedSign;
set r1 = (the ResultSort of S1);
set r2 = (the ResultSort of S2);
set r = (the ResultSort of S);
A3: ( r1 +* r2 ) c= ( r1 \/ r2 ) by FUNCT_4:29;
assume S = ( S1 +* S2 );
then A4: r = ( r1 +* r2 ) by CKB11:def 1;
( r1 \/ r2 ) c= f by A1,A2,XBOOLE_1:8;
then A5: ( r1 +* r2 ) c= f by A3,XBOOLE_1:1;
then A6: ( dom r ) c= ( dom f ) by A4,GRFUNC_1:2;
let o1 being (Gate of S);
let o2 being (Gate of S);
A7: ( dom r ) = (the carrier' of S) by FUNCT_2:def 1;
then A8: o1 in ( dom r );
A9: o2 in ( dom r ) by A7;
assume A10: ( the_result_sort_of o1 ) = ( the_result_sort_of o2 );
A11: ( r . o2 ) = ( f . o2 ) by A4,A7,A5,GRFUNC_1:2;
( r . o1 ) = ( f . o1 ) by A4,A7,A5,GRFUNC_1:2;
hence thesis by A10,A8,A9,A11,A6,FUNCT_1:def 4;
end;
