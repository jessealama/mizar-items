environ
vocabularies NUMBERS,SUBSET_1,SEQ_1,NAT_1,EUCLID,REAL_1,PRE_TOPC,FUNCT_1,RELAT_1,VALUED_0,TARSKI,STRUCT_0,SUPINF_2,ARYTM_3,ARYTM_1,COMPLEX1,VALUED_1,CARD_1,XXREAL_0,XXREAL_2,SEQ_2,ORDINAL2,XBOOLE_0,PARTFUN1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,RELAT_1,FUNCT_1,VALUED_1,PARTFUN1,COMPLEX1,REAL_1,PRE_TOPC,XXREAL_0,NAT_1,SEQ_1,STRUCT_0,RLVECT_1,VFUNCT_1,EUCLID,CKB1,CKB3;
definitions FUNCT_2,STRUCT_0,VFUNCT_1,CKB3;
theorems FUNCT_1,FUNCT_2,TARSKI,EUCLID,SEQ_1,NAT_1,XBOOLE_0,NORMSP_1,XCMPLX_0,XREAL_1,COMPLEX1,XXREAL_0,VFUNCT_1,ORDINAL1,CKB2,CKB3,CKB4,CKB5;
schemes SEQ_1,NAT_1;
registrations ORDINAL1,RELSET_1,XXREAL_0,XREAL_0,MEMBERED,STRUCT_0,MONOID_0,EUCLID,XBOOLE_0,VALUED_1,FUNCT_2,NUMBERS,VALUED_0,NAT_1;
constructors XXREAL_0,REAL_1,NAT_1,COMPLEX1,MONOID_0,EUCLID,SEQ_1,RELSET_1,VALUED_0,BINOP_2,VFUNCT_1,CKB3;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve N for (Element of ( NAT ));
reserve seq1 for (Real_Sequence of N);
reserve seq2 for (Real_Sequence of N);
definition
let N being Nat;
let seq1 being (Real_Sequence of N);
let seq2 being (Real_Sequence of N);
func seq1 + seq2 -> (Real_Sequence of N) equals 
( seq1 + seq2 );
coherence
proof
A1: (( dom seq1 ) = ( NAT ) & ( dom seq2 ) = ( NAT )) by FUNCT_2:def 1;
( dom ( seq1 + seq2 ) ) = ( ( dom seq1 ) /\ ( dom seq2 ) ) by VFUNCT_1:def 1;
hence thesis by A1,FUNCT_2:67;
end;
end;
