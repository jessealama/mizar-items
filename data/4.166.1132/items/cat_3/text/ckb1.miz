environ
vocabularies XBOOLE_0,CAT_1,SUBSET_1,FUNCT_1,PARTFUN1,FUNCOP_1,STRUCT_0,FUNCT_6,RELAT_1,GRAPH_1,FUNCT_4,ARYTM_0,FVSUM_1,ALGSTR_0,WELLORD1,TARSKI,CARD_1,CAT_3;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCOP_1,FUNCT_4,NUMBERS,FUNCT_2,STRUCT_0,GRAPH_1,CAT_1,OPPCAT_1;
definitions CAT_1,FUNCOP_1;
theorems TARSKI,FUNCT_2,FUNCOP_1,FUNCT_4,CAT_1,OPPCAT_1,RELSET_1;
schemes FUNCT_2,FUNCT_1;
registrations XBOOLE_0,RELSET_1,STRUCT_0;
constructors PARTFUN1,OPPCAT_1,FUNCOP_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve I for set;
reserve x for set;
reserve A for non  empty set;
scheme LambdaIdx { I() -> set,A() -> non  empty set,F(set) -> (Element of A()) } : (ex F being (Function of I(),A()) st (for x holds (x in I() implies ( F /. x ) = F(x))))
proof
A1: (for x holds (x in I() implies F(x) in A()));
consider IT being (Function of I(),A()) such that A2: (for x holds (x in I() implies ( IT . x ) = F(x))) from FUNCT_2:sch 2(A1);
take IT;
let x;
assume A3: x in I();
hence F(x) = ( IT . x ) by A2
.= ( IT /. x ) by A3,FUNCT_2:def 13;
end;
