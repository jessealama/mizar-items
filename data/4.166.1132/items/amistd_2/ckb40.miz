environ
vocabularies NUMBERS,ORDINAL1,SETFAM_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,AMI_1,XBOOLE_0,RELAT_1,TARSKI,FUNCOP_1,GLIB_000,GOBOARD5,AMISTD_1,UNIALG_1,FUNCT_1,CARD_3,CARD_5,FRECHET,RCOMP_1,STRUCT_0,VALUED_1,FSM_1,FUNCT_4,FUNCT_7,TURING_1,CIRCUIT2,AMISTD_2,PARTFUN1,CAT_1,SCMNORM,NAT_1,RELOC,PBOOLE,XXREAL_0,COMPOS_1,MSUALG_1,FINSET_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,FINSET_1,MCART_1,SETFAM_1,MEMBERED,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,PBOOLE,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CARD_3,FINSEQ_1,FUNCOP_1,NAT_D,FUNCT_7,VALUED_0,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,CKB2,CKB3,CKB27,CKB28;
definitions RELAT_1,FUNCT_1,WELLORD2,FUNCT_7,COMPOS_1,EXTPRO_1,AMISTD_1,XBOOLE_0,FUNCOP_1,CARD_3,NAT_1,AFINSQ_1,MCART_1,VALUED_1,TARSKI,STRUCT_0,MEMSTR_0,CKB2,CKB3,CKB27,CKB28;
theorems AMISTD_1,FUNCOP_1,FUNCT_1,FUNCT_4,GRFUNC_1,MCART_1,RELAT_1,SETFAM_1,TARSKI,ZFMISC_1,CARD_3,XBOOLE_0,XBOOLE_1,FUNCT_7,PBOOLE,PARTFUN1,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,ORDINAL1,NAT_D,NAT_1,XXREAL_0,MEMSTR_0,CKB1,CKB2,CKB3,CKB5,CKB7,CKB8,CKB9,CKB19,CKB21,CKB26,CKB27,CKB28,CKB36,CKB38,CKB39;
schemes NAT_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,CARD_3,REALSET1,FUNCT_7,STRUCT_0,AMISTD_1,CARD_1,FUNCT_4,XXREAL_2,RELSET_1,GRFUNC_1,FUNCT_2,ORDINAL1,AFINSQ_1,VALUED_1,VALUED_0,COMPOS_1,EXTPRO_1,XCMPLX_0,REAL_1,PBOOLE,MEMSTR_0,CKB4,CKB6,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB25,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB37;
constructors WELLORD2,REALSET1,NAT_D,AMISTD_1,XXREAL_2,PRE_POLY,AFINSQ_1,ORDINAL4,RECDEF_2,VALUED_1,NAT_1,FUNCT_7,PBOOLE,FUNCT_4,MEMSTR_0,RELSET_1,CKB2,CKB3,CKB27,CKB28;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
reserve N for  with_non-empty_elements non empty set;
reserve n for (Element of ( NAT ));
reserve m for (Element of ( NAT ));
theorem
(for S being  IC-Ins-separated non empty AMI-Struct over N holds (for s being (State of S) holds (for I being (Program of S) holds (for P1,P2 being (Instruction-Sequence of S) holds (((I c= P1 & I c= P2) & (for m holds (m < n implies ( IC ( Comput (P2,s,m) ) ) in ( dom I )))) implies (for m holds (m <= n implies ( Comput (P1,s,m) ) = ( Comput (P2,s,m) ))))))))
proof
let S being  IC-Ins-separated non empty AMI-Struct over N;
let s being (State of S);
let I being (Program of S);
let P1 being (Instruction-Sequence of S),P2 being (Instruction-Sequence of S);
assume that
A1: (I c= P1 & I c= P2);
assume that
A3: (for m holds (m < n implies ( IC ( Comput (P2,s,m) ) ) in ( dom I )));
defpred X[ Nat ]
 means
($1 <= n implies ( Comput (P1,s,$1) ) = ( Comput (P2,s,$1) ));
A4: (for m holds (X[ m ] implies X[ ( m + 1 ) ]))
proof
let m;
assume that
A5: X[ m ];
A6: ( Comput (P2,s,( m + 1 )) ) = ( Following (P2,( Comput (P2,s,m) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P2,( Comput (P2,s,m) )) ),( Comput (P2,s,m) )) );
A7: ( Comput (P1,s,( m + 1 )) ) = ( Following (P1,( Comput (P1,s,m) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P1,( Comput (P1,s,m) )) ),( Comput (P1,s,m) )) );
assume A8: ( m + 1 ) <= n;
then m < n by NAT_1:13;
then A9: ( IC ( Comput (P1,s,m) ) ) = ( IC ( Comput (P2,s,m) ) ) by A5;
m < n by A8,NAT_1:13;
then A10: ( IC ( Comput (P2,s,m) ) ) in ( dom I ) by A3;
( dom P2 ) = ( NAT ) by PARTFUN1:def 2;
then A11: ( IC ( Comput (P2,s,m) ) ) in ( dom P2 );
( dom P1 ) = ( NAT ) by PARTFUN1:def 2;
then ( IC ( Comput (P1,s,m) ) ) in ( dom P1 );
then ( CurInstr (P1,( Comput (P1,s,m) )) ) = ( P1 . ( IC ( Comput (P1,s,m) ) ) ) by PARTFUN1:def 6
.= ( I . ( IC ( Comput (P1,s,m) ) ) ) by A10,A9,A1,GRFUNC_1:2
.= ( P2 . ( IC ( Comput (P2,s,m) ) ) ) by A10,A9,A1,GRFUNC_1:2
.= ( CurInstr (P2,( Comput (P2,s,m) )) ) by A11,PARTFUN1:def 6;
hence thesis by A5,A7,A6,A8,NAT_1:13;
end;
( Comput (P1,s,( 0 )) ) = s by EXTPRO_1:2;
then A12: X[ ( 0 ) ] by EXTPRO_1:2;
thus (for m holds X[ m ]) from NAT_1:sch 1(A12,A4);
end;
