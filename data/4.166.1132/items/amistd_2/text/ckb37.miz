environ
vocabularies NUMBERS,ORDINAL1,SETFAM_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,AMI_1,XBOOLE_0,RELAT_1,TARSKI,FUNCOP_1,GLIB_000,GOBOARD5,AMISTD_1,UNIALG_1,FUNCT_1,CARD_3,CARD_5,FRECHET,RCOMP_1,STRUCT_0,VALUED_1,FSM_1,FUNCT_4,FUNCT_7,TURING_1,CIRCUIT2,AMISTD_2,PARTFUN1,CAT_1,SCMNORM,NAT_1,RELOC,PBOOLE,XXREAL_0,COMPOS_1,MSUALG_1,FINSET_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,FINSET_1,MCART_1,SETFAM_1,MEMBERED,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,PBOOLE,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CARD_3,FINSEQ_1,FUNCOP_1,NAT_D,FUNCT_7,VALUED_0,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,CKB2,CKB3,CKB27,CKB28;
definitions RELAT_1,FUNCT_1,WELLORD2,FUNCT_7,COMPOS_1,EXTPRO_1,AMISTD_1,XBOOLE_0,FUNCOP_1,CARD_3,NAT_1,AFINSQ_1,MCART_1,VALUED_1,TARSKI,STRUCT_0,MEMSTR_0,CKB2,CKB3,CKB27,CKB28;
theorems AMISTD_1,FUNCOP_1,FUNCT_1,FUNCT_4,GRFUNC_1,MCART_1,RELAT_1,SETFAM_1,TARSKI,ZFMISC_1,CARD_3,XBOOLE_0,XBOOLE_1,FUNCT_7,PBOOLE,PARTFUN1,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,ORDINAL1,NAT_D,NAT_1,XXREAL_0,MEMSTR_0,CKB1,CKB2,CKB3,CKB5,CKB7,CKB8,CKB9,CKB19,CKB21,CKB26,CKB27,CKB28,CKB36;
schemes NAT_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,CARD_3,REALSET1,FUNCT_7,STRUCT_0,AMISTD_1,CARD_1,FUNCT_4,XXREAL_2,RELSET_1,GRFUNC_1,FUNCT_2,ORDINAL1,AFINSQ_1,VALUED_1,VALUED_0,COMPOS_1,EXTPRO_1,XCMPLX_0,REAL_1,PBOOLE,MEMSTR_0,CKB4,CKB6,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB25,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
constructors WELLORD2,REALSET1,NAT_D,AMISTD_1,XXREAL_2,PRE_POLY,AFINSQ_1,ORDINAL4,RECDEF_2,VALUED_1,NAT_1,FUNCT_7,PBOOLE,FUNCT_4,MEMSTR_0,RELSET_1,CKB2,CKB3,CKB27,CKB28;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
registration
let N being  with_non-empty_elements non empty set;
let S being  IC-relocable  homogeneous  regular  J/A-independent  standard  with_explicit_jumps  halting  standard-ins  IC-Ins-separated non empty AMI-Struct over N;
let F being  really-closed  initial non empty ( NAT ) -defined (the Instructions of S) -valued  finite Function;
let G being  really-closed  initial non empty ( NAT ) -defined (the Instructions of S) -valued  finite Function;
cluster ( F ';' G ) ->  really-closed;
coherence
proof
set P = ( F ';' G );
set k = ( ( card F ) -' 1 );
let f being (Element of ( NAT ));
assume that
A1: f in ( dom P );
A2: ( dom P ) = ( ( dom ( CutLastLoc F ) ) \/ ( dom ( Shift (( IncAddr (G,k) ),k) ) ) ) by FUNCT_4:def 1;
A3: ( dom ( CutLastLoc F ) ) c= ( dom F ) by GRFUNC_1:2;
A4: ( dom ( Shift (( IncAddr (G,k) ),k) ) ) = { ( m + k ) where m is (Element of ( NAT )): m in ( dom ( IncAddr (G,k) ) ) } by VALUED_1:def 12;
let x being set;
assume x in ( NIC (( P /. f ),f) );
then consider s2 being (Element of ( product (the Object-Kind of S) )) such that A5: x = ( IC ( Exec (( P /. f ),s2) ) ) and A6: ( IC s2 ) = f;
A7: ( P /. f ) = ( P . f ) by A1,PARTFUN1:def 6;
per cases  by A1,A2,XBOOLE_0:def 3;
suppose A8: f in ( dom ( CutLastLoc F ) );

then A9: ( NIC (( F /. f ),f) ) c= ( dom F ) by A3,AMISTD_1:def 9;
( dom ( CutLastLoc F ) ) = ( ( dom F ) \ { ( LastLoc F ) } ) by VALUED_1:36;
then A10: f in ( dom F ) by A8,XBOOLE_0:def 5;
( dom ( CutLastLoc F ) ) misses ( dom ( Shift (( IncAddr (G,( ( card F ) -' 1 )) ),( ( card F ) -' 1 )) ) ) by COMPOS_1:18;
then A11: (not f in ( dom ( Shift (( IncAddr (G,( ( card F ) -' 1 )) ),( ( card F ) -' 1 )) ) )) by A8,XBOOLE_0:3;
A12: ( P /. f ) = ( P . f ) by A1,PARTFUN1:def 6
.= ( ( CutLastLoc F ) . f ) by A11,FUNCT_4:11
.= ( F . f ) by A8,GRFUNC_1:2
.= ( F /. f ) by A10,PARTFUN1:def 6;
( IC ( Exec (( F /. f ),s2) ) ) in ( NIC (( F /. f ),f) ) by A6;
then A13: x in ( dom F ) by A5,A9,A12;
( dom F ) c= ( dom P ) by COMPOS_1:21;
hence thesis by A13;
end;
suppose A14: f in ( dom ( Shift (( IncAddr (G,k) ),k) ) );

then consider m being (Element of ( NAT )) such that A15: f = ( m + k ) and A16: m in ( dom ( IncAddr (G,k) ) ) by A4;
A17: m in ( dom G ) by A16,COMPOS_1:def 19;
then A18: ( NIC (( G /. m ),m) ) c= ( dom G ) by AMISTD_1:def 9;
A19: ( ObjectKind ( IC S ) ) = ( NAT ) by MEMSTR_0:def 3;
reconsider v = ( ( IC S ) .--> m ) as (FinPartState of S) by A19;
set s1 = ( s2 +* v );
A20: ( P /. f ) = ( ( Shift (( IncAddr (G,k) ),k) ) . f ) by A7,A14,FUNCT_4:13
.= ( ( IncAddr (G,k) ) . m ) by A15,A16,VALUED_1:def 12;
A21: ( ( ( IC S ) .--> m ) . ( IC S ) ) = m by FUNCOP_1:72;
A22: ( IC S ) in { ( IC S ) } by TARSKI:def 1;
A23: ( dom ( ( IC S ) .--> m ) ) = { ( IC S ) } by FUNCOP_1:13;
reconsider w = ( ( IC S ) .--> ( ( IC s1 ) + k ) ) as (FinPartState of S) by A19;
A24: ( dom ( s1 +* ( ( IC S ) .--> ( ( IC s1 ) + k ) ) ) ) = (the carrier of S) by PARTFUN1:def 2;
A25: ( dom s2 ) = (the carrier of S) by PARTFUN1:def 2;
(for a being set holds (a in ( dom s2 ) implies ( s2 . a ) = ( ( s1 +* ( ( IC S ) .--> ( ( IC s1 ) + k ) ) ) . a )))
proof
let a being set;
assume that
a in ( dom s2 );
A26: ( dom ( ( IC S ) .--> ( ( IC s1 ) + k ) ) ) = { ( IC S ) } by FUNCOP_1:13;
per cases ;
suppose A27: a = ( IC S );

hence ( s2 . a ) = ( ( IC s1 ) + k ) by A6,A15,A23,A21,A22,FUNCT_4:13
.= ( ( ( IC S ) .--> ( ( IC s1 ) + k ) ) . a ) by A27,FUNCOP_1:72
.= ( ( s1 +* ( ( IC S ) .--> ( ( IC s1 ) + k ) ) ) . a ) by A22,A26,A27,FUNCT_4:13;
end;
suppose A28: a <> ( IC S );

then A29: (not a in ( dom ( ( IC S ) .--> ( ( IC s1 ) + k ) ) )) by A26,TARSKI:def 1;
(not a in ( dom ( ( IC S ) .--> m ) )) by A23,A28,TARSKI:def 1;
then ( s1 . a ) = ( s2 . a ) by FUNCT_4:11;
hence thesis by A29,FUNCT_4:11;
end;
end;
then A30: s2 = ( IncIC (s1,k) ) by A24,A25,FUNCT_1:2;
set s3 = s1;
A32: ( IC s3 ) = ( s1 . ( IC S ) )
.= m by A21,A22,A23,FUNCT_4:13;
reconsider s3 as (Element of ( product (the Object-Kind of S) )) by CARD_3:107;
reconsider k,m as (Element of ( NAT ));
A37: x = ( IC ( Exec (( IncAddr (( G /. m ),k) ),s2) ) ) by A5,A17,A20,COMPOS_1:def 19
.= ( ( IC ( Exec (( G /. m ),s1) ) ) + k ) by A30,CKB36:1
.= ( ( IC ( Exec (( G /. m ),s3) ) ) + k );
( IC ( Exec (( G /. m ),s3) ) ) in ( NIC (( G /. m ),m) ) by A32;
then ( IC ( Exec (( G /. m ),s3) ) ) in ( dom G ) by A18;
then ( IC ( Exec (( G /. m ),s3) ) ) in ( dom ( IncAddr (G,k) ) ) by COMPOS_1:def 19;
then x in ( dom ( Shift (( IncAddr (G,k) ),k) ) ) by A4,A37;
hence thesis by A2,XBOOLE_0:def 3;
end;
end;
end;
