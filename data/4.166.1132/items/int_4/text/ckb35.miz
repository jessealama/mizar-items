environ
vocabularies NUMBERS,INT_1,NAT_1,SUBSET_1,MEMBERED,XREAL_0,ORDINAL1,MEMBER_1,TARSKI,REAL_1,ARYTM_3,FUNCT_1,RELAT_1,FINSET_1,CARD_1,XBOOLE_0,ARYTM_1,INT_2,XXREAL_0,COMPLEX1,NEWTON,SQUARE_1,PARTFUN1,EQREL_1,RELAT_2,EULER_1,FINSEQ_1,FINSEQ_3,ORDINAL4,CARD_3,XCMPLX_0,PRE_POLY,NAT_3,UPROOTS,INT_4;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,MEMBERED,ORDINAL1,XXREAL_0,XCMPLX_0,XREAL_0,INT_1,NAT_1,REAL_1,INT_2,NAT_D,NEWTON,SQUARE_1,RELAT_1,FUNCT_1,FINSEQ_1,RELSET_1,RVSUM_1,EULER_1,EQREL_1,RELAT_2,PARTFUN1,FINSET_1,POLYNOM2,NAT_3,UPROOTS,TREES_4,WSIERP_1,MEASURE6,INTEGRA2,RECDEF_1;
definitions FUNCT_1,INT_1,FINSEQ_1,XCMPLX_0,EULER_1,SQUARE_1,RELAT_2,PARTFUN1,CARD_1,TARSKI,XBOOLE_0,WELLORD2;
theorems RELAT_1,FINSEQ_3,FINSEQ_2,ABSVALUE,FINSEQ_5,EULER_2,INT_3,CARD_2,SEQ_2,RELAT_2,RELSET_1,EQREL_1,CARD_FIN,ORDERS_1,FINSEQ_4,AXIOMS,MOEBIUS1,XBOOLE_0,NAT_3,NEWTON,INT_2,WSIERP_1,CARD_1,PEPIN,NAT_1,XCMPLX_1,XREAL_1,ORDINAL1,EULER_1,FINSEQ_1,XBOOLE_1,TARSKI,ZFMISC_1,RVSUM_1,INT_1,FUNCT_1,RADIX_1,XXREAL_0,NAT_D,XREAL_0,INTEGRA2,VALUED_0,FUNCT_2,MEMBER_1,MEMBERED,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34;
schemes NAT_1,FINSEQ_1,FINSEQ_2,RELSET_1,GRAPH_5;
registrations RELAT_1,FINSEQ_1,CARD_1,PARTFUN1,NAT_1,INT_1,MEMBERED,FINSET_1,SEQM_3,NEWTON,NAT_3,XXREAL_0,NUMBERS,XBOOLE_0,XREAL_0,ORDINAL1,FUNCT_1,VALUED_0,UPROOTS,FUNCT_2,RELSET_1,CKB2,CKB9,CKB28;
constructors EULER_1,REAL_1,EQREL_1,WELLORD2,BINARITH,WSIERP_1,PEPIN,POLYNOM2,UPROOTS,NAT_3,NAT_D,MEASURE6,INTEGRA2,SEQ_1,RECDEF_1,RELSET_1,PBOOLE;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve x for Integer;
reserve k for Nat;
reserve p for Nat;
reserve q for Nat;
reserve n for Nat;
theorem
(((n > ( 0 ) & p is  prime) & p,q are_relative_prime ) implies (not (ex x being Integer st ( ( ( p * x ) - q ) mod ( p |^ n ) ) = ( 0 ))))
proof
assume that
A1: n > ( 0 )
and
A2: p is  prime
and
A3: p,q are_relative_prime ;
A4: p > 1 by A2,INT_2:def 4;
given x being Integer such that
A5: ( ( ( p * x ) - q ) mod ( p |^ n ) ) = ( 0 );

per cases ;
suppose x >= ( 0 );

then x in ( NAT ) by INT_1:3;
then reconsider x as Nat;
( ( p * x ) mod ( p |^ n ) ) = ( q mod ( p |^ n ) ) by A2,A5,CKB32:1;
then ( p * ( x mod ( p |^ ( n -' 1 ) ) ) ) = ( q mod ( p |^ n ) ) by A1,A2,CKB29:1;
then p divides ( q mod ( p |^ n ) ) by NAT_D:def 3;
hence contradiction by A1,A2,A3,CKB31:1;
end;
suppose x < ( 0 );

then ( - x ) in ( NAT ) by INT_1:3;
then reconsider l = ( - x ) as Nat;
A6: p divides ( p * l ) by NAT_D:9;
( p |^ n ) divides ( ( p * x ) - q ) by A2,A5,INT_1:62;
then ( p |^ n ) divides ( ( - 1 ) * ( ( p * x ) - q ) ) by INT_2:2;
then consider k being Integer such that A7: ( ( p * l ) + q ) = ( ( p |^ n ) * k ) by INT_1:def 3;
k >= ( 0 ) by A2,A7,XREAL_1:132;
then k in ( NAT ) by INT_1:3;
then reconsider k as Nat;
( ( p * l ) + q ) = ( ( p |^ n ) * k ) by A7;
then A8: ( p |^ n ) divides ( ( p * l ) + q ) by NAT_D:def 3;
p divides ( p |^ n ) by A1,NAT_3:3;
then A9: p divides ( ( p * l ) + q ) by A8,NAT_D:4;
reconsider p,q as (Element of ( NAT )) by ORDINAL1:def 12;
( p gcd q ) > 1 by A4,A9,A6,NAT_D:10,NEWTON:49;
hence contradiction by A3,INT_2:def 3;
end;
end;
