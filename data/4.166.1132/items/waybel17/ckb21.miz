environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_1,NUMBERS,RELAT_1,TARSKI,WAYBEL_9,STRUCT_0,WAYBEL_0,RELAT_2,ORDERS_2,SEQM_3,XXREAL_0,WAYBEL11,YELLOW_0,LATTICE3,ORDINAL2,PRE_TOPC,RCOMP_1,FUNCOP_1,WAYBEL_3,REWRITE1,NEWTON,CARD_3,CAT_1,YELLOW_1,FUNCT_2,ARYTM_3,LATTICES,WELLORD1,YELLOW_2,EQREL_1,CARD_FIL,RLVECT_3,ZFMISC_1,SETFAM_1,YELLOW_8,TOPS_1,WAYBEL_8,WAYBEL17;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,SETFAM_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,DOMAIN_1,STRUCT_0,PRE_TOPC,TOPS_1,TOPS_2,TOLER_1,ORDERS_2,LATTICE3,YELLOW_0,ORDERS_3,WAYBEL_0,YELLOW_1,YELLOW_2,NATTRA_1,WAYBEL_3,FUNCOP_1,WAYBEL_8,WAYBEL_9,WAYBEL11,WAYBEL_2,CANTOR_1,YELLOW_8,XXREAL_0,CKB1,CKB16,CKB18;
definitions TARSKI,XBOOLE_0,WAYBEL_0,PRE_TOPC,RELAT_1,LATTICE3,YELLOW_0,WAYBEL_1,WAYBEL_3,WAYBEL11,YELLOW_8,WELLORD1,SUBSET_1,STRUCT_0,TOPS_2,CKB1,CKB16,CKB18;
theorems WAYBEL11,WAYBEL_0,PRE_TOPC,TOPS_1,TARSKI,FUNCT_1,FUNCT_2,TOPS_2,YELLOW_0,YELLOW_2,WAYBEL_3,WAYBEL_1,RELAT_1,WAYBEL_4,ZFMISC_1,WAYBEL_2,WAYBEL_8,LATTICE3,NAT_1,ORDERS_2,SCHEME1,WAYBEL_9,FUNCT_3,WAYBEL13,YELLOW_8,YELLOW_1,FUNCOP_1,WAYBEL10,RELSET_1,SETFAM_1,XBOOLE_0,XBOOLE_1,XXREAL_0,EQREL_1,CKB1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB13,CKB16,CKB18,CKB20;
schemes PARTFUN1,RELSET_1,FRAENKEL,XBOOLE_0,CKB2,CKB3;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCT_2,FUNCOP_1,MEMBERED,ABIAN,STRUCT_0,TOPS_1,LATTICE3,WAYBEL_0,YELLOW_1,WAYBEL_2,WAYBEL_3,WAYBEL_9,WAYBEL10,WAYBEL11,PRE_TOPC,RELSET_1,CKB10,CKB12,CKB14,CKB15,CKB17,CKB19;
constructors SETFAM_1,DOMAIN_1,XXREAL_0,NAT_1,NAT_D,TOLER_1,ABIAN,TOPS_1,NATTRA_1,LATTICE3,CANTOR_1,ORDERS_3,WAYBEL_1,WAYBEL_3,WAYBEL_5,WAYBEL_8,YELLOW_8,WAYBEL11,MEMBERED,RELSET_1,TOPS_2,WAYBEL_2,CKB1,CKB16,CKB18;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
theorem
Th6: (for S being non empty RelStr holds (for a,b being (Element of S) holds (for i,j being (Element of ( Net-Str (a,b) )) holds (for i9,j9 being (Element of ( NAT )) holds (((i9 = i & j9 = ( i9 + 1 )) & j9 = j) implies ((( ( Net-Str (a,b) ) . i ) = a implies ( ( Net-Str (a,b) ) . j ) = b) & (( ( Net-Str (a,b) ) . i ) = b implies ( ( Net-Str (a,b) ) . j ) = a)))))))
proof
let S being non empty RelStr;
let a being (Element of S),b being (Element of S);
let i being (Element of ( Net-Str (a,b) )),j being (Element of ( Net-Str (a,b) ));
let i9 being (Element of ( NAT )),j9 being (Element of ( NAT ));
assume that
A1: i9 = i
and
A2: j9 = ( i9 + 1 )
and
A3: j9 = j;
per cases ;
suppose A4: a <> b;

defpred C[ (Element of ( NAT )) ]
 means
(ex k being (Element of ( NAT )) st $1 = ( 2 * k ));
thus (( ( Net-Str (a,b) ) . i ) = a implies ( ( Net-Str (a,b) ) . j ) = b)
proof
assume A5: ( ( Net-Str (a,b) ) . i ) = a;
C[ i9 ]
proof
assume A6: (not C[ i9 ]);
( ( Net-Str (a,b) ) . i ) = ( ( (a,b) ,... ) . i ) by CKB18:def 1
.= b by A1,A6,CKB1:def 1;
hence thesis by A4,A5;
end;
then A7: (for k being (Element of ( NAT )) holds j9 <> ( 2 * k )) by A2;
( ( Net-Str (a,b) ) . j ) = ( ( (a,b) ,... ) . j ) by CKB18:def 1
.= b by A3,A7,CKB1:def 1;
hence thesis;
end;

assume A8: ( ( Net-Str (a,b) ) . i ) = b;
A9: (not C[ i9 ])
proof
assume A10: C[ i9 ];
( ( Net-Str (a,b) ) . i ) = ( ( (a,b) ,... ) . i ) by CKB18:def 1
.= a by A1,A10,CKB1:def 1;
hence thesis by A4,A8;
end;
A11: C[ j9 ]
proof
assume (not C[ j9 ]);
then (ex kl being (Element of ( NAT )) st j9 = ( ( 2 * kl ) + 1 )) by SCHEME1:1;
hence thesis by A2,A9;
end;
( ( Net-Str (a,b) ) . j ) = ( ( (a,b) ,... ) . j ) by CKB18:def 1
.= a by A3,A11,CKB1:def 1;
hence thesis;
end;
suppose a = b;

hence thesis by CKB20:1;
end;
end;
