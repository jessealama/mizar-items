environ
vocabularies NUMBERS,CARD_1,FUNCT_1,RELAT_1,XBOOLE_0,ARYTM_3,NEWTON,TARSKI,FINSET_1,MCART_1,CARD_3,FINSEQ_1,SUBSET_1,ARYTM_1,XXREAL_0,FUNCT_2,PARTFUN1,INT_2,NAT_1,BINOP_1,BINOP_2,REALSET1,ZFMISC_1,INT_3,SUPINF_2,ALGSTR_0,GROUP_1,MESFUNC1,INT_1,VECTSP_1,STRUCT_0,GROUP_2,GRAPH_1,FINSEQ_2,EC_PF_1,RLVECT_1,LATTICES,EQREL_1,RELAT_2,UNIROOTS,PROB_2,REAL_1,MOD_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELAT_2,RELSET_1,PARTFUN1,MCART_1,FUNCT_2,BINOP_1,DOMAIN_1,FINSET_1,CARD_1,CARD_3,NUMBERS,XCMPLX_0,XXREAL_0,REAL_1,NAT_1,INT_1,NAT_D,REALSET1,FINSEQ_1,FINSEQ_2,EQREL_1,RVSUM_1,NEWTON,WSIERP_1,MOD_2,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_1,GROUP_2,GR_CY_1,INT_3,UNIROOTS,PROB_2,BINOM,CKB1,CKB13,CKB16,CKB17;
definitions STRUCT_0,GROUP_1,INT_3,CARD_1,ALGSTR_0,BINOP_1,FINSEQ_1,REALSET1,TARSKI,FINSEQ_2,VECTSP_1,RLVECT_1,EQREL_1,BINOM,CARD_3,CKB1,CKB16;
theorems TARSKI,XBOOLE_0,ZFMISC_1,ORDINAL1,FUNCT_1,FUNCT_2,VECTSP_1,INT_1,RELAT_1,RLVECT_1,GR_CY_1,FUNCT_7,NAT_1,INT_2,INT_3,PEPIN,NAT_D,NUMBERS,CARD_1,GROUP_1,GROUP_2,STRUCT_0,XREAL_1,NEWTON,XXREAL_0,ALGSEQ_1,NAT_3,RVSUM_1,CARD_2,EULER_1,XBOOLE_1,FINSEQ_1,RELSET_1,FUNCOP_1,PARTFUN1,FINSEQ_2,BINOP_1,ALGSTR_0,MCART_1,EQREL_1,UNIROOTS,RELAT_2,GR_CY_3,DIST_1,PROB_2,BINOM,MOD_2,CKB1,CKB2,CKB3,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB15,CKB16,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38;
schemes NAT_1,FUNCT_2,INT_1,FINSEQ_1;
registrations XBOOLE_0,STRUCT_0,XREAL_0,ORDINAL1,NAT_1,INT_1,GROUP_2,FINSET_1,GR_CY_1,ALGSTR_0,VECTSP_1,INT_3,XXREAL_0,NEWTON,SUBSET_1,CARD_1,VALUED_0,EQREL_1,RELSET_1,FINSEQ_2,UNIROOTS,NUMBERS,ALGSTR_1,MOD_2,MEMBERED,CKB4,CKB12,CKB14,CKB18,CKB19,CKB20;
constructors REAL_1,NAT_D,NAT_3,SEQ_1,REALSET1,GROUP_2,BINOP_1,GR_CY_1,INT_3,WSIERP_1,UPROOTS,BINOP_2,RELSET_1,FUNCT_7,UNIROOTS,PROB_2,GROUP_1,FINSET_1,BINOM,MOD_2,CKB1,CKB13,CKB16;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
EX7: (for F being  Abelian  add-associative  right_zeroed  right_complementable  associative  commutative  well-unital  almost_left_invertible  distributive non empty doubleLoopStr holds (for x,y being (Element of F) holds (( x * x ) = ( y * y ) iff (x = y or x = ( - y )))))
proof
let F being  Abelian  add-associative  right_zeroed  right_complementable  associative  commutative  well-unital  almost_left_invertible  distributive non empty doubleLoopStr;
let x being (Element of F),y being (Element of F);
P1: ( ( x - y ) * ( x + y ) ) = ( ( ( x - y ) * x ) + ( ( x - y ) * y ) ) by VECTSP_1:4
.= ( ( ( x * x ) - ( x * y ) ) + ( ( x - y ) * y ) ) by VECTSP_1:11
.= ( ( ( x * x ) - ( x * y ) ) + ( ( y * x ) - ( y * y ) ) ) by VECTSP_1:11
.= ( ( ( ( x * x ) - ( x * y ) ) + ( y * x ) ) + ( - ( y * y ) ) ) by RLVECT_1:def 3
.= ( ( ( x * x ) + ( ( - ( x * y ) ) + ( y * x ) ) ) + ( - ( y * y ) ) ) by RLVECT_1:def 3
.= ( ( ( x * x ) + ( ( y * x ) - ( x * y ) ) ) + ( - ( y * y ) ) )
.= ( ( ( x * x ) + ( ( x - x ) * y ) ) + ( - ( y * y ) ) ) by VECTSP_1:11
.= ( ( ( x * x ) + ( ( 0. F ) * y ) ) - ( y * y ) ) by RLVECT_1:5
.= ( ( ( x * x ) + ( 0. F ) ) - ( y * y ) ) by VECTSP_1:7
.= ( ( x * x ) - ( y * y ) ) by RLVECT_1:def 4;
hereby
assume A1: ( x * x ) = ( y * y );
( ( x - y ) * ( x + y ) ) = ( 0. F ) by P1,A1,RLVECT_1:5;
then (( x - y ) = ( 0. F ) or ( x + y ) = ( 0. F )) by VECTSP_1:12;
hence (x = y or x = ( - y )) by RLVECT_1:6,RLVECT_1:21;
end;
assume (x = y or x = ( - y ));
then (( x - y ) = ( 0. F ) or ( x + y ) = ( 0. F )) by RLVECT_1:5;
hence ( x * x ) = ( y * y ) by P1,RLVECT_1:21,VECTSP_1:6;
end;
