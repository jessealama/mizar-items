environ
vocabularies NUMBERS,SUBSET_1,SCMPDS_2,INT_1,FSM_1,AMI_1,COMPLEX1,ARYTM_3,FUNCT_1,AMI_2,STRUCT_0,XBOOLE_0,RELAT_1,TARSKI,CARD_1,AMI_3,SCMPDS_1,GRAPHSP,SCMNORM,XXREAL_0,ARYTM_1,FUNCT_4,FUNCOP_1,FUNCT_7,CIRCUIT2,ORDINAL1,PARTFUN1,AMISTD_5,PBOOLE,AMISTD_2,FINSET_1,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,PBOOLE,FUNCT_4,FINSET_1,INT_1,NAT_1,STRUCT_0,FUNCOP_1,INT_2,XXREAL_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMISTD_5,SCMPDS_1,SCMPDS_2,CKB8;
definitions EXTPRO_1,AMI_2,AMI_3,FUNCOP_1,SCMPDS_2,NAT_1,COMPOS_1,AMISTD_5,STRUCT_0,MEMSTR_0;
theorems AMI_3,GRFUNC_1,NAT_1,FUNCOP_1,TARSKI,FUNCT_4,FUNCT_1,ZFMISC_1,INT_1,RELAT_1,ABSVALUE,SCMPDS_2,XBOOLE_0,XBOOLE_1,NUMBERS,PBOOLE,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_5,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,NUMBERS,XREAL_0,INT_1,CARD_3,AMI_3,SCMPDS_2,FINSET_1,RELSET_1,FUNCT_2,COMPOS_1,EXTPRO_1,AMISTD_5,PBOOLE,AMISTD_2,FUNCT_4,FUNCOP_1,MEMSTR_0,CKB9;
constructors DOMAIN_1,XXREAL_0,INT_2,SCMPDS_1,SCMPDS_2,REAL_1,PRE_POLY,AMI_3,AMISTD_5,PBOOLE,AMISTD_1,FUNCT_7,MEMSTR_0,RELSET_1,CKB8;
requirements NUMERALS,SUBSET,BOOLE,ARITHM,REAL;
begin
reserve m for (Element of ( NAT ));
reserve k1 for Integer;
reserve k2 for Integer;
theorem
Th18: (for s1,s2 being (State of ( SCMPDS )) holds (for k1,k2,m being Integer holds (((((( IC s1 ) = ( IC s2 ) & k1 <> k2) & m = ( IC s1 )) & ( m + k1 ) >= ( 0 )) & ( m + k2 ) >= ( 0 )) implies ( ICplusConst (s1,k1) ) <> ( ICplusConst (s2,k2) ))))
proof
let s1 being (State of ( SCMPDS ));
let s2 being (State of ( SCMPDS ));
let k1 being Integer;
let k2 being Integer;
let m being Integer;
assume that
A1: ( IC s1 ) = ( IC s2 )
and
A2: k1 <> k2
and
A3: m = ( IC s1 )
and
A4: ( m + k1 ) >= ( 0 )
and
A5: ( m + k2 ) >= ( 0 );
(ex i being (Element of ( NAT )) st (i = ( IC s1 ) & ( ICplusConst (s1,k1) ) = ( abs ( i + k1 ) ))) by SCMPDS_2:def 18;
then A6: ( ICplusConst (s1,k1) ) = ( m + k1 ) by A3,A4,ABSVALUE:def 1;
assume A7: ( ICplusConst (s1,k1) ) = ( ICplusConst (s2,k2) );
(ex j being (Element of ( NAT )) st (j = ( IC s2 ) & ( ICplusConst (s2,k2) ) = ( abs ( j + k2 ) ))) by SCMPDS_2:def 18;
then ( ICplusConst (s2,k2) ) = ( m + k2 ) by A1,A3,A5,ABSVALUE:def 1;
hence contradiction by A2,A7,A6;
end;
