environ
vocabularies FUNCT_1,XBOOLE_0,ZFMISC_1,SUBSET_1,TARSKI,RELAT_1,PARTFUN1,BINOP_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,CKB1,CKB2,CKB5,CKB6;
definitions FUNCT_1,CKB1;
theorems RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,SUBSET_1,CKB1,CKB3,CKB4;
schemes FUNCT_2,PARTFUN1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1;
constructors FUNCT_2,RELSET_1,CKB1,CKB2;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve Z for set;
reserve x for set;
reserve x1 for set;
reserve x2 for set;
reserve y for set;
reserve y1 for set;
reserve y2 for set;
reserve z for set;
scheme FuncEx2 { X,Y,Z() -> set,P[set,set,set] } : (ex f being (Function of [: X(),Y() :],Z()) st (for x holds (for y holds ((x in X() & y in Y()) implies P[ x,y,( f . (x,y) ) ]))))
provided
A1: (for x holds (for y holds ((x in X() & y in Y()) implies (ex z st (z in Z() & P[ x,y,z ])))))
proof
defpred R[ set,set ]
 means
(for x1 holds (for y1 holds ($1 = [ x1,y1 ] implies P[ x1,y1,$2 ])));
A2: (for x holds (x in [: X(),Y() :] implies (ex z st (z in Z() & R[ x,z ]))))
proof
let x;
assume x in [: X(),Y() :];
then consider x1,y1 such that A3: (x1 in X() & y1 in Y()) and A4: x = [ x1,y1 ] by ZFMISC_1:def 2;
consider z such that A5: z in Z() and A6: P[ x1,y1,z ] by A1,A3;
take z;
thus z in Z() by A5;
let x2;
let y2;
assume A7: x = [ x2,y2 ];
then x1 = x2 by A4,ZFMISC_1:27;
hence thesis by A4,A6,A7,ZFMISC_1:27;
end;
consider f being (Function of [: X(),Y() :],Z()) such that A8: (for x holds (x in [: X(),Y() :] implies R[ x,( f . x ) ])) from FUNCT_2:sch 1(A2);
take f;
let x;
let y;
assume (x in X() & y in Y());
then [ x,y ] in [: X(),Y() :] by ZFMISC_1:def 2;
hence thesis by A8;
end;
