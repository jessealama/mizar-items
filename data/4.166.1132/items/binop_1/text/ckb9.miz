environ
vocabularies FUNCT_1,XBOOLE_0,ZFMISC_1,SUBSET_1,TARSKI,RELAT_1,PARTFUN1,BINOP_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,CKB1,CKB2,CKB5,CKB6;
definitions FUNCT_1,CKB1;
theorems RELAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,SUBSET_1,CKB1,CKB3,CKB4;
schemes FUNCT_2,PARTFUN1,CKB7,CKB8;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1;
constructors FUNCT_2,RELSET_1,CKB1,CKB2;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve Z for set;
reserve x for set;
reserve x1 for set;
reserve y for set;
reserve y1 for set;
reserve z for set;
scheme FuncEx2D { X,Y,Z() -> non  empty set,P[set,set,set] } : (ex f being (Function of [: X(),Y() :],Z()) st (for x being (Element of X()) holds (for y being (Element of Y()) holds P[ x,y,( f . (x,y) ) ])))
provided
A1: (for x being (Element of X()) holds (for y being (Element of Y()) holds (ex z being (Element of Z()) st P[ x,y,z ])))
proof
defpred R[ set,set ]
 means
(for x being (Element of X()) holds (for y being (Element of Y()) holds ($1 = [ x,y ] implies P[ x,y,$2 ])));
A2: (for p being (Element of [: X(),Y() :]) holds (ex z being (Element of Z()) st R[ p,z ]))
proof
let p being (Element of [: X(),Y() :]);
consider x1,y1 such that A3: x1 in X() and A4: y1 in Y() and A5: p = [ x1,y1 ] by ZFMISC_1:def 2;
reconsider y1 as (Element of Y()) by A4;
reconsider x1 as (Element of X()) by A3;
consider z being (Element of Z()) such that A6: P[ x1,y1,z ] by A1;
take z;
let x being (Element of X());
let y being (Element of Y());
assume A7: p = [ x,y ];
then x1 = x by A5,ZFMISC_1:27;
hence thesis by A5,A6,A7,ZFMISC_1:27;
end;
consider f being (Function of [: X(),Y() :],Z()) such that A8: (for p being (Element of [: X(),Y() :]) holds R[ p,( f . p ) ]) from FUNCT_2:sch 3(A2);
take f;
let x being (Element of X());
let y being (Element of Y());
reconsider xy = [ x,y ] as (Element of [: X(),Y() :]) by ZFMISC_1:def 2;
P[ x,y,( f . xy ) ] by A8;
hence thesis;
end;
