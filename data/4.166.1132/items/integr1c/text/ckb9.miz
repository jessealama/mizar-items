environ
vocabularies NUMBERS,SUBSET_1,FDIFF_1,SEQ_1,FUNCT_1,XREAL_0,ORDINAL1,ZFMISC_1,MCART_1,ARYTM_3,RELAT_1,XCMPLX_0,REAL_1,PARTFUN1,INTEGRA1,CFUNCT_1,COMPLEX1,VALUED_1,ARYTM_1,XBOOLE_0,TARSKI,XXREAL_0,XXREAL_1,RCOMP_1,ORDINAL2,SIN_COS,CARD_1,FDIFF_3,FUNCT_2,SEQ_2,TOPMETR,INTEGRA5,VFUNCT_1,XXREAL_2,INTEGR1C,MEASURE5;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,XXREAL_0,COMPLEX1,REAL_1,BINOP_1,RCOMP_1,FUNCT_3,SEQ_1,SEQ_2,FCONT_1,FDIFF_1,COMSEQ_3,TOPMETR,MCART_1,MEASURE5,INTEGRA1,INTEGRA5,SIN_COS,CFUNCT_1,VALUED_1,MESFUN6C,PRE_TOPC,FDIFF_3,STRUCT_0,XXREAL_2,CKB1,CKB2,CKB3,CKB5,CKB8;
definitions INTEGRA5,VALUED_1,CKB1,CKB2,CKB3,CKB8;
theorems ZFMISC_1,XCMPLX_0,TOPMETR,SEQ_4,INTEGRA1,RFUNCT_1,FUNCT_1,SEQ_1,SEQ_2,FDIFF_1,ABSVALUE,COMPLEX1,FUNCT_3,TARSKI,RCOMP_1,FCONT_1,RFUNCT_2,FDIFF_2,RELAT_1,XXREAL_1,FUNCT_2,NUMBERS,XBOOLE_0,XBOOLE_1,XREAL_1,INTEGRA5,SIN_COS,INTEGRA6,CFUNCT_1,VALUED_1,MESFUN6C,TOPS_1,FDIFF_3,RELSET_1,XXREAL_2,MCART_1,BORSUK_5,COMSEQ_3,MEASURE5,CKB1,CKB2,CKB3,CKB6,CKB7,CKB8;
schemes FUNCT_2,FUNCT_7;
registrations XREAL_0,INTEGRA1,FUNCT_2,NUMBERS,ORDINAL1,MEMBERED,SIN_COS,FDIFF_1,SUBSET_1,XCMPLX_0,RELAT_1,XXREAL_0,XBOOLE_0,VALUED_0,VALUED_1,COMSEQ_3,RELSET_1,MEASURE5,CKB4;
constructors REAL_1,FDIFF_1,RFUNCT_3,FCONT_1,BINOP_2,INTEGRA5,RSSPACE,SIN_COS,TOPMETR,FDIFF_3,SEQ_1,MESFUN6C,SEQ_2,RVSUM_1,COMPLEX1,COMSEQ_3,RELSET_1,INTEGRA1,RCOMP_1,CKB1,CKB2,CKB3,CKB8;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
definition
let f being (PartFunc of ( COMPLEX ),( COMPLEX ));
let C being C1-curve;
pred f is_integrable_on C
means
:Def5: (for a,b being Real holds (for x,y being (PartFunc of ( REAL ),( REAL )) holds (for Z being (Subset of ( REAL )) holds (for u0,v0 being (PartFunc of ( REAL ),( REAL )) holds (((((((((((a <= b & [. a,b .] = ( dom C )) & [. a,b .] c= ( dom x )) & [. a,b .] c= ( dom y )) & Z is  open) & [. a,b .] c= Z) & x is_differentiable_on Z) & y is_differentiable_on Z) & ( x `| Z ) is  continuous) & ( y `| Z ) is  continuous) & C = ( ( x + ( ( <i> ) (#) y ) ) | [. a,b .] )) implies (( ( u0 (#) ( x `| Z ) ) - ( v0 (#) ( y `| Z ) ) ) is_integrable_on [' a,b '] & ( ( v0 (#) ( x `| Z ) ) + ( u0 (#) ( y `| Z ) ) ) is_integrable_on [' a,b ']))))))
;end;
