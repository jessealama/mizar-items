environ
vocabularies NUMBERS,SCMFSA7B,FUNCSDOM,SUBSET_1,AMI_3,AMI_1,FSM_1,ORDINAL1,INT_3,FINSET_1,STRUCT_0,AMI_2,TARSKI,ZFMISC_1,RELAT_1,FUNCOP_1,XBOOLE_0,CAT_1,FUNCT_1,CARD_1,GRAPHSP,FINSEQ_1,AMISTD_2,CARD_3,AMISTD_1,CIRCUIT2,FUNCT_4,SETFAM_1,SUPINF_2,ARYTM_3,XXREAL_0,GOBOARD5,ARYTM_1,GROUP_1,PBOOLE,FRECHET,UNIALG_1,CARD_5,PARTFUN1,RECDEF_2,SCMNORM,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,FINSET_1,ENUMSET1,ZFMISC_1,MCART_1,SETFAM_1,RELAT_1,FUNCT_1,XXREAL_0,RECDEF_2,VALUED_1,PBOOLE,STRUCT_0,ALGSTR_0,FUNCSDOM,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,NAT_1,FUNCOP_1,FINSEQ_1,PARTFUN1,FUNCT_4,CARD_3,FUNCT_7,GROUP_1,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,SCMRING1,SCMRING2,INT_3,NAT_D,AMISTD_1,AMISTD_2,FUNCT_2,CKB4,CKB57;
definitions TARSKI,FUNCT_1,FUNCT_7,SCMRING1,SCMRING2,AMISTD_1,AMISTD_2,XBOOLE_0,FUNCOP_1,STRUCT_0,COMPOS_1,EXTPRO_1,AMI_2,CARD_3,NAT_1,MEMSTR_0,MCART_1,ZFMISC_1,CKB57;
theorems TARSKI,NAT_1,SCMRING2,AMI_3,FUNCT_4,FUNCT_1,ZFMISC_1,FUNCOP_1,SCMRING1,SETFAM_1,AMI_2,AMISTD_1,MCART_1,INT_1,INT_3,STRUCT_0,RLVECT_1,VECTSP_1,LMOD_6,FINSEQ_1,AMISTD_2,CARD_3,ORDINAL1,XBOOLE_0,XBOOLE_1,RELAT_1,ENUMSET1,NUMBERS,PARTFUN1,PBOOLE,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,FUNCT_7,MEMSTR_0,CKB3,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB47,CKB48,CKB50,CKB51,CKB52,CKB54,CKB55,CKB57;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,XREAL_0,INT_1,FINSEQ_1,CARD_3,STRUCT_0,VECTSP_1,INT_3,FINSET_1,AMI_3,SCMRING1,SCMRING2,AMISTD_2,NUMBERS,RELSET_1,ZFMISC_1,CARD_2,FUNCT_2,FUNCT_4,ALGSTR_0,ALGSTR_1,GCD_1,VALUED_1,VALUED_0,COMPOS_1,EXTPRO_1,XCMPLX_0,REAL_1,NAT_1,PBOOLE,FUNCT_7,PRE_POLY,MEMSTR_0,CARD_1,CKB1,CKB2,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB49,CKB53,CKB56,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78;
constructors XXREAL_0,NAT_1,FINSEQ_4,VECTSP_2,REALSET2,INT_3,AMI_3,SCMRING2,AMISTD_2,BINOP_2,RELSET_1,RECDEF_2,VALUED_1,GCD_1,NAT_D,XCMPLX_0,REAL_1,AMISTD_1,PBOOLE,FUNCT_7,PRE_POLY,MEMSTR_0,CKB4,CKB57;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve R for  good Ring;
reserve a for (Data-Location of R);
reserve i1 for (Element of ( NAT ));
reserve i2 for (Element of ( NAT ));
reserve I for (Instruction of ( SCM R ));
reserve k for  natural number;
registration
let R;
cluster ( SCM R ) ->  regular;
coherence
proof
let I being (Instruction of ( SCM R ));
set T = ( InsCode I );
A1: ( JumpPart I ) in ( JumpParts T );
per cases  by CKB24:1;
suppose T = ( 0 );

then I = ( halt ( SCM R ) ) by CKB15:1;
hence thesis;
end;
suppose T = 1;

then ( JumpParts T ) = { ( {} ) } by CKB26:1;
then ( JumpPart I ) = ( {} ) by A1,TARSKI:def 1;
hence thesis;
end;
suppose T = 2;

then ( JumpParts T ) = { ( {} ) } by CKB27:1;
then ( JumpPart I ) = ( {} ) by A1,TARSKI:def 1;
hence thesis;
end;
suppose T = 3;

then ( JumpParts T ) = { ( {} ) } by CKB28:1;
then ( JumpPart I ) = ( {} ) by A1,TARSKI:def 1;
hence thesis;
end;
suppose T = 4;

then ( JumpParts T ) = { ( {} ) } by CKB29:1;
then ( JumpPart I ) = ( {} ) by A1,TARSKI:def 1;
hence thesis;
end;
suppose T = 5;

then ( JumpParts T ) = { ( {} ) } by CKB30:1;
then ( JumpPart I ) = ( {} ) by A1,TARSKI:def 1;
hence thesis;
end;
suppose A2: T = 6;

then consider i2 such that A3: I = ( goto (i2,R) ) by CKB21:1;
let k being set;
assume A4: k in ( dom ( JumpPart I ) );
(for f being Function holds (f in ( JumpParts T ) implies k in ( dom f )))
proof
let f being Function;
assume f in ( JumpParts T );
then consider J being (Instruction of ( SCM R )) such that A5: f = ( JumpPart J ) and A6: ( InsCode J ) = T;
thus k in ( dom f ) by A4,A5,A6,COMPOS_1:def 12;
end;
then k in ( dom ( product" ( JumpParts T ) ) ) by CARD_3:def 12;
then k in { 1 } by A2,CKB31:1;
then k = 1 by TARSKI:def 1;
hence ( ( product" ( JumpParts ( InsCode I ) ) ) . k ) = ( NAT ) by A3,CKB33:1;
end;
suppose A7: T = 7;

then consider a,i1 such that A8: I = ( a =0_goto i1 ) by CKB22:1;
let k being set;
assume A9: k in ( dom ( JumpPart I ) );
(for f being Function holds (f in ( JumpParts T ) implies k in ( dom f )))
proof
let f being Function;
assume f in ( JumpParts T );
then consider J being (Instruction of ( SCM R )) such that A10: f = ( JumpPart J ) and A11: ( InsCode J ) = T;
thus k in ( dom f ) by A9,A10,A11,COMPOS_1:def 12;
end;
then k in ( dom ( product" ( JumpParts T ) ) ) by CARD_3:def 12;
then k in { 1 } by A7,CKB32:1;
then k = 1 by TARSKI:def 1;
hence ( ( product" ( JumpParts ( InsCode I ) ) ) . k ) = ( NAT ) by A8,CKB34:1;
end;
end;
end;
