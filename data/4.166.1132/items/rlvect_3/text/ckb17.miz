environ
vocabularies REAL_1,SUBSET_1,NUMBERS,RLVECT_1,RLSUB_1,FINSET_1,RLVECT_2,FINSEQ_1,STRUCT_0,FUNCT_1,XBOOLE_0,ORDERS_1,VALUED_1,ORDINAL4,ARYTM_3,RELAT_1,PARTFUN1,NAT_1,CARD_3,CARD_1,SUPINF_2,FINSEQ_4,TARSKI,FUNCT_2,ARYTM_1,ZFMISC_1,ORDINAL1,RLVECT_3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,FINSEQ_1,RELAT_1,ORDINAL1,FUNCT_1,PARTFUN1,FUNCT_2,ORDERS_1,DOMAIN_1,STRUCT_0,RLVECT_1,FINSEQ_4,FINSET_1,REAL_1,RLSUB_1,RLSUB_2,RLVECT_2,NAT_1,CKB6,CKB7;
definitions XBOOLE_0,RLSUB_1,RLVECT_2,TARSKI,CKB6;
theorems CARD_2,FUNCT_1,FUNCT_2,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FINSET_1,RLSUB_1,RLSUB_2,RLVECT_1,RLVECT_2,TARSKI,ZFMISC_1,RELAT_1,RELSET_1,ORDINAL1,XBOOLE_0,XBOOLE_1,XCMPLX_0,ORDERS_1,STRUCT_0,PARTFUN1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes FINSEQ_1,FUNCT_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,FINSET_1,NUMBERS,STRUCT_0,RLVECT_1,RLSUB_1,ORDINAL1,REAL_1,XREAL_0,RLVECT_2,CKB11;
constructors PARTFUN1,REAL_1,NAT_1,ORDERS_1,FINSEQ_4,REALSET1,RLSUB_2,RLVECT_2,RELSET_1,CKB6;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve a for Real;
reserve b for Real;
reserve V for RealLinearSpace;
reserve v1 for (VECTOR of V);
reserve v2 for (VECTOR of V);
theorem
((v1 <> v2 & { v1,v2 } is  linearly-independent) iff (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0 ) & b = ( 0 ))))))
proof
thus ((v1 <> v2 & { v1,v2 } is  linearly-independent) implies (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0 ) & b = ( 0 ))))))
proof
assume A1: (v1 <> v2 & { v1,v2 } is  linearly-independent);
let a;
let b;
assume that
A2: ( ( a * v1 ) + ( b * v2 ) ) = ( 0. V )
and
A3: (a <> ( 0 ) or b <> ( 0 ));
now
per cases  by A3;
suppose A4: a <> ( 0 );

( 0. V ) = ( ( a " ) * ( ( a * v1 ) + ( b * v2 ) ) ) by A2,RLVECT_1:10
.= ( ( ( a " ) * ( a * v1 ) ) + ( ( a " ) * ( b * v2 ) ) ) by RLVECT_1:def 5
.= ( ( ( ( a " ) * a ) * v1 ) + ( ( a " ) * ( b * v2 ) ) ) by RLVECT_1:def 7
.= ( ( ( ( a " ) * a ) * v1 ) + ( ( ( a " ) * b ) * v2 ) ) by RLVECT_1:def 7
.= ( ( 1 * v1 ) + ( ( ( a " ) * b ) * v2 ) ) by A4,XCMPLX_0:def 7
.= ( v1 + ( ( ( a " ) * b ) * v2 ) ) by RLVECT_1:def 8;
then v1 = ( - ( ( ( a " ) * b ) * v2 ) ) by RLVECT_1:6
.= ( ( - 1 ) * ( ( ( a " ) * b ) * v2 ) ) by RLVECT_1:16
.= ( ( ( - 1 ) * ( ( a " ) * b ) ) * v2 ) by RLVECT_1:def 7;
hence thesis by A1,CKB16:1;
end;
suppose A5: b <> ( 0 );

( 0. V ) = ( ( b " ) * ( ( a * v1 ) + ( b * v2 ) ) ) by A2,RLVECT_1:10
.= ( ( ( b " ) * ( a * v1 ) ) + ( ( b " ) * ( b * v2 ) ) ) by RLVECT_1:def 5
.= ( ( ( ( b " ) * a ) * v1 ) + ( ( b " ) * ( b * v2 ) ) ) by RLVECT_1:def 7
.= ( ( ( ( b " ) * a ) * v1 ) + ( ( ( b " ) * b ) * v2 ) ) by RLVECT_1:def 7
.= ( ( ( ( b " ) * a ) * v1 ) + ( 1 * v2 ) ) by A5,XCMPLX_0:def 7
.= ( ( ( ( b " ) * a ) * v1 ) + v2 ) by RLVECT_1:def 8;
then v2 = ( - ( ( ( b " ) * a ) * v1 ) ) by RLVECT_1:def 10
.= ( ( - 1 ) * ( ( ( b " ) * a ) * v1 ) ) by RLVECT_1:16
.= ( ( ( - 1 ) * ( ( b " ) * a ) ) * v1 ) by RLVECT_1:def 7;
hence thesis by A1,CKB16:1;
end;
end;
hence thesis;
end;

assume A6: (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0 ) & b = ( 0 )))));
A7:now
let a;
assume v1 = ( a * v2 );
then v1 = ( ( 0. V ) + ( a * v2 ) ) by RLVECT_1:4;
then ( 0. V ) = ( v1 - ( a * v2 ) ) by RLSUB_2:61
.= ( v1 + ( - ( a * v2 ) ) ) by RLVECT_1:def 11
.= ( v1 + ( a * ( - v2 ) ) ) by RLVECT_1:25
.= ( v1 + ( ( - a ) * v2 ) ) by RLVECT_1:24
.= ( ( 1 * v1 ) + ( ( - a ) * v2 ) ) by RLVECT_1:def 8;
hence contradiction by A6;
end;
now
assume A8: v2 = ( 0. V );
( 0. V ) = ( ( 0. V ) + ( 0. V ) ) by RLVECT_1:4
.= ( ( ( 0 ) * v1 ) + ( 0. V ) ) by RLVECT_1:10
.= ( ( ( 0 ) * v1 ) + ( 1 * v2 ) ) by A8,RLVECT_1:10;
hence contradiction by A6;
end;
hence thesis by A7,CKB16:1;
end;
