environ
vocabularies NUMBERS,SUBSET_1,STRUCT_0,AMI_1,AMI_2,FUNCT_7,XBOOLE_0,RELAT_1,TARSKI,ZFMISC_1,CAT_1,FSM_1,FUNCT_1,INT_1,NAT_1,GRAPHSP,FINSEQ_1,CARD_1,ORDINAL1,ARYTM_3,ARYTM_1,FUNCOP_1,XXREAL_0,GLIB_000,FUNCT_4,AMI_3,RECDEF_2,COMPOS_1,AMISTD_2,SCMNORM;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,ORDINAL1,XCMPLX_0,FUNCT_1,XXREAL_0,INT_1,NAT_1,ZFMISC_1,MCART_1,FUNCOP_1,CARD_1,CARD_3,RELAT_1,FUNCT_4,FUNCT_7,FINSEQ_1,RECDEF_2,NUMBERS,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,CKB1,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
definitions RELAT_1,COMPOS_1,EXTPRO_1,FUNCOP_1,AMI_2,CARD_1,NAT_1,STRUCT_0,MEMSTR_0,CKB1,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
theorems TARSKI,ZFMISC_1,ENUMSET1,AMI_2,FUNCOP_1,FUNCT_4,CARD_3,FUNCT_2,MCART_1,INT_1,STRUCT_0,ORDINAL1,XBOOLE_0,XBOOLE_1,FUNCT_7,ARYTM_3,XXREAL_0,NAT_1,RELAT_1,FINSEQ_1,FUNCT_1,PARTFUN1,PBOOLE,RECDEF_2,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB1,CKB3,CKB4,CKB5,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26;
registrations XBOOLE_0,SETFAM_1,ORDINAL1,FUNCOP_1,NUMBERS,XREAL_0,INT_1,CARD_3,AMI_2,XXREAL_0,FUNCT_1,FINSEQ_1,FUNCT_2,RELSET_1,COMPOS_1,EXTPRO_1,FUNCT_4,MEMSTR_0,CKB2,CKB6;
constructors DOMAIN_1,XXREAL_0,FINSEQ_4,CAT_2,AMI_2,RELSET_1,PRE_POLY,RECDEF_2,EXTPRO_1,FUNCT_7,MEMSTR_0,CKB1,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve I for (Instruction of ( SCM ));
reserve s for (State of ( SCM ));
theorem
Lm4: (for I being (Instruction of ( SCM )) holds (I = [ ( 0 ),( {} ),( {} ) ] implies I is  halting))
proof
let I being (Instruction of ( SCM ));
assume A1: I = [ ( 0 ),( {} ),( {} ) ];
then A2: ( I `3_3 ) = ( {} ) by RECDEF_2:def 3;
then A3: ((not (ex mk,ml being (Element of ( SCM-Data-Loc )) st I = [ 1,( {} ),<* mk,ml *> ])) & (not (ex mk,ml being (Element of ( SCM-Data-Loc )) st I = [ 2,( {} ),<* mk,ml *> ]))) by RECDEF_2:def 3;
A4: ((not (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( SCM-Data-Loc )) st I = [ 7,<* mk *>,<* ml *> ]))) & (not (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( SCM-Data-Loc )) st I = [ 8,<* mk *>,<* ml *> ])))) by A2,RECDEF_2:def 3;
( I `2_3 ) = ( {} ) by A1,RECDEF_2:def 2;
then A5: ((not (ex mk,ml being (Element of ( SCM-Data-Loc )) st I = [ 5,( {} ),<* mk,ml *> ])) & (not (ex mk being (Element of ( NAT )) st I = [ 6,<* mk *>,( {} ) ]))) by A2,RECDEF_2:def 2,RECDEF_2:def 3;
reconsider L = I as (Element of ( SCM-Instr ));
let s being (State of ( SCM ));
reconsider t = s as SCM-State by CARD_3:107;
A6: ((not (ex mk,ml being (Element of ( SCM-Data-Loc )) st I = [ 3,( {} ),<* mk,ml *> ])) & (not (ex mk,ml being (Element of ( SCM-Data-Loc )) st I = [ 4,( {} ),<* mk,ml *> ]))) by A2,RECDEF_2:def 3;
thus ( Exec (I,s) ) = ( SCM-Exec-Res (L,t) ) by AMI_2:def 14
.= s by A3,A6,A5,A4,AMI_2:def 13;
end;
