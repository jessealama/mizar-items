environ
vocabularies NUMBERS,NEWTON,NAT_1,ARYTM_3,RELAT_1,INT_2,XXREAL_0,INT_1,ARYTM_1,ABIAN,CARD_1,EULER_1,INT_7,GRAPH_1,FINSET_1,GROUP_1,SUBSET_1,GROUP_4,STRUCT_0,GROUP_2,INT_5,UNIROOTS,INT_3,XBOOLE_0,ALGSTR_0,BINOP_2,REALSET1,FUNCT_7,BINOP_1,VECTSP_2,SUPINF_2,MESFUNC1,POLYNOM1,HURWITZ,POLYNOM2,AFINSQ_1,POLYNOM5,POLYNOM3,TARSKI,FUNCT_1,FINSEQ_1,GR_CY_3;
notations TARSKI,XBOOLE_0,SUBSET_1,FINSET_1,CARD_1,DOMAIN_1,NUMBERS,XCMPLX_0,INT_1,INT_2,NAT_1,NAT_D,XXREAL_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCT_7,BINOP_1,GROUP_2,STRUCT_0,ALGSTR_0,GROUP_1,GROUP_4,VFUNCT_1,GR_CY_1,VECTSP_2,BHSP_1,ALGSEQ_1,POLYNOM3,POLYNOM4,POLYNOM5,NEWTON,EULER_1,INT_3,HURWITZ,REALSET1,INT_5,INT_7,ABIAN,UNIROOTS;
definitions STRUCT_0,GROUP_1,INT_3,CARD_1,TARSKI,POLYNOM3,HURWITZ,INT_7;
theorems TARSKI,XBOOLE_0,ZFMISC_1,ORDINAL1,FUNCT_2,VECTSP_1,INT_1,RLVECT_1,GR_CY_1,FUNCT_7,NAT_1,INT_2,INT_3,PEPIN,NAT_D,XCMPLX_1,WSIERP_1,CARD_1,GROUP_1,GROUP_2,STRUCT_0,WELLORD2,XREAL_1,NEWTON,XXREAL_0,GROUP_4,POLYNOM4,POLYNOM5,CARD_2,EULER_1,XBOOLE_1,INT_7,NAT_2,INT_4,INT_6,INT_5,NAT_4,RADIX_2,PREPOWER,UNIROOTS,GR_CY_2;
schemes NAT_1,FUNCT_2,RECDEF_1;
registrations XBOOLE_0,STRUCT_0,XREAL_0,ORDINAL1,NAT_1,INT_1,GROUP_2,FINSET_1,GR_CY_1,VECTSP_1,INT_3,XXREAL_0,RELAT_1,CARD_1,ALGSTR_1,POLYNOM3,POLYNOM4,POLYNOM5,WSIERP_1,NEWTON,INT_7,VFUNCT_1,FUNCT_2;
constructors REAL_1,NAT_D,PEPIN,EUCLID,REALSET1,GROUP_4,GR_CY_1,INT_3,BINARITH,BHSP_1,POLYNOM4,POLYNOM5,WELLORD2,ALGSTR_1,HURWITZ,UPROOTS,INT_5,EULER_1,INT_7,ABIAN,UNIROOTS,RELSET_1,VFUNCT_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
Th1: (for p,q being Prime holds (for k being Nat holds (k divides ( p * q ) implies (((k = 1 or k = p) or k = q) or k = ( p * q )))))
proof
let p being Prime,q being Prime;
let k being Nat;
assume A1: k divides ( p * q );
per cases  by PEPIN:2;
suppose k,p are_relative_prime ;

then k divides q by A1,PEPIN:3;
hence (((k = 1 or k = p) or k = q) or k = ( p * q )) by INT_2:def 4;
end;
suppose ( k gcd p ) = p;

then p divides k by NAT_D:def 5;
then consider l being Nat such that A2: k = ( p * l ) by NAT_D:def 3;
consider m being Nat such that A3: ( k * m ) = ( p * q ) by A1,NAT_D:def 3;
( p * ( l * m ) ) = ( p * q ) by A2,A3;
then ( l * m ) = q by XCMPLX_1:5;
then l divides q by NAT_D:def 3;
then (l = 1 or l = q) by INT_2:def 4;
hence (((k = 1 or k = p) or k = q) or k = ( p * q )) by A2;
end;
end;
