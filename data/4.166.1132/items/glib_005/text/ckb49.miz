environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8,CKB39,CKB40,CKB41;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th16: (for G being  finite  natural-weighted WGraph holds (for source,sink being (Vertex of G) holds (for n being Nat holds (source <> sink implies ( ( FF:CompSeq (G,source,sink) ) . n ) has_valid_flow_from source,sink))))
proof
let G being  finite  natural-weighted WGraph;
let source being (Vertex of G);
let sink being (Vertex of G);
let n being Nat;
set CS = ( FF:CompSeq (G,source,sink) );
defpred P[ Nat ]
 means
( CS . $1 ) has_valid_flow_from source,sink;
now
set G0 = ( CS . ( 0 ) );
A1: G0 = ( ( the_Edges_of G ) --> ( 0 ) ) by CKB42:def 1;
hence (for e being set holds (e in ( the_Edges_of G ) implies (( 0 ) <= ( G0 . e ) & ( G0 . e ) <= ( ( the_Weight_of G ) . e )))) by FUNCOP_1:7;
let v being (Vertex of G);
set B1 = ( EmptyBag ( v .edgesIn() ) );
set B2 = ( EmptyBag ( v .edgesOut() ) );
set E1 = ( G0 | ( v .edgesIn() ) );
set E2 = ( G0 | ( v .edgesOut() ) );
now
let e being set;
assume A2: e in ( v .edgesOut() );
then ( E2 . e ) = ( G0 . e ) by FUNCT_1:49
.= ( 0 ) by A1,A2,FUNCOP_1:7;
hence ( B2 . e ) = ( E2 . e ) by PRE_POLY:52;
end;
then A3: ( Sum E2 ) = ( Sum B2 ) by GLIB_004:6
.= ( 0 ) by UPROOTS:11;
assume that
v <> source
and
v <> sink;
now
let e being set;
assume A4: e in ( v .edgesIn() );
then ( E1 . e ) = ( G0 . e ) by FUNCT_1:49
.= ( 0 ) by A1,A4,FUNCOP_1:7;
hence ( B1 . e ) = ( E1 . e ) by PRE_POLY:52;
end;
then ( Sum E1 ) = ( Sum B1 ) by GLIB_004:6
.= ( 0 ) by UPROOTS:11;
hence ( Sum E1 ) = ( Sum E2 ) by A3;
end;
then A5: P[ ( 0 ) ] by CKB10:def 1;
assume A6: source <> sink;
now
let n being Nat;
set Gn = ( CS . n );
set Gn1 = ( CS . ( n + 1 ) );
assume A7: Gn has_valid_flow_from source,sink;
A8: Gn1 = ( FF:Step (Gn,source,sink) ) by CKB42:def 1;
now
per cases ;
suppose A9: sink in ( dom ( AP:FindAugPath (Gn,source) ) );

set P = ( AP:GetAugPath (Gn,source,sink) );
A10: P is_Walk_from source,sink by A9,CKB30:def 1;
A11: P is_augmenting_wrt Gn by A9,CKB30:def 1;
Gn1 = ( FF:PushFlow (Gn,P) ) by A8,A9,CKB37:def 1;
hence P[ ( n + 1 ) ] by A6,A7,A10,A11,CKB47:1;
end;
suppose (not sink in ( dom ( AP:FindAugPath (Gn,source) ) ));

hence P[ ( n + 1 ) ] by A7,A8,CKB37:def 1;
end;
end;
hence P[ ( n + 1 ) ];
end;
then A12: (for n being Nat holds (P[ n ] implies P[ ( n + 1 ) ]));
(for n being Nat holds P[ n ]) from NAT_1:sch 2(A5,A12);
hence thesis;
end;
