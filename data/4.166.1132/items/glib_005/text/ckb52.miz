environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8,CKB39,CKB40,CKB41;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
(for G being  finite  natural-weighted WGraph holds (for source,sink being (Vertex of G) holds (sink <> source implies ( FF:MaxFlow (G,source,sink) ) has_maximum_flow_from source,sink)))
proof
let G being  finite  natural-weighted WGraph;
let source being (Vertex of G),sink being (Vertex of G);
set CS = ( FF:CompSeq (G,source,sink) );
set n = ( CS .Lifespan() );
set Gn = ( CS . n );
set Gn1 = ( CS . ( n + 1 ) );
A1: Gn1 = ( FF:Step (Gn,source,sink) ) by CKB42:def 1;
assume A2: sink <> source;
then CS is  halting by CKB50:1;
then A3: Gn = ( CS . ( n + 1 ) ) by GLIB_000:def 55;
now
given P being (Path of G) such that
A4: P is_Walk_from source,sink
and
A5: P is_augmenting_wrt Gn;

set P = ( AP:GetAugPath (Gn,source,sink) );
A6: sink in ( dom ( AP:FindAugPath (Gn,source) ) ) by A4,A5,CKB32:1;
then A7: P is_Walk_from source,sink by CKB30:def 1;
then A8: ( P .first() ) = source by GLIB_001:def 23;
A9: ( P .last() ) = sink by A7,GLIB_001:def 23;
A10: P is_augmenting_wrt Gn by A6,CKB30:def 1;
Gn1 = ( FF:PushFlow (Gn,( AP:GetAugPath (Gn,source,sink) )) ) by A1,A6,CKB37:def 1;
then ( ( Gn .flow (source,sink) ) + ( P .tolerance Gn ) ) = ( Gn1 .flow (source,sink) ) by A2,A7,A10,CKB48:1;
hence contradiction by A2,A3,A8,A9,A10,CKB46:1,GLIB_001:127;
end;
hence thesis by A2,CKB49:1,CKB51:1;
end;
