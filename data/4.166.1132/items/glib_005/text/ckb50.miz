environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8,CKB39,CKB40,CKB41;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th17: (for G being  finite  natural-weighted WGraph holds (for source,sink being (Vertex of G) holds (source <> sink implies ( FF:CompSeq (G,source,sink) ) is  halting)))
proof
let G being  finite  natural-weighted WGraph;
let source being (Vertex of G);
let sink being (Vertex of G);
set CS = ( FF:CompSeq (G,source,sink) );
assume A1: source <> sink;
now
set V = { source };
defpred P[ (Element of ( NAT )) ]
 means
($1 <= ( ( CS . $1 ) .flow (source,sink) ) & ( ( CS . $1 ) .flow (source,sink) ) is (Element of ( NAT )));
A2: source in V by TARSKI:def 1;
set W1 = ( ( the_Weight_of G ) | ( G .edgesDBetween (V,( ( the_Vertices_of G ) \ V )) ) );
( degree W1 ) = ( Sum W1 );
then reconsider N = ( Sum W1 ) as (Element of ( NAT ));
set Gn1 = ( CS . ( N + 1 ) );
assume A3: (for n being (Element of ( NAT )) holds ( CS . n ) <> ( CS . ( n + 1 ) ));
now
let n being (Element of ( NAT ));
set Gn = ( CS . n );
set Gn1 = ( CS . ( n + 1 ) );
assume that
A4: n <= ( Gn .flow (source,sink) )
and
A5: ( Gn .flow (source,sink) ) is (Element of ( NAT ));
reconsider GnF = ( Gn .flow (source,sink) ) as (Element of ( NAT )) by A5;
set P = ( AP:GetAugPath (Gn,source,sink) );
A6: Gn1 = ( FF:Step (Gn,source,sink) ) by CKB42:def 1;
A7:now
assume (not sink in ( dom ( AP:FindAugPath (Gn,source) ) ));
then Gn1 = Gn by A6,CKB37:def 1;
hence contradiction by A3;
end;
then A8: P is_augmenting_wrt Gn by CKB30:def 1;
A9: P is_Walk_from source,sink by A7,CKB30:def 1;
then A10: ( P .last() ) = sink by GLIB_001:def 23;
Gn1 = ( FF:PushFlow (Gn,( AP:GetAugPath (Gn,source,sink) )) ) by A6,A7,CKB37:def 1;
then A11: ( GnF + ( P .tolerance Gn ) ) = ( Gn1 .flow (source,sink) ) by A1,A8,A9,CKB48:1;
then reconsider Gn1F = ( Gn1 .flow (source,sink) ) as (Element of ( NAT ));
( P .first() ) = source by A9,GLIB_001:def 23;
then ( 0 ) < ( P .tolerance Gn ) by A1,A8,A10,CKB46:1,GLIB_001:127;
then ( ( GnF + ( P .tolerance Gn ) ) - ( P .tolerance Gn ) ) < ( Gn1F - ( 0 ) ) by A11,XREAL_1:15;
then n < Gn1F by A4,XXREAL_0:2;
hence ( n + 1 ) <= ( Gn1 .flow (source,sink) ) by NAT_1:13;
thus ( Gn1 .flow (source,sink) ) is (Element of ( NAT )) by A11;
end;
then A12: (for n being (Element of ( NAT )) holds (P[ n ] implies P[ ( n + 1 ) ]));
now
set B1 = ( EmptyBag ( G .edgesInto { sink } ) );
set B2 = ( EmptyBag ( G .edgesOutOf { sink } ) );
set G0 = ( CS . ( 0 ) );
set E1 = ( G0 | ( G .edgesInto { sink } ) );
set E2 = ( G0 | ( G .edgesOutOf { sink } ) );
A13: G0 = ( ( the_Edges_of G ) --> ( 0 ) ) by CKB42:def 1;
now
let e being set;
assume A14: e in ( G .edgesInto { sink } );
hence ( E1 . e ) = ( G0 . e ) by FUNCT_1:49
.= ( 0 ) by A13,A14,FUNCOP_1:7
.= ( B1 . e ) by PRE_POLY:52;
end;
then A15: ( Sum E1 ) = ( Sum B1 ) by GLIB_004:6
.= ( 0 ) by UPROOTS:11;
now
let e being set;
assume A16: e in ( G .edgesOutOf { sink } );
hence ( E2 . e ) = ( G0 . e ) by FUNCT_1:49
.= ( 0 ) by A13,A16,FUNCOP_1:7
.= ( B2 . e ) by PRE_POLY:52;
end;
then A17: ( Sum E2 ) = ( Sum B2 ) by GLIB_004:6
.= ( 0 ) by UPROOTS:11;
hence ( G0 .flow (source,sink) ) = ( (( 0 ) qua Nat) - ( 0 ) ) by A15;
thus ( G0 .flow (source,sink) ) is (Element of ( NAT )) by A15,A17;
end;
then A18: P[ ( 0 ) ];
A19: (for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A18,A12);
then reconsider Gn1F = ( Gn1 .flow (source,sink) ) as (Element of ( NAT ));
( ( Sum W1 ) + 1 ) <= Gn1F by A19;
then A20: ( Sum W1 ) < ( Gn1 .flow (source,sink) ) by NAT_1:13;
(not sink in V) by A1,TARSKI:def 1;
hence contradiction by A2,A20,CKB45:1,CKB49:1;
end;
hence thesis by GLIB_000:def 54;
end;
