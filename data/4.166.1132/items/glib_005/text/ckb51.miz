environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8,CKB39,CKB40,CKB41;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB42,CKB43;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th18: (for G being  finite  natural-weighted WGraph holds (for EL being (FF:ELabeling of G) holds (for source,sink being set holds ((EL has_valid_flow_from source,sink & (not (ex P being (Path of G) st (P is_Walk_from source,sink & P is_augmenting_wrt EL)))) implies EL has_maximum_flow_from source,sink))))
proof
let G being  finite  natural-weighted WGraph;
let EL being (FF:ELabeling of G);
let source being set,sink being set;
assume that
A1: EL has_valid_flow_from source,sink
and
A2: (not (ex P being (Path of G) st (P is_Walk_from source,sink & P is_augmenting_wrt EL)));
reconsider src = source as (Vertex of G) by A1,CKB10:def 1;
set CS = ( AP:CompSeq (EL,src) );
set Gn = ( AP:FindAugPath (EL,src) );
set Gn1 = ( CS . ( ( CS .Lifespan() ) + 1 ) );
reconsider V = ( dom Gn ) as (Subset of ( the_Vertices_of G ));
set E1 = ( G .edgesDBetween (V,( ( the_Vertices_of G ) \ V )) );
set A1 = ( EL | E1 );
set B1 = ( ( the_Weight_of G ) | E1 );
set e = ( choose ( AP:NextBestEdges Gn ) );
( AP:CompSeq (EL,src) ) is  halting by CKB28:1;
then A3: Gn1 = Gn by GLIB_000:def 55;
A4: Gn1 = ( AP:Step Gn ) by CKB24:def 1;
A5:now
assume A6: ( AP:NextBestEdges Gn ) <> ( {} );
now
per cases  by A6,CKB20:def 1;
suppose A7: e is_forward_edge_wrt Gn;

then ( ( the_Source_of G ) . e ) in V by CKB14:def 1;
then A8: Gn = ( Gn +* ( ( ( the_Target_of G ) . e ) .--> e ) ) by A4,A3,A6,CKB21:def 1;
(not ( ( the_Target_of G ) . e ) in V) by A7,CKB14:def 1;
hence contradiction by A8,CKB2:1;
end;
suppose e is_backward_edge_wrt Gn;

then A9: (not ( ( the_Source_of G ) . e ) in V) by CKB15:def 1;
then Gn = ( Gn +* ( ( ( the_Source_of G ) . e ) .--> e ) ) by A4,A3,A6,CKB21:def 1;
hence contradiction by A9,CKB2:1;
end;
end;
hence contradiction;
end;
A10:now
let x being set;
assume A11: x in E1;
then A12: ( A1 . x ) = ( EL . x ) by FUNCT_1:49;
A13: x DSJoins V,( ( the_Vertices_of G ) \ V ),G by A11,GLIB_000:def 31;
then ( ( the_Target_of G ) . x ) in ( ( the_Vertices_of G ) \ V ) by GLIB_000:def 16;
then A14: (not ( ( the_Target_of G ) . x ) in V) by XBOOLE_0:def 5;
A15: ( B1 . x ) = ( ( the_Weight_of G ) . x ) by A11,FUNCT_1:49;
A16: ( ( the_Source_of G ) . x ) in V by A13,GLIB_000:def 16;
A17:now
assume ( A1 . x ) < ( B1 . x );
then x is_forward_edge_wrt Gn by A11,A12,A15,A16,A14,CKB14:def 1;
hence contradiction by A5,CKB20:def 1;
end;
( A1 . x ) <= ( B1 . x ) by A1,A11,A12,A15,CKB10:def 1;
hence ( A1 . x ) = ( B1 . x ) by A17,XXREAL_0:1;
end;
set E2 = ( G .edgesDBetween (( ( the_Vertices_of G ) \ V ),V) );
set A2 = ( EL | E2 );
set B2 = ( EmptyBag E2 );
now
let x being set;
assume A18: x in E2;
then A19: x DSJoins ( ( the_Vertices_of G ) \ V ),V,G by GLIB_000:def 31;
then A20: ( ( the_Target_of G ) . x ) in V by GLIB_000:def 16;
( ( the_Source_of G ) . x ) in ( ( the_Vertices_of G ) \ V ) by A19,GLIB_000:def 16;
then A21: (not ( ( the_Source_of G ) . x ) in V) by XBOOLE_0:def 5;
A22: ( A2 . x ) = ( EL . x ) by A18,FUNCT_1:49;
A23:now
assume ( 0 ) < ( A2 . x );
then x is_backward_edge_wrt Gn by A18,A22,A20,A21,CKB15:def 1;
hence contradiction by A5,CKB20:def 1;
end;
B2 = ( E2 --> ( 0 ) ) by PRE_POLY:def 13;
then ( B2 . x ) = ( 0 ) by A18,FUNCOP_1:7;
hence ( A2 . x ) = ( B2 . x ) by A23;
end;
then ( Sum ( EL | E2 ) ) = ( Sum B2 ) by GLIB_004:6;
then A24: ( Sum ( EL | E2 ) ) = ( 0 ) by UPROOTS:11;
A25: (not sink in ( dom Gn )) by A2,CKB32:1;
then ( EL .flow (source,sink) ) = ( ( Sum ( EL | E1 ) ) - ( Sum ( EL | E2 ) ) ) by A1,CKB33:1,CKB44:1;
then ( EL .flow (source,sink) ) = ( Sum ( ( the_Weight_of G ) | E1 ) ) by A10,A24,GLIB_004:6;
then (for X being (FF:ELabeling of G) holds (X has_valid_flow_from source,sink implies ( X .flow (source,sink) ) <= ( EL .flow (source,sink) ))) by A25,CKB33:1,CKB45:1;
hence thesis by A1,CKB12:def 1;
end;
