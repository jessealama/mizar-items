environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th9: (for G being  finite  real-weighted WGraph holds (for EL being (FF:ELabeling of G) holds (for source being (Vertex of G) holds (for v being set holds (v in ( dom ( AP:FindAugPath (EL,source) ) ) iff (ex P being (Path of G) st (P is_Walk_from source,v & P is_augmenting_wrt EL)))))))
proof
let G being  finite  real-weighted WGraph;
let EL being (FF:ELabeling of G);
let source being (Vertex of G);
let v being set;
set CS = ( AP:CompSeq (EL,source) );
set V = ( dom ( AP:FindAugPath (EL,source) ) );
hereby
assume v in V;
then (ex P being (Path of G) st ((P is_augmenting_wrt EL & P is_Walk_from source,v) & ( P .vertices() ) c= V)) by CKB31:1;
hence (ex P being (Path of G) st (P is_Walk_from source,v & P is_augmenting_wrt EL));
end;
given P being (Path of G) such that
A1: P is_Walk_from source,v
and
A2: P is_augmenting_wrt EL;

now
( P . ( ( 2 * ( 0 ) ) + 1 ) ) = source by A1,GLIB_001:17;
then ( P . ( ( 2 * ( 0 ) ) + 1 ) ) in { source } by TARSKI:def 1;
then A3: ( P . ( ( 2 * ( 0 ) ) + 1 ) ) in ( dom ( CS . ( 0 ) ) ) by CKB25:1;
set Gn = ( CS . ( CS .Lifespan() ) );
set Gn1 = ( CS . ( ( CS .Lifespan() ) + 1 ) );
defpred P[ Nat ]
 means
(($1 is  odd & $1 <= ( len P )) & (not ( P . $1 ) in V));
assume A4: (not v in V);
( P . ( len P ) ) = v by A1,GLIB_001:17;
then A5: (ex n being Nat st P[ n ]) by A4;
consider n being Nat such that A6: (P[ n ] & (for k being Nat holds (P[ k ] implies n <= k))) from NAT_1:sch 5(A5);
reconsider n9 = n as  odd (Element of ( NAT )) by A6,ORDINAL1:def 12;
A7: 1 <= n by A6,ABIAN:12;
( dom ( CS . ( 0 ) ) ) c= V by CKB26:1;
then n <> 1 by A6,A3;
then 1 < n by A7,XXREAL_0:1;
then ( 1 + 1 ) <= n by NAT_1:13;
then reconsider n2 = ( n9 - ( 2 * 1 ) ) as  odd (Element of ( NAT )) by INT_1:5;
A8: n2 < ( n - ( 0 ) ) by XREAL_1:15;
then A9: n2 < ( len P ) by A6,XXREAL_0:2;
then A10: ( P . n2 ) in V by A6,A8;
set Next = ( AP:NextBestEdges Gn );
set en = ( choose Next );
( AP:CompSeq (EL,source) ) is  halting by CKB28:1;
then A11: Gn = ( CS . ( ( CS .Lifespan() ) + 1 ) ) by GLIB_000:def 55;
set e = ( P . ( n2 + 1 ) );
A12: ( P . ( n2 + 2 ) ) = ( P . n );
then A13: e Joins ( P . n2 ),( P . n ),G by A9,GLIB_001:def 3;
A14:now
per cases ;
suppose A15: e DJoins ( P . n2 ),( P . n ),G;

then A16: ( ( the_Source_of G ) . e ) in ( dom Gn ) by A10,GLIB_000:def 14;
A17: e in ( the_Edges_of G ) by A15,GLIB_000:def 14;
A18: (not ( ( the_Target_of G ) . e ) in ( dom Gn )) by A6,A15,GLIB_000:def 14;
( EL . e ) < ( ( the_Weight_of G ) . e ) by A2,A9,A12,A15,CKB16:def 1;
then e is_forward_edge_wrt Gn by A17,A16,A18,CKB14:def 1;
hence Next <> ( {} ) by CKB20:def 1;
end;
suppose A19: (not e DJoins ( P . n2 ),( P . n ),G);

then A20: e DJoins ( P . n ),( P . n2 ),G by A13,GLIB_000:16;
then A21: e in ( the_Edges_of G ) by GLIB_000:def 14;
A22: ( ( the_Target_of G ) . e ) in ( dom Gn ) by A10,A20,GLIB_000:def 14;
A23: (not ( ( the_Source_of G ) . e ) in ( dom Gn )) by A6,A20,GLIB_000:def 14;
( 0 ) < ( EL . e ) by A2,A9,A12,A19,CKB16:def 1;
then e is_backward_edge_wrt Gn by A21,A23,A22,CKB15:def 1;
hence Next <> ( {} ) by CKB20:def 1;
end;
end;
A24: Gn1 = ( AP:Step Gn ) by CKB24:def 1;
now
per cases ;
suppose A25: (not ( ( the_Source_of G ) . en ) in ( dom Gn ));

then Gn = ( Gn +* ( ( ( the_Source_of G ) . en ) .--> en ) ) by A24,A11,A14,CKB21:def 1;
then A26: ( dom Gn ) = ( ( dom Gn ) \/ { ( ( the_Source_of G ) . en ) } ) by CKB1:1;
( ( the_Source_of G ) . en ) in { ( ( the_Source_of G ) . en ) } by TARSKI:def 1;
hence contradiction by A25,A26,XBOOLE_0:def 3;
end;
suppose A27: ( ( the_Source_of G ) . en ) in ( dom Gn );

(en is_forward_edge_wrt Gn or en is_backward_edge_wrt Gn) by A14,CKB20:def 1;
then A28: (not ( ( the_Target_of G ) . en ) in ( dom Gn )) by A27,CKB14:def 1,CKB15:def 1;
Gn = ( Gn +* ( ( ( the_Target_of G ) . en ) .--> en ) ) by A24,A11,A14,A27,CKB21:def 1;
then A29: ( dom Gn ) = ( ( dom Gn ) \/ { ( ( the_Target_of G ) . en ) } ) by CKB1:1;
( ( the_Target_of G ) . en ) in { ( ( the_Target_of G ) . en ) } by TARSKI:def 1;
hence contradiction by A28,A29,XBOOLE_0:def 3;
end;
end;
hence contradiction;
end;
hence thesis;
end;
