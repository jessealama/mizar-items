environ
vocabularies NUMBERS,FUNCT_1,RELAT_1,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,GLIB_003,VALUED_0,SUBSET_1,REAL_1,GRAPH_5,FINSET_1,ZFMISC_1,TREES_1,GLIB_000,PBOOLE,CARD_1,XXREAL_0,CARD_3,XREAL_0,ORDINAL1,ARYTM_1,PARTFUN1,ARYTM_3,GLIB_001,ABIAN,NAT_1,FINSEQ_1,GRAPH_1,RCOMP_1,INT_1,PRE_POLY,UPROOTS,SGRAPH1,GLIB_005;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,XREAL_0,DOMAIN_1,REAL_1,RELAT_1,VALUED_0,PARTFUN1,FUNCT_1,PBOOLE,FINSEQ_1,FUNCT_2,GRAPH_5,ORDINAL1,UPROOTS,RELSET_1,FINSET_1,INT_1,NAT_1,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,ABIAN,GLIB_002,GLIB_003,PRE_POLY,CKB5,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38;
definitions TARSKI,GLIB_000,GLIB_003,FUNCOP_1,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,GLIB_003,GLIB_004,GRAPH_5,ABIAN,INT_1,NAT_1,PBOOLE,PEPIN,TARSKI,UPROOTS,XBOOLE_0,XBOOLE_1,ZFMISC_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_0,RELSET_1,PARTFUN1,RELAT_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38;
schemes NAT_1,SUBSET_1,FINSEQ_1,CLASSES1,RECDEF_1,GRAPH_5;
registrations XBOOLE_0,RELAT_1,PARTFUN1,INT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GLIB_001,GLIB_002,GLIB_003,VALUED_0,FUNCT_2,CARD_1,PRE_CIRC,PRE_POLY,RELSET_1,CKB6,CKB7,CKB8,CKB39,CKB40,CKB41;
constructors DOMAIN_1,FUNCT_4,NAT_D,GRAPH_2,GRAPH_5,UPROOTS,GLIB_004,SEQ_1,XXREAL_2,RELSET_1,PBOOLE,CKB5,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
definition
let G being  finite  natural-weighted WGraph;
let source being (Vertex of G);
let sink being (Vertex of G);
func FF:CompSeq (G,source,sink) -> (FF:ELabelingSeq of G) means 
:Def20: (( it . ( 0 ) ) = ( ( the_Edges_of G ) --> ( 0 ) ) & (for n being Nat holds ( it . ( n + 1 ) ) = ( FF:Step (( it . n ),source,sink) )));
existence
proof
defpred P[ set,set,set ]
 means
((ex e being (FF:ELabeling of G) st (e = $2 & $3 = ( FF:Step (e,source,sink) ))) or ((not (ex e being (FF:ELabeling of G) st e = $2)) & $3 = $2));
now
let n being set;
let x being set;
now
per cases ;
suppose (ex e being (FF:ELabeling of G) st e = x);

then consider e being (FF:ELabeling of G) such that A1: e = x;
set y = ( FF:Step (e,source,sink) );
P[ n,x,y ] by A1;
hence (ex y being set st P[ n,x,y ]);
end;
suppose (not (ex e being (FF:ELabeling of G) st e = x));

hence (ex y being set st P[ n,x,y ]);
end;
end;
hence (ex y being set st P[ n,x,y ]);
end;
then A2: (for n being (Element of ( NAT )) holds (for x being set holds (ex y being set st P[ n,x,y ])));
consider IT being Function such that A3: ((( dom IT ) = ( NAT ) & ( IT . ( 0 ) ) = ( ( the_Edges_of G ) --> ( 0 ) )) & (for n being (Element of ( NAT )) holds P[ n,( IT . n ),( IT . ( n + 1 ) ) ])) from RECDEF_1:sch 1(A2);
reconsider IT as (ManySortedSet of ( NAT )) by A3,PARTFUN1:def 2,RELAT_1:def 18;
defpred P2[ Nat ]
 means
(ex Gn being (FF:ELabeling of G) st ( IT . $1 ) = Gn);
A4:now
let n being Nat;
assume P2[ n ];
then consider Gn being (FF:ELabeling of G) such that A5: ( IT . n ) = Gn;
n in ( NAT ) by ORDINAL1:def 12;
then P[ n,Gn,( IT . ( n + 1 ) ) ] by A3,A5;
hence P2[ ( n + 1 ) ];
end;
A6: P2[ ( 0 ) ] by A3;
A7: (for n being Nat holds P2[ n ]) from NAT_1:sch 2(A6,A4);
now
let n being Nat;
(ex Gn being (FF:ELabeling of G) st ( IT . n ) = Gn) by A7;
hence ( IT . n ) is (FF:ELabeling of G);
end;
then reconsider IT as (FF:ELabelingSeq of G) by CKB38:def 1;
take IT;
thus ( IT . ( 0 ) ) = ( ( the_Edges_of G ) --> ( 0 ) ) by A3;
let n being Nat;
reconsider n9 = n as (Element of ( NAT )) by ORDINAL1:def 12;
(ex X being (FF:ELabeling of G) st (X = ( IT . n ) & ( IT . ( n9 + 1 ) ) = ( FF:Step (X,source,sink) ))) by A3;
hence thesis;
end;
uniqueness
proof
let IT1 being (FF:ELabelingSeq of G);
let IT2 being (FF:ELabelingSeq of G);
assume that
A8: ( IT1 . ( 0 ) ) = ( ( the_Edges_of G ) --> ( 0 ) )
and
A9: (for n being Nat holds ( IT1 . ( n + 1 ) ) = ( FF:Step (( IT1 . n ),source,sink) ))
and
A10: ( IT2 . ( 0 ) ) = ( ( the_Edges_of G ) --> ( 0 ) )
and
A11: (for n being Nat holds ( IT2 . ( n + 1 ) ) = ( FF:Step (( IT2 . n ),source,sink) ));
defpred P[ Nat ]
 means
( IT1 . $1 ) = ( IT2 . $1 );
A12:now
let n being (Element of ( NAT ));
assume A13: P[ n ];
( IT2 . ( n + 1 ) ) = ( FF:Step (( IT2 . n ),source,sink) ) by A11;
hence P[ ( n + 1 ) ] by A9,A13;
end;
A14: P[ ( 0 ) ] by A8,A10;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A14,A12);
then (for n being set holds (n in ( NAT ) implies ( IT1 . n ) = ( IT2 . n )));
hence IT1 = IT2 by PBOOLE:3;
end;
end;
