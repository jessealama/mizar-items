environ
vocabularies XBOOLE_0,ORDERS_2,SUBSET_1,FIN_TOPO,TARSKI,PRE_TOPC,FUNCT_1,NUMBERS,ZFMISC_1,STRUCT_0,ARYTM_3,CARD_1,RELAT_1,NAT_1,FINTOPO3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,FUNCT_1,FUNCT_2,FIN_TOPO,PRE_TOPC,STRUCT_0,ORDERS_2,CKB1,CKB14,CKB15,CKB16,CKB17,CKB36,CKB37;
definitions TARSKI,XBOOLE_0,SUBSET_1,CKB1,CKB14,CKB15,CKB16,CKB17,CKB36,CKB37;
theorems TARSKI,SUBSET_1,FUNCT_1,FUNCT_2,XBOOLE_0,XBOOLE_1,FIN_TOPO,FINTOPO2,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37;
schemes RECDEF_1,NAT_1,DOMAIN_1;
registrations SUBSET_1,ORDINAL1,RELSET_1,STRUCT_0,FIN_TOPO;
constructors NAT_1,FIN_TOPO,RELSET_1,CKB1,CKB14,CKB15,CKB16,CKB17,CKB36,CKB37;
requirements SUBSET,NUMERALS,ARITHM,BOOLE;
begin
reserve T for non  empty RelStr;
reserve A for (Subset of T);
reserve x for (Element of T);
definition
let T being non  empty RelStr;
let A being (Subset of T);
func Fdfl A -> (Function of ( NAT ),( bool (the carrier of T) )) means 
:Def8: ((for n being (Element of ( NAT )) holds (for B being (Subset of T) holds (B = ( it . n ) implies ( it . ( n + 1 ) ) = ( B ^d )))) & ( it . ( 0 ) ) = A);
existence
proof
defpred P[ set,set,set ]
 means
(for B being (Subset of T) holds (B = $2 implies $3 = ( B ^d )));
A1: (for n being (Element of ( NAT )) holds (for x being (Subset of T) holds (ex y being (Subset of T) st P[ n,x,y ])))
proof
let n being (Element of ( NAT ));
let x being (Subset of T);
(for B being (Subset of T) holds (B = x implies ( x ^d ) = ( B ^d )));
hence thesis;
end;
(ex f being (Function of ( NAT ),( bool (the carrier of T) )) st (( f . ( 0 ) ) = A & (for n being (Element of ( NAT )) holds P[ n,( f . n ),( f . ( n + 1 ) ) ]))) from RECDEF_1:sch 2(A1);
hence thesis;
end;
uniqueness
proof
let f1 being (Function of ( NAT ),( bool (the carrier of T) ));
let f2 being (Function of ( NAT ),( bool (the carrier of T) ));
assume that
A2: (for n being (Element of ( NAT )) holds (for B being (Subset of T) holds (B = ( f1 . n ) implies ( f1 . ( n + 1 ) ) = ( B ^d ))))
and
A3: ( f1 . ( 0 ) ) = A
and
A4: (for n being (Element of ( NAT )) holds (for B being (Subset of T) holds (B = ( f2 . n ) implies ( f2 . ( n + 1 ) ) = ( B ^d ))))
and
A5: ( f2 . ( 0 ) ) = A;
defpred P[ (Element of ( NAT )) ]
 means
( f1 . $1 ) = ( f2 . $1 );
A6: (for n being (Element of ( NAT )) holds (P[ n ] implies P[ ( n + 1 ) ]))
proof
let n being (Element of ( NAT ));
assume A7: P[ n ];
reconsider B1 = ( f1 . n ) as (Subset of T);
( B1 ^d ) = ( f1 . ( n + 1 ) ) by A2;
hence thesis by A4,A7;
end;
A8: ( dom f1 ) = ( NAT ) by FUNCT_2:def 1;
then A9: ( dom f1 ) = ( dom f2 ) by FUNCT_2:def 1;
A10: P[ ( 0 ) ] by A3,A5;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A10,A6);
then (for x being set holds (x in ( dom f1 ) implies ( f1 . x ) = ( f2 . x ))) by A8;
hence f1 = f2 by A9,FUNCT_1:2;
end;
end;
