environ
vocabularies NUMBERS,NAT_1,INT_1,ARYTM_1,ARYTM_3,CARD_1,XXREAL_0,SUBSET_1,RELAT_1,NEWTON,POWER,TARSKI,XBOOLE_0,FINSEQ_2,FINSEQ_1,FUNCT_1,PARTFUN1,CARD_3,ORDINAL4,RADIX_1;
notations TARSKI,XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,INT_1,NAT_1,NAT_D,FUNCT_1,PARTFUN1,NEWTON,POWER,FINSEQ_1,FINSEQ_2,TREES_4,GR_CY_1,XXREAL_0,MESFUNC1;
definitions TARSKI,RVSUM_1;
theorems NAT_1,NAT_2,INT_1,FINSEQ_1,EULER_1,PREPOWER,POWER,RVSUM_1,FINSEQ_2,FINSEQ_4,TARSKI,FUNCT_1,PEPIN,FINSEQ_5,NEWTON,XCMPLX_1,XREAL_1,XXREAL_0,FINSOP_1,ORDINAL1,NAT_D,PARTFUN1,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
schemes NAT_1,FINSEQ_2;
registrations RELSET_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,NEWTON,XBOOLE_0,VALUED_0,POWER,CARD_1,FINSEQ_1;
constructors REAL_1,NAT_D,FINSOP_1,NEWTON,POWER,MESFUNC1,WSIERP_1,GR_CY_1,BINOP_2;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve i1 for Integer;
reserve i2 for Integer;
reserve i3 for Integer;
theorem
((i2 > ( 0 ) & i3 >= ( 0 )) implies ( ( i1 mod ( i2 * i3 ) ) mod i3 ) = ( i1 mod i3 ))
proof
assume that
A1: i2 > ( 0 )
and
A2: i3 >= ( 0 );
per cases  by A2;
suppose i3 > ( 0 );

then ( i2 * i3 ) <> ( 0 ) by A1,XCMPLX_1:6;
then ( ( i1 mod ( i2 * i3 ) ) mod i3 ) = ( ( i1 - ( ( i1 div ( i2 * i3 ) ) * ( i2 * i3 ) ) ) mod i3 ) by INT_1:def 10
.= ( ( i1 + ( ( - ( i2 * ( i1 div ( i2 * i3 ) ) ) ) * i3 ) ) mod i3 );
hence thesis by EULER_1:12;
end;
suppose A3: i3 = ( 0 );

then ( ( i1 mod ( i2 * i3 ) ) mod i3 ) = ( 0 ) by INT_1:def 10;
hence thesis by A3,INT_1:def 10;
end;
end;
