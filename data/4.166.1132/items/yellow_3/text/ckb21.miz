environ
vocabularies XBOOLE_0,SUBSET_1,TARSKI,ORDERS_2,WAYBEL_0,XXREAL_0,ZFMISC_1,RELAT_1,MCART_1,LATTICE3,RELAT_2,LATTICES,YELLOW_0,EQREL_1,REWRITE1,ORDINAL2,FUNCT_1,STRUCT_0,YELLOW_3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,RELAT_2,RELSET_1,MCART_1,DOMAIN_1,FUNCT_2,BINOP_1,STRUCT_0,ORDERS_2,LATTICE3,YELLOW_0,WAYBEL_0,CKB18,CKB20;
definitions LATTICE3,RELAT_2,TARSKI,WAYBEL_0,ORDERS_2,CKB18;
theorems FUNCT_1,FUNCT_2,FUNCT_5,LATTICE3,MCART_1,ORDERS_2,RELAT_1,RELAT_2,RELSET_1,TARSKI,WAYBEL_0,YELLOW_0,YELLOW_2,ZFMISC_1,XBOOLE_0,BINOP_1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB18,CKB19;
schemes FUNCT_7,RELAT_1,CKB1,CKB14,CKB15,CKB16,CKB17;
registrations XBOOLE_0,SUBSET_1,RELSET_1,STRUCT_0,LATTICE3,YELLOW_0,ORDERS_2,WAYBEL_0,RELAT_1,CKB2,CKB3;
constructors DOMAIN_1,LATTICE3,ORDERS_3,WAYBEL_0,RELSET_1,CKB18,CKB20;
requirements SUBSET,BOOLE;
begin
definition
let X being RelStr;
let Y being RelStr;
func [:X,Y :] ->  strict RelStr means 
:Def2: ((the carrier of it) = [: (the carrier of X),(the carrier of Y) :] & (the InternalRel of it) = [" (the InternalRel of X),(the InternalRel of Y) "]);
existence
proof
take RelStr (# [: (the carrier of X),(the carrier of Y) :],[" (the InternalRel of X),(the InternalRel of Y) "] #);
thus thesis;
end;
uniqueness;
end;
