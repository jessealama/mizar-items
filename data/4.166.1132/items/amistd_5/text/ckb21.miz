environ
vocabularies NUMBERS,ORDINAL1,SETFAM_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,AMI_1,XBOOLE_0,RELAT_1,TARSKI,FUNCOP_1,GLIB_000,GOBOARD5,AMISTD_1,UNIALG_1,FUNCT_1,CARD_5,STRUCT_0,VALUED_1,FSM_1,FUNCT_4,TURING_1,CIRCUIT2,AMISTD_2,PARTFUN1,SCMNORM,NAT_1,RELOC,PBOOLE,AMISTD_5,COMPOS_1,MSUALG_1,FINSET_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,MCART_1,SETFAM_1,MEMBERED,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,PBOOLE,FINSET_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CARD_3,FINSEQ_1,FUNCOP_1,NAT_D,FUNCT_7,VALUED_0,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,AMISTD_2,CKB3,CKB5,CKB7,CKB19;
definitions RELAT_1,FUNCT_1,WELLORD2,FUNCT_7,COMPOS_1,EXTPRO_1,AMISTD_1,XBOOLE_0,FUNCOP_1,CARD_3,NAT_1,AFINSQ_1,MCART_1,VALUED_1,TARSKI,AMISTD_2,STRUCT_0,MEMSTR_0,CKB3,CKB5,CKB7,CKB19;
theorems AMISTD_1,FUNCOP_1,FUNCT_1,FUNCT_4,GRFUNC_1,RELAT_1,TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,PBOOLE,PARTFUN1,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,ORDINAL1,NAT_D,AMISTD_2,RELSET_1,PRE_CIRC,MEMSTR_0,CKB1,CKB3,CKB5,CKB6,CKB7,CKB8,CKB15,CKB16,CKB18,CKB19;
schemes NAT_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,CARD_3,REALSET1,FUNCT_7,STRUCT_0,AMISTD_1,CARD_1,FUNCT_4,XXREAL_2,RELSET_1,GRFUNC_1,FUNCT_2,ORDINAL1,AFINSQ_1,VALUED_1,VALUED_0,COMPOS_1,EXTPRO_1,XCMPLX_0,REAL_1,PBOOLE,AMISTD_2,MEMSTR_0,CKB2,CKB4,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB17,CKB20;
constructors WELLORD2,REALSET1,NAT_D,AMISTD_1,XXREAL_2,PRE_POLY,AFINSQ_1,ORDINAL4,RECDEF_2,VALUED_1,AMISTD_2,PBOOLE,RELSET_1,FUNCT_7,FUNCT_4,MEMSTR_0,CKB3,CKB5,CKB7,CKB19;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
reserve N for  with_non-empty_elements non  empty set;
reserve S for  IC-recognized  halting  standard-ins  IC-Ins-separated non  empty AMI-Struct over N;
theorem
(S is  CurIns-recognized implies (for q being non  halt-free  finite (the Instructions of S) -valued ( NAT ) -defined Function holds (for p being q -autonomic non  empty (FinPartState of S) holds (for s1,s2 being (State of S) holds ((p c= s1 & p c= s2) implies (for P1,P2 being (Instruction-Sequence of S) holds ((q c= P1 & q c= P2) implies (for i being (Element of ( NAT )) holds (( IC ( Comput (P1,s1,i) ) ) = ( IC ( Comput (P2,s2,i) ) ) & ( CurInstr (P1,( Comput (P1,s1,i) )) ) = ( CurInstr (P2,( Comput (P2,s2,i) )) ))))))))))
proof
assume A1: S is  CurIns-recognized;
let q being non  halt-free  finite (the Instructions of S) -valued ( NAT ) -defined Function;
let p being q -autonomic non  empty (FinPartState of S);
let s1 being (State of S);
let s2 being (State of S);
assume that
A2: p c= s1
and
A3: p c= s2;
let P1 being (Instruction-Sequence of S);
let P2 being (Instruction-Sequence of S);
assume that
A4: q c= P1
and
A5: q c= P2;
A6: ( dom q ) c= ( dom P1 ) by A4,RELAT_1:11;
A7: ( dom q ) c= ( dom P2 ) by A5,RELAT_1:11;
A8: ( IC S ) in ( dom p ) by CKB18:1;
let i being (Element of ( NAT ));
set Cs2i = ( Comput (P2,s2,i) );
set Cs1i = ( Comput (P1,s1,i) );
A9: ( IC Cs1i ) in ( dom q ) by A4,CKB19:def 1,A1,A2;
A10: ( IC Cs2i ) in ( dom q ) by A5,CKB19:def 1,A1,A3;
thus A11: ( IC Cs1i ) = ( IC Cs2i )
proof
assume A12: ( IC ( Comput (P1,s1,i) ) ) <> ( IC ( Comput (P2,s2,i) ) );
(( ( Cs1i | ( dom p ) ) . ( IC S ) ) = ( Cs1i . ( IC S ) ) & ( ( Cs2i | ( dom p ) ) . ( IC S ) ) = ( Cs2i . ( IC S ) )) by A8,FUNCT_1:49;
hence contradiction by A12,A4,A5,A2,A3,EXTPRO_1:def 10;
end;

thus ( CurInstr (P1,( Comput (P1,s1,i) )) ) = ( P1 . ( IC Cs1i ) ) by A9,A6,PARTFUN1:def 6
.= ( q . ( IC Cs1i ) ) by A9,A4,GRFUNC_1:2
.= ( P2 . ( IC Cs2i ) ) by A10,A5,A11,GRFUNC_1:2
.= ( CurInstr (P2,( Comput (P2,s2,i) )) ) by A10,A7,PARTFUN1:def 6;
end;
