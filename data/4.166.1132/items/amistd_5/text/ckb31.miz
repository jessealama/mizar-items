environ
vocabularies NUMBERS,ORDINAL1,SETFAM_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,AMI_1,XBOOLE_0,RELAT_1,TARSKI,FUNCOP_1,GLIB_000,GOBOARD5,AMISTD_1,UNIALG_1,FUNCT_1,CARD_5,STRUCT_0,VALUED_1,FSM_1,FUNCT_4,TURING_1,CIRCUIT2,AMISTD_2,PARTFUN1,SCMNORM,NAT_1,RELOC,PBOOLE,AMISTD_5,COMPOS_1,MSUALG_1,FINSET_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,MCART_1,SETFAM_1,MEMBERED,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,PBOOLE,FINSET_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,CARD_3,FINSEQ_1,FUNCOP_1,NAT_D,FUNCT_7,VALUED_0,VALUED_1,AFINSQ_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,AMISTD_2,CKB3,CKB5,CKB7,CKB19,CKB26,CKB27;
definitions RELAT_1,FUNCT_1,WELLORD2,FUNCT_7,COMPOS_1,EXTPRO_1,AMISTD_1,XBOOLE_0,FUNCOP_1,CARD_3,NAT_1,AFINSQ_1,MCART_1,VALUED_1,TARSKI,AMISTD_2,STRUCT_0,MEMSTR_0,CKB3,CKB5,CKB7,CKB19,CKB26,CKB27;
theorems AMISTD_1,FUNCOP_1,FUNCT_1,FUNCT_4,GRFUNC_1,RELAT_1,TARSKI,ZFMISC_1,XBOOLE_0,XBOOLE_1,PBOOLE,PARTFUN1,RECDEF_2,VALUED_1,COMPOS_1,EXTPRO_1,ORDINAL1,NAT_D,AMISTD_2,RELSET_1,PRE_CIRC,MEMSTR_0,CKB1,CKB3,CKB5,CKB6,CKB7,CKB8,CKB15,CKB16,CKB18,CKB19,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28;
schemes NAT_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,MEMBERED,FINSEQ_1,CARD_3,REALSET1,FUNCT_7,STRUCT_0,AMISTD_1,CARD_1,FUNCT_4,XXREAL_2,RELSET_1,GRFUNC_1,FUNCT_2,ORDINAL1,AFINSQ_1,VALUED_1,VALUED_0,COMPOS_1,EXTPRO_1,XCMPLX_0,REAL_1,PBOOLE,AMISTD_2,MEMSTR_0,CKB2,CKB4,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB17,CKB20,CKB29,CKB30;
constructors WELLORD2,REALSET1,NAT_D,AMISTD_1,XXREAL_2,PRE_POLY,AFINSQ_1,ORDINAL4,RECDEF_2,VALUED_1,AMISTD_2,PBOOLE,RELSET_1,FUNCT_7,FUNCT_4,MEMSTR_0,CKB3,CKB5,CKB7,CKB19,CKB26,CKB27;
requirements NUMERALS,BOOLE,SUBSET,REAL,ARITHM;
begin
reserve N for  with_non-empty_elements non empty set;
reserve S for  relocable1  relocable  IC-recognized  proper-halt  regular  homogeneous  J/A-independent  halting  standard-ins  IC-Ins-separated non empty AMI-Struct over N;
theorem
Th12: (S is  relocable1  proper-halt implies (for q being non halt-free  finite (the Instructions of S) -valued ( NAT ) -defined Function holds (for p being q -autonomic non empty (FinPartState of S) holds (for k being (Element of ( NAT )) holds (( IC S ) in ( dom p ) implies (p is q -halted iff ( IncIC (p,k) ) is ( Reloc (q,k) ) -halted))))))
proof
assume S is  relocable1  proper-halt;
let q being non halt-free  finite (the Instructions of S) -valued ( NAT ) -defined Function;
let p being q -autonomic non empty (FinPartState of S);
let k being (Element of ( NAT ));
assume A1: ( IC S ) in ( dom p );
hereby
assume A3: p is q -halted;
thus ( IncIC (p,k) ) is ( Reloc (q,k) ) -halted
proof
let t being (State of S);
assume A4: ( IncIC (p,k) ) c= t;
let P being (Instruction-Sequence of S);
assume that
A5: ( Reloc (q,k) ) c= P;
reconsider Q = ( P +* q ) as (Instruction-Sequence of S);
set s = ( t +* p );
A6: q c= Q by FUNCT_4:25;
C7: p c= ( t +* p ) by FUNCT_4:25;
then p c= s;
then Q halts_on s by A3,A6,EXTPRO_1:def 11;
then consider u being (Element of ( NAT )) such that A8: ( CurInstr (Q,( Comput (Q,s,u) )) ) = ( halt S ) by EXTPRO_1:29;
take u;
( dom P ) = ( NAT ) by PARTFUN1:def 2;
hence ( IC ( Comput (P,t,u) ) ) in ( dom P );
( CurInstr (P,( Comput (P,t,u) )) ) = ( IncAddr (( halt S ),k) ) by A1,A4,A8,CKB26:def 1,A5,A6,C7
.= ( halt S ) by COMPOS_1:11;
hence thesis;
end;

end;
assume A9: ( IncIC (p,k) ) is ( Reloc (q,k) ) -halted;
let t being (State of S);
assume A10: p c= t;
let P being (Instruction-Sequence of S);
assume that
A11: q c= P;
reconsider Q = ( P +* ( Reloc (q,k) ) ) as (Instruction-Sequence of S);
set s = ( t +* ( IncIC (p,k) ) );
A12: ( Reloc (q,k) ) c= Q by FUNCT_4:25;
A13: ( IncIC (p,k) ) c= ( t +* ( IncIC (p,k) ) ) by FUNCT_4:25;
then Q halts_on s by A9,A12,EXTPRO_1:def 11;
then consider u being (Element of ( NAT )) such that A14: ( CurInstr (Q,( Comput (Q,s,u) )) ) = ( halt S ) by EXTPRO_1:29;
take u;
( dom P ) = ( NAT ) by PARTFUN1:def 2;
hence ( IC ( Comput (P,t,u) ) ) in ( dom P );
( IncAddr (( CurInstr (P,( Comput (P,t,u) )) ),k) ) = ( halt S ) by A1,A10,A14,CKB26:def 1,A13,A11,A12
.= ( IncAddr (( halt S ),k) ) by COMPOS_1:11;
hence ( CurInstr (P,( Comput (P,t,u) )) ) = ( halt S ) by COMPOS_1:13;
end;
