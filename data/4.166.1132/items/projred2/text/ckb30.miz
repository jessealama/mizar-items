environ
vocabularies INCPROJ,INCSP_1,SUBSET_1,AFF_2,ANALOAF,PARTFUN1,PROJRED1,FUNCT_1,RELAT_1,TARSKI,ZFMISC_1,PROJRED2;
notations TARSKI,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,RELSET_1,INCSP_1,INCPROJ,PARTFUN1,FUNCT_1,PROJRED1,CKB1,CKB2,CKB3;
definitions CKB1,CKB2,CKB3;
theorems TARSKI,INCPROJ,FUNCT_1,PROJRED1,ZFMISC_1,INCSP_1,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29;
registrations FUNCT_1,RELSET_1,INCPROJ;
constructors DOMAIN_1,PROJRED1,RELSET_1,CKB1,CKB2,CKB3;
requirements SUBSET,BOOLE;
begin
reserve IPP for  Desarguesian  2-dimensional IncProjSp;
reserve a for (POINT of IPP);
reserve b for (POINT of IPP);
reserve c for (POINT of IPP);
reserve q for (POINT of IPP);
reserve A for (LINE of IPP);
reserve B for (LINE of IPP);
reserve C for (LINE of IPP);
reserve O for (LINE of IPP);
reserve Q for (LINE of IPP);
theorem
Th24: ((((((((((((not a on A) & (not b on B)) & (not a on C)) & (not b on C)) & a <> b) & a on O) & b on O) & q on O) & (not q on A)) & q <> b) & (not A,B,C are_concurrent )) implies (ex Q st (((A,C,Q are_concurrent  & (not b on Q)) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,b,B) ) * ( IncProj (A,q,Q) ) ))))
proof
consider c such that A1: (c on A & c on C) by INCPROJ:def 9;
assume A2: (((((((((((not a on A) & (not b on B)) & (not a on C)) & (not b on C)) & a <> b) & a on O) & b on O) & q on O) & (not q on A)) & q <> b) & (not A,B,C are_concurrent ));
A3:now
assume B,C,O are_concurrent ;
then consider Q such that A4: c on Q and A5: (((not b on Q) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,b,B) ) * ( IncProj (A,q,Q) ) )) by A2,A1,CKB29:1;
take Q;
thus A,C,Q are_concurrent  by A1,A4,CKB1:def 1;
thus (((not b on Q) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,b,B) ) * ( IncProj (A,q,Q) ) )) by A5;
end;
now
assume (not B,C,O are_concurrent );
then consider Q such that A6: c on Q and A7: (((not b on Q) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,b,B) ) * ( IncProj (A,q,Q) ) )) by A2,A1,CKB28:1;
take Q;
thus A,C,Q are_concurrent  by A1,A6,CKB1:def 1;
thus (((not b on Q) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,b,B) ) * ( IncProj (A,q,Q) ) )) by A7;
end;
hence thesis by A3;
end;
