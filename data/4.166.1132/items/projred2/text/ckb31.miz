environ
vocabularies INCPROJ,INCSP_1,SUBSET_1,AFF_2,ANALOAF,PARTFUN1,PROJRED1,FUNCT_1,RELAT_1,TARSKI,ZFMISC_1,PROJRED2;
notations TARSKI,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,RELSET_1,INCSP_1,INCPROJ,PARTFUN1,FUNCT_1,PROJRED1,CKB1,CKB2,CKB3;
definitions CKB1,CKB2,CKB3;
theorems TARSKI,INCPROJ,FUNCT_1,PROJRED1,ZFMISC_1,INCSP_1,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
registrations FUNCT_1,RELSET_1,INCPROJ;
constructors DOMAIN_1,PROJRED1,RELSET_1,CKB1,CKB2,CKB3;
requirements SUBSET,BOOLE;
begin
reserve IPP for  Desarguesian  2-dimensional IncProjSp;
reserve a for (POINT of IPP);
reserve b for (POINT of IPP);
reserve q for (POINT of IPP);
reserve o for (POINT of IPP);
reserve A for (LINE of IPP);
reserve B for (LINE of IPP);
reserve C for (LINE of IPP);
reserve O for (LINE of IPP);
reserve Q for (LINE of IPP);
theorem
((((((((((((not a on A) & (not b on B)) & (not a on C)) & (not b on C)) & a <> b) & a on O) & b on O) & q on O) & (not q on B)) & q <> a) & (not A,B,C are_concurrent )) implies (ex Q st (((B,C,Q are_concurrent  & (not a on Q)) & (not q on Q)) & ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( IncProj (Q,q,B) ) * ( IncProj (A,a,Q) ) ))))
proof
assume that
A1: (not a on A)
and
A2: (not b on B)
and
A3: (not a on C)
and
A4: (not b on C)
and
A5: (((a <> b & a on O) & b on O) & q on O)
and
A6: (not q on B)
and
A7: q <> a
and
A8: (not A,B,C are_concurrent );
A9: (( IncProj (C,a,A) ) is  one-to-one & ( IncProj (B,b,C) ) is  one-to-one) by A1,A2,A3,A4,CKB10:1;
(not B,A,C are_concurrent )
proof
assume (not thesis);
then (ex o st ((o on B & o on A) & o on C)) by CKB1:def 1;
hence contradiction by A8,CKB1:def 1;
end;
then consider Q such that A10: B,C,Q are_concurrent  and A11: (not a on Q) and A12: (not q on Q) and A13: ( ( IncProj (C,a,A) ) * ( IncProj (B,b,C) ) ) = ( ( IncProj (Q,a,A) ) * ( IncProj (B,q,Q) ) ) by A1,A2,A3,A4,A5,A6,A7,CKB30:1;
A14: (( IncProj (Q,a,A) ) is  one-to-one & ( IncProj (B,q,Q) ) is  one-to-one) by A1,A6,A11,A12,CKB10:1;
take Q;
thus ((B,C,Q are_concurrent  & (not a on Q)) & (not q on Q)) by A10,A11,A12;
thus ( ( IncProj (C,b,B) ) * ( IncProj (A,a,C) ) ) = ( ( ( IncProj (B,b,C) ) " ) * ( IncProj (A,a,C) ) ) by A2,A4,CKB11:1
.= ( ( ( IncProj (B,b,C) ) " ) * ( ( IncProj (C,a,A) ) " ) ) by A1,A3,CKB11:1
.= ( ( ( IncProj (Q,a,A) ) * ( IncProj (B,q,Q) ) ) " ) by A13,A9,FUNCT_1:44
.= ( ( ( IncProj (B,q,Q) ) " ) * ( ( IncProj (Q,a,A) ) " ) ) by A14,FUNCT_1:44
.= ( ( ( IncProj (B,q,Q) ) " ) * ( IncProj (A,a,Q) ) ) by A1,A11,CKB11:1
.= ( ( IncProj (Q,q,B) ) * ( IncProj (A,a,Q) ) ) by A6,A12,CKB11:1;
end;
