environ
vocabularies RELAT_1,RELAT_2,XBOOLE_0,SUBSET_1,TARSKI,FUNCT_1,ZFMISC_1,WELLORD1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,CKB5,CKB8,CKB9,CKB11,CKB12;
definitions TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,CKB5,CKB8,CKB9,CKB11,CKB12;
theorems TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,RELAT_2,ZFMISC_1,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13;
schemes XBOOLE_0,FUNCT_1;
registrations FUNCT_1,RELAT_1;
constructors TARSKI,SUBSET_1,FUNCT_1,RELAT_2,CKB5,CKB8,CKB9,CKB11,CKB12;
requirements SUBSET,BOOLE;
begin
reserve a for set;
reserve b for set;
reserve X for set;
reserve Y for set;
reserve R for Relation;
theorem
(R well_orders X implies (for Y holds ((Y c= X & Y <> ( {} )) implies (ex a st (a in Y & (for b holds (b in Y implies [ a,b ] in R)))))))
proof
assume A1: R well_orders X;
then A2: R is_reflexive_in X by CKB12:def 1;
A3: R is_connected_in X by A1,CKB12:def 1;
let Y;
assume that
A4: Y c= X
and
A5: Y <> ( {} );
R is_well_founded_in X by A1,CKB12:def 1;
then consider a such that A6: a in Y and A7: ( R -Seg a ) misses Y by A4,A5,CKB9:def 1;
take a;
thus a in Y by A6;
let b;
assume A8: b in Y;
then (not b in ( R -Seg a )) by A7,XBOOLE_0:3;
then (a = b or (not [ b,a ] in R)) by CKB6:1;
then (a <> b implies [ a,b ] in R) by A3,A4,A6,A8,RELAT_2:def 6;
hence thesis by A2,A4,A6,RELAT_2:def 1;
end;
