environ
vocabularies RELAT_1,RELAT_2,XBOOLE_0,SUBSET_1,TARSKI,FUNCT_1,ZFMISC_1,WELLORD1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,CKB5,CKB8,CKB9,CKB11,CKB12;
definitions TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,CKB5,CKB8,CKB9,CKB11,CKB12;
theorems TARSKI,XBOOLE_0,FUNCT_1,RELAT_1,RELAT_2,ZFMISC_1,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes XBOOLE_0,FUNCT_1;
registrations FUNCT_1,RELAT_1;
constructors TARSKI,SUBSET_1,FUNCT_1,RELAT_2,CKB5,CKB8,CKB9,CKB11,CKB12;
requirements SUBSET,BOOLE;
begin
reserve R for Relation;
theorem
(R well_orders ( field R ) iff R is  well-ordering)
proof
thus (R well_orders ( field R ) implies R is  well-ordering)
proof
assume ((((R is_reflexive_in ( field R ) & R is_transitive_in ( field R )) & R is_antisymmetric_in ( field R )) & R is_connected_in ( field R )) & R is_well_founded_in ( field R ));
hence ((((R is  reflexive & R is  transitive) & R is  antisymmetric) & R is  connected) & R is  well_founded) by CKB10:1,RELAT_2:def 9,RELAT_2:def 12,RELAT_2:def 14,RELAT_2:def 16;
end;

assume ((((R is  reflexive & R is  transitive) & R is  antisymmetric) & R is  connected) & R is  well_founded);
hence ((((R is_reflexive_in ( field R ) & R is_transitive_in ( field R )) & R is_antisymmetric_in ( field R )) & R is_connected_in ( field R )) & R is_well_founded_in ( field R )) by CKB10:1,RELAT_2:def 9,RELAT_2:def 12,RELAT_2:def 14,RELAT_2:def 16;
end;
