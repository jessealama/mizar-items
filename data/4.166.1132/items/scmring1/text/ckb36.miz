environ
vocabularies NUMBERS,SUBSET_1,CARD_1,AMI_2,XBOOLE_0,STRUCT_0,ZFMISC_1,ARYTM_3,SUPINF_2,RELAT_1,FINSEQ_1,SCMFSA7B,FUNCSDOM,FUNCT_1,CARD_3,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,MCART_1,PARTFUN1,ORDINAL1,ARYTM_1,FUNCT_2,FUNCT_5,TARSKI,SCMRING1,GROUP_9,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,BINOP_1,CARD_1,NAT_1,RECDEF_2,NUMBERS,STRUCT_0,ALGSTR_0,FUNCSDOM,MCART_1,CARD_3,FINSEQ_1,FINSEQ_4,FUNCOP_1,FUNCT_4,CAT_2,AMI_2,CKB2,CKB4,CKB6,CKB7,CKB14,CKB15,CKB19,CKB23,CKB24,CKB25,CKB27,CKB29,CKB30,CKB32,CKB33,CKB34;
definitions TARSKI,FINSEQ_1,FUNCOP_1,CARD_1,AMI_2,MCART_1,CKB2,CKB4,CKB6,CKB14,CKB15,CKB19,CKB24,CKB25,CKB27,CKB29,CKB30,CKB33,CKB34;
theorems AMI_2,CAT_2,CARD_3,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,FUNCT_4,MCART_1,TARSKI,SUBSET_1,ZFMISC_1,XBOOLE_0,XBOOLE_1,ORDINAL1,NAT_1,RELAT_1,FUNCT_7,RECDEF_2,CKB2,CKB4,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB33,CKB34,CKB35;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,CARD_3,STRUCT_0,GR_CY_1,GCD_1,AMI_2,CARD_1,ORDINAL2,FUNCT_1,CARD_2,ALGSTR_0,ALGSTR_1,FUNCT_2,RELSET_1,FINSET_1,CKB1,CKB3,CKB5;
constructors XXREAL_0,FINSEQ_4,REALSET2,CAT_2,RELSET_1,AMI_2,FUNCOP_1,SETFAM_1,FINSEQ_2,RECDEF_2,CKB2,CKB4,CKB6,CKB14,CKB15,CKB19,CKB23,CKB24,CKB25,CKB27,CKB29,CKB30,CKB32,CKB33,CKB34;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
definition
let R being  good Ring;
let x being (Element of ( SCM-Instr R ));
let s being (SCM-State of R);
func SCM-Exec-Res (x,s) -> (SCM-State of R) equals 
( SCM-Chg (( SCM-Chg (s,( x address_1 ),( s . ( x address_2 ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 1,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) + ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 2,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) - ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 3,( {} ),<* mk,ml *> ]),( SCM-Chg (( SCM-Chg (s,( x address_1 ),( ( s . ( x address_1 ) ) * ( s . ( x address_2 ) ) )) ),( succ ( IC s ) )) ) if (ex mk,ml being (Element of ( SCM-Data-Loc )) st x = [ 4,( {} ),<* mk,ml *> ]),( SCM-Chg (s,( x jump_address )) ) if (ex mk being (Element of ( NAT )) st x = [ 6,<* mk *>,( {} ) ]),( SCM-Chg (s,( IFEQ (( s . ( x cond_address ) ),( 0. R ),( x cjump_address ),( succ ( IC s ) )) )) ) if (ex mk being (Element of ( NAT )) st (ex ml being (Element of ( SCM-Data-Loc )) st x = [ 7,<* mk *>,<* ml *> ])),( SCM-Chg (( SCM-Chg (s,( x const_address ),( x const_value )) ),( succ ( IC s ) )) ) if (ex mk being (Element of ( SCM-Data-Loc )) st (ex r being (Element of R) st x = [ 5,( {} ),<* mk,r *> ])) otherwise s;
coherence;
consistency by MCART_1:25;
end;
