environ
vocabularies NUMBERS,SUBSET_1,CARD_1,AMI_2,XBOOLE_0,STRUCT_0,ZFMISC_1,ARYTM_3,SUPINF_2,RELAT_1,FINSEQ_1,SCMFSA7B,FUNCSDOM,FUNCT_1,CARD_3,AMI_1,NAT_1,FUNCT_4,FUNCOP_1,MCART_1,PARTFUN1,ORDINAL1,ARYTM_1,FUNCT_2,FUNCT_5,TARSKI,SCMRING1,GROUP_9,RECDEF_2;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,BINOP_1,CARD_1,NAT_1,RECDEF_2,NUMBERS,STRUCT_0,ALGSTR_0,FUNCSDOM,MCART_1,CARD_3,FINSEQ_1,FINSEQ_4,FUNCOP_1,FUNCT_4,CAT_2,AMI_2,CKB2,CKB4;
definitions TARSKI,FINSEQ_1,FUNCOP_1,CARD_1,AMI_2,MCART_1,CKB2,CKB4;
theorems AMI_2,CAT_2,CARD_3,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,FUNCT_4,MCART_1,TARSKI,SUBSET_1,ZFMISC_1,XBOOLE_0,XBOOLE_1,ORDINAL1,NAT_1,RELAT_1,FUNCT_7,RECDEF_2,CKB2,CKB4;
schemes FUNCT_2,BINOP_1;
registrations XBOOLE_0,SETFAM_1,RELAT_1,ORDINAL1,FUNCOP_1,FINSEQ_1,CARD_3,STRUCT_0,GR_CY_1,GCD_1,AMI_2,CARD_1,ORDINAL2,FUNCT_1,CARD_2,ALGSTR_0,ALGSTR_1,FUNCT_2,RELSET_1,FINSET_1,CKB1,CKB3,CKB5;
constructors XXREAL_0,FINSEQ_4,REALSET2,CAT_2,RELSET_1,AMI_2,FUNCOP_1,SETFAM_1,FINSEQ_2,RECDEF_2,CKB2,CKB4;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
reserve k for (Element of ( NAT ));
reserve S for non  empty 1-sorted;
Lm1:now
let k being (Element of ( SCM-Memory ));
k in ( { ( NAT ) } \/ ( SCM-Data-Loc ) ) by XBOOLE_0:def 3;
then (k in { ( NAT ) } or k in ( SCM-Data-Loc )) by XBOOLE_0:def 3;
hence (k = ( NAT ) or k in ( SCM-Data-Loc )) by TARSKI:def 1;
end;
definition
let S being non  empty 1-sorted;
func SCM-OK S -> (Function of ( SCM-Memory ),( { (the carrier of S) } \/ { ( NAT ) } )) means 
:Def3: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( it . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( it . k ) = (the carrier of S))));
existence
proof
defpred P[ set,set ]
 means
(($1 = ( NAT ) & $2 = ( NAT )) or ($1 in ( SCM-Data-Loc ) & $2 = (the carrier of S)));
A1:now
let k being (Element of ( SCM-Memory ));
A2: ( { (the carrier of S) } \/ { ( NAT ) } ) = { (the carrier of S),( NAT ) } by ENUMSET1:1;
then A3: ( NAT ) in ( { (the carrier of S) } \/ { ( NAT ) } ) by TARSKI:def 2;
A4: ((P[ k,( NAT ) ] or P[ k,(the carrier of S) ]) or P[ k,( SCM-Instr S ) ]) by Lm1;
(the carrier of S) in ( { (the carrier of S) } \/ { ( NAT ) } ) by A2,TARSKI:def 2;
hence (ex b being (Element of ( { (the carrier of S) } \/ { ( NAT ) } )) st P[ k,b ]) by A3,A4;
end;
consider h being (Function of ( SCM-Memory ),( { (the carrier of S) } \/ { ( NAT ) } )) such that A5: (for a being (Element of ( SCM-Memory )) holds P[ a,( h . a ) ]) from FUNCT_2:sch 3(A1);
take h;
let k being (Element of ( SCM-Memory ));
A6: P[ k,( h . k ) ] by A5;
hence (k = ( NAT ) implies ( h . k ) = ( NAT )) by AMI_2:20;
thus (k in ( SCM-Data-Loc ) implies ( h . k ) = (the carrier of S)) by A6,AMI_2:20,AMI_2:21,XBOOLE_0:3;
thus thesis by A6,AMI_2:21,XBOOLE_0:3;
end;
uniqueness
proof
let f being (Function of ( SCM-Memory ),( { (the carrier of S) } \/ { ( NAT ) } ));
let g being (Function of ( SCM-Memory ),( { (the carrier of S) } \/ { ( NAT ) } ));
assume that
A7: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( f . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( f . k ) = (the carrier of S))))
and
A8: (for k being (Element of ( SCM-Memory )) holds ((k = ( NAT ) implies ( g . k ) = ( NAT )) & (k in ( SCM-Data-Loc ) implies ( g . k ) = (the carrier of S))));
now
let k being (Element of ( SCM-Memory ));
now
per cases  by Lm1;
suppose A9: k = ( NAT );

hence ( f . k ) = ( NAT ) by A7
.= ( g . k ) by A8,A9;
end;
suppose A10: k in ( SCM-Data-Loc );

hence ( f . k ) = (the carrier of S) by A7
.= ( g . k ) by A8,A10;
end;
end;
hence ( f . k ) = ( g . k );
end;
hence thesis by FUNCT_2:63;
end;
end;
