environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,MARGREL1,XBOOLEAN,PARTIT1,FUNCT_1,BVFUNC_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,BVFUNC_1;
definitions BVFUNC_1,XBOOLEAN;
theorems MARGREL1,BVFUNC_1,BVFUNC_4,BVFUNC_5,BVFUNC_6,BVFUNC_7,XBOOLEAN,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11;
registrations XBOOLE_0,XBOOLEAN,MARGREL1;
constructors BINARITH,BVFUNC_1;
requirements ARITHM,BOOLE;
begin
reserve Y for non empty set;
reserve a for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve b for (Element of ( Funcs (Y,( BOOLEAN )) ));
theorem
( ( a 'imp' b ) '&' ( ( 'not' a ) 'imp' b ) ) '<' b
proof
let z being (Element of Y);
reconsider az = ( a . z ) as  boolean set;
A1: ( ( ( a 'imp' b ) '&' ( ( 'not' a ) 'imp' b ) ) . z ) = ( ( ( a 'imp' b ) . z ) '&' ( ( ( 'not' a ) 'imp' b ) . z ) ) by MARGREL1:def 20
.= ( ( ( ( 'not' a ) 'or' b ) . z ) '&' ( ( ( 'not' a ) 'imp' b ) . z ) ) by BVFUNC_4:8
.= ( ( ( ( 'not' a ) 'or' b ) . z ) '&' ( ( ( 'not' ( 'not' a ) ) 'or' b ) . z ) ) by BVFUNC_4:8
.= ( ( ( ( 'not' a ) . z ) 'or' ( b . z ) ) '&' ( ( a 'or' b ) . z ) ) by BVFUNC_1:def 4
.= ( ( ( ( 'not' a ) . z ) 'or' ( b . z ) ) '&' ( ( a . z ) 'or' ( b . z ) ) ) by BVFUNC_1:def 4;
assume A2: ( ( ( a 'imp' b ) '&' ( ( 'not' a ) 'imp' b ) ) . z ) = ( TRUE );
now
assume ( b . z ) <> ( TRUE );
then ( b . z ) = ( FALSE ) by XBOOLEAN:def 3;
then ( ( ( ( 'not' a ) . z ) 'or' ( b . z ) ) '&' ( ( a . z ) 'or' ( b . z ) ) ) = ( ( 'not' az ) '&' az ) by MARGREL1:def 19
.= ( FALSE ) by XBOOLEAN:138;
hence contradiction by A2,A1;
end;
hence thesis;
end;
