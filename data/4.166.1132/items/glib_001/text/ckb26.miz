environ
vocabularies NUMBERS,ABIAN,SUBSET_1,ARYTM_3,XXREAL_0,ARYTM_1,CARD_1,TARSKI,FINSEQ_1,RELAT_1,FUNCT_1,NAT_1,XBOOLE_0,GLIB_000,FINSEQ_5,GRAPH_2,INT_1,FINSET_1,RCOMP_1,WAYBEL_0,ZFMISC_1,MSAFREE2,ORDINAL4,GRAPH_1,FUNCT_4,FUNCOP_1,MCART_1,GLIB_001;
notations TARSKI,XBOOLE_0,CARD_1,NUMBERS,SUBSET_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FINSEQ_1,GRAPH_2,FINSEQ_5,RELSET_1,MCART_1,FINSET_1,NAT_1,NAT_D,FUNCOP_1,FUNCT_4,GLIB_000,ABIAN,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
definitions FUNCOP_1,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
theorems CARD_1,CARD_2,FUNCOP_1,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FINSEQ_5,FINSEQ_6,FINSET_1,FUNCT_1,FUNCT_4,GLIB_000,GRAPH_2,GRAPH_5,INT_1,JORDAN12,MCART_1,NAT_1,NAT_2,PEPIN,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,XREAL_1,PRE_CIRC,XXREAL_0,ABIAN,ORDINAL1,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes FINSEQ_1,FUNCT_1,NAT_1,RECDEF_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,INT_1,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GRAPH_3,CARD_1,SUBSET_1,CKB10;
constructors DOMAIN_1,FUNCT_4,NAT_D,RECDEF_1,FINSEQ_5,GLIB_000,ABIAN,GRAPH_2,XXREAL_2,RELSET_1,FINSEQ_2,RAT_1,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
definition
let G being _Graph;
let W being (Walk of G);
let v being set;
func W .find v ->  odd (Element of ( NAT )) means 
:Def19: ((it <= ( len W ) & ( W . it ) = v) & (for n being  odd Nat holds ((n <= ( len W ) & ( W . n ) = v) implies it <= n))) if v in ( W .vertices() ) otherwise it = ( len W );
existence
proof
hereby
defpred P[ Nat ]
 means
(($1 is  odd & $1 <= ( len W )) & ( W . $1 ) = v);
set vs = ( W .vertexSeq() );
assume A1: v in ( W .vertices() );
now
consider i being Nat such that A2: i in ( dom vs ) and A3: ( vs . i ) = v by A1,FINSEQ_2:10;
set n1 = ( 2 * i );
reconsider n1 as  even Nat;
set n = ( n1 - 1 );
A4: 1 <= i by A2,FINSEQ_3:25;
then 1 <= ( i + i ) by NAT_1:12;
then reconsider n as  odd (Element of ( NAT )) by INT_1:5;
take n;
A5: i <= ( len vs ) by A2,FINSEQ_3:25;
then ( i * 2 ) <= ( ( len vs ) * 2 ) by XREAL_1:64;
then ( i * 2 ) <= ( ( len W ) + 1 ) by CKB21:def 1;
then ( n1 - 1 ) <= ( ( ( len W ) + 1 ) - 1 ) by XREAL_1:13;
hence n <= ( len W );
thus ( W . n ) = v by A3,A4,A5,CKB21:def 1;
end;
then A6: (ex k being Nat st P[ k ]);
consider IT being Nat such that A7: (P[ IT ] & (for n being Nat holds (P[ n ] implies IT <= n))) from NAT_1:sch 5(A6);
reconsider IT as  odd (Element of ( NAT )) by A7,ORDINAL1:def 12;
take IT;
thus (IT <= ( len W ) & ( W . IT ) = v) by A7;
let n being  odd Nat;
assume that
A8: n <= ( len W )
and
A9: ( W . n ) = v;
thus IT <= n by A7,A8,A9;
end;
set IT = ( len W );
assume (not v in ( W .vertices() ));
take IT;
thus thesis;
end;
uniqueness
proof
let IT1 being  odd (Element of ( NAT ));
let IT2 being  odd (Element of ( NAT ));
hereby
assume v in ( W .vertices() );
assume that
A10: IT1 <= ( len W )
and
A11: ( W . IT1 ) = v
and
A12: (for n being  odd Nat holds ((n <= ( len W ) & ( W . n ) = v) implies IT1 <= n));
assume that
A13: IT2 <= ( len W )
and
A14: ( W . IT2 ) = v
and
A15: (for n being  odd Nat holds ((n <= ( len W ) & ( W . n ) = v) implies IT2 <= n));
A16: IT2 <= IT1 by A10,A11,A15;
IT1 <= IT2 by A12,A13,A14;
hence IT1 = IT2 by A16,XXREAL_0:1;
end;
assume (not v in ( W .vertices() ));
thus thesis;
end;
consistency;
end;
