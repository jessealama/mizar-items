environ
vocabularies NET_1,XBOOLE_0,TARSKI,ZFMISC_1,RELAT_1,FF_SIEC,STRUCT_0,PETRI;
notations TARSKI,XBOOLE_0,ZFMISC_1,RELAT_1,PARTIT_2,STRUCT_0,PETRI,NET_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
definitions NET_1,STRUCT_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
theorems ZFMISC_1,RELAT_1,SYSREL,TARSKI,RELSET_1,NET_1,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19;
registrations XBOOLE_0,RELAT_1,NET_1,STRUCT_0,PARTIT_2;
constructors TARSKI,NET_1,STRUCT_0,PETRI,PARTIT_2,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve M for Pnet;
theorem
Th18: (((( ( ( Flow M ) ~ ) | (the carrier' of M) ) misses ( id ( Elements M ) ) & ( ( Flow M ) | (the carrier' of M) ) misses ( id ( Elements M ) )) & ( ( ( Flow M ) ~ ) | (the carrier of M) ) misses ( id ( Elements M ) )) & ( ( Flow M ) | (the carrier of M) ) misses ( id ( Elements M ) ))
proof
set T = ( id ( Elements M ) );
thus ( ( ( Flow M ) ~ ) | (the carrier' of M) ) misses ( id ( Elements M ) )
proof
set R = ( ( ( Flow M ) ~ ) | (the carrier' of M) );
(for x holds (for y holds (not [ x,y ] in ( R /\ T ))))
proof
let x;
let y;
assume A1: [ x,y ] in ( R /\ T );
then A2: [ x,y ] in R by XBOOLE_0:def 4;
A3: [ x,y ] in T by A1,XBOOLE_0:def 4;
A4: [ x,y ] in ( ( Flow M ) ~ ) by A2,RELAT_1:def 11;
A5: x in (the carrier' of M) by A2,RELAT_1:def 11;
[ y,x ] in ( Flow M ) by A4,RELAT_1:def 7;
then x <> y by A5,CKB13:1;
hence thesis by A3,RELAT_1:def 10;
end;
then ( R /\ T ) = ( {} ) by RELAT_1:37;
hence thesis by XBOOLE_0:def 7;
end;

thus ( ( Flow M ) | (the carrier' of M) ) misses ( id ( Elements M ) )
proof
set R = ( ( Flow M ) | (the carrier' of M) );
(for x holds (for y holds (not [ x,y ] in ( R /\ T ))))
proof
let x;
let y;
assume A6: [ x,y ] in ( R /\ T );
then A7: [ x,y ] in R by XBOOLE_0:def 4;
A8: [ x,y ] in T by A6,XBOOLE_0:def 4;
A9: x in (the carrier' of M) by A7,RELAT_1:def 11;
[ x,y ] in ( Flow M ) by A7,RELAT_1:def 11;
then x <> y by A9,CKB13:1;
hence thesis by A8,RELAT_1:def 10;
end;
then ( R /\ T ) = ( {} ) by RELAT_1:37;
hence thesis by XBOOLE_0:def 7;
end;

thus ( ( ( Flow M ) ~ ) | (the carrier of M) ) misses ( id ( Elements M ) )
proof
set R = ( ( ( Flow M ) ~ ) | (the carrier of M) );
(for x holds (for y holds (not [ x,y ] in ( R /\ T ))))
proof
let x;
let y;
assume A10: [ x,y ] in ( R /\ T );
then A11: [ x,y ] in R by XBOOLE_0:def 4;
A12: [ x,y ] in T by A10,XBOOLE_0:def 4;
A13: [ x,y ] in ( ( Flow M ) ~ ) by A11,RELAT_1:def 11;
A14: x in (the carrier of M) by A11,RELAT_1:def 11;
[ y,x ] in ( Flow M ) by A13,RELAT_1:def 7;
then x <> y by A14,CKB13:1;
hence thesis by A12,RELAT_1:def 10;
end;
then ( R /\ T ) = ( {} ) by RELAT_1:37;
hence thesis by XBOOLE_0:def 7;
end;

set R = ( ( Flow M ) | (the carrier of M) );
(for x holds (for y holds (not [ x,y ] in ( R /\ T ))))
proof
let x;
let y;
assume A15: [ x,y ] in ( R /\ T );
then A16: [ x,y ] in R by XBOOLE_0:def 4;
A17: [ x,y ] in T by A15,XBOOLE_0:def 4;
A18: x in (the carrier of M) by A16,RELAT_1:def 11;
[ x,y ] in ( Flow M ) by A16,RELAT_1:def 11;
then x <> y by A18,CKB13:1;
hence thesis by A17,RELAT_1:def 10;
end;
then ( R /\ T ) = ( {} ) by RELAT_1:37;
hence thesis by XBOOLE_0:def 7;
end;
