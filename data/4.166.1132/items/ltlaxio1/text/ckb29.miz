environ
vocabularies FINSEQ_1,CARD_1,ORDINAL4,SUBSET_1,NUMBERS,ARYTM_3,TARSKI,RELAT_1,XBOOLE_0,FUNCT_1,QC_LANG1,XBOOLEAN,HILBERT1,MODELC_2,CQC_THE1,NAT_1,XXREAL_0,LTLAXIO1,ORDINAL1,ARYTM_1,ZF_LANG,PARTFUN1,MARGREL1,FUNCT_2,HILBERT2,ZFMISC_1,FUNCOP_1,ZF_MODEL,PBOOLE,GLIB_000;
notations TARSKI,XBOOLE_0,ZFMISC_1,DOMAIN_1,SUBSET_1,RELAT_1,PARTFUN1,NUMBERS,XCMPLX_0,NAT_1,XXREAL_0,NAT_D,FUNCT_1,FUNCT_2,BINOP_1,ORDINAL1,FINSEQ_1,HILBERT1,HILBERT2,PBOOLE,XBOOLEAN,MARGREL1,AOFA_I00,CKB5,CKB6,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
definitions XBOOLEAN,TARSKI,MARGREL1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20;
theorems TARSKI,NAT_1,XBOOLE_0,XXREAL_0,FINSEQ_1,NAT_D,XBOOLEAN,FUNCT_2,PARTFUN1,XREAL_1,ZFMISC_1,ORDINAL1,FUNCOP_1,HILBERT2,BINOP_1,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28;
schemes NAT_1,XBOOLE_0,FUNCT_2,FINSEQ_1,BINOP_1,HILBERT2;
registrations SUBSET_1,ORDINAL1,FUNCT_1,XXREAL_0,NAT_1,XBOOLEAN,RELSET_1,MARGREL1,XBOOLE_0,XREAL_0,FUNCT_2,HILBERT1;
constructors XXREAL_0,NAT_D,RELSET_1,AOFA_I00,HILBERT2,DOMAIN_1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20;
requirements NUMERALS,BOOLE,SUBSET,ARITHM,REAL;
begin
reserve p for (Element of ( LTLB_WFF ));
reserve q for (Element of ( LTLB_WFF ));
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve M for LTLModel;
theorem
(( ( SAT M ) . [ n,( p 'R' q ) ] ) = 1 iff ((ex i st (( ( SAT M ) . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( ( SAT M ) . [ ( n + j ),q ] ) = 1)))) or (for i holds ( ( SAT M ) . [ ( n + i ),q ] ) = 1)))
proof
set sm = ( SAT M );
set notp = ( 'not' p );
set notq = ( 'not' q );
thus (( sm . [ n,( p 'R' q ) ] ) = 1 implies ((ex i st (( sm . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1)))) or (for i holds ( sm . [ ( n + i ),q ] ) = 1)))
proof
defpred P[ Nat ]
 means
(( sm . [ ( n + $1 ),q ] ) = 1 & ( sm . [ ( n + $1 ),p ] ) = ( 0 ));
assume ( sm . [ n,( p 'R' q ) ] ) = 1;
then A1: ( sm . [ n,( ( 'not' p ) 'U' ( 'not' q ) ) ] ) = ( 0 ) by CKB21:1;
A2:now
let i being Nat;
reconsider ii = i as (Element of ( NAT )) by ORDINAL1:def 12;
per cases  by A1,CKB28:1;
suppose (not ( sm . [ ( n + ii ),( 'not' q ) ] ) = 1);

hence ((not ( sm . [ ( n + i ),( 'not' q ) ] ) = 1) or (ex j being Nat st (j < i & (not ( sm . [ ( n + j ),( 'not' p ) ] ) = 1))));
end;
suppose (ex j st (j < i & (not ( sm . [ ( n + j ),( 'not' p ) ] ) = 1)));

hence ((not ( sm . [ ( n + i ),( 'not' q ) ] ) = 1) or (ex j being Nat st (j < i & (not ( sm . [ ( n + j ),( 'not' p ) ] ) = 1))));
end;
end;
assume that
A3: (not (ex i st (( sm . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1)))))
and
A4: (not (for i holds ( sm . [ ( n + i ),q ] ) = 1));
A5:now
let i being Nat;
reconsider ii = i as (Element of ( NAT )) by ORDINAL1:def 12;
((not ( sm . [ ( n + ii ),p ] ) = 1) or (ex j st (j <= ii & (not ( sm . [ ( n + j ),q ] ) = 1)))) by A3;
hence ((not ( sm . [ ( n + i ),p ] ) = 1) or (ex j being Nat st (j <= i & (not ( sm . [ ( n + j ),q ] ) = 1))));
end;
A6: (for k being Nat holds ((for m being Nat holds (m < k implies P[ m ])) implies P[ k ]))
proof
let k being Nat;
assume A7: (for m being Nat holds (m < k implies P[ m ]));
now
assume (ex j being Nat st (j < k & (not ( sm . [ ( n + j ),( 'not' p ) ] ) = 1)));
then consider j being Nat such that A8: j < k and A9: (not ( sm . [ ( n + j ),( 'not' p ) ] ) = 1);
(not ( sm . [ ( n + j ),p ] ) = ( 0 )) by A9,CKB21:1;
hence contradiction by A7,A8;
end;
then (not ( sm . [ ( n + k ),( 'not' q ) ] ) = 1) by A2;
then A10: (not ( sm . [ ( n + k ),q ] ) = ( 0 )) by CKB21:1;
then A11: ( sm . [ ( n + k ),q ] ) = 1 by XBOOLEAN:def 3;
now
assume (ex j being Nat st (j <= k & (not ( sm . [ ( n + j ),q ] ) = 1)));
then consider j being Nat such that A12: j <= k and A13: (not ( sm . [ ( n + j ),q ] ) = 1);
per cases ;
suppose j < k;

hence contradiction by A7,A13;
end;
suppose (not j < k);

hence contradiction by A11,A12,A13,XXREAL_0:1;
end;
end;
then (not ( sm . [ ( n + k ),p ] ) = 1) by A5;
hence P[ k ] by A10,XBOOLEAN:def 3;
end;
(for i being Nat holds P[ i ]) from NAT_1:sch 4(A6);
hence contradiction by A4;
end;

thus (((ex i st (( sm . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1)))) or (for i holds ( sm . [ ( n + i ),q ] ) = 1)) implies ( sm . [ n,( p 'R' q ) ] ) = 1)
proof
assume A14: ((ex i st (( sm . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1)))) or (for i holds ( sm . [ ( n + i ),q ] ) = 1));
assume (not ( sm . [ n,( p 'R' q ) ] ) = 1);
then (not ( sm . [ n,( notp 'U' notq ) ] ) = ( 0 )) by CKB21:1;
then A15: ( sm . [ n,( notp 'U' notq ) ] ) = 1 by XBOOLEAN:def 3;
per cases  by A14;
suppose (ex i st (( sm . [ ( n + i ),p ] ) = 1 & (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1))));

then consider i such that A16: ( sm . [ ( n + i ),p ] ) = 1 and A17: (for j holds (j <= i implies ( sm . [ ( n + j ),q ] ) = 1));
consider k such that A18: ( sm . [ ( n + k ),notq ] ) = 1 and A19: (for j holds (j < k implies ( sm . [ ( n + j ),notp ] ) = 1)) by A15,CKB28:1;
per cases ;
suppose k <= i;

then ( sm . [ ( n + k ),q ] ) = 1 by A17;
hence contradiction by A18,CKB21:1;
end;
suppose (not k <= i);

then ( sm . [ ( n + i ),notp ] ) = 1 by A19;
hence contradiction by A16,CKB21:1;
end;
end;
suppose A20: (for i holds ( sm . [ ( n + i ),q ] ) = 1);

consider i such that A21: ( sm . [ ( n + i ),notq ] ) = 1 and (for j holds (j < i implies ( sm . [ ( n + j ),notp ] ) = 1)) by A15,CKB28:1;
( sm . [ ( n + i ),q ] ) = ( 0 ) by A21,CKB21:1;
hence contradiction by A20;
end;
end;

end;
