environ
vocabularies FINSEQ_1,CARD_1,ORDINAL4,SUBSET_1,NUMBERS,ARYTM_3,TARSKI,RELAT_1,XBOOLE_0,FUNCT_1,QC_LANG1,XBOOLEAN,HILBERT1,MODELC_2,CQC_THE1,NAT_1,XXREAL_0,LTLAXIO1,ORDINAL1,ARYTM_1,ZF_LANG,PARTFUN1,MARGREL1,FUNCT_2,HILBERT2,ZFMISC_1,FUNCOP_1,ZF_MODEL,PBOOLE,GLIB_000;
notations TARSKI,XBOOLE_0,ZFMISC_1,DOMAIN_1,SUBSET_1,RELAT_1,PARTFUN1,NUMBERS,XCMPLX_0,NAT_1,XXREAL_0,NAT_D,FUNCT_1,FUNCT_2,BINOP_1,ORDINAL1,FINSEQ_1,HILBERT1,HILBERT2,PBOOLE,XBOOLEAN,MARGREL1,AOFA_I00,CKB5,CKB6,CKB7,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
definitions XBOOLEAN,TARSKI,MARGREL1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20;
theorems TARSKI,NAT_1,XBOOLE_0,XXREAL_0,FINSEQ_1,NAT_D,XBOOLEAN,FUNCT_2,PARTFUN1,XREAL_1,ZFMISC_1,ORDINAL1,FUNCOP_1,HILBERT2,BINOP_1,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB23,CKB24;
schemes NAT_1,XBOOLE_0,FUNCT_2,FINSEQ_1,BINOP_1,HILBERT2;
registrations SUBSET_1,ORDINAL1,FUNCT_1,XXREAL_0,NAT_1,XBOOLEAN,RELSET_1,MARGREL1,XBOOLE_0,XREAL_0,FUNCT_2,HILBERT1;
constructors XXREAL_0,NAT_D,RELSET_1,AOFA_I00,HILBERT2,DOMAIN_1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB20;
requirements NUMERALS,BOOLE,SUBSET,ARITHM,REAL;
begin
reserve A for (Element of ( LTLB_WFF ));
reserve i for (Element of ( NAT ));
reserve j for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve M for LTLModel;
theorem
Th10: ( ( SAT M ) . [ n,( 'X' A ) ] ) = ( ( SAT M ) . [ ( n + 1 ),A ] )
proof
set f = ( TFALSUM );
set sm = ( SAT M );
per cases  by XBOOLEAN:def 3;
suppose A1: ( ( SAT M ) . [ n,( f 'Us' A ) ] ) = 1;

then consider i such that A2: (( 0 ) < i & ( sm . [ ( n + i ),A ] ) = 1) and A3: (for j holds ((1 <= j & j < i) implies ( sm . [ ( n + j ),f ] ) = 1)) by CKB20:def 1;
now
assume A4: 1 < i;
(not ( sm . [ ( n + 1 ),f ] ) = 1) by CKB20:def 1;
hence contradiction by A3,A4;
end;
hence thesis by A1,A2,NAT_1:25;
end;
suppose A5: ( ( SAT M ) . [ n,( f 'Us' A ) ] ) = ( 0 );

now
assume A6: ( sm . [ ( n + 1 ),A ] ) = 1;
(((not ( 0 ) < 1) or (not ( sm . [ ( n + 1 ),A ] ) = 1)) or (not (for j holds ((1 <= j & j < 1) implies ( sm . [ ( n + j ),f ] ) = 1)))) by A5,CKB20:def 1;
hence contradiction by A6;
end;
hence thesis by A5,XBOOLEAN:def 3;
end;
end;
