environ
vocabularies NUMBERS,FSM_1,SCMFSA_2,SF_MASTR,AMI_1,SCMFSA7B,SUBSET_1,UNIALG_2,SCMFSA6C,SCMFSA6B,FUNCT_1,XBOOLE_0,FUNCT_4,CARD_1,AMISTD_2,RELAT_1,GRAPHSP,AMI_3,PARTFUN1,COMPLEX1,SCMFSA8B,TURING_1,SCMFSA_9,ARYTM_3,FUNCOP_1,SCMFSA8A,CARD_3,SFMASTR1,ARYTM_1,XXREAL_0,SCMFSA6A,TARSKI,SCMFSA9A,FINSEQ_1,GRAPH_2,AOFA_I00,FUNCT_2,FINSEQ_2,SFMASTR3,NAT_1,SCMNORM,PBOOLE,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,NUMBERS,XCMPLX_0,CARD_3,INT_2,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,FUNCT_7,PBOOLE,FUNCOP_1,GRAPH_2,FINSEQ_1,FINSEQ_2,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,SCMFSA_2,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA_9,SFMASTR1,SCMFSA9A,XXREAL_0,NAT_1,CKB11,CKB19,CKB25;
definitions TARSKI,SCMFSA7B,SCMFSA9A,GRAPH_2,SCMFSA6A,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB11,CKB19,CKB25;
theorems TARSKI,ZFMISC_1,ENUMSET1,ABSVALUE,NAT_1,INT_1,RELAT_1,FUNCT_7,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,GRAPH_2,SCMFSA_2,MEMSTR_0,SCMFSA6A,SCMFSA6B,SF_MASTR,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA8C,SCMFSA_9,SFMASTR1,SCMFSA9A,SFMASTR2,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,PARTFUN1,AFINSQ_1,PBOOLE,EXTPRO_1,CARD_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB28,CKB29,CKB30;
schemes FUNCT_2,NAT_1;
registrations SUBSET_1,SETFAM_1,FUNCT_1,ORDINAL1,RELSET_1,FUNCT_2,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,CARD_3,SCMFSA_2,SF_MASTR,SCMFSA6B,SCMFSA6C,SCMFSA7B,SCMFSA8A,SCMFSA8B,SCMFSA_9,SFMASTR1,XBOOLE_0,VALUED_0,AFINSQ_1,FUNCOP_1,COMPOS_1,EXTPRO_1,PBOOLE,FUNCT_4,MEMSTR_0,SCMFSA6A,CKB7,CKB27;
constructors SETWISEO,REAL_1,INT_2,MESFUNC1,SCMFSA6A,SCMFSA6B,SCMFSA6C,SCMFSA8A,SCMFSA8B,SCMFSA_9,SFMASTR1,SCMFSA9A,RELSET_1,FUNCT_4,PBOOLE,GRAPH_2,SCMFSA7B,MEMSTR_0,AMISTD_1,CKB11,CKB19,CKB25;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve s for (State of ( SCM+FSA ));
reserve a for  read-write Int-Location;
reserve bb for Int-Location;
reserve cc for Int-Location;
reserve x for Int-Location;
reserve f for FinSeq-Location;
reserve I for (Program of ( SCM+FSA ));
reserve Ig for  good (Program of ( SCM+FSA ));
reserve k for (Element of ( NAT ));
reserve p for (Instruction-Sequence of ( SCM+FSA ));
Lm1:now
let s;
let a;
let bb;
let cc;
let p;
let I being  good (Program of ( SCM+FSA ));
assume that
A1: ( s . ( intloc ( 0 ) ) ) = 1
and
A2: ( ProperForUpBody a,bb,cc,I,s,p or I is  parahalting);
A3:  ProperForUpBody a,bb,cc,I,s,p by A2,CKB20:1;
set scb1 = ( ( ( s . cc ) - ( s . bb ) ) + 1 );
set SF = ( StepForUp (a,bb,cc,I,p,s) );
set aux = ( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) );
set IB = ( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (aux,( intloc ( 0 ) )) ) );
set s2 = ( ( s +* (aux,( ( ( s . cc ) - ( s . bb ) ) + 1 )) ) +* (a,( s . bb )) );
set p2 = p;
set IB2 = ( ( AddTo (a,( intloc ( 0 ) )) ) ';' ( SubFrom (aux,( intloc ( 0 ) )) ) );
set SW2 = ( StepWhile>0 (aux,IB,p2,s2) );
A4: SF = SW2;
A5: IB = ( I ';' ( ( AddTo (a,( intloc ( 0 ) )) ) ';' ( SubFrom (aux,( intloc ( 0 ) )) ) ) ) by SCMFSA6A:28;
A6:  ProperBodyWhile>0 aux,IB,s2,p2
proof
let k being (Element of ( NAT ));
A7: IB2 is_closed_on ( IExec (I,( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ),( SF . k )) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by SCMFSA7B:18;
assume ( ( ( StepWhile>0 (aux,IB,p2,s2) ) . k ) . aux ) > ( 0 );
then A8: k < scb1 by A1,A3,A4,CKB23:1;
then A9: I is_closed_on ( SF . k ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A3,CKB19:def 1;
A10: ( ( SF . k ) . ( intloc ( 0 ) ) ) = 1 by A1,A3,A8,CKB22:1;
I is_halting_on ( SF . k ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A3,A8,CKB19:def 1;
then A11: I is_halting_on ( Initialized ( SF . k ) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A10,A9,SFMASTR2:5;
A12: I is_closed_on ( Initialized ( SF . k ) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A10,A9,SFMASTR2:4;
then A13: IB is_closed_on ( Initialized ( SF . k ) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A5,A11,A7,SFMASTR1:2;
hence IB is_closed_on ( SW2 . k ),( p2 +* ( while>0 (aux,IB) ) ) by A10,SFMASTR2:4;
IB2 is_halting_on ( IExec (I,( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ),( SF . k )) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by SCMFSA7B:19;
then IB is_halting_on ( Initialized ( SF . k ) ),( p +* ( while>0 (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) ),( intloc ( 0 ) )) ) )) ) ) by A5,A12,A11,A7,SFMASTR1:3;
hence thesis by A10,A13,SFMASTR2:5;
end;
set i3 = ( a := bb );
set i2 = ( AddTo (aux,( intloc ( 0 ) )) );
set i1 = ( SubFrom (aux,bb) );
set i0 = ( aux := cc );
set s1 = ( IExec (( ( ( i0 ';' i1 ) ';' i2 ) ';' i3 ),p,s) );
set p1 = p;
set SW1 = ( StepWhile>0 (aux,IB,p1,s1) );
deffunc U((State of ( SCM+FSA ))) = ( abs ( $1 . aux ) );
consider f being (Function of ( product (the Object-Kind of ( SCM+FSA )) ),( NAT )) such that A14: (for x being (Element of ( product (the Object-Kind of ( SCM+FSA )) )) holds ( f . x ) = U(x)) from FUNCT_2:sch 4;
A15: (for x being (State of ( SCM+FSA )) holds ( f . x ) = U(x))
proof
let x being (State of ( SCM+FSA ));
reconsider x as (Element of ( product (the Object-Kind of ( SCM+FSA )) )) by CARD_3:107;
( f . x ) = U(x) by A14;
hence thesis;
end;
A16: ( DataPart s1 ) = ( DataPart s2 ) by A1,CKB18:1;
thus  ProperBodyWhile>0 aux,IB,s1,p1
proof
let k being (Element of ( NAT ));
assume A17: ( ( ( StepWhile>0 (aux,IB,p1,s1) ) . k ) . aux ) > ( 0 );
A18: ( DataPart ( SW2 . k ) ) = ( DataPart ( SW1 . k ) ) by A16,A6,SCMFSA9A:34;
then A19: ( ( SW1 . k ) . aux ) = ( ( SW2 . k ) . aux ) by SCMFSA6A:7;
then A20: IB is_closed_on ( SW2 . k ),( p2 +* ( while>0 (aux,IB) ) ) by A6,A17,SCMFSA9A:def 4;
hence IB is_closed_on ( SW1 . k ),( p2 +* ( while>0 (aux,IB) ) ) by A18,SCMFSA8B:3;
IB is_halting_on ( SW2 . k ),( p2 +* ( while>0 (aux,IB) ) ) by A6,A17,A19,SCMFSA9A:def 4;
hence thesis by A18,A20,SCMFSA8B:5;
end;

A21: (for k being (Element of ( NAT )) holds (( f . ( SW1 . ( k + 1 ) ) ) < ( f . ( SW1 . k ) ) or ( ( SW1 . k ) . aux ) <= ( 0 )))
proof
let k being (Element of ( NAT ));
A22: ( DataPart ( SW1 . k ) ) = ( DataPart ( SW2 . k ) ) by A16,A6,SCMFSA9A:34;
then A23: ( ( SW1 . k ) . aux ) = ( ( SW2 . k ) . aux ) by SCMFSA6A:7;
( DataPart ( SW2 . ( k + 1 ) ) ) = ( DataPart ( SW1 . ( k + 1 ) ) ) by A16,A6,SCMFSA9A:34;
then A24: ( ( SW1 . ( k + 1 ) ) . aux ) = ( ( SW2 . ( k + 1 ) ) . aux ) by SCMFSA6A:7;
now
assume A25: ( ( SW1 . k ) . aux ) > ( 0 );
then A26: k < scb1 by A1,A3,A4,A23,CKB23:1;
k < scb1 by A1,A3,A4,A23,A25,CKB23:1;
then A27: ( ( ( SW2 . k ) . aux ) + k ) = ( ( ( s . cc ) - ( s . bb ) ) + 1 ) by A1,A3,A4,CKB22:1;
reconsider scb1 as (Element of ( NAT )) by A26,INT_1:3;
A28: ( k + 1 ) <= scb1 by A26,NAT_1:13;
then A29: ( ( ( SW2 . ( k + 1 ) ) . aux ) + ( k + 1 ) ) = ( ( ( s . cc ) - ( s . bb ) ) + 1 ) by A1,A3,A4,CKB22:1;
A30: ( f . ( SW1 . k ) ) = ( abs ( ( SW1 . k ) . aux ) ) by A15
.= ( ( SW2 . k ) . aux ) by A23,A25,ABSVALUE:def 1;
per cases ;
suppose A31: ( ( SW1 . ( k + 1 ) ) . aux ) > ( 0 );

( f . ( SW1 . ( k + 1 ) ) ) = ( abs ( ( SW1 . ( k + 1 ) ) . aux ) ) by A15
.= ( ( scb1 - k ) - 1 ) by A24,A29,A31,ABSVALUE:def 1;
hence ( f . ( SW1 . ( k + 1 ) ) ) < ( f . ( SW1 . k ) ) by A30,A27,XREAL_1:146;
end;
suppose A32: ( ( SW1 . ( k + 1 ) ) . aux ) <= ( 0 );

( ( SW2 . ( k + 1 ) ) . aux ) = ( scb1 - ( k + 1 ) ) by A29;
then A33: ( ( SW1 . ( k + 1 ) ) . aux ) = ( 0 ) by A24,A28,A32,XREAL_1:48;
( f . ( SW1 . ( k + 1 ) ) ) = ( abs ( ( SW1 . ( k + 1 ) ) . aux ) ) by A15
.= ( 0 ) by A33,ABSVALUE:def 1;
hence ( f . ( SW1 . ( k + 1 ) ) ) < ( f . ( SW1 . k ) ) by A22,A25,A30,SCMFSA6A:7;
end;
end;
hence thesis;
end;
thus  WithVariantWhile>0 aux,IB,s1,p1
proof
take f;
thus thesis by A21;
end;

end;
theorem
Th32: ((( s . ( intloc ( 0 ) ) ) = 1 & ( ProperForUpBody a,bb,cc,Ig,s,p or Ig is  parahalting)) implies (( for-up (a,bb,cc,Ig) ) is_closed_on s,p & ( for-up (a,bb,cc,Ig) ) is_halting_on s,p))
proof
set I = Ig;
assume that
A1: ( s . ( intloc ( 0 ) ) ) = 1
and
A2: ( ProperForUpBody a,bb,cc,I,s,p or I is  parahalting);
set i3 = ( a := bb );
set aux = ( 1 -stRWNotIn ( { a,bb,cc } \/ ( UsedIntLoc I ) ) );
set i0 = ( aux := cc );
set i1 = ( SubFrom (aux,bb) );
set i2 = ( AddTo (aux,( intloc ( 0 ) )) );
set IB = ( ( I ';' ( AddTo (a,( intloc ( 0 ) )) ) ) ';' ( SubFrom (aux,( intloc ( 0 ) )) ) );
set I4 = ( while>0 (aux,IB) );
set I03 = ( ( ( i0 ';' i1 ) ';' i2 ) ';' i3 );
set s1 = ( IExec (I03,p,s) );
set p1 = p;
A3: ( ProperBodyWhile>0 aux,IB,s1,p1 &  WithVariantWhile>0 aux,IB,s1,p1) by A1,A2,Lm1;
then A4: I4 is_closed_on s1,p1 by SCMFSA9A:27;
reconsider I03 as  parahalting (Program of ( SCM+FSA ));
set MI = ( for-up (a,bb,cc,I) );
A5: (I03 is_closed_on ( Initialized s ),p & I03 is_halting_on ( Initialized s ),p) by SCMFSA7B:18,SCMFSA7B:19;
then A6: MI is_closed_on ( Initialized s ),p by A4,SFMASTR1:2;
hence MI is_closed_on s,p by A1,SFMASTR2:4;
I4 is_halting_on s1,p1 by A3,SCMFSA9A:27;
then MI is_halting_on ( Initialized s ),p by A5,A4,SFMASTR1:3;
hence thesis by A1,A6,SFMASTR2:5;
end;
