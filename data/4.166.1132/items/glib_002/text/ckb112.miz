environ
vocabularies NUMBERS,FINSET_1,ARYTM_3,CARD_1,SUBSET_1,XBOOLE_0,GLIB_000,RELAT_2,GLIB_001,TREES_1,ZFMISC_1,FUNCT_1,FINSEQ_1,GRAPH_1,ABIAN,XXREAL_0,RELAT_1,RCOMP_1,FUNCOP_1,ARYTM_1,WAYBEL_0,TARSKI,PBOOLE,SETFAM_1,ORDINAL1,NAT_1,GLIB_002;
notations TARSKI,XBOOLE_0,ZFMISC_1,CARD_1,NUMBERS,SUBSET_1,SETFAM_1,DOMAIN_1,XCMPLX_0,ABIAN,XXREAL_0,RELAT_1,FUNCT_1,PBOOLE,FUNCT_2,FINSEQ_1,FINSET_1,NAT_1,FUNCOP_1,GLIB_000,GLIB_001,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB26,CKB27,CKB29,CKB30,CKB31,CKB32,CKB56,CKB57,CKB58;
definitions TARSKI,FUNCOP_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB27,CKB29,CKB31,CKB32,CKB56,CKB57,CKB58;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,GLIB_000,GLIB_001,ABIAN,INT_1,JORDAN12,NAT_1,ORDINAL1,PENCIL_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_1,ZFMISC_1,XREAL_1,XXREAL_0,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB27,CKB29,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB51,CKB52,CKB53,CKB56,CKB57,CKB58,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111;
schemes NAT_1,SUBSET_1,GLIB_000;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,INT_1,CARD_1,GLIB_000,ABIAN,GLIB_001,FUNCT_2,PARTFUN1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB23,CKB24,CKB25,CKB28,CKB50,CKB54,CKB55,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67;
constructors DOMAIN_1,CARD_FIL,GLIB_001,VALUED_1,XXREAL_2,WELLORD2,RELSET_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB27,CKB29,CKB30,CKB31,CKB56,CKB57,CKB58;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
reserve G for _Graph;
reserve e for set;
reserve v for (Vertex of G);
reserve v1 for (Vertex of G);
reserve v2 for (Vertex of G);
theorem
Th46: (for G being  finite _Graph holds (G is  Tree-like iff (G is  acyclic & ( G .order() ) = ( ( G .size() ) + 1 ))))
proof
defpred P[ Nat ]
 means
(for G being  finite  acyclic _Graph holds ((( G .order() ) = $1 & ( G .order() ) = ( ( G .size() ) + 1 )) implies G is  connected));
let G being  finite _Graph;
hereby
defpred P[ Nat ]
 means
(for T being  finite  Tree-like _Graph holds (( T .order() ) = $1 implies $1 = ( ( T .size() ) + 1 )));
assume A1: G is  Tree-like;
hence G is  acyclic;
now
let T being  finite  Tree-like _Graph;
set VT = ( the_Vertices_of T );
set ET = ( the_Edges_of T );
assume ( T .order() ) = 1;
then ( card VT ) = 1 by GLIB_000:def 24;
then consider v being set such that A2: VT = { v } by CARD_2:42;
reconsider v as (Vertex of T) by A2,TARSKI:def 1;
now
assume (ex e st e in ET);
then consider e being set such that A3: e in ET;
( ( the_Target_of T ) . e ) in { v } by A2,A3,FUNCT_2:5;
then A4: ( ( the_Target_of T ) . e ) = v by TARSKI:def 1;
( ( the_Source_of T ) . e ) in { v } by A2,A3,FUNCT_2:5;
then ( ( the_Source_of T ) . e ) = v by TARSKI:def 1;
then e Joins v,v,T by A3,A4,GLIB_000:def 13;
then ( T .walkOf (v,e,v) ) is  Cycle-like by GLIB_001:156;
hence contradiction by CKB3:def 1;
end;
then ( card ET ) = ( 0 ) by CARD_1:27,XBOOLE_0:def 1;
then ( T .size() ) = ( 0 ) by GLIB_000:def 25;
hence 1 = ( ( T .size() ) + 1 );
end;
then A5: P[ 1 ];
now
let k being non  empty Nat;
assume A6: (for T being  finite  Tree-like _Graph holds (( T .order() ) = k implies k = ( ( T .size() ) + 1 )));
let T being  finite  Tree-like _Graph;
assume A7: ( T .order() ) = ( k + 1 );
then ( T .order() ) <> 1 by XCMPLX_1:3;
then reconsider aT = T as non  trivial  finite  Tree-like _Graph by GLIB_000:26;
set v = the  endvertex (Vertex of aT);
set T2 = the (removeVertex of aT,v);
( ( ( T2 .order() ) + 1 ) - 1 ) = ( ( k + 1 ) - 1 ) by A7,GLIB_000:48;
then A8: k = ( ( T2 .size() ) + 1 ) by A6;
( card ( v .edgesInOut() ) ) = ( v .degree() ) by GLIB_000:19
.= 1 by GLIB_000:def 52;
hence ( k + 1 ) = ( ( T .size() ) + 1 ) by A8,GLIB_000:48;
end;
then A9: (for k being non  empty Nat holds (P[ k ] implies P[ ( k + 1 ) ]));
(for k being non  empty Nat holds P[ k ]) from NAT_1:sch 10(A5,A9);
hence ( G .order() ) = ( ( G .size() ) + 1 ) by A1;
end;
assume that
A10: G is  acyclic
and
A11: ( G .order() ) = ( ( G .size() ) + 1 );
now
let k being non  empty (Element of ( NAT ));
assume A12: (for G being  finite  acyclic _Graph holds ((( G .order() ) = k & ( G .order() ) = ( ( G .size() ) + 1 )) implies G is  connected));
let G being  finite  acyclic _Graph;
assume that
A13: ( G .order() ) = ( k + 1 )
and
A14: ( G .order() ) = ( ( G .size() ) + 1 );
now
assume ( G .order() ) = 1;
then ( ( 0 ) + 1 ) = ( k + 1 ) by A13;
hence contradiction;
end;
then reconsider aG = G as non  trivial  finite  acyclic _Graph by GLIB_000:26;
( the_Edges_of G ) <> ( {} ) by A13,A14,CARD_1:27,GLIB_000:def 25;
then consider v,v2 being (Vertex of aG) such that v <> v2 and A15: v is  endvertex and v2 is  endvertex and v2 in ( aG .reachableFrom v ) by CKB52:1;
set G2 = the (removeVertex of G,v);
A16: (( ( G2 .order() ) + 1 ) = ( aG .order() ) & ( ( G2 .size() ) + ( card ( v .edgesInOut() ) ) ) = ( aG .size() )) by GLIB_000:48;
( card ( v .edgesInOut() ) ) = ( v .degree() ) by GLIB_000:19
.= 1 by A15,GLIB_000:def 52;
then A17: G2 is  connected by A12,A13,A14,A16;
consider e being set such that A18: ( v .edgesInOut() ) = { e } and A19: (not e Joins v,v,G) by A15,GLIB_000:def 51;
e in ( v .edgesInOut() ) by A18,TARSKI:def 1;
hence G is  connected by A17,A19,CKB69:1;
end;
then A20: (for k being non  empty Nat holds (P[ k ] implies P[ ( k + 1 ) ]));
now
let G being  finite  acyclic _Graph;
assume that
A21: ( G .order() ) = 1
and
( G .order() ) = ( ( G .size() ) + 1 );
consider v being (Vertex of G) such that A22: ( the_Vertices_of G ) = { v } by A21,GLIB_000:27;
now
let v1 being (Vertex of G);
let v2 being (Vertex of G);
(v1 = v & v2 = v) by A22,TARSKI:def 1;
then ( G .walkOf v ) is_Walk_from v1,v2 by GLIB_001:13;
hence (ex W being (Walk of G) st W is_Walk_from v1,v2);
end;
hence G is  connected by CKB2:def 1;
end;
then A23: P[ 1 ];
(for k being non  empty Nat holds P[ k ]) from NAT_1:sch 10(A23,A20);
then G is  connected by A10,A11;
hence thesis by A10;
end;
