environ
vocabularies NUMBERS,FINSET_1,ARYTM_3,CARD_1,SUBSET_1,XBOOLE_0,GLIB_000,RELAT_2,GLIB_001,TREES_1,ZFMISC_1,FUNCT_1,FINSEQ_1,GRAPH_1,ABIAN,XXREAL_0,RELAT_1,RCOMP_1,FUNCOP_1,ARYTM_1,WAYBEL_0,TARSKI,PBOOLE,SETFAM_1,ORDINAL1,NAT_1,GLIB_002;
notations TARSKI,XBOOLE_0,ZFMISC_1,CARD_1,NUMBERS,SUBSET_1,SETFAM_1,DOMAIN_1,XCMPLX_0,ABIAN,XXREAL_0,RELAT_1,FUNCT_1,PBOOLE,FUNCT_2,FINSEQ_1,FINSET_1,NAT_1,FUNCOP_1,GLIB_000,GLIB_001,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB26,CKB27,CKB29,CKB30,CKB31,CKB32,CKB56,CKB57,CKB58;
definitions TARSKI,FUNCOP_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB27,CKB29,CKB31,CKB32,CKB56,CKB57,CKB58;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,GLIB_000,GLIB_001,ABIAN,INT_1,JORDAN12,NAT_1,ORDINAL1,PENCIL_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_1,ZFMISC_1,XREAL_1,XXREAL_0,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB27,CKB29,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB51,CKB52,CKB53,CKB56,CKB57,CKB58,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105;
schemes NAT_1,SUBSET_1,GLIB_000;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,INT_1,CARD_1,GLIB_000,ABIAN,GLIB_001,FUNCT_2,PARTFUN1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB23,CKB24,CKB25,CKB28,CKB50,CKB54,CKB55,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67;
constructors DOMAIN_1,CARD_FIL,GLIB_001,VALUED_1,XXREAL_2,WELLORD2,RELSET_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB27,CKB29,CKB30,CKB31,CKB56,CKB57,CKB58;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th40: (for G being  finite  connected _Graph holds ( G .order() ) <= ( ( G .size() ) + 1 ))
proof
let G being  finite  connected _Graph;
defpred P[  finite _Graph ]
 means
($1 is  connected implies ( $1 .order() ) <= ( ( $1 .size() ) + 1 ));
A1:now
let k being non empty Nat;
assume A2: (for Gk being  finite _Graph holds (( Gk .order() ) = k implies P[ Gk ]));
let Gk1 being  finite _Graph;
assume A3: ( Gk1 .order() ) = ( k + 1 );
now
A4:now
assume ( Gk1 .order() ) = 1;
then ( k + 1 ) = ( ( 0 ) + 1 ) by A3;
hence contradiction;
end;
assume Gk1 is  connected;
then reconsider Gk19 = Gk1 as non trivial  finite  connected _Graph by A4,GLIB_000:26;
consider v1 being (Vertex of Gk19),v2 being (Vertex of Gk19) such that v1 <> v2 and A5: (not v1 is  cut-vertex) and (not v2 is  cut-vertex) by CKB49:1;
set Gkb = the (removeVertex of Gk19,v1);
A6: (( ( Gkb .order() ) + 1 ) = ( k + 1 ) & ( ( Gkb .size() ) + ( card ( v1 .edgesInOut() ) ) ) = ( Gk1 .size() )) by A3,GLIB_000:48;
(not v1 is  isolated) by CKB68:1;
then ( v1 .edgesInOut() ) <> ( {} ) by GLIB_000:def 49;
then ( 0 ) < ( card ( v1 .edgesInOut() ) ) by NAT_1:3;
then A7: ( ( 0 ) + 1 ) <= ( card ( v1 .edgesInOut() ) ) by NAT_1:13;
Gkb is  connected by A5,CKB48:1;
then k <= ( ( ( Gk1 .size() ) - ( card ( v1 .edgesInOut() ) ) ) + 1 ) by A2,A6;
then ( k + 1 ) <= ( ( ( ( Gk1 .size() ) + 1 ) - ( card ( v1 .edgesInOut() ) ) ) + ( card ( v1 .edgesInOut() ) ) ) by A7,XREAL_1:7;
hence ( Gk1 .order() ) <= ( ( Gk1 .size() ) + 1 ) by A3;
end;
hence P[ Gk1 ];
end;
A8: (for G being  finite _Graph holds (( G .order() ) = 1 implies P[ G ])) by NAT_1:12;
(for G being  finite _Graph holds P[ G ]) from GLIB_000:sch 1(A8,A1);
hence thesis;
end;
