environ
vocabularies NUMBERS,FINSET_1,ARYTM_3,CARD_1,SUBSET_1,XBOOLE_0,GLIB_000,RELAT_2,GLIB_001,TREES_1,ZFMISC_1,FUNCT_1,FINSEQ_1,GRAPH_1,ABIAN,XXREAL_0,RELAT_1,RCOMP_1,FUNCOP_1,ARYTM_1,WAYBEL_0,TARSKI,PBOOLE,SETFAM_1,ORDINAL1,NAT_1,GLIB_002;
notations TARSKI,XBOOLE_0,ZFMISC_1,CARD_1,NUMBERS,SUBSET_1,SETFAM_1,DOMAIN_1,XCMPLX_0,ABIAN,XXREAL_0,RELAT_1,FUNCT_1,PBOOLE,FUNCT_2,FINSEQ_1,FINSET_1,NAT_1,FUNCOP_1,GLIB_000,GLIB_001,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22;
definitions TARSKI,FUNCOP_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,GLIB_000,GLIB_001,ABIAN,INT_1,JORDAN12,NAT_1,ORDINAL1,PENCIL_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_1,ZFMISC_1,XREAL_1,XXREAL_0,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes NAT_1,SUBSET_1,GLIB_000;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,INT_1,CARD_1,GLIB_000,ABIAN,GLIB_001,FUNCT_2,PARTFUN1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB23;
constructors DOMAIN_1,CARD_FIL,GLIB_001,VALUED_1,XXREAL_2,WELLORD2,RELSET_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
registration
let G being _Graph;
let v being (Vertex of G);
cluster  ->  Component-like for (inducedSubgraph of G,( G .reachableFrom v ));
coherence
proof
let G2 being (inducedSubgraph of G,( G .reachableFrom v ));
A1: ( the_Vertices_of G2 ) = ( G .reachableFrom v ) by GLIB_000:def 37;
A2: ( the_Edges_of G2 ) = ( G .edgesBetween ( G .reachableFrom v ) ) by GLIB_000:def 37;
A3:now
A4: v in ( the_Vertices_of G2 ) by A1,CKB18:1;
given G3 being  connected (Subgraph of G) such that
A5: G2 c< G3;

G2 c= G3 by A5,GLIB_000:def 36;
then A6: G2 is (Subgraph of G3) by GLIB_000:def 35;
then A7: ( the_Vertices_of G2 ) c= ( the_Vertices_of G3 ) by GLIB_000:def 32;
A8:now
given x being set such that
A9: x in ( the_Vertices_of G3 )
and
A10: (not x in ( the_Vertices_of G2 ));

consider W being (Walk of G3) such that A11: W is_Walk_from v,x by A4,A7,A9,CKB2:def 1;
reconsider W as (Walk of G) by GLIB_001:167;
W is_Walk_from v,x by A11,GLIB_001:19;
hence contradiction by A1,A10,CKB16:def 1;
end;
A12: ( the_Vertices_of G2 ) c= ( the_Vertices_of G3 ) by A6,GLIB_000:def 32;
now
per cases  by A5,GLIB_000:99;
suppose (ex x being set st (x in ( the_Vertices_of G3 ) & (not x in ( the_Vertices_of G2 ))));

hence contradiction by A8;
end;
suppose (ex e being set st (e in ( the_Edges_of G3 ) & (not e in ( the_Edges_of G2 ))));

then consider e being set such that A13: e in ( the_Edges_of G3 ) and A14: (not e in ( the_Edges_of G2 ));
set v1 = ( ( the_Source_of G3 ) . e );
set v2 = ( ( the_Target_of G3 ) . e );
A15: e Joins v1,v2,G3 by A13,GLIB_000:def 13;
then A16: e Joins v1,v2,G by GLIB_000:72;
now
per cases ;
suppose ( the_Vertices_of G3 ) = ( the_Vertices_of G2 );

then reconsider v1,v2 as (Vertex of G2) by A15,GLIB_000:13;
(v1 in ( G .reachableFrom v ) & v2 in ( G .reachableFrom v )) by A1;
hence contradiction by A2,A14,A16,GLIB_000:32;
end;
suppose ( the_Vertices_of G3 ) <> ( the_Vertices_of G2 );

then ( the_Vertices_of G2 ) c< ( the_Vertices_of G3 ) by A12,XBOOLE_0:def 8;
hence contradiction by A8,XBOOLE_0:6;
end;
end;
hence contradiction;
end;
end;
hence contradiction;
end;
now
let x being (Vertex of G2);
let y being (Vertex of G2);
consider W1R being (Walk of G) such that A17: W1R is_Walk_from v,x by A1,CKB16:def 1;
consider W2 being (Walk of G) such that A18: W2 is_Walk_from v,y by A1,CKB16:def 1;
set W1 = ( W1R .reverse() );
set W = ( W1 .append W2 );
A19: W1 is_Walk_from x,v by A17,GLIB_001:23;
then A20: W is_Walk_from x,y by A18,GLIB_001:31;
A21: ( W1 .last() ) = v by A19,GLIB_001:def 23;
then A22: v in ( W1 .vertices() ) by GLIB_001:88;
A23: ( W .edges() ) c= ( G .edgesBetween ( W .vertices() ) ) by GLIB_001:109;
( W2 .first() ) = v by A18,GLIB_001:def 23;
then ( W .vertices() ) = ( ( W1 .vertices() ) \/ ( W2 .vertices() ) ) by A21,GLIB_001:93;
then A24: v in ( W .vertices() ) by A22,XBOOLE_0:def 3;
then ( G .edgesBetween ( W .vertices() ) ) c= ( G .edgesBetween ( the_Vertices_of G2 ) ) by A1,CKB21:1,GLIB_000:36;
then ( W .edges() ) c= ( G .edgesBetween ( the_Vertices_of G2 ) ) by A23,XBOOLE_1:1;
then reconsider W as (Walk of G2) by A1,A2,A24,CKB21:1,GLIB_001:170;
take W;
thus W is_Walk_from x,y by A20,GLIB_001:19;
end;
then G2 is  connected by CKB2:def 1;
hence thesis by A3,CKB22:def 1;
end;
end;
