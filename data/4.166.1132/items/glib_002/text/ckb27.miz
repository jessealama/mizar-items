environ
vocabularies NUMBERS,FINSET_1,ARYTM_3,CARD_1,SUBSET_1,XBOOLE_0,GLIB_000,RELAT_2,GLIB_001,TREES_1,ZFMISC_1,FUNCT_1,FINSEQ_1,GRAPH_1,ABIAN,XXREAL_0,RELAT_1,RCOMP_1,FUNCOP_1,ARYTM_1,WAYBEL_0,TARSKI,PBOOLE,SETFAM_1,ORDINAL1,NAT_1,GLIB_002;
notations TARSKI,XBOOLE_0,ZFMISC_1,CARD_1,NUMBERS,SUBSET_1,SETFAM_1,DOMAIN_1,XCMPLX_0,ABIAN,XXREAL_0,RELAT_1,FUNCT_1,PBOOLE,FUNCT_2,FINSEQ_1,FINSET_1,NAT_1,FUNCOP_1,GLIB_000,GLIB_001,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22,CKB26;
definitions TARSKI,FUNCOP_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22;
theorems CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,GLIB_000,GLIB_001,ABIAN,INT_1,JORDAN12,NAT_1,ORDINAL1,PENCIL_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_1,ZFMISC_1,XREAL_1,XXREAL_0,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes NAT_1,SUBSET_1,GLIB_000;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,INT_1,CARD_1,GLIB_000,ABIAN,GLIB_001,FUNCT_2,PARTFUN1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB23,CKB24,CKB25;
constructors DOMAIN_1,CARD_FIL,GLIB_001,VALUED_1,XXREAL_2,WELLORD2,RELSET_1,CKB2,CKB3,CKB4,CKB11,CKB16,CKB17,CKB22;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
definition
let G being _Graph;
func G .componentSet() -> non  empty (Subset-Family of ( the_Vertices_of G )) means 
:Def8: (for x being set holds (x in it iff (ex v being (Vertex of G) st x = ( G .reachableFrom v ))));
existence
proof
set v = the (Vertex of G);
defpred P[ set ]
 means
(ex v being (Vertex of G) st $1 = ( G .reachableFrom v ));
consider IT being (Subset-Family of ( the_Vertices_of G )) such that A1: (for x being set holds (x in IT iff (x in ( bool ( the_Vertices_of G ) ) & P[ x ]))) from SUBSET_1:sch 1;
set x = ( G .reachableFrom v );
x in IT by A1;
then reconsider IT as non  empty (Subset-Family of ( the_Vertices_of G ));
take IT;
thus thesis by A1;
end;
uniqueness
proof
defpred P[ set ]
 means
(ex v being (Vertex of G) st $1 = ( G .reachableFrom v ));
let IT1 being non  empty (Subset-Family of ( the_Vertices_of G ));
let IT2 being non  empty (Subset-Family of ( the_Vertices_of G ));
assume that
A2: (for x being set holds (x in IT1 iff P[ x ]))
and
A3: (for x being set holds (x in IT2 iff P[ x ]));
now
let x being set;
(x in IT1 iff P[ x ]) by A2;
hence (x in IT1 iff x in IT2) by A3;
end;
hence thesis by TARSKI:1;
end;
end;
