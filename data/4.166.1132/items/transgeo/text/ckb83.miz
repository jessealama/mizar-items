environ
vocabularies XBOOLE_0,SUBSET_1,FUNCT_2,RELAT_1,FUNCT_1,TARSKI,ZFMISC_1,RELAT_2,ANALOAF,STRUCT_0,DIRAF,PARSP_1,INCSP_1,AFF_1,TRANSGEO;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_2,FUNCT_1,RELSET_1,STRUCT_0,ANALOAF,DIRAF,PARTFUN1,FUNCT_2,AFF_1,CKB1,CKB4,CKB17,CKB22,CKB29,CKB31,CKB33,CKB40,CKB42,CKB49,CKB65;
definitions RELAT_2,CKB4,CKB17,CKB22,CKB29,CKB31,CKB40,CKB42,CKB49,CKB65;
theorems DOMAIN_1,FUNCT_1,FUNCT_2,ANALOAF,DIRAF,AFF_1,PASCH,TARSKI,ZFMISC_1,RELAT_1,XBOOLE_0,STRUCT_0,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82;
schemes FUNCT_2,CKB5;
registrations XBOOLE_0,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,STRUCT_0,ANALOAF,DIRAF,CKB32;
constructors RELAT_2,PARTFUN1,DOMAIN_1,AFF_1,RELSET_1,CKB1,CKB4,CKB17,CKB22,CKB29,CKB31,CKB40,CKB42,CKB49,CKB65;
requirements SUBSET,BOOLE;
begin
reserve A for non  empty set;
reserve x for (Element of A);
reserve y for (Element of A);
reserve f for (Permutation of A);
reserve OAS for OAffinSpace;
reserve p for (Element of OAS);
reserve q for (Element of OAS);
reserve x for (Element of OAS);
reserve y for (Element of OAS);
reserve f for (Permutation of (the carrier of OAS));
theorem
(f is  dilatation implies (f is  positive_dilatation or f is  negative_dilatation))
proof
assume A1: f is  dilatation;
A2:now
given p such that
A3: ( f . p ) = p;

A4:now
given q such that
A5: (not p,q // p,( f . q ));

p,q '||' p,( f . q ) by A1,A3,CKB50:1;
then A6: p,q // ( f . q ),p by A5,DIRAF:def 4;
then q,p // p,( f . q ) by DIRAF:2;
then A7:  Mid q,p,( f . q ) by DIRAF:def 3;
p <> q by A5,A6,DIRAF:2;
hence f is  negative_dilatation by A1,A3,A7,CKB81:1;
end;
now
assume (for x holds p,x // p,( f . x ));
then (for x holds (for y holds x,y // ( f . x ),( f . y ))) by A1,A3,CKB82:1;
hence f is  positive_dilatation by CKB41:1;
end;
hence thesis by A4;
end;
now
assume (for x holds ( f . x ) <> x);
then f is  translation by A1,CKB65:def 1;
hence f is  positive_dilatation by CKB76:1;
end;
hence thesis by A2;
end;
