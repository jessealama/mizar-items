environ
vocabularies NUMBERS,SUBSET_1,REAL_1,XREAL_0,ORDINAL1,CFUNCT_1,COMSEQ_1,PARTFUN1,ORDINAL2,NAT_1,FDIFF_1,VALUED_0,SEQ_2,CARD_1,SEQ_1,FUNCT_1,COMPLEX1,RELAT_1,ARYTM_3,XXREAL_0,ARYTM_1,FUNCOP_1,VALUED_1,FUNCT_2,TARSKI,RCOMP_1,XBOOLE_0,FCONT_1,CFCONT_1,XXREAL_2,CFDIFF_1;
notations TARSKI,SUBSET_1,ORDINAL1,FUNCT_1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,REAL_1,NAT_1,PARTFUN1,FUNCT_2,FUNCOP_1,VALUED_0,VALUED_1,SEQ_1,RELSET_1,SEQ_2,CFUNCT_1,COMSEQ_1,COMSEQ_2,COMSEQ_3,CFCONT_1,XXREAL_0,CKB1,CKB3,CKB13,CKB15,CKB16,CKB18;
definitions XCMPLX_0,XBOOLE_0,TARSKI,RELAT_1,COMSEQ_2,SEQM_3,CFCONT_1,SUBSET_1,FINSEQ_4,VALUED_0,VALUED_1,SEQ_2,COMPLEX1,FUNCT_2,CKB1,CKB3,CKB13,CKB16;
theorems TARSKI,NAT_1,FUNCT_1,FUNCT_2,ZFMISC_1,COMPLEX1,SEQ_1,SEQ_2,SEQ_4,NUMBERS,COMSEQ_1,COMSEQ_2,COMSEQ_3,CFUNCT_1,CFCONT_1,RELAT_1,XBOOLE_0,XBOOLE_1,PARTFUN1,PARTFUN2,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,ORDINAL1,ABSVALUE,XREAL_0,FUNCOP_1,SUBSET_1,VALUED_1,VALUED_0,CKB1,CKB2,CKB3,CKB4,CKB6,CKB11,CKB12,CKB13,CKB16;
schemes SEQ_1,COMSEQ_1,FUNCT_2;
registrations FUNCT_1,RELSET_1,FUNCT_2,MEMBERED,NUMBERS,ORDINAL1,XREAL_0,XXREAL_0,COMSEQ_2,NAT_1,VALUED_0,SEQ_4,VALUED_1,FUNCOP_1,CKB5,CKB7,CKB8,CKB9,CKB10,CKB14,CKB17,CKB19,CKB20,CKB21,CKB22;
constructors PARTFUN1,REAL_1,NAT_1,VALUED_0,VALUED_1,SEQ_1,SEQ_2,FINSEQ_4,SEQM_3,PARTFUN2,SQUARE_1,COMSEQ_2,COMSEQ_3,CFCONT_1,XXREAL_0,CFUNCT_1,RELSET_1,CKB1,CKB3,CKB13,CKB16;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve h for  convergent_to_0 Complex_Sequence;
reserve R1 for C_REST;
reserve R2 for C_REST;
registration
let R1;
let R2;
cluster ( R1 - R2 ) ->  total  REST-like for (PartFunc of ( COMPLEX ),( COMPLEX ));
coherence
proof
now
let h;
A4: ( ( h " ) (#) ( ( R1 - R2 ) /* h ) ) = ( ( h " ) (#) ( ( R1 /* h ) - ( R2 /* h ) ) ) by CFCONT_1:14
.= ( ( ( h " ) (#) ( R1 /* h ) ) - ( ( h " ) (#) ( R2 /* h ) ) ) by COMSEQ_1:15;
A5: (( ( h " ) (#) ( R1 /* h ) ) is  convergent & ( ( h " ) (#) ( R2 /* h ) ) is  convergent) by CKB13:def 1;
hence ( ( h " ) (#) ( ( R1 - R2 ) /* h ) ) is  convergent by A4;
(( lim ( ( h " ) (#) ( R1 /* h ) ) ) = ( 0c ) & ( lim ( ( h " ) (#) ( R2 /* h ) ) ) = ( 0c )) by CKB13:def 1;
hence ( lim ( ( h " ) (#) ( ( R1 - R2 ) /* h ) ) ) = ( ( 0c ) - ( 0c ) ) by A5,A4,COMSEQ_2:26
.= ( 0c );
end;
hence thesis by CKB13:def 1;
end;
end;
