environ
vocabularies NUMBERS,XBOOLE_0,ORDERS_2,MSUALG_4,OSALG_1,RELAT_1,STRUCT_0,FUNCOP_1,PBOOLE,SUBSET_1,XXREAL_0,FUNCT_1,MSUALG_1,TARSKI,EQREL_1,NAT_1,MARGREL1,PARTFUN1,FINSEQ_1,ARYTM_3,ARYTM_1,ZFMISC_1,FINSEQ_5,CARD_1,RELAT_2,ORDINAL4,NATTRA_1,YELLOW15,SETFAM_1,COH_SP,YELLOW18,WAYBEL_0,CARD_3,MSUALG_3,WELLORD1,SEQM_3,OSALG_4;
notations ZFMISC_1,TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,PARTFUN1,EQREL_1,SETFAM_1,XCMPLX_0,ORDERS_2,ORDERS_3,NUMBERS,NAT_1,FUNCT_2,FINSEQ_1,CARD_3,FINSEQ_2,FINSEQ_4,FINSEQ_5,FUNCOP_1,PBOOLE,STRUCT_0,WAYBEL_0,MSUALG_1,MSUALG_3,OSALG_1,OSALG_3,MSUALG_4,XXREAL_0,CKB2,CKB4,CKB7,CKB8,CKB11,CKB12,CKB14,CKB16,CKB18,CKB19,CKB21,CKB23,CKB32;
definitions TARSKI,MSUALG_3,XBOOLE_0,OSALG_1,OSALG_3,CKB2,CKB8,CKB12,CKB14,CKB16,CKB19,CKB21,CKB23,CKB32;
theorems XBOOLE_0,XBOOLE_1,FUNCT_1,FUNCT_2,PBOOLE,CARD_3,MSUALG_1,MSUALG_5,OSALG_1,OSALG_3,RELAT_2,ZFMISC_1,RELAT_1,RELSET_1,EQREL_1,MSUALG_3,MSUALG_6,MSAFREE,TARSKI,SYSREL,ORDERS_2,FINSEQ_1,FINSEQ_3,ENUMSET1,FINSEQ_5,INT_1,ORDERS_3,PARTFUN1,WAYBEL_0,GRFUNC_1,MSUALG_9,MSUALG_4,FINSEQ_2,ORDERS_1,FUNCOP_1,XREAL_1,XXREAL_0,CKB2,CKB5,CKB8,CKB12,CKB13,CKB14,CKB15,CKB16,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB31,CKB32;
schemes FUNCT_1,CLASSES1,NAT_1,FUNCT_2;
registrations SUBSET_1,RELAT_1,PARTFUN1,FUNCOP_1,XREAL_0,INT_1,FINSEQ_1,EQREL_1,FUNCT_1,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_3,MSUALG_4,ORDERS_3,OSALG_1,ORDINAL1,CARD_3,TOLER_1,RELSET_1,FINSEQ_2,CKB1,CKB3,CKB6,CKB9,CKB10,CKB17,CKB27,CKB28,CKB29,CKB30;
constructors XXREAL_0,REAL_1,NAT_1,NAT_D,EQREL_1,FINSEQ_4,FINSEQ_5,MSUALG_3,MSUALG_4,ORDERS_3,WAYBEL_0,OSALG_3,RELSET_1,CKB2,CKB8,CKB12,CKB14,CKB16,CKB19,CKB21,CKB23,CKB32;
requirements BOOLE,SUBSET,NUMERALS,REAL,ARITHM;
begin
definition
let S being  locally_directed OrderSortedSign;
let A being (OSAlgebra of S);
let E being  MSEquivalence-like (OrderSortedRelation of A);
let s1 being (Element of S);
func OSClass (E,s1) -> (Subset of ( Class ( CompClass (E,( CComp s1 )) ) )) means 
:Def12: (for z being set holds (z in it iff (ex x being set st (x in ( (the Sorts of A) . s1 ) & z = ( Class (( CompClass (E,( CComp s1 )) ),x) )))));
existence
proof
set SAC = ( (the Sorts of A) -carrier_of ( CComp s1 ) );
set CS = ( Class ( CompClass (E,( CComp s1 )) ) );
defpred CC1[ set ]
 means
(ex x being set st (x in ( (the Sorts of A) . s1 ) & $1 = ( Class (( CompClass (E,( CComp s1 )) ),x) )));
per cases ;
suppose A1: CS is  empty;

reconsider CS1 = ( {} ) as (Subset of CS) by XBOOLE_1:2;
take CS1;
let z being set;
thus (z in CS1 implies CC1[ z ]);
assume CC1[ z ];
then consider x being set such that A2: x in ( (the Sorts of A) . s1 ) and z = ( Class (( CompClass (E,( CComp s1 )) ),x) );
x in SAC by A2,CKB22:1;
hence thesis by A1;
end;
suppose CS is non  empty;

then reconsider CS1 = CS as non  empty (Subset-Family of SAC);
set CC = { x where x is (Element of CS1): CC1[ x ] };
now
let x being set;
assume x in CC;
then (ex y being (Element of CS1) st (x = y & CC1[ y ]));
hence x in CS1;
end;
then reconsider CC2 = CC as (Subset of CS) by TARSKI:def 3;
take CC2;
(for x being set holds (x in CC iff CC1[ x ]))
proof
let x being set;
hereby
assume x in CC;
then (ex x1 being (Element of CS1) st (x = x1 & CC1[ x1 ]));
hence CC1[ x ];
end;
assume A3: CC1[ x ];
then consider y being set such that A4: y in ( (the Sorts of A) . s1 ) and A5: x = ( Class (( CompClass (E,( CComp s1 )) ),y) );
s1 in ( CComp s1 ) by EQREL_1:20;
then ( (the Sorts of A) . s1 ) in { ( (the Sorts of A) . s ) where s is (Element of S): s in ( CComp s1 ) };
then y in ( union { ( (the Sorts of A) . s ) where s is (Element of S): s in ( CComp s1 ) } ) by A4,TARSKI:def 4;
then x in ( Class ( CompClass (E,( CComp s1 )) ) ) by A5,EQREL_1:def 3;
hence thesis by A3;
end;
hence thesis;
end;
end;
uniqueness
proof
let X being (Subset of ( Class ( CompClass (E,( CComp s1 )) ) ));
let Y being (Subset of ( Class ( CompClass (E,( CComp s1 )) ) ));
defpred CC1[ set ]
 means
(ex x being set st (x in ( (the Sorts of A) . s1 ) & $1 = ( Class (( CompClass (E,( CComp s1 )) ),x) )));
assume A6: (for x being set holds (x in X iff CC1[ x ]));
assume A7: (for x being set holds (x in Y iff CC1[ x ]));
(for x being set holds (x in X iff x in Y))
proof
let x being set;
hereby
assume x in X;
then CC1[ x ] by A6;
hence x in Y by A7;
end;
assume x in Y;
then CC1[ x ] by A7;
hence thesis by A6;
end;
hence thesis by TARSKI:1;
end;
end;
