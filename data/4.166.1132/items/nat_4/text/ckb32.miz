environ
vocabularies NUMBERS,XREAL_0,ORDINAL1,CARD_1,XXREAL_0,RELAT_1,ARYTM_3,NAT_1,NEWTON,INT_1,SUBSET_1,ARYTM_1,REALSET1,ABIAN,FINSEQ_1,FINSEQ_2,ORDINAL4,CARD_3,FUNCT_1,INT_2,NAT_3,XBOOLE_0,PRE_POLY,POWER,PEPIN,SQUARE_1,ZFMISC_1,TARSKI,BINOP_2,FINSET_1,MEMBERED,REAL_1,COMPLEX1,PREPOWER;
notations SUBSET_1,XXREAL_0,PREPOWER,TARSKI,XBOOLE_0,ORDINAL1,CARD_1,NUMBERS,XREAL_0,INT_1,ABIAN,SQUARE_1,NEWTON,FINSET_1,PEPIN,NAT_3,RELAT_1,FUNCT_1,FINSEQ_1,RVSUM_1,WSIERP_1,TREES_4,BINOP_2,XXREAL_2,POWER,MEMBERED,INT_2,FINSEQ_2,ZFMISC_1,RECDEF_1,PRE_POLY,REAL_1,NAT_1,NAT_D;
definitions TARSKI,MEMBERED,RVSUM_1,FINSEQ_2,NEWTON,SQUARE_1;
theorems TARSKI,NAT_1,NAT_2,INT_1,FINSEQ_1,CARD_1,XBOOLE_1,CARD_2,FINSET_1,SQUARE_1,EULER_1,EULER_2,PREPOWER,POWER,ABSVALUE,NEWTON,XCMPLX_1,ORDINAL1,XREAL_1,PEPIN,NAT_3,XBOOLE_0,INT_2,ABIAN,FINSEQ_3,RVSUM_1,FUNCT_1,FINSEQ_2,ZFMISC_1,FUNCT_2,FUNCOP_1,PROB_3,INTEGRA5,COMPTRIG,XXREAL_0,NAT_D,VALUED_1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes NAT_1,FINSEQ_1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FINSET_1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,FINSEQ_2,RVSUM_1,NEWTON,SEQM_3,NAT_3,VALUED_0,VALUED_1,XXREAL_2,CARD_1,PRE_POLY;
constructors REAL_1,NAT_D,PREPOWER,POWER,WSIERP_1,ABIAN,PEPIN,POLYNOM2,NAT_3,SEQ_1,RECDEF_1,BINOP_2,XXREAL_2,RELSET_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
Lm4: (((((((((((((((((not 6 is  prime) & (not 8 is  prime)) & (not 9 is  prime)) & (not 10 is  prime)) & (not 12 is  prime)) & (not 14 is  prime)) & (not 15 is  prime)) & (not 16 is  prime)) & (not 18 is  prime)) & (not 20 is  prime)) & (not 21 is  prime)) & (not 22 is  prime)) & (not 24 is  prime)) & (not 25 is  prime)) & (not 26 is  prime)) & (not 27 is  prime)) & (not 28 is  prime))
proof
6 = ( 2 * 3 );
then 2 divides 6 by NAT_D:def 3;
hence (not 6 is  prime) by INT_2:def 4;
8 = ( 2 * 4 );
then 2 divides 8 by NAT_D:def 3;
hence (not 8 is  prime) by INT_2:def 4;
9 = ( 3 * 3 );
then 3 divides 9 by NAT_D:def 3;
hence (not 9 is  prime) by INT_2:def 4;
10 = ( 2 * 5 );
then 2 divides 10 by NAT_D:def 3;
hence (not 10 is  prime) by INT_2:def 4;
12 = ( 2 * 6 );
then 2 divides 12 by NAT_D:def 3;
hence (not 12 is  prime) by INT_2:def 4;
14 = ( 2 * 7 );
then 2 divides 14 by NAT_D:def 3;
hence (not 14 is  prime) by INT_2:def 4;
15 = ( 3 * 5 );
then 3 divides 15 by NAT_D:def 3;
hence (not 15 is  prime) by INT_2:def 4;
16 = ( 4 * 4 );
then 4 divides 16 by NAT_D:def 3;
hence (not 16 is  prime) by INT_2:def 4;
18 = ( 2 * 9 );
then 2 divides 18 by NAT_D:def 3;
hence (not 18 is  prime) by INT_2:def 4;
20 = ( 4 * 5 );
then 4 divides 20 by NAT_D:def 3;
hence (not 20 is  prime) by INT_2:def 4;
21 = ( 3 * 7 );
then 3 divides 21 by NAT_D:def 3;
hence (not 21 is  prime) by INT_2:def 4;
22 = ( 2 * 11 );
then 2 divides 22 by NAT_D:def 3;
hence (not 22 is  prime) by INT_2:def 4;
24 = ( 4 * 6 );
then 4 divides 24 by NAT_D:def 3;
hence (not 24 is  prime) by INT_2:def 4;
25 = ( 5 * 5 );
then 5 divides 25 by NAT_D:def 3;
hence (not 25 is  prime) by INT_2:def 4;
26 = ( 2 * 13 );
then 2 divides 26 by NAT_D:def 3;
hence (not 26 is  prime) by INT_2:def 4;
27 = ( 3 * 9 );
then 3 divides 27 by NAT_D:def 3;
hence (not 27 is  prime) by INT_2:def 4;
28 = ( 4 * 7 );
then 4 divides 28 by NAT_D:def 3;
hence thesis by INT_2:def 4;
end;
