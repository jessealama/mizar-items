environ
vocabularies ORDERS_2,NATTRA_1,RELAT_1,STRUCT_0,XBOOLE_0,ORDERS_1,SUBSET_1,WELLORD1,RELAT_2,XXREAL_0,TARSKI,ZFMISC_1,FUNCT_1,SEQM_3,FUNCT_2,CAT_5,CAT_1,ALTCAT_1,PBOOLE,FUNCOP_1,BINOP_1,ORDERS_3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,ORDERS_1,CAT_5,MCART_1,WELLORD1,MULTOP_1,PBOOLE,RELSET_1,PARTFUN1,FUNCT_2,BINOP_1,FUNCOP_1,DOMAIN_1,STRUCT_0,ORDERS_2,CAT_1,ENS_1,ALTCAT_1,CKB1,CKB7,CKB8,CKB9,CKB10,CKB18,CKB20,CKB21,CKB22,CKB25;
definitions TARSKI,ALTCAT_1,FUNCOP_1,XBOOLE_0,STRUCT_0,CKB1,CKB7,CKB9,CKB18,CKB22,CKB25;
theorems RELAT_1,RELSET_1,ORDERS_2,TARSKI,ZFMISC_1,WELLORD1,SYSREL,FUNCT_1,FUNCT_2,MCART_1,ENS_1,PBOOLE,MULTOP_1,ALTCAT_1,XBOOLE_0,XBOOLE_1,PARTFUN1,CKB1,CKB5,CKB7,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB18,CKB22,CKB23,CKB24,CKB25;
schemes TARSKI,CAT_5,ALTCAT_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,STRUCT_0,ORDERS_2,ENS_1,CAT_5,ALTCAT_1,CKB2,CKB3,CKB4,CKB6,CKB16,CKB17,CKB19;
constructors RELAT_2,WELLORD1,PARTFUN1,DOMAIN_1,ORDERS_2,ENS_1,CAT_5,ALTCAT_1,MULTOP_1,PBOOLE,RELSET_1,CKB1,CKB7,CKB9,CKB18,CKB21,CKB22,CKB25;
requirements BOOLE,SUBSET;
begin
theorem
Th6: (for A,B,C being non empty RelStr holds (for f,g being Function holds ((f in ( MonFuncs (A,B) ) & g in ( MonFuncs (B,C) )) implies ( g * f ) in ( MonFuncs (A,C) ))))
proof
let A being non empty RelStr,B being non empty RelStr,C being non empty RelStr;
let f being Function,g being Function;
assume that
A1: f in ( MonFuncs (A,B) )
and
A2: g in ( MonFuncs (B,C) );
consider f9 being (Function of A,B) such that A3: f = f9 and f9 in ( Funcs ((the carrier of A),(the carrier of B)) ) and A4: f9 is  monotone by A1,CKB25:def 1;
consider g9 being (Function of B,C) such that A5: g = g9 and g9 in ( Funcs ((the carrier of B),(the carrier of C)) ) and A6: g9 is  monotone by A2,CKB25:def 1;
consider gf being (Function of A,C) such that A7: (gf = ( g9 * f9 ) & gf is  monotone) by A4,A6,CKB23:1;
gf in ( Funcs ((the carrier of A),(the carrier of C)) ) by FUNCT_2:8;
hence thesis by A3,A5,A7,CKB25:def 1;
end;
