environ
vocabularies NUMBERS,SUBSET_1,XREAL_0,ORDINAL1,SEQ_1,COMPLEX1,ARYTM_1,NEWTON,ABIAN,RELAT_1,POWER,INT_1,NAT_1,ARYTM_3,REALSET1,XXREAL_0,CARD_1,FUNCT_1,SERIES_1;
notations SUBSET_1,NUMBERS,ORDINAL1,XCMPLX_0,XREAL_0,COMPLEX1,NAT_1,NAT_D,SEQ_1,NEWTON,SERIES_1,ABIAN,POWER,XXREAL_0;
theorems NEWTON,XCMPLX_1,SERIES_1,NAT_1,POWER,ABSVALUE,XREAL_1,WSIERP_1,PEPIN,XXREAL_0,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes NAT_1;
registrations XREAL_0,MEMBERED,NEWTON,NUMBERS;
constructors XXREAL_0,REAL_1,NAT_1,NAT_D,SEQ_1,NEWTON,SERIES_1,ABIAN,VALUED_1;
requirements REAL,NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve n for (Element of ( NAT ));
reserve s for Real_Sequence;
theorem
((for n holds ( s . n ) = n) implies (for n holds ( ( Partial_Sums s ) . n ) = ( ( n * ( n + 1 ) ) / 2 )))
proof
defpred X[ (Element of ( NAT )) ]
 means
( ( Partial_Sums s ) . $1 ) = ( ( $1 * ( $1 + 1 ) ) / 2 );
assume A1: (for n holds ( s . n ) = n);
A2: (for n holds (X[ n ] implies X[ ( n + 1 ) ]))
proof
let n;
assume ( ( Partial_Sums s ) . n ) = ( ( n * ( n + 1 ) ) / 2 );
then ( ( Partial_Sums s ) . ( n + 1 ) ) = ( ( ( n * ( n + 1 ) ) / 2 ) + ( s . ( n + 1 ) ) ) by SERIES_1:def 1
.= ( ( ( n * ( n + 1 ) ) / 2 ) + ( n + 1 ) ) by A1
.= ( ( ( n * ( n + 1 ) ) + ( ( n + 1 ) * 2 ) ) / 2 );
hence thesis;
end;
( ( Partial_Sums s ) . ( 0 ) ) = ( s . ( 0 ) ) by SERIES_1:def 1
.= ( ( ( 0 ) * ( ( 0 ) + 1 ) ) / 2 ) by A1;
then A3: X[ ( 0 ) ];
(for n holds X[ n ]) from NAT_1:sch 1(A3,A2);
hence thesis;
end;
