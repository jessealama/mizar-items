environ
vocabularies NUMBERS,NAT_1,XXREAL_0,RADIX_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,FINSEQ_1,POWER,RELAT_1,FINSEQ_2,PARTFUN1,NEWTON,FUNCT_1,CARD_3,INT_1,TARSKI,RADIX_5;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,NAT_D,NEWTON,RADIX_1,POWER,FUNCT_1,PARTFUN1,FINSEQ_1,FINSEQ_2,GR_CY_1;
definitions TARSKI;
theorems RADIX_1,RADIX_4,INT_1,NAT_1,FINSEQ_1,POWER,FINSEQ_2,NEWTON,RADIX_2,NAT_2,PREPOWER,PEPIN,JORDAN5B,FUNCT_1,RVSUM_1,XREAL_1,XXREAL_0,NAT_D,PARTFUN1,ORDINAL1,XREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes NAT_1,FINSEQ_2;
registrations RELSET_1,NUMBERS,XXREAL_0,XREAL_0,REAL_1,NAT_1,INT_1,ORDINAL1,NEWTON,XBOOLE_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,POWER,GR_CY_1,RADIX_1,SEQ_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
definition
let i being Nat;
let m being Nat;
let k being Nat;
assume A1: k >= 2;
func SDMinDigit (m,k,i) -> (Element of ( k -SD )) equals 
:Def1: ( ( - ( Radix k ) ) + 1 ) if (1 <= i & i < m) otherwise ( 0 );
coherence
proof
( Radix k ) > 2 by A1,RADIX_4:1;
then ( Radix k ) > 1 by XXREAL_0:2;
then ( ( Radix k ) + ( Radix k ) ) > ( 1 + 1 ) by XREAL_1:8;
then A2: ( ( Radix k ) - 1 ) > ( 1 - ( Radix k ) ) by XREAL_1:21;
(( k -SD ) = { w where w is (Element of ( INT )): (w <= ( ( Radix k ) - 1 ) & w >= ( ( - ( Radix k ) ) + 1 )) } & ( ( - ( Radix k ) ) + 1 ) is (Element of ( INT ))) by INT_1:def 2,RADIX_1:def 2;
then ( ( - ( Radix k ) ) + 1 ) in ( k -SD ) by A2;
hence thesis by RADIX_1:14;
end;
consistency;
end;
