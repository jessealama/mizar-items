environ
vocabularies NUMBERS,NAT_1,XXREAL_0,RADIX_1,ARYTM_1,ARYTM_3,CARD_1,SUBSET_1,FINSEQ_1,POWER,RELAT_1,FINSEQ_2,PARTFUN1,NEWTON,FUNCT_1,CARD_3,INT_1,TARSKI,RADIX_5;
notations TARSKI,SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,NAT_D,NEWTON,RADIX_1,POWER,FUNCT_1,PARTFUN1,FINSEQ_1,FINSEQ_2,GR_CY_1;
definitions TARSKI;
theorems RADIX_1,RADIX_4,INT_1,NAT_1,FINSEQ_1,POWER,FINSEQ_2,NEWTON,RADIX_2,NAT_2,PREPOWER,PEPIN,JORDAN5B,FUNCT_1,RVSUM_1,XREAL_1,XXREAL_0,NAT_D,PARTFUN1,ORDINAL1,XREAL_0,CARD_1,CKB1,CKB2;
schemes NAT_1,FINSEQ_2;
registrations RELSET_1,NUMBERS,XXREAL_0,XREAL_0,REAL_1,NAT_1,INT_1,ORDINAL1,NEWTON,XBOOLE_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,POWER,GR_CY_1,RADIX_1,SEQ_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
Th3: (for k being Nat holds (2 <= k implies 4 <= ( Radix k )))
proof
defpred P[ Nat ]
 means
4 <= ( Radix $1 );
A1: (for kk being Nat holds ((kk >= 2 & P[ kk ]) implies P[ ( kk + 1 ) ]))
proof
let kk being Nat;
assume that
2 <= kk
and
A2: 4 <= ( Radix kk );
( Radix ( kk + 1 ) ) = ( 2 to_power ( kk + 1 ) ) by RADIX_1:def 1
.= ( ( 2 to_power 1 ) * ( 2 to_power kk ) ) by POWER:27
.= ( 2 * ( 2 to_power kk ) ) by POWER:25
.= ( 2 * ( Radix kk ) ) by RADIX_1:def 1;
then ( Radix ( kk + 1 ) ) >= ( Radix kk ) by XREAL_1:151;
hence thesis by A2,XXREAL_0:2;
end;
( Radix 2 ) = ( 2 to_power ( 1 + 1 ) ) by RADIX_1:def 1
.= ( ( 2 to_power 1 ) * ( 2 to_power 1 ) ) by POWER:27
.= ( 2 * ( 2 to_power 1 ) ) by POWER:25
.= ( 2 * 2 ) by POWER:25;
then A3: P[ 2 ];
(for i being Nat holds (2 <= i implies P[ i ])) from NAT_1:sch 8(A3,A1);
hence thesis;
end;
