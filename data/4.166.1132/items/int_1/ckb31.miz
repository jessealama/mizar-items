environ
vocabularies NUMBERS,SUBSET_1,XREAL_0,ORDINAL1,ZFMISC_1,CARD_1,XBOOLE_0,ARYTM_1,TARSKI,ARYTM_2,ARYTM_3,ARYTM_0,REAL_1,XXREAL_0,NAT_1,RELAT_1,INT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,ARYTM_2,ARYTM_1,NUMBERS,ARYTM_0,XCMPLX_0,XREAL_0,REAL_1,NAT_1,XXREAL_0,CKB3,CKB4,CKB8;
definitions TARSKI,XBOOLE_0,CARD_1,CKB3,CKB4;
theorems NAT_1,AXIOMS,TARSKI,XREAL_0,XCMPLX_0,XCMPLX_1,ZFMISC_1,XBOOLE_0,NUMBERS,ARYTM_0,ARYTM_2,ARYTM_1,XREAL_1,XXREAL_0,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB9,CKB10,CKB12,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29;
schemes NAT_1,XBOOLE_0,SUBSET_1,CKB30;
registrations ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,REAL_1,NAT_1,CKB5,CKB6,CKB7,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17;
constructors FUNCT_4,ARYTM_1,ARYTM_0,XXREAL_0,REAL_1,NAT_1,FINSET_1,CARD_1,CKB4;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve k for (Element of ( NAT ));
reserve i0 for Integer;
reserve i2 for Integer;
scheme IntIndUp { F() -> Integer,P[Integer] } : (for i0 holds (F() <= i0 implies P[ i0 ]))
provided
A1: P[ F() ]
and
A2: (for i2 holds (F() <= i2 implies (P[ i2 ] implies P[ ( i2 + 1 ) ])))
proof
defpred Q[  natural number ]
 means
(for i2 holds ($1 = ( i2 - F() ) implies P[ i2 ]));
A3: (for k holds (Q[ k ] implies Q[ ( k + 1 ) ]))
proof
let k;
reconsider i8 = k as Integer;
assume A4: Q[ k ];
let i2;
assume A5: ( k + 1 ) = ( i2 - F() );
then ( i2 - 1 ) = ( i8 + F() );
then A6: F() <= ( i2 - 1 ) by CKB21:1;
k = ( ( i2 - 1 ) - F() ) by A5;
then P[ ( ( i2 - 1 ) + 1 ) ] by A2,A4,A6;
hence thesis;
end;
let i0;
assume F() <= i0;
then reconsider l = ( i0 - F() ) as (Element of ( NAT )) by CKB20:1;
A7: l = ( i0 - F() );
A8: Q[ ( 0 ) ] by A1;
(for k holds Q[ k ]) from NAT_1:sch 1(A8,A3);
hence thesis by A7;
end;
