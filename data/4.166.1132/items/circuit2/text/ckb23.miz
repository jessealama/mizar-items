environ
vocabularies MSAFREE2,STRUCT_0,XBOOLE_0,MSUALG_1,RELAT_1,PBOOLE,MSAFREE,FUNCOP_1,FUNCT_1,TREES_3,FINSEQ_1,SUBSET_1,TREES_4,MSUALG_3,MARGREL1,FINSEQ_4,TARSKI,DTCONSTR,NAT_1,NUMBERS,TREES_2,CARD_3,PARTFUN1,ZFMISC_1,TDGROUP,CIRCUIT1,FSM_1,FUNCT_4,GLIB_000,UNIALG_2,MSATERM,PRELAMB,REALSET1,CARD_1,XXREAL_0,ARYTM_3,FUNCT_6,TREES_A,FINSET_1,CIRCUIT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,XXREAL_0,NAT_1,FINSEQ_1,FINSEQ_2,FINSET_1,TREES_2,TREES_3,TREES_4,CARD_3,FUNCT_6,LANG1,DTCONSTR,PBOOLE,FUNCOP_1,XXREAL_2,STRUCT_0,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,MSATERM,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22;
definitions PBOOLE,MSAFREE2,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22;
theorems TARSKI,NAT_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,RELAT_1,GRFUNC_1,FUNCT_1,FUNCT_2,FUNCT_4,TREES_3,TREES_4,DTCONSTR,FUNCT_6,ZFMISC_1,CARD_3,MSATERM,PARTFUN2,FUNCOP_1,PBOOLE,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,PRE_CIRC,MSAFREE2,CIRCUIT1,TREES_1,EXTENS_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,XXREAL_0,PARTFUN1,XXREAL_2,CARD_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes NAT_1,FINSEQ_1,PRE_CIRC,PBOOLE;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,MEMBERED,FINSEQ_1,CARD_3,TREES_3,PRE_CIRC,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,XXREAL_2,CARD_1,RELSET_1,PBOOLE;
constructors XXREAL_0,NAT_1,PRALG_1,MSUALG_3,MSATERM,CIRCUIT1,SEQ_1,SEQ_4,XXREAL_2,RELSET_1,FUNCT_4,FINSEQ_2,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve IIG for  monotonic  Circuit-like non  void non  empty ManySortedSign;
definition
let IIG;
let SCS being  non-empty (Circuit of IIG);
let InpFs being (InputFuncs of SCS);
let s being (State of SCS);
func Computation (s,InpFs) -> (Function of ( NAT ),( product (the Sorts of SCS) )) means 
:Def9: (( it . ( 0 ) ) = ( InitialComp (s,InpFs) ) & (for i being Nat holds ( it . ( i + 1 ) ) = ( Following (( it . i ),( ( i + 1 ) -th_InputValues InpFs )) )));
correctness
proof
deffunc F(Nat,(State of SCS)) = ( Following ($2,( ( $1 + 1 ) -th_InputValues InpFs )) );
thus ((ex IT being (Function of ( NAT ),( product (the Sorts of SCS) )) st (( IT . ( 0 ) ) = ( InitialComp (s,InpFs) ) & (for i being Nat holds ( IT . ( i + 1 ) ) = F(i,( IT . i ))))) & (for IT1,IT2 being (Function of ( NAT ),( product (the Sorts of SCS) )) holds (((( IT1 . ( 0 ) ) = ( InitialComp (s,InpFs) ) & (for i being Nat holds ( IT1 . ( i + 1 ) ) = F(i,( IT1 . i )))) & (( IT2 . ( 0 ) ) = ( InitialComp (s,InpFs) ) & (for i being Nat holds ( IT2 . ( i + 1 ) ) = F(i,( IT2 . i ))))) implies IT1 = IT2))) from PRE_CIRC:sch 3;
end;
end;
