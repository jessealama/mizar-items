environ
vocabularies MSAFREE2,STRUCT_0,XBOOLE_0,MSUALG_1,RELAT_1,PBOOLE,MSAFREE,FUNCOP_1,FUNCT_1,TREES_3,FINSEQ_1,SUBSET_1,TREES_4,MSUALG_3,MARGREL1,FINSEQ_4,TARSKI,DTCONSTR,NAT_1,NUMBERS,TREES_2,CARD_3,PARTFUN1,ZFMISC_1,TDGROUP,CIRCUIT1,FSM_1,FUNCT_4,GLIB_000,UNIALG_2,MSATERM,PRELAMB,REALSET1,CARD_1,XXREAL_0,ARYTM_3,FUNCT_6,TREES_A,FINSET_1,CIRCUIT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,XXREAL_0,NAT_1,FINSEQ_1,FINSEQ_2,FINSET_1,TREES_2,TREES_3,TREES_4,CARD_3,FUNCT_6,LANG1,DTCONSTR,PBOOLE,FUNCOP_1,XXREAL_2,STRUCT_0,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,MSATERM,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
definitions PBOOLE,MSAFREE2,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
theorems TARSKI,NAT_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,RELAT_1,GRFUNC_1,FUNCT_1,FUNCT_2,FUNCT_4,TREES_3,TREES_4,DTCONSTR,FUNCT_6,ZFMISC_1,CARD_3,MSATERM,PARTFUN2,FUNCOP_1,PBOOLE,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,PRE_CIRC,MSAFREE2,CIRCUIT1,TREES_1,EXTENS_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,XXREAL_0,PARTFUN1,XXREAL_2,CARD_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes NAT_1,FINSEQ_1,PRE_CIRC,PBOOLE;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,MEMBERED,FINSEQ_1,CARD_3,TREES_3,PRE_CIRC,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,XXREAL_2,CARD_1,RELSET_1,PBOOLE;
constructors XXREAL_0,NAT_1,PRALG_1,MSUALG_3,MSATERM,CIRCUIT1,SEQ_1,SEQ_4,XXREAL_2,RELSET_1,FUNCT_4,FINSEQ_2,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve IIG for  finite  monotonic  Circuit-like non  void non  empty ManySortedSign;
reserve SCS for  non-empty (Circuit of IIG);
reserve InpFs for (InputFuncs of SCS);
reserve s for (State of SCS);
theorem
(for n being (Element of ( NAT )) holds (((( commute InpFs ) is  constant & ( InputVertices IIG ) is non  empty) & ( ( Computation (s,InpFs) ) . n ) is  stable) implies (for m being (Element of ( NAT )) holds (n <= m implies ( ( Computation (s,InpFs) ) . n ) = ( ( Computation (s,InpFs) ) . m )))))
proof
let n being (Element of ( NAT ));
assume that
A1: ( commute InpFs ) is  constant
and
A2: ( InputVertices IIG ) is non  empty
and
A3: ( ( Computation (s,InpFs) ) . n ) is  stable;
defpred P[ (Element of ( NAT )) ]
 means
(n <= $1 implies ( ( Computation (s,InpFs) ) . n ) = ( ( Computation (s,InpFs) ) . $1 ));
A4:now
let m being (Element of ( NAT ));
assume A5: P[ m ];
thus P[ ( m + 1 ) ]
proof
A6: IIG is  with_input_V by A2,MSAFREE2:def 4;
then reconsider iv = ( ( commute InpFs ) . ( 0 ) ) as (InputValues of SCS) by CIRCUIT1:2;
reconsider Ckm = ( ( Computation (s,InpFs) ) . m ) as (State of SCS);
A7: ( dom ( commute InpFs ) ) = ( NAT ) by A2,PRE_CIRC:5;
( ( m + 1 ) -th_InputValues InpFs ) = ( ( commute InpFs ) . ( m + 1 ) ) by A6,CIRCUIT1:def 2
.= iv by A1,A7,FUNCT_1:def 10;
then A8: ( ( m + 1 ) -th_InputValues InpFs ) c= ( ( Computation (s,InpFs) ) . m ) by A1,A2,CKB25:1;
assume A9: n <= ( m + 1 );
per cases  by A9,NAT_1:8;
suppose n <= m;

hence ( ( Computation (s,InpFs) ) . n ) = ( Following Ckm ) by A3,A5,CKB20:def 1
.= ( Following (( ( Computation (s,InpFs) ) . m ),( ( m + 1 ) -th_InputValues InpFs )) ) by A8,FUNCT_4:98
.= ( ( Computation (s,InpFs) ) . ( m + 1 ) ) by CKB23:def 1;
end;
suppose n = ( m + 1 );

hence thesis;
end;
end;

end;
A10: P[ ( 0 ) ] by NAT_1:3;
thus (for m being (Element of ( NAT )) holds P[ m ]) from NAT_1:sch 1(A10,A4);
end;
