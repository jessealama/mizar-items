environ
vocabularies MSAFREE2,STRUCT_0,XBOOLE_0,MSUALG_1,RELAT_1,PBOOLE,MSAFREE,FUNCOP_1,FUNCT_1,TREES_3,FINSEQ_1,SUBSET_1,TREES_4,MSUALG_3,MARGREL1,FINSEQ_4,TARSKI,DTCONSTR,NAT_1,NUMBERS,TREES_2,CARD_3,PARTFUN1,ZFMISC_1,TDGROUP,CIRCUIT1,FSM_1,FUNCT_4,GLIB_000,UNIALG_2,MSATERM,PRELAMB,REALSET1,CARD_1,XXREAL_0,ARYTM_3,FUNCT_6,TREES_A,FINSET_1,CIRCUIT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,XXREAL_0,NAT_1,FINSEQ_1,FINSEQ_2,FINSET_1,TREES_2,TREES_3,TREES_4,CARD_3,FUNCT_6,LANG1,DTCONSTR,PBOOLE,FUNCOP_1,XXREAL_2,STRUCT_0,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,MSATERM,CKB3,CKB4,CKB5,CKB12,CKB15;
definitions PBOOLE,MSAFREE2,CKB4,CKB5,CKB12,CKB15;
theorems TARSKI,NAT_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,RELAT_1,GRFUNC_1,FUNCT_1,FUNCT_2,FUNCT_4,TREES_3,TREES_4,DTCONSTR,FUNCT_6,ZFMISC_1,CARD_3,MSATERM,PARTFUN2,FUNCOP_1,PBOOLE,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,PRE_CIRC,MSAFREE2,CIRCUIT1,TREES_1,EXTENS_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,XXREAL_0,PARTFUN1,XXREAL_2,CARD_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes NAT_1,FINSEQ_1,PRE_CIRC,PBOOLE;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,MEMBERED,FINSEQ_1,CARD_3,TREES_3,PRE_CIRC,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,XXREAL_2,CARD_1,RELSET_1,PBOOLE;
constructors XXREAL_0,NAT_1,PRALG_1,MSUALG_3,MSATERM,CIRCUIT1,SEQ_1,SEQ_4,XXREAL_2,RELSET_1,FUNCT_4,FINSEQ_2,CKB3,CKB4,CKB5,CKB12,CKB15;
requirements NUMERALS,BOOLE,SUBSET;
begin
definition
let IIG being  Circuit-like non void non empty ManySortedSign;
let SCS being  non-empty (Circuit of IIG);
let s being (State of SCS);
func Following s -> (State of SCS)
means
:Def5: (for v being (Vertex of IIG) holds ((v in ( InputVertices IIG ) implies ( it . v ) = ( s . v )) & (v in ( InnerVertices IIG ) implies ( it . v ) = ( ( Den (( action_at v ),SCS) ) . ( ( action_at v ) depends_on_in s ) ))));
existence
proof
deffunc G((Vertex of IIG)) = ( ( Den (( action_at $1 ),SCS) ) . ( ( action_at $1 ) depends_on_in s ) );
deffunc F(set) = ( s . $1 );
defpred P[ set ]
 means
$1 in ( InputVertices IIG );
consider f being (ManySortedSet of (the carrier of IIG)) such that A1: (for v being (Vertex of IIG) holds (v in (the carrier of IIG) implies ((P[ v ] implies ( f . v ) = F(v)) & ((not P[ v ]) implies ( f . v ) = G(v))))) from PRE_CIRC:sch 2;
A2:now
let x being set;
assume x in ( dom (the Sorts of SCS) );
then reconsider v = x as (Vertex of IIG) by PARTFUN1:def 2;
per cases ;
suppose v in ( InputVertices IIG );

then ( f . v ) = ( s . v ) by A1;
hence ( f . x ) in ( (the Sorts of SCS) . x ) by CIRCUIT1:4;
end;
suppose A3: (not v in ( InputVertices IIG ));

v in (the carrier of IIG);
then v in ( ( InputVertices IIG ) \/ ( InnerVertices IIG ) ) by XBOOLE_1:45;
then v in ( InnerVertices IIG ) by A3,XBOOLE_0:def 3;
then A4: ( the_result_sort_of ( action_at v ) ) = v by MSAFREE2:def 7;
( f . x ) = ( ( Den (( action_at v ),SCS) ) . ( ( action_at v ) depends_on_in s ) ) by A1,A3;
hence ( f . x ) in ( (the Sorts of SCS) . x ) by A4,CIRCUIT1:8;
end;
end;
(( dom f ) = (the carrier of IIG) & ( dom (the Sorts of SCS) ) = (the carrier of IIG)) by PARTFUN1:def 2;
then reconsider f as (State of SCS) by A2,CARD_3:def 5;
take f;
let v being (Vertex of IIG);
thus (v in ( InputVertices IIG ) implies ( f . v ) = ( s . v )) by A1;
A5: ( InputVertices IIG ) misses ( InnerVertices IIG ) by XBOOLE_1:79;
assume v in ( InnerVertices IIG );
then (not v in ( InputVertices IIG )) by A5,XBOOLE_0:3;
hence thesis by A1;
end;
uniqueness
proof
let it1 being (State of SCS),it2 being (State of SCS);
assume that
A6: (for v being (Vertex of IIG) holds ((v in ( InputVertices IIG ) implies ( it1 . v ) = ( s . v )) & (v in ( InnerVertices IIG ) implies ( it1 . v ) = ( ( Den (( action_at v ),SCS) ) . ( ( action_at v ) depends_on_in s ) ))))
and
A7: (for v being (Vertex of IIG) holds ((v in ( InputVertices IIG ) implies ( it2 . v ) = ( s . v )) & (v in ( InnerVertices IIG ) implies ( it2 . v ) = ( ( Den (( action_at v ),SCS) ) . ( ( action_at v ) depends_on_in s ) ))));
assume A8: it1 <> it2;
( dom it2 ) = (the carrier of IIG) by CIRCUIT1:3;
then consider x being set such that A9: x in ( dom it1 ) and A10: ( it1 . x ) <> ( it2 . x ) by A8,CIRCUIT1:3,FUNCT_1:2;
reconsider v = x as (Vertex of IIG) by A9,CIRCUIT1:3;
A11: (v in ( InnerVertices IIG ) implies ( it1 . v ) = ( ( Den (( action_at v ),SCS) ) . ( ( action_at v ) depends_on_in s ) )) by A6;
( dom it1 ) = (the carrier of IIG) by CIRCUIT1:3;
then v in ( ( InputVertices IIG ) \/ ( InnerVertices IIG ) ) by A9,XBOOLE_1:45;
then A12: (v in ( InputVertices IIG ) or v in ( InnerVertices IIG )) by XBOOLE_0:def 3;
(v in ( InputVertices IIG ) implies ( it1 . v ) = ( s . v )) by A6;
hence contradiction by A7,A10,A12,A11;
end;
end;
