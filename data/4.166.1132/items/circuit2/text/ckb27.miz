environ
vocabularies MSAFREE2,STRUCT_0,XBOOLE_0,MSUALG_1,RELAT_1,PBOOLE,MSAFREE,FUNCOP_1,FUNCT_1,TREES_3,FINSEQ_1,SUBSET_1,TREES_4,MSUALG_3,MARGREL1,FINSEQ_4,TARSKI,DTCONSTR,NAT_1,NUMBERS,TREES_2,CARD_3,PARTFUN1,ZFMISC_1,TDGROUP,CIRCUIT1,FSM_1,FUNCT_4,GLIB_000,UNIALG_2,MSATERM,PRELAMB,REALSET1,CARD_1,XXREAL_0,ARYTM_3,FUNCT_6,TREES_A,FINSET_1,CIRCUIT2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCT_4,XXREAL_0,NAT_1,FINSEQ_1,FINSEQ_2,FINSET_1,TREES_2,TREES_3,TREES_4,CARD_3,FUNCT_6,LANG1,DTCONSTR,PBOOLE,FUNCOP_1,XXREAL_2,STRUCT_0,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,MSATERM,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
definitions PBOOLE,MSAFREE2,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
theorems TARSKI,NAT_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,RELAT_1,GRFUNC_1,FUNCT_1,FUNCT_2,FUNCT_4,TREES_3,TREES_4,DTCONSTR,FUNCT_6,ZFMISC_1,CARD_3,MSATERM,PARTFUN2,FUNCOP_1,PBOOLE,PRALG_1,MSUALG_1,MSUALG_2,MSUALG_3,MSAFREE,PRE_CIRC,MSAFREE2,CIRCUIT1,TREES_1,EXTENS_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,XXREAL_0,PARTFUN1,XXREAL_2,CARD_1,CKB1,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26;
schemes NAT_1,FINSEQ_1,PRE_CIRC,PBOOLE;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XREAL_0,MEMBERED,FINSEQ_1,CARD_3,TREES_3,PRE_CIRC,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSAFREE2,CIRCUIT1,XXREAL_2,CARD_1,RELSET_1,PBOOLE;
constructors XXREAL_0,NAT_1,PRALG_1,MSUALG_3,MSATERM,CIRCUIT1,SEQ_1,SEQ_4,XXREAL_2,RELSET_1,FUNCT_4,FINSEQ_2,CKB3,CKB4,CKB5,CKB12,CKB15,CKB18,CKB20,CKB21,CKB22,CKB23;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve IIG for  finite  monotonic  Circuit-like non  void non  empty ManySortedSign;
reserve SCS for  non-empty (Circuit of IIG);
reserve InpFs for (InputFuncs of SCS);
reserve s for (State of SCS);
reserve iv for (InputValues of SCS);
theorem
Th16: ((( commute InpFs ) is  constant & ( InputVertices IIG ) is non  empty) implies (for s holds (for iv holds (iv = ( ( commute InpFs ) . ( 0 ) ) implies (for k being (Element of ( NAT )) holds (for v being (Vertex of IIG) holds (( depth (v,SCS) ) <= k implies ( (( ( Computation (s,InpFs) ) . k ) qua (Element of ( product (the Sorts of SCS) ))) . v ) = ( IGValue (v,iv) ))))))))
proof
assume that
A1: ( commute InpFs ) is  constant
and
A2: ( InputVertices IIG ) is non  empty;
let s;
let iv;
assume A3: iv = ( ( commute InpFs ) . ( 0 ) );
defpred P[ (Element of ( NAT )) ]
 means
(for v being (Vertex of IIG) holds (( depth (v,SCS) ) <= $1 implies ( (( ( Computation (s,InpFs) ) . $1 ) qua (State of SCS)) . v ) = ( IGValue (v,iv) )));
A4: IIG is  with_input_V by A2,MSAFREE2:def 4;
A5: P[ ( 0 ) ]
proof
let v being (Vertex of IIG);
assume ( depth (v,SCS) ) <= ( 0 );
then A6: ( depth (v,SCS) ) = ( 0 ) by NAT_1:3;
A7: ( ( Computation (s,InpFs) ) . ( 0 ) ) = ( InitialComp (s,InpFs) ) by CKB23:def 1
.= ( ( s +* ( ( 0 ) -th_InputValues InpFs ) ) +* ( Set-Constants SCS ) );
per cases  by A6,CIRCUIT1:18;
suppose A8: v in ( InputVertices IIG );

A9: ( dom ( ( 0 ) -th_InputValues InpFs ) ) = ( InputVertices IIG ) by PARTFUN1:def 2;
( InputVertices IIG ) misses ( SortsWithConstants IIG ) by MSAFREE2:4;
then (not v in ( SortsWithConstants IIG )) by A8,XBOOLE_0:3;
then (not v in ( dom ( Set-Constants SCS ) )) by PARTFUN1:def 2;
hence ( (( ( Computation (s,InpFs) ) . ( 0 ) ) qua (Element of ( product (the Sorts of SCS) ))) . v ) = ( ( s +* ( ( 0 ) -th_InputValues InpFs ) ) . v ) by A7,FUNCT_4:11
.= ( ( ( 0 ) -th_InputValues InpFs ) . v ) by A8,A9,FUNCT_4:13
.= ( iv . v ) by A4,A3,CIRCUIT1:def 2
.= ( IGValue (v,iv) ) by A8,CKB16:1;
end;
suppose A10: v in ( SortsWithConstants IIG );

then v in ( dom ( Set-Constants SCS ) ) by PARTFUN1:def 2;
hence ( (( ( Computation (s,InpFs) ) . ( 0 ) ) qua (Element of ( product (the Sorts of SCS) ))) . v ) = ( ( Set-Constants SCS ) . v ) by A7,FUNCT_4:13
.= ( IGValue (v,iv) ) by A10,CKB17:1;
end;
end;
A11: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
reconsider Ck = ( ( Computation (s,InpFs) ) . k ) as (State of SCS);
assume A12: P[ k ];
let v being (Vertex of IIG);
assume that
A13: ( depth (v,SCS) ) <= ( k + 1 );
A14: ( dom ( commute InpFs ) ) = ( NAT ) by A2,PRE_CIRC:5;
A15: ( ( k + 1 ) -th_InputValues InpFs ) = ( ( commute InpFs ) . ( k + 1 ) ) by A4,CIRCUIT1:def 2
.= ( ( commute InpFs ) . ( 0 ) ) by A1,A14,FUNCT_1:def 10;
A16: iv c= Ck by A1,A2,A3,CKB25:1;
thus ( (( ( Computation (s,InpFs) ) . ( k + 1 ) ) qua (State of SCS)) . v ) = ( ( Following (Ck,( ( k + 1 ) -th_InputValues InpFs )) ) . v ) by CKB23:def 1
.= ( ( Following Ck ) . v ) by A3,A15,A16,FUNCT_4:98
.= ( IGValue (v,iv) ) by A12,A13,CKB24:1;
end;
thus (for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A5,A11);
end;
