environ
vocabularies NUMBERS,AMI_3,SUBSET_1,AMI_2,AMI_1,STRUCT_0,XBOOLE_0,FSM_1,RELAT_1,FUNCT_1,TARSKI,FINSET_1,CARD_1,XXREAL_0,PBOOLE,FINSEQ_1,GRAPHSP,ARYTM_3,ARYTM_1,INT_1,FUNCT_4,FUNCOP_1,CIRCUIT2,ORDINAL1,PARTFUN1,SCMNORM,RECDEF_2,CAT_1,AMISTD_5,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,CARD_1,XCMPLX_0,MCART_1,DOMAIN_1,PBOOLE,RELAT_1,FUNCT_1,FUNCOP_1,PARTFUN1,FUNCT_4,NUMBERS,INT_1,NAT_1,RECDEF_2,STRUCT_0,FINSET_1,FINSEQ_1,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMI_3,XXREAL_0,AMISTD_5;
definitions TARSKI,EXTPRO_1,AMI_3,FUNCOP_1,CARD_1,AMI_2,RELAT_1,FUNCT_1,COMPOS_1,AMISTD_5,MEMSTR_0;
theorems AMI_3,GRFUNC_1,TARSKI,FUNCOP_1,FUNCT_4,MEMSTR_0,FUNCT_1,ZFMISC_1,ENUMSET1,RELAT_1,XBOOLE_0,XBOOLE_1,PBOOLE,PARTFUN1,RECDEF_2,COMPOS_1,EXTPRO_1,AMISTD_5,NAT_1,CKB1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB21,CKB22,CKB23,CKB24;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,NUMBERS,XREAL_0,INT_1,CARD_3,AMI_2,AMI_3,FINSET_1,CARD_1,RELSET_1,FUNCT_2,COMPOS_1,EXTPRO_1,AMISTD_5,PBOOLE,FUNCT_4,FUNCOP_1,MEMSTR_0,CKB5,CKB19,CKB20;
constructors DOMAIN_1,XXREAL_0,FINSEQ_4,AMI_3,AMI_2,NUMBERS,PRE_POLY,RECDEF_2,AMISTD_2,AMISTD_5,AMISTD_1,PBOOLE,FUNCT_7,FUNCOP_1,MEMSTR_0,RELSET_1;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve I for (Element of ( Segm 9 ));
reserve da for Data-Location;
reserve db for Data-Location;
theorem
(for q being non  halt-free  finite (the Instructions of ( SCM )) -valued ( NAT ) -defined Function holds (for p being q -autonomic non  empty (FinPartState of ( SCM )) holds (for s1,s2 being (State of ( SCM )) holds ((p c= s1 & p c= s2) implies (for P1,P2 being (Instruction-Sequence of ( SCM )) holds ((q c= P1 & q c= P2) implies (for i being (Element of ( NAT )) holds (for da,db being Data-Location holds (for I being (Instruction of ( SCM )) holds (I = ( CurInstr (P1,( Comput (P1,s1,i) )) ) implies (((I = ( Divide (da,db) ) & da in ( dom p )) & da <> db) implies ( ( ( Comput (P1,s1,i) ) . da ) div ( ( Comput (P1,s1,i) ) . db ) ) = ( ( ( Comput (P2,s2,i) ) . da ) div ( ( Comput (P2,s2,i) ) . db ) ))))))))))))
proof
let q being non  halt-free  finite (the Instructions of ( SCM )) -valued ( NAT ) -defined Function;
let p being q -autonomic non  empty (FinPartState of ( SCM ));
let s1 being (State of ( SCM ));
let s2 being (State of ( SCM ));
assume that
B1: (p c= s1 & p c= s2);
let P1 being (Instruction-Sequence of ( SCM ));
let P2 being (Instruction-Sequence of ( SCM ));
assume that
A2: (q c= P1 & q c= P2);
let i being (Element of ( NAT ));
let da being Data-Location;
let db being Data-Location;
let I being (Instruction of ( SCM ));
assume that
A3: I = ( CurInstr (P1,( Comput (P1,s1,i) )) );
set Cs2i1 = ( Comput (P2,s2,( i + 1 )) );
set Cs2i = ( Comput (P2,s2,i) );
A4: Cs2i1 = ( Following (P2,Cs2i) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P2,Cs2i) ),Cs2i) );
assume that
A5: I = ( Divide (da,db) )
and
A6: da in ( dom p )
and
A7: da <> db
and
A8: ( ( ( Comput (P1,s1,i) ) . da ) div ( ( Comput (P1,s1,i) ) . db ) ) <> ( ( ( Comput (P2,s2,i) ) . da ) div ( ( Comput (P2,s2,i) ) . db ) );
I = ( CurInstr (P2,( Comput (P2,s2,i) )) ) by A3,A2,B1,AMISTD_5:7;
then A10: ( Cs2i1 . da ) = ( ( Cs2i . da ) div ( Cs2i . db ) ) by A4,A5,A7,AMI_3:6;
set Cs1i1 = ( Comput (P1,s1,( i + 1 )) );
set Cs1i = ( Comput (P1,s1,i) );
A11: (da in ( dom p ) implies (( ( Cs1i1 | ( dom p ) ) . da ) = ( Cs1i1 . da ) & ( ( Cs2i1 | ( dom p ) ) . da ) = ( Cs2i1 . da ))) by FUNCT_1:49;
Cs1i1 = ( Following (P1,Cs1i) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P1,Cs1i) ),Cs1i) );
then ( Cs1i1 . da ) = ( ( Cs1i . da ) div ( Cs1i . db ) ) by A3,A5,A7,AMI_3:6;
hence contradiction by A11,A8,A10,A2,A6,B1,EXTPRO_1:def 10;
end;
