environ
vocabularies OSALG_1,MSUALG_2,OSALG_2,MSUALG_1,TARSKI,STRUCT_0,RELAT_1,SEQM_3,PBOOLE,MSUALG_3,REALSET1,ZFMISC_1,XBOOLE_0,CARD_3,MSAFREE,SUBSET_1,FINSEQ_1,MARGREL1,FUNCT_1,XXREAL_0,PARTFUN1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,OSALG_4,CARD_5,NATTRA_1,CARD_LAR,QC_LANG1,EQREL_1,RELAT_2,MSUALG_4,COH_SP,MCART_1,UNIALG_2,MEMBER_1,FUNCT_7,OSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,FUNCT_1,MCART_1,PARTFUN1,FUNCT_2,FINSEQ_1,FINSEQ_2,PBOOLE,RELAT_2,TREES_2,CARD_3,EQREL_1,STRUCT_0,LANG1,TREES_3,TREES_4,DTCONSTR,ORDERS_2,ORDERS_3,MSUALG_1,MSUALG_2,MSUALG_3,MSUALG_4,OSALG_1,OSALG_2,OSALG_3,OSALG_4,MSAFREE,FUNCT_7,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,OSALG_1,OSALG_3,OSALG_4,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,OSALG_1,OSALG_2,OSALG_3,OSALG_4,MSAFREE,MSUALG_6,MSAFREE2,CARD_5,FINSEQ_2,FINSEQ_3,MSUALG_9,MSUALG_4,EQREL_1,FUNCT_5,ORDERS_2,RELAT_2,PARTFUN1,ORDERS_1,FUNCT_7,FUNCOP_1,TREES_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9,CKB11,CKB12;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0,FUNCT_2,PBOOLE;
registrations XBOOLE_0,SUBSET_1,RELAT_1,ORDINAL1,PARTFUN1,FUNCOP_1,FUNCT_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSUALG_4,MSUALG_9,OSALG_1,OSALG_4,RELSET_1,FINSEQ_1,CKB8,CKB10;
constructors XXREAL_0,NAT_1,FINSEQOP,FUNCT_7,MSUALG_3,MSAFREE,ORDERS_3,OSALG_2,OSALG_3,OSALG_4,RELSET_1,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12;
requirements BOOLE,SUBSET;
begin
reserve S for OrderSortedSign;
reserve X for (ManySortedSet of S);
reserve x for set;
definition
let S being OrderSortedSign;
let X being  non-empty (ManySortedSet of S);
let s being (Element of S);
func ParsedTerms (X,s) -> (Subset of ( TS ( DTConOSA X ) )) equals 
{ a where a is (Element of ( TS ( DTConOSA X ) )): ((ex s1 being (Element of S) st (ex x being set st ((s1 <= s & x in ( X . s1 )) & a = ( root-tree [ x,s1 ] )))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) <= s))) };
coherence
proof
set A = { a where a is (Element of ( TS ( DTConOSA X ) )): ((ex s1 being (Element of S) st (ex x being set st ((s1 <= s & x in ( X . s1 )) & a = ( root-tree [ x,s1 ] )))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) <= s))) };
A c= ( TS ( DTConOSA X ) )
proof
let x being set;
assume x in A;
then (ex a being (Element of ( TS ( DTConOSA X ) )) st (x = a & ((ex s1 being (Element of S) st (ex x being set st ((s1 <= s & x in ( X . s1 )) & a = ( root-tree [ x,s1 ] )))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) <= s)))));
hence thesis;
end;
hence thesis;
end;
end;
