environ
vocabularies OSALG_1,MSUALG_2,OSALG_2,MSUALG_1,TARSKI,STRUCT_0,RELAT_1,SEQM_3,PBOOLE,MSUALG_3,REALSET1,ZFMISC_1,XBOOLE_0,CARD_3,MSAFREE,SUBSET_1,FINSEQ_1,MARGREL1,FUNCT_1,XXREAL_0,PARTFUN1,LANG1,TDGROUP,DTCONSTR,TREES_3,TREES_4,NAT_1,TREES_2,OSALG_4,CARD_5,NATTRA_1,CARD_LAR,QC_LANG1,EQREL_1,RELAT_2,MSUALG_4,COH_SP,MCART_1,UNIALG_2,MEMBER_1,FUNCT_7,OSAFREE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NAT_1,RELAT_1,RELSET_1,FUNCT_1,MCART_1,PARTFUN1,FUNCT_2,FINSEQ_1,FINSEQ_2,PBOOLE,RELAT_2,TREES_2,CARD_3,EQREL_1,STRUCT_0,LANG1,TREES_3,TREES_4,DTCONSTR,ORDERS_2,ORDERS_3,MSUALG_1,MSUALG_2,MSUALG_3,MSUALG_4,OSALG_1,OSALG_2,OSALG_3,OSALG_4,MSAFREE,FUNCT_7,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12,CKB13,CKB15,CKB21,CKB22,CKB23,CKB25,CKB31,CKB32,CKB38,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB53,CKB60,CKB63,CKB65;
definitions TARSKI,XBOOLE_0,PBOOLE,MSUALG_3,OSALG_1,OSALG_3,OSALG_4,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12,CKB13,CKB15,CKB21,CKB22,CKB23,CKB31,CKB38,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB53,CKB60,CKB63,CKB65;
theorems TARSKI,FUNCT_1,FUNCT_2,MCART_1,ZFMISC_1,PBOOLE,CARD_3,MSUALG_1,MSUALG_2,MSUALG_3,RELAT_1,LANG1,DTCONSTR,FINSEQ_1,TREES_4,TREES_1,DOMAIN_1,RELSET_1,XBOOLE_0,XBOOLE_1,OSALG_1,OSALG_2,OSALG_3,OSALG_4,MSAFREE,MSUALG_6,MSAFREE2,CARD_5,FINSEQ_2,FINSEQ_3,MSUALG_9,MSUALG_4,EQREL_1,FUNCT_5,ORDERS_2,RELAT_2,PARTFUN1,ORDERS_1,FUNCT_7,FUNCOP_1,TREES_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB9,CKB11,CKB12,CKB13,CKB15,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB60,CKB62,CKB63,CKB64,CKB65,CKB67;
schemes CLASSES1,FUNCT_1,RELSET_1,DTCONSTR,XBOOLE_0,FUNCT_2,PBOOLE;
registrations XBOOLE_0,SUBSET_1,RELAT_1,ORDINAL1,PARTFUN1,FUNCOP_1,FUNCT_1,PBOOLE,TREES_2,TREES_3,STRUCT_0,DTCONSTR,MSUALG_1,MSUALG_3,MSAFREE,MSUALG_4,MSUALG_9,OSALG_1,OSALG_4,RELSET_1,FINSEQ_1,CKB8,CKB10,CKB14,CKB16,CKB24,CKB37,CKB40,CKB59,CKB61,CKB66;
constructors XXREAL_0,NAT_1,FINSEQOP,FUNCT_7,MSUALG_3,MSAFREE,ORDERS_3,OSALG_2,OSALG_3,OSALG_4,RELSET_1,CKB1,CKB3,CKB4,CKB5,CKB7,CKB12,CKB13,CKB15,CKB21,CKB22,CKB23,CKB25,CKB31,CKB38,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB53,CKB60,CKB63,CKB65;
requirements BOOLE,SUBSET;
begin
reserve S for OrderSortedSign;
reserve X for (ManySortedSet of S);
reserve o for (OperSymbol of S);
reserve x for set;
definition
let S being  locally_directed OrderSortedSign;
let X being  non-empty (ManySortedSet of S);
func OSFreeGen X -> (OSGeneratorSet of ( FreeOSA X )) means 
:Def27: (for s being (Element of S) holds ( it . s ) = ( OSFreeGen (s,X) ));
existence
proof
deffunc F((Element of S)) = ( OSFreeGen ($1,X) );
set FM = ( FreeOSA X );
set D = ( DTConOSA X );
set PTA = ( ParsedTermsOSA X );
set SO = (the Sorts of ( FreeOSA X ));
set NH = ( OSNat_Hom (( ParsedTermsOSA X ),( LCongruence X )) );
reconsider NH1 = NH as (ManySortedFunction of PTA,FM);
A1: NH1 is  order-sorted by OSALG_4:15;
reconsider SOS = SO as (OrderSortedSet of S);
consider f being Function such that A2: (( dom f ) = (the carrier of S) & (for s being (Element of S) holds ( f . s ) = F(s))) from FUNCT_1:sch 4;
reconsider f as (ManySortedSet of (the carrier of S)) by A2,PARTFUN1:def 2,RELAT_1:def 18;
A3: f c= (the Sorts of FM)
proof
let x;
assume x in (the carrier of S);
then reconsider s = x as (SortSymbol of S);
( f . s ) = ( OSFreeGen (s,X) ) by A2;
hence thesis;
end;
then reconsider f as (MSSubset of FM) by PBOOLE:def 18;
( OSCl f ) c= SOS by A3,OSALG_2:8;
then ( OSCl f ) is (ManySortedSubset of (the Sorts of FM)) by PBOOLE:def 18;
then reconsider O = ( OSCl f ) as (OSSubset of FM) by OSALG_2:def 2;
O is (OSSubset of ( GenOSAlg O )) by OSALG_2:def 12;
then A4: O c= (the Sorts of ( GenOSAlg O )) by PBOOLE:def 18;
f c= O by OSALG_2:7;
then A5: f c= (the Sorts of ( GenOSAlg O )) by A4,PBOOLE:13;
A6: NH1 is_epimorphism PTA,FM by OSALG_4:15;
then A7: NH1 is  "onto" by MSUALG_3:def 8;
A8: NH1 is_homomorphism PTA,FM by A6,MSUALG_3:def 8;
A9: (the Sorts of ( GenOSAlg O )) = (the Sorts of FM)
proof
defpred P[ set ]
 means
(for s1 being (Element of S) holds ($1 in ( dom ( NH1 . s1 ) ) implies ( ( NH1 . s1 ) . $1 ) in ( (the Sorts of ( GenOSAlg O )) . s1 )));
reconsider O2 = (the Sorts of ( GenOSAlg O )) as (OrderSortedSet of S) by OSALG_1:17;
(the Sorts of ( GenOSAlg O )) is (MSSubset of FM) by MSUALG_2:def 9;
hence (the Sorts of ( GenOSAlg O )) c= (the Sorts of FM) by PBOOLE:def 18;
A10: (for nt being (Symbol of D) holds (for ts being (FinSequence of ( TS D )) holds ((nt ==> ( roots ts ) & (for t being (DecoratedTree of (the carrier of D)) holds (t in ( rng ts ) implies P[ t ]))) implies P[ ( nt -tree ts ) ])))
proof
set G = ( GenOSAlg O );
set OU = ( [: (the carrier' of S),{ (the carrier of S) } :] \/ ( Union ( coprod (X qua (ManySortedSet of S)) ) ) );
let nt being (Symbol of D);
let ts being (FinSequence of ( TS D ));
assume that
A11: nt ==> ( roots ts )
and
A12: (for t being (DecoratedTree of (the carrier of D)) holds (t in ( rng ts ) implies P[ t ]));
[ nt,( roots ts ) ] in (the Rules of D) by A11,LANG1:def 1;
then reconsider rt = ( roots ts ) as (Element of ( OU * )) by ZFMISC_1:87;
reconsider sy = nt as (Element of OU);
[ sy,rt ] in ( OSREL X ) by A11,LANG1:def 1;
then sy in [: (the carrier' of S),{ (the carrier of S) } :] by CKB5:def 1;
then consider o being (Element of (the carrier' of S)),x2 being (Element of { (the carrier of S) }) such that A13: sy = [ o,x2 ] by DOMAIN_1:1;
let s1 being (Element of S);
assume ( nt -tree ts ) in ( dom ( NH1 . s1 ) );
then ( nt -tree ts ) in ( (the Sorts of PTA) . s1 );
then ( nt -tree ts ) in ( ParsedTerms (X,s1) ) by CKB15:def 1;
then consider a1 being (Element of ( TS D )) such that A14: ( nt -tree ts ) = a1 and A15: ((ex s2 being (Element of S) st (ex x being set st ((s2 <= s1 & x in ( X . s2 )) & a1 = ( root-tree [ x,s2 ] )))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a1 . ( {} ) ) & ( the_result_sort_of o ) <= s1)));
A16: ( Seg ( len rt ) ) = ( dom rt ) by FINSEQ_1:def 3;
A17: x2 = (the carrier of S) by TARSKI:def 1;
(not (ex s2 being (Element of S) st (ex x being set st ((s2 <= s1 & x in ( X . s2 )) & a1 = ( root-tree [ x,s2 ] )))))
proof
given s2 being (Element of S),x being set such that
s2 <= s1
and
x in ( X . s2 )
and
A18: a1 = ( root-tree [ x,s2 ] );

[ x,s2 ] = ( ( nt -tree ts ) . ( {} ) ) by A14,A18,TREES_4:3
.= [ o,x2 ] by A13,TREES_4:def 4;
then s2 = (the carrier of S) by A17,ZFMISC_1:27;
then s2 in s2;
hence contradiction;
end;
then consider o1 being (OperSymbol of S) such that A19: [ o1,(the carrier of S) ] = ( a1 . ( {} ) ) and A20: ( the_result_sort_of o1 ) <= s1 by A15;
set ar = ( the_arity_of o );
set rs = ( the_result_sort_of o );
A21: ( dom ( roots ts ) ) = ( dom ts ) by TREES_3:def 18;
[ nt,( roots ts ) ] in ( OSREL X ) by A11,LANG1:def 1;
then A22: ( len rt ) = ( len ar ) by A13,A17,CKB6:1;
A23: ( Seg ( len ar ) ) = ( dom ar ) by FINSEQ_1:def 3;
reconsider B = (the Sorts of G) as (MSSubset of FM) by MSUALG_2:def 9;
A24: ( dom ( B * ar ) ) = ( dom ar ) by PARTFUN1:def 2;
set AR = (the Arity of S);
set RS = (the ResultSort of S);
set BH = ( ( B # ) * (the Arity of S) );
( AR . o ) = ar by MSUALG_1:def 1;
then A25: ( BH . o ) = ( product ( B * ar ) ) by MSAFREE:1;
reconsider rs1 = rs,s11 = s1 as (Element of S);
reconsider B1 = B as (OrderSortedSet of S) by OSALG_1:17;
A26: ( RS . o ) = rs by MSUALG_1:def 2;
B is  opers_closed by MSUALG_2:def 9;
then B is_closed_on o by MSUALG_2:def 6;
then A27: ( rng ( ( Den (o,FM) ) | ( BH . o ) ) ) c= ( ( B * RS ) . o ) by MSUALG_2:def 5;
A28: ( OSSym (o,X) ) = [ o,(the carrier of S) ];
A29: nt = [ o,(the carrier of S) ] by A13,TARSKI:def 1;
then A30: ts in ( ( ( ( ParsedTerms X ) # ) * (the Arity of S) ) . o ) by A11,A28,CKB19:1;
then reconsider ts1 = ts as (Element of ( Args (o,PTA) )) by MSUALG_1:def 4;
( Den (o,PTA) ) = ( ( PTOper X ) . o ) by MSUALG_1:def 6
.= ( PTDenOp (o,X) ) by CKB22:def 1;
then A31: ( ( Den (o,PTA) ) . ts ) = ( nt -tree ts ) by A11,A28,A29,CKB21:def 1;
A32: ( dom ( (the Sorts of PTA) * ar ) ) = ( dom ar ) by PARTFUN1:def 2;
A33: (for x holds (x in ( dom ( B * ar ) ) implies ( ( NH1 # ts1 ) . x ) in ( ( B * ar ) . x )))
proof
let x;
assume that
A34: x in ( dom ( B * ar ) );
reconsider x1 = x as Nat by A34;
A35: ( ts . x1 ) in ( rng ts ) by A24,A21,A22,A16,A23,A34,FUNCT_1:def 3;
( rng ts ) c= ( TS D ) by FINSEQ_1:def 4;
then reconsider t = ( ts . x ) as (Element of ( TS D )) by A35;
( ts1 . x ) in ( ( (the Sorts of PTA) * ar ) . x ) by A24,A32,A34,MSUALG_3:6;
then ( ts1 . x ) in ( (the Sorts of PTA) . ( ar . x ) ) by A24,A32,A34,FUNCT_1:12;
then ( ts1 . x ) in ( (the Sorts of PTA) . ( ar /. x ) ) by A24,A34,PARTFUN1:def 6;
then ( ts1 . x1 ) in ( dom ( NH1 . ( ar /. x1 ) ) ) by FUNCT_2:def 1;
then ( ( NH1 . ( ar /. x1 ) ) . t ) in ( (the Sorts of ( GenOSAlg O )) . ( ar /. x1 ) ) by A12,A35;
then A36: ( ( NH1 . ( ar /. x1 ) ) . ( ts1 . x1 ) ) in ( B . ( ar . x ) ) by A24,A34,PARTFUN1:def 6;
( ( NH1 # ts1 ) . x1 ) = ( ( NH1 . ( ar /. x1 ) ) . ( ts1 . x1 ) ) by A24,A21,A22,A16,A23,A34,MSUALG_3:def 6;
hence thesis by A34,A36,FUNCT_1:12;
end;
( NH1 # ts1 ) in ( Args (o,FM) );
then A37: ( NH1 # ts1 ) in ( dom ( Den (o,FM) ) ) by FUNCT_2:def 1;
[ o1,(the carrier of S) ] = [ o,x2 ] by A13,A14,A19,TREES_4:def 4;
then A38: o1 = o by ZFMISC_1:27;
then A39: ( B1 . rs1 ) c= ( B1 . s11 ) by A20,OSALG_1:def 16;
( dom ( NH1 # ts1 ) ) = ( dom ar ) by MSUALG_3:6;
then ( NH1 # ts1 ) in ( BH . o ) by A25,A24,A33,CARD_3:9;
then ( ( Den (o,FM) ) . ( NH1 # ts1 ) ) in ( rng ( ( Den (o,FM) ) | ( BH . o ) ) ) by A37,FUNCT_1:50;
then A40: ( ( Den (o,FM) ) . ( NH1 # ts1 ) ) in ( ( B * RS ) . o ) by A27;
ts in ( Args (o,PTA) ) by A30,MSUALG_1:def 4;
then ( ( Den (o,PTA) ) . ts ) in ( Result (o,PTA) ) by FUNCT_2:5;
then ( ( Den (o,PTA) ) . ts ) in ( ( (the Sorts of PTA) * RS ) . o ) by MSUALG_1:def 5;
then ( ( Den (o,PTA) ) . ts ) in ( (the Sorts of PTA) . rs ) by A26,FUNCT_2:15;
then ( nt -tree ts ) in ( dom ( NH1 . rs ) ) by A31,FUNCT_2:def 1;
then A41: ( ( NH1 . s11 ) . ( nt -tree ts ) ) = ( ( NH1 . rs1 ) . ( nt -tree ts ) ) by A1,A20,A38,OSALG_3:def 1;
( ( NH1 . rs ) . ( ( Den (o,PTA) ) . ts1 ) ) = ( ( Den (o,FM) ) . ( NH1 # ts1 ) ) by A8,MSUALG_3:def 7;
then ( ( NH1 . rs ) . ( nt -tree ts ) ) in ( B . rs ) by A26,A31,A40,FUNCT_2:15;
hence thesis by A39,A41;
end;
let x;
assume A42: x in (the carrier of S);
then reconsider s = x as (SortSymbol of S);
A43: (for s being (Symbol of D) holds (s in ( Terminals D ) implies P[ ( root-tree s ) ]))
proof
let t being (Symbol of D);
assume A44: t in ( Terminals D );
let s1 being (Element of S);
assume ( root-tree t ) in ( dom ( NH1 . s1 ) );
then ( root-tree t ) in ( (the Sorts of PTA) . s1 );
then ( root-tree t ) in ( ParsedTerms (X,s1) ) by CKB15:def 1;
then consider a being (Element of ( TS D )) such that A45: ( root-tree t ) = a and A46: ((ex s2 being (Element of S) st (ex x being set st ((s2 <= s1 & x in ( X . s2 )) & a = ( root-tree [ x,s2 ] )))) or (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) <= s1)));
(not (ex o being (OperSymbol of S) st ([ o,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o ) <= s1)))
proof
consider s3 being (Element of S),x3 being set such that x3 in ( X . s3 ) and A47: t = [ x3,s3 ] by A44,CKB11:1;
given o being (OperSymbol of S) such that
A48: [ o,(the carrier of S) ] = ( a . ( {} ) )
and
( the_result_sort_of o ) <= s1;

[ o,(the carrier of S) ] = t by A45,A48,TREES_4:3;
then (the carrier of S) = s3 by A47,ZFMISC_1:27;
then s3 in s3;
hence contradiction;
end;
then consider s2 being (Element of S),x being set such that A49: s2 <= s1 and A50: x in ( X . s2 ) and A51: a = ( root-tree [ x,s2 ] ) by A46;
reconsider s11 = s1,s21 = s2 as (Element of S);
a in ( ParsedTerms (X,s2) ) by A50,A51;
then a in ( ( ParsedTerms X ) . s2 ) by CKB15:def 1;
then ( root-tree [ x,s2 ] ) in ( dom ( NH1 . s2 ) ) by A51,FUNCT_2:def 1;
then A52: ( ( NH1 . s21 ) . ( root-tree [ x,s2 ] ) ) = ( ( NH1 . s11 ) . ( root-tree [ x,s2 ] ) ) by A1,A49,OSALG_3:def 1;
( f . s2 ) c= ( (the Sorts of ( GenOSAlg O )) . s2 ) by A5,PBOOLE:def 2;
then A53: ( OSFreeGen (s2,X) ) c= ( (the Sorts of ( GenOSAlg O )) . s2 ) by A2;
( O2 . s21 ) c= ( O2 . s11 ) by A49,OSALG_1:def 16;
then A54: ( OSFreeGen (s2,X) ) c= ( (the Sorts of ( GenOSAlg O )) . s1 ) by A53,XBOOLE_1:1;
( ( NH1 . s2 ) . ( root-tree [ x,s2 ] ) ) in ( OSFreeGen (s2,X) ) by A50,CKB65:def 1;
hence thesis by A45,A51,A52,A54;
end;
A55: (for t being (DecoratedTree of (the carrier of D)) holds (t in ( TS D ) implies P[ t ])) from DTCONSTR:sch 7(A43,A10);
( (the Sorts of FM) . s ) c= ( (the Sorts of ( GenOSAlg O )) . s )
proof
let x1 being set;
assume A56: x1 in ( (the Sorts of FM) . s );
A57: ( (the Sorts of PTA) . s ) = ( ParsedTerms (X,s) ) by CKB15:def 1
.= { a where a is (Element of ( TS D )): ((ex s2 being (Element of S) st (ex x being set st ((s2 <= s & x in ( X . s2 )) & a = ( root-tree [ x,s2 ] )))) or (ex o1 being (OperSymbol of S) st ([ o1,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o1 ) <= s))) };
( rng ( NH1 . x ) ) = ( (the Sorts of FM) . x ) by A7,A42,MSUALG_3:def 3;
then consider x2 being set such that A58: x2 in ( dom ( NH1 . s ) ) and A59: x1 = ( ( NH1 . s ) . x2 ) by A56,FUNCT_1:def 3;
x2 in ( (the Sorts of PTA) . s ) by A58;
then (ex a being (Element of ( TS D )) st (a = x2 & ((ex s2 being (Element of S) st (ex x being set st ((s2 <= s & x in ( X . s2 )) & a = ( root-tree [ x,s2 ] )))) or (ex o1 being (OperSymbol of S) st ([ o1,(the carrier of S) ] = ( a . ( {} ) ) & ( the_result_sort_of o1 ) <= s))))) by A57;
hence thesis by A55,A58,A59;
end;
hence thesis;
end;
f is (OSGeneratorSet of FM)
proof
let O1 being (OSSubset of FM);
assume O1 = ( OSCl f );
hence thesis by A9;
end;
then reconsider f as (OSGeneratorSet of FM);
take f;
thus thesis by A2;
end;
uniqueness
proof
let A being (OSGeneratorSet of ( FreeOSA X ));
let B being (OSGeneratorSet of ( FreeOSA X ));
assume that
A60: (for s being (Element of S) holds ( A . s ) = ( OSFreeGen (s,X) ))
and
A61: (for s being (Element of S) holds ( B . s ) = ( OSFreeGen (s,X) ));
(for i being set holds (i in (the carrier of S) implies ( A . i ) = ( B . i )))
proof
let i being set;
assume i in (the carrier of S);
then reconsider s = i as (SortSymbol of S);
( A . s ) = ( OSFreeGen (s,X) ) by A60;
hence thesis by A61;
end;
hence thesis by PBOOLE:3;
end;
end;
