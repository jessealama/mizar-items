environ
vocabularies NUMBERS,REAL_1,SUBSET_1,RCOMP_1,PARTFUN1,NAT_1,FUNCT_1,RELAT_1,XBOOLE_0,ARYTM_1,VALUED_1,TARSKI,XXREAL_0,PREPOWER,ORDINAL4,CARD_1,NEWTON,ARYTM_3,FDIFF_1,SIN_COS,ABIAN,SQUARE_1,REALSET1,TAYLOR_1,TAYLOR_2,XXREAL_1,COMPLEX1,FUNCOP_1;
notations SUBSET_1,PARTFUN1,RCOMP_1,XXREAL_0,NUMBERS,COMPLEX1,FUNCT_2,FUNCOP_1,REAL_1,NAT_1,NAT_D,VALUED_1,SEQ_1,TAYLOR_2,FDIFF_1,SEQFUNC,NEWTON,SIN_COS,TAYLOR_1,ABIAN,XBOOLE_0,TARSKI,PREPOWER,RFUNCT_1,SQUARE_1,RELSET_1;
definitions TAYLOR_1,VALUED_1,FDIFF_1,TARSKI,SQUARE_1,XBOOLE_0;
theorems RFUNCT_1,XBOOLE_0,NEWTON,XCMPLX_1,FUNCT_1,XBOOLE_1,ABSVALUE,PARTFUN1,RELAT_1,RCOMP_1,SIN_COS,NAT_1,FDIFF_1,FDIFF_2,TAYLOR_1,SIN_COS2,XREAL_1,ABIAN,XXREAL_0,TAYLOR_2,INT_1,WSIERP_1,FUNCT_2,TARSKI,XCMPLX_0,VALUED_1,PREPOWER,ZFMISC_1,FDIFF_7,FDIFF_8,FDIFF_4,FUNCOP_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
schemes NAT_1;
registrations RELSET_1,NUMBERS,XXREAL_0,NAT_1,MEMBERED,VALUED_0,RCOMP_1,FUNCT_1,INT_1,ORDINAL1,FUNCT_2;
constructors REAL_1,NAT_1,RCOMP_1,LIMFUNC1,TAYLOR_2,FDIFF_1,SIN_COS,ABIAN,TAYLOR_1,RFUNCT_1,SQUARE_1,PREPOWER,BINARITH,PARTFUN2,SEQ_1,VALUED_1,BINOP_2,NAT_D,SEQFUNC,RELSET_1,NEWTON;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve Z for  open (Subset of ( REAL ));
reserve f1 for (PartFunc of ( REAL ),( REAL ));
reserve f2 for (PartFunc of ( REAL ),( REAL ));
reserve k for Nat;
theorem
Th15: ((f1 is_differentiable_on n,Z & f2 is_differentiable_on n,Z) implies ( ( diff (( f1 + f2 ),Z) ) . n ) = ( ( ( diff (f1,Z) ) . n ) + ( ( diff (f2,Z) ) . n ) ))
proof
defpred P[ Nat ]
 means
((f1 is_differentiable_on $1,Z & f2 is_differentiable_on $1,Z) implies ( ( diff (( f1 + f2 ),Z) ) . $1 ) = ( ( ( diff (f1,Z) ) . $1 ) + ( ( diff (f2,Z) ) . $1 ) ));
A1: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume that
A2: P[ k ];
assume A3: (f1 is_differentiable_on ( k + 1 ),Z & f2 is_differentiable_on ( k + 1 ),Z);
k <= ( ( k + 1 ) - 1 );
then A4: (( ( diff (f1,Z) ) . k ) is_differentiable_on Z & ( ( diff (f2,Z) ) . k ) is_differentiable_on Z) by A3,TAYLOR_1:def 6;
k < ( k + 1 ) by NAT_1:19;
then ( ( diff (( f1 + f2 ),Z) ) . ( k + 1 ) ) = ( ( ( ( diff (f1,Z) ) . k ) + ( ( diff (f2,Z) ) . k ) ) `| Z ) by A2,A3,TAYLOR_1:23,TAYLOR_1:def 5
.= ( ( ( ( diff (f1,Z) ) . k ) `| Z ) + ( ( ( diff (f2,Z) ) . k ) `| Z ) ) by A4,FDIFF_2:17
.= ( ( ( diff (f1,Z) ) . ( k + 1 ) ) + ( ( ( diff (f2,Z) ) . k ) `| Z ) ) by TAYLOR_1:def 5
.= ( ( ( diff (f1,Z) ) . ( k + 1 ) ) + ( ( diff (f2,Z) ) . ( k + 1 ) ) ) by TAYLOR_1:def 5;
hence thesis;
end;
A5: P[ ( 0 ) ]
proof
assume that
f1 is_differentiable_on ( 0 ),Z
and
f2 is_differentiable_on ( 0 ),Z;
( ( diff (( f1 + f2 ),Z) ) . ( 0 ) ) = ( ( f1 + f2 ) | Z ) by TAYLOR_1:def 5
.= ( ( f1 | Z ) + ( f2 | Z ) ) by RFUNCT_1:44
.= ( ( ( diff (f1,Z) ) . ( 0 ) ) + ( f2 | Z ) ) by TAYLOR_1:def 5
.= ( ( ( diff (f1,Z) ) . ( 0 ) ) + ( ( diff (f2,Z) ) . ( 0 ) ) ) by TAYLOR_1:def 5;
hence thesis;
end;
(for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A5,A1);
hence thesis;
end;
