environ
vocabularies NUMBERS,FINSEQ_1,SUBSET_1,RLVECT_1,REAL_1,STRUCT_0,FUNCT_1,XBOOLE_0,ALGSTR_0,RELAT_1,PARTFUN1,ARYTM_3,CARD_3,ORDINAL4,XXREAL_0,TARSKI,CARD_1,SUPINF_2,ARYTM_1,NAT_1,FUNCT_2,FINSET_1,FUNCOP_1,VALUED_1,RLSUB_1,QC_LANG1,BINOP_1,ZFMISC_1,XREAL_0,ORDINAL1,RLVECT_2,LATTICES,VECTSP_1,PRE_POLY;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,CARD_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,FINSET_1,FINSEQ_1,RELAT_1,FUNCT_1,RELSET_1,PRE_POLY,PARTFUN1,FUNCT_2,FUNCOP_1,DOMAIN_1,VALUED_1,FINSEQ_4,STRUCT_0,ALGSTR_0,GROUP_1,RLVECT_1,VECTSP_1,REAL_1,RLSUB_1,NAT_1,BINOP_1,XXREAL_0,CKB1;
definitions FUNCT_1,RLSUB_1,TARSKI,XBOOLE_0,BINOP_1,RLVECT_1,RELAT_1,FUNCT_2,STRUCT_0,ALGSTR_0,CKB1;
theorems BINOP_1,CARD_1,CARD_2,ENUMSET1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQ_4,FUNCT_1,FUNCT_2,NAT_1,RLSUB_1,RLSUB_2,RLVECT_1,TARSKI,ZFMISC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,XCMPLX_1,FUNCOP_1,XREAL_1,XXREAL_0,ORDINAL1,STRUCT_0,PARTFUN1,VALUED_1,XREAL_0,VECTSP_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7;
schemes BINOP_1,FINSEQ_1,FUNCT_2,NAT_1,XBOOLE_0;
registrations SUBSET_1,FUNCT_1,RELSET_1,FUNCT_2,FINSET_1,NUMBERS,XREAL_0,STRUCT_0,RLVECT_1,RLSUB_1,VALUED_1,VALUED_0,MEMBERED,FINSEQ_1,CARD_1,VECTSP_1,VECTSP_2;
constructors PARTFUN1,BINOP_1,DOMAIN_1,FUNCOP_1,XXREAL_0,REAL_1,NAT_1,FINSEQ_4,RLSUB_1,VALUED_1,RELSET_1,VECTSP_1,PRE_POLY,RLVECT_1,CKB1;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve i for (Element of ( NAT ));
reserve V for RealLinearSpace;
reserve F for (FinSequence of V);
reserve G for (FinSequence of V);
reserve f for (Function of (the carrier of V),( REAL ));
theorem
(for V being  Abelian  add-associative  right_zeroed  right_complementable non  empty addLoopStr holds (for F,G being (FinSequence of (the carrier of V)) holds (for f being (Permutation of ( dom F )) holds (G = ( F * f ) implies ( Sum F ) = ( Sum G )))))
proof
let V being  Abelian  add-associative  right_zeroed  right_complementable non  empty addLoopStr;
let F being (FinSequence of (the carrier of V));
let G being (FinSequence of (the carrier of V));
let f being (Permutation of ( dom F ));
assume G = ( F * f );
then (( len F ) = ( len G ) & (for i holds (i in ( dom G ) implies ( G . i ) = ( F . ( f . i ) )))) by FINSEQ_2:44,FUNCT_1:12;
hence thesis by CKB7:1;
end;
