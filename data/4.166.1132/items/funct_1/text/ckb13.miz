environ
vocabularies RELAT_1,XBOOLE_0,ZFMISC_1,SUBSET_1,TARSKI,SETFAM_1,FUNCT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,SETFAM_1,CKB1,CKB4,CKB7,CKB10;
definitions TARSKI,XBOOLE_0,RELAT_1,SETFAM_1,ZFMISC_1,CKB1,CKB7,CKB10;
theorems TARSKI,XBOOLE_0,ZFMISC_1,RELAT_1,XBOOLE_1,SUBSET_1,CKB1,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes TARSKI,XBOOLE_0,CKB6;
registrations XBOOLE_0,RELAT_1,ZFMISC_1,CKB2,CKB3,CKB5;
constructors SETFAM_1,RELAT_1,CKB1,CKB7;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve y1 for set;
reserve y2 for set;
reserve f for Function;
scheme FuncEx { A() -> set,P[set,set] } : (ex f st (( dom f ) = A() & (for x holds (x in A() implies P[ x,( f . x ) ]))))
provided
A1: (for x holds (for y1 holds (for y2 holds (((x in A() & P[ x,y1 ]) & P[ x,y2 ]) implies y1 = y2))))
and
A2: (for x holds (x in A() implies (ex y st P[ x,y ])))
proof
defpred R[ set,set ]
 means
($1 in A() & P[ $1,$2 ]);
A3: (for x holds (for y1 holds (for y2 holds ((R[ x,y1 ] & R[ x,y2 ]) implies y1 = y2)))) by A1;
consider f being Function such that A4: (for x holds (for y holds ([ x,y ] in f iff (x in A() & R[ x,y ])))) from CKB6:sch 1(A3);
take f;
(x in ( dom f ) iff x in A())
proof
thus (x in ( dom f ) implies x in A())
proof
assume x in ( dom f );
then (ex y st [ x,y ] in f) by RELAT_1:def 4;
hence thesis by A4;
end;

assume A5: x in A();
then consider y such that A6: P[ x,y ] by A2;
[ x,y ] in f by A4,A5,A6;
hence thesis by RELAT_1:def 4;
end;
hence A7: ( dom f ) = A() by TARSKI:1;
let x;
assume A8: x in A();
then consider y such that A9: P[ x,y ] by A2;
[ x,y ] in f by A4,A8,A9;
hence thesis by A7,A8,A9,CKB7:def 1;
end;
