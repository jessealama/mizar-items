environ
vocabularies RELAT_1,XBOOLE_0,ZFMISC_1,SUBSET_1,TARSKI,SETFAM_1,FUNCT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,SETFAM_1,CKB1,CKB4,CKB7;
definitions TARSKI,XBOOLE_0,RELAT_1,SETFAM_1,ZFMISC_1,CKB1,CKB7;
theorems TARSKI,XBOOLE_0,ZFMISC_1,RELAT_1,XBOOLE_1,SUBSET_1,CKB1,CKB7,CKB8,CKB9;
schemes TARSKI,XBOOLE_0,CKB6;
registrations XBOOLE_0,RELAT_1,ZFMISC_1,CKB2,CKB3,CKB5;
constructors SETFAM_1,RELAT_1,CKB1,CKB7;
requirements SUBSET,BOOLE;
begin
reserve Y for set;
reserve x for set;
reserve y for set;
reserve f for Function;
definition
let f;
redefine func rng f
means
:Def5: (for y holds (y in it iff (ex x st (x in ( dom f ) & y = ( f . x )))));
compatibility
proof
let Y;
hereby
assume A1: Y = ( rng f );
let y;
hereby
assume y in Y;
then consider x such that A2: [ x,y ] in f by A1,RELAT_1:def 5;
take x;
thus (x in ( dom f ) & y = ( f . x )) by A2,CKB8:1;
end;
given x such that
A3: (x in ( dom f ) & y = ( f . x ));

[ x,y ] in f by A3,CKB7:def 1;
hence y in Y by A1,RELAT_1:def 5;
end;
assume A4: (for y holds (y in Y iff (ex x st (x in ( dom f ) & y = ( f . x )))));
hereby
let y;
assume y in Y;
then consider x such that A5: (x in ( dom f ) & y = ( f . x )) by A4;
[ x,y ] in f by A5,CKB7:def 1;
hence y in ( rng f ) by RELAT_1:def 5;
end;
let y;
assume y in ( rng f );
then consider x such that A6: [ x,y ] in f by RELAT_1:def 5;
(x in ( dom f ) & y = ( f . x )) by A6,CKB8:1;
hence thesis by A4;
end;
end;
