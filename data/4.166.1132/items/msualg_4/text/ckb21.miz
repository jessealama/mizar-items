environ
vocabularies STRUCT_0,XBOOLE_0,MSUALG_1,FUNCT_1,RELAT_1,PBOOLE,FUNCOP_1,EQREL_1,SUBSET_1,NAT_1,MARGREL1,PARTFUN1,FINSEQ_1,TARSKI,CARD_3,MSUALG_3,WELLORD1,MSUALG_4;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,EQREL_1,STRUCT_0,NAT_1,FUNCT_2,FINSEQ_1,FINSEQ_2,CARD_3,PBOOLE,FUNCOP_1,MSUALG_1,MSUALG_3,CKB2,CKB4,CKB5,CKB6,CKB7,CKB8,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17,CKB20;
definitions TARSKI,MSUALG_3,XBOOLE_0,FUNCOP_1,CKB2,CKB5,CKB8,CKB11,CKB15,CKB16,CKB20;
theorems FUNCT_1,FUNCT_2,PBOOLE,CARD_3,MSUALG_1,ZFMISC_1,RELAT_1,RELSET_1,EQREL_1,MSUALG_3,MSAFREE,TARSKI,XBOOLE_0,FUNCOP_1,ORDINAL1,PARTFUN1,FINSEQ_2,CKB2,CKB5,CKB8,CKB10,CKB11,CKB15,CKB16,CKB20;
schemes FUNCT_1,CLASSES1,EQREL_1;
registrations RELAT_1,FUNCT_1,PARTFUN1,FUNCOP_1,PBOOLE,STRUCT_0,MSUALG_1,MSUALG_3,CARD_3,RELSET_1,FINSEQ_2,FINSEQ_1,CKB1,CKB3,CKB9,CKB12,CKB18,CKB19;
constructors EQREL_1,PRALG_2,MSUALG_3,RELSET_1,CKB2,CKB5,CKB6,CKB8,CKB11,CKB14,CKB15,CKB16,CKB17,CKB20;
requirements SUBSET,BOOLE;
begin
reserve S for non  void non  empty ManySortedSign;
reserve o for (OperSymbol of S);
definition
let S;
let o;
let A being  non-empty MSAlgebra over S;
let R being (MSCongruence of A);
func QuotRes (R,o) -> (Function of ( ( (the Sorts of A) * (the ResultSort of S) ) . o ),( ( ( Class R ) * (the ResultSort of S) ) . o )) means 
:Def10: (for x being (Element of ( (the Sorts of A) . ( the_result_sort_of o ) )) holds ( it . x ) = ( Class (R,x) ));
existence
proof
set rs = ( the_result_sort_of o );
set D = ( (the Sorts of A) . rs );
deffunc F((Element of D)) = ( Class (R,$1) );
consider f being Function such that A1: (( dom f ) = D & (for d being (Element of D) holds ( f . d ) = F(d))) from FUNCT_1:sch 4;
A2: (for x being set holds (x in D implies ( f . x ) in ( ( Class R ) . rs )))
proof
let x being set;
assume x in D;
then reconsider x1 = x as (Element of D);
( f . x1 ) = ( Class (R,x1) ) by A1;
then ( f . x1 ) in ( Class ( R . rs ) ) by EQREL_1:def 3;
hence thesis by CKB16:def 1;
end;
o in (the carrier' of S);
then o in ( dom ( (the Sorts of A) * (the ResultSort of S) ) ) by PARTFUN1:def 2;
then A3: ( ( (the Sorts of A) * (the ResultSort of S) ) . o ) = ( (the Sorts of A) . ( (the ResultSort of S) . o ) ) by FUNCT_1:12
.= D by MSUALG_1:def 2;
A4: ( dom (the ResultSort of S) ) = (the carrier' of S) by FUNCT_2:def 1;
then ( dom ( ( Class R ) * (the ResultSort of S) ) ) = ( dom (the ResultSort of S) ) by PARTFUN1:def 2;
then ( ( ( Class R ) * (the ResultSort of S) ) . o ) = ( ( Class R ) . ( (the ResultSort of S) . o ) ) by A4,FUNCT_1:12
.= ( ( Class R ) . rs ) by MSUALG_1:def 2;
then reconsider f as (Function of ( ( (the Sorts of A) * (the ResultSort of S) ) . o ),( ( ( Class R ) * (the ResultSort of S) ) . o )) by A1,A3,A2,FUNCT_2:3;
take f;
thus thesis by A1;
end;
uniqueness
proof
set SA = (the Sorts of A);
set RS = (the ResultSort of S);
set rs = ( the_result_sort_of o );
let f being (Function of ( ( (the Sorts of A) * (the ResultSort of S) ) . o ),( ( ( Class R ) * (the ResultSort of S) ) . o ));
let g being (Function of ( ( (the Sorts of A) * (the ResultSort of S) ) . o ),( ( ( Class R ) * (the ResultSort of S) ) . o ));
assume that
A5: (for x being (Element of ( SA . rs )) holds ( f . x ) = ( Class (R,x) ))
and
A6: (for x being (Element of ( SA . rs )) holds ( g . x ) = ( Class (R,x) ));
A7:now
let x being set;
assume x in ( SA . rs );
then reconsider x1 = x as (Element of ( SA . rs ));
( f . x1 ) = ( Class (R,x1) ) by A5;
hence ( f . x ) = ( g . x ) by A6;
end;
o in (the carrier' of S);
then o in ( dom ( SA * RS ) ) by PARTFUN1:def 2;
then ( ( SA * RS ) . o ) = ( SA . ( RS . o ) ) by FUNCT_1:12
.= ( SA . rs ) by MSUALG_1:def 2;
then (( dom f ) = ( SA . rs ) & ( dom g ) = ( SA . rs )) by FUNCT_2:def 1;
hence thesis by A7,FUNCT_1:2;
end;
end;
