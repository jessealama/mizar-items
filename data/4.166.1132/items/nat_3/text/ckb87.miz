environ
vocabularies NUMBERS,ORDINAL1,REAL_1,FINSEQ_1,VALUED_0,XBOOLE_0,NEWTON,ARYTM_3,RELAT_1,NAT_1,XXREAL_0,ARYTM_1,SUBSET_1,CARD_1,CARD_3,ORDINAL4,TARSKI,INT_2,FUNCT_1,FINSEQ_2,PRE_POLY,PBOOLE,FINSET_1,RVSUM_1,XCMPLX_0,UPROOTS,FUNCT_2,BINOP_2,SETWISEO,INT_1,FUNCOP_1,ZFMISC_1,NAT_3;
notations TARSKI,XBOOLE_0,SUBSET_1,FINSET_1,ZFMISC_1,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,REAL_1,NAT_D,INT_2,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,VALUED_0,SEQ_1,PBOOLE,RVSUM_1,NAT_1,NEWTON,WSIERP_1,TREES_4,UPROOTS,BINOP_2,FUNCOP_1,XXREAL_2,SETWOP_2,PRE_POLY,POLYNOM2,CKB12,CKB15,CKB16,CKB25,CKB31,CKB36,CKB42,CKB43,CKB45,CKB49,CKB50,CKB63,CKB64;
definitions TARSKI,XBOOLE_0,INT_2,NAT_D,FINSEQ_1,FINSEQ_2,VALUED_0,PRE_POLY,CKB12,CKB25,CKB31,CKB36,CKB42,CKB45,CKB49,CKB63;
theorems ORDINAL1,NEWTON,NAT_1,XCMPLX_1,INT_1,CARD_4,XREAL_0,RVSUM_1,INT_2,PEPIN,PBOOLE,FUNCT_1,CARD_2,PREPOWER,FINSEQ_1,TARSKI,XBOOLE_1,FUNCOP_1,WSIERP_1,XBOOLE_0,RADIX_1,BAGORDER,FINSEQ_2,FINSEQ_3,FINSEQ_4,RELAT_1,UPROOTS,FINSOP_1,FUNCT_2,XREAL_1,XXREAL_0,NAT_D,VALUED_0,XXREAL_2,PARTFUN1,PRE_POLY,CARD_1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB25,CKB29,CKB31,CKB34,CKB36,CKB39,CKB42,CKB44,CKB45,CKB48,CKB49,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB65,CKB66,CKB67,CKB69,CKB70,CKB72,CKB73,CKB75,CKB76,CKB77,CKB78,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86;
schemes NAT_1,PRE_CIRC,FINSEQ_1,FINSEQ_2,PBOOLE,CLASSES1;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FINSET_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,INT_1,BINOP_2,MEMBERED,NEWTON,VALUED_0,FINSEQ_1,XXREAL_2,CARD_1,UPROOTS,FUNCT_2,RELSET_1,ZFMISC_1,FINSEQ_2,PRE_POLY,CKB1,CKB2,CKB3,CKB13,CKB14,CKB24,CKB26,CKB27,CKB28,CKB30,CKB32,CKB33,CKB35,CKB37,CKB38,CKB40,CKB41,CKB46,CKB47,CKB68,CKB71,CKB74,CKB79,CKB80;
constructors BINOP_1,SETWISEO,NAT_D,FINSEQOP,FINSOP_1,NEWTON,WSIERP_1,POLYNOM2,UPROOTS,SEQ_1,BINOP_2,XXREAL_2,RELSET_1,CKB12,CKB15,CKB16,CKB25,CKB31,CKB36,CKB42,CKB43,CKB45,CKB49,CKB50,CKB63;
requirements NUMERALS,SUBSET,ARITHM,REAL,BOOLE;
begin
reserve n for non  empty  natural number;
reserve m for non  empty  natural number;
theorem
(m divides n implies ( pfexp ( n div m ) ) = ( ( pfexp n ) -' ( pfexp m ) ))
proof
assume A1: m divides n;
(for i being set holds (i in ( SetPrimes ) implies ( ( pfexp ( n div m ) ) . i ) = ( ( ( pfexp n ) -' ( pfexp m ) ) . i )))
proof
let i being set;
assume i in ( SetPrimes );
then reconsider a = i as  prime (Element of ( NAT )) by NEWTON:def 6;
thus ( ( pfexp ( n div m ) ) . i ) = ( a |-count ( n div m ) ) by CKB63:def 1
.= ( ( a |-count n ) -' ( a |-count m ) ) by A1,CKB61:1
.= ( ( ( pfexp n ) . i ) -' ( a |-count m ) ) by CKB63:def 1
.= ( ( ( pfexp n ) . i ) -' ( ( pfexp m ) . i ) ) by CKB63:def 1
.= ( ( ( pfexp n ) -' ( pfexp m ) ) . i ) by PRE_POLY:def 6;
end;
hence thesis by PBOOLE:3;
end;
