environ
vocabularies BCIALG_1,STRUCT_0,BINOP_1,SUBSET_1,XBOOLE_0,RELAT_1,FUNCT_1,FUNCT_5,ZFMISC_1,NUMBERS,FINSEQ_1,XXREAL_0,SUPINF_2,VECTSP_1,ALGSTR_0,RLVECT_1,ARYTM_3,SETWISEO,GROUP_1,CARD_1,NAT_1,NEWTON,POWER,FINSOP_1,ORDINAL4,BCIALG_2,TARSKI,FILTER_0,BCIALG_4;
notations TARSKI,ZFMISC_1,XBOOLE_0,SUBSET_1,BINOP_1,FUNCT_5,CARD_1,STRUCT_0,ALGSTR_0,BCIALG_1,RELAT_1,NUMBERS,XXREAL_0,FINSEQ_1,FINSOP_1,SETWISEO,FUNCT_1,FUNCT_2,FINSEQ_4,RLVECT_1,NAT_1,BCIALG_2,VECTSP_1,CKB1,CKB3,CKB4,CKB5;
definitions STRUCT_0,BINOP_1,BCIALG_1,FINSEQ_1,RLVECT_1,ALGSTR_0,CKB3,CKB4,CKB5;
theorems TARSKI,STRUCT_0,BCIALG_1,FINSEQ_1,FINSOP_1,SETWISEO,NAT_1,BINOP_1,BCIALG_2,CARD_1,CKB3,CKB4,CKB5;
schemes BINOP_1,NAT_1,CLASSES1;
registrations BCIALG_1,RELAT_1,STRUCT_0,ORDINAL1,XXREAL_0,VECTSP_1,BCIALG_2,ZFMISC_1,CARD_1,CKB1,CKB2,CKB6;
constructors BINOP_1,VECTSP_2,FINSOP_1,SETWISEO,XXREAL_0,FINSEQ_4,BCIALG_2,FUNCT_5,SEQ_1,CKB1,CKB3,CKB4,CKB5;
requirements SUBSET,BOOLE,NUMERALS,ARITHM;
begin
theorem
Lm1: (((((( BCI_S-EXAMPLE ) is  being_B & ( BCI_S-EXAMPLE ) is  being_C) & ( BCI_S-EXAMPLE ) is  being_I) & ( BCI_S-EXAMPLE ) is  being_BCI-4) & ( BCI_S-EXAMPLE ) is  being_BCK-5) & ( BCI_S-EXAMPLE ) is  with_condition_S)
proof
thus ( BCI_S-EXAMPLE ) is  being_B
proof
let x being (Element of ( BCI_S-EXAMPLE ));
let y being (Element of ( BCI_S-EXAMPLE ));
let z being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;

thus ( BCI_S-EXAMPLE ) is  being_C
proof
let x being (Element of ( BCI_S-EXAMPLE ));
let y being (Element of ( BCI_S-EXAMPLE ));
let z being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;

thus ( BCI_S-EXAMPLE ) is  being_I
proof
let x being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;

thus ( BCI_S-EXAMPLE ) is  being_BCI-4
proof
let x being (Element of ( BCI_S-EXAMPLE ));
let y being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;

thus ( BCI_S-EXAMPLE ) is  being_BCK-5
proof
let x being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;

let x being (Element of ( BCI_S-EXAMPLE ));
let y being (Element of ( BCI_S-EXAMPLE ));
let z being (Element of ( BCI_S-EXAMPLE ));
thus thesis by STRUCT_0:def 10;
end;
