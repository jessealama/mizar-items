environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,ZFMISC_1,TARSKI,XXREAL_0,MARGREL1,MCART_1,ARYTM_3,NAT_1,FINSEQ_1,RELAT_1,ORDINAL4,CARD_1,REALSET1,XBOOLEAN,BVFUNC_2,ZF_LANG,CLASSES2,FUNCT_1,FUNCOP_1,RCOMP_1,QC_LANG1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,CARD_1,NUMBERS,XXREAL_0,MCART_1,NAT_1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,FUNCOP_1,FINSEQ_1,CKB3,CKB6,CKB7,CKB8,CKB9,CKB10,CKB16,CKB17,CKB18,CKB20,CKB21,CKB22,CKB23,CKB25,CKB26,CKB30,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39;
definitions TARSKI,XBOOLE_0,FINSEQ_1,CARD_1,CKB3,CKB7,CKB8,CKB9,CKB10,CKB17,CKB18,CKB26,CKB30,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39;
theorems ZFMISC_1,SUBSET_1,TARSKI,ENUMSET1,FINSEQ_1,MCART_1,NAT_1,FUNCT_1,FUNCT_2,RELSET_1,XBOOLE_0,XBOOLE_1,FUNCOP_1,XXREAL_0,ORDINAL1,CARD_1,CKB1,CKB2,CKB3,CKB5,CKB7,CKB8,CKB9,CKB10,CKB15,CKB17,CKB18,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39;
schemes NAT_1,FUNCT_2,CLASSES1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,XREAL_0,FINSEQ_1,CARD_1,CKB4,CKB11,CKB12,CKB13,CKB14,CKB19,CKB24;
constructors ENUMSET1,FUNCOP_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,RELSET_1,CKB3,CKB7,CKB8,CKB9,CKB10,CKB17,CKB18,CKB26,CKB30,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve F for (Element of ( QC-WFF ));
scheme QCInd { Prop[(Element of ( QC-WFF ))] } : (for F being (Element of ( QC-WFF )) holds Prop[ F ])
provided
A1: (for k being (Element of ( NAT )) holds (for P being (QC-pred_symbol of k) holds (for ll being (QC-variable_list of k) holds Prop[ ( P ! ll ) ])))
and
A2: Prop[ ( VERUM ) ]
and
A3: (for p being (Element of ( QC-WFF )) holds (Prop[ p ] implies Prop[ ( 'not' p ) ]))
and
A4: (for p,q being (Element of ( QC-WFF )) holds ((Prop[ p ] & Prop[ q ]) implies Prop[ ( p '&' q ) ]))
and
A5: (for x being bound_QC-variable holds (for p being (Element of ( QC-WFF )) holds (Prop[ p ] implies Prop[ ( All (x,p) ) ])))
proof
( VERUM ) in { F: Prop[ F ] } by A2;
then reconsider X = { F: Prop[ F ] } as non empty set;
A6: (for k being (Element of ( NAT )) holds (for P being (QC-pred_symbol of k) holds (for ll being (QC-variable_list of k) holds ( <* P *> ^ ll ) in X)))
proof
let k being (Element of ( NAT ));
let P being (QC-pred_symbol of k);
let ll being (QC-variable_list of k);
Prop[ ( P ! ll ) ] by A1;
then ( P ! ll ) in X;
hence thesis by CKB34:1;
end;
A7: (for x being bound_QC-variable holds (for p being (FinSequence of [: ( NAT ),( NAT ) :]) holds (p in X implies ( ( <* [ 3,( 0 ) ] *> ^ <* x *> ) ^ p ) in X)))
proof
let x being bound_QC-variable;
let p being (FinSequence of [: ( NAT ),( NAT ) :]);
assume p in X;
then consider p9 being (Element of ( QC-WFF )) such that A8: p = p9 and A9: Prop[ p9 ];
Prop[ ( All (x,p9) ) ] by A5,A9;
hence thesis by A8;
end;
A10: (for p,q being (FinSequence of [: ( NAT ),( NAT ) :]) holds ((p in X & q in X) implies ( ( <* [ 2,( 0 ) ] *> ^ p ) ^ q ) in X))
proof
let p being (FinSequence of [: ( NAT ),( NAT ) :]),q being (FinSequence of [: ( NAT ),( NAT ) :]);
assume p in X;
then consider p9 being (Element of ( QC-WFF )) such that A11: p = p9 and A12: Prop[ p9 ];
assume q in X;
then consider q9 being (Element of ( QC-WFF )) such that A13: q = q9 and A14: Prop[ q9 ];
Prop[ ( p9 '&' q9 ) ] by A4,A12,A14;
hence thesis by A11,A13;
end;
A15: (for p being (FinSequence of [: ( NAT ),( NAT ) :]) holds (p in X implies ( <* [ 1,( 0 ) ] *> ^ p ) in X))
proof
let p being (FinSequence of [: ( NAT ),( NAT ) :]);
assume p in X;
then consider p9 being (Element of ( QC-WFF )) such that A16: p = p9 and A17: Prop[ p9 ];
Prop[ ( 'not' p9 ) ] by A3,A17;
hence thesis by A16;
end;
let F9 being (Element of ( QC-WFF ));
A18: X c= ( [: ( NAT ),( NAT ) :] * )
proof
let x being set;
assume x in X;
then consider p being (Element of ( QC-WFF )) such that A19: x = p and Prop[ p ];
p = ( @ p );
hence thesis by A19,FINSEQ_1:def 11;
end;
<* [ ( 0 ),( 0 ) ] *> in X by A2;
then X is  QC-closed by A18,A6,A15,A10,A7,CKB26:def 1;
then ( QC-WFF ) c= X by CKB30:def 1;
then F9 in X by TARSKI:def 3;
then (ex F99 being (Element of ( QC-WFF )) st (F9 = F99 & Prop[ F99 ]));
hence thesis;
end;
