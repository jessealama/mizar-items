environ
vocabularies SUBSET_1,NUMBERS,QC_LANG1,FINSEQ_1,PARTFUN1,XXREAL_0,FUNCT_1,RELAT_1,NAT_1,TARSKI,FUNCOP_1,QC_LANG3,XBOOLE_0,ZF_MODEL,FINSEQ_2,ZF_LANG,CARD_1,REALSET1,XBOOLEAN,BVFUNC_2,MARGREL1,CLASSES2,FUNCT_4,CQC_LANG;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCOP_1,FUNCT_4,FINSEQ_1,FINSEQ_2,QC_LANG1,QC_LANG2,QC_LANG3,XXREAL_0,NAT_1,CKB3,CKB4,CKB7,CKB9,CKB13,CKB17,CKB20,CKB21,CKB22,CKB26,CKB27,CKB28,CKB30,CKB32,CKB43;
definitions TARSKI,FUNCOP_1,FINSEQ_2,RELAT_1,CKB4,CKB9,CKB43;
theorems TARSKI,ENUMSET1,ZFMISC_1,FUNCT_1,FUNCT_2,FINSEQ_1,PARTFUN1,FUNCOP_1,QC_LANG1,QC_LANG2,QC_LANG3,FINSEQ_2,RELSET_1,FINSEQ_3,FUNCT_4,ORDINAL1,RELAT_1,CARD_1,CKB1,CKB2,CKB4,CKB6,CKB8,CKB9,CKB11,CKB14,CKB15,CKB16,CKB18,CKB19,CKB23,CKB24,CKB25,CKB29,CKB31,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55;
schemes FINSEQ_1,QC_LANG1,QC_LANG3,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41;
registrations XBOOLE_0,RELSET_1,FUNCOP_1,FUNCT_4,MEMBERED,QC_LANG1,XXREAL_0,FINSEQ_2,CARD_1,CKB5,CKB10,CKB12;
constructors ENUMSET1,PARTFUN1,BINOP_1,FUNCOP_1,FUNCT_4,XXREAL_0,MEMBERED,QC_LANG2,QC_LANG3,FINSEQ_2,RELSET_1,CKB4,CKB7,CKB9,CKB17,CKB20,CKB21,CKB22,CKB26,CKB27,CKB28,CKB30,CKB32,CKB43;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve i for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve y for bound_QC-variable;
reserve p for (Element of ( QC-WFF ));
reserve q for (Element of ( QC-WFF ));
theorem
Th39: (( Free p ) = ( {} ) implies ( p . x ) = p)
proof
defpred P[ (Element of ( QC-WFF )) ]
 means
(( Free $1 ) = ( {} ) implies ( $1 . x ) = $1);
A1: (for p holds (P[ p ] implies P[ ( 'not' p ) ])) by CKB48:1,QC_LANG3:55;
A2: (for p holds (for q holds ((P[ p ] & P[ q ]) implies P[ ( p '&' q ) ])))
proof
let p;
let q;
assume A3: ((( Free p ) = ( {} ) implies ( p . x ) = p) & (( Free q ) = ( {} ) implies ( q . x ) = q));
assume ( Free ( p '&' q ) ) = ( {} );
then ( ( Free p ) \/ ( Free q ) ) = ( {} ) by QC_LANG3:57;
hence thesis by A3,CKB50:1;
end;
A4: (for k holds (for P being (QC-pred_symbol of k) holds (for l being (QC-variable_list of k) holds P[ ( P ! l ) ])))
proof
let k;
let P being (QC-pred_symbol of k);
let l being (QC-variable_list of k);
assume A5: ( Free ( P ! l ) ) = ( {} );
A6:now
let j being Nat;
assume A7: (1 <= j & j <= ( len l ));
A8: j in ( NAT ) by ORDINAL1:def 12;
now
assume ( l . j ) = ( a. ( 0 ) );
then ( a. ( 0 ) ) in { ( l . i ): ((1 <= i & i <= ( len l )) & ( l . i ) in ( free_QC-variables )) } by A8,A7;
hence contradiction by A5,QC_LANG3:54;
end;
hence ( ( Subst (l,( ( a. ( 0 ) ) .--> x )) ) . j ) = ( l . j ) by A8,A7,CKB8:1;
end;
( len ( Subst (l,( ( a. ( 0 ) ) .--> x )) ) ) = ( len l ) by CKB4:def 1;
then ( Subst (l,( ( a. ( 0 ) ) .--> x )) ) = l by A6,FINSEQ_1:14;
hence thesis by CKB46:1;
end;
A9: (for y holds (for p holds (P[ p ] implies P[ ( All (y,p) ) ])))
proof
let y;
let p;
assume A10: (( Free p ) = ( {} ) implies ( p . x ) = p);
A11: (x = y implies ( ( All (y,p) ) . x ) = ( All (y,p) )) by CKB54:1;
assume ( Free ( All (y,p) ) ) = ( {} );
hence thesis by A10,A11,CKB55:1,QC_LANG3:58;
end;
A12: P[ ( VERUM ) ] by CKB44:1;
(for p holds P[ p ]) from QC_LANG1:sch 1(A4,A12,A1,A2,A9);
hence thesis;
end;
