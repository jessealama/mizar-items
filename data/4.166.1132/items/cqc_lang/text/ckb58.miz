environ
vocabularies SUBSET_1,NUMBERS,QC_LANG1,FINSEQ_1,PARTFUN1,XXREAL_0,FUNCT_1,RELAT_1,NAT_1,TARSKI,FUNCOP_1,QC_LANG3,XBOOLE_0,ZF_MODEL,FINSEQ_2,ZF_LANG,CARD_1,REALSET1,XBOOLEAN,BVFUNC_2,MARGREL1,CLASSES2,FUNCT_4,CQC_LANG;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,CARD_1,NUMBERS,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,PARTFUN1,FUNCOP_1,FUNCT_4,FINSEQ_1,FINSEQ_2,QC_LANG1,QC_LANG2,QC_LANG3,XXREAL_0,NAT_1,CKB3,CKB4,CKB7,CKB9,CKB13,CKB17,CKB20,CKB21,CKB22,CKB26,CKB27,CKB28,CKB30,CKB32,CKB43;
definitions TARSKI,FUNCOP_1,FINSEQ_2,RELAT_1,CKB4,CKB9,CKB43;
theorems TARSKI,ENUMSET1,ZFMISC_1,FUNCT_1,FUNCT_2,FINSEQ_1,PARTFUN1,FUNCOP_1,QC_LANG1,QC_LANG2,QC_LANG3,FINSEQ_2,RELSET_1,FINSEQ_3,FUNCT_4,ORDINAL1,RELAT_1,CARD_1,CKB1,CKB2,CKB4,CKB6,CKB8,CKB9,CKB11,CKB14,CKB15,CKB16,CKB18,CKB19,CKB23,CKB24,CKB25,CKB29,CKB31,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57;
schemes FINSEQ_1,QC_LANG1,QC_LANG3,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41;
registrations XBOOLE_0,RELSET_1,FUNCOP_1,FUNCT_4,MEMBERED,QC_LANG1,XXREAL_0,FINSEQ_2,CARD_1,CKB5,CKB10,CKB12;
constructors ENUMSET1,PARTFUN1,BINOP_1,FUNCOP_1,FUNCT_4,XXREAL_0,MEMBERED,QC_LANG2,QC_LANG3,FINSEQ_2,RELSET_1,CKB4,CKB7,CKB9,CKB17,CKB20,CKB21,CKB22,CKB26,CKB27,CKB28,CKB30,CKB32,CKB43;
requirements NUMERALS,SUBSET,BOOLE;
begin
reserve i for (Element of ( NAT ));
reserve k for (Element of ( NAT ));
reserve x for bound_QC-variable;
reserve y for bound_QC-variable;
reserve p for (Element of ( QC-WFF ));
reserve q for (Element of ( QC-WFF ));
theorem
( Fixed ( p . x ) ) = ( Fixed p )
proof
defpred P[ (Element of ( QC-WFF )) ]
 means
( Fixed ( $1 . x ) ) = ( Fixed $1 );
A1: (for p holds (P[ p ] implies P[ ( 'not' p ) ]))
proof
let p;
assume that
A2: ( Fixed ( p . x ) ) = ( Fixed p );
thus ( Fixed ( ( 'not' p ) . x ) ) = ( Fixed ( 'not' ( p . x ) ) ) by CKB48:1
.= ( Fixed p ) by A2,QC_LANG3:65
.= ( Fixed ( 'not' p ) ) by QC_LANG3:65;
end;
A3: (for p holds (for q holds ((P[ p ] & P[ q ]) implies P[ ( p '&' q ) ])))
proof
let p;
let q;
assume that
A4: (( Fixed ( p . x ) ) = ( Fixed p ) & ( Fixed ( q . x ) ) = ( Fixed q ));
thus ( Fixed ( ( p '&' q ) . x ) ) = ( Fixed ( ( p . x ) '&' ( q . x ) ) ) by CKB50:1
.= ( ( Fixed p ) \/ ( Fixed q ) ) by A4,QC_LANG3:67
.= ( Fixed ( p '&' q ) ) by QC_LANG3:67;
end;
A5: (for k holds (for P being (QC-pred_symbol of k) holds (for l being (QC-variable_list of k) holds P[ ( P ! l ) ])))
proof
let k;
let P being (QC-pred_symbol of k);
let l being (QC-variable_list of k);
set F1 = { ( l . i ): ((1 <= i & i <= ( len l )) & ( l . i ) in ( fixed_QC-variables )) };
set ll = ( Subst (l,( ( a. ( 0 ) ) .--> x )) );
set F2 = { ( ll . i ): ((1 <= i & i <= ( len ll )) & ( ll . i ) in ( fixed_QC-variables )) };
A6: ( len l ) = ( len ll ) by CKB4:def 1;
now
let y being set;
thus (y in F1 implies y in F2)
proof
assume y in F1;
then consider i such that A7: y = ( l . i ) and A8: (1 <= i & i <= ( len l )) and A9: ( l . i ) in ( fixed_QC-variables );
( l . i ) <> ( a. ( 0 ) ) by A9,QC_LANG3:32;
then ( ll . i ) = ( l . i ) by A8,CKB8:1;
hence thesis by A6,A7,A8,A9;
end;

assume y in F2;
then consider i such that A10: y = ( ll . i ) and A11: (1 <= i & i <= ( len ll )) and A12: ( ll . i ) in ( fixed_QC-variables );
now
assume ( l . i ) = ( a. ( 0 ) );
then ( ll . i ) = x by A6,A11,CKB8:1;
hence contradiction by A12,CKB1:1;
end;
then ( ll . i ) = ( l . i ) by A6,A11,CKB8:1;
hence y in F1 by A6,A10,A11,A12;
end;
then A13: F1 = F2 by TARSKI:1;
(( Fixed ( P ! l ) ) = F1 & ( Fixed ( P ! ll ) ) = F2) by QC_LANG3:64;
hence thesis by A13,CKB46:1;
end;
A14: (for y holds (for p holds (P[ p ] implies P[ ( All (y,p) ) ])))
proof
let y;
let p;
assume that
A15: ( Fixed ( p . x ) ) = ( Fixed p );
now
assume x <> y;
hence ( Fixed ( ( All (y,p) ) . x ) ) = ( Fixed ( All (y,( p . x )) ) ) by CKB55:1
.= ( Fixed p ) by A15,QC_LANG3:68
.= ( Fixed ( All (y,p) ) ) by QC_LANG3:68;
end;
hence thesis by CKB54:1;
end;
A16: P[ ( VERUM ) ] by CKB44:1;
(for p holds P[ p ]) from QC_LANG1:sch 1(A5,A16,A1,A3,A14);
hence thesis;
end;
