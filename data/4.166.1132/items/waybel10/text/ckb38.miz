environ
vocabularies XBOOLE_0,ORDERS_2,CAT_1,STRUCT_0,YELLOW_0,SUBSET_1,TARSKI,XXREAL_0,RELAT_1,ARYTM_0,WELLORD1,FUNCOP_1,WAYBEL_3,RELAT_2,SEQM_3,FUNCT_1,WAYBEL_1,BINOP_1,WAYBEL_0,ORDINAL2,GROUP_6,YELLOW_1,FUNCT_2,NEWTON,CARD_3,RLVECT_2,REWRITE1,UNIALG_2,ZFMISC_1,LATTICE3,LATTICES,EQREL_1,WAYBEL10;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,CARD_3,FUNCOP_1,STRUCT_0,TMAP_1,QUANTAL1,PRALG_1,WELLORD1,ORDERS_2,LATTICE3,ORDERS_3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_1,WAYBEL_3,YELLOW_7,CKB8,CKB23,CKB29,CKB35,CKB36;
definitions TARSKI,XBOOLE_0,RELAT_1,QUANTAL1,ORDERS_2,ORDERS_3,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_2,WAYBEL_1,WAYBEL_3,STRUCT_0,CKB23,CKB29;
theorems FUNCT_1,FUNCT_2,YELLOW_0,YELLOW_1,WAYBEL_1,FUNCOP_1,RELSET_1,SYSREL,ORDERS_2,LATTICE3,YELLOW_2,WAYBEL_0,ZFMISC_1,TARSKI,YELLOW_7,RELAT_1,XBOOLE_0,XBOOLE_1,ORDERS_1,TMAP_1,CKB5,CKB6,CKB7,CKB14,CKB16,CKB17,CKB18,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
schemes YELLOW_0,FUNCT_2,XBOOLE_0,CKB1,CKB2,CKB3,CKB4;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_1,RELSET_1,CKB9,CKB10,CKB11,CKB12,CKB13,CKB15,CKB19,CKB21,CKB31,CKB32,CKB33,CKB34,CKB37;
constructors TOLER_1,BORSUK_1,PRALG_1,QUANTAL1,ORDERS_3,WAYBEL_1,WAYBEL_3,TMAP_1,CKB8,CKB23,CKB29;
requirements SUBSET,BOOLE;
begin
definition
let L being non  empty RelStr;
func ClosureSystems L ->  full  strict non  empty (SubRelStr of ( Sub L )) means 
:Def4: (for R being  strict (SubRelStr of L) holds (R is (Element of it) iff R is  infs-inheriting  full));
existence
proof
defpred P[ set ]
 means
$1 is  infs-inheriting  full  infs-inheriting  full (SubRelStr of L);
set SL = ( subrelstr ( [#] L ) );
SL is (Element of ( Sub L )) by CKB29:def 1;
then A1: SL in (the carrier of ( Sub L ));
A2: P[ SL ];
consider S being non  empty  full  strict (SubRelStr of ( Sub L )) such that A3: (for x being (Element of ( Sub L )) holds (x is (Element of S) iff P[ x ])) from CKB1:sch 1(A2,A1);
take S;
let R being  strict (SubRelStr of L);
R is (Element of ( Sub L )) by CKB29:def 1;
hence thesis by A3;
end;
correctness
proof
defpred P[ set ]
 means
$1 is  infs-inheriting  full  strict  infs-inheriting  full  strict (SubRelStr of L);
let S1 being  full  strict non  empty (SubRelStr of ( Sub L ));
let S2 being  full  strict non  empty (SubRelStr of ( Sub L ));
assume that
A4: (for R being  strict (SubRelStr of L) holds (R is (Element of S1) iff R is  infs-inheriting  full))
and
A5: (for R being  strict (SubRelStr of L) holds (R is (Element of S2) iff R is  infs-inheriting  full));
A6:now
let x being set;
(x is (Element of S2) implies x is (Element of ( Sub L ))) by YELLOW_0:58;
then (x is (Element of S2) implies x is  strict  strict (SubRelStr of L)) by CKB29:def 1;
hence (x is (Element of S2) iff P[ x ]) by A5;
end;
A7:now
let x being set;
(x is (Element of S1) implies x is (Element of ( Sub L ))) by YELLOW_0:58;
then (x is (Element of S1) implies x is  strict  strict (SubRelStr of L)) by CKB29:def 1;
hence (x is (Element of S1) iff P[ x ]) by A4;
end;
( the RelStr of S1 ) = ( the RelStr of S2 ) from CKB3:sch 1(A7,A6);
hence thesis;
end;
end;
