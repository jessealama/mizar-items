environ
vocabularies TARSKI,XBOOLE_0,CLASSES1,ZFMISC_1,EQREL_1,TOLER_1,SETFAM_1,SUBSET_1,FUNCT_2,FUNCT_1,RELAT_1,MCART_1,GRAPH_1,ENS_1,PARTFUN1,CAT_1,COH_SP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,RELSET_1,MCART_1,FUNCT_1,PARTFUN1,CLASSES1,FUNCT_2,BINOP_1,EQREL_1,TOLER_1,CAT_1,CKB1,CKB3,CKB8;
definitions TARSKI,CLASSES1,XBOOLE_0,BINOP_1,RELAT_1,CKB1,CKB8;
theorems TARSKI,ZFMISC_1,TOLER_1,ENUMSET1,RELAT_1,FUNCT_2,CLASSES1,PARTFUN1,MCART_1,FUNCT_1,DOMAIN_1,CAT_1,XBOOLE_0,XBOOLE_1,EQREL_1,CKB1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
schemes TOLER_1,TARSKI,FUNCT_2,BINOP_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,CAT_2,CKB2;
constructors BINOP_1,EQREL_1,CLASSES1,TOLER_1,CAT_1,RELSET_1,CKB1,CKB8;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve z for set;
reserve C for Coherence_Space;
theorem
(C = ( bool ( union C ) ) implies ( Web C ) = ( Total ( union C ) ))
proof
reconsider t = ( Total ( union C ) ) as (Tolerance of ( union C ));
assume A1: C = ( bool ( union C ) );
now
let x;
let y;
thus ([ x,y ] in t implies { x,y } in C)
proof
assume [ x,y ] in t;
then A2: (x in ( union C ) & y in ( union C )) by ZFMISC_1:87;
{ x,y } c= ( union C )
proof
let z;
assume z in { x,y };
hence thesis by A2,TARSKI:def 2;
end;
hence thesis by A1;
end;

assume { x,y } in C;
then (x in ( union C ) & y in ( union C )) by A1,ZFMISC_1:32;
hence [ x,y ] in t by TOLER_1:2;
end;
hence thesis by CKB9:1;
end;
