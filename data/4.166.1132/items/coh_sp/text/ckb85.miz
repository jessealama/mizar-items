environ
vocabularies TARSKI,XBOOLE_0,CLASSES1,ZFMISC_1,EQREL_1,TOLER_1,SETFAM_1,SUBSET_1,FUNCT_2,FUNCT_1,RELAT_1,MCART_1,GRAPH_1,ENS_1,PARTFUN1,CAT_1,COH_SP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,RELSET_1,MCART_1,FUNCT_1,PARTFUN1,CLASSES1,FUNCT_2,BINOP_1,EQREL_1,TOLER_1,CAT_1,CKB1,CKB3,CKB8,CKB16,CKB21,CKB25,CKB28,CKB33,CKB34,CKB37,CKB40,CKB45,CKB46,CKB47,CKB48,CKB50,CKB51,CKB53,CKB62,CKB69,CKB70,CKB71,CKB74,CKB79,CKB80,CKB83;
definitions TARSKI,CLASSES1,XBOOLE_0,BINOP_1,RELAT_1,CKB1,CKB8,CKB16,CKB21,CKB25,CKB28,CKB33,CKB34,CKB37,CKB40,CKB45,CKB46,CKB47,CKB48,CKB50,CKB51,CKB53,CKB62,CKB71,CKB74,CKB79,CKB80,CKB83;
theorems TARSKI,ZFMISC_1,TOLER_1,ENUMSET1,RELAT_1,FUNCT_2,CLASSES1,PARTFUN1,MCART_1,FUNCT_1,DOMAIN_1,CAT_1,XBOOLE_0,XBOOLE_1,EQREL_1,CKB1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB24,CKB25,CKB27,CKB28,CKB30,CKB31,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB53,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB64,CKB65,CKB66,CKB67,CKB68,CKB71,CKB73,CKB74,CKB76,CKB77,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84;
schemes TOLER_1,TARSKI,FUNCT_2,BINOP_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,CAT_2,CKB2,CKB22,CKB23,CKB26,CKB29,CKB32,CKB52,CKB54,CKB63,CKB72,CKB75,CKB78;
constructors BINOP_1,EQREL_1,CLASSES1,TOLER_1,CAT_1,RELSET_1,CKB1,CKB8,CKB16,CKB21,CKB25,CKB28,CKB33,CKB34,CKB37,CKB40,CKB45,CKB46,CKB47,CKB48,CKB50,CKB51,CKB53,CKB62,CKB69,CKB70,CKB71,CKB74,CKB79,CKB80,CKB83;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve X for set;
reserve m1 for (Element of ( MapsT X ));
reserve m2 for (Element of ( MapsT X ));
definition
let X;
let m1;
let m2;
assume A1: ( cod m1 ) = ( dom m2 );
func m2 * m1 -> (Element of ( MapsT X ))
equals
:Def28: [ [ ( dom m1 ),( cod m2 ) ],( ( m2 `2 ) * ( m1 `2 ) ) ];
coherence
proof
A2: (( ( cod m2 ) `2 ) <> ( {} ) or ( ( dom m2 ) `2 ) = ( {} )) by CKB84:1;
A3: (( ( cod m1 ) `2 ) <> ( {} ) or ( ( dom m1 ) `2 ) = ( {} )) by CKB84:1;
A4: ( m1 `2 ) is (Function of ( ( dom m1 ) `2 ),( ( cod m1 ) `2 )) by CKB84:1;
A5:now
let x;
let y;
assume A6: [ x,y ] in ( ( dom m1 ) `1 );
then x in ( ( dom m1 ) `2 ) by ZFMISC_1:87;
then A7: x in ( dom ( m1 `2 ) ) by A3,A4,FUNCT_2:def 1;
y in ( ( dom m1 ) `2 ) by A6,ZFMISC_1:87;
then A8: y in ( dom ( m1 `2 ) ) by A3,A4,FUNCT_2:def 1;
[ ( ( m1 `2 ) . x ),( ( m1 `2 ) . y ) ] in ( ( cod m1 ) `1 ) by A6,CKB84:1;
then [ ( ( m2 `2 ) . ( ( m1 `2 ) . x ) ),( ( m2 `2 ) . ( ( m1 `2 ) . y ) ) ] in ( ( cod m2 ) `1 ) by A1,CKB84:1;
then [ ( ( ( m2 `2 ) * ( m1 `2 ) ) . x ),( ( m2 `2 ) . ( ( m1 `2 ) . y ) ) ] in ( ( cod m2 ) `1 ) by A7,FUNCT_1:13;
hence [ ( ( ( m2 `2 ) * ( m1 `2 ) ) . x ),( ( ( m2 `2 ) * ( m1 `2 ) ) . y ) ] in ( ( cod m2 ) `1 ) by A8,FUNCT_1:13;
end;
( m2 `2 ) is (Function of ( ( dom m2 ) `2 ),( ( cod m2 ) `2 )) by CKB84:1;
then ( ( m2 `2 ) * ( m1 `2 ) ) is (Function of ( ( dom m1 ) `2 ),( ( cod m2 ) `2 )) by A1,A3,A4,FUNCT_2:13;
hence thesis by A1,A3,A2,A5,CKB77:1;
end;
end;
