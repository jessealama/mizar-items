environ
vocabularies TARSKI,XBOOLE_0,CLASSES1,ZFMISC_1,EQREL_1,TOLER_1,SETFAM_1,SUBSET_1,FUNCT_2,FUNCT_1,RELAT_1,MCART_1,GRAPH_1,ENS_1,PARTFUN1,CAT_1,COH_SP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,RELSET_1,MCART_1,FUNCT_1,PARTFUN1,CLASSES1,FUNCT_2,BINOP_1,EQREL_1,TOLER_1,CAT_1,CKB1,CKB3,CKB8;
definitions TARSKI,CLASSES1,XBOOLE_0,BINOP_1,RELAT_1,CKB1,CKB8;
theorems TARSKI,ZFMISC_1,TOLER_1,ENUMSET1,RELAT_1,FUNCT_2,CLASSES1,PARTFUN1,MCART_1,FUNCT_1,DOMAIN_1,CAT_1,XBOOLE_0,XBOOLE_1,EQREL_1,CKB1,CKB4,CKB5,CKB6,CKB7,CKB8;
schemes TOLER_1,TARSKI,FUNCT_2,BINOP_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,CAT_2,CKB2;
constructors BINOP_1,EQREL_1,CLASSES1,TOLER_1,CAT_1,RELSET_1,CKB1,CKB8;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve X for set;
reserve C for Coherence_Space;
reserve T for (Tolerance of ( union C ));
theorem
Th5: (T = ( Web C ) iff (for x holds (for y holds ([ x,y ] in T iff { x,y } in C))))
proof
thus (T = ( Web C ) implies (for x holds (for y holds ([ x,y ] in T iff { x,y } in C))))
proof
assume A1: T = ( Web C );
let x;
let y;
thus ([ x,y ] in T implies { x,y } in C)
proof
assume [ x,y ] in T;
then consider X such that A2: X in C and A3: (x in X & y in X) by A1,CKB8:def 1;
{ x,y } c= X by A3,ZFMISC_1:32;
hence thesis by A2,CLASSES1:def 1;
end;

A4: (x in { x,y } & y in { x,y }) by TARSKI:def 2;
assume { x,y } in C;
hence thesis by A1,A4,CKB8:def 1;
end;

assume A5: (for x holds (for y holds ([ x,y ] in T iff { x,y } in C)));
(for x holds (for y holds ([ x,y ] in T iff (ex X st ((X in C & x in X) & y in X)))))
proof
let x;
let y;
thus ([ x,y ] in T implies (ex X st ((X in C & x in X) & y in X)))
proof
assume A6: [ x,y ] in T;
take { x,y };
thus thesis by A5,A6,TARSKI:def 2;
end;

given X such that
A7: X in C
and
A8: (x in X & y in X);

{ x,y } c= X by A8,ZFMISC_1:32;
then { x,y } in C by A7,CLASSES1:def 1;
hence thesis by A5;
end;
hence thesis by CKB8:def 1;
end;
