environ
vocabularies TARSKI,XBOOLE_0,CLASSES1,ZFMISC_1,EQREL_1,TOLER_1,SETFAM_1,SUBSET_1,FUNCT_2,FUNCT_1,RELAT_1,MCART_1,GRAPH_1,ENS_1,PARTFUN1,CAT_1,COH_SP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,RELAT_1,RELSET_1,MCART_1,FUNCT_1,PARTFUN1,CLASSES1,FUNCT_2,BINOP_1,EQREL_1,TOLER_1,CAT_1,CKB1,CKB3;
definitions TARSKI,CLASSES1,XBOOLE_0,BINOP_1,RELAT_1,CKB1;
theorems TARSKI,ZFMISC_1,TOLER_1,ENUMSET1,RELAT_1,FUNCT_2,CLASSES1,PARTFUN1,MCART_1,FUNCT_1,DOMAIN_1,CAT_1,XBOOLE_0,XBOOLE_1,EQREL_1,CKB1,CKB4,CKB5,CKB6,CKB7;
schemes TOLER_1,TARSKI,FUNCT_2,BINOP_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,CAT_2,CKB2;
constructors BINOP_1,EQREL_1,CLASSES1,TOLER_1,CAT_1,RELSET_1,CKB1;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve X for set;
definition
let C being Coherence_Space;
func Web C -> (Tolerance of ( union C ))
means
:Def3: (for x holds (for y holds ([ x,y ] in it iff (ex X st ((X in C & x in X) & y in X)))));
existence
proof
defpred P[ set,set ]
 means
(ex X st ((X in C & $1 in X) & $2 in X));
A1: (for x holds (x in ( union C ) implies P[ x,x ]))
proof
let x;
assume that
A2: x in ( union C );
take { x };
thus thesis by A2,CKB7:1,TARSKI:def 1;
end;
A3: (for x holds (for y holds (((x in ( union C ) & y in ( union C )) & P[ x,y ]) implies P[ y,x ])));
consider T being (Tolerance of ( union C )) such that A4: (for x holds (for y holds ((x in ( union C ) & y in ( union C )) implies ([ x,y ] in T iff P[ x,y ])))) from TOLER_1:sch 1(A1,A3);
take T;
let x;
let y;
thus ([ x,y ] in T implies (ex X st ((X in C & x in X) & y in X)))
proof
assume A5: [ x,y ] in T;
then (x in ( union C ) & y in ( union C )) by ZFMISC_1:87;
hence thesis by A4,A5;
end;

given X such that
A6: ((X in C & x in X) & y in X);

(x in ( union C ) & y in ( union C )) by A6,TARSKI:def 4;
hence thesis by A4,A6;
end;
uniqueness by TOLER_1:25;
end;
