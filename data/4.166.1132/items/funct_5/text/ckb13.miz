environ
vocabularies FUNCT_1,RELAT_1,XBOOLE_0,ZFMISC_1,TARSKI,SUBSET_1,MCART_1,FUNCT_2,PARTFUN1,CARD_1,FUNCOP_1,FUNCT_4,BINOP_1,FUNCT_5;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,WELLORD2,FUNCT_2,MCART_1,BINOP_1,FUNCT_3,CARD_1,PARTFUN1,FUNCOP_1,FUNCT_4;
definitions TARSKI,FUNCT_1,WELLORD2,XBOOLE_0,BINOP_1,FUNCOP_1;
theorems TARSKI,ZFMISC_1,FUNCT_1,WELLORD2,FUNCT_2,MCART_1,FUNCT_3,RELAT_1,CARD_1,PARTFUN1,FUNCOP_1,FUNCT_4,ENUMSET1,XBOOLE_0,XBOOLE_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes FUNCT_1,PARTFUN1,XBOOLE_0,CKB1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1;
constructors PARTFUN1,WELLORD2,BINOP_1,FUNCT_3,FUNCOP_1,FUNCT_4,CARD_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve z for set;
reserve t for set;
theorem
Th15: (( proj1 { [ x,y ] } ) = { x } & ( proj2 { [ x,y ] } ) = { y })
proof
thus ( proj1 { [ x,y ] } ) c= { x }
proof
let z;
assume z in ( proj1 { [ x,y ] } );
then consider t such that A1: [ z,t ] in { [ x,y ] } by RELAT_1:def 4;
[ z,t ] = [ x,y ] by A1,TARSKI:def 1;
then z = x by ZFMISC_1:27;
hence thesis by TARSKI:def 1;
end;

thus { x } c= ( proj1 { [ x,y ] } )
proof
let z;
assume z in { x };
then z = x by TARSKI:def 1;
then [ z,y ] in { [ x,y ] } by TARSKI:def 1;
hence thesis by RELAT_1:def 4;
end;

thus ( proj2 { [ x,y ] } ) c= { y }
proof
let z;
assume z in ( proj2 { [ x,y ] } );
then consider t such that A2: [ t,z ] in { [ x,y ] } by RELAT_1:def 5;
[ t,z ] = [ x,y ] by A2,TARSKI:def 1;
then z = y by ZFMISC_1:27;
hence thesis by TARSKI:def 1;
end;

thus { y } c= ( proj2 { [ x,y ] } )
proof
let z;
assume z in { y };
then z = y by TARSKI:def 1;
then [ x,z ] in { [ x,y ] } by TARSKI:def 1;
hence thesis by RELAT_1:def 5;
end;

end;
