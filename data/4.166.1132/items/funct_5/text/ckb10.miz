environ
vocabularies FUNCT_1,RELAT_1,XBOOLE_0,ZFMISC_1,TARSKI,SUBSET_1,MCART_1,FUNCT_2,PARTFUN1,CARD_1,FUNCOP_1,FUNCT_4,BINOP_1,FUNCT_5;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,WELLORD2,FUNCT_2,MCART_1,BINOP_1,FUNCT_3,CARD_1,PARTFUN1,FUNCOP_1,FUNCT_4;
definitions TARSKI,FUNCT_1,WELLORD2,XBOOLE_0,BINOP_1,FUNCOP_1;
theorems TARSKI,ZFMISC_1,FUNCT_1,WELLORD2,FUNCT_2,MCART_1,FUNCT_3,RELAT_1,CARD_1,PARTFUN1,FUNCOP_1,FUNCT_4,ENUMSET1,XBOOLE_0,XBOOLE_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9;
schemes FUNCT_1,PARTFUN1,XBOOLE_0,CKB1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1;
constructors PARTFUN1,WELLORD2,BINOP_1,FUNCT_3,FUNCOP_1,FUNCT_4,CARD_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve x for set;
reserve y for set;
theorem
Th11: (((Y <> ( {} ) or [: X,Y :] <> ( {} )) or [: Y,X :] <> ( {} )) implies (( proj1 [: X,Y :] ) = X & ( proj2 [: Y,X :] ) = X))
proof
set y = the (Element of Y);
assume ((Y <> ( {} ) or [: X,Y :] <> ( {} )) or [: Y,X :] <> ( {} ));
then A1: Y <> ( {} ) by ZFMISC_1:90;
now
let x;
(x in X implies [ x,y ] in [: X,Y :]) by A1,ZFMISC_1:87;
hence (x in X iff (ex y st [ x,y ] in [: X,Y :])) by ZFMISC_1:87;
end;
hence ( proj1 [: X,Y :] ) = X by RELAT_1:def 4;
now
let x;
(x in X implies [ y,x ] in [: Y,X :]) by A1,ZFMISC_1:87;
hence (x in X iff (ex y st [ y,x ] in [: Y,X :])) by ZFMISC_1:87;
end;
hence thesis by RELAT_1:def 5;
end;
