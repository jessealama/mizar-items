environ
vocabularies SUBSET_1,NUMBERS,PROB_1,XXREAL_0,ARYTM_3,FUNCT_1,XBOOLE_0,TARSKI,NAT_1,RELAT_1,CARD_1,SETFAM_1,EQREL_1,CARD_3,ZFMISC_1,SEQM_3,ORDINAL2,SEQ_2,PROB_2,RPR_1,SETLIM_1;
notations NUMBERS,XXREAL_0,NAT_1,RELAT_1,FUNCT_1,TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELSET_1,SETFAM_1,PROB_1,FUNCT_2,KURATO_0;
definitions TARSKI,SUBSET_1;
theorems FUNCT_1,FUNCT_2,PROB_1,NAT_1,TARSKI,XBOOLE_0,XBOOLE_1,XCMPLX_1,SETFAM_1,ZFMISC_1,CARD_3,KURATO_0,PROB_2,XREAL_1,ORDINAL1,VALUED_0,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5;
schemes NAT_1,FUNCT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,XREAL_0,FUNCT_2,RELAT_1,PROB_1,PROB_2,RELSET_1;
constructors SETFAM_1,NAT_1,KURATO_0,XREAL_0,RELSET_1,FINSUB_1,PROB_2;
requirements NUMERALS,BOOLE,SUBSET;
begin
reserve k for (Element of ( NAT ));
reserve x for set;
reserve y for set;
theorem
Th5: (for Y being non empty set holds (for f being (Function of ( NAT ),Y) holds ( rng f ) = { ( f . k ): ( 0 ) <= k }))
proof
let Y being non empty set;
let f being (Function of ( NAT ),Y);
set Z = { ( f . k ): ( 0 ) <= k };
A1: ( dom f ) = ( NAT ) by FUNCT_2:def 1;
A2: ( rng f ) c= Z
proof
let y;
assume y in ( rng f );
then consider n being set such that A3: n in ( NAT ) and A4: y = ( f . n ) by A1,FUNCT_1:def 3;
reconsider n as (Element of ( NAT )) by A3;
( 0 ) <= n by NAT_1:2;
hence thesis by A4;
end;
Z c= ( rng f )
proof
let x;
assume x in Z;
then (ex n1 being (Element of ( NAT )) st (x = ( f . n1 ) & ( 0 ) <= n1));
hence thesis by FUNCT_2:4;
end;
hence thesis by A2,XBOOLE_0:def 10;
end;
