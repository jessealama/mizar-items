environ
vocabularies INCPROJ,INCSP_1,SUBSET_1,AFF_2,ZFMISC_1,VECTSP_1,ANALOAF,PARTFUN1,RELAT_1,TARSKI,FUNCT_1,PROJRED1;
notations TARSKI,ZFMISC_1,SUBSET_1,DOMAIN_1,RELAT_1,RELSET_1,INCSP_1,INCPROJ,PARTFUN1,FUNCT_1;
definitions TARSKI;
theorems TARSKI,PARTFUN1,INCPROJ,FUNCT_1,RELAT_1,RELSET_1,XBOOLE_0,ZFMISC_1,INCSP_1,CKB1,CKB2,CKB3,CKB4,CKB5;
schemes PARTFUN1,XBOOLE_0;
registrations FUNCT_1,RELSET_1,INCPROJ;
constructors DOMAIN_1,INCPROJ,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve IPP for IncProjSp;
reserve a for (POINT of IPP);
reserve b for (POINT of IPP);
reserve A for (LINE of IPP);
reserve B for (LINE of IPP);
reserve C for (LINE of IPP);
theorem
(ex a st ((not a on A) & (not a on B)))
proof
A1: (A <> B implies (ex a st ((not a on A) & (not a on B))))
proof
assume A <> B;
then consider a,b such that a on A and A2: (not a on B) and b on B and A3: (not b on A) by CKB3:1;
consider C such that A4: (a on C & b on C) by INCPROJ:def 5;
consider c being (Element of (the Points of IPP)),d being (Element of (the Points of IPP)),e being (Element of (the Points of IPP)) such that A5: (((((c <> d & d <> e) & e <> c) & c on C) & d on C) & e on C) by INCPROJ:def 7;
((((not c on A) & (not c on B)) or ((not d on A) & (not d on B))) or ((not e on A) & (not e on B))) by A2,A3,A4,A5,INCPROJ:def 4;
hence thesis;
end;
(A = B implies (ex a st ((not a on A) & (not a on B))))
proof
assume A6: A = B;
(ex a st (not a on A)) by CKB1:1;
hence thesis by A6;
end;
hence thesis by A1;
end;
