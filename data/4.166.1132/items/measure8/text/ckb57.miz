environ
vocabularies NUMBERS,PROB_1,MEASURE1,SUBSET_1,MESFUNC5,ORDINAL1,SUPINF_2,SERIES_1,FUNCT_1,NAT_1,ARYTM_3,CARD_1,CARD_3,VALUED_0,SEQ_2,ORDINAL2,XXREAL_0,RELAT_1,PROB_2,XBOOLE_0,TARSKI,FINSEQ_1,ZFMISC_1,FUNCOP_1,FUNCT_2,MEASURE7,SUPINF_1,NAGATA_2,MCART_1,FUNCT_7,XXREAL_2,XREAL_0,REAL_1,MEASURE4,PROB_3,SETLIM_2,ARYTM_1,SETLIM_1,EQREL_1,LATTICE5,MEASURE2,MEASURE8;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,XXREAL_0,XXREAL_2,XREAL_0,VALUED_0,REAL_1,RELAT_1,FUNCOP_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NUMBERS,FINSEQ_1,SETFAM_1,RINFSUP2,MEASURE1,MEASURE2,MEASURE4,MESFUNC5,SUPINF_2,XXREAL_3,NAT_1,MESFUNC9,SUPINF_1,RECDEF_1,PROB_1,PROB_2,PROB_3,SETLIM_1,SETLIM_2,NAGATA_2,FUNCT_7,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB16,CKB17,CKB19,CKB21,CKB22,CKB23,CKB34,CKB35,CKB43,CKB45,CKB55;
definitions SUPINF_2,TARSKI,PROB_2,RINFSUP2,MESFUNC9,PROB_3,ALTCAT_2,CKB5,CKB9,CKB10,CKB13,CKB14,CKB17,CKB19,CKB21,CKB22,CKB23,CKB35,CKB55;
theorems ZFMISC_1,TARSKI,XBOOLE_0,PROB_1,MEASURE1,FUNCT_2,FUNCT_1,XBOOLE_1,PROB_3,FINSEQ_1,RELAT_1,MEASURE4,ORDINAL1,NAT_1,FUNCOP_1,SUPINF_2,XXREAL_2,PROB_4,MEASURE7,XXREAL_0,MEASURE6,FINSUB_1,CARD_3,RINFSUP2,MESFUNC9,VALUED_0,MESFUNC5,MONOID_1,MEASURE2,SETLIM_1,SETLIM_2,ABCMIZ_1,PROB_2,NAGATA_2,FUNCTOR1,FUNCT_7,XXREAL_3,XREAL_0,PARTFUN1,CKB1,CKB2,CKB3,CKB5,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB17,CKB18,CKB19,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB44,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56;
schemes FUNCT_2,NAT_1,BINOP_2,XBOOLE_0,SUBSET_1;
registrations MEMBERED,ORDINAL1,MEASURE1,XBOOLE_0,NUMBERS,XXREAL_0,VALUED_0,FUNCT_1,FUNCT_2,SUBSET_1,RELSET_1,MEASURE4,NAT_1,XXREAL_3,XREAL_0,PROB_3,CKB4,CKB6,CKB20;
constructors REAL_1,DOMAIN_1,KURATO_0,MESFUNC5,RINFSUP2,MESFUNC9,SUPINF_1,PROB_3,MEASURE7,RECDEF_1,SETLIM_2,SETLIM_1,NAGATA_2,FUNCT_7,ALTCAT_2,CKB5,CKB9,CKB10,CKB11,CKB13,CKB14,CKB16,CKB17,CKB19,CKB21,CKB22,CKB23,CKB34,CKB35,CKB43,CKB45,CKB55;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve X for set;
reserve F for (Field_Subset of X);
reserve A for (Subset of X);
theorem
Th33: (for X being non  empty set holds (for F being (Field_Subset of X) holds (for m being (Measure of F) holds (m is  completely-additive implies (ex M being (sigma_Measure of ( sigma F )) st (M is_extension_of m & M = ( ( sigma_Meas ( C_Meas m ) ) | ( sigma F ) )))))))
proof
let X being non  empty set;
let F being (Field_Subset of X);
let m being (Measure of F);
assume A1: m is  completely-additive;
set M = ( ( sigma_Meas ( C_Meas m ) ) | ( sigma F ) );
A2: F c= ( sigma_Field ( C_Meas m ) ) by CKB41:1;
then A3: ( sigma F ) c= ( sigma_Field ( C_Meas m ) ) by PROB_1:def 9;
then reconsider M as (Function of ( sigma F ),( ExtREAL )) by FUNCT_2:32;
A4: (for SS being (Sep_Sequence of ( sigma F )) holds ( SUM ( M * SS ) ) = ( M . ( union ( rng SS ) ) ))
proof
let SS being (Sep_Sequence of ( sigma F ));
reconsider SS9 = SS as (Sep_Sequence of ( sigma_Field ( C_Meas m ) )) by A3,FUNCT_2:7;
A5: ( rng SS ) c= ( sigma F ) by RELAT_1:def 19;
( M * SS ) = ( ( sigma_Meas ( C_Meas m ) ) * ( ( sigma F ) | SS ) ) by MONOID_1:1
.= ( ( sigma_Meas ( C_Meas m ) ) * SS9 ) by A5,RELAT_1:94;
then A6: ( SUM ( M * SS ) ) = ( ( sigma_Meas ( C_Meas m ) ) . ( union ( rng SS9 ) ) ) by MEASURE1:def 6;
( union ( rng SS ) ) is (Element of ( sigma F )) by MEASURE1:24;
hence ( SUM ( M * SS ) ) = ( M . ( union ( rng SS ) ) ) by A6,FUNCT_1:49;
end;
( M . ( {} ) ) = ( ( sigma_Meas ( C_Meas m ) ) . ( {} ) ) by FUNCT_1:49,PROB_1:4
.= ( 0 ) by VALUED_0:def 19;
then reconsider M as (sigma_Measure of ( sigma F )) by A4,MEASURE1:def 6,MESFUNC5:15,VALUED_0:def 19;
take M;
A7: F c= ( sigma F ) by PROB_1:def 9;
(for A being set holds (A in F implies ( M . A ) = ( m . A )))
proof
let A being set;
assume A8: A in F;
then reconsider A9 = A as (Subset of X);
( M . A ) = ( ( sigma_Meas ( C_Meas m ) ) . A ) by A7,A8,FUNCT_1:49
.= ( ( C_Meas m ) . A9 ) by A2,A8,MEASURE4:def 3;
hence ( M . A ) = ( m . A ) by A1,A8,CKB39:1;
end;
hence (M is_extension_of m & M = ( ( sigma_Meas ( C_Meas m ) ) | ( sigma F ) )) by CKB55:def 1;
end;
