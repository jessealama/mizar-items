environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,SUBSET_1,FINSEQ_2,FINSEQ_1,ORDINAL4,PARTFUN1,RELAT_1,ARYTM_3,CARD_1,MARGREL1,XBOOLEAN,XCMPLX_0,FUNCT_1,XXREAL_0,ARYTM_1,FUNCOP_1,POWER,BINOP_2,SETWISEO,REAL_1,BINARITH;
notations XBOOLE_0,SUBSET_1,NUMBERS,XCMPLX_0,REAL_1,XBOOLEAN,MARGREL1,FUNCT_1,PARTFUN1,FUNCT_2,BINOP_1,BINOP_2,SETWISEO,FUNCOP_1,SETWOP_2,SERIES_1,FINSEQ_1,FINSEQ_2,XXREAL_0,NAT_1,NAT_D,CKB3,CKB4,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB26,CKB27;
definitions FINSEQ_1,TARSKI,XBOOLEAN,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
theorems NAT_1,INT_1,FINSEQ_1,FINSEQ_2,FINSEQ_4,FUNCT_1,TARSKI,POWER,FINSOP_1,XBOOLE_0,BINOP_2,XREAL_1,XXREAL_0,XBOOLEAN,FUNCOP_1,PARTFUN1,FINSEQ_3,XREAL_0,NAT_D,CARD_1,CKB1,CKB2,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB28,CKB29;
schemes FINSEQ_1,FINSEQ_2,NAT_1;
registrations ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,BINOP_2,XBOOLEAN,MARGREL1,FINSEQ_2,XBOOLE_0,REAL_1,CARD_1,FINSEQ_1;
constructors BINOP_1,SETWISEO,XXREAL_0,NAT_1,INT_1,BINOP_2,MARGREL1,PARTFUN1,FINSOP_1,SERIES_1,RFINSEQ,SEQ_1,REAL_1,NAT_D,RELSET_1,FINSEQ_2,CKB3,CKB4,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB26,CKB27;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve i for Nat;
reserve n for non  zero Nat;
reserve z1 for (Tuple of n,( BOOLEAN ));
reserve z2 for (Tuple of n,( BOOLEAN ));
theorem
Th45: (for z1,z2 being (Tuple of n,( BOOLEAN )) holds (for d1,d2 being (Element of ( BOOLEAN )) holds ( ( z1 ^ <* d1 *> ) + ( z2 ^ <* d2 *> ) ) = ( ( z1 + z2 ) ^ <* ( ( d1 'xor' d2 ) 'xor' ( add_ovfl (z1,z2) ) ) *> )))
proof
let z1 being (Tuple of n,( BOOLEAN ));
let z2 being (Tuple of n,( BOOLEAN ));
let d1 being (Element of ( BOOLEAN ));
let d2 being (Element of ( BOOLEAN ));
(for i holds (i in ( Seg ( n + 1 ) ) implies ( ( ( z1 + z2 ) ^ <* ( ( d1 'xor' d2 ) 'xor' ( add_ovfl (z1,z2) ) ) *> ) /. i ) = ( ( ( ( z1 ^ <* d1 *> ) /. i ) 'xor' ( ( z2 ^ <* d2 *> ) /. i ) ) 'xor' ( ( carry (( z1 ^ <* d1 *> ),( z2 ^ <* d2 *> )) ) /. i ) )))
proof
A1: ( Seg ( n + 1 ) ) = ( ( Seg n ) \/ {. ( n + 1 ) .} ) by FINSEQ_1:9;
let i;
assume that
A2: i in ( Seg ( n + 1 ) );
per cases  by A2,A1,XBOOLE_0:def 3;
suppose A3: i in ( Seg n );

hence ( ( ( z1 + z2 ) ^ <* ( ( d1 'xor' d2 ) 'xor' ( add_ovfl (z1,z2) ) ) *> ) /. i ) = ( ( z1 + z2 ) /. i ) by CKB1:1
.= ( ( ( z1 /. i ) 'xor' ( z2 /. i ) ) 'xor' ( ( carry (z1,z2) ) /. i ) ) by A3,CKB20:def 1
.= ( ( ( ( z1 ^ <* d1 *> ) /. i ) 'xor' ( z2 /. i ) ) 'xor' ( ( carry (z1,z2) ) /. i ) ) by A3,CKB1:1
.= ( ( ( ( z1 ^ <* d1 *> ) /. i ) 'xor' ( ( z2 ^ <* d2 *> ) /. i ) ) 'xor' ( ( carry (z1,z2) ) /. i ) ) by A3,CKB1:1
.= ( ( ( ( z1 ^ <* d1 *> ) /. i ) 'xor' ( ( z2 ^ <* d2 *> ) /. i ) ) 'xor' ( ( carry (( z1 ^ <* d1 *> ),( z2 ^ <* d2 *> )) ) /. i ) ) by A3,CKB28:1;
end;
suppose i in {. ( n + 1 ) .};

then A4: i = ( n + 1 ) by TARSKI:def 1;
hence ( ( ( z1 + z2 ) ^ <* ( ( d1 'xor' d2 ) 'xor' ( add_ovfl (z1,z2) ) ) *> ) /. i ) = ( ( d1 'xor' d2 ) 'xor' ( add_ovfl (z1,z2) ) ) by CKB2:1
.= ( ( d1 'xor' d2 ) 'xor' ( ( carry (( z1 ^ <* d1 *> ),( z2 ^ <* d2 *> )) ) /. i ) ) by A4,CKB29:1
.= ( ( d1 'xor' ( ( z2 ^ <* d2 *> ) /. i ) ) 'xor' ( ( carry (( z1 ^ <* d1 *> ),( z2 ^ <* d2 *> )) ) /. i ) ) by A4,CKB2:1
.= ( ( ( ( z1 ^ <* d1 *> ) /. i ) 'xor' ( ( z2 ^ <* d2 *> ) /. i ) ) 'xor' ( ( carry (( z1 ^ <* d1 *> ),( z2 ^ <* d2 *> )) ) /. i ) ) by A4,CKB2:1;
end;
end;
hence thesis by CKB20:def 1;
end;
