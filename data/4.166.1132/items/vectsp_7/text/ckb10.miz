environ
vocabularies VECTSP_1,SUBSET_1,FINSET_1,RLVECT_2,FUNCT_1,STRUCT_0,RLVECT_3,CARD_3,SUPINF_2,XBOOLE_0,TARSKI,GROUP_1,FUNCT_2,RELAT_1,ARYTM_1,ARYTM_3,MESFUNC1,RLSUB_1,ZFMISC_1,ORDINAL1,ORDERS_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,FINSET_1,ORDERS_1,DOMAIN_1,STRUCT_0,ORDINAL1,RLVECT_1,GROUP_1,VECTSP_1,VECTSP_4,VECTSP_5,VECTSP_6,CKB1,CKB2;
definitions XBOOLE_0,VECTSP_4,VECTSP_6,TARSKI,CKB1;
theorems FUNCT_1,FINSET_1,ORDERS_1,RLVECT_3,TARSKI,VECTSP_1,VECTSP_2,VECTSP_4,VECTSP_5,VECTSP_6,ZFMISC_1,RLVECT_1,FUNCT_2,RELAT_1,ORDINAL1,XBOOLE_0,XBOOLE_1,CARD_2,STRUCT_0,CKB1,CKB3,CKB4,CKB7,CKB8,CKB9;
schemes FUNCT_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FINSET_1,STRUCT_0,VECTSP_1,VECTSP_4,CKB5,CKB6;
constructors ORDERS_1,REALSET1,VECTSP_5,VECTSP_6,CKB1;
requirements SUBSET,BOOLE;
begin
reserve GF for Field;
reserve a for (Element of GF);
reserve b for (Element of GF);
reserve V for (VectSp of GF);
reserve v1 for (Vector of V);
reserve v2 for (Vector of V);
theorem
((v1 <> v2 & { v1,v2 } is  linearly-independent) iff (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0. GF ) & b = ( 0. GF ))))))
proof
thus ((v1 <> v2 & { v1,v2 } is  linearly-independent) implies (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0. GF ) & b = ( 0. GF ))))))
proof
assume A1: (v1 <> v2 & { v1,v2 } is  linearly-independent);
let a;
let b;
assume that
A2: ( ( a * v1 ) + ( b * v2 ) ) = ( 0. V )
and
A3: (a <> ( 0. GF ) or b <> ( 0. GF ));
now
per cases  by A3;
suppose A4: a <> ( 0. GF );

( 0. V ) = ( ( a " ) * ( ( a * v1 ) + ( b * v2 ) ) ) by A2,VECTSP_1:15
.= ( ( ( a " ) * ( a * v1 ) ) + ( ( a " ) * ( b * v2 ) ) ) by VECTSP_1:def 14
.= ( ( ( ( a " ) * a ) * v1 ) + ( ( a " ) * ( b * v2 ) ) ) by VECTSP_1:def 16
.= ( ( ( ( a " ) * a ) * v1 ) + ( ( ( a " ) * b ) * v2 ) ) by VECTSP_1:def 16
.= ( ( ( 1_ GF ) * v1 ) + ( ( ( a " ) * b ) * v2 ) ) by A4,VECTSP_1:def 10
.= ( v1 + ( ( ( a " ) * b ) * v2 ) ) by VECTSP_1:def 17;
then v1 = ( - ( ( ( a " ) * b ) * v2 ) ) by VECTSP_1:16
.= ( ( - ( 1_ GF ) ) * ( ( ( a " ) * b ) * v2 ) ) by VECTSP_1:14
.= ( ( ( - ( 1_ GF ) ) * ( ( a " ) * b ) ) * v2 ) by VECTSP_1:def 16;
hence thesis by A1,CKB9:1;
end;
suppose A5: b <> ( 0. GF );

( 0. V ) = ( ( b " ) * ( ( a * v1 ) + ( b * v2 ) ) ) by A2,VECTSP_1:15
.= ( ( ( b " ) * ( a * v1 ) ) + ( ( b " ) * ( b * v2 ) ) ) by VECTSP_1:def 14
.= ( ( ( ( b " ) * a ) * v1 ) + ( ( b " ) * ( b * v2 ) ) ) by VECTSP_1:def 16
.= ( ( ( ( b " ) * a ) * v1 ) + ( ( ( b " ) * b ) * v2 ) ) by VECTSP_1:def 16
.= ( ( ( ( b " ) * a ) * v1 ) + ( ( 1_ GF ) * v2 ) ) by A5,VECTSP_1:def 10
.= ( ( ( ( b " ) * a ) * v1 ) + v2 ) by VECTSP_1:def 17;
then v2 = ( - ( ( ( b " ) * a ) * v1 ) ) by VECTSP_1:16
.= ( ( - ( 1_ GF ) ) * ( ( ( b " ) * a ) * v1 ) ) by VECTSP_1:14
.= ( ( ( - ( 1_ GF ) ) * ( ( b " ) * a ) ) * v1 ) by VECTSP_1:def 16;
hence thesis by A1,CKB9:1;
end;
end;
hence thesis;
end;

assume A6: (for a holds (for b holds (( ( a * v1 ) + ( b * v2 ) ) = ( 0. V ) implies (a = ( 0. GF ) & b = ( 0. GF )))));
A7:now
let a;
assume v1 = ( a * v2 );
then v1 = ( ( 0. V ) + ( a * v2 ) ) by RLVECT_1:4;
then ( 0. V ) = ( v1 - ( a * v2 ) ) by VECTSP_2:2
.= ( v1 + ( ( - a ) * v2 ) ) by VECTSP_1:21
.= ( ( ( 1. GF ) * v1 ) + ( ( - a ) * v2 ) ) by VECTSP_1:def 17;
hence contradiction by A6;
end;
now
assume A8: v2 = ( 0. V );
( 0. V ) = ( ( 0. V ) + ( 0. V ) ) by RLVECT_1:4
.= ( ( ( 0. GF ) * v1 ) + ( 0. V ) ) by VECTSP_1:15
.= ( ( ( 0. GF ) * v1 ) + ( ( 1. GF ) * v2 ) ) by A8,VECTSP_1:15;
hence contradiction by A6;
end;
hence thesis by A7,CKB9:1;
end;
