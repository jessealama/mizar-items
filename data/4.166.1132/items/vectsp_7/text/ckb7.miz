environ
vocabularies VECTSP_1,SUBSET_1,FINSET_1,RLVECT_2,FUNCT_1,STRUCT_0,RLVECT_3,CARD_3,SUPINF_2,XBOOLE_0,TARSKI,GROUP_1,FUNCT_2,RELAT_1,ARYTM_1,ARYTM_3,MESFUNC1,RLSUB_1,ZFMISC_1,ORDINAL1,ORDERS_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,FINSET_1,ORDERS_1,DOMAIN_1,STRUCT_0,ORDINAL1,RLVECT_1,GROUP_1,VECTSP_1,VECTSP_4,VECTSP_5,VECTSP_6,CKB1,CKB2;
definitions XBOOLE_0,VECTSP_4,VECTSP_6,TARSKI,CKB1;
theorems FUNCT_1,FINSET_1,ORDERS_1,RLVECT_3,TARSKI,VECTSP_1,VECTSP_2,VECTSP_4,VECTSP_5,VECTSP_6,ZFMISC_1,RLVECT_1,FUNCT_2,RELAT_1,ORDINAL1,XBOOLE_0,XBOOLE_1,CARD_2,STRUCT_0,CKB1,CKB3,CKB4;
schemes FUNCT_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FINSET_1,STRUCT_0,VECTSP_1,VECTSP_4,CKB5,CKB6;
constructors ORDERS_1,REALSET1,VECTSP_5,VECTSP_6,CKB1;
requirements SUBSET,BOOLE;
begin
reserve GF for Field;
reserve V for (VectSp of GF);
reserve v for (Vector of V);
reserve u for (Vector of V);
reserve A for (Subset of V);
reserve l for (Linear_Combination of A);
theorem
({ v } is  linearly-independent iff v <> ( 0. V ))
proof
thus ({ v } is  linearly-independent implies v <> ( 0. V ))
proof
assume { v } is  linearly-independent;
then (not ( 0. V ) in { v }) by CKB4:1;
hence thesis by TARSKI:def 1;
end;

assume A1: v <> ( 0. V );
let l being (Linear_Combination of { v });
A2: ( Carrier l ) c= { v } by VECTSP_6:def 4;
assume A3: ( Sum l ) = ( 0. V );
now
per cases  by A2,ZFMISC_1:33;
suppose ( Carrier l ) = ( {} );

hence thesis;
end;
suppose A4: ( Carrier l ) = { v };

A5: ( 0. V ) = ( ( l . v ) * v ) by A3,VECTSP_6:17;
now
assume v in ( Carrier l );
then (ex u st (v = u & ( l . u ) <> ( 0. GF )));
hence contradiction by A1,A5,VECTSP_1:15;
end;
hence thesis by A4,TARSKI:def 1;
end;
end;
hence thesis;
end;
