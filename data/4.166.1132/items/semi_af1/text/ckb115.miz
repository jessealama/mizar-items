environ
vocabularies XBOOLE_0,ANALOAF,SUBSET_1,DIRAF,PARSP_2,FDIFF_1,SEMI_AF1;
notations STRUCT_0,ANALOAF,DIRAF,CKB1,CKB3,CKB25,CKB40,CKB60,CKB82,CKB83,CKB84,CKB100,CKB101;
definitions CKB1,CKB25,CKB40,CKB60,CKB82,CKB83,CKB84,CKB100,CKB101;
theorems PARDEPAP,DIRAF,CKB1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112,CKB113,CKB114;
registrations ANALOAF,STRUCT_0,CKB2;
constructors DIRAF,CKB1,CKB25,CKB40,CKB60,CKB82,CKB83,CKB84,CKB100,CKB101;
begin
reserve SAS for Semi_Affine_Space;
reserve b for (Element of SAS);
reserve c for (Element of SAS);
reserve d for (Element of SAS);
reserve o for (Element of SAS);
reserve p for (Element of SAS);
reserve x for (Element of SAS);
reserve y for (Element of SAS);
reserve z for (Element of SAS);
theorem
Th131: ( qtrap o,p implies o <> p)
proof
(ex b st o <> b)
proof
consider x,y,z such that A1: x <> y and y <> z and z <> x by CKB114:1;
((o <> x or o <> y) or o <> z) by A1;
hence thesis;
end;
then consider b such that A2: o <> b;
consider c such that A3: (not o,b // o,c) by A2,CKB16:1;
assume  qtrap o,p;
then consider d such that A4: (o,p,b is_collinear  implies (o,c,d is_collinear  & p,c // b,d)) by CKB101:def 1;
A5:now
assume that
A6: (b <> d & (not o,b // o,c))
and
A7: o,d // b,d
and
A8: o,c // b,d;
d,o // d,b by A7,CKB9:1;
hence (((b <> d & (not o,b // o,c)) & b,d // o,b) & b,d // o,c) by A6,A8,CKB9:1,CKB10:1;
end;
assume (not thesis);
then (o,o // o,b implies (o,c // o,d & o,c // b,d)) by A4,CKB25:def 1;
then (((b = d & (not o,b // o,c)) & o,c // o,d) or ((((b <> d & o <> c) & (not o,b // o,c)) & o,c // o,d) & o,c // b,d)) by A3,CKB1:def 1,CKB6:1;
hence contradiction by A5,CKB1:def 1,CKB9:1;
end;
