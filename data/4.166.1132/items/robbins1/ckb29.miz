environ
vocabularies STRUCT_0,BINOP_1,LATTICES,FUNCT_5,XBOOLE_0,ZFMISC_1,SUBSET_1,FUNCT_1,ARYTM_3,EQREL_1,XXREAL_2,ARYTM_1,ROBBINS1,CARD_1;
notations TARSKI,CARD_1,STRUCT_0,LATTICES,BINOP_1,FUNCT_2,FUNCT_5,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB24;
definitions LATTICES,STRUCT_0,CKB5,CKB6,CKB13,CKB15,CKB16,CKB17,CKB18;
theorems STRUCT_0,LATTICES,BINOP_1,CARD_1,CKB5,CKB6,CKB13,CKB15,CKB16,CKB17,CKB18,CKB25,CKB26,CKB27,CKB28;
schemes BINOP_1;
registrations RELSET_1,STRUCT_0,LATTICES,LATTICE2,XBOOLE_0,ZFMISC_1,CARD_1,ORDINAL1,CKB1,CKB2,CKB3,CKB4,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB19,CKB20,CKB21,CKB22,CKB23;
constructors BINOP_1,LATTICES,FUNCT_5,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB13,CKB15,CKB16,CKB17,CKB18,CKB24;
requirements SUBSET,NUMERALS;
begin
theorem
Th5: (for L being  join-commutative  join-associative  join-idempotent  Huntington non empty ComplLLattStr holds (ex c being (Element of L) st (for a being (Element of L) holds (( c + a ) = c & ( a + ( a ` ) ) = c))))
proof
let L being  join-commutative  join-associative  join-idempotent  Huntington non empty ComplLLattStr;
set b = the (Element of L);
take c = ( ( b ` ) + b );
let a being (Element of L);
thus ( c + a ) = ( ( ( a ` ) + a ) + a ) by CKB28:1
.= ( ( a ` ) + ( a + a ) ) by LATTICES:def 5
.= ( ( a ` ) + a ) by CKB18:def 1
.= c by CKB28:1;
thus thesis by CKB28:1;
end;
