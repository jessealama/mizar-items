environ
vocabularies BOR_CANT,REALSET1,ABIAN,SIN_COS,ARYTM_3,CARD_3,XREAL_0,EQREL_1,COMPLEX1,NUMBERS,ORDINAL1,ZFMISC_1,CARD_1,XXREAL_0,NEWTON,REAL_1,RELAT_1,PROB_1,SEQ_1,SEQ_2,ARYTM_1,ORDINAL2,RPR_1,XBOOLE_0,SUBSET_1,PROB_2,SERIES_1,NAT_1,FUNCT_1,PROB_3,SERIES_3,LIMFUNC1,SETLIM_1,XXREAL_2,FUNCOP_1;
notations XXREAL_0,XCMPLX_0,XREAL_0,ORDINAL1,REAL_1,XBOOLE_0,SUBSET_1,NUMBERS,NAT_1,COMPLEX1,SEQ_1,SEQ_2,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,PROB_1,PROB_2,SETLIM_1,SERIES_1,PROB_3,VALUED_0,VALUED_1,ZFMISC_1,LIMFUNC1,SERIES_3,NEWTON,ABIAN,SIN_COS,CKB1,CKB4,CKB7,CKB8,CKB9,CKB10,CKB16,CKB20,CKB22,CKB23,CKB25,CKB30;
definitions FUNCT_1,FUNCT_2,SIN_COS,PROB_1,SETLIM_1,NEWTON,CKB4,CKB7,CKB8,CKB9,CKB10,CKB16,CKB20,CKB22,CKB23,CKB25,CKB30;
theorems XCMPLX_0,SIN_COS,SERIES_1,PROB_1,SEQ_2,PROB_3,SUBSET_1,XBOOLE_0,XBOOLE_1,ABIAN,NAT_1,FUNCT_1,FUNCT_2,XXREAL_0,ORDINAL1,TARSKI,XREAL_1,PROB_2,ABSVALUE,VALUED_1,SEQ_4,LIMFUNC1,SETLIM_1,SERIES_3,NEWTON,POWER,FUNCOP_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
schemes NAT_1,RECDEF_1,FUNCT_2;
registrations FUNCT_2,FINSEQ_2,XCMPLX_0,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XREAL_0,NAT_1,MEMBERED,VALUED_0,VALUED_1,ABIAN,XXREAL_0,RELAT_1,SEQ_4,FINSEQ_1,NEWTON,FUNCOP_1,PROB_2,PROB_3,SETLIM_1,RELSET_1,CKB11,CKB12,CKB13,CKB14,CKB21,CKB24;
constructors RELSET_1,BINARITH,SQUARE_1,COMSEQ_3,RVSUM_1,SIN_COS,REAL_1,LIMFUNC1,SETLIM_1,SEQ_2,SERIES_1,KURATO_0,RINFSUP1,SEQ_1,PROB_3,SERIES_3,ABIAN,NEWTON,NUMBERS,NAT_D,SEQ_4,RFUNCT_1,RCOMP_1,SEQM_3,FUNCT_4,CKB1,CKB4,CKB7,CKB8,CKB9,CKB10,CKB16,CKB20,CKB22,CKB23,CKB25,CKB30;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for non  empty set;
reserve Sigma for (SigmaField of Omega);
reserve Prob for (Probability of Sigma);
reserve A for (SetSequence of Sigma);
reserve n for (Element of ( NAT ));
theorem
Th15: ((((( lim_sup A ) = ( @lim_sup A ) & ( lim_inf A ) = ( @lim_inf A )) & ( @lim_inf ( Complement A ) ) = ( ( @lim_sup A ) ` )) & ( ( Prob . ( @lim_inf ( Complement A ) ) ) + ( Prob . ( @lim_sup A ) ) ) = 1) & ( ( Prob . ( lim_inf ( Complement A ) ) ) + ( Prob . ( lim_sup A ) ) ) = 1)
proof
thus A1: ( lim_sup A ) = ( @lim_sup A )
proof
A2: (for n being (Element of ( NAT )) holds (for x being set holds ((ex k being (Element of ( NAT )) st x in ( ( A ^\ n ) . k )) iff (ex k being (Element of ( NAT )) st (k >= n & x in ( A . k ))))))
proof
let n being (Element of ( NAT ));
let x being set;
hereby
assume (ex k being (Element of ( NAT )) st x in ( ( A ^\ n ) . k ));
then consider k being (Element of ( NAT )) such that A3: x in ( ( A ^\ n ) . k );
A4: x in ( A . ( k + n ) ) by A3,NAT_1:def 3;
consider k being (Element of ( NAT )) such that A5: x in ( A . ( k + n ) ) by A4;
consider k being (Element of ( NAT )) such that A6: (k >= n & x in ( A . k )) by A5,NAT_1:11;
thus (ex k being (Element of ( NAT )) st (k >= n & x in ( A . k ))) by A6;
end;
assume (ex k being (Element of ( NAT )) st (k >= n & x in ( A . k )));
then consider k being (Element of ( NAT )) such that A7: (k >= n & x in ( A . k ));
consider knat being Nat such that A8: k = ( n + knat ) by A7,NAT_1:10;
reconsider knat as (Element of ( NAT )) by ORDINAL1:def 12;
A9: (x in ( A . k ) implies x in ( ( A ^\ n ) . knat )) by A8,NAT_1:def 3;
thus thesis by A7,A9;
end;
A10: (for x being set holds ((for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st (n >= m & x in ( A . n )))) iff (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) )))))
proof
let x being set;
hereby
assume A11: (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st (n >= m & x in ( A . n ))));
thus (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) )))
proof
let m being (Element of ( NAT ));
(ex n being (Element of ( NAT )) st (n >= m & x in ( A . n ))) by A11;
then consider n being (Element of ( NAT )) such that A12: x in ( ( A ^\ m ) . n ) by A2;
x in ( A . ( m + n ) ) by A12,NAT_1:def 3;
hence thesis;
end;

end;
assume A13: (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) )));
thus (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st (n >= m & x in ( A . n ))))
proof
let m being (Element of ( NAT ));
consider n being (Element of ( NAT )) such that A14: x in ( A . ( m + n ) ) by A13;
x in ( ( A ^\ m ) . n ) by A14,NAT_1:def 3;
hence thesis by A2;
end;

end;
A15: (for x being set holds (x in ( @Intersection ( Union_Shift_Seq A ) ) iff (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) )))))
proof
let x being set;
hereby
assume x in ( @Intersection ( Union_Shift_Seq A ) );
then A16: (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st (n >= m & x in ( A . n )))) by CKB32:1;
thus (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) ))) by A16,A10;
end;
assume (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) )));
then (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st (n >= m & x in ( A . n )))) by A10;
hence thesis by CKB32:1;
end;
(for x being set holds (x in ( lim_sup A ) iff x in ( @Intersection ( Union_Shift_Seq A ) )))
proof
let x being set;
hereby
assume x in ( lim_sup A );
then A17: (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) ))) by SETLIM_1:66;
thus x in ( @Intersection ( Union_Shift_Seq A ) ) by A17,A15;
end;
assume x in ( @Intersection ( Union_Shift_Seq A ) );
then (for m being (Element of ( NAT )) holds (ex n being (Element of ( NAT )) st x in ( A . ( m + n ) ))) by A15;
hence x in ( lim_sup A ) by SETLIM_1:66;
end;
hence thesis by TARSKI:1;
end;

A18: (for A holds ( lim_inf A ) = ( @lim_inf A ))
proof
let A;
A19: (for x being set holds ((ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k )))) iff (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) )))))
proof
let x being set;
hereby
assume (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k ))));
then consider n being (Element of ( NAT )) such that A20: (for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k )));
(for k being (Element of ( NAT )) holds x in ( A . ( n + k ) )) by A20,NAT_1:11;
hence (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) )));
end;
assume (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) )));
then consider n being (Element of ( NAT )) such that A21: (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) ));
(for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k )))
proof
let k being (Element of ( NAT ));
assume n <= k;
then consider knat being Nat such that A22: k = ( n + knat ) by NAT_1:10;
reconsider knat as (Element of ( NAT )) by ORDINAL1:def 12;
x in ( A . ( n + knat ) ) by A21;
hence thesis by A22;
end;
hence thesis;
end;
(for x being set holds (x in ( @lim_inf A ) iff x in ( lim_inf A )))
proof
let x being set;
hereby
assume x in ( @lim_inf A );
then (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k )))) by CKB32:1;
then (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) ))) by A19;
hence x in ( lim_inf A ) by SETLIM_1:67;
end;
assume x in ( lim_inf A );
then (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds x in ( A . ( n + k ) ))) by SETLIM_1:67;
then (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds (k >= n implies x in ( A . k )))) by A19;
hence thesis by CKB32:1;
end;
hence thesis by TARSKI:1;
end;
A23: ( @lim_inf ( Complement A ) ) = ( ( @lim_sup A ) ` )
proof
reconsider CA = ( Complement A ) as (SetSequence of Sigma);
(for x being set holds (x in ( @lim_inf ( Complement A ) ) iff x in ( ( @lim_sup A ) ` )))
proof
let x being set;
hereby
assume x in ( @lim_inf ( Complement A ) );
then x in ( @lim_inf CA );
then (x in Omega & (ex n being (Element of ( NAT )) st (for k being (Element of ( NAT )) holds (k >= n implies (not x in ( A . k )))))) by CKB32:1;
then (x in Omega & (not x in ( @lim_sup A ))) by CKB32:1;
then x in ( Omega \ ( @lim_sup A ) ) by XBOOLE_0:def 5;
hence x in ( ( @lim_sup A ) ` ) by SUBSET_1:def 4;
end;
assume A24: x in ( ( @lim_sup A ) ` );
x in ( Omega \ ( @lim_sup A ) ) by A24,SUBSET_1:def 4;
then (not x in ( @Intersection ( Union_Shift_Seq A ) )) by XBOOLE_0:def 5;
then (ex m being (Element of ( NAT )) st (for n being (Element of ( NAT )) holds (n >= m implies (not x in ( A . n ))))) by CKB32:1;
then x in ( @lim_inf CA ) by A24,CKB32:1;
hence thesis;
end;
hence thesis by TARSKI:1;
end;
( ( Prob . ( @lim_inf ( Complement A ) ) ) + ( Prob . ( @lim_sup A ) ) ) = 1
proof
( ( Prob . ( ( [#] Sigma ) \ ( @lim_sup A ) ) ) + ( Prob . ( @lim_sup A ) ) ) = 1 by PROB_1:31;
hence thesis by A23,SUBSET_1:def 4;
end;
hence thesis by A1,A18,A23;
end;
