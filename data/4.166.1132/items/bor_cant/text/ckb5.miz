environ
vocabularies BOR_CANT,REALSET1,ABIAN,SIN_COS,ARYTM_3,CARD_3,XREAL_0,EQREL_1,COMPLEX1,NUMBERS,ORDINAL1,ZFMISC_1,CARD_1,XXREAL_0,NEWTON,REAL_1,RELAT_1,PROB_1,SEQ_1,SEQ_2,ARYTM_1,ORDINAL2,RPR_1,XBOOLE_0,SUBSET_1,PROB_2,SERIES_1,NAT_1,FUNCT_1,PROB_3,SERIES_3,LIMFUNC1,SETLIM_1,XXREAL_2,FUNCOP_1;
notations XXREAL_0,XCMPLX_0,XREAL_0,ORDINAL1,REAL_1,XBOOLE_0,SUBSET_1,NUMBERS,NAT_1,COMPLEX1,SEQ_1,SEQ_2,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,PROB_1,PROB_2,SETLIM_1,SERIES_1,PROB_3,VALUED_0,VALUED_1,ZFMISC_1,LIMFUNC1,SERIES_3,NEWTON,ABIAN,SIN_COS,CKB1,CKB4;
definitions FUNCT_1,FUNCT_2,SIN_COS,PROB_1,SETLIM_1,NEWTON,CKB4;
theorems XCMPLX_0,SIN_COS,SERIES_1,PROB_1,SEQ_2,PROB_3,SUBSET_1,XBOOLE_0,XBOOLE_1,ABIAN,NAT_1,FUNCT_1,FUNCT_2,XXREAL_0,ORDINAL1,TARSKI,XREAL_1,PROB_2,ABSVALUE,VALUED_1,SEQ_4,LIMFUNC1,SETLIM_1,SERIES_3,NEWTON,POWER,FUNCOP_1,CKB2,CKB3,CKB4;
schemes NAT_1,RECDEF_1,FUNCT_2;
registrations FUNCT_2,FINSEQ_2,XCMPLX_0,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XREAL_0,NAT_1,MEMBERED,VALUED_0,VALUED_1,ABIAN,XXREAL_0,RELAT_1,SEQ_4,FINSEQ_1,NEWTON,FUNCOP_1,PROB_2,PROB_3,SETLIM_1,RELSET_1;
constructors RELSET_1,BINARITH,SQUARE_1,COMSEQ_3,RVSUM_1,SIN_COS,REAL_1,LIMFUNC1,SETLIM_1,SEQ_2,SERIES_1,KURATO_0,RINFSUP1,SEQ_1,PROB_3,SERIES_3,ABIAN,NEWTON,NUMBERS,NAT_D,SEQ_4,RFUNCT_1,RCOMP_1,SEQM_3,FUNCT_4,CKB1,CKB4;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for non empty set;
reserve Sigma for (SigmaField of Omega);
reserve Prob for (Probability of Sigma);
reserve A for (SetSequence of Sigma);
reserve n for (Element of ( NAT ));
theorem
Th3: ( ( Partial_Product ( JSum ( Prob * A ) ) ) . n ) = ( ( exp_R ) . ( - ( ( Partial_Sums ( Prob * A ) ) . n ) ) )
proof
defpred J[ (Element of ( NAT )) ]
 means
( ( exp_R ) . ( - ( ( Partial_Sums ( Prob * A ) ) . $1 ) ) ) = ( ( Partial_Product ( JSum ( Prob * A ) ) ) . $1 );
A1: ( ( exp_R ) . ( - ( ( Partial_Sums ( Prob * A ) ) . ( 0 ) ) ) ) = ( ( exp_R ) . ( - ( ( Prob * A ) . ( 0 ) ) ) ) by SERIES_1:def 1;
( ( Partial_Product ( JSum ( Prob * A ) ) ) . ( 0 ) ) = ( ( JSum ( Prob * A ) ) . ( 0 ) ) by SERIES_3:def 1;
then ( ( Partial_Product ( JSum ( Prob * A ) ) ) . ( 0 ) ) = ( Sum ( ( - ( ( Prob * A ) . ( 0 ) ) ) rExpSeq ) ) by CKB4:def 1;
then A2: J[ ( 0 ) ] by A1,SIN_COS:def 22;
A3: (for k being (Element of ( NAT )) holds (J[ k ] implies J[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume A4: J[ k ];
A5: ( ( Partial_Product ( JSum ( Prob * A ) ) ) . ( k + 1 ) ) = ( ( ( Partial_Product ( JSum ( Prob * A ) ) ) . k ) * ( ( JSum ( Prob * A ) ) . ( k + 1 ) ) ) by SERIES_3:def 1;
A6: ( ( Partial_Product ( JSum ( Prob * A ) ) ) . ( k + 1 ) ) = ( ( ( exp_R ) . ( - ( ( Partial_Sums ( Prob * A ) ) . k ) ) ) * ( Sum ( ( - ( ( Prob * A ) . ( k + 1 ) ) ) rExpSeq ) ) ) by A4,A5,CKB4:def 1;
A7: ( ( exp_R ( - ( ( Partial_Sums ( Prob * A ) ) . k ) ) ) * ( exp_R ( - ( ( Prob * A ) . ( k + 1 ) ) ) ) ) = ( exp_R ( ( - ( ( Partial_Sums ( Prob * A ) ) . k ) ) + ( - ( ( Prob * A ) . ( k + 1 ) ) ) ) ) by SIN_COS:50;
( - ( ( ( Partial_Sums ( Prob * A ) ) . k ) + ( ( Prob * A ) . ( k + 1 ) ) ) ) = ( - ( ( Partial_Sums ( Prob * A ) ) . ( k + 1 ) ) ) by SERIES_1:def 1;
hence thesis by A7,A6,SIN_COS:def 22;
end;
(for k being (Element of ( NAT )) holds J[ k ]) from NAT_1:sch 1(A2,A3);
hence thesis;
end;
