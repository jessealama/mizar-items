environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,FUNCT_2,MARGREL1,EQREL_1,BVFUNC_1,BVFUNC_2,XBOOLEAN,FUNCT_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,EQREL_1,BVFUNC_1,BVFUNC_2;
definitions BVFUNC_1,XBOOLEAN;
theorems MARGREL1,BINARITH,BVFUNC_1,BVFUNC_2,XBOOLEAN,EQREL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
registrations XBOOLE_0,MARGREL1;
constructors BVFUNC_1,BVFUNC_2,RELSET_1;
requirements BOOLE;
begin
reserve Y for non empty set;
reserve G for (Subset of ( PARTITIONS Y ));
reserve a for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve b for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve PA for (a_partition of Y);
theorem
Th26: ( All (( a 'imp' b ),PA,G) ) = ( All (( ( 'not' a ) 'or' b ),PA,G) )
proof
A1: ( All (( ( 'not' a ) 'or' b ),PA,G) ) '<' ( All (( a 'imp' b ),PA,G) )
proof
let z being (Element of Y);
assume A2: ( ( All (( ( 'not' a ) 'or' b ),PA,G) ) . z ) = ( TRUE );
A3:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( ( 'not' a ) 'or' b ) . x ) = ( TRUE ))));
then ( ( B_INF (( ( 'not' a ) 'or' b ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
hence contradiction by A2,BVFUNC_2:def 9;
end;
(for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( a 'imp' b ) . x ) = ( TRUE )))
proof
let x being (Element of Y);
A4: (( ( 'not' a ) . x ) = ( TRUE ) or ( ( 'not' a ) . x ) = ( FALSE )) by XBOOLEAN:def 3;
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( ( ( 'not' a ) 'or' b ) . x ) = ( TRUE ) by A3;
then A5: ( ( ( 'not' a ) . x ) 'or' ( b . x ) ) = ( TRUE ) by BVFUNC_1:def 4;
per cases  by A5,A4,BINARITH:3;
suppose ( ( 'not' a ) . x ) = ( TRUE );

then ( 'not' ( a . x ) ) = ( TRUE ) by MARGREL1:def 19;
hence ( ( a 'imp' b ) . x ) = ( ( TRUE ) 'or' ( b . x ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
suppose ( b . x ) = ( TRUE );

hence ( ( a 'imp' b ) . x ) = ( ( 'not' ( a . x ) ) 'or' ( TRUE ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
end;
then ( ( B_INF (( a 'imp' b ),( CompF (PA,G) )) ) . z ) = ( TRUE ) by BVFUNC_1:def 16;
hence thesis by BVFUNC_2:def 9;
end;
( All (( a 'imp' b ),PA,G) ) '<' ( All (( ( 'not' a ) 'or' b ),PA,G) )
proof
let z being (Element of Y);
assume A6: ( ( All (( a 'imp' b ),PA,G) ) . z ) = ( TRUE );
A7:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( a 'imp' b ) . x ) = ( TRUE ))));
then ( ( B_INF (( a 'imp' b ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
hence contradiction by A6,BVFUNC_2:def 9;
end;
now
let x being (Element of Y);
A8: (( 'not' ( a . x ) ) = ( TRUE ) or ( 'not' ( a . x ) ) = ( FALSE )) by XBOOLEAN:def 3;
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( ( a 'imp' b ) . x ) = ( TRUE ) by A7;
then A9: ( ( 'not' ( a . x ) ) 'or' ( b . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
per cases  by A9,A8,BINARITH:3;
suppose ( 'not' ( a . x ) ) = ( TRUE );

then ( ( 'not' a ) . x ) = ( TRUE ) by MARGREL1:def 19;
hence ( ( ( 'not' a ) 'or' b ) . x ) = ( ( TRUE ) 'or' ( b . x ) ) by BVFUNC_1:def 4
.= ( TRUE ) by BINARITH:10;
end;
suppose ( b . x ) = ( TRUE );

hence ( ( ( 'not' a ) 'or' b ) . x ) = ( ( ( 'not' a ) . x ) 'or' ( TRUE ) ) by BVFUNC_1:def 4
.= ( TRUE ) by BINARITH:10;
end;
end;
then ( ( B_INF (( ( 'not' a ) 'or' b ),( CompF (PA,G) )) ) . z ) = ( TRUE ) by BVFUNC_1:def 16;
hence thesis by BVFUNC_2:def 9;
end;
hence thesis by A1,BVFUNC_1:15;
end;
