environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,FUNCT_2,MARGREL1,EQREL_1,BVFUNC_1,BVFUNC_2,XBOOLEAN,FUNCT_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,EQREL_1,BVFUNC_1,BVFUNC_2;
definitions BVFUNC_1,XBOOLEAN;
theorems MARGREL1,BINARITH,BVFUNC_1,BVFUNC_2,XBOOLEAN,EQREL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38;
registrations XBOOLE_0,MARGREL1;
constructors BVFUNC_1,BVFUNC_2,RELSET_1;
requirements BOOLE;
begin
reserve Y for non  empty set;
reserve G for (Subset of ( PARTITIONS Y ));
reserve a for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve b for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve c for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve PA for (a_partition of Y);
theorem
( ( All (( b 'imp' c ),PA,G) ) '&' ( All (( c 'imp' ( 'not' a ) ),PA,G) ) ) '<' ( All (( a 'imp' ( 'not' b ) ),PA,G) )
proof
let z being (Element of Y);
assume ( ( ( All (( b 'imp' c ),PA,G) ) '&' ( All (( c 'imp' ( 'not' a ) ),PA,G) ) ) . z ) = ( TRUE );
then A1: ( ( ( All (( b 'imp' c ),PA,G) ) . z ) '&' ( ( All (( c 'imp' ( 'not' a ) ),PA,G) ) . z ) ) = ( TRUE ) by MARGREL1:def 20;
A2:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( b 'imp' c ) . x ) = ( TRUE ))));
then ( ( B_INF (( b 'imp' c ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
then ( ( All (( b 'imp' c ),PA,G) ) . z ) = ( FALSE ) by BVFUNC_2:def 9;
hence contradiction by A1,MARGREL1:12;
end;
A3:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( c 'imp' ( 'not' a ) ) . x ) = ( TRUE ))));
then ( ( B_INF (( c 'imp' ( 'not' a ) ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
then ( ( All (( c 'imp' ( 'not' a ) ),PA,G) ) . z ) = ( FALSE ) by BVFUNC_2:def 9;
hence contradiction by A1,MARGREL1:12;
end;
(for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( a 'imp' ( 'not' b ) ) . x ) = ( TRUE )))
proof
let x being (Element of Y);
A4: (( 'not' ( c . x ) ) = ( TRUE ) or ( 'not' ( c . x ) ) = ( FALSE )) by XBOOLEAN:def 3;
A5: (( 'not' ( b . x ) ) = ( TRUE ) or ( 'not' ( b . x ) ) = ( FALSE )) by XBOOLEAN:def 3;
assume A6: x in ( EqClass (z,( CompF (PA,G) )) );
then ( ( c 'imp' ( 'not' a ) ) . x ) = ( TRUE ) by A3;
then A7: ( ( 'not' ( c . x ) ) 'or' ( ( 'not' a ) . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
( ( b 'imp' c ) . x ) = ( TRUE ) by A2,A6;
then A8: ( ( 'not' ( b . x ) ) 'or' ( c . x ) ) = ( TRUE ) by BVFUNC_1:def 8;
per cases  by A7,A4,A8,A5,BINARITH:3;
suppose (( 'not' ( c . x ) ) = ( TRUE ) & ( 'not' ( b . x ) ) = ( TRUE ));

then ( ( 'not' b ) . x ) = ( TRUE ) by MARGREL1:def 19;
hence ( ( a 'imp' ( 'not' b ) ) . x ) = ( ( 'not' ( a . x ) ) 'or' ( TRUE ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
suppose (( 'not' ( c . x ) ) = ( TRUE ) & ( c . x ) = ( TRUE ));

hence thesis by MARGREL1:11;
end;
suppose (( ( 'not' a ) . x ) = ( TRUE ) & ( 'not' ( b . x ) ) = ( TRUE ));

then ( ( 'not' b ) . x ) = ( TRUE ) by MARGREL1:def 19;
hence ( ( a 'imp' ( 'not' b ) ) . x ) = ( ( 'not' ( a . x ) ) 'or' ( TRUE ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
suppose (( ( 'not' a ) . x ) = ( TRUE ) & ( c . x ) = ( TRUE ));

then ( 'not' ( a . x ) ) = ( TRUE ) by MARGREL1:def 19;
hence ( ( a 'imp' ( 'not' b ) ) . x ) = ( ( TRUE ) 'or' ( ( 'not' b ) . x ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
end;
then ( ( B_INF (( a 'imp' ( 'not' b ) ),( CompF (PA,G) )) ) . z ) = ( TRUE ) by BVFUNC_1:def 16;
hence thesis by BVFUNC_2:def 9;
end;
