environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,FUNCT_2,MARGREL1,EQREL_1,BVFUNC_1,BVFUNC_2,XBOOLEAN,FUNCT_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,EQREL_1,BVFUNC_1,BVFUNC_2;
definitions BVFUNC_1,XBOOLEAN;
theorems MARGREL1,BINARITH,BVFUNC_1,BVFUNC_2,XBOOLEAN,EQREL_1,CKB1,CKB2,CKB3,CKB4;
registrations XBOOLE_0,MARGREL1;
constructors BVFUNC_1,BVFUNC_2,RELSET_1;
requirements BOOLE;
begin
reserve Y for non  empty set;
reserve G for (Subset of ( PARTITIONS Y ));
reserve a for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve b for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve PA for (a_partition of Y);
theorem
( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) ) = ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) )
proof
A1: ( All (( 'not' b ),PA,G) ) = ( B_INF (( 'not' b ),( CompF (PA,G) )) ) by BVFUNC_2:def 9;
A2: ( Ex (b,PA,G) ) = ( B_SUP (b,( CompF (PA,G) )) ) by BVFUNC_2:def 10;
A3: ( Ex (a,PA,G) ) = ( B_SUP (a,( CompF (PA,G) )) ) by BVFUNC_2:def 10;
A4: ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) ) '<' ( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) )
proof
let z being (Element of Y);
A5: (( ( All (( 'not' b ),PA,G) ) . z ) = ( TRUE ) or ( ( All (( 'not' b ),PA,G) ) . z ) = ( FALSE )) by XBOOLEAN:def 3;
assume ( ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) ) . z ) = ( TRUE );
then A6: ( ( ( All (( 'not' a ),PA,G) ) . z ) 'or' ( ( All (( 'not' b ),PA,G) ) . z ) ) = ( TRUE ) by BVFUNC_1:def 4;
per cases  by A6,A5,BINARITH:3;
suppose A7: ( ( All (( 'not' a ),PA,G) ) . z ) = ( TRUE );

A8:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( 'not' a ) . x ) = ( TRUE ))));
then ( ( B_INF (( 'not' a ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
hence contradiction by A7,BVFUNC_2:def 9;
end;
A9:now
let x being (Element of Y);
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( ( 'not' a ) . x ) = ( TRUE ) by A8;
then ( 'not' ( a . x ) ) = ( TRUE ) by MARGREL1:def 19;
hence ( a . x ) <> ( TRUE ) by MARGREL1:11;
end;
thus ( ( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) ) . z ) = ( 'not' ( ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) . z ) ) by MARGREL1:def 19
.= ( 'not' ( ( ( Ex (a,PA,G) ) . z ) '&' ( ( Ex (b,PA,G) ) . z ) ) ) by MARGREL1:def 20
.= ( 'not' ( ( FALSE ) '&' ( ( Ex (b,PA,G) ) . z ) ) ) by A3,A9,BVFUNC_1:def 17
.= ( 'not' ( FALSE ) ) by MARGREL1:12
.= ( TRUE ) by MARGREL1:11;
end;
suppose A10: ( ( All (( 'not' b ),PA,G) ) . z ) = ( TRUE );

A11:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( ( 'not' b ) . x ) = ( TRUE ))));
then ( ( B_INF (( 'not' b ),( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
hence contradiction by A10,BVFUNC_2:def 9;
end;
A12:now
let x being (Element of Y);
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( ( 'not' b ) . x ) = ( TRUE ) by A11;
then ( 'not' ( b . x ) ) = ( TRUE ) by MARGREL1:def 19;
hence ( b . x ) <> ( TRUE ) by MARGREL1:11;
end;
thus ( ( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) ) . z ) = ( 'not' ( ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) . z ) ) by MARGREL1:def 19
.= ( 'not' ( ( ( Ex (a,PA,G) ) . z ) '&' ( ( Ex (b,PA,G) ) . z ) ) ) by MARGREL1:def 20
.= ( 'not' ( ( ( Ex (a,PA,G) ) . z ) '&' ( FALSE ) ) ) by A2,A12,BVFUNC_1:def 17
.= ( 'not' ( FALSE ) ) by MARGREL1:12
.= ( TRUE ) by MARGREL1:11;
end;
end;
A13: ( All (( 'not' a ),PA,G) ) = ( B_INF (( 'not' a ),( CompF (PA,G) )) ) by BVFUNC_2:def 9;
( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) ) '<' ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) )
proof
let z being (Element of Y);
assume ( ( 'not' ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) ) . z ) = ( TRUE );
then ( 'not' ( ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) . z ) ) = ( TRUE ) by MARGREL1:def 19;
then ( ( ( Ex (a,PA,G) ) '&' ( Ex (b,PA,G) ) ) . z ) = ( FALSE ) by MARGREL1:11;
then A14: ( ( ( Ex (a,PA,G) ) . z ) '&' ( ( Ex (b,PA,G) ) . z ) ) = ( FALSE ) by MARGREL1:def 20;
per cases  by A14,MARGREL1:12;
suppose A15: ( ( Ex (a,PA,G) ) . z ) = ( FALSE );

A16:now
let x being (Element of Y);
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( a . x ) <> ( TRUE ) by A3,A15,BVFUNC_1:def 17;
then ( a . x ) = ( FALSE ) by XBOOLEAN:def 3;
then ( 'not' ( a . x ) ) = ( TRUE ) by MARGREL1:11;
hence ( ( 'not' a ) . x ) = ( TRUE ) by MARGREL1:def 19;
end;
thus ( ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) ) . z ) = ( ( ( All (( 'not' a ),PA,G) ) . z ) 'or' ( ( All (( 'not' b ),PA,G) ) . z ) ) by BVFUNC_1:def 4
.= ( ( TRUE ) 'or' ( ( All (( 'not' b ),PA,G) ) . z ) ) by A13,A16,BVFUNC_1:def 16
.= ( TRUE ) by BINARITH:10;
end;
suppose A17: ( ( Ex (b,PA,G) ) . z ) = ( FALSE );

A18:now
let x being (Element of Y);
assume x in ( EqClass (z,( CompF (PA,G) )) );
then ( b . x ) <> ( TRUE ) by A2,A17,BVFUNC_1:def 17;
then ( b . x ) = ( FALSE ) by XBOOLEAN:def 3;
then ( 'not' ( b . x ) ) = ( TRUE ) by MARGREL1:11;
hence ( ( 'not' b ) . x ) = ( TRUE ) by MARGREL1:def 19;
end;
thus ( ( ( All (( 'not' a ),PA,G) ) 'or' ( All (( 'not' b ),PA,G) ) ) . z ) = ( ( ( All (( 'not' a ),PA,G) ) . z ) 'or' ( ( All (( 'not' b ),PA,G) ) . z ) ) by BVFUNC_1:def 4
.= ( ( ( All (( 'not' a ),PA,G) ) . z ) 'or' ( TRUE ) ) by A1,A18,BVFUNC_1:def 16
.= ( TRUE ) by BINARITH:10;
end;
end;
hence thesis by A4,BVFUNC_1:15;
end;
