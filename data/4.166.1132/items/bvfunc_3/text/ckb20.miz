environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,FUNCT_2,MARGREL1,EQREL_1,BVFUNC_1,BVFUNC_2,XBOOLEAN,FUNCT_1;
notations XBOOLE_0,SUBSET_1,XBOOLEAN,MARGREL1,FUNCT_2,EQREL_1,BVFUNC_1,BVFUNC_2;
definitions BVFUNC_1,XBOOLEAN;
theorems MARGREL1,BINARITH,BVFUNC_1,BVFUNC_2,XBOOLEAN,EQREL_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19;
registrations XBOOLE_0,MARGREL1;
constructors BVFUNC_1,BVFUNC_2,RELSET_1;
requirements BOOLE;
begin
reserve Y for non  empty set;
reserve G for (Subset of ( PARTITIONS Y ));
reserve a for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve b for (Element of ( Funcs (Y,( BOOLEAN )) ));
reserve PA for (a_partition of Y);
theorem
( All (a,PA,G) ) '<' ( ( Ex (b,PA,G) ) 'imp' ( Ex (( a '&' b ),PA,G) ) )
proof
let z being (Element of Y);
assume A1: ( ( All (a,PA,G) ) . z ) = ( TRUE );
A2:now
assume (not (for x being (Element of Y) holds (x in ( EqClass (z,( CompF (PA,G) )) ) implies ( a . x ) = ( TRUE ))));
then ( ( B_INF (a,( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 16;
hence contradiction by A1,BVFUNC_2:def 9;
end;
per cases ;
suppose A3: ( ( Ex (b,PA,G) ) . z ) = ( TRUE );

now
assume (not (ex x being (Element of Y) st (x in ( EqClass (z,( CompF (PA,G) )) ) & ( b . x ) = ( TRUE ))));
then ( ( B_SUP (b,( CompF (PA,G) )) ) . z ) = ( FALSE ) by BVFUNC_1:def 17;
hence contradiction by A3,BVFUNC_2:def 10;
end;
then consider x1 being (Element of Y) such that A4: x1 in ( EqClass (z,( CompF (PA,G) )) ) and A5: ( b . x1 ) = ( TRUE );
( ( a '&' b ) . x1 ) = ( ( a . x1 ) '&' ( b . x1 ) ) by MARGREL1:def 20
.= ( ( TRUE ) '&' ( TRUE ) ) by A2,A4,A5
.= ( TRUE );
then ( ( B_SUP (( a '&' b ),( CompF (PA,G) )) ) . z ) = ( TRUE ) by A4,BVFUNC_1:def 17;
then ( ( Ex (( a '&' b ),PA,G) ) . z ) = ( TRUE ) by BVFUNC_2:def 10;
hence ( ( ( Ex (b,PA,G) ) 'imp' ( Ex (( a '&' b ),PA,G) ) ) . z ) = ( ( 'not' ( ( Ex (b,PA,G) ) . z ) ) 'or' ( TRUE ) ) by BVFUNC_1:def 8
.= ( TRUE ) by BINARITH:10;
end;
suppose ( ( Ex (b,PA,G) ) . z ) <> ( TRUE );

then ( ( Ex (b,PA,G) ) . z ) = ( FALSE ) by XBOOLEAN:def 3;
hence ( ( ( Ex (b,PA,G) ) 'imp' ( Ex (( a '&' b ),PA,G) ) ) . z ) = ( ( 'not' ( FALSE ) ) 'or' ( ( Ex (( a '&' b ),PA,G) ) . z ) ) by BVFUNC_1:def 8
.= ( ( TRUE ) 'or' ( ( Ex (( a '&' b ),PA,G) ) . z ) ) by MARGREL1:11
.= ( TRUE ) by BINARITH:10;
end;
end;
