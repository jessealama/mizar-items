environ
vocabularies NUMBERS,BCIALG_1,SUBSET_1,POLYEQ_1,XBOOLE_0,POWER,ARYTM_3,NAT_1,FUNCT_1,STRUCT_0,XXREAL_0,SUPINF_2,CARD_1,ARYTM_1,ORDINAL1,BINOP_1,TARSKI,CHORD,FILTER_0,BCIALG_3,BCIALG_5;
notations TARSKI,XBOOLE_0,SUBSET_1,STRUCT_0,BCIALG_1,NUMBERS,XXREAL_0,REAL_1,FUNCT_2,NAT_1,BCIALG_2,ORDINAL1,BCIALG_3,CKB1;
definitions TARSKI,XBOOLE_0,BCIALG_1,CKB1;
theorems TARSKI,STRUCT_0,BCIALG_1,XREAL_1,XXREAL_0,XBOOLE_0,BCIALG_3,NAT_1,BCIALG_2,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6;
schemes NAT_1;
registrations BCIALG_1,STRUCT_0,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,BCIALG_3,NAT_1,BCIALG_2;
constructors REAL_1,NAT_1,SQUARE_1,BCIALG_2,BCIALG_3,CKB1;
requirements SUBSET,BOOLE,NUMERALS,REAL,ARITHM;
begin
reserve X for BCI-algebra;
reserve x for (Element of X);
reserve y for (Element of X);
reserve k for (Element of ( NAT ));
reserve m for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
theorem
Th6: (for X being BCK-algebra holds (for x,y being (Element of X) holds ((m > n & ( (x,y) to_power n ) = ( (x,y) to_power m )) implies (for k being (Element of ( NAT )) holds (k >= n implies ( (x,y) to_power n ) = ( (x,y) to_power k ))))))
proof
let X being BCK-algebra;
let x being (Element of X);
let y being (Element of X);
assume that
A1: m > n
and
A2: ( (x,y) to_power n ) = ( (x,y) to_power m );
(( m - n ) is (Element of ( NAT )) & ( m - n ) > ( n - n )) by A1,NAT_1:21,XREAL_1:9;
then ( m - n ) >= 1 by NAT_1:14;
then ( ( m - n ) + n ) >= ( 1 + n ) by XREAL_1:6;
then A3: ( (x,y) to_power n ) <= ( (x,y) to_power ( n + 1 ) ) by A2,CKB6:1;
A4: ( (x,y) to_power ( n + 1 ) ) <= ( (x,y) to_power n ) by CKB4:1;
(for k being (Element of ( NAT )) holds (k >= n implies ( (x,y) to_power n ) = ( (x,y) to_power k )))
proof
let k being (Element of ( NAT ));
assume k >= n;
then ( k - n ) is (Element of ( NAT )) by NAT_1:21;
then consider k1 being (Element of ( NAT )) such that A5: k1 = ( k - n );
( (x,y) to_power n ) = ( (( (x,y) to_power n ),y) to_power k1 )
proof
defpred P[ (Element of ( NAT )) ]
 means
($1 <= k1 implies ( (x,y) to_power n ) = ( (( (x,y) to_power n ),y) to_power $1 ));
now
let k;
assume A6: (k <= k1 implies ( (x,y) to_power n ) = ( (( (x,y) to_power n ),y) to_power k ));
set m = ( k + 1 );
A7: ( (( (x,y) to_power n ),y) to_power m ) = ( ( (( (x,y) to_power n ),y) to_power k ) \ y ) by BCIALG_2:4
.= ( (( ( (x,y) to_power n ) \ y ),y) to_power k ) by BCIALG_2:7
.= ( (( (x,y) to_power ( n + 1 ) ),y) to_power k ) by BCIALG_2:4
.= ( (( (x,y) to_power n ),y) to_power k ) by A4,A3,CKB3:1;
assume m <= k1;
hence ( (x,y) to_power n ) = ( (( (x,y) to_power n ),y) to_power m ) by A6,A7,NAT_1:13;
end;
then A8: (for k holds (P[ k ] implies P[ ( k + 1 ) ]));
A9: P[ ( 0 ) ] by BCIALG_2:1;
(for n holds P[ n ]) from NAT_1:sch 1(A9,A8);
hence thesis;
end;
then ( (x,y) to_power n ) = ( (x,y) to_power ( n + k1 ) ) by BCIALG_2:10;
hence thesis by A5;
end;
hence thesis;
end;
