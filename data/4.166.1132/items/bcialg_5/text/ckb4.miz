environ
vocabularies NUMBERS,BCIALG_1,SUBSET_1,POLYEQ_1,XBOOLE_0,POWER,ARYTM_3,NAT_1,FUNCT_1,STRUCT_0,XXREAL_0,SUPINF_2,CARD_1,ARYTM_1,ORDINAL1,BINOP_1,TARSKI,CHORD,FILTER_0,BCIALG_3,BCIALG_5;
notations TARSKI,XBOOLE_0,SUBSET_1,STRUCT_0,BCIALG_1,NUMBERS,XXREAL_0,REAL_1,FUNCT_2,NAT_1,BCIALG_2,ORDINAL1,BCIALG_3,CKB1;
definitions TARSKI,XBOOLE_0,BCIALG_1,CKB1;
theorems TARSKI,STRUCT_0,BCIALG_1,XREAL_1,XXREAL_0,XBOOLE_0,BCIALG_3,NAT_1,BCIALG_2,CKB1,CKB2,CKB3;
schemes NAT_1;
registrations BCIALG_1,STRUCT_0,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,BCIALG_3,NAT_1,BCIALG_2;
constructors REAL_1,NAT_1,SQUARE_1,BCIALG_2,BCIALG_3,CKB1;
requirements SUBSET,BOOLE,NUMERALS,REAL,ARITHM;
begin
reserve X for BCI-algebra;
reserve x for (Element of X);
reserve y for (Element of X);
reserve n for (Element of ( NAT ));
theorem
Th3: (for X being BCK-algebra holds (for x,y being (Element of X) holds (( x \ y ) <= x & ( (x,y) to_power ( n + 1 ) ) <= ( (x,y) to_power n ))))
proof
let X being BCK-algebra;
let x being (Element of X);
let y being (Element of X);
( ( ( (x,y) to_power n ) \ y ) \ ( (x,y) to_power n ) ) = ( ( ( (x,y) to_power n ) \ ( (x,y) to_power n ) ) \ y ) by BCIALG_1:7
.= ( y ` ) by BCIALG_1:def 5
.= ( 0. X ) by BCIALG_1:def 8;
then A1: ( ( (x,y) to_power n ) \ y ) <= ( (x,y) to_power n ) by BCIALG_1:def 11;
( ( x \ y ) \ x ) = ( ( x \ x ) \ y ) by BCIALG_1:7
.= ( y ` ) by BCIALG_1:def 5
.= ( 0. X ) by BCIALG_1:def 8;
hence thesis by A1,BCIALG_1:def 11,BCIALG_2:4;
end;
