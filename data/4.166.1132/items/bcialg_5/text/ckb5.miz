environ
vocabularies NUMBERS,BCIALG_1,SUBSET_1,POLYEQ_1,XBOOLE_0,POWER,ARYTM_3,NAT_1,FUNCT_1,STRUCT_0,XXREAL_0,SUPINF_2,CARD_1,ARYTM_1,ORDINAL1,BINOP_1,TARSKI,CHORD,FILTER_0,BCIALG_3,BCIALG_5;
notations TARSKI,XBOOLE_0,SUBSET_1,STRUCT_0,BCIALG_1,NUMBERS,XXREAL_0,REAL_1,FUNCT_2,NAT_1,BCIALG_2,ORDINAL1,BCIALG_3,CKB1;
definitions TARSKI,XBOOLE_0,BCIALG_1,CKB1;
theorems TARSKI,STRUCT_0,BCIALG_1,XREAL_1,XXREAL_0,XBOOLE_0,BCIALG_3,NAT_1,BCIALG_2,CKB1,CKB2,CKB3,CKB4;
schemes NAT_1;
registrations BCIALG_1,STRUCT_0,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,BCIALG_3,NAT_1,BCIALG_2;
constructors REAL_1,NAT_1,SQUARE_1,BCIALG_2,BCIALG_3,CKB1;
requirements SUBSET,BOOLE,NUMERALS,REAL,ARITHM;
begin
reserve k for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
theorem
Th4: (for X being BCK-algebra holds (for x being (Element of X) holds ( (( 0. X ),x) to_power n ) = ( 0. X )))
proof
let X being BCK-algebra;
let x being (Element of X);
defpred P[ (Element of ( NAT )) ]
 means
($1 <= n implies ( (( 0. X ),x) to_power $1 ) = ( 0. X ));
now
let k;
assume A1: (k <= n implies ( (( 0. X ),x) to_power k ) = ( 0. X ));
set m = ( k + 1 );
assume m <= n;
then ( (( 0. X ),x) to_power m ) = ( x ` ) by A1,BCIALG_2:4,NAT_1:13
.= ( 0. X ) by BCIALG_1:def 8;
hence ( (( 0. X ),x) to_power m ) = ( 0. X );
end;
then A2: (for k holds (P[ k ] implies P[ ( k + 1 ) ]));
A3: P[ ( 0 ) ] by BCIALG_2:1;
(for n holds P[ n ]) from NAT_1:sch 1(A3,A2);
hence thesis;
end;
