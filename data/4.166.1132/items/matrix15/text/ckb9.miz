environ
vocabularies NUMBERS,NAT_1,VECTSP_1,FREEALG,FINSET_1,SUBSET_1,MATRIX_1,TREES_1,FINSEQ_1,RELAT_1,XXREAL_0,INCSP_1,FVSUM_1,CARD_3,RVSUM_1,GROUP_1,ARYTM_1,SUPINF_2,FUNCT_1,ARYTM_3,CARD_1,XBOOLE_0,ALGSTR_0,ORDINAL4,STRUCT_0,FINSEQ_2,TARSKI,RLVECT_1,PARTFUN1,VALUED_1,ZFMISC_1,CLASSES1,XCMPLX_0,MATRIX_3,MATRIX13,LAPLACE,PRVECT_1,RLVECT_3,LMOD_7,QC_LANG1,RLSUB_1,MESFUNC1,PRE_POLY,MATRIX11,MATRIXR1,AFINSQ_1,MATRIX_2,FINSEQ_3,FUNCT_2,SETWISEO,FINSOP_1,RLVECT_2,RLVECT_5,FUNCOP_1,FUNCT_4,MATRIX_6,MATRIX15;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,CARD_1,XCMPLX_0,ALGSTR_0,XXREAL_0,NAT_1,FINSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,SETWOP_2,FINSEQ_1,STRUCT_0,FUNCOP_1,RLVECT_1,GROUP_1,VECTSP_1,FINSEQ_2,MATRIX_1,MATRIX_2,FVSUM_1,FINSOP_1,NAT_D,BINARITH,GROUP_4,MATRIX_3,MATRIX_6,MATRIX_7,FINSEQ_7,FUNCT_4,DOMAIN_1,MATRIX11,MEASURE6,PSCOMP_1,VECTSP_4,VECTSP_6,VECTSP_7,VECTSP_9,FINSEQOP,PRVECT_1,MATRIX13,PRE_POLY,MATRLIN,FUNCT_7,PNPROC_1,LAPLACE;
definitions TARSKI,XBOOLE_0,RLVECT_1,FINSEQ_1,FINSEQ_2,MATRIX_1,GROUP_4,MATRIX_3,MATRIX_7,VECTSP_4,RELAT_1,LAPLACE,MATRIX13,FVSUM_1,ALGSTR_0;
theorems CARD_1,CARD_2,CARD_FIN,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSEQOP,FINSOP_1,FRECHET,FUNCT_1,FUNCT_2,FUNCT_7,FUNCOP_1,FVSUM_1,GROUP_1,LAPLACE,MATRIX_1,MATRIX_2,MATRIX_3,MATRIX_4,MATRIX_5,MATRIX_6,MATRIX_7,MATRIX11,MATRIX13,MATRIXR1,MATRIXR2,MATRLIN,NAT_1,ORDINAL1,PARTFUN1,PNPROC_1,RELAT_1,RLVECT_1,STIRL2_1,STRUCT_0,TARSKI,WELLORD2,VECTSP_1,VECTSP_4,VECTSP_6,VECTSP_7,VECTSP_9,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ZFMISC_1,NAT_D,PRE_POLY,MEASURE6,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8;
schemes FINSEQ_2,NAT_1,MATRIX_1;
registrations XBOOLE_0,FUNCT_1,FINSET_1,STRUCT_0,FVSUM_1,VECTSP_1,FUNCT_2,ORDINAL1,XXREAL_0,NAT_1,FINSEQ_1,RELAT_1,CARD_1,FUNCOP_1,SETFAM_1,FINSEQ_2,MATRLIN,MATRIX13,XREAL_0,PNPROC_1,VECTSP_9,VALUED_0,RELSET_1,PRVECT_1;
constructors SETWISEO,FINSOP_1,ALGSTR_1,FVSUM_1,XXREAL_0,GROUP_4,FINSEQ_7,WELLORD2,VECTSP_6,VECTSP_7,VECTSP_9,MATRIX_6,MATRIX_7,MATRIX11,MATRIX13,PNPROC_1,REALSET1,LAPLACE,BINOP_2,NAT_D,BINARITH,RELSET_1,PRE_POLY,PSCOMP_1;
requirements ARITHM,NUMERALS,REAL,BOOLE,SUBSET;
begin
reserve i for Nat;
reserve j for Nat;
reserve k for Nat;
reserve K for Field;
theorem
Th7: (for K being  Abelian  add-associative  right_zeroed  right_complementable non  empty addLoopStr holds (for p being (FinSequence of K) holds (for i holds (for j holds ((((i in ( dom p ) & j in ( dom p )) & i <> j) & (for k holds (((k in ( dom p ) & k <> i) & k <> j) implies ( p . k ) = ( 0. K )))) implies ( Sum p ) = ( ( p /. i ) + ( p /. j ) ))))))
proof
let K being  Abelian  add-associative  right_zeroed  right_complementable non  empty addLoopStr;
let p being (FinSequence of K);
A1:now
let i;
let j;
assume that
A2: i in ( dom p )
and
A3: j in ( dom p )
and
A4: i < j
and
A5: (for k holds (((k in ( dom p ) & k <> i) & k <> j) implies ( p . k ) = ( 0. K )));
A6: ( dom p ) = ( Seg ( len p ) ) by FINSEQ_1:def 3;
then (i in ( NAT ) & 1 <= i) by A2,FINSEQ_1:1;
then A7: i in ( Seg i );
set pI = ( p | i );
consider q being FinSequence such that A8: p = ( pI ^ q ) by FINSEQ_1:80;
reconsider q as (FinSequence of K) by A8,FINSEQ_1:36;
A9: i <= ( len p ) by A2,A6,FINSEQ_1:1;
then A10: ( len pI ) = i by FINSEQ_1:17;
A11: ( dom pI ) = ( Seg i ) by A9,FINSEQ_1:17;
then (not j in ( dom pI )) by A4,FINSEQ_1:1;
then consider ji being Nat such that A12: ji in ( dom q ) and A13: j = ( i + ji ) by A3,A8,A10,FINSEQ_1:25;
now
let k;
assume that
A14: k in ( dom q )
and
A15: k <> ji;
reconsider kk = k as (Element of ( NAT )) by ORDINAL1:def 12;
A16: ( i + kk ) <> ( i + ji ) by A15;
( dom q ) = ( Seg ( len q ) ) by FINSEQ_1:def 3;
then k >= 1 by A14,FINSEQ_1:1;
then ( k + i ) >= ( i + 1 ) by XREAL_1:7;
then A17: ( i + kk ) <> i by NAT_1:13;
thus ( q . k ) = ( p . ( i + kk ) ) by A8,A10,A14,FINSEQ_1:def 7
.= ( 0. K ) by A5,A8,A10,A13,A14,A17,A16,FINSEQ_1:28;
end;
then A18: ( Sum q ) = ( q . ji ) by A12,MATRIX_3:12
.= ( p . j ) by A8,A10,A12,A13,FINSEQ_1:def 7
.= ( p /. j ) by A3,PARTFUN1:def 6;
A19: ( Seg i ) c= ( Seg ( len p ) ) by A9,FINSEQ_1:5;
now
let k;
assume that
A20: k in ( dom pI )
and
A21: k <> i;
reconsider kk = k as (Element of ( NAT )) by ORDINAL1:def 12;
A22: k <> j by A4,A11,A20,FINSEQ_1:1;
thus ( pI . k ) = ( p . kk ) by A8,A20,FINSEQ_1:def 7
.= ( 0. K ) by A5,A6,A11,A19,A20,A21,A22;
end;
then ( Sum pI ) = ( pI . i ) by A7,A11,MATRIX_3:12
.= ( p . i ) by A8,A7,A11,FINSEQ_1:def 7
.= ( p /. i ) by A6,A7,A19,PARTFUN1:def 6;
hence ( Sum p ) = ( ( p /. i ) + ( p /. j ) ) by A8,A18,RLVECT_1:41;
end;
let i;
let j;
assume that
A23: (i in ( dom p ) & j in ( dom p ))
and
A24: i <> j
and
A25: (for k holds (((k in ( dom p ) & k <> i) & k <> j) implies ( p . k ) = ( 0. K )));
A26: (i < j or j < i) by A24,XXREAL_0:1;
(for k holds (((k in ( dom p ) & k <> j) & k <> i) implies ( p . k ) = ( 0. K ))) by A25;
hence thesis by A1,A23,A25,A26;
end;
