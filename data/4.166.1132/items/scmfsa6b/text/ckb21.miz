environ
vocabularies NUMBERS,SUBSET_1,AMI_1,SCMFSA_2,FSM_1,CARD_1,TARSKI,SCMFSA6A,FUNCT_4,RELAT_1,XBOOLE_0,FUNCT_1,INT_1,MSUALG_1,CIRCUIT2,AMI_3,ARYTM_3,XXREAL_0,NAT_1,SF_MASTR,GRAPHSP,AMISTD_2,TURING_1,STRUCT_0,VALUED_1,FUNCOP_1,SCMFSA6B,PARTFUN1,SCMNORM,RELOC,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,FUNCT_7,INT_1,RELAT_1,FUNCT_1,PARTFUN1,PBOOLE,FINSEQ_1,FUNCOP_1,FUNCT_4,VALUED_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,SCMFSA_2,AMISTD_1,AMISTD_2,SCMFSA6A,SF_MASTR,CKB1,CKB2,CKB3;
definitions AMISTD_2,FUNCOP_1,SCMFSA6A,COMPOS_1,EXTPRO_1,MEMSTR_0,AMISTD_1,CKB2,CKB3;
theorems RELAT_1,FUNCT_7,FUNCT_4,FUNCT_1,SCMFSA_3,INT_1,FUNCOP_1,TARSKI,NAT_1,SCMFSA_2,MEMSTR_0,GRFUNC_1,SCMFSA6A,SF_MASTR,XBOOLE_0,XBOOLE_1,XREAL_1,ORDINAL1,XXREAL_0,VALUED_1,PBOOLE,PARTFUN1,AFINSQ_1,FINSEQ_4,COMPOS_1,EXTPRO_1,AMISTD_2,AMISTD_5,AMISTD_1,STRUCT_0,CKB2,CKB3,CKB5,CKB6,CKB7,CKB10,CKB11,CKB12,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19;
schemes NAT_1;
registrations SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMFSA_2,SCMFSA6A,SF_MASTR,XBOOLE_0,FINSET_1,AMISTD_2,SCMFSA10,COMPOS_1,EXTPRO_1,SCMFSA_4,PBOOLE,PRE_POLY,FUNCT_7,FUNCT_4,STRUCT_0,MEMSTR_0,CKB4,CKB8,CKB9,CKB13,CKB20;
constructors XXREAL_0,SCMFSA6A,SF_MASTR,AMISTD_1,AMISTD_2,MEMSTR_0,RELSET_1,PRE_POLY,AMISTD_5,DOMAIN_1,PBOOLE,AMI_3,FUNCT_7,CKB1,CKB2,CKB3;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve m for (Element of ( NAT ));
reserve I for (Program of ( SCM+FSA ));
reserve s for (State of ( SCM+FSA ));
reserve P for (Instruction-Sequence of ( SCM+FSA ));
theorem
Th36: (for s being ( 0 ) -started (State of ( SCM+FSA )) holds (for I being  paraclosed (Program of ( SCM+FSA )) holds (for J being (Program of ( SCM+FSA )) holds (for P being (Instruction-Sequence of ( SCM+FSA )) holds ((I c= P & P halts_on s) implies (for m holds (m <= ( LifeSpan (P,s) ) implies ( Comput (P,s,m) ) = ( Comput (( P +* ( I ';' J ) ),s,m) ))))))))
proof
let s being ( 0 ) -started (State of ( SCM+FSA ));
let I being  paraclosed (Program of ( SCM+FSA ));
let J being (Program of ( SCM+FSA ));
let P being (Instruction-Sequence of ( SCM+FSA ));
assume that
A1: I c= P;
assume that
A3: P halts_on s;
defpred X[ Nat ]
 means
($1 <= ( LifeSpan (P,s) ) implies ( Comput (P,s,$1) ) = ( Comput (( P +* ( I ';' J ) ),s,$1) ));
A6: (for m holds (X[ m ] implies X[ ( m + 1 ) ]))
proof
let m;
assume A7: (m <= ( LifeSpan (P,s) ) implies ( Comput (P,s,m) ) = ( Comput (( P +* ( I ';' J ) ),s,m) ));
xx: ( dom ( I ';' J ) ) = ( ( dom ( Directed I ) ) \/ ( dom ( Reloc (J,( card I )) ) ) ) by FUNCT_4:def 1
.= ( ( dom I ) \/ ( dom ( Reloc (J,( card I )) ) ) ) by FUNCT_4:99;
A8: (( {} ) c= ( Comput (( P +* ( I ';' J ) ),s,m) ) & ( dom I ) c= ( dom ( I ';' J ) )) by xx,XBOOLE_1:2,XBOOLE_1:7;
A9: ( Comput (P,s,( m + 1 )) ) = ( Following (P,( Comput (P,s,m) )) ) by EXTPRO_1:3;
A10: ( Comput (( P +* ( I ';' J ) ),s,( m + 1 )) ) = ( Following (( P +* ( I ';' J ) ),( Comput (( P +* ( I ';' J ) ),s,m) )) ) by EXTPRO_1:3;
A11: ( IC ( Comput (P,s,m) ) ) in ( dom I ) by A1,AMISTD_1:def 10;
( dom P ) = ( NAT ) by PARTFUN1:def 2;
then A12: ( CurInstr (P,( Comput (P,s,m) )) ) = ( P . ( IC ( Comput (P,s,m) ) ) ) by PARTFUN1:def 6
.= ( I . ( IC ( Comput (P,s,m) ) ) ) by A11,A1,GRFUNC_1:2;
assume A13: ( m + 1 ) <= ( LifeSpan (P,s) );
A14: ( I ';' J ) c= ( P +* ( I ';' J ) ) by FUNCT_4:25;
A15: ( dom ( P +* ( I ';' J ) ) ) = ( NAT ) by PARTFUN1:def 2;
m < ( LifeSpan (P,s) ) by A13,NAT_1:13;
then ( I . ( IC ( Comput (P,s,m) ) ) ) <> ( halt ( SCM+FSA ) ) by A3,A12,EXTPRO_1:def 15;
then ( CurInstr (P,( Comput (P,s,m) )) ) = ( ( I ';' J ) . ( IC ( Comput (P,s,m) ) ) ) by A11,A12,SCMFSA6A:15
.= ( ( P +* ( I ';' J ) ) . ( IC ( Comput (P,s,m) ) ) ) by A11,A8,A14,GRFUNC_1:2
.= ( CurInstr (( P +* ( I ';' J ) ),( Comput (( P +* ( I ';' J ) ),s,m) )) ) by A15,A13,A7,NAT_1:13,PARTFUN1:def 6;
hence ( Comput (P,s,( m + 1 )) ) = ( Comput (( P +* ( I ';' J ) ),s,( m + 1 )) ) by A9,A10,A7,A13,NAT_1:13;
end;
(( Comput (P,s,( 0 )) ) = s & ( Comput (( P +* ( I ';' J ) ),s,( 0 )) ) = s) by EXTPRO_1:2;
then A16: X[ ( 0 ) ];
thus (for m holds X[ m ]) from NAT_1:sch 1(A16,A6);
end;
