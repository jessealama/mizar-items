environ
vocabularies NUMBERS,SUBSET_1,AMI_1,SCMFSA_2,FSM_1,CARD_1,TARSKI,SCMFSA6A,FUNCT_4,RELAT_1,XBOOLE_0,FUNCT_1,INT_1,MSUALG_1,CIRCUIT2,AMI_3,ARYTM_3,XXREAL_0,NAT_1,SF_MASTR,GRAPHSP,AMISTD_2,TURING_1,STRUCT_0,VALUED_1,FUNCOP_1,SCMFSA6B,PARTFUN1,SCMNORM,RELOC,SCMFSA6C,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,FUNCT_7,INT_1,RELAT_1,FUNCT_1,PARTFUN1,PBOOLE,FINSEQ_1,FUNCOP_1,FUNCT_4,VALUED_1,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,SCMFSA_2,AMISTD_1,AMISTD_2,SCMFSA6A,SF_MASTR,CKB1,CKB2,CKB3;
definitions AMISTD_2,FUNCOP_1,SCMFSA6A,COMPOS_1,EXTPRO_1,MEMSTR_0,AMISTD_1,CKB2,CKB3;
theorems RELAT_1,FUNCT_7,FUNCT_4,FUNCT_1,SCMFSA_3,INT_1,FUNCOP_1,TARSKI,NAT_1,SCMFSA_2,MEMSTR_0,GRFUNC_1,SCMFSA6A,SF_MASTR,XBOOLE_0,XBOOLE_1,XREAL_1,ORDINAL1,XXREAL_0,VALUED_1,PBOOLE,PARTFUN1,AFINSQ_1,FINSEQ_4,COMPOS_1,EXTPRO_1,AMISTD_2,AMISTD_5,AMISTD_1,STRUCT_0,CKB2,CKB3;
schemes NAT_1;
registrations SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMFSA_2,SCMFSA6A,SF_MASTR,XBOOLE_0,FINSET_1,AMISTD_2,SCMFSA10,COMPOS_1,EXTPRO_1,SCMFSA_4,PBOOLE,PRE_POLY,FUNCT_7,FUNCT_4,STRUCT_0,MEMSTR_0;
constructors XXREAL_0,SCMFSA6A,SF_MASTR,AMISTD_1,AMISTD_2,MEMSTR_0,RELSET_1,PRE_POLY,AMISTD_5,DOMAIN_1,PBOOLE,AMI_3,FUNCT_7,CKB1,CKB2,CKB3;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve s for (State of ( SCM+FSA ));
reserve P for (Instruction-Sequence of ( SCM+FSA ));
set SA0 = ( Start-At (( 0 ),( SCM+FSA )) );
registration
cluster  parahalting  keeping_0 for (Program of ( SCM+FSA ));
existence
proof
take ( Macro ( halt ( SCM+FSA ) ) );
thus ( Macro ( halt ( SCM+FSA ) ) ) is  parahalting
proof
let s being ( 0 ) -started (State of ( SCM+FSA ));
set m = ( Macro ( halt ( SCM+FSA ) ) );
A1: ( Start-At (( 0 ),( SCM+FSA )) ) c= s by MEMSTR_0:29;
let P being (Instruction-Sequence of ( SCM+FSA ));
assume that
A2: m c= P;
( dom SA0 ) = { ( IC ( SCM+FSA ) ) } by FUNCOP_1:13;
then A4: ( IC ( SCM+FSA ) ) in ( dom SA0 ) by TARSKI:def 1;
take ( 0 );
( dom m ) = { ( 0 ),1 } by COMPOS_1:61;
then A11: ( 0 ) in ( dom m ) by TARSKI:def 2;
A13: ( Comput (P,s,( 0 )) ) = s by EXTPRO_1:2;
( dom P ) = ( NAT ) by PARTFUN1:def 2;
hence ( IC ( Comput (P,s,( 0 )) ) ) in ( dom P );
( dom P ) = ( NAT ) by PARTFUN1:def 2;
then ( CurInstr (P,( Comput (P,s,( 0 )) )) ) = ( P . ( IC s ) ) by A13,PARTFUN1:def 6
.= ( P . ( IC ( Start-At (( 0 ),( SCM+FSA )) ) ) ) by A1,A4,GRFUNC_1:2
.= ( P . ( 0 ) ) by FUNCOP_1:72
.= ( m . ( 0 ) ) by A2,A11,GRFUNC_1:2
.= ( halt ( SCM+FSA ) ) by COMPOS_1:58;
hence ( CurInstr (P,( Comput (P,s,( 0 )) )) ) = ( halt ( SCM+FSA ) );
end;

set Mi = ( Macro ( halt ( SCM+FSA ) ) );
( dom Mi ) = { ( 0 ),1 } by COMPOS_1:61;
then A1: ( 0 ) in ( dom Mi ) by TARSKI:def 2;
let s being ( 0 ) -started (State of ( SCM+FSA ));
A2: ( Start-At (( 0 ),( SCM+FSA )) ) c= s by MEMSTR_0:29;
let P;
assume A3: Mi c= P;
let k being (Element of ( NAT ));
A4: s = ( Comput (P,s,( 0 )) ) by EXTPRO_1:2;
( dom P ) = ( NAT ) by PARTFUN1:def 2;
then A5: ( P /. ( IC s ) ) = ( P . ( IC s ) ) by PARTFUN1:def 6;
( CurInstr (P,s) ) = ( P . ( 0 ) ) by A2,A5,MEMSTR_0:39
.= ( Mi . ( 0 ) ) by A1,A3,GRFUNC_1:2
.= ( halt ( SCM+FSA ) ) by COMPOS_1:58;
hence ( ( Comput (P,s,k) ) . ( intloc ( 0 ) ) ) = ( s . ( intloc ( 0 ) ) ) by A4,EXTPRO_1:5;
end;
end;
