environ
vocabularies VECTSP_1,SUBSET_1,RLVECT_1,ALGSTR_0,XBOOLE_0,ARYTM_1,ARYTM_3,RELAT_1,SUPINF_2,ZFMISC_1,STRUCT_0,BINOP_1,FUNCT_1,MCART_1,TARSKI,PARSP_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,MCART_1,DOMAIN_1,FUNCT_2,BINOP_1,STRUCT_0,ALGSTR_0,RLVECT_1,GROUP_1,VECTSP_1;
definitions TARSKI,STRUCT_0;
theorems MCART_1,VECTSP_1,BINOP_1,FUNCT_2,TARSKI,RLVECT_1,GROUP_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10;
schemes BINOP_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,STRUCT_0,VECTSP_1;
constructors BINOP_1,DOMAIN_1,VECTSP_1,RLVECT_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
theorem
Lm11: (for F being  add-associative  right_zeroed  right_complementable non empty addLoopStr holds (for a,b,c being (Element of F) holds ( ( b + a ) - ( c + a ) ) = ( b - c )))
proof
let F being  add-associative  right_zeroed  right_complementable non empty addLoopStr;
let a being (Element of F),b being (Element of F),c being (Element of F);
thus ( ( b + a ) - ( c + a ) ) = ( ( b + a ) + ( - ( c + a ) ) ) by RLVECT_1:def 11
.= ( ( b + a ) + ( ( - a ) + ( - c ) ) ) by RLVECT_1:31
.= ( ( ( b + a ) + ( - a ) ) + ( - c ) ) by RLVECT_1:def 3
.= ( ( b + ( a + ( - a ) ) ) + ( - c ) ) by RLVECT_1:def 3
.= ( ( b + ( 0. F ) ) + ( - c ) ) by RLVECT_1:def 10
.= ( b + ( - c ) ) by RLVECT_1:4
.= ( b - c ) by RLVECT_1:def 11;
end;
