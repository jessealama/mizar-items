environ
vocabularies TARSKI,XBOOLE_0,SUBSET_1,FUNCT_1,RELAT_1,ZFMISC_1,ORDINAL1;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,SUBSET_1,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB18,CKB20,CKB26,CKB46,CKB49,CKB51,CKB53,CKB60,CKB66,CKB67;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26,CKB46,CKB49,CKB60,CKB66,CKB67;
theorems TARSKI,XBOOLE_0,FUNCT_1,ZFMISC_1,ENUMSET1,RELAT_1,XBOOLE_1,SUBSET_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB31,CKB35,CKB36,CKB37,CKB38,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB54,CKB55,CKB57,CKB59,CKB60,CKB61,CKB65,CKB66,CKB67;
schemes XBOOLE_0,FUNCT_1,CKB39,CKB40,CKB62,CKB63,CKB64;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,CKB7,CKB16,CKB17,CKB19,CKB29,CKB32,CKB33,CKB34,CKB50,CKB52,CKB56,CKB58;
constructors TARSKI,ENUMSET1,SUBSET_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26,CKB46,CKB49,CKB60,CKB66,CKB67;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve x for set;
reserve y for set;
reserve A for Ordinal;
reserve D for Ordinal;
theorem
Th51: (for D holds (ex A st (D in A & A is  limit_ordinal)))
proof
let D;
consider Field being set such that A1: D in Field and A2: (for X holds (for Y holds ((X in Field & Y c= X) implies Y in Field))) and A3: (for X holds (X in Field implies ( bool X ) in Field)) and (for X holds (X c= Field implies (X,Field are_equipotent  or X in Field))) by ZFMISC_1:112;
(for X holds (X in ( On Field ) implies (X is Ordinal & X c= ( On Field ))))
proof
let X;
assume A4: X in ( On Field );
then reconsider A = X as Ordinal by CKB66:def 1;
A5: A in Field by A4,CKB66:def 1;
thus X is Ordinal by A4,CKB66:def 1;
let y;
assume A6: y in X;
then y in A;
then reconsider B = y as Ordinal by CKB24:1;
B c= A by A6,CKB12:def 1;
then B in Field by A2,A5;
hence thesis by CKB66:def 1;
end;
then reconsider ON = ( On Field ) as Ordinal by CKB35:1;
take ON;
thus D in ON by A1,CKB66:def 1;
(A in ON implies ( succ A ) in ON)
proof
A7: ( succ A ) c= ( bool A )
proof
let x;
assume x in ( succ A );
then (x in A or x = A) by CKB10:1;
then x c= A by CKB12:def 1;
hence thesis;
end;
assume A in ON;
then A in Field by CKB66:def 1;
then ( bool A ) in Field by A3;
then ( succ A ) in Field by A2,A7;
hence thesis by CKB66:def 1;
end;
hence thesis by CKB47:1;
end;
