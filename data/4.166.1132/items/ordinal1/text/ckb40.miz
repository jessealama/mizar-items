environ
vocabularies TARSKI,XBOOLE_0,SUBSET_1,FUNCT_1,RELAT_1,ZFMISC_1,ORDINAL1;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,SUBSET_1,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB18,CKB20,CKB26;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26;
theorems TARSKI,XBOOLE_0,FUNCT_1,ZFMISC_1,ENUMSET1,RELAT_1,XBOOLE_1,SUBSET_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB30,CKB31,CKB35,CKB36,CKB37,CKB38;
schemes XBOOLE_0,FUNCT_1,CKB39;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,CKB7,CKB16,CKB17,CKB19,CKB29,CKB32,CKB33,CKB34;
constructors TARSKI,ENUMSET1,SUBSET_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26;
requirements SUBSET,BOOLE;
begin
reserve Z for set;
reserve x for set;
reserve A for Ordinal;
reserve B for Ordinal;
reserve C for Ordinal;
scheme TransfiniteInd { P[Ordinal] } : (for A holds P[ A ])
provided
A1: (for A holds ((for C holds (C in A implies P[ C ])) implies P[ A ]))
proof
defpred R[ set ]
 means
(ex B st ($1 = B & P[ B ]));
let A;
set Y = ( succ A );
consider Z such that A2: (x in Z iff (x in Y & R[ x ])) from XBOOLE_0:sch 1;
now
assume ( Y \ Z ) <> ( {} );
then consider C such that A3: C in ( Y \ Z ) and A4: (for B holds (B in ( Y \ Z ) implies C c= B)) by CKB36:1;
now
let B;
assume that
A5: B in C;
A6: C c= Y by A3,CKB12:def 1;
now
assume (not B in Z);
then B in ( Y \ Z ) by A5,A6,XBOOLE_0:def 5;
then A7: C c= B by A4;
C <> B by A5;
then C c< B by A7,XBOOLE_0:def 8;
hence contradiction by A5,CKB22:1;
end;
then (ex B9 being Ordinal st (B = B9 & P[ B9 ])) by A2;
hence P[ B ];
end;
then A8: P[ C ] by A1;
(not C in Z) by A3,XBOOLE_0:def 5;
hence contradiction by A2,A3,A8;
end;
then ((not A in Y) or A in Z) by XBOOLE_0:def 5;
then (ex B st (A = B & P[ B ])) by A2,CKB8:1;
hence thesis;
end;
