environ
vocabularies TARSKI,XBOOLE_0,SUBSET_1,FUNCT_1,RELAT_1,ZFMISC_1,ORDINAL1;
notations TARSKI,XBOOLE_0,ZFMISC_1,ENUMSET1,SUBSET_1,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB18,CKB20,CKB26;
definitions TARSKI,XBOOLE_0,RELAT_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26;
theorems TARSKI,XBOOLE_0,FUNCT_1,ZFMISC_1,ENUMSET1,RELAT_1,XBOOLE_1,SUBSET_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28;
schemes XBOOLE_0,FUNCT_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,CKB7,CKB16,CKB17,CKB19,CKB29;
constructors TARSKI,ENUMSET1,SUBSET_1,FUNCT_1,CKB6,CKB12,CKB13,CKB15,CKB26;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve z for set;
theorem
Th29: (x is Ordinal implies ( succ x ) is Ordinal)
proof
A1:now
let y;
A2: (y in { x } implies y = x) by TARSKI:def 1;
assume y in ( succ x );
hence (y in x or y = x) by A2,XBOOLE_0:def 3;
end;
assume A3: x is Ordinal;
now
let y;
A4: (y = x implies y c= ( succ x )) by XBOOLE_1:7;
A5:now
assume y in x;
then A6: y c= x by A3,CKB12:def 1;
x c= ( x \/ { x } ) by XBOOLE_1:7;
hence y c= ( succ x ) by A6,XBOOLE_1:1;
end;
assume y in ( succ x );
hence y c= ( succ x ) by A1,A5,A4;
end;
then A7: ( succ x ) is  epsilon-transitive by CKB12:def 1;
now
let y;
let z;
assume that
A8: y in ( succ x )
and
A9: z in ( succ x );
A10: (z in x or z = x) by A1,A9;
(y in x or y = x) by A1,A8;
hence ((y in z or y = z) or z in y) by A3,A10,CKB13:def 1;
end;
then ( succ x ) is  epsilon-connected by CKB13:def 1;
hence thesis by A7;
end;
