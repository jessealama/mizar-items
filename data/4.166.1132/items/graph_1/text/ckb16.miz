environ
vocabularies NUMBERS,SUBSET_1,STRUCT_0,FUNCT_1,GLIB_000,XBOOLE_0,FUNCT_5,RELAT_1,PARTFUN1,RELAT_2,FINSET_1,TREES_2,FINSEQ_1,XXREAL_0,ARYTM_3,TARSKI,CARD_1,FUNCT_2,ZFMISC_1,MCART_1,GRAPH_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,FUNCT_5,FINSEQ_1,FINSET_1,PARTFUN1,CARD_1,NUMBERS,NAT_1,MCART_1,XXREAL_0,STRUCT_0,CKB1,CKB2,CKB3,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
definitions FUNCT_1,TARSKI,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
theorems FUNCT_2,FUNCT_1,PARTFUN1,FINSEQ_1,NAT_1,ZFMISC_1,MCART_1,TARSKI,RELAT_1,FINSEQ_3,RELSET_1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,CARD_1,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
schemes FUNCT_2,TARSKI,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FINSET_1,XREAL_0,FINSEQ_1,ORDINAL1,STRUCT_0,CARD_1,FUNCT_2,RELSET_1,CKB1,CKB4,CKB15;
constructors PARTFUN1,FUNCT_2,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,STRUCT_0,FUNCT_5,RELSET_1,CKB1,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve x for set;
reserve y for set;
reserve G1 for Graph;
reserve G2 for Graph;
registration
cluster  finite  non-multi  oriented  simple  connected for Graph;
existence
proof
set V = { 1 };
reconsider empty1 = ( {} ) as (Function of ( {} ),V) by RELSET_1:12;
reconsider G = MultiGraphStruct (# V,( {} ),empty1,empty1 #) as Graph;
take G;
thus G is  finite by CKB14:def 1;
(for x holds (for y holds (((x in (the carrier' of G) & y in (the carrier' of G)) & ((( (the Source of G) . x ) = ( (the Source of G) . y ) & ( (the Target of G) . x ) = ( (the Target of G) . y )) or (( (the Source of G) . x ) = ( (the Target of G) . y ) & ( (the Source of G) . y ) = ( (the Target of G) . x )))) implies x = y)));
hence G is  non-multi by CKB11:def 1;
(for x holds (for y holds ((((x in (the carrier' of G) & y in (the carrier' of G)) & ( (the Source of G) . x ) = ( (the Source of G) . y )) & ( (the Target of G) . x ) = ( (the Target of G) . y )) implies x = y)));
hence G is  oriented by CKB10:def 1;
(not (ex x st (x in (the carrier' of G) & ( (the Source of G) . x ) = ( (the Target of G) . x ))));
hence G is  simple by CKB12:def 1;
(not (ex G1,G2 being Graph st ((the carrier of G1) misses (the carrier of G2) & G is_sum_of G1,G2)))
proof
given G1 being Graph,G2 being Graph such that
A1: (the carrier of G1) misses (the carrier of G2)
and
A2: G is_sum_of G1,G2;

A3: ( (the carrier of G1) /\ (the carrier of G2) ) = ( {} ) by A1,XBOOLE_0:def 7;
A4: ((the Source of G1) tolerates (the Source of G2) & (the Target of G1) tolerates (the Target of G2)) by A2,CKB9:def 1;
G = ( G1 \/ G2 ) by A2,CKB9:def 1;
then A5: ( (the carrier of G1) \/ (the carrier of G2) ) = V by A4,CKB8:def 1;
set x = the (Vertex of G1);
(x in (the carrier of G1) & x in V) by A5,XBOOLE_0:def 3;
then A6: 1 in (the carrier of G1) by TARSKI:def 1;
set y = the (Vertex of G2);
(y in (the carrier of G2) & y in V) by A5,XBOOLE_0:def 3;
then 1 in (the carrier of G2) by TARSKI:def 1;
hence contradiction by A3,A6,XBOOLE_0:def 4;
end;
hence thesis by CKB13:def 1;
end;
end;
