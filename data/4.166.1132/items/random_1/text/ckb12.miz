environ
vocabularies NUMBERS,XBOOLE_0,PROB_1,MEASURE1,PARTFUN1,SUBSET_1,REAL_1,INTEGRA5,TARSKI,RELAT_1,FUNCT_1,ARYTM_3,XXREAL_0,MEASURE6,MESFUNC5,FUNCT_3,VALUED_1,MESFUNC1,ARYTM_1,SUPINF_2,MESFUNC2,FINSEQ_1,NAT_1,CARD_3,CARD_1,MESFUNC3,INTEGRA1,ZFMISC_1,XXREAL_2,VALUED_0,SEQ_1,RPR_1,FINSET_1,UPROOTS,RFUNCT_3,PROB_4,XREAL_0,ORDINAL1,COMPLEX1,EQREL_1,SEQ_2,ORDINAL2,POWER,RANDOM_1,BSPACE;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,FINSET_1,CARD_1,NUMBERS,XREAL_0,XXREAL_0,REAL_1,COMPLEX1,XXREAL_2,FUNCT_1,RELSET_1,PARTFUN1,VALUED_1,FINSEQ_1,RFUNCT_3,FUNCT_2,NAT_1,SUPINF_2,SEQ_1,SEQ_2,RPR_1,PROB_1,PROB_4,MEASURE1,EXTREAL1,MESFUNC1,MESFUNC3,MEASURE6,MESFUNC5,MESFUNC6,MESFUNC2,RVSUM_1,UPROOTS,MESFUN6C,CKB10,CKB11;
definitions TARSKI,RPR_1,SUBSET_1,FINSEQ_1,MESFUNC1,MEASURE6,MESFUNC5,MESFUNC6,XCMPLX_0,PROB_4,VALUED_1,XBOOLE_0,XXREAL_3;
theorems ABSVALUE,TARSKI,PARTFUN1,FUNCT_1,NUMBERS,SUPINF_2,EXTREAL1,RPR_1,MESFUNC1,FINSEQ_1,XBOOLE_0,SEQM_3,RVSUM_1,XBOOLE_1,XCMPLX_1,MESFUNC2,MESFUNC3,XREAL_1,COMPLEX1,XXREAL_0,RFUNCT_3,MESFUNC5,PROB_1,NAT_1,RELAT_1,FUNCT_3,ZFMISC_1,FUNCT_2,MEASURE1,INTEGRA5,MESFUNC4,MESFUNC6,ORDINAL1,SEQ_2,CARD_FIN,MESFUNC7,VALUED_0,VALUED_1,UPROOTS,ABCMIZ_1,RCOMP_1,MESFUN6C,FINSEQ_3,XXREAL_3,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9;
schemes FINSEQ_1,FUNCT_2,FINSEQ_2;
registrations SUBSET_1,NAT_1,XREAL_0,XXREAL_0,TOPREAL6,MEMBERED,ORDINAL1,FINSEQ_1,MEASURE1,FUNCT_2,RELAT_1,SEQ_4,FINSET_1,NUMBERS,XCMPLX_0,VALUED_0,VALUED_1,UPROOTS,RELSET_1;
constructors REAL_1,RPR_1,NAT_3,EXTREAL1,SEQ_1,POWER,RVSUM_1,MESFUNC6,MESFUNC3,MESFUNC5,MEASURE6,MESFUNC2,BINOP_2,PARTFUN3,INTEGRA2,PROB_4,SUPINF_1,UPROOTS,MESFUN6C,MESFUNC1,DOMAIN_1,RELSET_1,CKB11;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve Omega for non  empty set;
theorem
Lm6: (for Omega being non  empty  finite set holds (for f being (PartFunc of Omega,( REAL )) holds (ex F being (Finite_Sep_Sequence of ( Trivial-SigmaField Omega )) st (((( dom f ) = ( union ( rng F ) ) & ( dom F ) = ( dom ( canFS ( dom f ) ) )) & (for k being Nat holds (k in ( dom F ) implies ( F . k ) = { ( ( canFS ( dom f ) ) . k ) }))) & (for n being Nat holds (for x,y being (Element of Omega) holds (((n in ( dom F ) & x in ( F . n )) & y in ( F . n )) implies ( f . x ) = ( f . y ))))))))
proof
let Omega being non  empty  finite set;
let f being (PartFunc of Omega,( REAL ));
set Sigma = ( Trivial-SigmaField Omega );
set D = ( dom f );
defpred P[ Nat,set ]
 means
$2 = { ( ( canFS D ) . $1 ) };
set L = ( len ( canFS D ) );
A1: (for k being Nat holds (k in ( Seg L ) implies (ex x being (Element of ( bool Omega )) st P[ k,x ])))
proof
let k being Nat;
assume A2: k in ( Seg L );
take { ( ( canFS D ) . k ) };
k in ( dom ( canFS D ) ) by A2,FINSEQ_1:def 3;
then ( ( canFS D ) . k ) in ( rng ( canFS D ) ) by FUNCT_1:3;
then ( ( canFS D ) . k ) in D;
hence thesis by ZFMISC_1:31;
end;
consider F being (FinSequence of ( bool Omega )) such that A3: (( dom F ) = ( Seg L ) & (for k being Nat holds (k in ( Seg L ) implies P[ k,( F . k ) ]))) from FINSEQ_1:sch 5(A1);
now
let i being Nat;
let j being Nat;
assume that
A4: (i in ( dom F ) & j in ( dom F ))
and
A5: i <> j;
(i in ( dom ( canFS D ) ) & j in ( dom ( canFS D ) )) by A3,A4,FINSEQ_1:def 3;
then A6: ( ( canFS D ) . i ) <> ( ( canFS D ) . j ) by A5,FUNCT_1:def 4;
(( F . i ) = { ( ( canFS D ) . i ) } & ( F . j ) = { ( ( canFS D ) . j ) }) by A3,A4;
hence ( F . i ) misses ( F . j ) by A6,ZFMISC_1:11;
end;
then reconsider F as (Finite_Sep_Sequence of Sigma) by MESFUNC3:4;
now
let x being set;
assume x in ( rng ( canFS D ) );
then consider n being set such that A7: n in ( dom ( canFS D ) ) and A8: x = ( ( canFS D ) . n ) by FUNCT_1:def 3;
A9: n in ( Seg L ) by A7,FINSEQ_1:def 3;
reconsider n as (Element of ( NAT )) by A7;
n in ( dom F ) by A3,A7,FINSEQ_1:def 3;
then A10: ( F . n ) in ( rng F ) by FUNCT_1:def 3;
x in { ( ( canFS D ) . n ) } by A8,TARSKI:def 1;
then x in ( F . n ) by A3,A9;
hence x in ( union ( rng F ) ) by A10,TARSKI:def 4;
end;
then A11: ( rng ( canFS D ) ) c= ( union ( rng F ) ) by TARSKI:def 3;
take F;
A12: (for n being Nat holds (for x,y being (Element of Omega) holds (((n in ( dom F ) & x in ( F . n )) & y in ( F . n )) implies ( f . x ) = ( f . y ))))
proof
let n being Nat;
let x being (Element of Omega);
let y being (Element of Omega);
assume that
A13: n in ( dom F )
and
A14: x in ( F . n )
and
A15: y in ( F . n );
A16: ( F . n ) = { ( ( canFS D ) . n ) } by A3,A13;
hence ( f . x ) = ( f . ( ( canFS D ) . n ) ) by A14,TARSKI:def 1
.= ( f . y ) by A15,A16,TARSKI:def 1;
end;
now
let x being set;
assume x in ( union ( rng F ) );
then consider y being set such that A17: x in y and A18: y in ( rng F ) by TARSKI:def 4;
consider n being set such that A19: n in ( dom F ) and A20: y = ( F . n ) by A18,FUNCT_1:def 3;
reconsider n as (Element of ( NAT )) by A19;
( F . n ) = { ( ( canFS D ) . n ) } by A3,A19;
then A21: x = ( ( canFS D ) . n ) by A17,A20,TARSKI:def 1;
n in ( dom ( canFS D ) ) by A3,A19,FINSEQ_1:def 3;
hence x in ( rng ( canFS D ) ) by A21,FUNCT_1:def 3;
end;
then ( union ( rng F ) ) c= ( rng ( canFS D ) ) by TARSKI:def 3;
then ( union ( rng F ) ) = ( rng ( canFS D ) ) by A11,XBOOLE_0:def 10;
hence thesis by A3,A12,FINSEQ_1:def 3,FUNCT_2:def 3;
end;
