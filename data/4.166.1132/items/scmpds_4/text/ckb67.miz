environ
vocabularies NUMBERS,SUBSET_1,AMI_1,SCMPDS_2,SCMFSA_7,CARD_1,FUNCOP_1,RELAT_1,FUNCT_1,NAT_1,ARYTM_3,XBOOLE_0,TARSKI,VALUED_1,SCMNORM,FSM_1,INT_1,FUNCT_4,GRAPHSP,AMI_3,AMI_2,STRUCT_0,SCMPDS_1,COMPLEX1,XXREAL_0,ARYTM_1,TURING_1,AMISTD_2,SCMFSA6B,MSUALG_1,CIRCUIT2,SCMPDS_4,ORDINAL1,PARTFUN1,SCMFSA6C,ORDINAL4,PBOOLE,FINSET_1,COMPOS_1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,CARD_1,FINSET_1,NUMBERS,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,AFINSQ_1,VALUED_1,FUNCT_4,FUNCT_7,INT_1,NAT_1,INT_2,XXREAL_0,PBOOLE,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMISTD_2,SCMPDS_1,SCMPDS_2,CKB10,CKB11,CKB12,CKB13,CKB14,CKB26,CKB27,CKB28,CKB29,CKB35,CKB36,CKB40;
definitions TARSKI,COMPOS_1,EXTPRO_1,FUNCT_7,XBOOLE_0,SCMPDS_2,FUNCOP_1,NAT_1,AFINSQ_1,FUNCT_4,AMISTD_2,MEMSTR_0,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28,CKB29,CKB35,CKB36,CKB40;
theorems NAT_1,TARSKI,FUNCT_4,FUNCT_1,ZFMISC_1,INT_1,RELAT_1,SCMPDS_2,AMI_2,FUNCT_2,FUNCT_7,SCMPDS_3,ENUMSET1,ABSVALUE,GRFUNC_1,XBOOLE_0,XBOOLE_1,XREAL_1,ORDINAL1,FUNCOP_1,VALUED_1,AFINSQ_1,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_2,PBOOLE,STRUCT_0,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB40,CKB57,CKB59,CKB61,CKB63,CKB65,CKB66;
schemes NAT_1,CLASSES1,CKB5;
registrations XBOOLE_0,SETFAM_1,FUNCT_1,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMPDS_2,AMI_2,FINSET_1,CARD_1,VALUED_1,FUNCT_4,RELAT_1,PRE_POLY,AFINSQ_1,COMPOS_1,ORDINAL5,EXTPRO_1,FUNCOP_1,FUNCT_7,SCMPDS_3,AMISTD_2,PBOOLE,MEMSTR_0,CKB31,CKB34,CKB39,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB58,CKB60,CKB62,CKB64;
constructors WELLORD2,XXREAL_0,INT_2,SCMPDS_1,SCMPDS_3,DOMAIN_1,RELSET_1,PRE_POLY,ORDINAL5,AMI_3,AMISTD_2,AMISTD_1,FUNCT_7,MEMSTR_0,CKB11,CKB12,CKB13,CKB14,CKB26,CKB27,CKB28,CKB29,CKB35,CKB36,CKB40;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve k for (Instruction of ( SCMPDS ));
reserve I for (Program of ( SCMPDS ));
reserve s1 for (State of ( SCMPDS ));
reserve s2 for (State of ( SCMPDS ));
theorem
(for P1,P2 being (Instruction-Sequence of ( SCMPDS )) holds (for s1 being ( 0 ) -started (State of ( SCMPDS )) holds (for J being  parahalting  shiftable (Program of ( SCMPDS )) holds (( stop J ) c= P1 implies (for n being (Element of ( NAT )) holds (((( Shift (( stop J ),n) ) c= P2 & ( IC s2 ) = n) & ( DataPart s1 ) = ( DataPart s2 )) implies (for i being (Element of ( NAT )) holds ((( ( IC ( Comput (P1,s1,i) ) ) + n ) = ( IC ( Comput (P2,s2,i) ) ) & ( CurInstr (P1,( Comput (P1,s1,i) )) ) = ( CurInstr (P2,( Comput (P2,s2,i) )) )) & ( DataPart ( Comput (P1,s1,i) ) ) = ( DataPart ( Comput (P2,s2,i) ) )))))))))
proof
let P1 being (Instruction-Sequence of ( SCMPDS ));
let P2 being (Instruction-Sequence of ( SCMPDS ));
let s1 being ( 0 ) -started (State of ( SCMPDS ));
let I being  parahalting  shiftable (Program of ( SCMPDS ));
set SI = ( stop I );
assume A1: SI c= P1;
let n being (Element of ( NAT ));
assume that
A2: ( Shift (SI,n) ) c= P2
and
A3: ( IC s2 ) = n
and
A4: ( DataPart s1 ) = ( DataPart s2 );
A5: ( 0 ) in ( dom SI ) by COMPOS_1:36;
then A6: ( ( 0 ) + n ) in ( dom ( Shift (SI,n) ) ) by VALUED_1:24;
defpred P[ Nat ]
 means
((( ( IC ( Comput (P1,s1,$1) ) ) + n ) = ( IC ( Comput (P2,s2,$1) ) ) & ( CurInstr (P1,( Comput (P1,s1,$1) )) ) = ( CurInstr (P2,( Comput (P2,s2,$1) )) )) & ( DataPart ( Comput (P1,s1,$1) ) ) = ( DataPart ( Comput (P2,s2,$1) ) ));
A7: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume A8: P[ k ];
reconsider m = ( IC ( Comput (P1,s1,k) ) ) as (Element of ( NAT ));
set i = ( CurInstr (P1,( Comput (P1,s1,k) )) );
A9: ( Comput (P1,s1,( k + 1 )) ) = ( Following (P1,( Comput (P1,s1,k) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P1,( Comput (P1,s1,k) )) ),( Comput (P1,s1,k) )) );
reconsider l = ( IC ( Comput (P1,s1,( k + 1 )) ) ) as (Element of ( NAT ));
A10: ( IC ( Comput (P1,s1,( k + 1 )) ) ) in ( dom SI ) by A1,CKB28:def 1;
then A11: ( l + n ) in ( dom ( Shift (SI,n) ) ) by VALUED_1:24;
A12: ( Comput (P2,s2,( k + 1 )) ) = ( Following (P2,( Comput (P2,s2,k) )) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P2,( Comput (P2,s2,k) )) ),( Comput (P2,s2,k) )) );
A13: ( IC ( Comput (P1,s1,k) ) ) in ( dom SI ) by A1,CKB28:def 1;
A14: i = ( P1 . ( IC ( Comput (P1,s1,k) ) ) ) by PBOOLE:143
.= ( SI . ( IC ( Comput (P1,s1,k) ) ) ) by A1,A13,GRFUNC_1:2;
then A15: (( InsCode i ) <> 1 & ( InsCode i ) <> 3) by A13,CKB36:def 1;
A16: i valid_at m by A13,A14,CKB36:def 1;
hence A17: ( ( IC ( Comput (P1,s1,( k + 1 )) ) ) + n ) = ( IC ( Comput (P2,s2,( k + 1 )) ) ) by A8,A9,A12,A15,CKB66:1;
( CurInstr (P1,( Comput (P1,s1,( k + 1 )) )) ) = ( P1 . l ) by PBOOLE:143
.= ( SI . l ) by A1,A10,GRFUNC_1:2;
hence ( CurInstr (P1,( Comput (P1,s1,( k + 1 )) )) ) = ( ( Shift (SI,n) ) . ( IC ( Comput (P2,s2,( k + 1 )) ) ) ) by A17,A10,VALUED_1:def 12
.= ( P2 . ( IC ( Comput (P2,s2,( k + 1 )) ) ) ) by A2,A17,A11,GRFUNC_1:2
.= ( CurInstr (P2,( Comput (P2,s2,( k + 1 )) )) ) by PBOOLE:143;
thus thesis by A8,A9,A12,A15,A16,CKB66:1;
end;
A18: ( P1 . ( IC s1 ) ) = ( P1 . ( 0 ) ) by MEMSTR_0:def 8
.= ( SI . ( 0 ) ) by A1,A5,GRFUNC_1:2;
let i being (Element of ( NAT ));
A19: ( DataPart ( Comput (P1,s1,( 0 )) ) ) = ( DataPart s2 ) by A4,EXTPRO_1:2
.= ( DataPart ( Comput (P2,s2,( 0 )) ) ) by EXTPRO_1:2;
A20: ( IC ( Comput (P1,s1,( 0 )) ) ) = ( IC s1 ) by EXTPRO_1:2
.= ( 0 ) by MEMSTR_0:def 8;
A21: ( Comput (P1,s1,( 0 )) ) = s1 by EXTPRO_1:2;
A22: ( Comput (P2,s2,( 0 )) ) = s2 by EXTPRO_1:2;
A23: ( P2 /. ( IC s2 ) ) = ( P2 . ( IC s2 ) ) by PBOOLE:143;
A24: ( P1 /. ( IC s1 ) ) = ( P1 . ( IC s1 ) ) by PBOOLE:143;
( CurInstr (P1,( Comput (P1,s1,( 0 )) )) ) = ( ( Shift (SI,n) ) . ( ( 0 ) + n ) ) by A5,A18,A24,A21,VALUED_1:def 12
.= ( CurInstr (P2,( Comput (P2,s2,( 0 )) )) ) by A22,A2,A3,A6,A23,GRFUNC_1:2;
then A25: P[ ( 0 ) ] by A3,A20,A19,EXTPRO_1:2;
(for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A25,A7);
hence thesis;
end;
