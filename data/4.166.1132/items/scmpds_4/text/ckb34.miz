environ
vocabularies NUMBERS,SUBSET_1,AMI_1,SCMPDS_2,SCMFSA_7,CARD_1,FUNCOP_1,RELAT_1,FUNCT_1,NAT_1,ARYTM_3,XBOOLE_0,TARSKI,VALUED_1,SCMNORM,FSM_1,INT_1,FUNCT_4,GRAPHSP,AMI_3,AMI_2,STRUCT_0,SCMPDS_1,COMPLEX1,XXREAL_0,ARYTM_1,TURING_1,AMISTD_2,SCMFSA6B,MSUALG_1,CIRCUIT2,SCMPDS_4,ORDINAL1,PARTFUN1,SCMFSA6C,ORDINAL4,PBOOLE,FINSET_1,COMPOS_1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,CARD_1,FINSET_1,NUMBERS,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,AFINSQ_1,VALUED_1,FUNCT_4,FUNCT_7,INT_1,NAT_1,INT_2,XXREAL_0,PBOOLE,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_2,AMISTD_2,SCMPDS_1,SCMPDS_2,CKB10,CKB11,CKB12,CKB13,CKB14,CKB26,CKB27,CKB28,CKB29;
definitions TARSKI,COMPOS_1,EXTPRO_1,FUNCT_7,XBOOLE_0,SCMPDS_2,FUNCOP_1,NAT_1,AFINSQ_1,FUNCT_4,AMISTD_2,MEMSTR_0,CKB11,CKB12,CKB13,CKB14,CKB27,CKB28,CKB29;
theorems NAT_1,TARSKI,FUNCT_4,FUNCT_1,ZFMISC_1,INT_1,RELAT_1,SCMPDS_2,AMI_2,FUNCT_2,FUNCT_7,SCMPDS_3,ENUMSET1,ABSVALUE,GRFUNC_1,XBOOLE_0,XBOOLE_1,XREAL_1,ORDINAL1,FUNCOP_1,VALUED_1,AFINSQ_1,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_2,PBOOLE,STRUCT_0,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB27,CKB28,CKB29,CKB30,CKB32,CKB33;
schemes NAT_1,CLASSES1,CKB5;
registrations XBOOLE_0,SETFAM_1,FUNCT_1,ORDINAL1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,SCMPDS_2,AMI_2,FINSET_1,CARD_1,VALUED_1,FUNCT_4,RELAT_1,PRE_POLY,AFINSQ_1,COMPOS_1,ORDINAL5,EXTPRO_1,FUNCOP_1,FUNCT_7,SCMPDS_3,AMISTD_2,PBOOLE,MEMSTR_0,CKB31;
constructors WELLORD2,XXREAL_0,INT_2,SCMPDS_1,SCMPDS_3,DOMAIN_1,RELSET_1,PRE_POLY,ORDINAL5,AMI_3,AMISTD_2,AMISTD_1,FUNCT_7,MEMSTR_0,CKB11,CKB12,CKB13,CKB14,CKB26,CKB27,CKB28,CKB29;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve m for (Element of ( NAT ));
registration
cluster  parahalting ->  paraclosed for (Program of ( SCMPDS ));
coherence
proof
let I being (Program of ( SCMPDS ));
assume A1: I is  parahalting;
let s being ( 0 ) -started (State of ( SCMPDS ));
let n being (Element of ( NAT ));
let P being (Instruction-Sequence of ( SCMPDS ));
defpred X[ Nat ]
 means
(not ( IC ( Comput (P,s,$1) ) ) in ( dom ( stop I ) ));
assume A2: ( stop I ) c= P;
assume (not ( IC ( Comput (P,s,n) ) ) in ( dom ( stop I ) ));
then A3: (ex n being Nat st X[ n ]);
consider n being Nat such that A4: X[ n ] and A5: (for m being Nat holds (X[ m ] implies n <= m)) from NAT_1:sch 5(A3);
reconsider n as (Element of ( NAT )) by ORDINAL1:def 12;
A6: (for m holds (m < n implies ( IC ( Comput (P,s,m) ) ) in ( dom ( stop I ) ))) by A5;
set s2 = ( Comput (P,s,n) );
set Ig = ( (( IC s2 ),( succ ( IC s2 ) )) --> (( goto 1 ),( goto ( - 1 ) )) );
reconsider P0 = ( P +* Ig ) as (Instruction-Sequence of ( SCMPDS ));
reconsider P3 = ( P +* (( IC s2 ),( goto 1 )) ) as (Instruction-Sequence of ( SCMPDS ));
reconsider P2 = ( P3 +* (( succ ( IC s2 ) ),( goto ( - 1 ) )) ) as (Instruction-Sequence of ( SCMPDS ));
reconsider P4 = ( P3 +* (( succ ( IC s2 ) ),( goto ( - 1 ) )) ) as (Instruction-Sequence of ( SCMPDS ));
U: P0 = P4 by FUNCT_7:139;
A9: (not ( succ ( IC s2 ) ) in ( dom ( stop I ) )) by A4,AFINSQ_1:73;
( stop I ) c= P3 by A2,A4,FUNCT_7:89;
then ( stop I ) c= P4 by A9,FUNCT_7:89;
then A13: ( stop I ) c= P0 by U;
then ( Comput (P0,s,n) ) = s2 by A2,A6,CKB33:1;
then XX: ( Comput (P0,s,n) ) = s2;
A15: (not P0 halts_on s2) by CKB32:1;
P0 halts_on s by A1,A13,CKB29:def 1;
then P0 halts_on ( Comput (P0,s,n) ) by EXTPRO_1:22;
then P0 halts_on s2 by XX;
hence contradiction by A15;
end;
end;
