environ
vocabularies NAT_1,XBOOLE_0,ALGSTR_0,VECTSP_1,FINSEQ_1,ORDINAL4,RELAT_1,ARYTM_3,PARTFUN1,XXREAL_0,CARD_1,FUNCT_1,SQUARE_1,O_RING_1;
notations NAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,NUMBERS,STRUCT_0,ALGSTR_0,VECTSP_1,XXREAL_0,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
definitions CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
theorems NAT_1,FINSEQ_1,FINSEQ_3,XREAL_1,FINSEQ_4,XXREAL_0,PARTFUN1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
schemes NAT_1;
registrations RELSET_1,XREAL_0,STRUCT_0,VECTSP_1,ORDINAL1,FINSEQ_1;
constructors RLVECT_1,PARTFUN1,XXREAL_0,NAT_1,VECTSP_1,RELSET_1,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve R for non  empty doubleLoopStr;
reserve x for (Scalar of R);
theorem
Lm11: (x is  being_a_square implies x is  being_a_sum_of_products_of_squares)
proof
assume x is  being_a_square;
then A1: <* x *> is  being_a_Sum_of_products_of_squares by CKB18:1;
(( len <* x *> ) = 1 & ( <* x *> /. 1 ) = x) by CKB2:1;
hence thesis by A1,CKB17:def 1;
end;
