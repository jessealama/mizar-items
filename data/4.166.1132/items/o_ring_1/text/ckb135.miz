environ
vocabularies NAT_1,XBOOLE_0,ALGSTR_0,VECTSP_1,FINSEQ_1,ORDINAL4,RELAT_1,ARYTM_3,PARTFUN1,XXREAL_0,CARD_1,FUNCT_1,SQUARE_1,O_RING_1;
notations NAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,NUMBERS,STRUCT_0,ALGSTR_0,VECTSP_1,XXREAL_0,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17,CKB24,CKB25,CKB30,CKB31,CKB42,CKB43;
definitions CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17,CKB24,CKB25,CKB30,CKB31,CKB42,CKB43;
theorems NAT_1,FINSEQ_1,FINSEQ_3,XREAL_1,FINSEQ_4,XXREAL_0,PARTFUN1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112,CKB113,CKB114,CKB115,CKB116,CKB117,CKB118,CKB119,CKB120,CKB121,CKB122,CKB123,CKB124,CKB125,CKB126,CKB127,CKB128,CKB129,CKB130,CKB131,CKB132,CKB133,CKB134;
schemes NAT_1;
registrations RELSET_1,XREAL_0,STRUCT_0,VECTSP_1,ORDINAL1,FINSEQ_1;
constructors RLVECT_1,PARTFUN1,XXREAL_0,NAT_1,VECTSP_1,RELSET_1,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17,CKB24,CKB25,CKB30,CKB31,CKB42,CKB43;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve n for Nat;
reserve R for non  empty doubleLoopStr;
reserve x for (Scalar of R);
reserve y for (Scalar of R);
reserve f for (FinSequence of R);
theorem
Lm83: ((f is  being_a_Product_of_squares & x is  being_a_square) implies ( f ^ <* ( ( f /. ( len f ) ) * x ) *> ) is  being_a_Product_of_squares)
proof
assume that
A1: f is  being_a_Product_of_squares
and
A2: x is  being_a_square;
set g = ( f ^ <* ( ( f /. ( len f ) ) * x ) *> );
A3: ( len g ) = ( ( len f ) + ( len <* ( ( f /. ( len f ) ) * x ) *> ) ) by FINSEQ_1:22
.= ( ( len f ) + 1 ) by CKB2:1;
A4: (for n holds ((n <> ( 0 ) & n < ( len g )) implies ( f /. n ) = ( g /. n )))
proof
let n;
assume (n <> ( 0 ) & n < ( len g ));
then (1 <= n & n <= ( len f )) by A3,NAT_1:13,NAT_1:25;
then n in ( dom f ) by FINSEQ_3:25;
hence thesis by CKB1:1;
end;
A5: (for n holds ((n <> ( 0 ) & n < ( len g )) implies (ex y st (y is  being_a_square & ( g /. ( n + 1 ) ) = ( ( g /. n ) * y )))))
proof
let n;
assume that
A6: n <> ( 0 )
and
A7: n < ( len g );
A8:now
A9: ( f /. n ) = ( g /. n ) by A4,A6,A7;
assume A10: n < ( len f );
then (( n + 1 ) <> ( 0 ) & ( n + 1 ) < ( len g )) by A3,NAT_1:5,XREAL_1:6;
then ( f /. ( n + 1 ) ) = ( g /. ( n + 1 ) ) by A4;
hence thesis by A1,A6,A10,A9,CKB12:def 1;
end;
A11:now
assume A12: n = ( len f );
1 <= n by A6,NAT_1:25;
then A13: n in ( dom f ) by A12,FINSEQ_3:25;
( g /. ( n + 1 ) ) = ( ( f /. n ) * x ) by A12,CKB3:1;
then ( g /. ( n + 1 ) ) = ( ( g /. n ) * x ) by A13,CKB1:1;
hence thesis by A2;
end;
n <= ( len f ) by A3,A7,NAT_1:13;
hence thesis by A8,A11,XXREAL_0:1;
end;
( len f ) <> ( 0 ) by A1,CKB12:def 1;
then 1 <= ( len f ) by NAT_1:25;
then 1 < ( len g ) by A3,NAT_1:13;
then ( g /. 1 ) = ( f /. 1 ) by A4;
then A14: ( g /. 1 ) is  being_a_square by A1,CKB12:def 1;
( len g ) <> ( 0 ) by A3,NAT_1:5;
hence thesis by A14,A5,CKB12:def 1;
end;
