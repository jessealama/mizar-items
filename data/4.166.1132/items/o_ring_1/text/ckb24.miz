environ
vocabularies NAT_1,XBOOLE_0,ALGSTR_0,VECTSP_1,FINSEQ_1,ORDINAL4,RELAT_1,ARYTM_3,PARTFUN1,XXREAL_0,CARD_1,FUNCT_1,SQUARE_1,O_RING_1;
notations NAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,NUMBERS,STRUCT_0,ALGSTR_0,VECTSP_1,XXREAL_0,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
definitions CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
theorems NAT_1,FINSEQ_1,FINSEQ_3,XREAL_1,FINSEQ_4,XXREAL_0,PARTFUN1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23;
schemes NAT_1;
registrations RELSET_1,XREAL_0,STRUCT_0,VECTSP_1,ORDINAL1,FINSEQ_1;
constructors RLVECT_1,PARTFUN1,XXREAL_0,NAT_1,VECTSP_1,RELSET_1,CKB6,CKB7,CKB8,CKB9,CKB12,CKB13,CKB16,CKB17;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve i for Nat;
reserve j for Nat;
reserve n for Nat;
reserve R for non  empty doubleLoopStr;
reserve f for (FinSequence of R);
definition
let R;
let f;
attr f is  being_an_Amalgam_of_squares
means
:Def10: (( len f ) <> ( 0 ) & (for n holds ((n <> ( 0 ) & n <= ( len f )) implies (( f /. n ) is  being_a_product_of_squares or (ex i st (ex j st ((((( f /. n ) = ( ( f /. i ) * ( f /. j ) ) & i <> ( 0 )) & i < n) & j <> ( 0 )) & j < n)))))));
end;
