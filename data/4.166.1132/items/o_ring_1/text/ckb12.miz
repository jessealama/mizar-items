environ
vocabularies NAT_1,XBOOLE_0,ALGSTR_0,VECTSP_1,FINSEQ_1,ORDINAL4,RELAT_1,ARYTM_3,PARTFUN1,XXREAL_0,CARD_1,FUNCT_1,SQUARE_1,O_RING_1;
notations NAT_1,FUNCT_1,FINSEQ_1,PARTFUN1,NUMBERS,STRUCT_0,ALGSTR_0,VECTSP_1,XXREAL_0,CKB6,CKB7,CKB8,CKB9;
definitions CKB6,CKB7,CKB8,CKB9;
theorems NAT_1,FINSEQ_1,FINSEQ_3,XREAL_1,FINSEQ_4,XXREAL_0,PARTFUN1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11;
schemes NAT_1;
registrations RELSET_1,XREAL_0,STRUCT_0,VECTSP_1,ORDINAL1,FINSEQ_1;
constructors RLVECT_1,PARTFUN1,XXREAL_0,NAT_1,VECTSP_1,RELSET_1,CKB6,CKB7,CKB8,CKB9;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
reserve n for Nat;
reserve R for non  empty doubleLoopStr;
reserve y for (Scalar of R);
reserve f for (FinSequence of R);
definition
let R;
let f;
attr f is  being_a_Product_of_squares
means
:Def6: ((( len f ) <> ( 0 ) & ( f /. 1 ) is  being_a_square) & (for n holds ((n <> ( 0 ) & n < ( len f )) implies (ex y st (y is  being_a_square & ( f /. ( n + 1 ) ) = ( ( f /. n ) * y ))))));
end;
