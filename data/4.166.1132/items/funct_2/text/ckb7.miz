environ
vocabularies RELAT_1,XBOOLE_0,PARTFUN1,FUNCT_1,TARSKI,SUBSET_1,ZFMISC_1,RELAT_2,MCART_1,SETFAM_1,FUNCT_2,GROUP_9;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,MCART_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,PARTFUN1,CKB1,CKB4;
definitions TARSKI,XBOOLE_0,PARTFUN1,FUNCT_1,SUBSET_1,CKB1;
theorems TARSKI,RELAT_1,FUNCT_1,ZFMISC_1,PARTFUN1,GRFUNC_1,RELSET_1,SUBSET_1,XBOOLE_0,XBOOLE_1,RELAT_2,MCART_1,SETFAM_1,CKB1,CKB5,CKB6;
schemes FUNCT_1,PARTFUN1,XBOOLE_0,RELSET_1,SUBSET_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,RELSET_1,GRFUNC_1,CKB2,CKB3;
constructors RELAT_2,PARTFUN1,MCART_1,SETFAM_1,RELSET_1,CKB1;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve x for set;
reserve y for set;
theorem
(for f being Function holds ((( dom f ) = X & (for x holds (x in X implies ( f . x ) in Y))) implies f is (Function of X,Y)))
proof
let f being Function;
assume that
A1: ( dom f ) = X
and
A2: (for x holds (x in X implies ( f . x ) in Y));
( rng f ) c= Y
proof
let y;
assume y in ( rng f );
then (ex x st (x in X & y = ( f . x ))) by A1,FUNCT_1:def 3;
hence thesis by A2;
end;
then reconsider R = f as (Relation of ( dom f ),Y) by RELSET_1:4;
R is  quasi_total
proof
per cases ;
case (Y = ( {} ) implies ( dom f ) = ( {} ));
thus thesis;
end;
case that A3: Y = ( {} )
and
( dom f ) <> ( {} );
thus thesis by A3;
end;
end;
hence thesis by A1;
end;
