environ
vocabularies RELAT_1,XBOOLE_0,PARTFUN1,FUNCT_1,TARSKI,SUBSET_1,ZFMISC_1,RELAT_2,MCART_1,SETFAM_1,FUNCT_2,GROUP_9;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,MCART_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,PARTFUN1,CKB1,CKB4,CKB14;
definitions TARSKI,XBOOLE_0,PARTFUN1,FUNCT_1,SUBSET_1,CKB1,CKB14;
theorems TARSKI,RELAT_1,FUNCT_1,ZFMISC_1,PARTFUN1,GRFUNC_1,RELSET_1,SUBSET_1,XBOOLE_0,XBOOLE_1,RELAT_2,MCART_1,SETFAM_1,CKB1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB14,CKB15,CKB16,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
schemes FUNCT_1,PARTFUN1,XBOOLE_0,RELSET_1,SUBSET_1,CKB12,CKB13;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,RELSET_1,GRFUNC_1,CKB2,CKB3,CKB17,CKB18,CKB19;
constructors RELAT_2,PARTFUN1,MCART_1,SETFAM_1,RELSET_1,CKB1,CKB14;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve Z for set;
theorem
(for f being (Function of X,Y) holds ((X <> ( {} ) & Y <> ( {} )) implies (f is  one-to-one iff (for Z holds (for g,h being (Function of Z,X) holds (( f * g ) = ( f * h ) implies g = h))))))
proof
let f being (Function of X,Y);
assume that
A1: X <> ( {} )
and
A2: Y <> ( {} );
A3: ( dom f ) = X by A2,CKB1:def 1;
thus (f is  one-to-one implies (for Z holds (for g,h being (Function of Z,X) holds (( f * g ) = ( f * h ) implies g = h))))
proof
assume A4: f is  one-to-one;
let Z;
let g being (Function of Z,X),h being (Function of Z,X);
A5: (( rng g ) c= X & ( rng h ) c= X);
(( dom g ) = Z & ( dom h ) = Z) by A1,CKB1:def 1;
hence thesis by A3,A4,A5,FUNCT_1:27;
end;

assume A6: (for Z holds (for g,h being (Function of Z,X) holds (( f * g ) = ( f * h ) implies g = h)));
now
let g being Function,h being Function;
assume ((( rng g ) c= ( dom f ) & ( rng h ) c= ( dom f )) & ( dom g ) = ( dom h ));
then (g is (Function of ( dom g ),X) & h is (Function of ( dom g ),X)) by A3,CKB6:1;
hence (( f * g ) = ( f * h ) implies g = h) by A6;
end;
hence thesis by FUNCT_1:27;
end;
