environ
vocabularies NUMBERS,REAL_1,XREAL_0,ORDINAL1,LIMFUNC1,XBOOLE_0,XXREAL_0,CARD_1,ARYTM_3,POWER,RELAT_1,PREPOWER,ARYTM_1,PARTFUN1,FUNCT_1,FDIFF_1,VALUED_1,SUBSET_1,TARSKI,XXREAL_1,ORDINAL2,SEQ_1,SERIES_1,VALUED_0,COMPLEX1,SEQ_2,XXREAL_2,NAT_1,FUNCT_2,FCONT_1,CARD_3;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,PARTFUN1,FUNCT_2,LIMFUNC1,RCOMP_1,FCONT_1,XXREAL_0,XREAL_0,COMPLEX1,ORDINAL1,NUMBERS,REAL_1,NAT_1,VALUED_0,VALUED_1,SEQ_1,SEQ_2,SERIES_1,FDIFF_1,PREPOWER,POWER,TAYLOR_1,RECDEF_1;
definitions SUBSET_1,LIMFUNC1;
theorems XBOOLE_1,ABSVALUE,TARSKI,XBOOLE_0,XREAL_0,XCMPLX_1,RCOMP_1,SEQ_1,SEQ_2,SEQM_3,SERIES_1,FUNCT_1,NAT_1,POWER,FCONT_1,FDIFF_1,ROLLE,SEQ_4,PREPOWER,RELSET_1,FUNCT_2,TAYLOR_1,XREAL_1,COMPLEX1,XXREAL_0,PARTFUN1,ORDINAL1,VALUED_1,XXREAL_1,VALUED_0,RELAT_1,CKB2,CKB3,CKB4,CKB5;
schemes SEQ_1,RECDEF_1,NAT_1,PARTFUN2;
registrations XBOOLE_0,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,MEMBERED,RCOMP_1,VALUED_0,VALUED_1,FUNCT_2,SEQ_2,SEQ_4,FCONT_3,CKB1;
constructors PARTFUN1,REAL_1,NAT_1,INT_2,SEQ_2,SEQM_3,RCOMP_1,RFUNCT_2,FCONT_1,LIMFUNC1,FDIFF_1,PREPOWER,SERIES_1,TAYLOR_1,SEQ_1,VALUED_1,RECDEF_1,RELSET_1;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
reserve a for Real;
reserve b for Real;
reserve p for Real;
reserve q for Real;
theorem
Th5: ((((1 < p & ( ( 1 / p ) + ( 1 / q ) ) = 1) & ( 0 ) <= a) & ( 0 ) <= b) implies (( a * b ) <= ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) & (( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) iff ( a to_power p ) = ( b to_power q ))))
proof
assume that
A1: 1 < p
and
A2: ( ( 1 / p ) + ( 1 / q ) ) = 1
and
A3: ( 0 ) <= a
and
A4: ( 0 ) <= b;
A5: ( 0 ) <= ( ( a to_power p ) / p )
proof
now
per cases  by A3;
case ( 0 ) < a;
then ( 0 ) < ( a to_power p ) by POWER:34;
hence thesis by A1;
end;
case ( 0 ) = a;
then ( 0 ) = ( a to_power p ) by A1,POWER:def 2;
hence thesis;
end;
end;
hence thesis;
end;
reconsider pp = ( 1 / p ) as Real;
( 1 / p ) < 1 by A1,XREAL_1:189;
then A6: ( 1 - 1 ) < ( 1 - pp ) by XREAL_1:15;
then A7: ( 0 ) < q by A2;
A8: ( 0 ) <= ( ( b to_power q ) / q )
proof
now
per cases  by A4;
case ( 0 ) < b;
then ( 0 ) < ( b to_power q ) by POWER:34;
hence thesis by A7;
end;
case ( 0 ) = b;
then ( 0 ) = ( b to_power q ) by A7,POWER:def 2;
hence thesis;
end;
end;
hence thesis;
end;
now
per cases ;
case A9: ( a * b ) = ( 0 );
now
per cases  by A9,XCMPLX_1:6;
case A10: a = ( 0 );
A11:now
assume ( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) );
then ( 0 ) = ( ( ( 0 ) / p ) + ( ( b to_power q ) / q ) ) by A1,A10,POWER:def 2;
then ( ( 0 ) * q ) = ( ( ( b to_power q ) / q ) * q );
then ( 0 ) = ( b to_power q ) by A7,XCMPLX_1:87;
then A12: ( 0 ) = ( ( b to_power q ) to_power ( 1 / q ) ) by A2,A6,POWER:def 2;
A13: ( 0 ) = b
proof
assume A14: b <> ( 0 );
then ( 0 ) = ( b to_power ( q * ( 1 / q ) ) ) by A4,A12,POWER:33;
then ( 0 ) = ( b to_power 1 ) by A7,XCMPLX_1:106;
hence contradiction by A14,POWER:25;
end;
thus ( a to_power p ) = ( 0 ) by A1,A10,POWER:def 2
.= ( b to_power q ) by A7,A13,POWER:def 2;
end;
now
assume ( a to_power p ) = ( b to_power q );
then A15: ( ( b to_power q ) / q ) = ( ( 0 ) / q ) by A1,A10,POWER:def 2
.= ( 0 );
( ( a to_power p ) / p ) = ( ( 0 ) / p ) by A1,A10,POWER:def 2
.= ( 0 );
hence ( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) by A9,A15;
end;
hence (( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) iff ( a to_power p ) = ( b to_power q )) by A11;
end;
case A16: b = ( 0 );
A17: ( 1 / p ) > ( 0 ) by A1,XREAL_1:139;
A18:now
assume ( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) );
then ( 0 ) = ( ( ( 0 ) / q ) + ( ( a to_power p ) / p ) ) by A7,A16,POWER:def 2;
then ( ( 0 ) * p ) = ( ( ( a to_power p ) / p ) * p );
then ( 0 ) = ( a to_power p ) by A1,XCMPLX_1:87;
then A19: ( 0 ) = ( ( a to_power p ) to_power ( 1 / p ) ) by A17,POWER:def 2;
A20: ( 0 ) = a
proof
assume A21: a <> ( 0 );
then ( 0 ) = ( a to_power ( p * ( 1 / p ) ) ) by A3,A19,POWER:33;
then ( 0 ) = ( a to_power 1 ) by A1,XCMPLX_1:106;
hence contradiction by A21,POWER:25;
end;
thus ( b to_power q ) = ( 0 ) by A7,A16,POWER:def 2
.= ( a to_power p ) by A1,A20,POWER:def 2;
end;
now
assume ( a to_power p ) = ( b to_power q );
then A22: ( ( a to_power p ) / p ) = ( ( 0 ) / p ) by A7,A16,POWER:def 2
.= ( 0 );
( ( b to_power q ) / q ) = ( ( 0 ) / q ) by A7,A16,POWER:def 2
.= ( 0 );
hence ( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) by A9,A22;
end;
hence (( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b to_power q ) / q ) ) iff ( a to_power p ) = ( b to_power q )) by A18;
end;
end;
hence thesis by A5,A8;
end;
case A23: ( a * b ) <> ( 0 );
then A24: a <> ( 0 );
A25: b <> ( 0 ) by A23;
then (( a * b ) = ( ( ( a #R p ) / p ) + ( ( b #R q ) / q ) ) iff ( a #R p ) = ( b #R q )) by A1,A2,A3,A4,A24,CKB5:1;
then A26: (( a * b ) = ( ( ( a to_power p ) / p ) + ( ( b #R q ) / q ) ) iff ( a to_power p ) = ( b #R q )) by A3,A24,POWER:def 2;
( a * b ) <= ( ( ( a #R p ) / p ) + ( ( b #R q ) / q ) ) by A1,A2,A3,A4,A24,A25,CKB5:1;
then ( a * b ) <= ( ( ( a to_power p ) / p ) + ( ( b #R q ) / q ) ) by A3,A24,POWER:def 2;
hence thesis by A4,A25,A26,POWER:def 2;
end;
end;
hence thesis;
end;
