environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,NAT_1,RELAT_1,ARYTM_3,TARSKI,ORDINAL4,PARTFUN1,XXREAL_0,FUNCT_1,SUBSET_1,STRUCT_0,BINOP_1,VECTSP_1,LATTICES,SUPINF_2,ARYTM_1,GROUP_1,CARD_1,MESFUNC1,COMPLFLD,COMPLEX1,CARD_3,POLYNOM1,POLYNOM3,SGRAPH1,INT_1,ALGSEQ_1,VECTSP_2,POLYNOM5,AFINSQ_1,POLYNOM2,FUNCT_4,FUNCOP_1,XCMPLX_0,SQUARE_1,HURWITZ;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,NUMBERS,XCMPLX_0,ALGSTR_0,VECTSP_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NAT_1,NAT_D,XXREAL_0,FINSEQ_1,INT_1,FUNCOP_1,STRUCT_0,RLVECT_1,VFUNCT_1,GROUP_1,POLYNOM1,COMPLEX1,COMPLFLD,BINOP_1,NORMSP_1,BHSP_1,ALGSEQ_1,FUNCT_4,POLYNOM3,POLYNOM4,POLYNOM5,VECTSP_1,SQUARE_1;
definitions FINSEQ_1,POLYNOM3,COMPLEX1,SQUARE_1,FUNCOP_1;
theorems GROUP_1,VECTSP_1,ALGSEQ_1,NAT_1,FUNCT_1,FUNCT_2,XREAL_1,SQUARE_1,VECTSP_2,INT_1,FINSEQ_1,RLVECT_1,POLYNOM4,TARSKI,FUNCT_4,POLYNOM3,XBOOLE_1,POLYNOM2,FUNCOP_1,XCMPLX_1,XCMPLX_0,COMPLFLD,POLYNOM5,XXREAL_0,ALGSTR_1,COMPLEX1,FINSEQ_2,POLYNOM1,FINSEQ_3,BHSP_1,NORMSP_1,ORDINAL1,PARTFUN1,XREAL_0,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10;
schemes NAT_1,FUNCT_2,FINSEQ_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,INT_1,MEMBERED,FINSEQ_1,STRUCT_0,VECTSP_1,COMPLFLD,ALGSTR_1,GCD_1,POLYNOM3,POLYNOM4,POLYNOM5,FUNCOP_1,CARD_1,VFUNCT_1,FUNCT_2;
constructors BINOP_1,REAL_1,SQUARE_1,FINSOP_1,BINARITH,VECTSP_2,ALGSTR_1,BHSP_1,POLYNOM1,POLYNOM4,POLYNOM5,SEQ_1,BINOP_2,NAT_D,RELSET_1,FVSUM_1,VFUNCT_1;
requirements NUMERALS,SUBSET,REAL,BOOLE,ARITHM;
begin
theorem
Th8: (for L being  add-associative  right_zeroed  right_complementable  distributive non empty doubleLoopStr holds (for x being (Element of L) holds (for F being (FinSequence of L) holds ( x * ( Sum F ) ) = ( Sum ( x * F ) ))))
proof
let L being  add-associative  right_zeroed  right_complementable  distributive non empty doubleLoopStr;
let x being (Element of L);
let F being (FinSequence of L);
defpred P[ Nat ]
 means
(for x being (Element of L) holds (for F being (FinSequence of L) holds (( len F ) = $1 implies ( x * ( Sum F ) ) = ( Sum ( x * F ) ))));
A1: (ex n being (Element of ( NAT )) st ( len F ) = n);
A2:now
let k being (Element of ( NAT ));
assume A3: P[ k ];
now
let x being (Element of L);
let F being (FinSequence of L);
set G = ( F | ( Seg k ) );
reconsider G as FinSequence by FINSEQ_1:15;
assume A4: ( len F ) = ( k + 1 );
then reconsider G as (FinSequence of L) by CKB1:1;
A5: ( len G ) = k by A4,CKB1:1;
A6: F = ( G ^ <* ( F /. ( k + 1 ) ) *> ) by A4,CKB1:1;
thus ( x * ( Sum F ) ) = ( x * ( Sum ( G ^ <* ( F /. ( k + 1 ) ) *> ) ) ) by A4,CKB1:1
.= ( x * ( ( Sum G ) + ( Sum <* ( F /. ( k + 1 ) ) *> ) ) ) by RLVECT_1:41
.= ( ( x * ( Sum G ) ) + ( x * ( Sum <* ( F /. ( k + 1 ) ) *> ) ) ) by VECTSP_1:def 2
.= ( ( Sum ( x * G ) ) + ( x * ( Sum <* ( F /. ( k + 1 ) ) *> ) ) ) by A3,A5
.= ( ( Sum ( x * G ) ) + ( x * ( F /. ( k + 1 ) ) ) ) by RLVECT_1:44
.= ( ( Sum ( x * G ) ) + ( Sum <* ( x * ( F /. ( k + 1 ) ) ) *> ) ) by RLVECT_1:44
.= ( ( Sum ( x * G ) ) + ( Sum ( x * <* ( F /. ( k + 1 ) ) *> ) ) ) by POLYNOM1:8
.= ( Sum ( ( x * G ) ^ ( x * <* ( F /. ( k + 1 ) ) *> ) ) ) by RLVECT_1:41
.= ( Sum ( x * F ) ) by A6,POLYNOM1:10;
end;
hence P[ ( k + 1 ) ];
end;
now
let x being (Element of L);
let F being (FinSequence of L);
assume A7: ( len F ) = ( 0 );
( Seg ( len ( x * F ) ) ) = ( dom ( x * F ) ) by FINSEQ_1:def 3
.= ( dom F ) by POLYNOM1:def 1
.= ( Seg ( len F ) ) by FINSEQ_1:def 3;
then ( len ( x * F ) ) = ( 0 ) by A7;
then A8: ( x * F ) = ( <*> (the carrier of L) );
F = ( <*> (the carrier of L) ) by A7;
then ( Sum F ) = ( 0. L ) by RLVECT_1:43;
then ( x * ( Sum F ) ) = ( 0. L ) by VECTSP_1:6;
hence ( x * ( Sum F ) ) = ( Sum ( x * F ) ) by A8,RLVECT_1:43;
end;
then A9: P[ ( 0 ) ];
(for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A9,A2);
hence thesis by A1;
end;
