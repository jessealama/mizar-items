environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,NAT_1,RELAT_1,ARYTM_3,TARSKI,ORDINAL4,PARTFUN1,XXREAL_0,FUNCT_1,SUBSET_1,STRUCT_0,BINOP_1,VECTSP_1,LATTICES,SUPINF_2,ARYTM_1,GROUP_1,CARD_1,MESFUNC1,COMPLFLD,COMPLEX1,CARD_3,POLYNOM1,POLYNOM3,SGRAPH1,INT_1,ALGSEQ_1,VECTSP_2,POLYNOM5,AFINSQ_1,POLYNOM2,FUNCT_4,FUNCOP_1,XCMPLX_0,SQUARE_1,HURWITZ;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,NUMBERS,XCMPLX_0,ALGSTR_0,VECTSP_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NAT_1,NAT_D,XXREAL_0,FINSEQ_1,INT_1,FUNCOP_1,STRUCT_0,RLVECT_1,VFUNCT_1,GROUP_1,POLYNOM1,COMPLEX1,COMPLFLD,BINOP_1,NORMSP_1,BHSP_1,ALGSEQ_1,FUNCT_4,POLYNOM3,POLYNOM4,POLYNOM5,VECTSP_1,SQUARE_1,CKB18,CKB27,CKB28,CKB40;
definitions FINSEQ_1,POLYNOM3,COMPLEX1,SQUARE_1,FUNCOP_1,CKB18,CKB27,CKB40;
theorems GROUP_1,VECTSP_1,ALGSEQ_1,NAT_1,FUNCT_1,FUNCT_2,XREAL_1,SQUARE_1,VECTSP_2,INT_1,FINSEQ_1,RLVECT_1,POLYNOM4,TARSKI,FUNCT_4,POLYNOM3,XBOOLE_1,POLYNOM2,FUNCOP_1,XCMPLX_1,XCMPLX_0,COMPLFLD,POLYNOM5,XXREAL_0,ALGSTR_1,COMPLEX1,FINSEQ_2,POLYNOM1,FINSEQ_3,BHSP_1,NORMSP_1,ORDINAL1,PARTFUN1,XREAL_0,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46;
schemes NAT_1,FUNCT_2,FINSEQ_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,INT_1,MEMBERED,FINSEQ_1,STRUCT_0,VECTSP_1,COMPLFLD,ALGSTR_1,GCD_1,POLYNOM3,POLYNOM4,POLYNOM5,FUNCOP_1,CARD_1,VFUNCT_1,FUNCT_2;
constructors BINOP_1,REAL_1,SQUARE_1,FINSOP_1,BINARITH,VECTSP_2,ALGSTR_1,BHSP_1,POLYNOM1,POLYNOM4,POLYNOM5,SEQ_1,BINOP_2,NAT_D,RELSET_1,FVSUM_1,VFUNCT_1,CKB18,CKB27,CKB40;
requirements NUMERALS,SUBSET,REAL,BOOLE,ARITHM;
begin
definition
let L being  well-unital non  empty doubleLoopStr;
let z being (Element of L);
let k being Nat;
func qpoly (k,z) -> (Polynomial of L) means 
:Def4: ((for i being Nat holds (i < k implies ( it . i ) = ( ( power L ) . (z,( ( k - i ) - 1 )) ))) & (for i being Nat holds (i >= k implies ( it . i ) = ( 0. L ))));
existence
proof
defpred P[ set,set ]
 means
(ex n being (Element of ( NAT )) st ((n = $1 & (n < k implies $2 = ( ( power L ) . (z,( ( k - n ) - 1 )) ))) & (n >= k implies $2 = ( 0. L ))));
A1: (for x being set holds (x in ( NAT ) implies (ex y being set st (y in (the carrier of L) & P[ x,y ]))))
proof
let u being set;
assume u in ( NAT );
then reconsider u9 = u as (Element of ( NAT ));
thus (ex y being set st (y in (the carrier of L) & P[ u,y ]))
proof
per cases ;
suppose A2: u9 < k;

then reconsider ku = ( k - u9 ) as (Element of ( NAT )) by INT_1:5;
( k - k ) < ku by A2,XREAL_1:10;
then ( ( 0 ) + 1 ) < ( ku + 1 ) by XREAL_1:6;
then 1 <= ( k - u9 ) by NAT_1:13;
then reconsider m = ( ( k - u9 ) - 1 ) as (Element of ( NAT )) by INT_1:5;
take ( ( power L ) . (z,( ( k - u9 ) - 1 )) );
( ( power L ) . (z,m) ) in (the carrier of L);
hence thesis by A2;
end;
suppose A3: u9 >= k;

take ( 0. L );
thus thesis by A3;
end;
end;

end;
consider f being (Function of ( NAT ),(the carrier of L)) such that A4: (for x being set holds (x in ( NAT ) implies P[ x,( f . x ) ])) from FUNCT_2:sch 1(A1);
reconsider f as (sequence of L);
A5: (for i being Nat holds (i >= k implies ( f . i ) = ( 0. L )))
proof
let i being Nat;
i in ( NAT ) by ORDINAL1:def 12;
then A6: (ex n being (Element of ( NAT )) st ((n = i & (n < k implies ( f . i ) = ( ( power L ) . (z,( ( k - n ) - 1 )) ))) & (n >= k implies ( f . i ) = ( 0. L )))) by A4;
assume i >= k;
hence thesis by A6;
end;
then reconsider p = f as (AlgSequence of L) by ALGSEQ_1:def 1;
take p;
now
let i being Nat;
i in ( NAT ) by ORDINAL1:def 12;
then A7: (ex n being (Element of ( NAT )) st ((n = i & (n < k implies ( f . i ) = ( ( power L ) . (z,( ( k - n ) - 1 )) ))) & (n >= k implies ( f . i ) = ( 0. L )))) by A4;
assume i < k;
hence ( p . i ) = ( ( power L ) . (z,( ( k - i ) - 1 )) ) by A7;
end;
hence thesis by A5;
end;
uniqueness
proof
let z1 being (AlgSequence of L);
let z2 being (AlgSequence of L);
assume that
A8: (for i being Nat holds (i < k implies ( z1 . i ) = ( ( power L ) . (z,( ( k - i ) - 1 )) )))
and
A9: (for i being Nat holds (i >= k implies ( z1 . i ) = ( 0. L )));
assume that
A10: (for i being Nat holds (i < k implies ( z2 . i ) = ( ( power L ) . (z,( ( k - i ) - 1 )) )))
and
A11: (for i being Nat holds (i >= k implies ( z2 . i ) = ( 0. L )));
A12:now
let x being set;
assume x in ( dom z1 );
then reconsider x9 = x as (Element of ( NAT ));
per cases ;
suppose A13: x9 < k;

hence ( z1 . x ) = ( ( power L ) . (z,( ( k - x9 ) - 1 )) ) by A8
.= ( z2 . x ) by A10,A13;
end;
suppose A14: x9 >= k;

hence ( z1 . x ) = ( 0. L ) by A9
.= ( z2 . x ) by A11,A14;
end;
end;
( dom z1 ) = ( NAT ) by FUNCT_2:def 1
.= ( dom z2 ) by FUNCT_2:def 1;
hence z1 = z2 by A12,FUNCT_1:2;
end;
end;
