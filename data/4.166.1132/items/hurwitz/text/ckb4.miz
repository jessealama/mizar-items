environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,NAT_1,RELAT_1,ARYTM_3,TARSKI,ORDINAL4,PARTFUN1,XXREAL_0,FUNCT_1,SUBSET_1,STRUCT_0,BINOP_1,VECTSP_1,LATTICES,SUPINF_2,ARYTM_1,GROUP_1,CARD_1,MESFUNC1,COMPLFLD,COMPLEX1,CARD_3,POLYNOM1,POLYNOM3,SGRAPH1,INT_1,ALGSEQ_1,VECTSP_2,POLYNOM5,AFINSQ_1,POLYNOM2,FUNCT_4,FUNCOP_1,XCMPLX_0,SQUARE_1,HURWITZ;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,NUMBERS,XCMPLX_0,ALGSTR_0,VECTSP_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NAT_1,NAT_D,XXREAL_0,FINSEQ_1,INT_1,FUNCOP_1,STRUCT_0,RLVECT_1,VFUNCT_1,GROUP_1,POLYNOM1,COMPLEX1,COMPLFLD,BINOP_1,NORMSP_1,BHSP_1,ALGSEQ_1,FUNCT_4,POLYNOM3,POLYNOM4,POLYNOM5,VECTSP_1,SQUARE_1;
definitions FINSEQ_1,POLYNOM3,COMPLEX1,SQUARE_1,FUNCOP_1;
theorems GROUP_1,VECTSP_1,ALGSEQ_1,NAT_1,FUNCT_1,FUNCT_2,XREAL_1,SQUARE_1,VECTSP_2,INT_1,FINSEQ_1,RLVECT_1,POLYNOM4,TARSKI,FUNCT_4,POLYNOM3,XBOOLE_1,POLYNOM2,FUNCOP_1,XCMPLX_1,XCMPLX_0,COMPLFLD,POLYNOM5,XXREAL_0,ALGSTR_1,COMPLEX1,FINSEQ_2,POLYNOM1,FINSEQ_3,BHSP_1,NORMSP_1,ORDINAL1,PARTFUN1,XREAL_0,NAT_D,CKB1,CKB2,CKB3;
schemes NAT_1,FUNCT_2,FINSEQ_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,INT_1,MEMBERED,FINSEQ_1,STRUCT_0,VECTSP_1,COMPLFLD,ALGSTR_1,GCD_1,POLYNOM3,POLYNOM4,POLYNOM5,FUNCOP_1,CARD_1,VFUNCT_1,FUNCT_2;
constructors BINOP_1,REAL_1,SQUARE_1,FINSOP_1,BINARITH,VECTSP_2,ALGSTR_1,BHSP_1,POLYNOM1,POLYNOM4,POLYNOM5,SEQ_1,BINOP_2,NAT_D,RELSET_1,FVSUM_1,VFUNCT_1;
requirements NUMERALS,SUBSET,REAL,BOOLE,ARITHM;
begin
theorem
Th3: (for L being  associative  well-unital non empty multLoopStr holds (for x being (Element of L) holds (for k1,k2 being (Element of ( NAT )) holds ( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,k2) ) ) = ( ( power L ) . (x,( k1 + k2 )) ))))
proof
let L being  associative  well-unital non empty multLoopStr;
let x being (Element of L);
let k1 being (Element of ( NAT )),k2 being (Element of ( NAT ));
defpred P[ Nat ]
 means
(ex j being (Element of ( NAT )) st (j = $1 & ( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,j) ) ) = ( ( power L ) . (x,( k1 + j )) )));
A1:now
let j being (Element of ( NAT ));
assume A2: P[ j ];
( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,( j + 1 )) ) ) = ( ( ( power L ) . (x,k1) ) * ( ( ( power L ) . (x,j) ) * x ) ) by GROUP_1:def 7
.= ( ( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,j) ) ) * x ) by GROUP_1:def 3
.= ( ( power L ) . (x,( ( k1 + j ) + 1 )) ) by A2,GROUP_1:def 7
.= ( ( power L ) . (x,( k1 + ( j + 1 ) )) );
hence P[ ( j + 1 ) ];
end;
( 1_ L ) = ( 1. L );
then ( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,( 0 )) ) ) = ( ( ( power L ) . (x,k1) ) * ( 1. L ) ) by GROUP_1:def 7
.= ( ( power L ) . (x,( k1 + ( 0 ) )) ) by VECTSP_1:def 4;
then A3: P[ ( 0 ) ];
(for k being (Element of ( NAT )) holds P[ k ]) from NAT_1:sch 1(A3,A1);
then (ex j being (Element of ( NAT )) st (j = k2 & ( ( ( power L ) . (x,k1) ) * ( ( power L ) . (x,j) ) ) = ( ( power L ) . (x,( k1 + j )) )));
hence thesis;
end;
