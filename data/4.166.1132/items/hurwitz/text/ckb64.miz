environ
vocabularies NUMBERS,RLVECT_1,ALGSTR_0,XBOOLE_0,FINSEQ_1,NAT_1,RELAT_1,ARYTM_3,TARSKI,ORDINAL4,PARTFUN1,XXREAL_0,FUNCT_1,SUBSET_1,STRUCT_0,BINOP_1,VECTSP_1,LATTICES,SUPINF_2,ARYTM_1,GROUP_1,CARD_1,MESFUNC1,COMPLFLD,COMPLEX1,CARD_3,POLYNOM1,POLYNOM3,SGRAPH1,INT_1,ALGSEQ_1,VECTSP_2,POLYNOM5,AFINSQ_1,POLYNOM2,FUNCT_4,FUNCOP_1,XCMPLX_0,SQUARE_1,HURWITZ;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,NUMBERS,XCMPLX_0,ALGSTR_0,VECTSP_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NAT_1,NAT_D,XXREAL_0,FINSEQ_1,INT_1,FUNCOP_1,STRUCT_0,RLVECT_1,VFUNCT_1,GROUP_1,POLYNOM1,COMPLEX1,COMPLFLD,BINOP_1,NORMSP_1,BHSP_1,ALGSEQ_1,FUNCT_4,POLYNOM3,POLYNOM4,POLYNOM5,VECTSP_1,SQUARE_1,CKB18,CKB27,CKB28,CKB40,CKB47,CKB51,CKB52,CKB53,CKB57;
definitions FINSEQ_1,POLYNOM3,COMPLEX1,SQUARE_1,FUNCOP_1,CKB18,CKB27,CKB40,CKB47,CKB51,CKB52,CKB53,CKB57;
theorems GROUP_1,VECTSP_1,ALGSEQ_1,NAT_1,FUNCT_1,FUNCT_2,XREAL_1,SQUARE_1,VECTSP_2,INT_1,FINSEQ_1,RLVECT_1,POLYNOM4,TARSKI,FUNCT_4,POLYNOM3,XBOOLE_1,POLYNOM2,FUNCOP_1,XCMPLX_1,XCMPLX_0,COMPLFLD,POLYNOM5,XXREAL_0,ALGSTR_1,COMPLEX1,FINSEQ_2,POLYNOM1,FINSEQ_3,BHSP_1,NORMSP_1,ORDINAL1,PARTFUN1,XREAL_0,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
schemes NAT_1,FUNCT_2,FINSEQ_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,XCMPLX_0,XXREAL_0,XREAL_0,SQUARE_1,NAT_1,INT_1,MEMBERED,FINSEQ_1,STRUCT_0,VECTSP_1,COMPLFLD,ALGSTR_1,GCD_1,POLYNOM3,POLYNOM4,POLYNOM5,FUNCOP_1,CARD_1,VFUNCT_1,FUNCT_2;
constructors BINOP_1,REAL_1,SQUARE_1,FINSOP_1,BINARITH,VECTSP_2,ALGSTR_1,BHSP_1,POLYNOM1,POLYNOM4,POLYNOM5,SEQ_1,BINOP_2,NAT_D,RELSET_1,FVSUM_1,VFUNCT_1,CKB18,CKB27,CKB40,CKB47,CKB51,CKB52,CKB53,CKB57;
requirements NUMERALS,SUBSET,REAL,BOOLE,ARITHM;
begin
definition
let f being (Polynomial of ( F_Complex ));
func f *' -> (Polynomial of ( F_Complex )) means 
:Def9: (for i being (Element of ( NAT )) holds ( it . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),i) ) * ( ( f . i ) *' ) ));
existence
proof
defpred P[ set,set ]
 means
(ex n being (Element of ( NAT )) st (n = $1 & $2 = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),n) ) * ( ( f . n ) *' ) )));
A1: (for x being set holds (x in ( NAT ) implies (ex y being set st (y in (the carrier of ( F_Complex )) & P[ x,y ]))))
proof
let u being set;
assume u in ( NAT );
then reconsider u9 = u as (Element of ( NAT ));
take ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),u9) ) * ( ( f . u9 ) *' ) );
thus thesis;
end;
consider g being (Function of ( NAT ),(the carrier of ( F_Complex ))) such that A2: (for x being set holds (x in ( NAT ) implies P[ x,( g . x ) ])) from FUNCT_2:sch 1(A1);
reconsider g as (sequence of ( F_Complex ));
(ex n being Nat st (for i being Nat holds (i >= n implies ( g . i ) = ( 0. ( F_Complex ) ))))
proof
take n = ( len f );
now
let i being Nat;
reconsider i1 = i as (Element of ( NAT )) by ORDINAL1:def 12;
assume A3: i >= n;
(ex m being (Element of ( NAT )) st (m = i1 & ( g . i1 ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),m) ) * ( ( f . m ) *' ) ))) by A2;
hence ( g . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),i1) ) * ( ( 0. ( F_Complex ) ) *' ) ) by A3,ALGSEQ_1:8
.= ( 0. ( F_Complex ) ) by COMPLFLD:47,VECTSP_1:6;
end;
hence thesis;
end;
then reconsider p = g as (AlgSequence of ( F_Complex )) by ALGSEQ_1:def 1;
take p;
now
let i being (Element of ( NAT ));
(ex n being (Element of ( NAT )) st (n = i & ( p . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),n) ) * ( ( f . n ) *' ) ))) by A2;
hence ( p . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),i) ) * ( ( f . i ) *' ) );
end;
hence thesis;
end;
uniqueness
proof
let z1 being (AlgSequence of ( F_Complex ));
let z2 being (AlgSequence of ( F_Complex ));
assume A4: (for i being (Element of ( NAT )) holds ( z1 . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),i) ) * ( ( f . i ) *' ) ));
assume A5: (for i being (Element of ( NAT )) holds ( z2 . i ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),i) ) * ( ( f . i ) *' ) ));
A6:now
let x being set;
assume x in ( dom z1 );
then reconsider x9 = x as (Element of ( NAT ));
thus ( z1 . x ) = ( ( ( power ( F_Complex ) ) . (( - ( 1_ ( F_Complex ) ) ),x9) ) * ( ( f . x9 ) *' ) ) by A4
.= ( z2 . x ) by A5;
end;
( dom z1 ) = ( NAT ) by FUNCT_2:def 1
.= ( dom z2 ) by FUNCT_2:def 1;
hence z1 = z2 by A6,FUNCT_1:2;
end;
end;
