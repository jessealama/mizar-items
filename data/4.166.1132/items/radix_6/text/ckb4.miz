environ
vocabularies NUMBERS,NAT_1,XXREAL_0,ARYTM_3,RADIX_1,RADIX_5,FINSEQ_1,CARD_1,FUNCT_1,NEWTON,RELAT_1,PARTFUN1,ARYTM_1,CARD_3,FINSEQ_2,SUBSET_1,INT_1,RADIX_6;
notations SUBSET_1,NUMBERS,XCMPLX_0,XXREAL_0,INT_1,NAT_1,NAT_D,NEWTON,RADIX_1,FINSEQ_1,FINSEQ_2,FUNCT_1,RELSET_1,PARTFUN1,GR_CY_1,RADIX_5;
theorems RADIX_1,RADIX_2,RADIX_4,RADIX_5,INT_1,NAT_1,NAT_2,FINSEQ_1,FINSEQ_2,RVSUM_1,NEWTON,PREPOWER,FUNCT_1,FINSEQ_3,XREAL_1,XXREAL_0,NAT_D,CARD_1,CKB1,CKB2,CKB3;
schemes FINSEQ_2,NAT_1;
registrations RELSET_1,XXREAL_0,XREAL_0,NAT_1,INT_1,ORDINAL1,NEWTON,XBOOLE_0,FINSEQ_2,CARD_1;
constructors REAL_1,NAT_D,NEWTON,GR_CY_1,RADIX_5,SEQ_1,RELSET_1;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
definition
let i being Nat;
let m being Nat;
let k being Nat;
let r being (Tuple of ( m + 2 ),( k -SD ));
assume A1: i in ( Seg ( m + 2 ) );
func M0Digit (r,i) -> (Element of ( k -SD )) equals 
:Def1: ( r . i ) if i >= m otherwise ( 0 );
coherence
proof
( len r ) = ( m + 2 ) by CARD_1:def 7;
then i in ( dom r ) by A1,FINSEQ_1:def 3;
then ( r . i ) in ( rng r ) by FUNCT_1:def 3;
hence thesis by RADIX_1:14;
end;
consistency;
end;
