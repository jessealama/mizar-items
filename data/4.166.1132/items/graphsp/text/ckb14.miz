environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_1,INT_1,RELAT_1,FUNCT_1,ORDINAL4,XBOOLE_0,XXREAL_0,PARTFUN1,GRAPH_1,STRUCT_0,TREES_2,GLIB_000,GRAPH_5,CARD_3,GRAPH_4,NAT_1,ARYTM_3,TARSKI,CARD_1,FINSET_1,FUNCT_4,REAL_1,FUNCT_2,ARYTM_1,GRAPHSP;
notations XCMPLX_0,XXREAL_0,REAL_1,INT_1,TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FINSEQ_1,SEQ_1,FINSEQ_2,FINSEQ_4,CARD_1,FINSET_1,STRUCT_0,GRAPH_1,PARTFUN1,FUNCT_2,CQC_SIM1,GRAPH_4,GRAPH_5,NAT_D,DOMAIN_1,RVSUM_1,NUMBERS,FUNCT_7,NAT_1;
definitions TARSKI,RVSUM_1;
theorems FUNCT_2,FUNCT_1,PARTFUN1,FINSEQ_1,NAT_1,ZFMISC_1,TARSKI,FINSEQ_3,XBOOLE_0,XBOOLE_1,SUBSET_1,GRAPH_1,FINSEQ_4,CARD_2,INT_1,GRAPH_5,GRAPH_4,FINSEQ_2,ENUMSET1,FUNCT_7,XREAL_1,XXREAL_0,FINSOP_1,ORDINAL1,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13;
schemes NAT_1,GRAPH_5,CLASSES1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,FUNCT_2,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GRAPH_1,GRAPH_4,GRAPH_5,VALUED_0,CARD_1,FUNCT_1;
constructors DOMAIN_1,XXREAL_0,REAL_1,FINSEQ_4,FINSOP_1,NAT_D,FUNCT_7,CQC_SIM1,GRAPH_4,GRAPH_5,SEQ_1,BINOP_2,RVSUM_1,RELSET_1;
requirements NUMERALS,SUBSET,BOOLE,REAL,ARITHM;
begin
reserve G for Graph;
reserve p for  oriented (Chain of G);
reserve U for set;
reserve V for set;
reserve e for set;
reserve v1 for (Vertex of G);
reserve v2 for (Vertex of G);
reserve v3 for (Vertex of G);
reserve v4 for (Vertex of G);
theorem
Th11: (((((the carrier of G) = ( U \/ V ) & v1 in U) & v2 in V) & (for v3 holds (for v4 holds ((v3 in U & v4 in V) implies (not (ex e st (e in (the carrier' of G) & e orientedly_joins v3,v4))))))) implies (not (ex p st p is_orientedpath_of v1,v2)))
proof
assume that
A1: (the carrier of G) = ( U \/ V )
and
A2: v1 in U
and
A3: v2 in V
and
A4: (for v3 holds (for v4 holds ((v3 in U & v4 in V) implies (not (ex e st (e in (the carrier' of G) & e orientedly_joins v3,v4))))));
set FS = (the Source of G);
set FT = (the Target of G);
given p such that
A5: p is_orientedpath_of v1,v2;

p <> ( {} ) by A5,GRAPH_5:def 3;
then A6: ( len p ) >= 1 by FINSEQ_1:20;
defpred PP[ Nat ]
 means
(($1 >= 1 & $1 <= ( len p )) & ( FS . ( p . $1 ) ) in U);
A7: (for k being Nat holds (PP[ k ] implies k <= ( len p )));
( FS . ( p . 1 ) ) = v1 by A5,GRAPH_5:def 3;
then A8: (ex k being Nat st PP[ k ]) by A2,A6;
consider k being Nat such that A9: (PP[ k ] & (for n being Nat holds (PP[ n ] implies n <= k))) from NAT_1:sch 6(A7,A8);
reconsider k as (Element of ( NAT )) by ORDINAL1:def 12;
reconsider vx = ( FS . ( p . k ) ) as (Vertex of G) by A9,CKB13:1;
A10: ( p . k ) in (the carrier' of G) by A9,CKB2:1;
A11: ( FT . ( p . ( len p ) ) ) = v2 by A5,GRAPH_5:def 3;
per cases ;
suppose k = ( len p );

then ( p . k ) orientedly_joins vx,v2 by A11,GRAPH_4:def 1;
hence contradiction by A3,A4,A9,A10;
end;
suppose k <> ( len p );

then A12: k < ( len p ) by A9,XXREAL_0:1;
A13: k < ( k + 1 ) by NAT_1:13;
A14:now
assume A15: ( FS . ( p . ( k + 1 ) ) ) in U;
(( k + 1 ) <= ( len p ) & 1 <= ( k + 1 )) by A12,INT_1:7,NAT_1:12;
hence contradiction by A9,A13,A15;
end;
reconsider vy = ( FT . ( p . k ) ) as (Vertex of G) by A9,CKB13:1;
A16: ( p . k ) orientedly_joins vx,vy by GRAPH_4:def 1;
( FS . ( p . ( k + 1 ) ) ) = ( FT . ( p . k ) ) by A9,A12,GRAPH_1:def 13;
then vy in V by A1,A2,A14,XBOOLE_0:def 3;
hence contradiction by A4,A9,A10,A16;
end;
end;
