environ
vocabularies NUMBERS,SUBSET_1,FINSEQ_1,INT_1,RELAT_1,FUNCT_1,ORDINAL4,XBOOLE_0,XXREAL_0,PARTFUN1,GRAPH_1,STRUCT_0,TREES_2,GLIB_000,GRAPH_5,CARD_3,GRAPH_4,NAT_1,ARYTM_3,TARSKI,CARD_1,FINSET_1,FUNCT_4,REAL_1,FUNCT_2,ARYTM_1,GRAPHSP;
notations XCMPLX_0,XXREAL_0,REAL_1,INT_1,TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FINSEQ_1,SEQ_1,FINSEQ_2,FINSEQ_4,CARD_1,FINSET_1,STRUCT_0,GRAPH_1,PARTFUN1,FUNCT_2,CQC_SIM1,GRAPH_4,GRAPH_5,NAT_D,DOMAIN_1,RVSUM_1,NUMBERS,FUNCT_7,NAT_1,CKB21,CKB22,CKB23,CKB28,CKB29,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB44,CKB45,CKB51,CKB54,CKB62,CKB63;
definitions TARSKI,RVSUM_1,CKB23,CKB30,CKB35,CKB36,CKB37,CKB38,CKB39,CKB44,CKB45,CKB51,CKB54,CKB62,CKB63;
theorems FUNCT_2,FUNCT_1,PARTFUN1,FINSEQ_1,NAT_1,ZFMISC_1,TARSKI,FINSEQ_3,XBOOLE_0,XBOOLE_1,SUBSET_1,GRAPH_1,FINSEQ_4,CARD_2,INT_1,GRAPH_5,GRAPH_4,FINSEQ_2,ENUMSET1,FUNCT_7,XREAL_1,XXREAL_0,FINSOP_1,ORDINAL1,NAT_D,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB23,CKB24,CKB25,CKB26,CKB27,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB48,CKB49,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
schemes NAT_1,GRAPH_5,CLASSES1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,FUNCT_2,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GRAPH_1,GRAPH_4,GRAPH_5,VALUED_0,CARD_1,FUNCT_1,CKB47,CKB50;
constructors DOMAIN_1,XXREAL_0,REAL_1,FINSEQ_4,FINSOP_1,NAT_D,FUNCT_7,CQC_SIM1,GRAPH_4,GRAPH_5,SEQ_1,BINOP_2,RVSUM_1,RELSET_1,CKB22,CKB23,CKB28,CKB29,CKB30,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB44,CKB45,CKB51,CKB54,CKB62,CKB63;
requirements NUMERALS,SUBSET,BOOLE,REAL,ARITHM;
begin
reserve x for set;
reserve k for (Element of ( NAT ));
definition
let f being (Element of ( ( REAL ) * ));
let n being (Element of ( NAT ));
func Relax (f,n) -> (Element of ( ( REAL ) * ))
means
:Def14: (( dom it ) = ( dom f ) & (for k being (Element of ( NAT )) holds (k in ( dom f ) implies ((((n < k & k <= ( 2 * n )) implies ((f hasBetterPathAt n,( k -' n ) implies ( it . k ) = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) )) & ((not f hasBetterPathAt n,( k -' n )) implies ( it . k ) = ( f . k )))) & ((( 2 * n ) < k & k <= ( 3 * n )) implies ((f hasBetterPathAt n,( k -' ( 2 * n ) ) implies ( it . k ) = ( newpathcost (f,n,( k -' ( 2 * n ) )) )) & ((not f hasBetterPathAt n,( k -' ( 2 * n ) )) implies ( it . k ) = ( f . k ))))) & ((k <= n or k > ( 3 * n )) implies ( it . k ) = ( f . k ))))));
existence
proof
defpred P2[ (Element of ( NAT )) ]
 means
f hasBetterPathAt n,( $1 -' ( 2 * n ) );
defpred P1[ (Element of ( NAT )) ]
 means
f hasBetterPathAt n,( $1 -' n );
set X = ( dom f );
defpred P[ set,set ]
 means
(for k holds (($1 = k & k in X) implies ((((n < k & k <= ( 2 * n )) implies ((P1[ k ] implies $2 = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) )) & ((not P1[ k ]) implies $2 = ( f . k )))) & ((( 2 * n ) < k & k <= ( 3 * n )) implies ((P2[ k ] implies $2 = ( newpathcost (f,n,( k -' ( 2 * n ) )) )) & ((not P2[ k ]) implies $2 = ( f . k ))))) & ((k <= n or k > ( 3 * n )) implies $2 = ( f . k )))));
A1:now
let xx being set;
assume xx in X;
then reconsider k = xx as (Element of ( NAT ));
per cases ;
suppose A2: (n < k & k <= ( 2 * n ));

thus (ex y1 being set st P[ xx,y1 ])
proof
per cases ;
suppose A3: P1[ k ];

take y1 = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) );
thus thesis by A2,A3,CKB60:1;
end;
suppose A4: (not P1[ k ]);

take y1 = ( f . k );
thus thesis by A2,A4;
end;
end;

end;
suppose A5: (( 2 * n ) < k & k <= ( 3 * n ));

thus (ex y1 being set st P[ xx,y1 ])
proof
per cases ;
suppose A6: P2[ k ];

take y1 = ( newpathcost (f,n,( k -' ( 2 * n ) )) );
thus thesis by A5,A6,CKB60:1;
end;
suppose A7: (not P2[ k ]);

take y1 = ( f . k );
thus thesis by A5,A7;
end;
end;

end;
suppose A8: (k <= n or k > ( 3 * n ));

thus (ex y1 being set st P[ xx,y1 ])
proof
take y1 = ( f . k );
thus thesis by A8,CKB60:1;
end;

end;
end;
consider F being Function such that A9: (( dom F ) = X & (for x holds (x in X implies P[ x,( F . x ) ]))) from CLASSES1:sch 1(A1);
A10: ( rng F ) c= ( REAL )
proof
let y1 being set;
assume y1 in ( rng F );
then consider xx being set such that A11: xx in ( dom F ) and A12: y1 = ( F . xx ) by FUNCT_1:def 3;
reconsider k = xx as (Element of ( NAT )) by A9,A11;
per cases ;
suppose A13: (n < k & k <= ( 2 * n ));

hereby
per cases ;
suppose P1[ k ];

then y1 = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) ) by A9,A11,A12,A13;
hence thesis;
end;
suppose (not P1[ k ]);

then y1 = ( f . k ) by A9,A11,A12,A13
.= ( f /. k ) by A9,A11,PARTFUN1:def 6;
hence thesis;
end;
end;
end;
suppose A14: (( 2 * n ) < k & k <= ( 3 * n ));

hereby
per cases ;
suppose P2[ k ];

then y1 = ( newpathcost (f,n,( k -' ( 2 * n ) )) ) by A9,A11,A12,A14;
hence thesis;
end;
suppose (not P2[ k ]);

then y1 = ( f . k ) by A9,A11,A12,A14
.= ( f /. k ) by A9,A11,PARTFUN1:def 6;
hence thesis;
end;
end;
end;
suppose (k <= n or k > ( 3 * n ));

then y1 = ( f . k ) by A9,A11,A12
.= ( f /. k ) by A9,A11,PARTFUN1:def 6;
hence thesis;
end;
end;
X = ( Seg ( len f ) ) by FINSEQ_1:def 3;
then F is FinSequence by A9,FINSEQ_1:def 2;
then F is (FinSequence of ( REAL )) by A10,FINSEQ_1:def 4;
then reconsider F as (Element of ( ( REAL ) * )) by FINSEQ_1:def 11;
take F;
thus ( dom F ) = X by A9;
let k;
assume k in X;
hence thesis by A9;
end;
uniqueness
proof
let F1 being (Element of ( ( REAL ) * )),F2 being (Element of ( ( REAL ) * ));
assume that
A15: ( dom F1 ) = ( dom f )
and
A16: (for k being (Element of ( NAT )) holds (k in ( dom f ) implies ((((n < k & k <= ( 2 * n )) implies ((f hasBetterPathAt n,( k -' n ) implies ( F1 . k ) = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) )) & ((not f hasBetterPathAt n,( k -' n )) implies ( F1 . k ) = ( f . k )))) & ((( 2 * n ) < k & k <= ( 3 * n )) implies ((f hasBetterPathAt n,( k -' ( 2 * n ) ) implies ( F1 . k ) = ( newpathcost (f,n,( k -' ( 2 * n ) )) )) & ((not f hasBetterPathAt n,( k -' ( 2 * n ) )) implies ( F1 . k ) = ( f . k ))))) & ((k <= n or k > ( 3 * n )) implies ( F1 . k ) = ( f . k )))))
and
A17: ( dom F2 ) = ( dom f )
and
A18: (for k being (Element of ( NAT )) holds (k in ( dom f ) implies ((((n < k & k <= ( 2 * n )) implies ((f hasBetterPathAt n,( k -' n ) implies ( F2 . k ) = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) )) & ((not f hasBetterPathAt n,( k -' n )) implies ( F2 . k ) = ( f . k )))) & ((( 2 * n ) < k & k <= ( 3 * n )) implies ((f hasBetterPathAt n,( k -' ( 2 * n ) ) implies ( F2 . k ) = ( newpathcost (f,n,( k -' ( 2 * n ) )) )) & ((not f hasBetterPathAt n,( k -' ( 2 * n ) )) implies ( F2 . k ) = ( f . k ))))) & ((k <= n or k > ( 3 * n )) implies ( F2 . k ) = ( f . k )))));
now
let xx being set;
assume A19: xx in ( dom F1 );
then reconsider k = xx as (Element of ( NAT ));
defpred P2[  ]
 means
f hasBetterPathAt n,( k -' ( 2 * n ) );
defpred P1[  ]
 means
f hasBetterPathAt n,( k -' n );
per cases ;
suppose A20: (n < k & k <= ( 2 * n ));

hereby
per cases ;
suppose A21: P1[  ];

hence ( F1 . xx ) = ( f /. ( ( ( n * n ) + ( 3 * n ) ) + 1 ) ) by A15,A16,A19,A20
.= ( F2 . xx ) by A15,A18,A19,A20,A21;
end;
suppose A22: (not P1[  ]);

hence ( F1 . xx ) = ( f . k ) by A15,A16,A19,A20
.= ( F2 . xx ) by A15,A18,A19,A20,A22;
end;
end;
end;
suppose A23: (( 2 * n ) < k & k <= ( 3 * n ));

hereby
per cases ;
suppose A24: P2[  ];

hence ( F1 . xx ) = ( newpathcost (f,n,( k -' ( 2 * n ) )) ) by A15,A16,A19,A23
.= ( F2 . xx ) by A15,A18,A19,A23,A24;
end;
suppose A25: (not P2[  ]);

hence ( F1 . xx ) = ( f . k ) by A15,A16,A19,A23
.= ( F2 . xx ) by A15,A18,A19,A23,A25;
end;
end;
end;
suppose A26: (k <= n or k > ( 3 * n ));

hence ( F1 . xx ) = ( f . k ) by A15,A16,A19
.= ( F2 . xx ) by A15,A18,A19,A26;
end;
end;
hence thesis by A15,A17,FUNCT_1:2;
end;
end;
