environ
vocabularies NUMBERS,RELAT_1,XBOOLE_0,ZFMISC_1,TARSKI,RELAT_2,STRUCT_0,FINSET_1,ORDERS_2,CARD_1,CAT_1,YELLOW_0,WELLORD1,NECKLA_2,NECKLACE,SUBSET_1,FUNCT_1,XXREAL_0,SEQM_3,REWRITE1,FINSEQ_1,NAT_1,ARYTM_3,FINSEQ_5,EQREL_1,MSUALG_5,CLASSES2,FUNCOP_1,FUNCT_4,ARYTM_1,NECKLA_3;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,ZFMISC_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,NAT_1,DOMAIN_1,STRUCT_0,ORDERS_2,WAYBEL_1,FUNCOP_1,CLASSES2,NECKLACE,WAYBEL_0,FUNCT_4,REWRITE1,FINSEQ_1,FINSEQ_5,EQREL_1,MSUALG_5,YELLOW_0,NECKLA_2,WELLORD1;
definitions XBOOLE_0,TARSKI,NECKLACE,RELAT_2,FUNCOP_1,WELLORD1,STRUCT_0;
theorems RELSET_1,NECKLACE,XBOOLE_0,WAYBEL_0,YELLOW_0,FUNCT_1,FUNCT_2,ORDERS_2,RELAT_2,SUBSET_1,ZFMISC_1,XBOOLE_1,TARSKI,MCART_1,CLASSES2,CLASSES1,NECKLA_2,FUNCOP_1,ENUMSET1,RELAT_1,SYSREL,PARTFUN1,GROUP_6,CARD_2,REWRITE1,FINSEQ_1,FINSEQ_3,FINSEQ_5,NAT_1,EQREL_1,MSUALG_6,MSUALG_5,CARD_1,NAT_2,FUNCT_4,FUNCT_3,WAYBEL_1,YELLOW_6,REALSET1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,STRUCT_0,CKB1,CKB2,CKB3,CKB5,CKB7,CKB11,CKB21,CKB22,CKB23,CKB24,CKB25,CKB28,CKB29;
schemes NAT_1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,CARD_1,FINSEQ_1,REALSET1,STRUCT_0,ORDERS_2,YELLOW_0,NECKLACE,NECKLA_2,ORDINAL1,FUNCT_4,RELSET_1,ZFMISC_1,CKB4,CKB6,CKB8,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB26,CKB27;
constructors XXREAL_0,NAT_1,EQREL_1,CLASSES1,TOLER_1,CLASSES2,FINSEQ_5,REWRITE1,REALSET2,MSUALG_5,ORDERS_3,WAYBEL_1,NECKLACE,NECKLA_2,RELSET_1;
requirements BOOLE,SUBSET,REAL,NUMERALS,ARITHM;
begin
reserve a for set;
theorem
Th14: (for G being RelStr holds [: (the carrier of G),(the carrier of G) :] = ( ( ( id (the carrier of G) ) \/ (the InternalRel of G) ) \/ (the InternalRel of ( ComplRelStr G )) ))
proof
let G being RelStr;
set idcG = ( id (the carrier of G) );
set IG = (the InternalRel of G);
set ICmpG = (the InternalRel of ( ComplRelStr G ));
set cG = (the carrier of G);
thus [: cG,cG :] c= ( ( idcG \/ IG ) \/ ICmpG )
proof
let a being set;
assume A1: a in [: cG,cG :];
then consider x,y being set such that A2: x in cG and y in cG and A3: a = [ x,y ] by ZFMISC_1:def 2;
per cases ;
suppose A4: x = y;

[ x,x ] in ( id cG ) by A2,RELAT_1:def 10;
then a in ( ( id cG ) \/ IG ) by A3,A4,XBOOLE_0:def 3;
hence thesis by XBOOLE_0:def 3;
end;
suppose x <> y;

then A5: (not a in ( id cG )) by A3,RELAT_1:def 10;
thus thesis
proof
per cases ;
suppose a in IG;

then a in ( ( id cG ) \/ IG ) by XBOOLE_0:def 3;
hence thesis by XBOOLE_0:def 3;
end;
suppose (not a in IG);

then a in ( [: cG,cG :] \ IG ) by A1,XBOOLE_0:def 5;
then a in ( IG ` ) by SUBSET_1:def 4;
then a in ( ( IG ` ) \ ( id cG ) ) by A5,XBOOLE_0:def 5;
then a in ICmpG by NECKLACE:def 8;
then a in ( IG \/ ICmpG ) by XBOOLE_0:def 3;
then a in ( ( id cG ) \/ ( IG \/ ICmpG ) ) by XBOOLE_0:def 3;
hence thesis by XBOOLE_1:4;
end;
end;

end;
end;

let a being set;
assume a in ( ( idcG \/ IG ) \/ ICmpG );
then A6: (a in ( ( id cG ) \/ IG ) or a in ICmpG) by XBOOLE_0:def 3;
per cases  by A6,XBOOLE_0:def 3;
suppose a in ( id cG );

hence thesis;
end;
suppose a in IG;

hence thesis;
end;
suppose a in ICmpG;

then a in ( ( IG ` ) \ ( id cG ) ) by NECKLACE:def 8;
hence thesis;
end;
end;
