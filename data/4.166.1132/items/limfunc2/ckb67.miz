environ
vocabularies NUMBERS,REAL_1,SUBSET_1,SEQ_1,PARTFUN1,XREAL_0,ORDINAL1,CARD_1,ARYTM_3,XXREAL_0,ARYTM_1,RELAT_1,TARSKI,VALUED_1,XBOOLE_0,SEQ_2,ORDINAL2,FUNCT_1,FUNCOP_1,LIMFUNC1,FUNCT_2,XXREAL_1,COMPLEX1,XXREAL_2,NAT_1,VALUED_0,ORDINAL4,LIMFUNC2;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,REAL_1,NAT_1,FUNCT_2,FUNCOP_1,VALUED_0,VALUED_1,SEQ_1,SEQ_2,RELSET_1,RCOMP_1,PARTFUN1,RFUNCT_1,LIMFUNC1,XXREAL_0,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB52,CKB53;
definitions LIMFUNC1,PROB_1,VALUED_1,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB52,CKB53;
theorems TARSKI,NAT_1,ABSVALUE,SEQ_1,SEQ_2,SEQM_3,SEQ_4,RFUNCT_1,RFUNCT_2,LIMFUNC1,RCOMP_1,FUNCT_1,XREAL_0,XBOOLE_0,XBOOLE_1,XCMPLX_0,FUNCOP_1,XREAL_1,COMPLEX1,XXREAL_0,VALUED_1,XXREAL_1,FUNCT_2,VALUED_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66;
schemes SEQ_1,FUNCT_2;
registrations ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,MEMBERED,XBOOLE_0,VALUED_0,VALUED_1,FUNCT_2,FUNCOP_1,SEQ_4;
constructors FUNCOP_1,REAL_1,NAT_1,COMPLEX1,SEQ_2,SEQM_3,PROB_1,RCOMP_1,RFUNCT_1,RFUNCT_2,LIMFUNC1,PARTFUN1,VALUED_1,SEQ_1,RELSET_1,BINOP_2,RVSUM_1,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB52,CKB53;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve r for Real;
reserve g for Real;
reserve x0 for Real;
reserve seq for Real_Sequence;
reserve f1 for (PartFunc of ( REAL ),( REAL ));
reserve f2 for (PartFunc of ( REAL ),( REAL ));
theorem
Th62: (((f1 is_right_convergent_in x0 & f2 is_right_convergent_in x0) & (for r holds (x0 < r implies (ex g st ((g < r & x0 < g) & g in ( dom ( f1 + f2 ) )))))) implies (( f1 + f2 ) is_right_convergent_in x0 & ( lim_right (( f1 + f2 ),x0) ) = ( ( lim_right (f1,x0) ) + ( lim_right (f2,x0) ) )))
proof
assume that
A1: f1 is_right_convergent_in x0
and
A2: f2 is_right_convergent_in x0
and
A3: (for r holds (x0 < r implies (ex g st ((g < r & x0 < g) & g in ( dom ( f1 + f2 ) )))));
A4:now
let seq;
assume that
A5: seq is  convergent
and
A6: ( lim seq ) = x0
and
A7: ( rng seq ) c= ( ( dom ( f1 + f2 ) ) /\ ( right_open_halfline x0 ) );
A8: ( dom ( f1 + f2 ) ) = ( ( dom f1 ) /\ ( dom f2 ) ) by A7,CKB4:1;
A9: ( rng seq ) c= ( ( dom f1 ) /\ ( right_open_halfline x0 ) ) by A7,CKB4:1;
A10: ( rng seq ) c= ( ( dom f2 ) /\ ( right_open_halfline x0 ) ) by A7,CKB4:1;
then A11: ( lim ( f2 /* seq ) ) = ( lim_right (f2,x0) ) by A2,A5,A6,CKB53:def 1;
( lim_right (f2,x0) ) = ( lim_right (f2,x0) );
then A12: ( f2 /* seq ) is  convergent by A2,A5,A6,A10,CKB53:def 1;
( rng seq ) c= ( dom ( f1 + f2 ) ) by A7,CKB4:1;
then A13: ( ( f1 /* seq ) + ( f2 /* seq ) ) = ( ( f1 + f2 ) /* seq ) by A8,RFUNCT_2:8;
( lim_right (f1,x0) ) = ( lim_right (f1,x0) );
then A14: ( f1 /* seq ) is  convergent by A1,A5,A6,A9,CKB53:def 1;
hence ( ( f1 + f2 ) /* seq ) is  convergent by A12,A13,SEQ_2:5;
( lim ( f1 /* seq ) ) = ( lim_right (f1,x0) ) by A1,A5,A6,A9,CKB53:def 1;
hence ( lim ( ( f1 + f2 ) /* seq ) ) = ( ( lim_right (f1,x0) ) + ( lim_right (f2,x0) ) ) by A14,A12,A11,A13,SEQ_2:6;
end;
hence ( f1 + f2 ) is_right_convergent_in x0 by A3,CKB15:def 1;
hence thesis by A4,CKB53:def 1;
end;
