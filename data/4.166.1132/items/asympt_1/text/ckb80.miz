environ
vocabularies NUMBERS,REAL_1,SUBSET_1,NAT_1,XXREAL_0,POWER,ARYTM_3,RELAT_1,CARD_1,SQUARE_1,SEQ_1,FUNCT_1,ARYTM_1,ASYMPT_0,FUNCT_2,INT_1,VALUED_1,TARSKI,XREAL_0,ORDINAL1,SEQ_2,ORDINAL2,COMPLEX1,CARD_3,SERIES_1,FUNCOP_1,REALSET1,VALUED_0,NEWTON,FINSEQ_1,FINSEQ_2,ORDINAL4,XBOOLE_0,ASYMPT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,REAL_1,FUNCT_1,FUNCT_2,INT_1,NAT_1,VALUED_1,SEQ_1,SEQ_2,NEWTON,POWER,SERIES_1,FUNCOP_1,SQUARE_1,FINSEQ_1,FINSEQ_2,RVSUM_1,ASYMPT_0,CKB5,CKB9,CKB10,CKB33,CKB41;
definitions ASYMPT_0,SQUARE_1,VALUED_1,XCMPLX_0,CKB5,CKB9,CKB10,CKB33,CKB41;
theorems TARSKI,FUNCT_2,INT_1,NAT_1,SEQ_1,SQUARE_1,SEQ_2,ABSVALUE,FUNCOP_1,POWER,NEWTON,EULER_2,SERIES_1,SEQM_3,FINSEQ_1,PRE_FF,RVSUM_1,FINSEQ_2,ASYMPT_0,XREAL_0,XBOOLE_0,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79;
schemes FUNCT_2,SEQ_1,NAT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_2,ASYMPT_0,SQUARE_1,VALUED_0,VALUED_1,FUNCT_2,POWER,CKB6,CKB11,CKB12,CKB34,CKB42;
constructors PARTFUN1,DOMAIN_1,REAL_1,SQUARE_1,NAT_1,NAT_D,SEQ_2,SEQM_3,RVSUM_1,NEWTON,PREPOWER,SERIES_1,SEQ_1,ASYMPT_0,RELSET_1,FUNCOP_1,BINOP_2,CKB5,CKB9,CKB10,CKB33,CKB41;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
theorem
(ex s,s1 being  eventually-positive Real_Sequence st (((s = ( seq_a^ (2,1,( 0 )) ) & s1 = ( seq_a^ (2,2,( 0 )) )) & ( Big_Oh s ) c= ( Big_Oh s1 )) & (not ( Big_Oh s ) = ( Big_Oh s1 ))))
proof
reconsider g = ( seq_a^ (2,2,( 0 )) ) as  eventually-positive Real_Sequence;
reconsider f = ( seq_a^ (2,1,( 0 )) ) as  eventually-positive Real_Sequence;
take f;
take g;
thus (f = ( seq_a^ (2,1,( 0 )) ) & g = ( seq_a^ (2,2,( 0 )) ));
set h = ( f /" g );
A1: (for n holds ( h . n ) = ( 2 to_power ( - n ) ))
proof
let n;
( h . n ) = ( ( f . n ) / ( g . n ) ) by CKB13:1
.= ( ( 2 to_power ( ( 1 * n ) + ( 0 ) ) ) / ( g . n ) ) by CKB5:def 1
.= ( ( 2 to_power ( 1 * n ) ) / ( 2 to_power ( ( 2 * n ) + ( 0 ) ) ) ) by CKB5:def 1
.= ( 2 to_power ( ( 1 * n ) - ( 2 * n ) ) ) by POWER:29
.= ( 2 to_power ( - n ) );
hence thesis;
end;
A2:now
let p being  real number;
set N = ( max (1,( [/ ( log (2,( 1 / p )) ) \] + 1 )) );
A3: N >= 1 by XXREAL_0:25;
A4: N is Integer by XXREAL_0:16;
A5: [/ ( log (2,( 1 / p )) ) \] >= ( log (2,( 1 / p )) ) by INT_1:def 7;
( [/ ( log (2,( 1 / p )) ) \] + 1 ) > [/ ( log (2,( 1 / p )) ) \] by XREAL_1:29;
then ( [/ ( log (2,( 1 / p )) ) \] + 1 ) > ( log (2,( 1 / p )) ) by A5,XXREAL_0:2;
then A6: ( 2 to_power ( [/ ( log (2,( 1 / p )) ) \] + 1 ) ) > ( 2 to_power ( log (2,( 1 / p )) ) ) by POWER:39;
reconsider N as (Element of ( NAT )) by A3,A4,INT_1:3;
assume A7: p > ( 0 );
take N;
let n;
( 2 to_power N ) >= ( 2 to_power ( [/ ( log (2,( 1 / p )) ) \] + 1 ) ) by PRE_FF:8,XXREAL_0:25;
then A8: ( 2 to_power N ) > ( 2 to_power ( log (2,( 1 / p )) ) ) by A6,XXREAL_0:2;
assume n >= N;
then ( 2 to_power n ) >= ( 2 to_power N ) by PRE_FF:8;
then ( 2 to_power n ) > ( 2 to_power ( log (2,( 1 / p )) ) ) by A8,XXREAL_0:2;
then ( 2 to_power n ) > ( 1 / p ) by A7,POWER:def 3;
then ( ( 2 to_power n ) * p ) > ( ( 1 / p ) * p ) by A7,XREAL_1:68;
then A9: ( p * ( 2 to_power n ) ) > 1 by A7,XCMPLX_1:87;
( 2 to_power n ) > ( 0 ) by POWER:34;
then ( ( p * ( 2 to_power n ) ) * ( ( 2 to_power n ) " ) ) > ( 1 * ( ( 2 to_power n ) " ) ) by A9,XREAL_1:68;
then A10: ( p * ( ( 2 to_power n ) * ( ( 2 to_power n ) " ) ) ) > ( ( 2 to_power n ) " );
( 2 to_power n ) <> ( 0 ) by POWER:34;
then ( p * 1 ) > ( ( 2 to_power n ) " ) by A10,XCMPLX_0:def 7;
then A11: p > ( 1 / ( 2 to_power n ) );
A12: ( 2 to_power ( - n ) ) > ( 0 ) by POWER:34;
( abs ( ( h . n ) - ( 0 ) ) ) = ( abs ( 2 to_power ( - n ) ) ) by A1;
then ( abs ( ( h . n ) - ( 0 ) ) ) = ( 2 to_power ( - n ) ) by A12,ABSVALUE:def 1;
hence ( abs ( ( h . n ) - ( 0 ) ) ) < p by A11,POWER:28;
end;
then A13: h is  convergent by SEQ_2:def 6;
then A14: ( lim h ) = ( 0 ) by A2,SEQ_2:def 7;
then (not g in ( Big_Oh f )) by A13,ASYMPT_0:16;
then A15: (not f in ( Big_Omega g )) by ASYMPT_0:19;
f in ( Big_Oh g ) by A13,A14,ASYMPT_0:16;
hence thesis by A15,CKB15:1;
end;
