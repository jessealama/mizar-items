environ
vocabularies NUMBERS,REAL_1,SUBSET_1,NAT_1,XXREAL_0,POWER,ARYTM_3,RELAT_1,CARD_1,SQUARE_1,SEQ_1,FUNCT_1,ARYTM_1,ASYMPT_0,FUNCT_2,INT_1,VALUED_1,TARSKI,XREAL_0,ORDINAL1,SEQ_2,ORDINAL2,COMPLEX1,CARD_3,SERIES_1,FUNCOP_1,REALSET1,VALUED_0,NEWTON,FINSEQ_1,FINSEQ_2,ORDINAL4,XBOOLE_0,ASYMPT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,REAL_1,FUNCT_1,FUNCT_2,INT_1,NAT_1,VALUED_1,SEQ_1,SEQ_2,NEWTON,POWER,SERIES_1,FUNCOP_1,SQUARE_1,FINSEQ_1,FINSEQ_2,RVSUM_1,ASYMPT_0,CKB5,CKB9,CKB10;
definitions ASYMPT_0,SQUARE_1,VALUED_1,XCMPLX_0,CKB5,CKB9,CKB10;
theorems TARSKI,FUNCT_2,INT_1,NAT_1,SEQ_1,SQUARE_1,SEQ_2,ABSVALUE,FUNCOP_1,POWER,NEWTON,EULER_2,SERIES_1,SEQM_3,FINSEQ_1,PRE_FF,RVSUM_1,FINSEQ_2,ASYMPT_0,XREAL_0,XBOOLE_0,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
schemes FUNCT_2,SEQ_1,NAT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_2,ASYMPT_0,SQUARE_1,VALUED_0,VALUED_1,FUNCT_2,POWER,CKB6,CKB11,CKB12;
constructors PARTFUN1,DOMAIN_1,REAL_1,SQUARE_1,NAT_1,NAT_D,SEQ_2,SEQM_3,RVSUM_1,NEWTON,PREPOWER,SERIES_1,SEQ_1,ASYMPT_0,RELSET_1,FUNCOP_1,BINOP_2,CKB5,CKB9,CKB10;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve n for (Element of ( NAT ));
reserve N for (Element of ( NAT ));
theorem
Lm14: (for f being Real_Sequence holds (for b being Real holds ((( f . ( 0 ) ) = ( 0 ) & (for n holds (n > ( 0 ) implies ( f . n ) = b))) implies (for N being (Element of ( NAT )) holds ( Sum (f,N) ) = ( b * N )))))
proof
let f being Real_Sequence;
let b being Real;
defpred P[ (Element of ( NAT )) ]
 means
( Sum (f,$1) ) = ( b * $1 );
assume that
A1: ( f . ( 0 ) ) = ( 0 )
and
A2: (for n holds (n > ( 0 ) implies ( f . n ) = b));
A3: (for N holds (P[ N ] implies P[ ( N + 1 ) ]))
proof
let N;
assume A4: ( Sum (f,N) ) = ( b * N );
( Sum (f,( N + 1 )) ) = ( ( Partial_Sums f ) . ( N + 1 ) ) by SERIES_1:def 5
.= ( ( ( Partial_Sums f ) . N ) + ( f . ( N + 1 ) ) ) by SERIES_1:def 1
.= ( ( b * N ) + ( f . ( N + 1 ) ) ) by A4,SERIES_1:def 5
.= ( ( b * N ) + ( b * 1 ) ) by A2
.= ( b * ( N + 1 ) );
hence thesis;
end;
( ( Partial_Sums f ) . ( 0 ) ) = ( 0 ) by A1,SERIES_1:def 1;
then A5: P[ ( 0 ) ] by SERIES_1:def 5;
(for N holds P[ N ]) from NAT_1:sch 1(A5,A3);
hence thesis;
end;
