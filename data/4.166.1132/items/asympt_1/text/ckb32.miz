environ
vocabularies NUMBERS,REAL_1,SUBSET_1,NAT_1,XXREAL_0,POWER,ARYTM_3,RELAT_1,CARD_1,SQUARE_1,SEQ_1,FUNCT_1,ARYTM_1,ASYMPT_0,FUNCT_2,INT_1,VALUED_1,TARSKI,XREAL_0,ORDINAL1,SEQ_2,ORDINAL2,COMPLEX1,CARD_3,SERIES_1,FUNCOP_1,REALSET1,VALUED_0,NEWTON,FINSEQ_1,FINSEQ_2,ORDINAL4,XBOOLE_0,ASYMPT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,REAL_1,FUNCT_1,FUNCT_2,INT_1,NAT_1,VALUED_1,SEQ_1,SEQ_2,NEWTON,POWER,SERIES_1,FUNCOP_1,SQUARE_1,FINSEQ_1,FINSEQ_2,RVSUM_1,ASYMPT_0,CKB5,CKB9,CKB10;
definitions ASYMPT_0,SQUARE_1,VALUED_1,XCMPLX_0,CKB5,CKB9,CKB10;
theorems TARSKI,FUNCT_2,INT_1,NAT_1,SEQ_1,SQUARE_1,SEQ_2,ABSVALUE,FUNCOP_1,POWER,NEWTON,EULER_2,SERIES_1,SEQM_3,FINSEQ_1,PRE_FF,RVSUM_1,FINSEQ_2,ASYMPT_0,XREAL_0,XBOOLE_0,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes FUNCT_2,SEQ_1,NAT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_2,ASYMPT_0,SQUARE_1,VALUED_0,VALUED_1,FUNCT_2,POWER,CKB6,CKB11,CKB12;
constructors PARTFUN1,DOMAIN_1,REAL_1,SQUARE_1,NAT_1,NAT_D,SEQ_2,SEQM_3,RVSUM_1,NEWTON,PREPOWER,SERIES_1,SEQ_1,ASYMPT_0,RELSET_1,FUNCOP_1,BINOP_2,CKB5,CKB9,CKB10;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve c for Real;
reserve n for (Element of ( NAT ));
reserve N for (Element of ( NAT ));
theorem
(for f being Real_Sequence holds ((for n holds (n > ( 0 ) implies ( f . n ) = ( n to_power ( log (2,n) ) ))) implies (ex s being  eventually-positive Real_Sequence st (s = f & (not s is  smooth)))))
proof
let f being Real_Sequence;
assume that
A1: (for n holds (n > ( 0 ) implies ( f . n ) = ( n to_power ( log (2,n) ) )));
A2: f is  eventually-positive
proof
take 1;
let n;
assume A3: n >= 1;
then ( f . n ) = ( n to_power ( log (2,n) ) ) by A1;
hence thesis by A3,POWER:34;
end;
set g = ( f taken_every 2 );
reconsider f as  eventually-positive Real_Sequence by A2;
take f;
now
assume f is  smooth;
then f is_smooth_wrt 2 by ASYMPT_0:def 17;
then g in ( Big_Oh f ) by ASYMPT_0:def 16;
then consider t being (Element of ( Funcs (( NAT ),( REAL )) )) such that A4: t = g and A5: (ex c st (ex N st (c > ( 0 ) & (for n holds (n >= N implies (( t . n ) <= ( c * ( f . n ) ) & ( t . n ) >= ( 0 )))))));
consider c,N such that A6: c > ( 0 ) and A7: (for n holds (n >= N implies (( t . n ) <= ( c * ( f . n ) ) & ( t . n ) >= ( 0 )))) by A5;
A8: ( sqrt c ) > ( 0 ) by A6,SQUARE_1:25;
set N0 = [/ ( ( sqrt c ) / ( sqrt 2 ) ) \];
reconsider N2 = ( max (N,N0) ) as Integer by XXREAL_0:16;
set N1 = ( max (N2,2) );
A9: N1 >= N2 by XXREAL_0:25;
N2 >= N0 by XXREAL_0:25;
then A10: N1 >= N0 by A9,XXREAL_0:2;
A11: N1 is Integer by XXREAL_0:16;
N2 >= N by XXREAL_0:25;
then A12: N1 >= N by A9,XXREAL_0:2;
N1 >= 2 by XXREAL_0:25;
then reconsider N1 as (Element of ( NAT )) by A11,INT_1:3;
set n = ( N1 + 1 );
A13: ( n to_power ( log (2,n) ) ) > ( 0 ) by POWER:34;
A14: ( 2 * n ) > ( 2 * ( 0 ) ) by XREAL_1:68;
A15: ( sqrt 2 ) <> ( 0 ) by SQUARE_1:25;
A16: ( sqrt 2 ) > ( 0 ) by SQUARE_1:25;
A17: N0 >= ( ( sqrt c ) / ( sqrt 2 ) ) by INT_1:def 7;
A18: n > ( N1 + ( 0 ) ) by XREAL_1:8;
then n > N0 by A10,XXREAL_0:2;
then n > ( ( sqrt c ) / ( sqrt 2 ) ) by A17,XXREAL_0:2;
then ( n * ( sqrt 2 ) ) > ( ( ( sqrt c ) / ( sqrt 2 ) ) * ( sqrt 2 ) ) by A16,XREAL_1:68;
then ( n * ( sqrt 2 ) ) > ( sqrt c ) by A15,XCMPLX_1:87;
then ( ( n * ( sqrt 2 ) ) ^2 ) > ( ( sqrt c ) ^2 ) by A8,SQUARE_1:16;
then ( ( n ^2 ) * ( ( sqrt 2 ) ^2 ) ) > c by A6,SQUARE_1:def 2;
then A19: ( 2 * ( n ^2 ) ) > c by SQUARE_1:def 2;
( ( 2 * ( n ^2 ) ) * ( n to_power ( log (2,n) ) ) ) = ( ( ( 2 * n ) * n ) * ( n to_power ( log (2,n) ) ) )
.= ( ( ( 2 * n ) * ( 2 to_power ( log (2,n) ) ) ) * ( n to_power ( log (2,n) ) ) ) by POWER:def 3
.= ( ( 2 * n ) * ( ( 2 to_power ( log (2,n) ) ) * ( n to_power ( log (2,n) ) ) ) )
.= ( ( 2 * n ) * ( ( 2 * n ) to_power ( log (2,n) ) ) ) by POWER:30
.= ( ( ( 2 * n ) to_power 1 ) * ( ( 2 * n ) to_power ( log (2,n) ) ) ) by POWER:25
.= ( ( 2 * n ) to_power ( 1 + ( log (2,n) ) ) ) by A14,POWER:27
.= ( ( 2 * n ) to_power ( ( log (2,2) ) + ( log (2,n) ) ) ) by POWER:52
.= ( ( 2 * n ) to_power ( log (2,( 2 * n )) ) ) by POWER:53;
then ( ( 2 * n ) to_power ( log (2,( 2 * n )) ) ) > ( c * ( n to_power ( log (2,n) ) ) ) by A13,A19,XREAL_1:68;
then ( f . ( 2 * n ) ) > ( c * ( n to_power ( log (2,n) ) ) ) by A1,A14;
then ( t . n ) > ( c * ( n to_power ( log (2,n) ) ) ) by A4,ASYMPT_0:def 15;
then A20: ( t . n ) > ( c * ( f . n ) ) by A1;
n > N by A12,A18,XXREAL_0:2;
hence contradiction by A7,A20;
end;
hence thesis;
end;
