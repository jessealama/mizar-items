environ
vocabularies NUMBERS,REAL_1,SUBSET_1,NAT_1,XXREAL_0,POWER,ARYTM_3,RELAT_1,CARD_1,SQUARE_1,SEQ_1,FUNCT_1,ARYTM_1,ASYMPT_0,FUNCT_2,INT_1,VALUED_1,TARSKI,XREAL_0,ORDINAL1,SEQ_2,ORDINAL2,COMPLEX1,CARD_3,SERIES_1,FUNCOP_1,REALSET1,VALUED_0,NEWTON,FINSEQ_1,FINSEQ_2,ORDINAL4,XBOOLE_0,ASYMPT_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,COMPLEX1,REAL_1,FUNCT_1,FUNCT_2,INT_1,NAT_1,VALUED_1,SEQ_1,SEQ_2,NEWTON,POWER,SERIES_1,FUNCOP_1,SQUARE_1,FINSEQ_1,FINSEQ_2,RVSUM_1,ASYMPT_0,CKB5,CKB9,CKB10,CKB33,CKB41;
definitions ASYMPT_0,SQUARE_1,VALUED_1,XCMPLX_0,CKB5,CKB9,CKB10,CKB33,CKB41;
theorems TARSKI,FUNCT_2,INT_1,NAT_1,SEQ_1,SQUARE_1,SEQ_2,ABSVALUE,FUNCOP_1,POWER,NEWTON,EULER_2,SERIES_1,SEQM_3,FINSEQ_1,PRE_FF,RVSUM_1,FINSEQ_2,ASYMPT_0,XREAL_0,XBOOLE_0,XCMPLX_0,XCMPLX_1,XREAL_1,XXREAL_0,ORDINAL1,NAT_D,VALUED_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB43,CKB44;
schemes FUNCT_2,SEQ_1,NAT_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_2,ASYMPT_0,SQUARE_1,VALUED_0,VALUED_1,FUNCT_2,POWER,CKB6,CKB11,CKB12,CKB34,CKB42;
constructors PARTFUN1,DOMAIN_1,REAL_1,SQUARE_1,NAT_1,NAT_D,SEQ_2,SEQM_3,RVSUM_1,NEWTON,PREPOWER,SERIES_1,SEQ_1,ASYMPT_0,RELSET_1,FUNCOP_1,BINOP_2,CKB5,CKB9,CKB10,CKB33,CKB41;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve c for Real;
reserve n for (Element of ( NAT ));
reserve N for (Element of ( NAT ));
theorem
(ex s being  eventually-positive Real_Sequence st ((s = ( seq_a^ (2,1,( 0 )) ) & ( 2 (#) ( seq_n^ 1 ) ) in ( Big_Oh ( seq_n^ 1 ) )) & (not ( seq_a^ (2,2,( 0 )) ) in ( Big_Oh s ))))
proof
reconsider q = ( seq_a^ (2,1,( 0 )) ) as  eventually-positive Real_Sequence;
set p = ( seq_a^ (2,2,( 0 )) );
set g = ( seq_n^ 1 );
set f = ( 2 (#) ( seq_n^ 1 ) );
take q;
thus q = ( seq_a^ (2,1,( 0 )) );
A1:now
let n;
assume n >= ( 0 );
thus ( f . n ) <= ( 2 * ( g . n ) ) by SEQ_1:9;
A2: ( g . n ) = n
proof
per cases ;
suppose n = ( 0 );

hence thesis by CKB10:def 1;
end;
suppose n > ( 0 );

hence ( g . n ) = ( n to_power 1 ) by CKB10:def 1
.= n by POWER:25;
end;
end;
( 2 * n ) >= ( 2 * ( 0 ) );
hence ( f . n ) >= ( 0 ) by A2,SEQ_1:9;
end;
f is (Element of ( Funcs (( NAT ),( REAL )) )) by FUNCT_2:8;
hence f in ( Big_Oh g ) by A1;
now
assume p in ( Big_Oh q );
then consider t being (Element of ( Funcs (( NAT ),( REAL )) )) such that A3: t = p and A4: (ex c st (ex N st (c > ( 0 ) & (for n holds (n >= N implies (( t . n ) <= ( c * ( q . n ) ) & ( t . n ) >= ( 0 )))))));
consider c,N such that A5: c > ( 0 ) and A6: (for n holds (n >= N implies (( t . n ) <= ( c * ( q . n ) ) & ( t . n ) >= ( 0 )))) by A4;
(ex n st (n >= N & ( t . n ) > ( c * ( q . n ) )))
proof
take n = ( max (N,[/ ( ( log (2,c) ) + 1 ) \]) );
A7: n >= N by XXREAL_0:25;
n is Integer by XXREAL_0:16;
then reconsider n as (Element of ( NAT )) by A7,INT_1:3;
A8: ( 2 to_power n ) >= ( 2 to_power [/ ( ( log (2,c) ) + 1 ) \] ) by PRE_FF:8,XXREAL_0:25;
A9: ( 2 to_power ( - n ) ) > ( 0 ) by POWER:34;
[/ ( ( log (2,c) ) + 1 ) \] >= ( ( log (2,c) ) + 1 ) by INT_1:def 7;
then A10: ( 2 to_power [/ ( ( log (2,c) ) + 1 ) \] ) >= ( 2 to_power ( ( log (2,c) ) + 1 ) ) by PRE_FF:8;
A11: ( 2 to_power ( ( log (2,c) ) + 1 ) ) = ( ( 2 to_power ( log (2,c) ) ) * ( 2 to_power 1 ) ) by POWER:27
.= ( c * ( 2 to_power 1 ) ) by A5,POWER:def 3
.= ( c * 2 ) by POWER:25;
( ( c * ( q . n ) ) * ( 2 to_power ( - n ) ) ) = ( ( c * ( 2 to_power ( ( 1 * n ) + ( 0 ) ) ) ) * ( 2 to_power ( - n ) ) ) by CKB5:def 1
.= ( c * ( ( 2 to_power n ) * ( 2 to_power ( - n ) ) ) )
.= ( c * ( 2 to_power ( n + ( - n ) ) ) ) by POWER:27
.= ( c * 1 ) by POWER:24;
then ( 2 to_power ( ( log (2,c) ) + 1 ) ) > ( ( c * ( q . n ) ) * ( 2 to_power ( - n ) ) ) by A5,A11,XREAL_1:68;
then A12: ( 2 to_power [/ ( ( log (2,c) ) + 1 ) \] ) > ( ( c * ( q . n ) ) * ( 2 to_power ( - n ) ) ) by A10,XXREAL_0:2;
( ( p . n ) * ( 2 to_power ( - n ) ) ) = ( ( 2 to_power ( ( 2 * n ) + ( 0 ) ) ) * ( 2 to_power ( - n ) ) ) by CKB5:def 1
.= ( 2 to_power ( ( 2 * n ) + ( ( - 1 ) * n ) ) ) by POWER:27
.= ( 2 to_power ( 1 * n ) );
then ( ( p . n ) * ( 2 to_power ( - n ) ) ) > ( ( c * ( q . n ) ) * ( 2 to_power ( - n ) ) ) by A8,A12,XXREAL_0:2;
hence thesis by A3,A9,XREAL_1:64,XXREAL_0:25;
end;
hence contradiction by A6;
end;
hence thesis;
end;
