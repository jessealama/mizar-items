environ
vocabularies NUMBERS,FUNCT_1,FUNCOP_1,TARSKI,RELAT_1,FUNCT_6,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,ORDERS_2,LATTICE3,MSUALG_5,STRUCT_0,EQREL_1,PBOOLE,LATTICES,XXREAL_0,REWRITE1,SETFAM_1,RELAT_2,WAYBEL_0,GROUP_6,YELLOW_0,ORDINAL2,CAT_1,FINSEQ_1,ARYTM_3,ABIAN,FINSEQ_2,ARYTM_1,CARD_1,ORDINAL4,NAT_1,VALUED_0,FUNCT_2,MCART_1,PARTFUN1,LATTICE5;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,RELAT_1,RELAT_2,FUNCT_1,RELSET_1,FUNCT_2,FUNCT_6,CARD_1,NUMBERS,XCMPLX_0,NAT_1,NAT_D,SETFAM_1,ORDINAL1,ORDINAL2,MCART_1,DOMAIN_1,PARTFUN1,FUNCOP_1,STRUCT_0,ORDERS_2,EQREL_1,MSUALG_5,FINSEQ_1,FINSEQ_2,SEQ_4,LATTICES,LATTICE3,BINOP_1,YELLOW_0,WAYBEL_0,YELLOW_2,ABIAN,XXREAL_0,CKB4,CKB13,CKB16,CKB18,CKB20,CKB23,CKB25,CKB26,CKB27,CKB28,CKB29,CKB31,CKB32,CKB35,CKB37,CKB42,CKB44,CKB50,CKB51,CKB53,CKB54,CKB60,CKB67,CKB69,CKB70,CKB71;
definitions TARSKI,LATTICE3,FUNCOP_1,WAYBEL_0,XBOOLE_0,BINOP_1,FINSEQ_1,FINSEQ_2,CKB4,CKB13,CKB20,CKB23,CKB27,CKB28,CKB29,CKB32,CKB35,CKB37,CKB42,CKB44,CKB50,CKB51,CKB53,CKB54,CKB67,CKB69,CKB71;
theorems EQREL_1,RELAT_1,RELAT_2,FINSEQ_1,FINSEQ_2,MSUALG_5,ORDERS_2,TARSKI,ENUMSET1,ORDINAL1,ORDINAL3,WELLORD2,TREES_2,PARTFUN1,GRFUNC_1,FUNCT_6,MCART_1,FINSEQ_5,NAT_1,INT_1,BINOP_1,ZFMISC_1,FUNCT_1,FUNCT_2,FILTER_0,LATTICES,LATTICE3,YELLOW_0,YELLOW_2,YELLOW_3,YELLOW_5,WAYBEL_0,WAYBEL_1,WAYBEL_6,RELSET_1,CARD_1,FINSEQ_3,SETFAM_1,XBOOLE_0,XBOOLE_1,ORDERS_1,FUNCOP_1,XREAL_1,XXREAL_0,XXREAL_2,XREAL_0,CKB1,CKB2,CKB3,CKB4,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB20,CKB21,CKB22,CKB23,CKB24,CKB27,CKB28,CKB29,CKB32,CKB33,CKB34,CKB35,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB69,CKB71,CKB72;
schemes DOMAIN_1,FUNCT_2,RELSET_1,RECDEF_1,ORDINAL2,NAT_1,FINSEQ_1,CLASSES1,BINOP_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,PARTFUN1,FUNCOP_1,XREAL_0,CARD_1,MEMBERED,FINSEQ_1,ABIAN,STRUCT_0,LATTICES,LATTICE3,YELLOW_0,YELLOW_1,RELAT_1,XXREAL_2,RELSET_1,FINSEQ_2,FUNCT_1,CKB5,CKB14,CKB15,CKB17,CKB19,CKB30,CKB36,CKB48,CKB68;
constructors SETFAM_1,BINOP_1,DOMAIN_1,ORDINAL2,NAT_1,CLASSES1,SEQ_4,FINSOP_1,FUNCT_6,RFUNCT_3,BINARITH,ABIAN,LATTICE3,MSUALG_5,YELLOW_2,NAT_D,RELSET_1,CKB4,CKB20,CKB23,CKB26,CKB27,CKB28,CKB29,CKB32,CKB35,CKB37,CKB42,CKB44,CKB50,CKB51,CKB53,CKB54,CKB60,CKB67,CKB69,CKB70,CKB71;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve A for non  empty set;
reserve L for  lower-bounded LATTICE;
definition
let A;
let L;
let d being (distance_function of A,L);
mode ExtensionSeq of A,d
 -> Function
means :Def21: ((( dom it ) = ( NAT ) & ( it . ( 0 ) ) = [ A,d ]) & (for n being (Element of ( NAT )) holds (ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st ((Aq,dq is_extension_of A9,d9 & ( it . n ) = [ A9,d9 ]) & ( it . ( n + 1 ) ) = [ Aq,dq ])))))));
existence
proof
defpred P[ set,set,set ]
 means
((ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st ((Aq,dq is_extension_of A9,d9 & $2 = [ A9,d9 ]) & $3 = [ Aq,dq ]))))) or ($3 = ( 0 ) & (not (ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st (Aq,dq is_extension_of A9,d9 & $2 = [ A9,d9 ]))))))));
A1: (for n being (Element of ( NAT )) holds (for x being set holds (ex y being set st P[ n,x,y ])))
proof
let n being (Element of ( NAT ));
let x being set;
per cases ;
suppose (ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st (Aq,dq is_extension_of A9,d9 & x = [ A9,d9 ])))));

then consider A9 being non  empty set,d9 being (distance_function of A9,L),Aq being non  empty set,dq being (distance_function of Aq,L) such that A2: (Aq,dq is_extension_of A9,d9 & x = [ A9,d9 ]);
take [ Aq,dq ];
thus thesis by A2;
end;
suppose A3: (not (ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st (Aq,dq is_extension_of A9,d9 & x = [ A9,d9 ]))))));

take ( 0 );
thus thesis by A3;
end;
end;
consider f being Function such that A4: ( dom f ) = ( NAT ) and A5: ( f . ( 0 ) ) = [ A,d ] and A6: (for n being (Element of ( NAT )) holds P[ n,( f . n ),( f . ( n + 1 ) ) ]) from RECDEF_1:sch 1(A1);
take f;
thus ( dom f ) = ( NAT ) by A4;
thus ( f . ( 0 ) ) = [ A,d ] by A5;
defpred X[ (Element of ( NAT )) ]
 means
(ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st ((Aq,dq is_extension_of A9,d9 & ( f . $1 ) = [ A9,d9 ]) & ( f . ( $1 + 1 ) ) = [ Aq,dq ])))));
A7: (for k being (Element of ( NAT )) holds (X[ k ] implies X[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
given A9 being non  empty set,d9 being (distance_function of A9,L),Aq being non  empty set,dq being (distance_function of Aq,L) such that
Aq,dq is_extension_of A9,d9
and
( f . k ) = [ A9,d9 ]
and
A8: ( f . ( k + 1 ) ) = [ Aq,dq ];

(ex A1 being non  empty set st (ex d1 being (distance_function of A1,L) st (ex AQ being non  empty set st (ex DQ being (distance_function of AQ,L) st (AQ,DQ is_extension_of A1,d1 & ( f . ( k + 1 ) ) = [ A1,d1 ])))))
proof
set Q = the (QuadrSeq of dq);
set AQ = ( NextSet dq );
take Aq;
take dq;
set DQ = ( NextDelta Q );
take AQ;
take DQ;
thus AQ,DQ is_extension_of Aq,dq by CKB71:def 1;
thus thesis by A8;
end;
hence thesis by A6;
end;
(ex A9 being non  empty set st (ex d9 being (distance_function of A9,L) st (ex Aq being non  empty set st (ex dq being (distance_function of Aq,L) st (Aq,dq is_extension_of A9,d9 & ( f . ( 0 ) ) = [ A9,d9 ])))))
proof
set Aq = ( NextSet d );
set q = the (QuadrSeq of d);
take A;
take d;
consider dq being (distance_function of Aq,L) such that A9: dq = ( NextDelta q );
take Aq;
take dq;
thus Aq,dq is_extension_of A,d by A9,CKB71:def 1;
thus thesis by A5;
end;
then A10: X[ ( 0 ) ] by A6;
thus (for k being (Element of ( NAT )) holds X[ k ]) from NAT_1:sch 1(A10,A7);
end;
end;
