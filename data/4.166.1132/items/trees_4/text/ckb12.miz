environ
vocabularies NUMBERS,TREES_2,SUBSET_1,RELAT_1,FINSEQ_1,FUNCT_1,TARSKI,TREES_1,XXREAL_0,ARYTM_3,CARD_1,FUNCOP_1,XBOOLE_0,TREES_3,ZFMISC_1,NAT_1,FINSEQ_2,TREES_A,ORDINAL4,FUNCT_6,FINSEQ_4,MCART_1,PARTFUN1,TREES_4;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,FUNCT_1,DOMAIN_1,FUNCOP_1,FUNCT_3,FINSEQ_1,FINSEQ_2,TREES_1,TREES_2,FUNCT_6,TREES_3,XXREAL_0,CKB1,CKB2,CKB6,CKB7;
definitions TARSKI,FINSEQ_1,TREES_1,TREES_2,FINSEQ_2,FUNCT_6,CKB2,CKB6;
theorems TARSKI,ZFMISC_1,FINSEQ_1,MCART_1,NAT_1,FUNCT_1,FUNCT_2,FUNCOP_1,FUNCT_6,FINSEQ_2,FINSEQ_3,TREES_1,TREES_2,TREES_3,RELAT_1,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,FUNCT_5,ORDINAL1,CARD_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11;
schemes CLASSES1,FINSEQ_1,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,XREAL_0,FINSEQ_1,TREES_2,TREES_3,CARD_1,FINSEQ_2,FUNCOP_1,RELSET_1,TREES_1;
constructors BINOP_1,DOMAIN_1,XXREAL_0,XREAL_0,NAT_1,FUNCT_5,FINSEQ_2,FUNCT_6,TREES_3,RELSET_1,CKB6,CKB7;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve y for set;
reserve z for set;
reserve n for (Element of ( NAT ));
reserve p for FinSequence;
definition
let x;
let p being FinSequence;
func x -flat_tree p -> DecoratedTree means 
:Def3: ((( dom it ) = ( elementary_tree ( len p ) ) & ( it . ( {} ) ) = x) & (for n holds (n < ( len p ) implies ( it . <* n *> ) = ( p . ( n + 1 ) ))));
existence
proof
defpred X[ set,set ]
 means
(($1 = ( {} ) & $2 = x) or (ex n st ($1 = <* n *> & $2 = ( p . ( n + 1 ) ))));
A1: (for z holds (z in ( elementary_tree ( len p ) ) implies (ex y st X[ z,y ])))
proof
let z;
assume z in ( elementary_tree ( len p ) );
then reconsider z as (Element of ( elementary_tree ( len p ) ));
reconsider z as (FinSequence of ( NAT ));
A2: (z = ( {} ) or (ex n st (n < ( len p ) & z = <* n *>))) by TREES_1:30;
now
given n such that
A3: z = <* n *>
and
n < ( len p );

take y = ( p . ( n + 1 ) );
take n;
thus (z = <* n *> & y = ( p . ( n + 1 ) )) by A3;
end;
hence thesis by A2;
end;
consider f being Function such that A4: (( dom f ) = ( elementary_tree ( len p ) ) & (for y holds (y in ( elementary_tree ( len p ) ) implies X[ y,( f . y ) ]))) from CLASSES1:sch 1(A1);
reconsider f as DecoratedTree by A4,TREES_2:def 8;
take f;
thus ( dom f ) = ( elementary_tree ( len p ) ) by A4;
(( {} ) in ( dom f ) & (for n holds (( {} ) = <* n *> implies ( f . ( {} ) ) <> ( p . ( n + 1 ) )))) by TREES_1:22;
hence ( f . ( {} ) ) = x by A4;
let n;
assume n < ( len p );
then <* n *> in ( dom f ) by A4,TREES_1:28;
then consider k being (Element of ( NAT )) such that A5: <* n *> = <* k *> and A6: ( f . <* n *> ) = ( p . ( k + 1 ) ) by A4;
k = ( <* n *> . 1 ) by A5,FINSEQ_1:40
.= n by FINSEQ_1:40;
hence thesis by A6;
end;
uniqueness
proof
let T1 being DecoratedTree;
let T2 being DecoratedTree;
assume that
A7: ( dom T1 ) = ( elementary_tree ( len p ) )
and
A8: ( T1 . ( {} ) ) = x
and
A9: (for n holds (n < ( len p ) implies ( T1 . <* n *> ) = ( p . ( n + 1 ) )))
and
A10: ( dom T2 ) = ( elementary_tree ( len p ) )
and
A11: ( T2 . ( {} ) ) = x
and
A12: (for n holds (n < ( len p ) implies ( T2 . <* n *> ) = ( p . ( n + 1 ) )));
now
let x;
assume x in ( elementary_tree ( len p ) );
then reconsider x9 = x as (Element of ( elementary_tree ( len p ) ));
A13: (x9 = ( {} ) or (ex n st (n < ( len p ) & x9 = <* n *>))) by TREES_1:30;
now
given n such that
A14: (n < ( len p ) & x = <* n *>);

thus ( T1 . x ) = ( p . ( n + 1 ) ) by A9,A14
.= ( T2 . x ) by A12,A14;
end;
hence ( T1 . x ) = ( T2 . x ) by A8,A11,A13;
end;
hence thesis by A7,A10,FUNCT_1:2;
end;
end;
