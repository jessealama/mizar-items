environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,EQREL_1,TARSKI,ZFMISC_1,FUNCT_1,SETFAM_1,RELAT_1,PARTFUN1,FUNCT_2,MARGREL1,BVFUNC_1,XBOOLEAN,BVFUNC_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,XBOOLEAN,MARGREL1,RELAT_1,FUNCT_1,SETFAM_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,PARTIT1,BVFUNC_1,CKB1,CKB2,CKB4,CKB5,CKB7;
definitions TARSKI,BVFUNC_1,XBOOLE_0,XBOOLEAN,CKB4,CKB5,CKB7;
theorems TARSKI,FUNCT_1,SETFAM_1,EQREL_1,ZFMISC_1,FUNCT_2,SUBSET_1,MARGREL1,BINARITH,PARTIT1,BVFUNC_1,RELAT_1,XBOOLE_0,XBOOLE_1,XBOOLEAN,PARTFUN1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8;
schemes DOMAIN_1,PARTFUN2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,XBOOLEAN,EQREL_1,MARGREL1,PARTIT1;
constructors SETFAM_1,PARTIT1,BVFUNC_1,RELSET_1,CKB1,CKB2,CKB4,CKB5,CKB7;
requirements SUBSET,BOOLE;
begin
reserve Y for non empty set;
theorem
(for G being (Subset of ( PARTITIONS Y )) holds (for PA being (a_partition of Y) holds (PA in G implies PA '<' ( '\/' G ))))
proof
let G being (Subset of ( PARTITIONS Y ));
let PA being (a_partition of Y);
assume A1: PA in G;
(for a being set holds (a in PA implies (ex b being set st (b in ( '\/' G ) & a c= b))))
proof
let a being set;
set x = the (Element of a);
A2: ( union ( '\/' G ) ) = Y by EQREL_1:def 4;
assume A3: a in PA;
then A4: a <> ( {} ) by EQREL_1:def 4;
then x in Y by A3,TARSKI:def 3;
then consider b being set such that A5: x in b and A6: b in ( '\/' G ) by A2,TARSKI:def 4;
b is_upper_min_depend_of G by A1,A6,CKB7:def 1;
then b is_a_dependent_set_of PA by A1,CKB5:def 1;
then consider B being set such that A7: B c= PA and B <> ( {} ) and A8: b = ( union B ) by PARTIT1:def 1;
a in B
proof
consider u being set such that A9: x in u and A10: u in B by A5,A8,TARSKI:def 4;
( a /\ u ) <> ( {} ) by A4,A9,XBOOLE_0:def 4;
then A11: (not a misses u) by XBOOLE_0:def 7;
u in PA by A7,A10;
hence thesis by A3,A10,A11,EQREL_1:def 4;
end;
hence thesis by A6,A8,ZFMISC_1:74;
end;
hence thesis by SETFAM_1:def 2;
end;
