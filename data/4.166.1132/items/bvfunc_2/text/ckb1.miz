environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,EQREL_1,TARSKI,ZFMISC_1,FUNCT_1,SETFAM_1,RELAT_1,PARTFUN1,FUNCT_2,MARGREL1,BVFUNC_1,XBOOLEAN,BVFUNC_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,XBOOLEAN,MARGREL1,RELAT_1,FUNCT_1,SETFAM_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,PARTIT1,BVFUNC_1;
definitions TARSKI,BVFUNC_1,XBOOLE_0,XBOOLEAN;
theorems TARSKI,FUNCT_1,SETFAM_1,EQREL_1,ZFMISC_1,FUNCT_2,SUBSET_1,MARGREL1,BINARITH,PARTIT1,BVFUNC_1,RELAT_1,XBOOLE_0,XBOOLE_1,XBOOLEAN,PARTFUN1;
schemes DOMAIN_1,PARTFUN2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,XBOOLEAN,EQREL_1,MARGREL1,PARTIT1;
constructors SETFAM_1,PARTIT1,BVFUNC_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
definition
let X being set;
redefine func PARTITIONS X -> (Part-Family of X);

coherence
proof
A1: ( PARTITIONS X ) c= ( bool ( bool X ) )
proof
let x being set;
assume x in ( PARTITIONS X );
then x is (a_partition of X) by PARTIT1:def 3;
hence thesis;
end;
(for S being set holds (S in ( PARTITIONS X ) implies S is (a_partition of X))) by PARTIT1:def 3;
hence thesis by A1,EQREL_1:def 7;
end;
end;
