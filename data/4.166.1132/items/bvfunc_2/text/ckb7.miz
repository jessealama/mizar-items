environ
vocabularies XBOOLE_0,SUBSET_1,PARTIT1,EQREL_1,TARSKI,ZFMISC_1,FUNCT_1,SETFAM_1,RELAT_1,PARTFUN1,FUNCT_2,MARGREL1,BVFUNC_1,XBOOLEAN,BVFUNC_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,XBOOLEAN,MARGREL1,RELAT_1,FUNCT_1,SETFAM_1,RELSET_1,PARTFUN1,FUNCT_2,EQREL_1,PARTIT1,BVFUNC_1,CKB1,CKB2,CKB4,CKB5;
definitions TARSKI,BVFUNC_1,XBOOLE_0,XBOOLEAN,CKB4,CKB5;
theorems TARSKI,FUNCT_1,SETFAM_1,EQREL_1,ZFMISC_1,FUNCT_2,SUBSET_1,MARGREL1,BINARITH,PARTIT1,BVFUNC_1,RELAT_1,XBOOLE_0,XBOOLE_1,XBOOLEAN,PARTFUN1,CKB3,CKB4,CKB5,CKB6;
schemes DOMAIN_1,PARTFUN2,XBOOLE_0;
registrations XBOOLE_0,SUBSET_1,RELSET_1,XBOOLEAN,EQREL_1,MARGREL1,PARTIT1;
constructors SETFAM_1,PARTIT1,BVFUNC_1,RELSET_1,CKB1,CKB2,CKB4,CKB5;
requirements SUBSET,BOOLE;
begin
reserve Y for non  empty set;
reserve G for (Subset of ( PARTITIONS Y ));
definition
let Y;
let G being (Subset of ( PARTITIONS Y ));
func '\/' G -> (a_partition of Y) means 
:Def3: (for x being set holds (x in it iff x is_upper_min_depend_of G)) if G <> ( {} ) otherwise it = ( %I Y );
existence
proof
thus (G <> ( {} ) implies (ex X being (a_partition of Y) st (for x being set holds (x in X iff x is_upper_min_depend_of G))))
proof
defpred P[ set ]
 means
$1 is_upper_min_depend_of G;
consider X being set such that A1: (for x being set holds (x in X iff (x in ( bool Y ) & P[ x ]))) from XBOOLE_0:sch 1;
A2: ( union X ) c= Y
proof
let y being set;
assume y in ( union X );
then consider a being set such that A3: y in a and A4: a in X by TARSKI:def 4;
a in ( bool Y ) by A1,A4;
hence thesis by A3;
end;
assume A5: G <> ( {} );
then consider g being set such that A6: g in G by XBOOLE_0:def 1;
reconsider g as (a_partition of Y) by A6,PARTIT1:def 3;
A7: ( union g ) = Y by EQREL_1:def 4;
A8: (for x being set holds (x in X iff x is_upper_min_depend_of G))
proof
let x being set;
(for x being set holds (x is_upper_min_depend_of G implies x in ( bool Y )))
proof
let x being set;
assume x is_upper_min_depend_of G;
then x is_a_dependent_set_of g by A6,CKB5:def 1;
then (ex A being set st ((A c= g & A <> ( {} )) & x = ( union A ))) by PARTIT1:def 1;
then x c= ( union g ) by ZFMISC_1:77;
hence thesis by A7;
end;
then (x is_upper_min_depend_of G implies (x is_upper_min_depend_of G & x in ( bool Y )));
hence thesis by A1;
end;
Y c= ( union X )
proof
let y being set;
assume y in Y;
then reconsider y as (Element of Y);
consider a being (Subset of Y) such that A9: y in a and A10: a is_upper_min_depend_of G by A5,CKB6:1;
a in X by A8,A10;
hence thesis by A9,TARSKI:def 4;
end;
then A11: Y = ( union X ) by A2,XBOOLE_0:def 10;
A12: (for A being set holds (A in g implies (A <> ( {} ) & (for B being set holds (B in g implies (A = B or A misses B)))))) by EQREL_1:def 4;
A13: (for A being (Subset of Y) holds (A in X implies (A <> ( {} ) & (for B being (Subset of Y) holds (B in X implies (A = B or A misses B))))))
proof
let A being (Subset of Y);
assume A in X;
then A14: A is_upper_min_depend_of G by A8;
then A is_a_dependent_set_of g by A6,CKB5:def 1;
then consider Aa being set such that A15: Aa c= g and A16: Aa <> ( {} ) and A17: A = ( union Aa ) by PARTIT1:def 1;
consider aa being set such that A18: aa in Aa by A16,XBOOLE_0:def 1;
A19: aa c= ( union Aa ) by A18,ZFMISC_1:74;
aa <> ( {} ) by A12,A15,A18;
hence A <> ( {} ) by A17,A19;
let B being (Subset of Y);
assume B in X;
then A20: B is_upper_min_depend_of G by A8;
now
assume A21: A meets B;
A22: (for d being (a_partition of Y) holds (d in G implies ( A /\ B ) is_a_dependent_set_of d))
proof
let d being (a_partition of Y);
assume d in G;
then (A is_a_dependent_set_of d & B is_a_dependent_set_of d) by A14,A20,CKB5:def 1;
hence thesis by A21,PARTIT1:9;
end;
( A /\ B ) c= B by XBOOLE_1:17;
then A23: ( A /\ B ) = B by A20,A22,CKB5:def 1;
A24: B c= A
proof
let x being set;
assume x in B;
hence thesis by A23,XBOOLE_0:def 4;
end;
( A /\ B ) c= A by XBOOLE_1:17;
then A25: ( A /\ B ) = A by A14,A22,CKB5:def 1;
A c= B
proof
let x being set;
assume x in A;
hence thesis by A25,XBOOLE_0:def 4;
end;
hence A = B by A24,XBOOLE_0:def 10;
end;
hence thesis;
end;
take X;
X c= ( bool Y )
proof
let x being set;
assume x in X;
hence thesis by A1;
end;
then reconsider X as (Subset-Family of Y);
X is (a_partition of Y) by A11,A13,EQREL_1:def 4;
hence thesis by A8;
end;

thus thesis;
end;
uniqueness
proof
let A1 being (a_partition of Y);
let A2 being (a_partition of Y);
now
assume that
G <> ( {} )
and
A26: (for x being set holds (x in A1 iff x is_upper_min_depend_of G))
and
A27: (for x being set holds (x in A2 iff x is_upper_min_depend_of G));
now
let y being set;
(y in A1 iff y is_upper_min_depend_of G) by A26;
hence (y in A1 iff y in A2) by A27;
end;
hence A1 = A2 by TARSKI:1;
end;
hence thesis;
end;
consistency;
end;
