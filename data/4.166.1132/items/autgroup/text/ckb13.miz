environ
vocabularies STRUCT_0,GROUP_1,GROUP_2,SUBSET_1,GROUP_6,NEWTON,PRE_TOPC,RELAT_1,TARSKI,FUNCT_2,FUNCT_1,XBOOLE_0,BINOP_1,ALGSTR_0,ZFMISC_1,REALSET1,GROUP_5,WELLORD1,AUTGROUP;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,REALSET1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,STRUCT_0,ALGSTR_0,BINOP_1,GROUP_1,GROUP_2,GROUP_3,GROUP_5,GROUP_6,CKB4,CKB12;
definitions FUNCT_1,GROUP_1,GROUP_6,TARSKI,BINOP_1,REALSET1,GROUP_2,GROUP_3,ALGSTR_0,FUNCT_2,CKB4,CKB12;
theorems BINOP_1,FUNCT_1,FUNCT_2,GROUP_1,GROUP_2,GROUP_3,GROUP_5,GROUP_6,REALSET1,RELAT_1,ZFMISC_1,TARSKI,XBOOLE_0,STRUCT_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12;
schemes BINOP_1,FUNCT_2;
registrations XBOOLE_0,FUNCT_1,RELSET_1,FUNCT_2,STRUCT_0,GROUP_1,GROUP_2,GROUP_3,GROUP_6,GR_CY_2;
constructors PARTFUN1,BINOP_1,REALSET1,GROUP_5,GROUP_6,RELSET_1,CKB4,CKB12;
requirements SUBSET,BOOLE;
begin
reserve G for  strict Group;
reserve h for (Homomorphism of G,G);
definition
let G;
func AutGroup G ->  strict Group equals 
multMagma (# ( Aut G ),( AutComp G ) #);
coherence
proof
set H = multMagma (# ( Aut G ),( AutComp G ) #);
A1: (ex e being (Element of H) st (for h being (Element of H) holds ((( h * e ) = h & ( e * h ) = h) & (ex g being (Element of H) st (( h * g ) = e & ( g * h ) = e)))))
proof
reconsider e = ( id (the carrier of G) ) as (Element of H) by CKB6:1;
take e;
let h being (Element of H);
consider A being (Element of ( Aut G )) such that A2: A = h;
( h * e ) = ( A * ( id (the carrier of G) ) ) by A2,CKB12:def 1
.= A by FUNCT_2:17;
hence ( h * e ) = h by A2;
( e * h ) = ( ( id (the carrier of G) ) * A ) by A2,CKB12:def 1
.= A by FUNCT_2:17;
hence ( e * h ) = h by A2;
reconsider g = ( A " ) as (Element of H) by CKB10:1;
take g;
reconsider A as (Homomorphism of G,G) by CKB4:def 1;
A3: A is  one-to-one by CKB4:def 1;
A is  onto by CKB4:def 1;
then A4: ( rng A ) = (the carrier of G) by FUNCT_2:def 3;
thus ( h * g ) = ( A * ( A " ) ) by A2,CKB12:def 1
.= e by A3,A4,FUNCT_2:29;
thus ( g * h ) = ( ( A " ) * A ) by A2,CKB12:def 1
.= e by A3,A4,FUNCT_2:29;
end;
(for f,g,h being (Element of H) holds ( ( f * g ) * h ) = ( f * ( g * h ) ))
proof
let f being (Element of H);
let g being (Element of H);
let h being (Element of H);
reconsider A = f,B = g,C = h as (Element of ( Aut G ));
A5: ( g * h ) = ( B * C ) by CKB12:def 1;
( f * g ) = ( A * B ) by CKB12:def 1;
hence ( ( f * g ) * h ) = ( ( A * B ) * C ) by CKB12:def 1
.= ( A * ( B * C ) ) by RELAT_1:36
.= ( f * ( g * h ) ) by A5,CKB12:def 1;
end;
hence thesis by A1,GROUP_1:def 2,GROUP_1:def 3;
end;
end;
