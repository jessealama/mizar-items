environ
vocabularies NUMBERS,SUBSET_1,INT_1,NAT_1,FINSEQ_1,NEWTON,ARYTM_3,ARYTM_1,RELAT_1,CARD_1,FUNCT_1,CARD_3,FUNCOP_1,ORDINAL4,XBOOLE_0,TARSKI,XXREAL_0,FINSEQ_5,SQUARE_1,INT_2,COMPLEX1,ORDINAL1,ABIAN,FINSEQ_2,FUNCT_7,PARTFUN1,FINSET_1,RFINSEQ,CALCUL_2,REAL_1,ZFMISC_1,INT_5;
notations GROUP_4,INT_1,RVSUM_1,FINSET_1,ORDINAL1,CARD_1,NAT_D,INT_2,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,NAT_3,ABIAN,GR_CY_1,FINSEQ_5,FINSEQ_2,EULER_2,NEWTON,GOBRD10,FINSEQ_7,REAL_1,PEPIN,TARSKI,XBOOLE_0,SUBSET_1,XCMPLX_0,NUMBERS,XXREAL_0,NAT_1,DOMAIN_1,FINSEQ_1,RFINSEQ,FUNCOP_1,CALCUL_2,ZFMISC_1,CARD_3,WSIERP_1,BINOP_1,PROB_3,RECDEF_1,CKB4,CKB11,CKB29;
definitions INT_1,FUNCT_1,XCMPLX_0,SQUARE_1,FINSEQ_2,TARSKI,CALCUL_2,CARD_3,CKB4,CKB11,CKB29;
theorems FINSEQ_1,FINSEQ_7,RELAT_1,FINSEQ_3,FINSEQ_2,ABSVALUE,FINSEQ_5,EULER_2,INT_3,SEQ_2,FINSEQ_4,FUNCT_2,XBOOLE_0,NAT_3,NEWTON,INT_2,NAT_2,WSIERP_1,CARD_1,PEPIN,NAT_1,XCMPLX_1,XREAL_1,HEYTING3,ORDINAL1,EULER_1,XBOOLE_1,TARSKI,RVSUM_1,NUMBERS,INT_1,FUNCT_1,FUNCOP_1,XXREAL_0,NAT_D,HILBERT3,GOBRD10,SERIES_2,GRAPH_5,HILBERT2,RFINSEQ,ZFMISC_1,CARD_2,XREAL_0,FINSEQ_6,CALCUL_2,NAT_4,PROB_3,TOPREAL7,CARD_3,REAL_3,PRE_FF,INT_4,VALUED_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes NAT_1,FUNCT_2,RECDEF_1,FINSEQ_2,FUNCT_7,FINSEQ_1;
registrations XXREAL_0,MEMBERED,RELAT_1,FINSEQ_1,ORDINAL1,WSIERP_1,NUMBERS,XBOOLE_0,XREAL_0,NAT_1,INT_1,FINSET_1,NAT_3,RVSUM_1,FUNCT_1,CARD_1,NEWTON,SUBSET_1,VALUED_0,VALUED_1,FINSEQ_2,PRE_POLY,CARD_3,RELSET_1;
constructors BINARITH,ABIAN,WSIERP_1,PEPIN,UPROOTS,NAT_3,NAT_D,REALSET1,GR_CY_1,FINSEQ_5,GOBRD10,EULER_2,RFINSEQ,GROUP_4,FINSEQ_7,REAL_1,WELLORD2,CALCUL_2,SETFAM_1,PROB_3,SEQ_1,RECDEF_1,BINOP_1,BINOP_2,CLASSES1,RELSET_1,CKB4,CKB11,CKB29;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
reserve a for Integer;
reserve p for Prime;
reserve b for Integer;
theorem
(((p > 2 & ( a gcd p ) = 1) & ( b gcd p ) = 1) implies ( Lege (( a * b ),p) ) = ( ( Lege (a,p) ) * ( Lege (b,p) ) ))
proof
assume that
A1: p > 2
and
A2: ( a gcd p ) = 1
and
A3: ( b gcd p ) = 1;
A4: ( Lege (b,p) ),( b |^ ( ( p -' 1 ) div 2 ) ) are_congruent_mod p by A1,A3,CKB34:1;
( Lege (a,p) ),( a |^ ( ( p -' 1 ) div 2 ) ) are_congruent_mod p by A1,A2,CKB34:1;
then ( ( Lege (a,p) ) * ( Lege (b,p) ) ),( ( a |^ ( ( p -' 1 ) div 2 ) ) * ( b |^ ( ( p -' 1 ) div 2 ) ) ) are_congruent_mod p by A4,INT_1:18;
then ( ( Lege (a,p) ) * ( Lege (b,p) ) ),( ( a * b ) |^ ( ( p -' 1 ) div 2 ) ) are_congruent_mod p by NEWTON:7;
then A5: ( ( a * b ) |^ ( ( p -' 1 ) div 2 ) ),( ( Lege (a,p) ) * ( Lege (b,p) ) ) are_congruent_mod p by INT_1:14;
( ( a * b ) gcd p ) = 1 by A2,A3,WSIERP_1:6;
then ( Lege (( a * b ),p) ),( ( a * b ) |^ ( ( p -' 1 ) div 2 ) ) are_congruent_mod p by A1,CKB34:1;
then ( Lege (( a * b ),p) ),( ( Lege (a,p) ) * ( Lege (b,p) ) ) are_congruent_mod p by A5,INT_1:15;
then A6: p divides ( ( Lege (( a * b ),p) ) - ( ( Lege (a,p) ) * ( Lege (b,p) ) ) ) by INT_2:15;
A7: ((( Lege (b,p) ) = 1 or ( Lege (b,p) ) = ( - 1 )) or ( Lege (b,p) ) = ( 0 )) by CKB30:1;
A8: ((( Lege (a,p) ) = 1 or ( Lege (a,p) ) = ( - 1 )) or ( Lege (a,p) ) = ( 0 )) by CKB30:1;
per cases  by CKB30:1;
suppose A9: ( Lege (( a * b ),p) ) = 1;

now
assume (( Lege (a,p) ) = ( 0 ) or ( Lege (b,p) ) = ( 0 ));
then p = 1 by A6,A9,WSIERP_1:15;
hence contradiction by A1;
end;
hence thesis by A8,A7,A1,A6,A9,NAT_D:7;
end;
suppose A10: ( Lege (( a * b ),p) ) = ( 0 );

A11:now
assume ( ( Lege (a,p) ) * ( Lege (b,p) ) ) = ( - 1 );
then p <= 1 by A6,A10,NAT_D:7;
then p < ( 1 + 1 ) by NAT_1:13;
hence contradiction by A1;
end;
now
assume ( ( Lege (a,p) ) * ( Lege (b,p) ) ) = 1;
then p divides 1 by A6,A10,INT_2:10;
then p <= 1 by NAT_D:7;
then p < ( 1 + 1 ) by NAT_1:13;
hence contradiction by A1;
end;
hence thesis by A8,A7,A11,A10;
end;
suppose A12: ( Lege (( a * b ),p) ) = ( - 1 );

A13:now
assume (( Lege (a,p) ) = ( 0 ) or ( Lege (b,p) ) = ( 0 ));
then (p = 1 or p = ( - 1 )) by A6,A12,INT_2:13;
hence contradiction by INT_2:def 4;
end;
now
assume ( ( Lege (a,p) ) * ( Lege (b,p) ) ) = 1;
then p divides ( - 2 ) by A6,A12;
then p divides 2 by INT_2:10;
hence contradiction by A1,NAT_D:7;
end;
hence thesis by A12,A13,A7,A8;
end;
end;
