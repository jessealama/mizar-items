environ
vocabularies NUMBERS,XBOOLE_0,SUBSET_1,FUNCT_1,FINSEQ_1,TARSKI,RELAT_1,NAT_1,ORDINAL4,ARYTM_3,FINSET_1,CARD_1,ARYTM_1,XXREAL_0,ORDINAL1,TREES_1,AMISTD_3,FINSEQ_2;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,CARD_1,XCMPLX_0,NAT_1,NUMBERS,ORDINAL1,RELAT_1,FUNCT_1,FINSEQ_1,FINSEQ_2,FUNCT_2,FINSET_1,XXREAL_0,CKB1,CKB2,CKB6,CKB15,CKB24,CKB27,CKB29;
definitions TARSKI,FINSET_1,FUNCT_1,WELLORD2,XBOOLE_0,FUNCOP_1,FINSEQ_2,CKB2,CKB15,CKB24;
theorems TARSKI,NAT_1,FINSEQ_1,FINSET_1,FUNCT_1,CARD_1,RELAT_1,GRFUNC_1,CARD_2,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ORDINAL1,ENUMSET1,FINSEQ_2,FINSEQ_3,FUNCOP_1,FUNCT_2,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB28,CKB30,CKB31,CKB32,CKB33,CKB36,CKB37,CKB39,CKB40;
schemes NAT_1,CLASSES1,XBOOLE_0,FUNCT_2;
registrations XBOOLE_0,RELAT_1,FUNCT_1,ORDINAL1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,CARD_1,RELSET_1,FINSEQ_2,FUNCOP_1,CKB25,CKB26,CKB34,CKB35,CKB38;
constructors ENUMSET1,WELLORD2,XXREAL_0,XREAL_0,NAT_1,FINSEQ_1,FINSEQ_2,FUNCOP_1,FUNCT_2,RELSET_1,CKB15,CKB24,CKB29;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve k for (Element of ( NAT ));
reserve n for (Element of ( NAT ));
reserve m for (Element of ( NAT ));
reserve p for (FinSequence of ( NAT ));
set D = { ( {} ) };
definition
let n;
func elementary_tree n -> Tree equals 
( { <* k *>: k < n } \/ { ( {} ) } );
correctness
proof
set IT = ( { <* k *>: k < n } \/ D );
IT is  Tree-like
proof
thus IT c= ( ( NAT ) * )
proof
let x;
assume x in IT;
then A1: (x in { <* k *>: k < n } or x in D) by XBOOLE_0:def 3;
A2: ( {} ) in ( ( NAT ) * ) by FINSEQ_1:49;
now
assume x in { <* k *>: k < n };
then (ex k st (x = <* k *> & k < n));
hence thesis by FINSEQ_1:def 11;
end;
hence thesis by A1,A2,TARSKI:def 1;
end;

thus (for p holds (p in IT implies ( ProperPrefixes p ) c= IT))
proof
let p;
assume p in IT;
then A3: (p in { <* k *>: k < n } or p in D) by XBOOLE_0:def 3;
A4: ( {} ) c= IT by XBOOLE_1:2;
now
assume p in { <* k *>: k < n };
then (ex k st (p = <* k *> & k < n));
then ( ProperPrefixes p ) = D by CKB21:1;
hence thesis by XBOOLE_1:7;
end;
hence thesis by A3,A4,CKB20:1,TARSKI:def 1;
end;

let p;
let k;
let m;
assume ( p ^ <* k *> ) in IT;
then (( p ^ <* k *> ) in { <* j *> where j is (Element of ( NAT )): j < n } or ( p ^ <* k *> ) in D) by XBOOLE_0:def 3;
then consider l being (Element of ( NAT )) such that A5: ( p ^ <* k *> ) = <* l *> and A6: l < n by TARSKI:def 1;
( ( len p ) + ( len <* k *> ) ) = ( len <* l *> ) by A5,FINSEQ_1:22
.= 1 by FINSEQ_1:39;
then ( ( len p ) + 1 ) = ( ( 0 ) + 1 ) by FINSEQ_1:39;
then A7: p = ( {} );
then A8: <* k *> = <* l *> by A5,FINSEQ_1:34;
( <* k *> . 1 ) = k by FINSEQ_1:def 8;
then A9: k = l by A8,FINSEQ_1:def 8;
assume A10: m <= k;
A11: ( p ^ <* m *> ) = <* m *> by A7,FINSEQ_1:34;
m < n by A6,A9,A10,XXREAL_0:2;
then ( p ^ <* m *> ) in { <* j *> where j is (Element of ( NAT )): j < n } by A11;
hence thesis by XBOOLE_0:def 3;
end;
hence thesis;
end;
end;
