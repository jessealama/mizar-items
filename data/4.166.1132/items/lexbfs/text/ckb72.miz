environ
vocabularies NUMBERS,FUNCT_1,CARD_1,RELAT_1,TARSKI,FUNCT_4,FUNCOP_1,XBOOLE_0,SUBSET_1,XXREAL_0,ARYTM_3,FINSET_1,XREAL_0,ORDINAL1,ARYTM_1,NAT_1,ZFMISC_1,FINSEQ_1,UPROOTS,VALUED_0,RELAT_2,BAGORDER,PRE_POLY,WELLORD1,GLIB_000,GLIB_001,ORDINAL4,PBOOLE,PARTFUN1,MCART_1,FUNCT_2,FINSUB_1,CHORD,TOPGEN_1,RCOMP_1,FINSEQ_4,GRAPH_1,MEMBERED,ABIAN,LEXBFS;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,CARD_1,NUMBERS,SUBSET_1,XXREAL_0,VALUED_0,XREAL_0,RELAT_1,RELAT_2,WELLORD1,MEMBERED,XXREAL_2,PARTFUN1,FUNCT_1,FUNCT_2,PBOOLE,ORDINAL1,FINSET_1,XCMPLX_0,NAT_1,NAT_D,FUNCOP_1,FUNCT_4,GLIB_000,GLIB_001,BAGORDER,TERMORD,UPROOTS,CHORD,FINSEQ_1,DOMAIN_1,ABIAN,RELSET_1,RECDEF_1,FINSUB_1,RFUNCT_3,PRE_POLY,CKB7,CKB11,CKB15,CKB18,CKB20,CKB21,CKB26,CKB27,CKB35,CKB36,CKB37,CKB40,CKB41,CKB56,CKB57,CKB58,CKB61,CKB62,CKB63,CKB67,CKB68,CKB69,CKB70,CKB71;
definitions GLIB_000,GLIB_001,FUNCOP_1,TARSKI,CKB7,CKB11,CKB15,CKB20,CKB21,CKB26,CKB27,CKB35,CKB37,CKB41,CKB61,CKB62,CKB63,CKB67,CKB68,CKB71;
theorems AXIOMS,CARD_1,CARD_2,FUNCOP_1,FINSEQ_1,FINSEQ_2,FINSEQ_3,FINSET_1,FUNCT_1,FUNCT_2,FUNCT_4,GLIB_000,GLIB_001,INT_1,NAT_1,BAGORDER,TERMORD,ORDINAL1,PARTFUN1,PBOOLE,NAT_D,XREAL_0,RELAT_1,RELSET_1,TARSKI,XBOOLE_0,XBOOLE_1,XREAL_1,ZFMISC_1,ENUMSET1,CHORD,NECKLACE,FINSEQ_4,WELLORD1,UPROOTS,CARD_FIN,TREES_1,NAT_2,XXREAL_0,XXREAL_2,VALUED_0,MCART_1,FINSUB_1,SYSREL,GRFUNC_1,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB19,CKB20,CKB21,CKB23,CKB24,CKB25,CKB26,CKB27,CKB29,CKB31,CKB33,CKB34,CKB35,CKB37,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB71;
schemes NAT_1,FUNCT_1,RECDEF_1,FRAENKEL,PBOOLE,FUNCT_2,CLASSES1;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,XXREAL_0,XREAL_0,XXREAL_2,NAT_1,INT_1,MEMBERED,FINSEQ_1,CARD_1,UPROOTS,FUNCT_2,GLIB_000,ABIAN,BAGORDER,TERMORD,CARD_FIN,GLIB_001,CHORD,VALUED_0,FINSUB_1,PARTFUN1,RELSET_1,PRE_POLY,CKB8,CKB9,CKB10,CKB17,CKB22,CKB28,CKB30,CKB32,CKB38,CKB39,CKB59,CKB60;
constructors DOMAIN_1,FUNCT_4,XXREAL_2,BAGORDER,TERMORD,UPROOTS,CHORD,RECDEF_1,RFUNCT_3,WELLORD2,RELSET_1,PBOOLE,CKB7,CKB11,CKB15,CKB18,CKB20,CKB21,CKB26,CKB27,CKB35,CKB36,CKB37,CKB41,CKB56,CKB57,CKB61,CKB62,CKB63,CKB67,CKB68,CKB69,CKB70,CKB71;
requirements NUMERALS,SUBSET,BOOLE,REAL,ARITHM;
begin
definition
let G being  finite _Graph;
func LexBFS:CSeq G -> (LexBFS:LabelingSeq of G) means 
:Def17: (( it . ( 0 ) ) = ( LexBFS:Init G ) & (for n being Nat holds ( it . ( n + 1 ) ) = ( LexBFS:Step ( it . n ) )));
existence
proof
defpred P[ (Element of ( NAT )),set,set ]
 means
(($2 is (LexBFS:Labeling of G) implies (ex L being (LexBFS:Labeling of G) st ($2 = L & $3 = ( LexBFS:Step L )))) & ((not $2 is (LexBFS:Labeling of G)) implies $3 = $2));
now
let n being (Element of ( NAT ));
let x being set;
now
per cases ;
suppose x is (LexBFS:Labeling of G);

then reconsider L = x as (LexBFS:Labeling of G);
( LexBFS:Step L ) = ( LexBFS:Step L );
hence (ex y being set st P[ n,x,y ]);
end;
suppose (not x is (LexBFS:Labeling of G));

hence (ex y being set st P[ n,x,y ]);
end;
end;
hence (ex y being set st P[ n,x,y ]);
end;
then A1: (for n being (Element of ( NAT )) holds (for x being set holds (ex y being set st P[ n,x,y ])));
consider IT being Function such that A2: ((( dom IT ) = ( NAT ) & ( IT . ( 0 ) ) = ( LexBFS:Init G )) & (for n being (Element of ( NAT )) holds P[ n,( IT . n ),( IT . ( n + 1 ) ) ])) from RECDEF_1:sch 1(A1);
reconsider IT as (ManySortedSet of ( NAT )) by A2,PARTFUN1:def 2,RELAT_1:def 18;
defpred P2[ Nat ]
 means
( IT . $1 ) is (LexBFS:Labeling of G);
A3:now
let n being Nat;
assume A4: P2[ n ];
n in ( NAT ) by ORDINAL1:def 12;
then (ex Gn being (LexBFS:Labeling of G) st (( IT . n ) = Gn & ( IT . ( n + 1 ) ) = ( LexBFS:Step Gn ))) by A2,A4;
hence P2[ ( n + 1 ) ];
end;
A5: P2[ ( 0 ) ] by A2;
(for n being Nat holds P2[ n ]) from NAT_1:sch 2(A5,A3);
then reconsider IT as (LexBFS:LabelingSeq of G) by CKB68:def 1;
take IT;
thus ( IT . ( 0 ) ) = ( LexBFS:Init G ) by A2;
let n being Nat;
n in ( NAT ) by ORDINAL1:def 12;
then (ex Gn being (LexBFS:Labeling of G) st (( IT . n ) = Gn & ( IT . ( n + 1 ) ) = ( LexBFS:Step Gn ))) by A2;
hence thesis;
end;
uniqueness
proof
let IT1 being (LexBFS:LabelingSeq of G);
let IT2 being (LexBFS:LabelingSeq of G);
assume that
A6: ( IT1 . ( 0 ) ) = ( LexBFS:Init G )
and
A7: (for n being Nat holds ( IT1 . ( n + 1 ) ) = ( LexBFS:Step ( IT1 . n ) ))
and
A8: ( IT2 . ( 0 ) ) = ( LexBFS:Init G )
and
A9: (for n being Nat holds ( IT2 . ( n + 1 ) ) = ( LexBFS:Step ( IT2 . n ) ));
defpred P[ Nat ]
 means
( IT1 . $1 ) = ( IT2 . $1 );
now
let n being Nat;
assume P[ n ];
then ( IT1 . ( n + 1 ) ) = ( LexBFS:Step ( IT2 . n ) ) by A7
.= ( IT2 . ( n + 1 ) ) by A9;
hence P[ ( n + 1 ) ];
end;
then A10: (for n being (Element of ( NAT )) holds (P[ n ] implies P[ ( n + 1 ) ]));
A11: P[ ( 0 ) ] by A6,A8;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A11,A10);
then (for n being set holds (n in ( NAT ) implies ( IT1 . n ) = ( IT2 . n )));
hence IT1 = IT2 by PBOOLE:3;
end;
end;
