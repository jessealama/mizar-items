environ
vocabularies XBOOLE_0,SUBSET_1,PARTFUN1,RELAT_1,FUNCT_1,TARSKI,FUNCOP_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,CKB6,CKB12,CKB21;
definitions TARSKI,XBOOLE_0,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,RELSET_1,XBOOLE_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes FUNCT_2,XBOOLE_0,CKB32,CKB33;
registrations FUNCT_1,RELSET_1;
constructors PARTFUN1,FUNCOP_1,RELSET_1,CKB6,CKB12,CKB21;
requirements SUBSET,BOOLE;
begin
scheme UnPartFuncD { C,D() -> non empty set,X() -> set,F(set) -> (Element of D()) } : (for f,g being (PartFunc of C(),D()) holds (((( dom f ) = X() & (for c being (Element of C()) holds (c in ( dom f ) implies ( f /. c ) = F(c)))) & (( dom g ) = X() & (for c being (Element of C()) holds (c in ( dom g ) implies ( g /. c ) = F(c))))) implies f = g))
proof
let f being (PartFunc of C(),D()),g being (PartFunc of C(),D());
assume that
A1: ( dom f ) = X()
and
A2: (for c being (Element of C()) holds (c in ( dom f ) implies ( f /. c ) = F(c)))
and
A3: ( dom g ) = X()
and
A4: (for c being (Element of C()) holds (c in ( dom g ) implies ( g /. c ) = F(c)));
now
let c being (Element of C());
assume A5: c in ( dom f );
hence ( f /. c ) = F(c) by A2
.= ( g /. c ) by A1,A3,A4,A5;
end;
hence thesis by A1,A3,CKB1:1;
end;
