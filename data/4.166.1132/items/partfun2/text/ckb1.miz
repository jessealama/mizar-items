environ
vocabularies XBOOLE_0,SUBSET_1,PARTFUN1,RELAT_1,FUNCT_1,TARSKI,FUNCOP_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1;
definitions TARSKI,XBOOLE_0,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,RELSET_1,XBOOLE_0;
schemes FUNCT_2,XBOOLE_0;
registrations FUNCT_1,RELSET_1;
constructors PARTFUN1,FUNCOP_1,RELSET_1;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve C for non  empty set;
reserve D for non  empty set;
reserve c for (Element of C);
reserve f for (PartFunc of C,D);
reserve g for (PartFunc of C,D);
theorem
Th3: ((( dom f ) = ( dom g ) & (for c holds (c in ( dom f ) implies ( f /. c ) = ( g /. c )))) implies f = g)
proof
assume that
A1: ( dom f ) = ( dom g )
and
A2: (for c holds (c in ( dom f ) implies ( f /. c ) = ( g /. c )));
now
let x;
assume A3: x in ( dom f );
then reconsider y = x as (Element of C);
( f /. y ) = ( g /. y ) by A2,A3;
then ( (f qua Function) . y ) = ( g /. y ) by A3,PARTFUN1:def 6;
hence ( (f qua Function) . x ) = ( (g qua Function) . x ) by A1,A3,PARTFUN1:def 6;
end;
hence thesis by A1,FUNCT_1:2;
end;
