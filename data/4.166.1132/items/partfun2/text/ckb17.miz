environ
vocabularies XBOOLE_0,SUBSET_1,PARTFUN1,RELAT_1,FUNCT_1,TARSKI,FUNCOP_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,CKB6,CKB12;
definitions TARSKI,XBOOLE_0,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,RELSET_1,XBOOLE_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15,CKB16;
schemes FUNCT_2,XBOOLE_0;
registrations FUNCT_1,RELSET_1;
constructors PARTFUN1,FUNCOP_1,RELSET_1,CKB6,CKB12;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve X for set;
reserve C for non empty set;
reserve D for non empty set;
reserve c for (Element of C);
reserve f for (PartFunc of C,D);
reserve g for (PartFunc of C,D);
theorem
Th32: (g = ( f | X ) iff (( dom g ) = ( ( dom f ) /\ X ) & (for c holds (c in ( dom g ) implies ( g /. c ) = ( f /. c )))))
proof
thus (g = ( f | X ) implies (( dom g ) = ( ( dom f ) /\ X ) & (for c holds (c in ( dom g ) implies ( g /. c ) = ( f /. c )))))
proof
assume A1: g = ( f | X );
hence ( dom g ) = ( ( dom f ) /\ X ) by RELAT_1:61;
let c;
assume A2: c in ( dom g );
then ( (g qua Function) . c ) = ( (f qua Function) . c ) by A1,FUNCT_1:47;
then A3: ( g /. c ) = ( (f qua Function) . c ) by A2,PARTFUN1:def 6;
( dom g ) = ( ( dom f ) /\ X ) by A1,RELAT_1:61;
then c in ( dom f ) by A2,XBOOLE_0:def 4;
hence thesis by A3,PARTFUN1:def 6;
end;

assume that
A4: ( dom g ) = ( ( dom f ) /\ X )
and
A5: (for c holds (c in ( dom g ) implies ( g /. c ) = ( f /. c )));
now
let x;
assume A6: x in ( dom g );
then reconsider y = x as (Element of C);
( g /. y ) = ( f /. y ) by A5,A6;
then A7: ( (g qua Function) . y ) = ( f /. y ) by A6,PARTFUN1:def 6;
x in ( dom f ) by A4,A6,XBOOLE_0:def 4;
hence ( (g qua Function) . x ) = ( (f qua Function) . x ) by A7,PARTFUN1:def 6;
end;
hence thesis by A4,FUNCT_1:46;
end;
