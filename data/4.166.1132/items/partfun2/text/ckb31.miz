environ
vocabularies XBOOLE_0,SUBSET_1,PARTFUN1,RELAT_1,FUNCT_1,TARSKI,FUNCOP_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,CKB6,CKB12,CKB21;
definitions TARSKI,XBOOLE_0,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,RELSET_1,XBOOLE_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30;
schemes FUNCT_2,XBOOLE_0;
registrations FUNCT_1,RELSET_1;
constructors PARTFUN1,FUNCOP_1,RELSET_1,CKB6,CKB12,CKB21;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve C for non  empty set;
reserve D for non  empty set;
reserve c for (Element of C);
reserve f for (PartFunc of C,D);
reserve g for (PartFunc of C,D);
theorem
(f tolerates g iff (for c holds (c in ( ( dom f ) /\ ( dom g ) ) implies ( f /. c ) = ( g /. c ))))
proof
thus (f tolerates g implies (for c holds (c in ( ( dom f ) /\ ( dom g ) ) implies ( f /. c ) = ( g /. c ))))
proof
assume A1: f tolerates g;
let c;
assume A2: c in ( ( dom f ) /\ ( dom g ) );
then A3: c in ( dom f ) by XBOOLE_0:def 4;
( (f qua Function) . c ) = ( (g qua Function) . c ) by A1,A2,PARTFUN1:def 4;
then A4: ( f /. c ) = ( (g qua Function) . c ) by A3,PARTFUN1:def 6;
c in ( dom g ) by A2,XBOOLE_0:def 4;
hence thesis by A4,PARTFUN1:def 6;
end;

assume A5: (for c holds (c in ( ( dom f ) /\ ( dom g ) ) implies ( f /. c ) = ( g /. c )));
now
let x;
assume A6: x in ( ( dom f ) /\ ( dom g ) );
then reconsider x1 = x as (Element of C);
(x in ( dom f ) & ( f /. x1 ) = ( g /. x1 )) by A5,A6,XBOOLE_0:def 4;
then A7: ( (f qua Function) . x ) = ( g /. x1 ) by PARTFUN1:def 6;
x in ( dom g ) by A6,XBOOLE_0:def 4;
hence ( (f qua Function) . x ) = ( (g qua Function) . x ) by A7,PARTFUN1:def 6;
end;
hence thesis by PARTFUN1:def 4;
end;
