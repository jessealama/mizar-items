environ
vocabularies XBOOLE_0,SUBSET_1,PARTFUN1,RELAT_1,FUNCT_1,TARSKI,FUNCOP_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,CKB6,CKB12;
definitions TARSKI,XBOOLE_0,FUNCT_1;
theorems TARSKI,FUNCT_1,FUNCT_2,GRFUNC_1,FUNCOP_1,PARTFUN1,RELAT_1,RELSET_1,XBOOLE_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB7,CKB8,CKB9,CKB10,CKB11,CKB13,CKB14,CKB15;
schemes FUNCT_2,XBOOLE_0;
registrations FUNCT_1,RELSET_1;
constructors PARTFUN1,FUNCOP_1,RELSET_1,CKB6,CKB12;
requirements SUBSET,BOOLE;
begin
reserve x for set;
reserve y for set;
reserve C for non  empty set;
reserve D for non  empty set;
reserve c for (Element of C);
reserve d for (Element of D);
reserve f for (PartFunc of C,D);
reserve t for (PartFunc of D,C);
theorem
((((f is  one-to-one & ( dom f ) = ( rng t )) & ( rng f ) = ( dom t )) & (for c holds (for d holds ((c in ( dom f ) & d in ( dom t )) implies (( f /. c ) = d iff ( t /. d ) = c))))) implies t = ( f " ))
proof
assume that
A1: ((f is  one-to-one & ( dom f ) = ( rng t )) & ( rng f ) = ( dom t ))
and
A2: (for c holds (for d holds ((c in ( dom f ) & d in ( dom t )) implies (( f /. c ) = d iff ( t /. d ) = c))));
now
let x;
let y;
assume that
A3: x in ( dom f )
and
A4: y in ( dom t );
reconsider y1 = y as (Element of D) by A4;
reconsider x1 = x as (Element of C) by A3;
thus (( (f qua Function) . x ) = y implies ( (t qua Function) . y ) = x)
proof
assume ( (f qua Function) . x ) = y;
then ( f /. x1 ) = y1 by A3,PARTFUN1:def 6;
then ( t /. y1 ) = x1 by A2,A3,A4;
hence thesis by A4,PARTFUN1:def 6;
end;

assume ( (t qua Function) . y ) = x;
then ( t /. y1 ) = x1 by A4,PARTFUN1:def 6;
then ( f /. x1 ) = y1 by A2,A3,A4;
hence ( (f qua Function) . x ) = y by A3,PARTFUN1:def 6;
end;
hence thesis by A1,FUNCT_1:38;
end;
