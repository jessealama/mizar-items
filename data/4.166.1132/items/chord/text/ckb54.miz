environ
vocabularies NUMBERS,XCMPLX_0,ORDINAL1,ARYTM_1,XXREAL_0,NAT_1,CARD_1,ARYTM_3,ABIAN,SUBSET_1,RELAT_1,INT_1,FINSEQ_1,FUNCT_1,FINSEQ_4,XBOOLE_0,FINSET_1,GRAPH_2,ORDINAL4,GLIB_000,GLIB_001,TARSKI,ZFMISC_1,RCOMP_1,GRAPH_1,RELAT_2,REWRITE1,FUNCOP_1,GLIB_002,PARTFUN1,MEMBERED,TOPGEN_1,CHORD;
notations TARSKI,XBOOLE_0,SUBSET_1,XXREAL_2,ORDINAL1,INT_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,CARD_1,FINSET_1,NAT_1,ZFMISC_1,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,ABIAN,ENUMSET1,FINSEQ_4,NUMBERS,GRAPH_2,MEMBERED,CKB18,CKB38,CKB49;
definitions TARSKI,XBOOLE_0,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,CKB18,CKB38,CKB49;
theorems FINSEQ_1,FUNCT_1,GLIB_000,GLIB_001,GLIB_002,GRAPH_2,GRAPH_3,TREES_1,INT_1,JORDAN12,NAT_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,FUNCOP_1,FUNCT_2,FINSEQ_3,FINSEQ_4,ZFMISC_1,ABIAN,CARD_2,ENUMSET1,FINSEQ_2,XREAL_1,MEMBERED,FINSEQ_5,XXREAL_0,NAT_D,PARTFUN1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53;
schemes NAT_1,GRAPH_5,FUNCT_2,FRAENKEL,CKB35;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GLIB_001,GLIB_002,FUNCT_2,XXREAL_2,CARD_1,RELSET_1;
constructors DOMAIN_1,REAL_1,NAT_D,FINSEQ_4,GRAPH_2,GLIB_001,GLIB_002,VALUED_1,XXREAL_2,RELSET_1,CKB18,CKB38,CKB49;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th48: (for G being _Graph holds (for v1,v2,v3,v4 being (Vertex of G) holds ((((((((v1 <> v2 & v1 <> v3) & v2 <> v3) & v2 <> v4) & v3 <> v4) & v1,v2 are_adjacent ) & v2,v3 are_adjacent ) & v3,v4 are_adjacent ) implies (ex P being (Path of G) st ((((((( len P ) = 7 & ( P .length() ) = 3) & ( P .vertices() ) = { v1,v2,v3,v4 }) & ( P . 1 ) = v1) & ( P . 3 ) = v2) & ( P . 5 ) = v3) & ( P . 7 ) = v4)))))
proof
let G being _Graph;
let v1 being (Vertex of G),v2 being (Vertex of G),v3 being (Vertex of G),v4 being (Vertex of G);
assume that
A1: v1 <> v2
and
A2: v1 <> v3
and
A3: v2 <> v3
and
A4: v2 <> v4
and
A5: v3 <> v4
and
A6: v1,v2 are_adjacent 
and
A7: v2,v3 are_adjacent 
and
A8: v3,v4 are_adjacent ;
consider R being (Path of G),e1 being set,e2 being set such that A9: R is  open and A10: ( len R ) = 5 and ( R .length() ) = 2 and A11: e1 Joins v1,v2,G and A12: e2 Joins v2,v3,G and A13: ( R .edges() ) = { e1,e2 } and A14: ( R .vertices() ) = { v1,v2,v3 } and A15: ( R . 1 ) = v1 and A16: ( R . 3 ) = v2 and A17: ( R . 5 ) = v3 by A1,A2,A3,A6,A7,CKB53:1;
consider e3 being set such that A18: e3 Joins v3,v4,G by A8,CKB49:def 1;
A19: (for n being  odd (Element of ( NAT )) holds ((1 < n & n <= ( len R )) implies ( R . n ) <> v4))
proof
let n being  odd (Element of ( NAT ));
assume that
A20: 1 < n
and
A21: n <= ( len R );
per cases  by A10,A20,A21,CKB9:1,XXREAL_0:2;
suppose n = 3;

hence thesis by A4,A16;
end;
suppose n = 5;

hence thesis by A5,A17;
end;
end;
A22: e2 <> e3 by A3,A4,A18,A12,GLIB_000:15;
set P = ( R .addEdge e3 );
e1 <> e3 by A2,A3,A18,A11,GLIB_000:15;
then (not e3 in ( R .edges() )) by A13,A22,TARSKI:def 2;
then reconsider P as (Path of G) by A18,A9,A10,A17,A19,GLIB_001:150;
take P;
A23: ( len P ) = ( 5 + 2 ) by A18,A10,A17,GLIB_001:64;
hence ( len P ) = 7;
7 = ( ( 2 * ( P .length() ) ) + 1 ) by A23,GLIB_001:112;
hence ( P .length() ) = 3;
( P .vertices() ) = ( { v1,v2,v3 } \/ { v4 } ) by A18,A10,A14,A17,GLIB_001:95;
hence ( P .vertices() ) = { v1,v2,v3,v4 } by ENUMSET1:6;
1 in ( dom R ) by A10,FINSEQ_3:25;
hence ( P . 1 ) = v1 by A18,A10,A15,A17,GLIB_001:65;
3 in ( dom R ) by A10,FINSEQ_3:25;
hence ( P . 3 ) = v2 by A18,A10,A16,A17,GLIB_001:65;
5 in ( dom R ) by A10,FINSEQ_3:25;
hence ( P . 5 ) = v3 by A18,A10,A17,GLIB_001:65;
( P .last() ) = v4 by A18,A10,A17,GLIB_001:63;
hence thesis by A23;
end;
