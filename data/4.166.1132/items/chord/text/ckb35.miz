environ
vocabularies NUMBERS,XCMPLX_0,ORDINAL1,ARYTM_1,XXREAL_0,NAT_1,CARD_1,ARYTM_3,ABIAN,SUBSET_1,RELAT_1,INT_1,FINSEQ_1,FUNCT_1,FINSEQ_4,XBOOLE_0,FINSET_1,GRAPH_2,ORDINAL4,GLIB_000,GLIB_001,TARSKI,ZFMISC_1,RCOMP_1,GRAPH_1,RELAT_2,REWRITE1,FUNCOP_1,GLIB_002,PARTFUN1,MEMBERED,TOPGEN_1,CHORD;
notations TARSKI,XBOOLE_0,SUBSET_1,XXREAL_2,ORDINAL1,INT_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,CARD_1,FINSET_1,NAT_1,ZFMISC_1,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,ABIAN,ENUMSET1,FINSEQ_4,NUMBERS,GRAPH_2,MEMBERED,CKB18;
definitions TARSKI,XBOOLE_0,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,CKB18;
theorems FINSEQ_1,FUNCT_1,GLIB_000,GLIB_001,GLIB_002,GRAPH_2,GRAPH_3,TREES_1,INT_1,JORDAN12,NAT_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,FUNCOP_1,FUNCT_2,FINSEQ_3,FINSEQ_4,ZFMISC_1,ABIAN,CARD_2,ENUMSET1,FINSEQ_2,XREAL_1,MEMBERED,FINSEQ_5,XXREAL_0,NAT_D,PARTFUN1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34;
schemes NAT_1,GRAPH_5,FUNCT_2,FRAENKEL;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GLIB_001,GLIB_002,FUNCT_2,XXREAL_2,CARD_1,RELSET_1;
constructors DOMAIN_1,REAL_1,NAT_D,FINSEQ_4,GRAPH_2,GLIB_001,GLIB_002,VALUED_1,XXREAL_2,RELSET_1,CKB18;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
scheme FinGraphOrderCompInd { P[set] } : (for G being  finite _Graph holds P[ G ])
provided
A1: (for k being non zero  natural number holds ((for Gk being  finite _Graph holds (( Gk .order() ) < k implies P[ Gk ])) implies (for Gk1 being  finite _Graph holds (( Gk1 .order() ) = k implies P[ Gk1 ]))))
proof
let G being  finite _Graph;
defpred pP[ non zero Nat ]
 means
(for Gk being  finite _Graph holds (( Gk .order() ) < $1 implies P[ Gk ]));
A2: (for n being non zero Nat holds (pP[ n ] implies pP[ ( n + 1 ) ]))
proof
let n being non zero Nat;
assume that
A3: pP[ n ];
now
let Gk being  finite _Graph;
assume ( Gk .order() ) < ( n + 1 );
then ( Gk .order() ) <= n by NAT_1:13;
then (( Gk .order() ) < n or ( Gk .order() ) = n) by XXREAL_0:1;
hence P[ Gk ] by A1,A3;
end;
hence thesis;
end;
A4: pP[ 1 ] by NAT_1:14;
(for k being non zero Nat holds pP[ k ]) from NAT_1:sch 10(A4,A2);
then (for Gk being  finite _Graph holds (( Gk .order() ) < ( G .order() ) implies P[ Gk ]));
hence thesis by A1;
end;
