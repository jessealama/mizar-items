environ
vocabularies NUMBERS,XCMPLX_0,ORDINAL1,ARYTM_1,XXREAL_0,NAT_1,CARD_1,ARYTM_3,ABIAN,SUBSET_1,RELAT_1,INT_1,FINSEQ_1,FUNCT_1,FINSEQ_4,XBOOLE_0,FINSET_1,GRAPH_2,ORDINAL4,GLIB_000,GLIB_001,TARSKI,ZFMISC_1,RCOMP_1,GRAPH_1,RELAT_2,REWRITE1,FUNCOP_1,GLIB_002,PARTFUN1,MEMBERED,TOPGEN_1,CHORD;
notations TARSKI,XBOOLE_0,SUBSET_1,XXREAL_2,ORDINAL1,INT_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,CARD_1,FINSET_1,NAT_1,ZFMISC_1,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,ABIAN,ENUMSET1,FINSEQ_4,NUMBERS,GRAPH_2,MEMBERED,CKB18,CKB38,CKB49,CKB55,CKB66,CKB69,CKB76,CKB83;
definitions TARSKI,XBOOLE_0,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,CKB18,CKB38,CKB49,CKB55,CKB66,CKB69,CKB76,CKB83;
theorems FINSEQ_1,FUNCT_1,GLIB_000,GLIB_001,GLIB_002,GRAPH_2,GRAPH_3,TREES_1,INT_1,JORDAN12,NAT_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,FUNCOP_1,FUNCT_2,FINSEQ_3,FINSEQ_4,ZFMISC_1,ABIAN,CARD_2,ENUMSET1,FINSEQ_2,XREAL_1,MEMBERED,FINSEQ_5,XXREAL_0,NAT_D,PARTFUN1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84;
schemes NAT_1,GRAPH_5,FUNCT_2,FRAENKEL,CKB35;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GLIB_001,GLIB_002,FUNCT_2,XXREAL_2,CARD_1,RELSET_1,CKB71,CKB72,CKB73;
constructors DOMAIN_1,REAL_1,NAT_D,FINSEQ_4,GRAPH_2,GLIB_001,GLIB_002,VALUED_1,XXREAL_2,RELSET_1,CKB18,CKB38,CKB49,CKB55,CKB66,CKB69,CKB76,CKB83;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th71: (for G being _Graph holds (for a,b being (Vertex of G) holds ((a <> b & (not a,b are_adjacent )) implies (for S being (Subset of ( the_Vertices_of G )) holds (S is (VertexSeparator of a,b) iff (((not a in S) & (not b in S)) & (for W being (Walk of G) holds (W is_Walk_from a,b implies (ex x being (Vertex of G) st (x in S & x in ( W .vertices() )))))))))))
proof
let G being _Graph;
let a being (Vertex of G),b being (Vertex of G);
assume that
A1: a <> b
and
A2: (not a,b are_adjacent );
let S being (Subset of ( the_Vertices_of G ));
hereby
assume A3: S is (VertexSeparator of a,b);
hence ((not a in S) & (not b in S)) by A1,A2,CKB83:def 1;
then A4: ( ( the_Vertices_of G ) \ S ) is non empty by XBOOLE_0:def 5;
let W being (Walk of G);
assume that
A5: W is_Walk_from a,b;
now
assume A6: (not (ex x being (Vertex of G) st (x in S & x in ( W .vertices() ))));
let G2 being (removeVertices of G,S);
A7: ( the_Vertices_of G2 ) = ( ( the_Vertices_of G ) \ S ) by A4,GLIB_000:def 37;
then A8: ( the_Edges_of G2 ) = ( G .edgesBetween ( the_Vertices_of G2 ) ) by GLIB_000:def 37;
A9: ( W .edges() ) c= ( G .edgesBetween ( W .vertices() ) ) by GLIB_001:109;
now
let x being set;
assume that
A10: x in ( W .vertices() );
(not x in S) by A6,A10;
hence x in ( the_Vertices_of G2 ) by A7,A10,XBOOLE_0:def 5;
end;
then A11: ( W .vertices() ) c= ( the_Vertices_of G2 ) by TARSKI:def 3;
then ( G .edgesBetween ( W .vertices() ) ) c= ( G .edgesBetween ( the_Vertices_of G2 ) ) by GLIB_000:36;
then ( W .edges() ) c= ( the_Edges_of G2 ) by A8,A9,XBOOLE_1:1;
then reconsider W2 = W as (Walk of G2) by A11,GLIB_001:170;
( W .last() ) = b by A5,GLIB_001:def 23;
then A12: ( W2 .last() ) = b;
( W .first() ) = a by A5,GLIB_001:def 23;
then ( W2 .first() ) = a;
then W2 is_Walk_from a,b by A12,GLIB_001:def 23;
hence contradiction by A1,A2,A3,CKB83:def 1;
end;
hence (ex x being (Vertex of G) st (x in S & x in ( W .vertices() )));
end;
assume that
A13: (not a in S)
and
A14: (not b in S)
and
A15: (for W being (Walk of G) holds (W is_Walk_from a,b implies (ex x being (Vertex of G) st (x in S & x in ( W .vertices() )))));
now
let G2 being (removeVertices of G,S);
given W being (Walk of G2) such that
A16: W is_Walk_from a,b;

reconsider W2 = W as (Walk of G) by GLIB_001:167;
( W .last() ) = b by A16,GLIB_001:def 23;
then A17: ( W2 .last() ) = b;
now
let x being set;
hereby
assume x in ( W2 .vertices() );
then (ex n being  odd (Element of ( NAT )) st (n <= ( len W ) & ( W . n ) = x)) by GLIB_001:87;
hence x in ( W .vertices() ) by GLIB_001:87;
end;
assume x in ( W .vertices() );
then (ex n being  odd (Element of ( NAT )) st (n <= ( len W2 ) & ( W2 . n ) = x)) by GLIB_001:87;
hence x in ( W2 .vertices() ) by GLIB_001:87;
end;
then A18: ( W2 .vertices() ) = ( W .vertices() ) by TARSKI:1;
( ( the_Vertices_of G ) \ S ) is non empty by A13,XBOOLE_0:def 5;
then ( the_Vertices_of G2 ) = ( ( the_Vertices_of G ) \ S ) by GLIB_000:def 37;
then A19: (for x being (Vertex of G) holds (not (x in S & x in ( W2 .vertices() )))) by A18,XBOOLE_0:def 5;
( W .first() ) = a by A16,GLIB_001:def 23;
then ( W2 .first() ) = a;
then W2 is_Walk_from a,b by A17,GLIB_001:def 23;
hence contradiction by A15,A19;
end;
hence thesis by A1,A2,A13,A14,CKB83:def 1;
end;
