environ
vocabularies NUMBERS,XCMPLX_0,ORDINAL1,ARYTM_1,XXREAL_0,NAT_1,CARD_1,ARYTM_3,ABIAN,SUBSET_1,RELAT_1,INT_1,FINSEQ_1,FUNCT_1,FINSEQ_4,XBOOLE_0,FINSET_1,GRAPH_2,ORDINAL4,GLIB_000,GLIB_001,TARSKI,ZFMISC_1,RCOMP_1,GRAPH_1,RELAT_2,REWRITE1,FUNCOP_1,GLIB_002,PARTFUN1,MEMBERED,TOPGEN_1,CHORD;
notations TARSKI,XBOOLE_0,SUBSET_1,XXREAL_2,ORDINAL1,INT_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,CARD_1,FINSET_1,NAT_1,ZFMISC_1,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,ABIAN,ENUMSET1,FINSEQ_4,NUMBERS,GRAPH_2,MEMBERED,CKB18,CKB38,CKB49,CKB55;
definitions TARSKI,XBOOLE_0,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,CKB18,CKB38,CKB49,CKB55;
theorems FINSEQ_1,FUNCT_1,GLIB_000,GLIB_001,GLIB_002,GRAPH_2,GRAPH_3,TREES_1,INT_1,JORDAN12,NAT_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,FUNCOP_1,FUNCT_2,FINSEQ_3,FINSEQ_4,ZFMISC_1,ABIAN,CARD_2,ENUMSET1,FINSEQ_2,XREAL_1,MEMBERED,FINSEQ_5,XXREAL_0,NAT_D,PARTFUN1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63;
schemes NAT_1,GRAPH_5,FUNCT_2,FRAENKEL,CKB35;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GLIB_001,GLIB_002,FUNCT_2,XXREAL_2,CARD_1,RELSET_1;
constructors DOMAIN_1,REAL_1,NAT_D,FINSEQ_4,GRAPH_2,GLIB_001,GLIB_002,VALUED_1,XXREAL_2,RELSET_1,CKB18,CKB38,CKB49,CKB55;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th57: (for G being _Graph holds (for G0 being (Subgraph of G) holds (for S being non empty (Subset of ( the_Vertices_of G )) holds (for x being (Vertex of G) holds (for G1 being (inducedSubgraph of G,S) holds (for G2 being (inducedSubgraph of G,( S \/ { x } )) holds ((G1 is  connected & x in ( G .AdjacentSet ( the_Vertices_of G1 ) )) implies G2 is  connected)))))))
proof
let G being _Graph;
let G0 being (Subgraph of G);
let S being non empty (Subset of ( the_Vertices_of G ));
let x being (Vertex of G);
let G1 being (inducedSubgraph of G,S);
let G2 being (inducedSubgraph of G,( S \/ { x } ));
assume that
A1: G1 is  connected
and
A2: x in ( G .AdjacentSet ( the_Vertices_of G1 ) );
A3: ( the_Vertices_of G1 ) = S by GLIB_000:def 37;
then consider xs being (Vertex of G) such that A4: xs in S and A5: x,xs are_adjacent  by A2,CKB57:1;
consider e being set such that A6: e Joins x,xs,G by A5,CKB49:def 1;
reconsider Sx = ( S \/ { x } ) as (Subset of ( the_Vertices_of G ));
let u being (Vertex of G2),v being (Vertex of G2);
A7: ( the_Vertices_of G2 ) = Sx by GLIB_000:def 37;
then A8: (u in S or u in { x }) by XBOOLE_0:def 3;
x in { x } by TARSKI:def 1;
then A9: x in Sx by XBOOLE_0:def 3;
A10: xs in Sx by A4,XBOOLE_0:def 3;
e Joins xs,x,G by A6,GLIB_000:14;
then A11: e Joins xs,x,G2 by A9,A10,CKB22:1;
then A12: e Joins x,xs,G2 by GLIB_000:14;
A13: (v in S or v in { x }) by A7,XBOOLE_0:def 3;
A14: G1 is (inducedSubgraph of G2,S) by CKB33:1,XBOOLE_1:7;
per cases  by A8,A13,TARSKI:def 1;
suppose A15: (u in S & v in S);

( the_Vertices_of G1 ) = S by GLIB_000:def 37;
then consider W being (Walk of G1) such that A16: W is_Walk_from u,v by A1,A15,GLIB_002:def 1;
reconsider W as (Walk of G2) by A14,GLIB_001:167;
take W;
thus thesis by A16,GLIB_001:19;
end;
suppose A17: (u in S & v = x);

then consider W being (Walk of G1) such that A18: W is_Walk_from u,xs by A1,A3,A4,GLIB_002:def 1;
reconsider W as (Walk of G2) by A14,GLIB_001:167;
take ( W .append ( G2 .walkOf (xs,e,x) ) );
A19: ( G2 .walkOf (xs,e,x) ) is_Walk_from xs,x by A11,GLIB_001:15;
W is_Walk_from u,xs by A18,GLIB_001:19;
hence thesis by A17,A19,GLIB_001:31;
end;
suppose A20: (u = x & v in S);

then consider W being (Walk of G1) such that A21: W is_Walk_from xs,v by A1,A3,A4,GLIB_002:def 1;
reconsider W as (Walk of G2) by A14,GLIB_001:167;
take ( ( G2 .walkOf (x,e,xs) ) .append W );
A22: ( G2 .walkOf (x,e,xs) ) is_Walk_from x,xs by A12,GLIB_001:15;
W is_Walk_from xs,v by A21,GLIB_001:19;
hence thesis by A20,A22,GLIB_001:31;
end;
suppose (u = x & v = x);

then ( G2 .walkOf u ) is_Walk_from u,v by GLIB_001:13;
hence thesis;
end;
end;
