environ
vocabularies NUMBERS,XCMPLX_0,ORDINAL1,ARYTM_1,XXREAL_0,NAT_1,CARD_1,ARYTM_3,ABIAN,SUBSET_1,RELAT_1,INT_1,FINSEQ_1,FUNCT_1,FINSEQ_4,XBOOLE_0,FINSET_1,GRAPH_2,ORDINAL4,GLIB_000,GLIB_001,TARSKI,ZFMISC_1,RCOMP_1,GRAPH_1,RELAT_2,REWRITE1,FUNCOP_1,GLIB_002,PARTFUN1,MEMBERED,TOPGEN_1,CHORD;
notations TARSKI,XBOOLE_0,SUBSET_1,XXREAL_2,ORDINAL1,INT_1,XCMPLX_0,XXREAL_0,DOMAIN_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,CARD_1,FINSET_1,NAT_1,ZFMISC_1,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,ABIAN,ENUMSET1,FINSEQ_4,NUMBERS,GRAPH_2,MEMBERED,CKB18,CKB38;
definitions TARSKI,XBOOLE_0,GLIB_000,GLIB_001,GLIB_002,FUNCOP_1,CKB18,CKB38;
theorems FINSEQ_1,FUNCT_1,GLIB_000,GLIB_001,GLIB_002,GRAPH_2,GRAPH_3,TREES_1,INT_1,JORDAN12,NAT_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XBOOLE_1,FUNCOP_1,FUNCT_2,FINSEQ_3,FINSEQ_4,ZFMISC_1,ABIAN,CARD_2,ENUMSET1,FINSEQ_2,XREAL_1,MEMBERED,FINSEQ_5,XXREAL_0,NAT_D,PARTFUN1,XXREAL_2,PRE_POLY,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46;
schemes NAT_1,GRAPH_5,FUNCT_2,FRAENKEL,CKB35;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCOP_1,FINSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,MEMBERED,FINSEQ_1,GLIB_000,ABIAN,GRAPH_2,GLIB_001,GLIB_002,FUNCT_2,XXREAL_2,CARD_1,RELSET_1;
constructors DOMAIN_1,REAL_1,NAT_D,FINSEQ_4,GRAPH_2,GLIB_001,GLIB_002,VALUED_1,XXREAL_2,RELSET_1,CKB18,CKB38;
requirements ARITHM,BOOLE,NUMERALS,REAL,SUBSET;
begin
theorem
Th42: (for G being _Graph holds (for W being (Walk of G) holds (W is  minlength implies (for m,n being  odd  natural number holds ((m <= n & n <= ( len W )) implies ( W .cut (m,n) ) is  minlength)))))
proof
let G being _Graph;
let W being (Walk of G);
assume that
A1: W is  minlength;
let m being  odd Nat,n being  odd Nat;
assume that
A2: m <= n
and
A3: n <= ( len W );
set S = ( W .cut (m,n) );
assume (not S is  minlength);
then consider M being (Walk of G) such that A4: M is_Walk_from ( S .first() ),( S .last() ) and A5: ( len M ) < ( len S ) by CKB38:def 1;
set R = ( W .cut (1,m) );
A6: ( ( 2 * ( 0 ) ) + 1 ) <= m by ABIAN:12;
set T = ( W .cut (n,( len W )) );
A7: n in ( NAT ) by ORDINAL1:def 12;
then A8: ( T .first() ) = ( W . n ) by A3,GLIB_001:37;
set A = ( R .append M );
A9: m in ( NAT ) by ORDINAL1:def 12;
A10: m <= ( len W ) by A2,A3,XXREAL_0:2;
then A11: ( R .last() ) = ( W . m ) by A6,A9,GLIB_001:37;
( S .first() ) = ( W . m ) by A2,A3,A9,A7,GLIB_001:37;
then A12: ( M .first() ) = ( W . m ) by A4,GLIB_001:def 23;
then ( ( len A ) + 1 ) = ( ( len R ) + ( len M ) ) by A11,GLIB_001:28;
then A13: ( ( len A ) + 1 ) < ( ( len R ) + ( len S ) ) by A5,XREAL_1:8;
set B = ( A .append T );
( S .last() ) = ( W . n ) by A2,A3,A9,A7,GLIB_001:37;
then ( M .last() ) = ( W . n ) by A4,GLIB_001:def 23;
then A14: ( A .last() ) = ( W . n ) by A11,A12,GLIB_001:30;
then A15: ( ( len B ) + 1 ) = ( ( len A ) + ( len T ) ) by A8,GLIB_001:28;
A16: ( ( len R ) + 1 ) = ( m + 1 ) by A6,A10,A9,GLIB_001:36;
( ( len S ) + m ) = ( n + 1 ) by A2,A3,A9,A7,GLIB_001:36;
then ( ( ( len A ) + 1 ) - 1 ) < ( ( n + 1 ) - 1 ) by A16,A13,XREAL_1:14;
then A17: ( ( len B ) + 1 ) < ( ( len T ) + n ) by A15,XREAL_1:8;
( ( len T ) + n ) = ( ( len W ) + 1 ) by A3,A7,GLIB_001:36;
then A18: ( ( ( len B ) + 1 ) - 1 ) < ( ( ( len W ) + 1 ) - 1 ) by A17,XREAL_1:14;
( T .last() ) = ( W . ( len W ) ) by A3,A7,GLIB_001:37;
then A19: ( B .last() ) = ( W .last() ) by A8,A14,GLIB_001:30;
( R .first() ) = ( W . 1 ) by A6,A10,A9,GLIB_001:37;
then ( A .first() ) = ( W . 1 ) by A11,A12,GLIB_001:30;
then ( B .first() ) = ( W .first() ) by A8,A14,GLIB_001:30;
then B is_Walk_from ( W .first() ),( W .last() ) by A19,GLIB_001:def 23;
hence contradiction by A1,A18,CKB38:def 1;
end;
