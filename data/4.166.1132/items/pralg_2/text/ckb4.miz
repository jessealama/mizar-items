environ
vocabularies XBOOLE_0,MSUALG_1,CARD_3,FUNCT_1,SUBSET_1,PBOOLE,RELAT_1,FUNCT_6,TARSKI,FUNCOP_1,FINSEQ_4,FUNCT_5,ZFMISC_1,PRALG_1,MCART_1,COMPLEX1,STRUCT_0,MARGREL1,RLVECT_2,FUNCT_2,PRALG_2,PARTFUN1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,BINOP_1,MCART_1,STRUCT_0,FUNCOP_1,FINSEQ_2,FUNCT_5,FUNCT_6,CARD_3,PBOOLE,PRALG_1,MSUALG_1,CKB3;
definitions TARSKI,PBOOLE,FUNCOP_1,XBOOLE_0,BINOP_1,FUNCT_6,FUNCT_2,CKB3;
theorems TARSKI,FUNCT_1,FINSEQ_1,PBOOLE,MSUALG_1,ZFMISC_1,CARD_3,FUNCT_2,MCART_1,FUNCOP_1,FUNCT_6,FUNCT_5,RELAT_1,PRALG_1,XBOOLE_0,XBOOLE_1,PARTFUN1,FINSEQ_2,CKB3;
schemes FUNCT_1,FUNCT_2,CLASSES1,TARSKI,PBOOLE;
registrations XBOOLE_0,RELAT_1,FUNCT_1,FUNCOP_1,CARD_3,PBOOLE,STRUCT_0,MSUALG_1,RELSET_1,FINSEQ_2,CKB1,CKB2;
constructors BINOP_1,FUNCT_6,PRALG_1,MSUALG_1,RELSET_1,FUNCT_5,CKB3;
requirements BOOLE,SUBSET;
begin
reserve x for set;
theorem
(for F being Function holds (( dom F ) = { ( {} ) } implies ( Commute F ) = F))
proof
let F being Function;
assume A1: ( dom F ) = { ( {} ) };
A2: ( dom ( Commute F ) ) = { ( {} ) }
proof
thus ( dom ( Commute F ) ) c= { ( {} ) }
proof
let x;
assume x in ( dom ( Commute F ) );
then (ex f being Function st (f in ( dom F ) & x = ( commute f ))) by CKB3:def 1;
then x = ( {} ) by A1,FUNCT_6:58,TARSKI:def 1;
hence thesis by TARSKI:def 1;
end;

let x;
assume x in { ( {} ) };
then A3: x = ( {} ) by TARSKI:def 1;
( {} ) in ( dom F ) by A1,TARSKI:def 1;
hence thesis by A3,CKB3:def 1,FUNCT_6:58;
end;
(for x holds (x in { ( {} ) } implies ( ( Commute F ) . x ) = ( F . x )))
proof
let x;
assume A4: x in { ( {} ) };
then x = ( {} ) by TARSKI:def 1;
hence thesis by A2,A4,CKB3:def 1,FUNCT_6:58;
end;
hence thesis by A1,A2,FUNCT_1:2;
end;
