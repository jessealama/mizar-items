environ
vocabularies NUMBERS,SUBSET_1,RSSPACE,SERIES_1,TARSKI,REAL_1,SEQ_1,SEQ_2,FUNCT_1,COMPLEX1,ARYTM_1,ORDINAL2,FUNCOP_1,ARYTM_3,CARD_1,XBOOLE_0,RLSUB_1,RLVECT_1,XXREAL_0,RELAT_1,VALUED_1,ALGSTR_0,CARD_3,BINOP_1,ZFMISC_1,NORMSP_1,XREAL_0,ORDINAL1,STRUCT_0,SUPINF_2,REALSET1,PRE_TOPC,METRIC_1,NAT_1,XXREAL_2,RSSPACE3,NORMSP_0,RELAT_2;
notations TARSKI,SUBSET_1,XBOOLE_0,ZFMISC_1,ORDINAL1,REALSET1,NUMBERS,XREAL_0,COMPLEX1,REAL_1,NAT_1,STRUCT_0,ALGSTR_0,FUNCT_1,FUNCT_2,RELAT_1,BINOP_1,FUNCOP_1,PRE_TOPC,RLVECT_1,RLSUB_1,NORMSP_0,NORMSP_1,VALUED_1,SEQ_1,SEQ_2,SERIES_1,PARTFUN1,RSSPACE,XXREAL_0,CKB1,CKB8;
definitions BINOP_1,REALSET1,RLVECT_1,STRUCT_0,ALGSTR_0,NORMSP_0,CKB1,CKB8;
theorems XBOOLE_0,RELAT_1,TARSKI,ABSVALUE,ZFMISC_1,SEQ_1,SEQ_2,SERIES_1,COMSEQ_3,FUNCT_1,NAT_1,FUNCT_2,RLVECT_1,RLSUB_1,NORMSP_1,XREAL_0,SEQ_4,RSSPACE,RSSPACE2,FUNCOP_1,COMPLEX1,XREAL_1,XXREAL_0,NORMSP_0,CKB1,CKB2,CKB5,CKB7,CKB8,CKB10;
schemes NAT_1,SEQ_1,FUNCT_2,XBOOLE_0;
registrations XBOOLE_0,ORDINAL1,RELSET_1,NUMBERS,XREAL_0,MEMBERED,REALSET1,STRUCT_0,RLVECT_1,NORMSP_1,RSSPACE,VALUED_1,FUNCT_2,FUNCOP_1,SEQ_4,NORMSP_0,CKB3,CKB4,CKB6,CKB9;
constructors PARTFUN1,BINOP_1,FUNCOP_1,XXREAL_0,REAL_1,NAT_1,COMPLEX1,SEQ_2,SERIES_1,REALSET1,RLSUB_1,RSSPACE,SEQ_1,VALUED_1,RELSET_1,BINOP_2,RVSUM_1,CKB1,CKB8;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
theorem
Th5: (for rseq being Real_Sequence holds ((for n being (Element of ( NAT )) holds ( rseq . n ) = ( 0 )) implies (rseq is  absolutely_summable & ( Sum ( abs rseq ) ) = ( 0 ))))
proof
let rseq being Real_Sequence;
assume that
A1: (for n being (Element of ( NAT )) holds ( rseq . n ) = ( 0 ));
A2: (for n being (Element of ( NAT )) holds ( ( abs rseq ) . n ) = ( 0 ))
proof
let n being (Element of ( NAT ));
(( rseq . n ) = ( 0 ) & ( ( abs rseq ) . n ) = ( abs ( rseq . n ) )) by A1,SEQ_1:12;
hence thesis by ABSVALUE:2;
end;
A3: (for m being (Element of ( NAT )) holds ( ( Partial_Sums ( abs rseq ) ) . m ) = ( 0 ))
proof
defpred P[ (Element of ( NAT )) ]
 means
( ( abs rseq ) . $1 ) = ( ( Partial_Sums ( abs rseq ) ) . $1 );
let m being (Element of ( NAT ));
A4: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume that
A5: ( ( abs rseq ) . k ) = ( ( Partial_Sums ( abs rseq ) ) . k );
thus ( ( abs rseq ) . ( k + 1 ) ) = ( ( 0 ) + ( ( abs rseq ) . ( k + 1 ) ) )
.= ( ( ( abs rseq ) . k ) + ( ( abs rseq ) . ( k + 1 ) ) ) by A2
.= ( ( Partial_Sums ( abs rseq ) ) . ( k + 1 ) ) by A5,SERIES_1:def 1;
end;
A6: P[ ( 0 ) ] by SERIES_1:def 1;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A6,A4);
hence ( ( Partial_Sums ( abs rseq ) ) . m ) = ( ( abs rseq ) . m )
.= ( 0 ) by A2;
end;
A7: (for p being  real number holds (( 0 ) < p implies (ex n being (Element of ( NAT )) st (for m being (Element of ( NAT )) holds (n <= m implies ( abs ( ( ( Partial_Sums ( abs rseq ) ) . m ) - ( 0 ) ) ) < p)))))
proof
let p being  real number;
assume that
A8: ( 0 ) < p;
take ( 0 );
let m being (Element of ( NAT ));
assume that
( 0 ) <= m;
( abs ( ( ( Partial_Sums ( abs rseq ) ) . m ) - ( 0 ) ) ) = ( abs ( ( 0 ) - ( 0 ) ) ) by A3
.= ( 0 ) by ABSVALUE:def 1;
hence thesis by A8;
end;
then A9: ( Partial_Sums ( abs rseq ) ) is  convergent by SEQ_2:def 6;
then A10: ( abs rseq ) is  summable by SERIES_1:def 2;
( lim ( Partial_Sums ( abs rseq ) ) ) = ( 0 ) by A7,A9,SEQ_2:def 7;
hence thesis by A10,SERIES_1:def 3,SERIES_1:def 4;
end;
