environ
vocabularies NUMBERS,ALGSTR_0,STRUCT_0,SUBSET_1,BINOP_1,FUNCT_1,ZFMISC_1,XBOOLE_0,XREAL_0,ORDINAL1,RELAT_1,REAL_1,ARYTM_3,SUPINF_2,FUNCT_5,MCART_1,ARYTM_1,CARD_1,FINSEQ_1,ORDINAL4,CARD_3,TARSKI,XXREAL_0,FUNCOP_1,NAT_1,VALUED_0,RLVECT_1,PARTFUN1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,XXREAL_0,XREAL_0,RELAT_1,FUNCT_1,FUNCT_2,BINOP_1,FUNCOP_1,REAL_1,FINSEQ_1,NAT_1,FUNCT_3,FUNCT_5,FINSEQ_4,STRUCT_0,ALGSTR_0,CKB1,CKB3,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
definitions FUNCT_1,TARSKI,STRUCT_0,RELAT_1,ALGSTR_0,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
theorems FUNCT_1,NAT_1,TARSKI,RELAT_1,STRUCT_0,XBOOLE_0,XBOOLE_1,FINSEQ_1,XCMPLX_0,FUNCOP_1,XREAL_1,XXREAL_0,ORDINAL1,ALGSTR_0,CARD_1,FINSEQ_3,XREAL_0,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
schemes FINSEQ_1,FUNCT_2,NAT_1;
registrations XBOOLE_0,ORDINAL1,RELSET_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,STRUCT_0,REAL_1,ALGSTR_0,FINSEQ_1,CARD_1,ZFMISC_1,FUNCT_1,RELAT_1,CKB1,CKB2,CKB7,CKB16,CKB17,CKB18;
constructors BINOP_1,FUNCOP_1,XXREAL_0,REAL_1,NAT_1,FINSEQ_1,FUNCT_3,FUNCT_5,ALGSTR_0,REALSET1,RELSET_1,FINSEQ_4,VALUED_0,CKB1,CKB5,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15;
requirements REAL,NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve a for  real number;
reserve b for  real number;
registration
cluster  strict  Abelian  add-associative  right_zeroed  right_complementable  scalar-distributive  vector-distributive  scalar-associative  scalar-unital for non empty non empty RLSStruct;
existence
proof
take S = ( Trivial-RLSStruct );
thus S is  strict;
thus S is  Abelian
proof
let x being (Element of S);
thus thesis by STRUCT_0:def 10;
end;

thus S is  add-associative
proof
let x being (Element of S);
thus thesis by STRUCT_0:def 10;
end;

thus S is  right_zeroed
proof
let x being (Element of S);
thus thesis by STRUCT_0:def 10;
end;

thus S is  right_complementable
proof
let x being (Element of S);
take x;
thus thesis by STRUCT_0:def 10;
end;

thus (for a holds (for b holds (for v being (VECTOR of S) holds ( ( a + b ) * v ) = ( ( a * v ) + ( b * v ) )))) by STRUCT_0:def 10;
thus (for a holds (for v,w being (VECTOR of S) holds ( a * ( v + w ) ) = ( ( a * v ) + ( a * w ) ))) by STRUCT_0:def 10;
thus (for a holds (for b holds (for v being (VECTOR of S) holds ( ( a * b ) * v ) = ( a * ( b * v ) )))) by STRUCT_0:def 10;
thus (for v being (VECTOR of S) holds ( 1 * v ) = v) by STRUCT_0:def 10;
end;
end;
