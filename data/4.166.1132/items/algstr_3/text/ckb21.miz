environ
vocabularies STRUCT_0,SUBSET_1,MULTOP_1,XBOOLE_0,VECTSP_1,FUNCT_1,NUMBERS,REAL_1,RELAT_1,ARYTM_3,CARD_1,ARYTM_1,MESFUNC1,SUPINF_2,ALGSTR_3;
notations XBOOLE_0,SUBSET_1,NUMBERS,STRUCT_0,REAL_1,MULTOP_1,CKB1,CKB3,CKB4,CKB5,CKB6,CKB8;
definitions STRUCT_0,CKB4,CKB5,CKB6,CKB8;
theorems MULTOP_1,XCMPLX_1,CKB4,CKB5,CKB6,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20;
schemes MULTOP_1;
registrations NUMBERS,MEMBERED,STRUCT_0,CKB1,CKB2,CKB7;
constructors REAL_1,MEMBERED,MULTOP_1,RLVECT_1,CKB1,CKB4,CKB5,CKB6,CKB8;
requirements NUMERALS,SUBSET,ARITHM,BOOLE;
begin
definition
let IT being non empty TernaryFieldStr;
attr IT is  Ternary-Field-like
means
:Def7: (((((((((( 0. IT ) <> ( 1. IT ) & (for a being (Scalar of IT) holds ( Tern (a,( 1. IT ),( 0. IT )) ) = a)) & (for a being (Scalar of IT) holds ( Tern (( 1. IT ),a,( 0. IT )) ) = a)) & (for a,b being (Scalar of IT) holds ( Tern (a,( 0. IT ),b) ) = b)) & (for a,b being (Scalar of IT) holds ( Tern (( 0. IT ),a,b) ) = b)) & (for u,a,b being (Scalar of IT) holds (ex v being (Scalar of IT) st ( Tern (u,a,v) ) = b))) & (for u,a,v,v9 being (Scalar of IT) holds (( Tern (u,a,v) ) = ( Tern (u,a,v9) ) implies v = v9))) & (for a,a9 being (Scalar of IT) holds (a <> a9 implies (for b,b9 being (Scalar of IT) holds (ex u,v being (Scalar of IT) st (( Tern (u,a,v) ) = b & ( Tern (u,a9,v) ) = b9)))))) & (for u,u9 being (Scalar of IT) holds (u <> u9 implies (for v,v9 being (Scalar of IT) holds (ex a being (Scalar of IT) st ( Tern (u,a,v) ) = ( Tern (u9,a,v9) )))))) & (for a,a9,u,u9,v,v9 being (Scalar of IT) holds ((( Tern (u,a,v) ) = ( Tern (u9,a,v9) ) & ( Tern (u,a9,v) ) = ( Tern (u9,a9,v9) )) implies (a = a9 or u = u9))));
end;
