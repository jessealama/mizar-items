environ
vocabularies NUMBERS,XBOOLE_0,PROB_1,MEASURE1,SUBSET_1,SEQFUNC,SEQ_1,PARTFUN1,NAT_1,REALSET1,FUNCT_1,RELAT_1,PBOOLE,SEQ_2,MEASURE6,MESFUNC5,MESFUNC8,TARSKI,CARD_1,ORDINAL2,MESFUNC1,SERIES_1,ARYTM_3,XXREAL_0,MSSUBFAM,SETFAM_1,CARD_3,MESFUNC2,INTEGRA5,COMPLEX1,ORDINAL1,COMSEQ_1,XCMPLX_0,VALUED_1,ARYTM_1,RINFSUP1,XXREAL_2,SUPINF_2,VALUED_0,MESFUN10,XREAL_0,REAL_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ORDINAL1,NUMBERS,XCMPLX_0,XREAL_0,COMPLEX1,REAL_1,XXREAL_0,VALUED_1,RELAT_1,FUNCT_1,RELSET_1,FUNCT_2,PARTFUN1,NAT_1,PROB_1,SETFAM_1,SUPINF_2,MESFUNC9,SEQ_1,SEQ_2,SEQFUNC,SERIES_1,MEASURE1,EXTREAL1,MESFUNC1,MEASURE6,MESFUNC2,MESFUNC6,MESFUN6C,MESFUN10,MESFUNC8,MESFUN7C,MESFUNC5,COMSEQ_1,COMSEQ_2,COMSEQ_3,RINFSUP2,XXREAL_2,CKB1,CKB8,CKB32;
definitions FUNCT_2,MEASURE6,MESFUNC5,SERIES_1,VALUED_1,RINFSUP2,MESFUN7C,MESFUNC6,MESFUNC8,CKB1,CKB8,CKB32;
theorems TARSKI,PARTFUN1,FUNCT_1,SUPINF_2,EXTREAL2,MESFUNC1,XBOOLE_0,MESFUNC2,XXREAL_0,MESFUNC5,NAT_1,RELAT_1,FUNCT_2,COMPLEX1,MESFUN10,XCMPLX_0,MESFUNC6,SEQFUNC,ORDINAL1,MESFUNC8,RINFSUP2,RELSET_1,MESFUN7C,SERIES_1,VALUED_1,COMSEQ_3,MESFUN6C,XXREAL_2,MESFUNC9,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
schemes FUNCT_2,NAT_1,RECDEF_1,SEQFUNC;
registrations XREAL_0,MEMBERED,ORDINAL1,PARTFUN1,COMSEQ_3,FUNCT_2,RELAT_1,XBOOLE_0,NUMBERS,XXREAL_0,XCMPLX_0,MESFUNC8,VALUED_0,MESFUN7C,RELSET_1;
constructors REAL_1,EXTREAL1,SUPINF_1,MESFUNC9,SEQ_1,SEQ_2,MESFUN10,SEQFUNC,COMSEQ_2,COMSEQ_3,SERIES_1,MESFUNC1,MEASURE6,MESFUNC2,MESFUNC5,MESFUNC6,MESFUN6C,MESFUN7C,RINFSUP2,RELSET_1,CKB1,CKB8,CKB32;
requirements NUMERALS,REAL,BOOLE,SUBSET;
begin
reserve X for non empty set;
reserve i for (Element of ( NAT ));
reserve F for (Functional_Sequence of X,( COMPLEX ));
theorem
Th29: (( Partial_Sums ( Re F ) ) = ( Re ( Partial_Sums F ) ) & ( Partial_Sums ( Im F ) ) = ( Im ( Partial_Sums F ) ))
proof
defpred P[ (Element of ( NAT )) ]
 means
( ( Partial_Sums ( Re F ) ) . $1 ) = ( ( Re ( Partial_Sums F ) ) . $1 );
defpred R[ (Element of ( NAT )) ]
 means
( ( Partial_Sums ( Im F ) ) . $1 ) = ( ( Im ( Partial_Sums F ) ) . $1 );
A1: (for k being (Element of ( NAT )) holds (P[ k ] implies P[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume P[ k ];
then ( ( Partial_Sums ( Re F ) ) . ( k + 1 ) ) = ( ( ( Re ( Partial_Sums F ) ) . k ) + ( ( Re F ) . ( k + 1 ) ) ) by CKB8:def 1
.= ( ( ( Re ( Partial_Sums F ) ) . k ) + ( Re ( F . ( k + 1 ) ) ) ) by MESFUN7C:24
.= ( ( Re ( ( Partial_Sums F ) . k ) ) + ( Re ( F . ( k + 1 ) ) ) ) by MESFUN7C:24
.= ( Re ( ( ( Partial_Sums F ) . k ) + ( F . ( k + 1 ) ) ) ) by MESFUN6C:5
.= ( Re ( ( Partial_Sums F ) . ( k + 1 ) ) ) by CKB32:def 1;
hence thesis by MESFUN7C:24;
end;
A2: (for k being (Element of ( NAT )) holds (R[ k ] implies R[ ( k + 1 ) ]))
proof
let k being (Element of ( NAT ));
assume R[ k ];
then ( ( Partial_Sums ( Im F ) ) . ( k + 1 ) ) = ( ( ( Im ( Partial_Sums F ) ) . k ) + ( ( Im F ) . ( k + 1 ) ) ) by CKB8:def 1
.= ( ( ( Im ( Partial_Sums F ) ) . k ) + ( Im ( F . ( k + 1 ) ) ) ) by MESFUN7C:24
.= ( ( Im ( ( Partial_Sums F ) . k ) ) + ( Im ( F . ( k + 1 ) ) ) ) by MESFUN7C:24
.= ( Im ( ( ( Partial_Sums F ) . k ) + ( F . ( k + 1 ) ) ) ) by MESFUN6C:5
.= ( Im ( ( Partial_Sums F ) . ( k + 1 ) ) ) by CKB32:def 1;
hence thesis by MESFUN7C:24;
end;
( ( Partial_Sums ( Im F ) ) . ( 0 ) ) = ( ( Im F ) . ( 0 ) ) by CKB8:def 1
.= ( Im ( F . ( 0 ) ) ) by MESFUN7C:24
.= ( Im ( ( Partial_Sums F ) . ( 0 ) ) ) by CKB32:def 1;
then A3: R[ ( 0 ) ] by MESFUN7C:24;
A4: (for i holds R[ i ]) from NAT_1:sch 1(A3,A2);
( ( Partial_Sums ( Re F ) ) . ( 0 ) ) = ( ( Re F ) . ( 0 ) ) by CKB8:def 1
.= ( Re ( F . ( 0 ) ) ) by MESFUN7C:24
.= ( Re ( ( Partial_Sums F ) . ( 0 ) ) ) by CKB32:def 1;
then A5: P[ ( 0 ) ] by MESFUN7C:24;
(for i holds P[ i ]) from NAT_1:sch 1(A5,A1);
hence thesis by A4,FUNCT_2:63;
end;
