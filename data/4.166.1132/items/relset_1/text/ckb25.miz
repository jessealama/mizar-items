environ
vocabularies RELAT_1,SUBSET_1,ZFMISC_1,TARSKI,XBOOLE_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,CKB1,CKB4,CKB5,CKB19,CKB20,CKB24;
definitions TARSKI,XBOOLE_0,RELAT_1,CKB4,CKB5;
theorems TARSKI,ZFMISC_1,RELAT_1,XBOOLE_0,XBOOLE_1,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB21,CKB22,CKB23;
schemes RELAT_1;
registrations XBOOLE_0,RELAT_1,SUBSET_1,CKB2,CKB3,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
constructors TARSKI,SUBSET_1,RELAT_1,CKB4,CKB5,CKB19,CKB20,CKB24;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve Y1 for set;
reserve Y2 for set;
reserve Z for set;
reserve x for set;
reserve y for set;
reserve z for set;
reserve P for (Relation of X,Y);
reserve R for (Relation of X,Y);
definition
let X;
let Y1;
let Y2;
let Z;
let P being (Relation of X,Y1);
let R being (Relation of Y2,Z);
redefine func P * R -> (Relation of X,Z);

coherence
proof
now
let x;
let z;
assume [ x,z ] in ( P * R );
then (ex y st ([ x,y ] in P & [ y,z ] in R)) by RELAT_1:def 8;
then (x in X & z in Z) by ZFMISC_1:87;
hence [ x,z ] in [: X,Z :] by ZFMISC_1:87;
end;
hence thesis by RELAT_1:def 3;
end;
end;
