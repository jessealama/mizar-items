environ
vocabularies NUMBERS,SUBSET_1,SCMFSA_2,AMI_1,RELAT_1,AMI_3,FSM_1,STRUCT_0,FUNCT_4,FUNCOP_1,XBOOLE_0,TARSKI,FUNCT_1,XXREAL_0,ARYTM_3,GRAPHSP,SCMNORM,COMPLEX1,PARTFUN1,FINSEQ_1,FINSEQ_2,CARD_1,INT_1,CIRCUIT2,ARYTM_1,ORDINAL1,AMISTD_5,PBOOLE,FINSET_1,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,FINSET_1,NUMBERS,XCMPLX_0,INT_2,RELAT_1,PBOOLE,FUNCT_1,PARTFUN1,FUNCT_4,INT_1,NAT_1,DOMAIN_1,STRUCT_0,FUNCOP_1,FINSEQ_1,FINSEQ_2,MEMSTR_0,COMPOS_1,EXTPRO_1,AMI_3,FUNCT_7,SCMFSA_2,XXREAL_0,AMISTD_5,CKB5;
definitions COMPOS_1,EXTPRO_1,AMI_3,FUNCOP_1,SCMFSA_2,AMISTD_5,AMI_2,MEMSTR_0;
theorems GRFUNC_1,FUNCOP_1,TARSKI,FUNCT_4,FUNCT_1,ZFMISC_1,INT_1,RELAT_1,SCMFSA_2,SCMFSA_1,ABSVALUE,FINSEQ_2,XBOOLE_0,XBOOLE_1,NUMBERS,PBOOLE,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_5,NAT_1,MEMSTR_0,CKB1,CKB2,CKB3,CKB4;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,NUMBERS,XREAL_0,INT_1,FINSEQ_1,CARD_3,STRUCT_0,AMI_3,SCMFSA_2,FINSET_1,ZFMISC_1,ORDINAL1,RELSET_1,FUNCT_2,COMPOS_1,EXTPRO_1,AMISTD_5,CARD_1,PBOOLE,FUNCT_7,PRE_POLY,MEMSTR_0,AMI_2,FUNCT_4,FUNCOP_1,CKB6,CKB7;
constructors DOMAIN_1,XXREAL_0,INT_2,AMI_3,SCMFSA_2,RELSET_1,PRE_POLY,SCMFSA_1,AMISTD_5,AMISTD_2,PBOOLE,FUNCT_7,AMISTD_1,MEMSTR_0,CKB5;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
reserve da for Int-Location;
reserve db for Int-Location;
theorem
(for q being non  halt-free  finite (the Instructions of ( SCM+FSA )) -valued ( NAT ) -defined Function holds (for p being q -autonomic non  empty (FinPartState of ( SCM+FSA )) holds (for s1,s2 being (State of ( SCM+FSA )) holds ((p c= s1 & p c= s2) implies (for P1,P2 being (Instruction-Sequence of ( SCM+FSA )) holds ((q c= P1 & q c= P2) implies (for i being (Element of ( NAT )) holds (for da,db being Int-Location holds ((( CurInstr (P1,( Comput (P1,s1,i) )) ) = ( da := db ) & da in ( dom p )) implies ( ( Comput (P1,s1,i) ) . db ) = ( ( Comput (P2,s2,i) ) . db ))))))))))
proof
let q being non  halt-free  finite (the Instructions of ( SCM+FSA )) -valued ( NAT ) -defined Function;
let p being q -autonomic non  empty (FinPartState of ( SCM+FSA ));
let s1 being (State of ( SCM+FSA ));
let s2 being (State of ( SCM+FSA ));
assume that
B1: (p c= s1 & p c= s2);
let P1 being (Instruction-Sequence of ( SCM+FSA ));
let P2 being (Instruction-Sequence of ( SCM+FSA ));
assume that
A2: (q c= P1 & q c= P2);
let i being (Element of ( NAT ));
let da being Int-Location;
let db being Int-Location;
set I = ( CurInstr (P1,( Comput (P1,s1,i) )) );
set Cs1i = ( Comput (P1,s1,i) );
set Cs2i = ( Comput (P2,s2,i) );
set Cs1i1 = ( Comput (P1,s1,( i + 1 )) );
set Cs2i1 = ( Comput (P2,s2,( i + 1 )) );
A3: Cs2i1 = ( Following (P2,Cs2i) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P2,Cs2i) ),Cs2i) );
A4: (da in ( dom p ) implies (( ( Cs1i1 | ( dom p ) ) . da ) = ( Cs1i1 . da ) & ( ( Cs2i1 | ( dom p ) ) . da ) = ( Cs2i1 . da ))) by FUNCT_1:49;
assume that
A5: I = ( da := db )
and
A6: (da in ( dom p ) & ( ( Comput (P1,s1,i) ) . db ) <> ( ( Comput (P2,s2,i) ) . db ));
Cs1i1 = ( Following (P1,Cs1i) ) by EXTPRO_1:3
.= ( Exec (( CurInstr (P1,Cs1i) ),Cs1i) );
then A8: ( Cs1i1 . da ) = ( Cs1i . db ) by A5,SCMFSA_2:63;
I = ( CurInstr (P2,( Comput (P2,s2,i) )) ) by B1,A2,AMISTD_5:7;
then ( Cs2i1 . da ) = ( Cs2i . db ) by A3,A5,SCMFSA_2:63;
hence contradiction by A4,A6,A8,A2,B1,EXTPRO_1:def 10;
end;
