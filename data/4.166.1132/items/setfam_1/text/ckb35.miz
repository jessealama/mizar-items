environ
vocabularies XBOOLE_0,TARSKI,SUBSET_1,ZFMISC_1,SETFAM_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25;
definitions TARSKI,XBOOLE_0,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25;
theorems TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ENUMSET1,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34;
schemes XBOOLE_0,SUBSET_1;
registrations XBOOLE_0,SUBSET_1;
constructors TARSKI,ENUMSET1,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25;
requirements SUBSET,BOOLE;
begin
reserve X for set;
reserve Y for set;
reserve Z for set;
reserve x for set;
reserve SFX for set;
reserve SFY for set;
theorem
((SFX <> ( {} ) & SFY <> ( {} )) implies ( ( meet SFX ) \/ ( meet SFY ) ) c= ( meet ( UNION (SFX,SFY) ) ))
proof
set y = the (Element of SFX);
set z = the (Element of SFY);
assume (SFX <> ( {} ) & SFY <> ( {} ));
then A1: ( y \/ z ) in ( UNION (SFX,SFY) ) by CKB23:def 1;
let x;
assume x in ( ( meet SFX ) \/ ( meet SFY ) );
then A2: (x in ( meet SFX ) or x in ( meet SFY )) by XBOOLE_0:def 3;
(for Z holds (Z in ( UNION (SFX,SFY) ) implies x in Z))
proof
let Z;
assume Z in ( UNION (SFX,SFY) );
then consider X,Y such that A3: (X in SFX & Y in SFY) and A4: Z = ( X \/ Y ) by CKB23:def 1;
(x in X or x in Y) by A2,A3,CKB1:def 1;
hence thesis by A4,XBOOLE_0:def 3;
end;
hence thesis by A1,CKB1:def 1;
end;
