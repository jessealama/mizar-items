environ
vocabularies XBOOLE_0,TARSKI,SUBSET_1,ZFMISC_1,SETFAM_1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25,CKB37,CKB38,CKB39;
definitions TARSKI,XBOOLE_0,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25;
theorems TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ENUMSET1,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB40;
schemes XBOOLE_0,SUBSET_1;
registrations XBOOLE_0,SUBSET_1;
constructors TARSKI,ENUMSET1,SUBSET_1,CKB1,CKB13,CKB14,CKB23,CKB24,CKB25,CKB38,CKB39;
requirements SUBSET,BOOLE;
begin
reserve D for set;
reserve F for (Subset-Family of D);
reserve G for (Subset-Family of D);
reserve P for (Subset of D);
definition
let D;
let F;
func COMPLEMENT F -> (Subset-Family of D) means 
:Def8: (for P being (Subset of D) holds (P in it iff ( P ` ) in F));
existence
proof
defpred X[ (Subset of D) ]
 means
( $1 ` ) in F;
thus (ex G being (Subset-Family of D) st (for P being (Subset of D) holds (P in G iff X[ P ]))) from SUBSET_1:sch 3;
end;
uniqueness
proof
let G being (Subset-Family of D);
let H being (Subset-Family of D);
assume that
A1: (for P holds (P in G iff ( P ` ) in F))
and
A2: (for P holds (P in H iff ( P ` ) in F));
now
let P;
(P in G iff ( P ` ) in F) by A1;
hence (P in G iff P in H) by A2;
end;
hence thesis by CKB40:1;
end;
involutiveness
proof
let F;
let G;
assume that
A3: (for P being (Subset of D) holds (P in F iff ( P ` ) in G));
let P being (Subset of D);
( ( P ` ) ` ) = P;
hence thesis by A3;
end;
end;
