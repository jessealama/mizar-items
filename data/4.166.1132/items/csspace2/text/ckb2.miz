environ
vocabularies NUMBERS,COMSEQ_1,ARYTM_3,FUNCT_1,SUBSET_1,COMPLEX1,ARYTM_1,RELAT_1,XCMPLX_0,SERIES_1,CARD_1,REAL_1,XXREAL_0,SQUARE_1,CFUNCT_1,CARD_3,ORDINAL2,SEQ_2,VALUED_1,CSSPACE,RSSPACE,SUPINF_2,RLVECT_1,ALGSTR_0,ZFMISC_1,STRUCT_0,REALSET1,PROB_2,BHSP_1,SEQ_1,PRE_TOPC,FUNCOP_1,NAT_1,BHSP_3,NORMSP_1,XXREAL_2,REWRITE1,CSSPACE2;
notations SUBSET_1,ZFMISC_1,XCMPLX_0,XXREAL_0,NUMBERS,COMPLEX1,REAL_1,NAT_1,STRUCT_0,ALGSTR_0,RELAT_1,DOMAIN_1,PARTFUN1,FUNCT_1,FUNCT_2,BINOP_1,FUNCOP_1,REALSET1,PRE_TOPC,SQUARE_1,VALUED_1,SEQ_1,SEQ_2,SERIES_1,COMSEQ_1,CFUNCT_1,COMSEQ_2,COMSEQ_3,CLVECT_1,CLVECT_2,CSSPACE;
definitions SQUARE_1,REALSET1,BINOP_1,STRUCT_0,ALGSTR_0,VALUED_1,CLVECT_2;
theorems RELAT_1,SQUARE_1,ABSVALUE,ZFMISC_1,SEQ_1,SEQ_2,SEQM_3,SERIES_1,INT_1,FUNCT_1,NAT_1,FUNCT_2,RLVECT_1,SEQ_4,RSSPACE,XCMPLX_1,CSSPACE,CLVECT_1,COMSEQ_1,COMSEQ_2,COMSEQ_3,COMPLEX1,CLVECT_2,RSSPACE2,FUNCOP_1,XREAL_1,XXREAL_0,VALUED_1,CKB1;
schemes NAT_1,SEQ_1,FUNCT_2,COMSEQ_1;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,FUNCT_2,NUMBERS,XCMPLX_0,XXREAL_0,MEMBERED,COMSEQ_2,COMSEQ_3,REALSET1,STRUCT_0,CSSPACE,VALUED_1,VALUED_0;
constructors BINOP_1,FUNCOP_1,REAL_1,SQUARE_1,COMSEQ_2,COMSEQ_3,REALSET1,CLVECT_2,SEQ_1,VALUED_1,SERIES_1,SEQ_2,RELSET_1;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
theorem
Lm2: (for seq being Complex_Sequence holds ( Partial_Sums ( seq *' ) ) = ( ( Partial_Sums seq ) *' ))
proof
let seq being Complex_Sequence;
defpred P[ (Element of ( NAT )) ]
 means
( ( Partial_Sums ( seq *' ) ) . $1 ) = ( ( ( Partial_Sums seq ) *' ) . $1 );
A1:now
let n being (Element of ( NAT ));
assume A2: P[ n ];
( ( Partial_Sums ( seq *' ) ) . ( n + 1 ) ) = ( ( ( Partial_Sums ( seq *' ) ) . n ) + ( ( seq *' ) . ( n + 1 ) ) ) by SERIES_1:def 1
.= ( ( ( ( Partial_Sums seq ) *' ) . n ) + ( ( seq . ( n + 1 ) ) *' ) ) by A2,COMSEQ_2:def 2
.= ( ( ( ( Partial_Sums seq ) . n ) *' ) + ( ( seq . ( n + 1 ) ) *' ) ) by COMSEQ_2:def 2
.= ( ( ( ( Partial_Sums seq ) . n ) + ( seq . ( n + 1 ) ) ) *' ) by COMPLEX1:32
.= ( ( ( Partial_Sums seq ) . ( n + 1 ) ) *' ) by SERIES_1:def 1;
hence P[ ( n + 1 ) ] by COMSEQ_2:def 2;
end;
( ( Partial_Sums ( seq *' ) ) . ( 0 ) ) = ( ( seq *' ) . ( 0 ) ) by SERIES_1:def 1
.= ( ( seq . ( 0 ) ) *' ) by COMSEQ_2:def 2
.= ( ( ( Partial_Sums seq ) . ( 0 ) ) *' ) by SERIES_1:def 1;
then A3: P[ ( 0 ) ] by COMSEQ_2:def 2;
(for n being (Element of ( NAT )) holds P[ n ]) from NAT_1:sch 1(A3,A1);
hence thesis by FUNCT_2:63;
end;
