environ
vocabularies REAL_1,SUBSET_1,NUMBERS,RCOMP_1,PARTFUN1,TARSKI,RELAT_1,ARYTM_3,FUNCT_1,PREPOWER,FDIFF_1,XBOOLE_0,CARD_1,ARYTM_1,NEWTON,LIMFUNC1,XXREAL_0,SQUARE_1,ORDINAL4,SIN_COS,VALUED_1,TAYLOR_1;
notations TARSKI,XBOOLE_0,SUBSET_1,RELAT_1,PARTFUN1,PARTFUN2,NUMBERS,XXREAL_0,RCOMP_1,REAL_1,VALUED_1,SEQ_1,FDIFF_1,NEWTON,PREPOWER,TAYLOR_1,LIMFUNC1,SIN_COS,RFUNCT_1,SQUARE_1;
definitions SQUARE_1,LIMFUNC1,TARSKI,XBOOLE_0;
theorems FDIFF_2,TAYLOR_1,XBOOLE_1,XCMPLX_1,NAT_1,FDIFF_1,FUNCT_1,TARSKI,PREPOWER,RFUNCT_1,XREAL_1,XCMPLX_0,NEWTON,SIN_COS,VALUED_1,XXREAL_1,RELAT_1,CKB1;
registrations ORDINAL1,RELSET_1,NUMBERS,NAT_1,INT_1,MEMBERED,RCOMP_1,VALUED_0,XXREAL_0;
constructors PARTFUN1,REAL_1,SQUARE_1,NAT_1,RCOMP_1,PARTFUN2,RFUNCT_1,FDIFF_1,PREPOWER,SIN_COS,TAYLOR_1,SEQ_1,VALUED_1,LIMFUNC1,XXREAL_2,RELSET_1,NEWTON;
requirements SUBSET,NUMERALS,ARITHM,BOOLE;
begin
reserve x for Real;
reserve a for Real;
reserve Z for  open (Subset of ( REAL ));
reserve f1 for (PartFunc of ( REAL ),( REAL ));
reserve f2 for (PartFunc of ( REAL ),( REAL ));
theorem
Lm2: (((Z c= ( dom ( f1 - f2 ) ) & (for x holds (x in Z implies ( f1 . x ) = a))) & f2 = ( #Z 2 )) implies (( f1 - f2 ) is_differentiable_on Z & (for x holds (x in Z implies ( ( ( f1 - f2 ) `| Z ) . x ) = ( - ( 2 * x ) )))))
proof
assume that
A1: Z c= ( dom ( f1 - f2 ) )
and
A2: (for x holds (x in Z implies ( f1 . x ) = a))
and
A3: f2 = ( #Z 2 );
A4: (for x holds (x in Z implies f2 is_differentiable_in x)) by A3,TAYLOR_1:2;
A5: Z c= ( ( dom f1 ) /\ ( dom f2 ) ) by A1,VALUED_1:12;
then A6: Z c= ( dom f1 ) by XBOOLE_1:18;
A7: (for x holds (x in Z implies ( f1 . x ) = ( ( ( 0 ) * x ) + a ))) by A2;
then A8: f1 is_differentiable_on Z by A6,FDIFF_1:23;
Z c= ( dom f2 ) by A5,XBOOLE_1:18;
then A9: f2 is_differentiable_on Z by A4,FDIFF_1:9;
A10: (for x holds (x in Z implies ( ( f2 `| Z ) . x ) = ( 2 * ( x #Z ( 2 - 1 ) ) )))
proof
let x;
assume A11: x in Z;
( diff (f2,x) ) = ( 2 * ( x #Z ( 2 - 1 ) ) ) by A3,TAYLOR_1:2;
hence thesis by A9,A11,FDIFF_1:def 7;
end;
(for x holds (x in Z implies ( ( ( f1 - f2 ) `| Z ) . x ) = ( - ( 2 * x ) )))
proof
let x;
assume A12: x in Z;
then ( ( ( f1 - f2 ) `| Z ) . x ) = ( ( diff (f1,x) ) - ( diff (f2,x) ) ) by A1,A8,A9,FDIFF_1:19;
hence ( ( ( f1 - f2 ) `| Z ) . x ) = ( ( ( f1 `| Z ) . x ) - ( diff (f2,x) ) ) by A8,A12,FDIFF_1:def 7
.= ( ( ( f1 `| Z ) . x ) - ( ( f2 `| Z ) . x ) ) by A9,A12,FDIFF_1:def 7
.= ( ( 0 ) - ( ( f2 `| Z ) . x ) ) by A6,A7,A12,FDIFF_1:23
.= ( ( 0 ) - ( 2 * ( x #Z ( 2 - 1 ) ) ) ) by A10,A12
.= ( ( 0 ) - ( 2 * ( x |^ 1 ) ) ) by PREPOWER:36
.= ( - ( 2 * ( x |^ 1 ) ) )
.= ( - ( 2 * x ) ) by NEWTON:5;
end;
hence thesis by A1,A8,A9,FDIFF_1:19;
end;
