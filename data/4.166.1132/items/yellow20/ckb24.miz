environ
vocabularies RELAT_2,ALTCAT_1,XBOOLE_0,MSUALG_6,FUNCTOR0,FUNCT_2,FUNCT_1,RELAT_1,CAT_1,ENS_1,PARTFUN1,ZFMISC_1,STRUCT_0,YELLOW18,SETFAM_1,PBOOLE,ALTCAT_2,TARSKI,SUBSET_1,REALSET1,FUNCOP_1,FUNCT_3,MCART_1,MSUALG_3,WELLORD1,ARYTM_0,YELLOW20;
notations TARSKI,XBOOLE_0,ZFMISC_1,RELAT_1,RELSET_1,FUNCT_1,FUNCT_2,MCART_1,BINOP_1,REALSET1,MULTOP_1,PBOOLE,STRUCT_0,FUNCT_4,PARTFUN1,FUNCOP_1,MSUALG_3,FUNCT_3,ALTCAT_1,ALTCAT_2,FUNCTOR0,FUNCTOR3,YELLOW18,CKB10,CKB14,CKB21;
definitions TARSKI,RELAT_1,PARTFUN1,PBOOLE,MSUALG_3,ALTCAT_1,ALTCAT_2,FUNCTOR0,FUNCT_2,XBOOLE_0,BINOP_1,REALSET1,CKB10,CKB14,CKB21;
theorems ZFMISC_1,RELAT_1,FUNCT_1,PBOOLE,MCART_1,FUNCT_2,FUNCT_3,FUNCT_4,ALTCAT_1,ALTCAT_2,FUNCTOR3,ALTCAT_4,FUNCTOR0,FUNCTOR1,FUNCTOR2,PARTFUN1,MULTOP_1,MSUALG_3,YELLOW18,XBOOLE_0,XBOOLE_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23;
schemes FUNCT_1,YELLOW18;
registrations SUBSET_1,RELAT_1,FUNCT_1,FUNCOP_1,PBOOLE,STRUCT_0,ALTCAT_2,FUNCTOR0,FUNCTOR2,ALTCAT_4,YELLOW18,RELSET_1;
constructors REALSET1,MSUALG_3,FUNCTOR3,YELLOW18,RELSET_1,CKB10,CKB14,CKB21;
requirements SUBSET,BOOLE;
begin
theorem
Th22: (for A,B being AltCatStr holds (A,B have_the_same_composition  implies (for a1,a2 being (object of A) holds (for b1,b2 being (object of B) holds (for o1,o2 being (object of ( Intersect (A,B) )) holds ((((o1 = a1 & o1 = b1) & o2 = a2) & o2 = b2) implies <^ o1,o2 ^> = ( <^ a1,a2 ^> /\ <^ b1,b2 ^> )))))))
proof
let A being AltCatStr,B being AltCatStr;
assume that
A1: A,B have_the_same_composition ;
(the carrier of ( Intersect (A,B) )) = ( (the carrier of A) /\ (the carrier of B) ) by A1,CKB21:def 1;
then A2: [: (the carrier of ( Intersect (A,B) )),(the carrier of ( Intersect (A,B) )) :] = ( [: (the carrier of A),(the carrier of A) :] /\ [: (the carrier of B),(the carrier of B) :] ) by ZFMISC_1:100;
let a1 being (object of A),a2 being (object of A);
let b1 being (object of B),b2 being (object of B);
let o1 being (object of ( Intersect (A,B) )),o2 being (object of ( Intersect (A,B) ));
assume that
A3: (((o1 = a1 & o1 = b1) & o2 = a2) & o2 = b2);
A4:now
assume ((the carrier of A) <> ( {} ) & (the carrier of B) <> ( {} ));
then ([ a1,a2 ] in [: (the carrier of A),(the carrier of A) :] & [ b1,b2 ] in [: (the carrier of B),(the carrier of B) :]) by ZFMISC_1:def 2;
hence [ o1,o2 ] in [: (the carrier of ( Intersect (A,B) )),(the carrier of ( Intersect (A,B) )) :] by A3,A2,XBOOLE_0:def 4;
end;
A5: (( dom (the Arrows of A) ) = [: (the carrier of A),(the carrier of A) :] & ( dom (the Arrows of B) ) = [: (the carrier of B),(the carrier of B) :]) by PARTFUN1:def 2;
A6: ( dom (the Arrows of ( Intersect (A,B) )) ) = [: (the carrier of ( Intersect (A,B) )),(the carrier of ( Intersect (A,B) )) :] by PARTFUN1:def 2;
A7:now
assume ((the carrier of A) = ( {} ) or (the carrier of B) = ( {} ));
then A8: ([: (the carrier of A),(the carrier of A) :] = ( {} ) or [: (the carrier of B),(the carrier of B) :] = ( {} )) by ZFMISC_1:90;
then (( (the Arrows of A) . [ a1,a2 ] ) = ( {} ) or ( (the Arrows of B) . [ b1,b2 ] ) = ( {} )) by A5,FUNCT_1:def 2;
hence (( ( (the Arrows of A) . [ a1,a2 ] ) /\ ( (the Arrows of B) . [ b1,b2 ] ) ) = ( {} ) & ( (the Arrows of ( Intersect (A,B) )) . [ o1,o2 ] ) = ( {} )) by A2,A6,A8,FUNCT_1:def 2;
end;
(the Arrows of ( Intersect (A,B) )) = ( Intersect ((the Arrows of A),(the Arrows of B)) ) by A1,CKB21:def 1;
hence thesis by A3,A2,A5,A4,A7,CKB14:def 1;
end;
