environ
vocabularies GRAPH_1,STRUCT_0,FUNCT_1,PARTFUN1,ZFMISC_1,SUBSET_1,XBOOLE_0,CARD_1,FUNCOP_1,RELAT_1,TARSKI,ALGSTR_0,WELLORD1,CAT_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,NUMBERS,BINOP_1,FUNCOP_1,STRUCT_0,GRAPH_1,CKB1,CKB2,CKB3,CKB5,CKB6,CKB7,CKB10,CKB18;
definitions TARSKI,FUNCOP_1,BINOP_1,GRAPH_1,CKB5,CKB6,CKB7,CKB10,CKB18;
theorems TARSKI,FUNCT_1,FUNCT_2,PARTFUN1,FUNCOP_1,SUBSET_1,WELLORD2,RELAT_1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18;
schemes FUNCT_2;
registrations XBOOLE_0,FUNCT_1,RELSET_1,FUNCT_2,STRUCT_0,RELAT_1,CKB1,CKB4;
constructors PARTFUN1,WELLORD2,BINOP_1,PBOOLE,GRAPH_1,RELSET_1,CKB1,CKB5,CKB6,CKB7,CKB10,CKB18;
requirements SUBSET,BOOLE;
begin
reserve C for non  void non  empty CatStr;
reserve f for (Morphism of C);
reserve g for (Morphism of C);
reserve b for (Object of C);
Lm1:now
let o being set;
let m being set;
let C being non  void non  empty CatStr;
assume that
A1: C = CatStr (# { o },{ m },( m :-> o ),( m :-> o ),( (m,m) :-> m ),( o :-> m ) #);
set CP = (the Comp of C);
set CD = (the Source of C);
set CC = (the Target of C);
set CI = (the Id of C);
thus (for f,g being (Element of (the carrier' of C)) holds ([ g,f ] in ( dom CP ) iff ( CD . g ) = ( CC . f )))
proof
let f being (Element of (the carrier' of C));
let g being (Element of (the carrier' of C));
A2: ( dom CP ) = { [ m,m ] } by A1,FUNCOP_1:13;
(f = m & g = m) by A1,TARSKI:def 1;
hence thesis by A1,A2,TARSKI:def 1;
end;

thus (for f,g being (Element of (the carrier' of C)) holds (( CD . g ) = ( CC . f ) implies (( CD . ( CP . [ g,f ] ) ) = ( CD . f ) & ( CC . ( CP . [ g,f ] ) ) = ( CC . g ))))
proof
let f being (Element of (the carrier' of C));
let g being (Element of (the carrier' of C));
( CP . (g,f) ) = m by A1,FUNCOP_1:77;
then reconsider gf = ( CP . [ g,f ] ) as (Element of (the carrier' of C)) by A1,TARSKI:def 1;
( CD . gf ) = o by A1,FUNCT_2:50;
hence thesis by A1,FUNCT_2:50;
end;

thus (for f,g,h being (Element of (the carrier' of C)) holds ((( CD . h ) = ( CC . g ) & ( CD . g ) = ( CC . f )) implies ( CP . [ h,( CP . [ g,f ] ) ] ) = ( CP . [ ( CP . [ h,g ] ),f ] )))
proof
let f being (Element of (the carrier' of C));
let g being (Element of (the carrier' of C));
let h being (Element of (the carrier' of C));
(( CP . (g,f) ) = m & ( CP . (h,g) ) = m) by A1,FUNCOP_1:77;
then reconsider gf = ( CP . (g,f) ),hg = ( CP . (h,g) ) as (Element of (the carrier' of C)) by A1,TARSKI:def 1;
(( CP . (h,gf) ) = m & ( CP . (hg,f) ) = m) by A1,FUNCOP_1:77;
hence thesis;
end;

let b being (Element of C);
b = o by A1,TARSKI:def 1;
hence (( CD . ( CI . b ) ) = b & ( CC . ( CI . b ) ) = b) by A1,FUNCT_2:50;
thus (for f being (Element of (the carrier' of C)) holds (( CC . f ) = b implies ( CP . (( CI . b ),f) ) = f))
proof
let f being (Element of (the carrier' of C));
f = m by A1,TARSKI:def 1;
hence thesis by A1,FUNCOP_1:77;
end;

let g being (Element of (the carrier' of C));
g = m by A1,TARSKI:def 1;
hence ( CP . (g,( CI . b )) ) = g by A1,FUNCOP_1:77;
end;
registration
cluster  Category-like non  void non  empty  strict for CatStr;
existence
proof
reconsider C = CatStr (# { ( 0 ) },{ 1 },( 1 :-> ( 0 ) ),( 1 :-> ( 0 ) ),( (1,1) :-> 1 ),( ( 0 ) :-> 1 ) #) as non  void non  empty CatStr;
take C;
thus ((((for f,g being (Element of (the carrier' of C)) holds ([ g,f ] in ( dom (the Comp of C) ) iff ( (the Source of C) . g ) = ( (the Target of C) . f ))) & (for f,g being (Element of (the carrier' of C)) holds (( (the Source of C) . g ) = ( (the Target of C) . f ) implies (( (the Source of C) . ( (the Comp of C) . (g,f) ) ) = ( (the Source of C) . f ) & ( (the Target of C) . ( (the Comp of C) . (g,f) ) ) = ( (the Target of C) . g ))))) & (for f,g,h being (Element of (the carrier' of C)) holds ((( (the Source of C) . h ) = ( (the Target of C) . g ) & ( (the Source of C) . g ) = ( (the Target of C) . f )) implies ( (the Comp of C) . (h,( (the Comp of C) . (g,f) )) ) = ( (the Comp of C) . (( (the Comp of C) . (h,g) ),f) )))) & (for b being (Element of C) holds (((( (the Source of C) . ( (the Id of C) . b ) ) = b & ( (the Target of C) . ( (the Id of C) . b ) ) = b) & (for f being (Element of (the carrier' of C)) holds (( (the Target of C) . f ) = b implies ( (the Comp of C) . (( (the Id of C) . b ),f) ) = f))) & (for g being (Element of (the carrier' of C)) holds (( (the Source of C) . g ) = b implies ( (the Comp of C) . (g,( (the Id of C) . b )) ) = g))))) by Lm1;
thus thesis;
end;
end;
