environ
vocabularies XBOOLE_0,ROBBINS1,SUBSET_1,ARYTM_3,LATTICES,ROBBINS2;
notations STRUCT_0,LATTICES,ROBBINS1,CKB1;
definitions CKB1;
theorems ROBBINS1,LATTICES,STRUCT_0,CKB1,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65;
registrations LATTICES,ROBBINS1,STRUCT_0,CKB2,CKB3,CKB4,CKB33,CKB66,CKB67;
constructors ROBBINS1,CKB1;
begin
reserve L for  satisfying_DN_1 non  empty ComplLLattStr;
reserve x for (Element of L);
reserve z for (Element of L);
theorem
Th58: (for L being non  empty ComplLLattStr holds (for x,z being (Element of L) holds (L is  join-commutative  join-associative  Huntington implies ( ( z + x ) *' ( z + ( x ` ) ) ) = z)))
proof
let L being non  empty ComplLLattStr;
let x being (Element of L);
let z being (Element of L);
assume L is  join-commutative  join-associative  Huntington;
then reconsider L9 = L as  join-commutative  join-associative  Huntington non  empty ComplLLattStr;
reconsider z9 = z,x9 = x as (Element of L9);
( ( z9 + x9 ) *' ( z9 + ( x9 ` ) ) ) = ( z9 + ( x9 *' ( x9 ` ) ) ) by ROBBINS1:31
.= ( z9 + ( Bot L9 ) ) by ROBBINS1:15
.= z9 by ROBBINS1:13;
hence thesis;
end;
