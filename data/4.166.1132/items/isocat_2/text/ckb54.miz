environ
vocabularies XBOOLE_0,FUNCT_1,FUNCT_2,FUNCT_5,ZFMISC_1,RELAT_1,TARSKI,SUBSET_1,MCART_1,CAT_1,GRAPH_1,NATTRA_1,STRUCT_0,CAT_2,FINSEQ_2,PZFMISC1,FUNCOP_1,PARTFUN1,BORSUK_1,ISOCAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,BINOP_1,FUNCT_3,FUNCT_5,STRUCT_0,GRAPH_1,CAT_1,CAT_2,NATTRA_1,ISOCAT_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30,CKB36,CKB40,CKB41,CKB42,CKB45,CKB46,CKB53;
definitions TARSKI,FUNCT_1,CAT_1,NATTRA_1,ISOCAT_1,XBOOLE_0,BINOP_1,GRAPH_1,CKB10,CKB16,CKB19,CKB24,CKB30,CKB36,CKB41,CKB42,CKB45,CKB46,CKB53;
theorems FUNCT_2,CAT_1,TARSKI,ZFMISC_1,FUNCT_1,DOMAIN_1,CAT_2,FUNCT_3,FUNCOP_1,NATTRA_1,ISOCAT_1,FUNCT_5,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB38,CKB39,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53;
schemes FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0,CKB37;
constructors PARTFUN1,DOMAIN_1,ISOCAT_1,FUNCOP_1,RELSET_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30,CKB36,CKB40,CKB41,CKB42,CKB45,CKB46,CKB53;
requirements SUBSET,BOOLE;
begin
reserve A for Category;
reserve B for Category;
reserve C for Category;
reserve F1 for (Functor of A,B);
theorem
Th45: (for F1,G1 being (Functor of A,B) holds (for F2,G2 being (Functor of A,C) holds ((F1 is_transformable_to G1 & F2 is_transformable_to G2) implies (for t1 being (transformation of F1,G1) holds (for t2 being (transformation of F2,G2) holds (for a being (Object of A) holds ( <: t1,t2 :> . a ) = [ ( t1 . a ),( t2 . a ) ]))))))
proof
let F1 being (Functor of A,B);
let G1 being (Functor of A,B);
let F2 being (Functor of A,C);
let G2 being (Functor of A,C);
assume that
A1: (F1 is_transformable_to G1 & F2 is_transformable_to G2);
let t1 being (transformation of F1,G1);
let t2 being (transformation of F2,G2);
let a being (Object of A);
reconsider s1 = t1 as (Function of (the carrier of A),(the carrier' of B));
reconsider s2 = t2 as (Function of (the carrier of A),(the carrier' of C));
thus ( <: t1,t2 :> . a ) = ( (<: t1,t2 :> qua (Function of (the carrier of A),(the carrier' of [: B,C :]))) . a ) by A1,CKB52:1,NATTRA_1:def 5
.= ( <: s1,s2 :> . a ) by A1,CKB53:def 1
.= [ ( t1 . a ),( t2 . a ) ] by A1,CKB48:1;
end;
