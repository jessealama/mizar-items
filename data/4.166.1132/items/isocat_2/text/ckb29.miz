environ
vocabularies XBOOLE_0,FUNCT_1,FUNCT_2,FUNCT_5,ZFMISC_1,RELAT_1,TARSKI,SUBSET_1,MCART_1,CAT_1,GRAPH_1,NATTRA_1,STRUCT_0,CAT_2,FINSEQ_2,PZFMISC1,FUNCOP_1,PARTFUN1,BORSUK_1,ISOCAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,BINOP_1,FUNCT_3,FUNCT_5,STRUCT_0,GRAPH_1,CAT_1,CAT_2,NATTRA_1,ISOCAT_1,CKB1,CKB10,CKB16,CKB19,CKB24;
definitions TARSKI,FUNCT_1,CAT_1,NATTRA_1,ISOCAT_1,XBOOLE_0,BINOP_1,GRAPH_1,CKB10,CKB16,CKB19,CKB24;
theorems FUNCT_2,CAT_1,TARSKI,ZFMISC_1,FUNCT_1,DOMAIN_1,CAT_2,FUNCT_3,FUNCOP_1,NATTRA_1,ISOCAT_1,FUNCT_5,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28;
schemes FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0;
constructors PARTFUN1,DOMAIN_1,ISOCAT_1,FUNCOP_1,RELSET_1,CKB1,CKB10,CKB16,CKB19,CKB24;
requirements SUBSET,BOOLE;
begin
reserve A for Category;
reserve B for Category;
reserve C for Category;
reserve F for (Functor of A,B);
reserve F1 for (Functor of A,B);
reserve o for set;
reserve m for set;
reserve t for (natural_transformation of F,F1);
theorem
Th27: (for F1,F2 being (Functor of [: A,B :],C) holds (F1 is_naturally_transformable_to F2 implies (for t being (natural_transformation of F1,F2) holds (( export F1 ) is_naturally_transformable_to ( export F2 ) & (ex G being (natural_transformation of ( export F1 ),( export F2 )) st (for s being (Function of [: (the carrier of A),(the carrier of B) :],(the carrier' of C)) holds (t = s implies (for a being (Object of A) holds ( G . a ) = [ [ ( ( export F1 ) . a ),( ( export F2 ) . a ) ],( ( curry s ) . a ) ]))))))))
proof
let F1 being (Functor of [: A,B :],C);
let F2 being (Functor of [: A,B :],C);
assume A1: F1 is_naturally_transformable_to F2;
then A2: F1 is_transformable_to F2 by NATTRA_1:def 7;
let t being (natural_transformation of F1,F2);
(the carrier of [: A,B :]) = [: (the carrier of A),(the carrier of B) :] by CAT_2:23;
then reconsider s = t as (Function of [: (the carrier of A),(the carrier of B) :],(the carrier' of C));
A3:now
let a being (Object of A);
let S1 being (Functor of B,C);
let S2 being (Functor of B,C);
assume that
A4: S1 = ( ( export F1 ) . a )
and
A5: S2 = ( ( export F2 ) . a );
let b being (Object of B);
A6: ( S2 . b ) = ( ( F2 ?- a ) . b ) by A5,CKB26:1
.= ( F2 . [ a,b ] ) by CKB12:1;
A7: ( ( ( curry s ) . a ) . b ) = ( s . (a,b) ) by CAT_2:3
.= ( t . [ a,b ] ) by A2,NATTRA_1:def 5;
( S1 . b ) = ( ( F1 ?- a ) . b ) by A4,CKB26:1
.= ( F1 . [ a,b ] ) by CKB12:1;
hence ( ( ( curry s ) . a ) . b ) in ( Hom (( S1 . b ),( S2 . b )) ) by A2,A6,A7,CKB25:1;
end;
A8:now
let a being (Object of A);
let S1 being (Functor of B,C);
let S2 being (Functor of B,C);
assume (S1 = ( ( export F1 ) . a ) & S2 = ( ( export F2 ) . a ));
then (for b being (Object of B) holds ( Hom (( S1 . b ),( S2 . b )) ) <> ( {} )) by A3;
hence S1 is_transformable_to S2 by NATTRA_1:def 2;
end;
A9:now
let a being (Object of A);
let S1 being (Functor of B,C);
let S2 being (Functor of B,C);
let T being (transformation of S1,S2);
assume that
A10: S1 = ( ( export F1 ) . a )
and
A11: S2 = ( ( export F2 ) . a )
and
A12: T = ( ( curry s ) . a );
let b1 being (Object of B);
let b2 being (Object of B);
assume that
A13: ( Hom (b1,b2) ) <> ( {} );
A14: ( Hom (( S1 . b1 ),( S1 . b2 )) ) <> ( {} ) by A13,CAT_1:84;
A15: ( T . b2 ) = ( (T qua (Function of (the carrier of B),(the carrier' of C))) . b2 ) by A8,A10,A11,NATTRA_1:def 5
.= ( s . (a,b2) ) by A12,CAT_2:3
.= ( t . [ a,b2 ] ) by A2,NATTRA_1:def 5;
A16: ( Hom (( F1 . [ a,b2 ] ),( F2 . [ a,b2 ] )) ) <> ( {} ) by A2,NATTRA_1:def 2;
let f being (Morphism of b1,b2);
A17: ( Hom (a,a) ) <> ( {} ) by CAT_1:27;
then reconsider g = [ ( id a ),f ] as (Morphism of [ a,b1 ],[ a,b2 ]) by A13,CAT_2:33;
A18: ( Hom ([ a,b1 ],[ a,b2 ]) ) <> ( {} ) by A13,A17,CKB13:1;
then A19: ( Hom (( F1 . [ a,b1 ] ),( F1 . [ a,b2 ] )) ) <> ( {} ) by CAT_1:84;
A20: S1 is_transformable_to S2 by A8,A10,A11;
then A21: ( Hom (( S1 . b1 ),( S2 . b1 )) ) <> ( {} ) by NATTRA_1:def 2;
A22: ( T . b1 ) = ( (T qua (Function of (the carrier of B),(the carrier' of C))) . b1 ) by A8,A10,A11,NATTRA_1:def 5
.= ( s . (a,b1) ) by A12,CAT_2:3
.= ( t . [ a,b1 ] ) by A2,NATTRA_1:def 5;
A23: ( Hom (( F1 . [ a,b1 ] ),( F2 . [ a,b1 ] )) ) <> ( {} ) by A2,NATTRA_1:def 2;
A24: ( Hom (( S1 . b2 ),( S2 . b2 )) ) <> ( {} ) by A20,NATTRA_1:def 2;
A25: ( Hom (( S2 . b1 ),( S2 . b2 )) ) <> ( {} ) by A13,CAT_1:84;
A26: ( S2 . f ) = ( ( F2 ?- a ) . f ) by A11,CKB26:1
.= ( ( F2 ?- a ) . (f qua (Morphism of B)) ) by A13,NATTRA_1:def 1
.= ( F2 . (( id a ),f) ) by CAT_2:36
.= ( F2 . g ) by A18,NATTRA_1:def 1;
A27: ( Hom (( F2 . [ a,b1 ] ),( F2 . [ a,b2 ] )) ) <> ( {} ) by A18,CAT_1:84;
( S1 . f ) = ( ( F1 ?- a ) . f ) by A10,CKB26:1
.= ( ( F1 ?- a ) . (f qua (Morphism of B)) ) by A13,NATTRA_1:def 1
.= ( F1 . (( id a ),f) ) by CAT_2:36
.= ( F1 . g ) by A18,NATTRA_1:def 1;
hence ( ( T . b2 ) * ( S1 . f ) ) = ( ( t . [ a,b2 ] ) * (( F1 . g ) qua (Morphism of C)) ) by A14,A24,A15,CAT_1:def 10
.= ( ( t . [ a,b2 ] ) * ( F1 . g ) ) by A19,A16,CAT_1:def 10
.= ( ( F2 . g ) * ( t . [ a,b1 ] ) ) by A1,A18,NATTRA_1:def 8
.= ( (( S2 . f ) qua (Morphism of C)) * ( T . b1 ) ) by A27,A23,A22,A26,CAT_1:def 10
.= ( ( S2 . f ) * ( T . b1 ) ) by A25,A21,CAT_1:def 10;
end;
defpred P[ set,set ]
 means
(for f being (Object of A) holds (for s being (Function of [: (the carrier of A),(the carrier of B) :],(the carrier' of C)) holds ((t = s & $1 = f) implies $2 = [ [ ( ( export F1 ) . f ),( ( export F2 ) . f ) ],( ( curry s ) . f ) ])));
A28:now
let a being (Object of A);
let S1 being (Functor of B,C);
let S2 being (Functor of B,C);
assume that
A29: (S1 = ( ( export F1 ) . a ) & S2 = ( ( export F2 ) . a ));
thus ( ( curry s ) . a ) is (transformation of S1,S2)
proof
thus S1 is_transformable_to S2 by A8,A29;
let b being (Object of B);
( ( ( curry s ) . a ) . b ) in ( Hom (( S1 . b ),( S2 . b )) ) by A3,A29;
hence thesis by CAT_1:def 4;
end;

end;
A30:now
let m;
assume m in (the carrier of A);
then reconsider a = m as (Object of A);
reconsider S1 = ( ( export F1 ) . a ),S2 = ( ( export F2 ) . a ) as (Functor of B,C) by CKB27:1;
take o = [ [ ( ( export F1 ) . a ),( ( export F2 ) . a ) ],( ( curry s ) . a ) ];
reconsider T = ( ( curry s ) . a ) as (transformation of S1,S2) by A28;
A31: S1 is_naturally_transformable_to S2
proof
thus S1 is_transformable_to S2 by A8;
take T;
thus thesis by A9;
end;
(for a,b being (Object of B) holds (( Hom (a,b) ) <> ( {} ) implies (for f being (Morphism of a,b) holds ( ( T . b ) * ( S1 . f ) ) = ( ( S2 . f ) * ( T . a ) )))) by A9;
then T is (natural_transformation of S1,S2) by A31,NATTRA_1:def 8;
then o in ( NatTrans (B,C) ) by A31,NATTRA_1:32;
hence o in (the carrier' of ( Functors (B,C) )) by NATTRA_1:def 17;
thus P[ m,o ];
end;
consider G being (Function of (the carrier of A),(the carrier' of ( Functors (B,C) ))) such that A32: (for m holds (m in (the carrier of A) implies P[ m,( G . m ) ])) from FUNCT_2:sch 1(A30);
A33:now
let a being (Object of A);
reconsider S1 = ( ( export F1 ) . a ),S2 = ( ( export F2 ) . a ) as (Functor of B,C) by CKB27:1;
reconsider T = ( ( curry s ) . a ) as (transformation of S1,S2) by A28;
A34: ( G . a ) = [ [ S1,S2 ],T ] by A32;
A35: S1 is_naturally_transformable_to S2
proof
thus S1 is_transformable_to S2 by A8;
take T;
thus thesis by A9;
end;
(for a,b being (Object of B) holds (( Hom (a,b) ) <> ( {} ) implies (for f being (Morphism of a,b) holds ( ( T . b ) * ( S1 . f ) ) = ( ( S2 . f ) * ( T . a ) )))) by A9;
then T is (natural_transformation of S1,S2) by A35,NATTRA_1:def 8;
then (( dom ( G . a ) ) = S1 & ( cod ( G . a ) ) = S2) by A34,NATTRA_1:33;
hence ( G . a ) in ( Hom (( ( export F1 ) . a ),( ( export F2 ) . a )) );
end;
then A36: (for a being (Object of A) holds ( Hom (( ( export F1 ) . a ),( ( export F2 ) . a )) ) <> ( {} ));
G is (transformation of ( export F1 ),( export F2 ))
proof
thus ( export F1 ) is_transformable_to ( export F2 ) by A36,NATTRA_1:def 2;
let a being (Object of A);
( G . a ) in ( Hom (( ( export F1 ) . a ),( ( export F2 ) . a )) ) by A33;
hence thesis by CAT_1:def 4;
end;
then reconsider G as (transformation of ( export F1 ),( export F2 ));
A37: ( export F1 ) is_transformable_to ( export F2 ) by A36,NATTRA_1:def 2;
A38:now
let a being (Object of A);
let b being (Object of A);
assume that
A39: ( Hom (a,b) ) <> ( {} );
A40: ( Hom (( ( export F2 ) . a ),( ( export F2 ) . b )) ) <> ( {} ) by A39,CAT_1:84;
reconsider S1 = ( ( export F1 ) . a ),S2 = ( ( export F2 ) . a ),S3 = ( ( export F1 ) . b ),S4 = ( ( export F2 ) . b ) as (Functor of B,C) by CKB27:1;
let f being (Morphism of a,b);
A41: ( F2 ?- a ) = ( ( export F2 ) . a ) by CKB26:1;
A42: ( F1 ?- a ) = ( ( export F1 ) . a ) by CKB26:1;
then reconsider T12 = ( ( curry s ) . a ) as (natural_transformation of S1,S2) by A1,A41,CKB15:1;
A43: ( F2 ?- b ) = ( ( export F2 ) . b ) by CKB26:1;
then A44: ( F2 ?- ( cod f ) ) = ( ( export F2 ) . b ) by A39,CAT_1:5;
then reconsider T24 = ( F2 ?- f ) as (natural_transformation of S2,S4) by A39,A41,CAT_1:5;
A45: ( G . a ) = ( G . (a qua set) ) by A37,NATTRA_1:def 5
.= [ [ S1,S2 ],T12 ] by A32;
A46: ( F1 ?- b ) = ( ( export F1 ) . b ) by CKB26:1;
then reconsider T34 = ( ( curry s ) . b ) as (natural_transformation of S3,S4) by A1,A43,CKB15:1;
A47: S3 is_naturally_transformable_to S4 by A1,A46,A43,CKB15:1;
then A48: S3 is_transformable_to S4 by NATTRA_1:def 7;
A49: ( F1 ?- ( cod f ) ) = ( ( export F1 ) . b ) by A39,A46,CAT_1:5;
then reconsider T13 = ( F1 ?- f ) as (natural_transformation of S1,S3) by A39,A42,CAT_1:5;
A50: ( G . b ) = ( G . (b qua set) ) by A37,NATTRA_1:def 5
.= [ [ S3,S4 ],T34 ] by A32;
A51: S1 is_naturally_transformable_to S2 by A1,A41,A42,CKB15:1;
then A52: S1 is_transformable_to S2 by NATTRA_1:def 7;
reconsider g = f as (Morphism of A);
A53: ( Hom (( ( export F1 ) . a ),( ( export F2 ) . a )) ) <> ( {} ) by A33;
( F2 ?- ( dom f ) ) = ( ( export F2 ) . a ) by A39,A41,CAT_1:5;
then A54: ( ( export F2 ) . g ) = [ [ S2,S4 ],T24 ] by A44,CKB24:def 1;
A55: ( Hom (( ( export F1 ) . a ),( ( export F1 ) . b )) ) <> ( {} ) by A39,CAT_1:84;
A56: S2 is_naturally_transformable_to S4 by A39,A41,A43,CKB18:1;
then A57: S2 is_transformable_to S4 by NATTRA_1:def 7;
A58: S1 is_naturally_transformable_to S3 by A39,A46,A42,CKB18:1;
then A59: S1 is_transformable_to S3 by NATTRA_1:def 7;
now
(the carrier' of [: A,B :]) = [: (the carrier' of A),(the carrier' of B) :] by CAT_2:23;
then reconsider FF1 = F1,FF2 = F2 as (Function of [: (the carrier' of A),(the carrier' of B) :],(the carrier' of C));
let c being (Object of B);
A60: ( Hom (( F1 . [ a,c ] ),( F2 . [ a,c ] )) ) <> ( {} ) by A2,NATTRA_1:def 2;
A61: ( Hom (( F1 . [ b,c ] ),( F2 . [ b,c ] )) ) <> ( {} ) by A2,NATTRA_1:def 2;
A62: (( Hom (( S3 . c ),( S4 . c )) ) <> ( {} ) & ( Hom (( S1 . c ),( S3 . c )) ) <> ( {} )) by A59,A48,NATTRA_1:def 2;
A63: (( Hom (( S2 . c ),( S4 . c )) ) <> ( {} ) & ( Hom (( S1 . c ),( S2 . c )) ) <> ( {} )) by A52,A57,NATTRA_1:def 2;
A64: ( t . [ b,c ] ) = ( s . (b,c) ) by A2,NATTRA_1:def 5
.= ( ( ( curry s ) . b ) . c ) by CAT_2:3
.= ( T34 . c ) by A48,NATTRA_1:def 5;
A65: ( t . [ a,c ] ) = ( s . (a,c) ) by A2,NATTRA_1:def 5
.= ( ( ( curry s ) . a ) . c ) by CAT_2:3
.= ( T12 . c ) by A52,NATTRA_1:def 5;
A66: ( Hom (c,c) ) <> ( {} ) by CAT_1:27;
then reconsider fi = [ f,( id c ) ] as (Morphism of [ a,c ],[ b,c ]) by A39,CAT_2:33;
A67: ( Hom ([ a,c ],[ b,c ]) ) <> ( {} ) by A39,A66,CKB13:1;
then A68: ( Hom (( F2 . [ a,c ] ),( F2 . [ b,c ] )) ) <> ( {} ) by CAT_1:84;
A69: ( F1 . fi ) = ( FF1 . (f,( id c )) ) by A67,NATTRA_1:def 1
.= ( ( curry (F1,f) ) . ( id c ) ) by CAT_2:3
.= ( (( F1 ?- f ) qua (Function of (the carrier of B),(the carrier' of C))) . c ) by FUNCT_2:15
.= ( T13 . c ) by A59,NATTRA_1:def 5;
A70: ( F2 . fi ) = ( FF2 . (f,( id c )) ) by A67,NATTRA_1:def 1
.= ( ( curry (F2,f) ) . ( id c ) ) by CAT_2:3
.= ( (( F2 ?- f ) qua (Function of (the carrier of B),(the carrier' of C))) . c ) by FUNCT_2:15
.= ( T24 . c ) by A57,NATTRA_1:def 5;
A71: ( Hom (( F1 . [ a,c ] ),( F1 . [ b,c ] )) ) <> ( {} ) by A67,CAT_1:84;
thus ( ( T34 `*` T13 ) . c ) = ( ( T34 . c ) * ( T13 . c ) ) by A58,A47,NATTRA_1:25
.= ( (( t . [ b,c ] ) qua (Morphism of C)) * ( F1 . fi ) ) by A62,A69,A64,CAT_1:def 10
.= ( ( t . [ b,c ] ) * ( F1 . fi ) ) by A61,A71,CAT_1:def 10
.= ( ( F2 . fi ) * ( t . [ a,c ] ) ) by A1,A67,NATTRA_1:def 8
.= ( ( F2 . fi ) * (( t . [ a,c ] ) qua (Morphism of C)) ) by A60,A68,CAT_1:def 10
.= ( ( T24 . c ) * ( T12 . c ) ) by A63,A70,A65,CAT_1:def 10
.= ( ( T24 `*` T12 ) . c ) by A51,A56,NATTRA_1:25;
end;
then A72: ( T34 `*` T13 ) = ( T24 `*` T12 ) by A52,A57,NATTRA_1:18,NATTRA_1:19;
( F1 ?- ( dom f ) ) = ( ( export F1 ) . a ) by A39,A42,CAT_1:5;
then A73: ( ( export F1 ) . g ) = [ [ S1,S3 ],T13 ] by A49,CKB24:def 1;
( Hom (( ( export F1 ) . b ),( ( export F2 ) . b )) ) <> ( {} ) by A33;
hence ( ( G . b ) * ( ( export F1 ) . f ) ) = ( ( G . b ) * (( ( export F1 ) . f ) qua (Morphism of ( Functors (B,C) ))) ) by A55,CAT_1:def 10
.= ( ( G . b ) * ( ( export F1 ) . g ) ) by A39,NATTRA_1:def 1
.= [ [ S1,S4 ],( T34 `*` T13 ) ] by A73,A50,NATTRA_1:36
.= ( ( ( export F2 ) . g ) * ( G . a ) ) by A54,A45,A72,NATTRA_1:36
.= ( (( ( export F2 ) . f ) qua (Morphism of ( Functors (B,C) ))) * ( G . a ) ) by A39,NATTRA_1:def 1
.= ( ( ( export F2 ) . f ) * ( G . a ) ) by A53,A40,CAT_1:def 10;
end;
A74: ( export F1 ) is_transformable_to ( export F2 ) by A36,NATTRA_1:def 2;
hence ( export F1 ) is_naturally_transformable_to ( export F2 ) by A38,NATTRA_1:def 7;
( export F1 ) is_naturally_transformable_to ( export F2 ) by A38,A74,NATTRA_1:def 7;
then reconsider G as (natural_transformation of ( export F1 ),( export F2 )) by A38,NATTRA_1:def 8;
take G;
let s being (Function of [: (the carrier of A),(the carrier of B) :],(the carrier' of C));
assume A75: t = s;
let a being (Object of A);
thus ( G . a ) = ( G . (a qua set) ) by A37,NATTRA_1:def 5
.= [ [ ( ( export F1 ) . a ),( ( export F2 ) . a ) ],( ( curry s ) . a ) ] by A32,A75;
end;
