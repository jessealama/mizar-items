environ
vocabularies XBOOLE_0,FUNCT_1,FUNCT_2,FUNCT_5,ZFMISC_1,RELAT_1,TARSKI,SUBSET_1,MCART_1,CAT_1,GRAPH_1,NATTRA_1,STRUCT_0,CAT_2,FINSEQ_2,PZFMISC1,FUNCOP_1,PARTFUN1,BORSUK_1,ISOCAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,BINOP_1,FUNCT_3,FUNCT_5,STRUCT_0,GRAPH_1,CAT_1,CAT_2,NATTRA_1,ISOCAT_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30;
definitions TARSKI,FUNCT_1,CAT_1,NATTRA_1,ISOCAT_1,XBOOLE_0,BINOP_1,GRAPH_1,CKB10,CKB16,CKB19,CKB24,CKB30;
theorems FUNCT_2,CAT_1,TARSKI,ZFMISC_1,FUNCT_1,DOMAIN_1,CAT_2,FUNCT_3,FUNCOP_1,NATTRA_1,ISOCAT_1,FUNCT_5,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31;
schemes FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0;
constructors PARTFUN1,DOMAIN_1,ISOCAT_1,FUNCOP_1,RELSET_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30;
requirements SUBSET,BOOLE;
begin
reserve A for Category;
reserve B for Category;
reserve C for Category;
reserve F1 for (Functor of A,B);
theorem
Th29: (for F1,F2,F3 being (Functor of [: A,B :],C) holds ((F1 is_naturally_transformable_to F2 & F2 is_naturally_transformable_to F3) implies (for t1 being (natural_transformation of F1,F2) holds (for t2 being (natural_transformation of F2,F3) holds ( export ( t2 `*` t1 ) ) = ( ( export t2 ) `*` ( export t1 ) )))))
proof
let F1 being (Functor of [: A,B :],C);
let F2 being (Functor of [: A,B :],C);
let F3 being (Functor of [: A,B :],C);
assume that
A1: F1 is_naturally_transformable_to F2
and
A2: F2 is_naturally_transformable_to F3;
A3: F2 is_transformable_to F3 by A2,NATTRA_1:def 7;
let t1 being (natural_transformation of F1,F2);
let t2 being (natural_transformation of F2,F3);
A4: F1 is_transformable_to F2 by A1,NATTRA_1:def 7;
A5: ( export F1 ) is_naturally_transformable_to ( export F2 ) by A1,CKB29:1;
then A6: ( export F1 ) is_transformable_to ( export F2 ) by NATTRA_1:def 7;
A7: ( export F2 ) is_naturally_transformable_to ( export F3 ) by A2,CKB29:1;
then A8: ( export F2 ) is_transformable_to ( export F3 ) by NATTRA_1:def 7;
A9: F1 is_naturally_transformable_to F3 by A1,A2,NATTRA_1:23;
then A10: F1 is_transformable_to F3 by NATTRA_1:def 7;
now
let a being (Object of A);
reconsider S1 = ( ( export F1 ) . a ),S2 = ( ( export F2 ) . a ),S3 = ( ( export F3 ) . a ) as (Functor of B,C) by CKB8:1;
(the carrier of [: A,B :]) = [: (the carrier of A),(the carrier of B) :] by CAT_2:23;
then reconsider s1 = t1,s2 = t2,s3 = ( t2 `*` t1 ) as (Function of [: (the carrier of A),(the carrier of B) :],(the carrier' of C));
A11: S2 = ( F2 ?- a ) by CKB26:1;
A12: S3 = ( F3 ?- a ) by CKB26:1;
then reconsider T2 = ( ( curry s2 ) . a ) as (natural_transformation of S2,S3) by A2,A11,CKB15:1;
A13: S2 is_naturally_transformable_to S3 by A2,A11,A12,CKB15:1;
then A14: S2 is_transformable_to S3 by NATTRA_1:def 7;
A15: S1 = ( F1 ?- a ) by CKB26:1;
then reconsider T1 = ( ( curry s1 ) . a ) as (natural_transformation of S1,S2) by A1,A11,CKB15:1;
A16: (( ( export t2 ) . a ) = [ [ S2,S3 ],T2 ] & ( ( export t1 ) . a ) = [ [ S1,S2 ],T1 ]) by A1,A2,CKB30:def 1;
A17: S1 is_naturally_transformable_to S2 by A1,A15,A11,CKB15:1;
then S1 is_naturally_transformable_to S3 by A13,NATTRA_1:23;
then A18: S1 is_transformable_to S3 by NATTRA_1:def 7;
reconsider T3 = ( ( curry s3 ) . a ) as (natural_transformation of S1,S3) by A9,A15,A12,CKB15:1;
A19: (( Hom (( ( export F1 ) . a ),( ( export F2 ) . a )) ) <> ( {} ) & ( Hom (( ( export F2 ) . a ),( ( export F3 ) . a )) ) <> ( {} )) by A6,A8,NATTRA_1:def 2;
A20: S1 is_transformable_to S2 by A17,NATTRA_1:def 7;
now
let b being (Object of B);
A21: (( Hom (( F1 . [ a,b ] ),( F2 . [ a,b ] )) ) <> ( {} ) & ( Hom (( F2 . [ a,b ] ),( F3 . [ a,b ] )) ) <> ( {} )) by A4,A3,NATTRA_1:def 2;
A22: (( Hom (( S1 . b ),( S2 . b )) ) <> ( {} ) & ( Hom (( S2 . b ),( S3 . b )) ) <> ( {} )) by A20,A14,NATTRA_1:def 2;
A23: ( T1 . b ) = ( (T1 qua (Function of (the carrier of B),(the carrier' of C))) . b ) by A20,NATTRA_1:def 5
.= ( s1 . (a,b) ) by CAT_2:3
.= ( t1 . [ a,b ] ) by A4,NATTRA_1:def 5;
A24: ( T2 . b ) = ( (T2 qua (Function of (the carrier of B),(the carrier' of C))) . b ) by A14,NATTRA_1:def 5
.= ( s2 . (a,b) ) by CAT_2:3
.= ( t2 . [ a,b ] ) by A3,NATTRA_1:def 5;
thus ( T3 . b ) = ( (T3 qua (Function of (the carrier of B),(the carrier' of C))) . b ) by A18,NATTRA_1:def 5
.= ( s3 . (a,b) ) by CAT_2:3
.= ( ( t2 `*` t1 ) . [ a,b ] ) by A10,NATTRA_1:def 5
.= ( ( t2 . [ a,b ] ) * ( t1 . [ a,b ] ) ) by A1,A2,NATTRA_1:25
.= ( ( T2 . b ) * (( T1 . b ) qua (Morphism of C)) ) by A21,A24,A23,CAT_1:def 10
.= ( ( T2 . b ) * ( T1 . b ) ) by A22,CAT_1:def 10
.= ( ( T2 `*` T1 ) . b ) by A17,A13,NATTRA_1:25;
end;
then A25: T3 = ( T2 `*` T1 ) by A18,NATTRA_1:19;
thus ( ( export ( t2 `*` t1 ) ) . a ) = [ [ S1,S3 ],T3 ] by A9,CKB30:def 1
.= ( ( ( export t2 ) . a ) * (( ( export t1 ) . a ) qua (Morphism of ( Functors (B,C) ))) ) by A16,A25,NATTRA_1:36
.= ( ( ( export t2 ) . a ) * ( ( export t1 ) . a ) ) by A19,CAT_1:def 10
.= ( ( ( export t2 ) `*` ( export t1 ) ) . a ) by A5,A7,NATTRA_1:25;
end;
hence thesis by A6,A8,NATTRA_1:18,NATTRA_1:19;
end;
