environ
vocabularies XBOOLE_0,FUNCT_1,FUNCT_2,FUNCT_5,ZFMISC_1,RELAT_1,TARSKI,SUBSET_1,MCART_1,CAT_1,GRAPH_1,NATTRA_1,STRUCT_0,CAT_2,FINSEQ_2,PZFMISC1,FUNCOP_1,PARTFUN1,BORSUK_1,ISOCAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,RELSET_1,PARTFUN1,FUNCT_2,FUNCOP_1,BINOP_1,FUNCT_3,FUNCT_5,STRUCT_0,GRAPH_1,CAT_1,CAT_2,NATTRA_1,ISOCAT_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30;
definitions TARSKI,FUNCT_1,CAT_1,NATTRA_1,ISOCAT_1,XBOOLE_0,BINOP_1,GRAPH_1,CKB10,CKB16,CKB19,CKB24,CKB30;
theorems FUNCT_2,CAT_1,TARSKI,ZFMISC_1,FUNCT_1,DOMAIN_1,CAT_2,FUNCT_3,FUNCOP_1,NATTRA_1,ISOCAT_1,FUNCT_5,RELSET_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35;
schemes FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FUNCT_2,STRUCT_0;
constructors PARTFUN1,DOMAIN_1,ISOCAT_1,FUNCOP_1,RELSET_1,CKB1,CKB10,CKB16,CKB19,CKB24,CKB30;
requirements SUBSET,BOOLE;
begin
reserve A for Category;
reserve B for Category;
reserve C for Category;
reserve F for (Functor of A,B);
reserve F1 for (Functor of A,B);
reserve o for set;
reserve m for set;
reserve t for (natural_transformation of F,F1);
definition
let A;
let B;
let C;
func export (A,B,C) -> (Functor of ( Functors ([: A,B :],C) ),( Functors (A,( Functors (B,C) )) )) means 
:Def6: (for F1,F2 being (Functor of [: A,B :],C) holds (F1 is_naturally_transformable_to F2 implies (for t being (natural_transformation of F1,F2) holds ( it . [ [ F1,F2 ],t ] ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ])));
existence
proof
defpred P[ set,set ]
 means
(for F1,F2 being (Functor of [: A,B :],C) holds (for t being (natural_transformation of F1,F2) holds ($1 = [ [ F1,F2 ],t ] implies $2 = [ [ ( export F1 ),( export F2 ) ],( export t ) ])));
A1:now
let o;
assume o in (the carrier' of ( Functors ([: A,B :],C) ));
then o in ( NatTrans ([: A,B :],C) ) by NATTRA_1:def 17;
then consider F1,F2 being (Functor of [: A,B :],C),t being (natural_transformation of F1,F2) such that A2: o = [ [ F1,F2 ],t ] and A3: F1 is_naturally_transformable_to F2 by NATTRA_1:def 16;
take m = [ [ ( export F1 ),( export F2 ) ],( export t ) ];
( export F1 ) is_naturally_transformable_to ( export F2 ) by A3,CKB29:1;
then m in ( NatTrans (A,( Functors (B,C) )) ) by NATTRA_1:def 16;
hence m in (the carrier' of ( Functors (A,( Functors (B,C) )) )) by NATTRA_1:def 17;
thus P[ o,m ]
proof
let F19 being (Functor of [: A,B :],C);
let F29 being (Functor of [: A,B :],C);
let t9 being (natural_transformation of F19,F29);
assume A4: o = [ [ F19,F29 ],t9 ];
then [ F1,F2 ] = [ F19,F29 ] by A2,ZFMISC_1:27;
then (F1 = F19 & F2 = F29) by ZFMISC_1:27;
hence thesis by A2,A4,ZFMISC_1:27;
end;

end;
consider FF being (Function of (the carrier' of ( Functors ([: A,B :],C) )),(the carrier' of ( Functors (A,( Functors (B,C) )) ))) such that A5: (for o holds (o in (the carrier' of ( Functors ([: A,B :],C) )) implies P[ o,( FF . o ) ])) from FUNCT_2:sch 1(A1);
FF is (Functor of ( Functors ([: A,B :],C) ),( Functors (A,( Functors (B,C) )) ))
proof
thus (for c being (Object of ( Functors ([: A,B :],C) )) holds (ex d being (Object of ( Functors (A,( Functors (B,C) )) )) st ( FF . ( id c ) ) = ( id d )))
proof
let c being (Object of ( Functors ([: A,B :],C) ));
reconsider F = c as (Functor of [: A,B :],C) by CKB8:1;
reconsider d = ( export F ) as (Object of ( Functors (A,( Functors (B,C) )) )) by CKB8:1;
take d;
A6: ( id ( export F ) ) = ( export ( id F ) ) by CKB31:1;
( id c ) = [ [ F,F ],( id F ) ] by NATTRA_1:def 17;
hence ( FF . ( id c ) ) = [ [ ( export F ),( export F ) ],( export ( id F ) ) ] by A5
.= ( id d ) by A6,NATTRA_1:def 17;
end;

thus (for f being (Morphism of ( Functors ([: A,B :],C) )) holds (( FF . ( id ( dom f ) ) ) = ( id ( dom ( FF . f ) ) ) & ( FF . ( id ( cod f ) ) ) = ( id ( cod ( FF . f ) ) )))
proof
let f being (Morphism of ( Functors ([: A,B :],C) ));
consider F1,F2 being (Functor of [: A,B :],C),t being (natural_transformation of F1,F2) such that F1 is_naturally_transformable_to F2 and A7: ( dom f ) = F1 and A8: ( cod f ) = F2 and A9: f = [ [ F1,F2 ],t ] by CKB9:1;
A10: ( FF . f ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ] by A5,A9;
then A11: ( dom ( FF . f ) ) = ( export F1 ) by NATTRA_1:33;
( id ( dom f ) ) = [ [ F1,F1 ],( id F1 ) ] by A7,NATTRA_1:def 17;
hence ( FF . ( id ( dom f ) ) ) = [ [ ( export F1 ),( export F1 ) ],( export ( id F1 ) ) ] by A5
.= [ [ ( export F1 ),( export F1 ) ],( id ( export F1 ) ) ] by CKB31:1
.= ( id ( dom ( FF . f ) ) ) by A11,NATTRA_1:def 17;
A12: ( cod ( FF . f ) ) = ( export F2 ) by A10,NATTRA_1:33;
( id ( cod f ) ) = [ [ F2,F2 ],( id F2 ) ] by A8,NATTRA_1:def 17;
hence ( FF . ( id ( cod f ) ) ) = [ [ ( export F2 ),( export F2 ) ],( export ( id F2 ) ) ] by A5
.= [ [ ( export F2 ),( export F2 ) ],( id ( export F2 ) ) ] by CKB31:1
.= ( id ( cod ( FF . f ) ) ) by A12,NATTRA_1:def 17;
end;

let f being (Morphism of ( Functors ([: A,B :],C) ));
let g being (Morphism of ( Functors ([: A,B :],C) ));
consider F1,F2 being (Functor of [: A,B :],C),t being (natural_transformation of F1,F2) such that A13: F1 is_naturally_transformable_to F2 and ( dom f ) = F1 and A14: ( cod f ) = F2 and A15: f = [ [ F1,F2 ],t ] by CKB9:1;
A16: ( FF . f ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ] by A5,A15;
consider G1,G2 being (Functor of [: A,B :],C),u being (natural_transformation of G1,G2) such that A17: G1 is_naturally_transformable_to G2 and A18: ( dom g ) = G1 and ( cod g ) = G2 and A19: g = [ [ G1,G2 ],u ] by CKB9:1;
assume A20: ( dom g ) = ( cod f );
then reconsider u as (natural_transformation of F2,G2) by A14,A18;
( g * f ) = [ [ F1,G2 ],( u `*` t ) ] by A14,A15,A18,A19,A20,NATTRA_1:36;
then A21: ( FF . ( g * f ) ) = [ [ ( export F1 ),( export G2 ) ],( export ( u `*` t ) ) ] by A5;
(( FF . g ) = [ [ ( export F2 ),( export G2 ) ],( export u ) ] & ( ( export u ) `*` ( export t ) ) = ( export ( u `*` t ) )) by A5,A13,A14,A17,A18,A19,A20,CKB32:1;
hence thesis by A16,A21,NATTRA_1:36;
end;
then reconsider FF as (Functor of ( Functors ([: A,B :],C) ),( Functors (A,( Functors (B,C) )) ));
take FF;
let F1 being (Functor of [: A,B :],C);
let F2 being (Functor of [: A,B :],C);
assume that
A22: F1 is_naturally_transformable_to F2;
let t being (natural_transformation of F1,F2);
[ [ F1,F2 ],t ] in ( NatTrans ([: A,B :],C) ) by A22,NATTRA_1:32;
then [ [ F1,F2 ],t ] in (the carrier' of ( Functors ([: A,B :],C) )) by NATTRA_1:def 17;
hence thesis by A5;
end;
uniqueness
proof
let IT1 being (Functor of ( Functors ([: A,B :],C) ),( Functors (A,( Functors (B,C) )) ));
let IT2 being (Functor of ( Functors ([: A,B :],C) ),( Functors (A,( Functors (B,C) )) ));
assume that
A23: (for F1,F2 being (Functor of [: A,B :],C) holds (F1 is_naturally_transformable_to F2 implies (for t being (natural_transformation of F1,F2) holds ( IT1 . [ [ F1,F2 ],t ] ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ])))
and
A24: (for F1,F2 being (Functor of [: A,B :],C) holds (F1 is_naturally_transformable_to F2 implies (for t being (natural_transformation of F1,F2) holds ( IT2 . [ [ F1,F2 ],t ] ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ])));
now
let f being (Morphism of ( Functors ([: A,B :],C) ));
consider F1,F2 being (Functor of [: A,B :],C),t being (natural_transformation of F1,F2) such that A25: F1 is_naturally_transformable_to F2 and ( dom f ) = F1 and ( cod f ) = F2 and A26: f = [ [ F1,F2 ],t ] by CKB9:1;
thus ( (IT1 qua (Function of (the carrier' of ( Functors ([: A,B :],C) )),(the carrier' of ( Functors (A,( Functors (B,C) )) )))) . f ) = [ [ ( export F1 ),( export F2 ) ],( export t ) ] by A23,A25,A26
.= ( (IT2 qua (Function of (the carrier' of ( Functors ([: A,B :],C) )),(the carrier' of ( Functors (A,( Functors (B,C) )) )))) . f ) by A24,A25,A26;
end;
hence thesis by FUNCT_2:63;
end;
end;
