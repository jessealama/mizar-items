environ
vocabularies NUMBERS,LOPBAN_2,SUBSET_1,NAT_1,SEQ_1,XBOOLE_0,ALGSTR_0,RELAT_1,COMSEQ_3,ARYTM_3,CARD_1,PREPOWER,FUNCT_1,MESFUNC1,SEQ_2,ORDINAL2,ARYTM_1,SUPINF_2,REAL_1,XXREAL_0,NORMSP_1,PRE_TOPC,XXREAL_2,XREAL_0,ORDINAL1,SERIES_1,COMPLEX1,SIN_COS,REALSET1,STRUCT_0,VALUED_1,NEWTON,LOPBAN_3,CARD_3,VALUED_0,RSSPACE3,LOPBAN_4;
notations SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,XXREAL_0,XREAL_0,VALUED_0,PRE_TOPC,ALGSTR_0,ORDINAL1,NUMBERS,COMPLEX1,SQUARE_1,NORMSP_0,NORMSP_1,RSSPACE3,SEQ_1,SEQ_2,NEWTON,REAL_1,NAT_1,STRUCT_0,SERIES_1,NAT_D,SIN_COS,RLVECT_1,BHSP_4,LOPBAN_2,LOPBAN_3,CKB1,CKB16,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
definitions NORMSP_1,LOPBAN_3,VALUED_0,CKB1,CKB16,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
theorems ABSVALUE,RLVECT_1,XCMPLX_0,XCMPLX_1,XREAL_0,SEQ_2,SEQM_3,COMSEQ_3,SIN_COS,SERIES_1,NAT_1,INT_1,NEWTON,FUNCT_2,NORMSP_1,SEQ_4,RSSPACE3,LOPBAN_3,XREAL_1,XXREAL_0,ORDINAL1,BHSP_4,NORMSP_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27;
schemes SEQ_1,NAT_1,SIN_COS,FUNCT_2,CLASSES1,CKB17;
registrations ORDINAL1,RELSET_1,XXREAL_0,XREAL_0,NAT_1,MEMBERED,SIN_COS,STRUCT_0,GROUP_1,LOPBAN_2,LOPBAN_3,XBOOLE_0,VALUED_0,SEQ_2,SEQ_4,NUMBERS;
constructors ARYTM_0,REAL_1,SQUARE_1,NAT_1,SEQ_2,COMSEQ_3,NAT_D,SIN_COS,BHSP_4,RSSPACE3,LOPBAN_3,SEQ_1,SERIES_1,SEQ_4,NORMSP_1,PARTFUN1,VALUED_0,SETFAM_1,RAT_1,XBOOLE_0,HAHNBAN,FCONT_1,SEQM_3,RELSET_1,CKB1,CKB16,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25;
requirements SUBSET,REAL,BOOLE,NUMERALS,ARITHM;
begin
reserve X for Banach_Algebra;
reserve k for (Element of ( NAT ));
reserve seq for (sequence of X);
theorem
Th16: ( ( Partial_Sums seq ) . k ) = ( ( ( Partial_Sums ( Shift seq ) ) . k ) + ( seq . k ) )
proof
defpred X[ (Element of ( NAT )) ]
 means
( ( Partial_Sums seq ) . $1 ) = ( ( ( Partial_Sums ( Shift seq ) ) . $1 ) + ( seq . $1 ) );
A1: (for k holds (X[ k ] implies X[ ( k + 1 ) ]))
proof
let k;
assume ( ( Partial_Sums seq ) . k ) = ( ( ( Partial_Sums ( Shift seq ) ) . k ) + ( seq . k ) );
hence ( ( Partial_Sums seq ) . ( k + 1 ) ) = ( ( ( ( Partial_Sums ( Shift seq ) ) . k ) + ( seq . k ) ) + ( seq . ( k + 1 ) ) ) by BHSP_4:def 1
.= ( ( ( ( Partial_Sums ( Shift seq ) ) . k ) + ( ( Shift seq ) . ( k + 1 ) ) ) + ( seq . ( k + 1 ) ) ) by CKB21:def 1
.= ( ( ( Partial_Sums ( Shift seq ) ) . ( k + 1 ) ) + ( seq . ( k + 1 ) ) ) by BHSP_4:def 1;
end;
( ( Partial_Sums seq ) . ( 0 ) ) = ( seq . ( 0 ) ) by BHSP_4:def 1
.= ( ( 0. X ) + ( seq . ( 0 ) ) ) by RLVECT_1:4
.= ( ( ( Shift seq ) . ( 0 ) ) + ( seq . ( 0 ) ) ) by CKB21:def 1
.= ( ( ( Partial_Sums ( Shift seq ) ) . ( 0 ) ) + ( seq . ( 0 ) ) ) by BHSP_4:def 1;
then A2: X[ ( 0 ) ];
(for k holds X[ k ]) from NAT_1:sch 1(A2,A1);
hence thesis;
end;
