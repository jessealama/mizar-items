environ
vocabularies NUMBERS,ORDINAL1,ZFMISC_1,STRUCT_0,VALUED_0,POLYNOM7,SUBSET_1,RELAT_1,SUPINF_2,POLYNOM1,VECTSP_1,ORDERS_1,TARSKI,PRE_POLY,ARYTM_3,FUNCT_1,ALGSEQ_1,NAT_1,FINSET_1,CARD_1,XXREAL_0,XBOOLE_0,RLVECT_1,ALGSTR_0,FINSEQ_1,CARD_3,PARTFUN1,ORDINAL4,ARYTM_1,ALGSTR_1,LATTICES,VECTSP_2,BINOP_1,CAT_3,MCART_1,RELAT_2,BAGORDER,TERMORD,XCMPLX_0,BROUWER,ORDERS_2,WELLORD1,FINSUB_1,WAYBEL_4,MESFUNC1,REWRITE1,INT_1,IDEAL_1,POLYRED;
notations CARD_1,NUMBERS,XCMPLX_0,TARSKI,XBOOLE_0,SUBSET_1,ZFMISC_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,XXREAL_0,STRUCT_0,ALGSTR_0,ORDINAL1,NAT_1,ALGSTR_1,WAYBEL_0,FINSUB_1,WAYBEL_4,REWRITE1,RLVECT_1,FINSEQ_1,MCART_1,ORDERS_1,VFUNCT_1,GROUP_1,VECTSP_2,VECTSP_1,POLYNOM7,WELLORD1,WELLFND1,IDEAL_1,ORDERS_2,POLYNOM1,BAGORDER,TERMORD,PRE_POLY;
definitions STRUCT_0,POLYNOM7;
theorems TARSKI,RELSET_1,FINSEQ_1,FUNCT_1,FUNCT_2,RELAT_1,ZFMISC_1,VECTSP_1,POLYNOM1,BINOM,RLVECT_1,VECTSP_2,FINSET_1,NAT_1,POLYNOM2,ALGSTR_1,RELAT_2,CARD_1,CARD_2,WAYBEL_0,ORDERS_2,ORDERS_1,MCART_1,POLYNOM7,FINSUB_1,WELLORD1,WELLFND1,REWRITE1,WAYBEL_4,XBOOLE_0,XBOOLE_1,MATRLIN,IDEAL_1,BAGORDER,TERMORD,XCMPLX_1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,PARTFUN1,STRUCT_0,PRE_POLY,CKB3,CKB4,CKB5,CKB6,CKB7;
schemes NAT_1,RELSET_1;
registrations XBOOLE_0,RELAT_1,ORDINAL1,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,CARD_1,FINSEQ_1,REWRITE1,STRUCT_0,VECTSP_1,ORDERS_2,ALGSTR_1,GCD_1,POLYNOM1,POLYNOM2,POLYNOM4,IDEAL_1,POLYNOM7,BAGORDER,TERMORD,VALUED_0,ALGSTR_0,PRE_POLY,VFUNCT_1,FUNCT_2,FUNCT_1,RELSET_1,CKB1,CKB2;
constructors REWRITE1,VECTSP_2,TRIANG_1,WAYBEL_4,WELLFND1,IDEAL_1,BAGORDER,TERMORD,DOMAIN_1,RELSET_1,BINOP_2,FVSUM_1,VFUNCT_1;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
theorem
Lm6: (for L being  Abelian  add-associative  right_zeroed  right_complementable non empty addLoopStr holds (for f,g being (FinSequence of (the carrier of L)) holds (for n being Nat holds ((( len f ) = ( n + 1 ) & g = ( f | ( Seg n ) )) implies ( Sum f ) = ( ( Sum g ) + ( f /. ( len f ) ) )))))
proof
let L being  Abelian  add-associative  right_zeroed  right_complementable non empty addLoopStr;
let f being (FinSequence of (the carrier of L)),g being (FinSequence of (the carrier of L));
let n being Nat;
assume that
A1: ( len f ) = ( n + 1 )
and
A2: g = ( f | ( Seg n ) );
A3: n <= ( len f ) by A1,NAT_1:11;
set q = <* ( f /. ( len f ) ) *>;
set p = ( g ^ q );
A4: ( len q ) = 1 by FINSEQ_1:39;
A5: ( dom f ) = ( Seg ( n + 1 ) ) by A1,FINSEQ_1:def 3;
A6:now
let u being set;
assume A7: u in ( dom f );
then u in { k where k is (Element of ( NAT )): (1 <= k & k <= ( n + 1 )) } by A5,FINSEQ_1:def 1;
then consider i being (Element of ( NAT )) such that A8: u = i and A9: 1 <= i and A10: i <= ( n + 1 );
now
per cases ;
case A11: i = ( n + 1 );
then (( ( len g ) + 1 ) <= i & i <= ( ( len g ) + ( len q ) )) by A2,A3,A4,FINSEQ_1:17;
hence ( p . i ) = ( q . ( i - ( len g ) ) ) by FINSEQ_1:23
.= ( q . ( ( n + 1 ) - n ) ) by A2,A3,A11,FINSEQ_1:17
.= ( q . 1 ) by XCMPLX_1:26
.= ( f /. ( n + 1 ) ) by A1,FINSEQ_1:40
.= ( f . i ) by A7,A8,A11,PARTFUN1:def 6;
end;
case i <> ( n + 1 );
then i < ( n + 1 ) by A10,XXREAL_0:1;
then i <= n by NAT_1:13;
then i in { k where k is (Element of ( NAT )): (1 <= k & k <= n) } by A9;
then i in ( Seg n ) by FINSEQ_1:def 1;
then A12: i in ( dom g ) by A2,A3,FINSEQ_1:17;
then ( p . i ) = ( g . i ) by FINSEQ_1:def 7;
hence ( p . i ) = ( f . i ) by A2,A12,FUNCT_1:47;
end;
end;
hence ( f . u ) = ( p . u ) by A8;
end;
( len ( g ^ q ) ) = ( ( len g ) + ( len q ) ) by FINSEQ_1:22
.= ( ( len g ) + 1 ) by FINSEQ_1:40
.= ( len f ) by A1,A2,A3,FINSEQ_1:17;
then ( dom f ) = ( Seg ( len ( g ^ q ) ) ) by FINSEQ_1:def 3
.= ( dom ( g ^ q ) ) by FINSEQ_1:def 3;
then f = ( g ^ <* ( f /. ( len f ) ) *> ) by A6,FUNCT_1:2;
hence ( Sum f ) = ( ( Sum g ) + ( Sum <* ( f /. ( len f ) ) *> ) ) by RLVECT_1:41
.= ( ( Sum g ) + ( f /. ( len f ) ) ) by RLVECT_1:44;
end;
