environ
vocabularies NUMBERS,ORDINAL1,ZFMISC_1,STRUCT_0,VALUED_0,POLYNOM7,SUBSET_1,RELAT_1,SUPINF_2,POLYNOM1,VECTSP_1,ORDERS_1,TARSKI,PRE_POLY,ARYTM_3,FUNCT_1,ALGSEQ_1,NAT_1,FINSET_1,CARD_1,XXREAL_0,XBOOLE_0,RLVECT_1,ALGSTR_0,FINSEQ_1,CARD_3,PARTFUN1,ORDINAL4,ARYTM_1,ALGSTR_1,LATTICES,VECTSP_2,BINOP_1,CAT_3,MCART_1,RELAT_2,BAGORDER,TERMORD,XCMPLX_0,BROUWER,ORDERS_2,WELLORD1,FINSUB_1,WAYBEL_4,MESFUNC1,REWRITE1,INT_1,IDEAL_1,POLYRED;
notations CARD_1,NUMBERS,XCMPLX_0,TARSKI,XBOOLE_0,SUBSET_1,ZFMISC_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,XXREAL_0,STRUCT_0,ALGSTR_0,ORDINAL1,NAT_1,ALGSTR_1,WAYBEL_0,FINSUB_1,WAYBEL_4,REWRITE1,RLVECT_1,FINSEQ_1,MCART_1,ORDERS_1,VFUNCT_1,GROUP_1,VECTSP_2,VECTSP_1,POLYNOM7,WELLORD1,WELLFND1,IDEAL_1,ORDERS_2,POLYNOM1,BAGORDER,TERMORD,PRE_POLY,CKB24;
definitions STRUCT_0,POLYNOM7,CKB24;
theorems TARSKI,RELSET_1,FINSEQ_1,FUNCT_1,FUNCT_2,RELAT_1,ZFMISC_1,VECTSP_1,POLYNOM1,BINOM,RLVECT_1,VECTSP_2,FINSET_1,NAT_1,POLYNOM2,ALGSTR_1,RELAT_2,CARD_1,CARD_2,WAYBEL_0,ORDERS_2,ORDERS_1,MCART_1,POLYNOM7,FINSUB_1,WELLORD1,WELLFND1,REWRITE1,WAYBEL_4,XBOOLE_0,XBOOLE_1,MATRLIN,IDEAL_1,BAGORDER,TERMORD,XCMPLX_1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,PARTFUN1,STRUCT_0,PRE_POLY,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB28,CKB29,CKB30,CKB31,CKB32;
schemes NAT_1,RELSET_1;
registrations XBOOLE_0,RELAT_1,ORDINAL1,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,CARD_1,FINSEQ_1,REWRITE1,STRUCT_0,VECTSP_1,ORDERS_2,ALGSTR_1,GCD_1,POLYNOM1,POLYNOM2,POLYNOM4,IDEAL_1,POLYNOM7,BAGORDER,TERMORD,VALUED_0,ALGSTR_0,PRE_POLY,VFUNCT_1,FUNCT_2,FUNCT_1,RELSET_1,CKB1,CKB2,CKB9,CKB27;
constructors REWRITE1,VECTSP_2,TRIANG_1,WAYBEL_4,WELLFND1,IDEAL_1,BAGORDER,TERMORD,DOMAIN_1,RELSET_1,BINOP_2,FVSUM_1,VFUNCT_1,CKB24;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
theorem
Th18: (for n being Ordinal holds (for T being  connected (TermOrder of n) holds (for L being non empty ZeroStr holds (for p being (Series of n,L) holds (for b1,b2 being (bag of n) holds ( ( b1 + b2 ) *' p ) = ( b1 *' ( b2 *' p ) ))))))
proof
let n being Ordinal;
let T being  connected (TermOrder of n);
let L being non empty ZeroStr;
let p being (Series of n,L);
let b1 being (bag of n),b2 being (bag of n);
set q = ( ( b1 + b2 ) *' p );
set r = ( b1 *' ( b2 *' p ) );
A1:now
let u being set;
assume u in ( dom q );
then reconsider b = u as (bag of n);
now
per cases ;
case A2: ( b1 + b2 ) divides b;
then consider b3 being (bag of n) such that A3: ( ( b1 + b2 ) + b3 ) = b by TERMORD:1;
A4: ( b1 + ( b2 + b3 ) ) = b by A3,PRE_POLY:35;
then ( b2 + b3 ) = ( b -' b1 ) by PRE_POLY:48;
then A5: b2 divides ( b -' b1 ) by TERMORD:1;
b1 divides b by A4,TERMORD:1;
then ( r . b ) = ( ( b2 *' p ) . ( b -' b1 ) ) by CKB24:def 1;
hence ( r . b ) = ( p . ( ( b -' b1 ) -' b2 ) ) by A5,CKB24:def 1
.= ( p . ( b -' ( b1 + b2 ) ) ) by PRE_POLY:36
.= ( q . b ) by A2,CKB24:def 1;
end;
case A6: (not ( b1 + b2 ) divides b);
then A7: ( q . b ) = ( 0. L ) by CKB24:def 1;
now
per cases ;
case A8: b1 divides b;
A9:now
assume b2 divides ( b -' b1 );
then ( ( ( b -' b1 ) -' b2 ) + b2 ) = ( b -' b1 ) by PRE_POLY:47;
then ( ( ( ( b -' b1 ) -' b2 ) + b2 ) + b1 ) = b by A8,PRE_POLY:47;
then ( ( ( b -' b1 ) -' b2 ) + ( b2 + b1 ) ) = b by PRE_POLY:35;
hence contradiction by A6,TERMORD:1;
end;
( r . b ) = ( ( b2 *' p ) . ( b -' b1 ) ) by A8,CKB24:def 1;
hence ( q . b ) = ( r . b ) by A7,A9,CKB24:def 1;
end;
case (not b1 divides b);
hence ( q . b ) = ( r . b ) by A7,CKB24:def 1;
end;
end;
hence ( q . b ) = ( r . b );
end;
end;
hence ( q . u ) = ( r . u );
end;
( dom q ) = ( Bags n ) by FUNCT_2:def 1
.= ( dom r ) by FUNCT_2:def 1;
hence thesis by A1,FUNCT_1:2;
end;
