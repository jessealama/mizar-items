environ
vocabularies NUMBERS,ORDINAL1,ZFMISC_1,STRUCT_0,VALUED_0,POLYNOM7,SUBSET_1,RELAT_1,SUPINF_2,POLYNOM1,VECTSP_1,ORDERS_1,TARSKI,PRE_POLY,ARYTM_3,FUNCT_1,ALGSEQ_1,NAT_1,FINSET_1,CARD_1,XXREAL_0,XBOOLE_0,RLVECT_1,ALGSTR_0,FINSEQ_1,CARD_3,PARTFUN1,ORDINAL4,ARYTM_1,ALGSTR_1,LATTICES,VECTSP_2,BINOP_1,CAT_3,MCART_1,RELAT_2,BAGORDER,TERMORD,XCMPLX_0,BROUWER,ORDERS_2,WELLORD1,FINSUB_1,WAYBEL_4,MESFUNC1,REWRITE1,INT_1,IDEAL_1,POLYRED;
notations CARD_1,NUMBERS,XCMPLX_0,TARSKI,XBOOLE_0,SUBSET_1,ZFMISC_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,XXREAL_0,STRUCT_0,ALGSTR_0,ORDINAL1,NAT_1,ALGSTR_1,WAYBEL_0,FINSUB_1,WAYBEL_4,REWRITE1,RLVECT_1,FINSEQ_1,MCART_1,ORDERS_1,VFUNCT_1,GROUP_1,VECTSP_2,VECTSP_1,POLYNOM7,WELLORD1,WELLFND1,IDEAL_1,ORDERS_2,POLYNOM1,BAGORDER,TERMORD,PRE_POLY;
definitions STRUCT_0,POLYNOM7;
theorems TARSKI,RELSET_1,FINSEQ_1,FUNCT_1,FUNCT_2,RELAT_1,ZFMISC_1,VECTSP_1,POLYNOM1,BINOM,RLVECT_1,VECTSP_2,FINSET_1,NAT_1,POLYNOM2,ALGSTR_1,RELAT_2,CARD_1,CARD_2,WAYBEL_0,ORDERS_2,ORDERS_1,MCART_1,POLYNOM7,FINSUB_1,WELLORD1,WELLFND1,REWRITE1,WAYBEL_4,XBOOLE_0,XBOOLE_1,MATRLIN,IDEAL_1,BAGORDER,TERMORD,XCMPLX_1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,PARTFUN1,STRUCT_0,PRE_POLY,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes NAT_1,RELSET_1;
registrations XBOOLE_0,RELAT_1,ORDINAL1,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,CARD_1,FINSEQ_1,REWRITE1,STRUCT_0,VECTSP_1,ORDERS_2,ALGSTR_1,GCD_1,POLYNOM1,POLYNOM2,POLYNOM4,IDEAL_1,POLYNOM7,BAGORDER,TERMORD,VALUED_0,ALGSTR_0,PRE_POLY,VFUNCT_1,FUNCT_2,FUNCT_1,RELSET_1,CKB1,CKB2,CKB9;
constructors REWRITE1,VECTSP_2,TRIANG_1,WAYBEL_4,WELLFND1,IDEAL_1,BAGORDER,TERMORD,DOMAIN_1,RELSET_1,BINOP_2,FVSUM_1,VFUNCT_1;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
theorem
Th12: (for n being Ordinal holds (for L being  add-associative  right_zeroed  right_complementable  well-unital  associative  commutative  distributive non  empty doubleLoopStr holds (for p,p9 being (Series of n,L) holds (for a being (Element of L) holds ( a * ( p *' p9 ) ) = ( p *' ( a * p9 ) )))))
proof
let n being Ordinal;
let L being  add-associative  right_zeroed  right_complementable  well-unital  commutative  associative  distributive non  empty doubleLoopStr;
let p being (Series of n,L);
let p9 being (Series of n,L);
let a being (Element of L);
set app = ( a * ( p *' p9 ) );
set pap = ( p *' ( a * p9 ) );
set pp = ( p *' p9 );
A1:now
let u being set;
assume u in ( dom app );
then reconsider b = u as (bag of n);
consider s being (FinSequence of (the carrier of L)) such that A2: ( pap . b ) = ( Sum s ) and A3: ( len s ) = ( len ( decomp b ) ) and A4: (for k being (Element of ( NAT )) holds (k in ( dom s ) implies (ex b1,b2 being (bag of n) st (( ( decomp b ) /. k ) = <* b1,b2 *> & ( s /. k ) = ( ( p . b1 ) * ( ( a * p9 ) . b2 ) ))))) by POLYNOM1:def 9;
consider t being (FinSequence of (the carrier of L)) such that A5: ( pp . b ) = ( Sum t ) and A6: ( len t ) = ( len ( decomp b ) ) and A7: (for k being (Element of ( NAT )) holds (k in ( dom t ) implies (ex b1,b2 being (bag of n) st (( ( decomp b ) /. k ) = <* b1,b2 *> & ( t /. k ) = ( ( p . b1 ) * ( p9 . b2 ) ))))) by POLYNOM1:def 9;
A8: ( dom t ) = ( Seg ( len s ) ) by A3,A6,FINSEQ_1:def 3
.= ( dom s ) by FINSEQ_1:def 3;
now
let i being set;
assume A9: i in ( dom t );
then reconsider k = i as (Element of ( NAT ));
consider b1,b2 being (bag of n) such that A10: ( ( decomp b ) /. k ) = <* b1,b2 *> and A11: ( t /. k ) = ( ( p . b1 ) * ( p9 . b2 ) ) by A7,A9;
consider a1,a2 being (bag of n) such that A12: ( ( decomp b ) /. k ) = <* a1,a2 *> and A13: ( s /. k ) = ( ( p . a1 ) * ( ( a * p9 ) . a2 ) ) by A4,A8,A9;
A14: b2 = ( <* a1,a2 *> . 2 ) by A10,A12,FINSEQ_1:44
.= a2 by FINSEQ_1:44;
b1 = ( <* a1,a2 *> . 1 ) by A10,A12,FINSEQ_1:44
.= a1 by FINSEQ_1:44;
hence ( s /. i ) = ( ( p . b1 ) * ( a * ( p9 . b2 ) ) ) by A13,A14,POLYNOM7:def 9
.= ( a * ( t /. i ) ) by A11,GROUP_1:def 3;
end;
then s = ( a * t ) by A8,POLYNOM1:def 1;
then ( pap . b ) = ( a * ( Sum t ) ) by A2,POLYNOM1:12
.= ( app . b ) by A5,POLYNOM7:def 9;
hence ( app . u ) = ( pap . u );
end;
( dom app ) = ( Bags n ) by FUNCT_2:def 1
.= ( dom pap ) by FUNCT_2:def 1;
hence thesis by A1,FUNCT_1:2;
end;
