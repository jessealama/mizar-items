environ
vocabularies NUMBERS,ORDINAL1,ZFMISC_1,STRUCT_0,VALUED_0,POLYNOM7,SUBSET_1,RELAT_1,SUPINF_2,POLYNOM1,VECTSP_1,ORDERS_1,TARSKI,PRE_POLY,ARYTM_3,FUNCT_1,ALGSEQ_1,NAT_1,FINSET_1,CARD_1,XXREAL_0,XBOOLE_0,RLVECT_1,ALGSTR_0,FINSEQ_1,CARD_3,PARTFUN1,ORDINAL4,ARYTM_1,ALGSTR_1,LATTICES,VECTSP_2,BINOP_1,CAT_3,MCART_1,RELAT_2,BAGORDER,TERMORD,XCMPLX_0,BROUWER,ORDERS_2,WELLORD1,FINSUB_1,WAYBEL_4,MESFUNC1,REWRITE1,INT_1,IDEAL_1,POLYRED;
notations CARD_1,NUMBERS,XCMPLX_0,TARSKI,XBOOLE_0,SUBSET_1,ZFMISC_1,RELAT_1,RELAT_2,RELSET_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSET_1,XXREAL_0,STRUCT_0,ALGSTR_0,ORDINAL1,NAT_1,ALGSTR_1,WAYBEL_0,FINSUB_1,WAYBEL_4,REWRITE1,RLVECT_1,FINSEQ_1,MCART_1,ORDERS_1,VFUNCT_1,GROUP_1,VECTSP_2,VECTSP_1,POLYNOM7,WELLORD1,WELLFND1,IDEAL_1,ORDERS_2,POLYNOM1,BAGORDER,TERMORD,PRE_POLY;
definitions STRUCT_0,POLYNOM7;
theorems TARSKI,RELSET_1,FINSEQ_1,FUNCT_1,FUNCT_2,RELAT_1,ZFMISC_1,VECTSP_1,POLYNOM1,BINOM,RLVECT_1,VECTSP_2,FINSET_1,NAT_1,POLYNOM2,ALGSTR_1,RELAT_2,CARD_1,CARD_2,WAYBEL_0,ORDERS_2,ORDERS_1,MCART_1,POLYNOM7,FINSUB_1,WELLORD1,WELLFND1,REWRITE1,WAYBEL_4,XBOOLE_0,XBOOLE_1,MATRLIN,IDEAL_1,BAGORDER,TERMORD,XCMPLX_1,GROUP_1,XREAL_1,XXREAL_0,ORDINAL1,PARTFUN1,STRUCT_0,PRE_POLY,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8;
schemes NAT_1,RELSET_1;
registrations XBOOLE_0,RELAT_1,ORDINAL1,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,CARD_1,FINSEQ_1,REWRITE1,STRUCT_0,VECTSP_1,ORDERS_2,ALGSTR_1,GCD_1,POLYNOM1,POLYNOM2,POLYNOM4,IDEAL_1,POLYNOM7,BAGORDER,TERMORD,VALUED_0,ALGSTR_0,PRE_POLY,VFUNCT_1,FUNCT_2,FUNCT_1,RELSET_1,CKB1,CKB2;
constructors REWRITE1,VECTSP_2,TRIANG_1,WAYBEL_4,WELLFND1,IDEAL_1,BAGORDER,TERMORD,DOMAIN_1,RELSET_1,BINOP_2,FVSUM_1,VFUNCT_1;
requirements NUMERALS,REAL,SUBSET,BOOLE;
begin
registration
let n being Ordinal;
let L being  add-associative  right_complementable  left_zeroed  right_zeroed  well-unital  distributive  domRing-like non trivial doubleLoopStr;
let p being  non-zero  finite-Support (Series of n,L);
let q being  non-zero  finite-Support (Series of n,L);
cluster ( p *' q ) ->  non-zero;
coherence
proof
consider b22 being (bag of n) such that A1: ( q . b22 ) <> ( 0. L ) and A2: (for b9 being (bag of n) holds (b22 < b9 implies ( q . b9 ) = ( 0. L ))) by CKB7:1;
consider b11 being (bag of n) such that A3: ( p . b11 ) <> ( 0. L ) and A4: (for b9 being (bag of n) holds (b11 < b9 implies ( p . b9 ) = ( 0. L ))) by CKB7:1;
set b = ( b11 + b22 );
consider s being (FinSequence of (the carrier of L)) such that A5: ( ( p *' q ) . b ) = ( Sum s ) and A6: ( len s ) = ( len ( decomp b ) ) and A7: (for k being (Element of ( NAT )) holds (k in ( dom s ) implies (ex b1,b2 being (bag of n) st (( ( decomp b ) /. k ) = <* b1,b2 *> & ( s /. k ) = ( ( p . b1 ) * ( q . b2 ) ))))) by POLYNOM1:def 9;
A8: (b is (Element of ( Bags n )) & ( ( p . b11 ) * ( q . b22 ) ) <> ( 0. L )) by A3,A1,PRE_POLY:def 12,VECTSP_2:def 1;
consider S being non empty  finite (Subset of ( Bags n )) such that A9: ( divisors b ) = ( SgmX (( BagOrder n ),S) ) and A10: (for p being (bag of n) holds (p in S iff p divides b)) by PRE_POLY:def 16;
set sgm = ( SgmX (( BagOrder n ),S) );
A11: ( BagOrder n ) linearly_orders S by CKB3:1;
b11 divides b by PRE_POLY:50;
then b11 in S by A10;
then b11 in ( rng sgm ) by A11,PRE_POLY:def 2;
then consider i being set such that A12: i in ( dom sgm ) and A13: ( sgm . i ) = b11 by FUNCT_1:def 3;
A14: i in ( dom ( decomp b ) ) by A9,A12,PRE_POLY:def 17;
( ( divisors b ) /. i ) = b11 by A9,A12,A13,PARTFUN1:def 6;
then A15: ( ( decomp b ) /. i ) = <* b11,( b -' b11 ) *> by A14,PRE_POLY:def 17;
then A16: ( ( decomp b ) /. i ) = <* b11,b22 *> by PRE_POLY:48;
A17: ( dom s ) = ( Seg ( len ( decomp b ) ) ) by A6,FINSEQ_1:def 3
.= ( dom ( decomp b ) ) by FINSEQ_1:def 3;
then A18: i in ( dom s ) by A9,A12,PRE_POLY:def 17;
reconsider i as (Element of ( NAT )) by A12;
consider b1 being (bag of n),b2 being (bag of n) such that A19: ( ( decomp b ) /. i ) = <* b1,b2 *> and A20: ( s /. i ) = ( ( p . b1 ) * ( q . b2 ) ) by A7,A18;
A21: b2 = ( <* b11,b22 *> . 2 ) by A16,A19,FINSEQ_1:44
.= b22 by FINSEQ_1:44;
A22:now
let k being (Element of ( NAT ));
assume that
A23: k in ( dom s )
and
A24: k <> i;
consider b1 being (bag of n),b2 being (bag of n) such that A25: ( ( decomp b ) /. k ) = <* b1,b2 *> and A26: ( s /. k ) = ( ( p . b1 ) * ( q . b2 ) ) by A7,A23;
consider b19 being (bag of n),b29 being (bag of n) such that A27: ( ( decomp b ) /. k ) = <* b19,b29 *> and A28: b = ( b19 + b29 ) by A17,A23,PRE_POLY:68;
A29: b2 = ( <* b19,b29 *> . 2 ) by A27,A25,FINSEQ_1:44
.= b29 by FINSEQ_1:44;
A30: b1 = ( <* b19,b29 *> . 1 ) by A27,A25,FINSEQ_1:44
.= b19 by FINSEQ_1:44;
A31:now
assume that
A32: ( p . b1 ) <> ( 0. L )
and
A33: ( q . b2 ) <> ( 0. L );
(not b11 < b1) by A4,A32;
then A34: b1 <=' b11 by CKB6:1;
(not b22 < b2) by A2,A33;
then A35: b2 <=' b22 by CKB6:1;
A36:now
assume (b1 = b11 & b2 = b22);
then ( ( decomp b ) . k ) = <* b11,b22 *> by A17,A23,A25,PARTFUN1:def 6
.= ( ( decomp b ) /. i ) by A15,PRE_POLY:48
.= ( ( decomp b ) . i ) by A14,PARTFUN1:def 6;
hence contradiction by A14,A17,A23,A24,FUNCT_1:def 4;
end;
now
per cases  by A36;
case A37: b1 <> b11;
A38:now
assume ( b1 + b2 ) = ( b11 + b2 );
then b1 = ( ( b11 + b2 ) -' b2 ) by PRE_POLY:48;
hence contradiction by A37,PRE_POLY:48;
end;
(( b11 + b22 ) <=' ( b11 + b2 ) & ( b11 + b2 ) <=' ( b11 + b22 )) by A28,A30,A29,A34,A35,CKB4:1;
hence contradiction by A28,A30,A29,A38,CKB5:1;
end;
case A39: b2 <> b22;
A40:now
assume ( b2 + b1 ) = ( b22 + b1 );
then b2 = ( ( b22 + b1 ) -' b1 ) by PRE_POLY:48;
hence contradiction by A39,PRE_POLY:48;
end;
(( b11 + b22 ) <=' ( b22 + b1 ) & ( b22 + b1 ) <=' ( b11 + b22 )) by A28,A30,A29,A34,A35,CKB4:1;
hence contradiction by A28,A30,A29,A40,CKB5:1;
end;
end;
hence contradiction;
end;
now
per cases  by A31;
case ( p . b1 ) = ( 0. L );
hence ( ( p . b1 ) * ( q . b2 ) ) = ( 0. L ) by BINOM:1;
end;
case ( q . b2 ) = ( 0. L );
hence ( ( p . b1 ) * ( q . b2 ) ) = ( 0. L ) by BINOM:2;
end;
end;
hence ( s /. k ) = ( 0. L ) by A26;
end;
b1 = ( <* b11,b22 *> . 1 ) by A16,A19,FINSEQ_1:44
.= b11 by FINSEQ_1:44;
then ( ( p *' q ) . b ) = ( ( p . b11 ) * ( q . b22 ) ) by A5,A18,A22,A20,A21,POLYNOM2:3;
then b in ( Support ( p *' q ) ) by A8,POLYNOM1:def 3;
then ( p *' q ) <> ( 0_ (n,L) ) by POLYNOM7:1;
hence thesis by POLYNOM7:def 1;
end;
end;
