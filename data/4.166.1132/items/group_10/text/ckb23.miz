environ
vocabularies NUMBERS,XBOOLE_0,STRUCT_0,GROUP_9,SUBSET_1,ORDINAL4,FUNCT_1,RELAT_1,TARSKI,GROUP_1,ALGSTR_0,ZFMISC_1,FUNCT_2,BINOP_1,SETFAM_1,CARD_1,FINSET_1,ORDINAL1,CARD_FIN,GROUP_2,EQREL_1,INT_2,NEWTON,INT_1,XXREAL_0,ARYTM_3,FINSEQ_1,NAT_1,PARTFUN1,CQC_SIM1,CARD_3,FUNCOP_1,FINSEQ_2,NAT_3,GR_CY_1,BINOP_2,XREAL_0,XCMPLX_0,ARYTM_1,RLSUB_1,GROUP_4,GRAPH_1,GROUP_3,REALSET1,GROUP_10;
notations TARSKI,XBOOLE_0,SUBSET_1,SETFAM_1,CARD_1,NUMBERS,XCMPLX_0,ZFMISC_1,XXREAL_0,XREAL_0,INT_2,NAT_1,NAT_D,FINSET_1,RELAT_1,REALSET1,FUNCT_1,RELSET_1,FUNCT_2,FINSEQ_1,RVSUM_1,STRUCT_0,ALGSTR_0,GROUP_1,GROUP_2,GROUP_3,EQREL_1,FUNCOP_1,WSIERP_1,NEWTON,DOMAIN_1,GR_CY_1,ORDINAL1,GROUP_4,CARD_FIN,PARTFUN1,NAT_3,TOPGRP_1,CKB1,CKB2,CKB3,CKB5,CKB8,CKB9,CKB10,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
definitions CARD_1,GROUP_2,TARSKI,REALSET1,RELAT_1,WELLORD2,STRUCT_0,FUNCT_2,CKB3,CKB9,CKB10,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
theorems FINSEQ_1,GROUP_2,GROUP_3,TARSKI,GROUP_6,FINSEQ_2,FUNCT_1,FUNCT_2,RELAT_1,XBOOLE_0,XBOOLE_1,NAT_1,GROUP_1,XREAL_1,RELSET_1,PARTFUN1,FINSEQ_3,INT_1,ZFMISC_1,CARD_1,CARD_2,FINSET_1,XCMPLX_1,ORDINAL1,FINSEQ_4,XXREAL_0,STRUCT_0,NAT_D,GR_CY_1,NEWTON,CARD_FIN,WEDDWITT,WELLORD2,EQREL_1,FUNCOP_1,RVSUM_1,PEPIN,NAT_4,GROUP_8,NAT_3,GROUP_9,GR_CY_2,TOPGRP_1,VALUED_1,XREAL_0,CKB3,CKB9,CKB10,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
schemes FUNCT_1,FINSEQ_1,NAT_1,FUNCT_2,SUBSET_1,CLASSES1,CKB6;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,FINSET_1,XXREAL_0,XREAL_0,NAT_1,INT_1,CARD_1,FINSEQ_1,NEWTON,STRUCT_0,GROUP_2,GROUP_1,GROUP_3,GR_CY_1,FUNCT_2,NAT_3,REALSET1,VALUED_0,DYNKIN,CKB4,CKB7,CKB11;
constructors SETFAM_1,WELLORD2,NAT_D,EQREL_1,BINARITH,WSIERP_1,REALSET2,GR_CY_1,GROUP_4,CARD_FIN,NAT_3,TOPGRP_1,SEQ_1,DYNKIN,RELSET_1,CKB2,CKB3,CKB9,CKB10,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22;
requirements NUMERALS,REAL,SUBSET,BOOLE,ARITHM;
begin
definition
let S being  unital non empty multMagma;
let E being set;
let T being (LeftOperation of S,E);
func the_fixed_points_of T -> (Subset of E)
equals
:Def13: { x where x is (Element of E): x is_fixed_under T } if E is non empty otherwise ( {} E );
correctness
proof
((not E is  empty) implies { x where x is (Element of E): x is_fixed_under T } is (Subset of E))
proof
set Y = { x where x is (Element of E): x is_fixed_under T };
defpred P[ set ]
 means
(for x being (Element of E) holds (x = $1 implies x is_fixed_under T));
consider X being (Subset of E) such that A1: (for x being set holds (x in X iff (x in E & P[ x ]))) from SUBSET_1:sch 1;
assume A2: (not E is  empty);
now
let y being set;
hereby
assume A3: y in X;
then reconsider y9 = y as (Element of E);
y9 is_fixed_under T by A1,A3;
hence y in Y;
end;
assume y in Y;
then A4: (ex y9 being (Element of E) st (y = y9 & y9 is_fixed_under T));
then P[ y ];
hence y in X by A2,A1,A4;
end;
hence thesis by TARSKI:1;
end;
hence thesis;
end;
end;
