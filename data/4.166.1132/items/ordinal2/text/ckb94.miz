environ
vocabularies ORDINAL1,FUNCT_1,XBOOLE_0,TARSKI,ZFMISC_1,RELAT_1,SETFAM_1,SUBSET_1,FUNCOP_1,ORDINAL2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,RELAT_1,FUNCT_1,ORDINAL1,SETFAM_1,FUNCOP_1,CKB7,CKB17,CKB18,CKB31,CKB33,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB65,CKB90;
definitions ORDINAL1,TARSKI,XBOOLE_0,CKB7,CKB17,CKB18,CKB31,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB65,CKB90;
theorems TARSKI,XBOOLE_0,ORDINAL1,SETFAM_1,ZFMISC_1,FUNCT_1,RELAT_1,XBOOLE_1,FUNCOP_1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB31,CKB36,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB71,CKB72,CKB73,CKB74,CKB75,CKB76,CKB77,CKB78,CKB79,CKB80,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB90,CKB91,CKB92,CKB93;
schemes XBOOLE_0,FUNCT_1,ORDINAL1,CKB1,CKB30,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,FUNCOP_1,CKB16,CKB32,CKB34,CKB35,CKB37,CKB64,CKB88,CKB89;
constructors SETFAM_1,ORDINAL1,FUNCOP_1,CKB7,CKB17,CKB18,CKB31,CKB52,CKB53,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB65,CKB90;
requirements SUBSET,BOOLE,NUMERALS;
begin
reserve A for Ordinal;
reserve B for Ordinal;
reserve a for set;
scheme OmegaInd { a() ->  natural number,P[set] } : P[ a() ]
provided
A1: P[ ( {} ) ]
and
A2: (for a being  natural number holds (P[ a ] implies P[ ( succ a ) ]))
proof
defpred P[ Ordinal ]
 means
($1 is  natural implies P[ $1 ]);
A3:now
let A;
assume A4: P[ A ];
now
assume ( succ A ) is  natural;
then A5: ( succ A ) in ( omega ) by ORDINAL1:def 12;
A in ( succ A ) by ORDINAL1:6;
then A is (Element of ( omega )) by A5,ORDINAL1:10;
hence P[ ( succ A ) ] by A2,A4;
end;
hence P[ ( succ A ) ];
end;
A6:now
let A;
assume A7: A <> ( {} );
( {} ) c= A;
then ( {} ) c< A by A7,XBOOLE_0:def 8;
then A8: ( {} ) in A by ORDINAL1:11;
A9: (not A in A);
assume A is  limit_ordinal;
then ( omega ) c= A by A8,ORDINAL1:def 11;
then (not A in ( omega )) by A9;
hence ((for B holds (B in A implies P[ B ])) implies P[ A ]) by ORDINAL1:def 12;
end;
A10: P[ ( {} ) ] by A1;
(for A holds P[ A ]) from CKB1:sch 1(A10,A3,A6);
hence thesis;
end;
