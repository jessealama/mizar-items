environ
vocabularies XBOOLE_0,RELAT_2,ORDERS_2,STRUCT_0,CAT_1,YELLOW_0,SUBSET_1,RCOMP_1,WELLORD1,TARSKI,LATTICES,REWRITE1,WAYBEL_0,XXREAL_0,WAYBEL_3,WAYBEL_6,CARD_FIL,LATTICE3,EQREL_1,ORDINAL2,FINSET_1,ZFMISC_1,WAYBEL_4,MSSUBFAM,WAYBEL_7,INT_2,WAYBEL_1,FUNCT_1,GROUP_6,RELAT_1,BINOP_1,SEQM_3,YELLOW_1,FILTER_1,SETFAM_1,WAYBEL_8,CARD_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,CARD_1,FINSET_1,RELAT_1,TOLER_1,FUNCT_1,RELSET_1,FUNCT_2,DOMAIN_1,RELAT_2,STRUCT_0,ORDERS_2,LATTICE3,QUANTAL1,YELLOW_0,YELLOW_1,YELLOW_2,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,CKB1,CKB6,CKB11,CKB12;
definitions TARSKI,RELAT_2,ORDERS_2,YELLOW_2,STRUCT_0,CKB1,CKB6,CKB11,CKB12;
theorems TARSKI,STRUCT_0,FINSET_1,FUNCT_1,FUNCT_2,ORDERS_2,LATTICE3,YELLOW_0,YELLOW_1,YELLOW_2,YELLOW_3,YELLOW_5,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,RELAT_1,YELLOW_7,XBOOLE_0,XBOOLE_1,RELAT_2,CKB1,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13;
schemes SUBSET_1,FUNCT_1;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FINSET_1,STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_1,WAYBEL_2,WAYBEL_3,WAYBEL_4,WAYBEL_6,CARD_1,ORDINAL1,CKB2,CKB10,CKB14,CKB15;
constructors DOMAIN_1,TOLER_1,QUANTAL1,ORDERS_3,WAYBEL_1,YELLOW_3,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,RELSET_1,PRALG_1,CKB1,CKB6,CKB11,CKB12;
requirements SUBSET,BOOLE,NUMERALS;
begin
registration
let L being non empty  with_suprema Poset;
cluster ( CompactSublatt L ) ->  join-inheriting;
coherence
proof
now
let x being (Element of L),y being (Element of L);
assume that
A1: x in (the carrier of ( CompactSublatt L ))
and
A2: y in (the carrier of ( CompactSublatt L ))
and
A3:  ex_sup_of { x,y },L;
y is  compact by A2,CKB1:def 1;
then A4: y << y by WAYBEL_3:def 2;
x is  compact by A1,CKB1:def 1;
then A5: x << x by WAYBEL_3:def 2;
y <= ( x "\/" y ) by A3,YELLOW_0:18;
then A6: y << ( x "\/" y ) by A4,WAYBEL_3:2;
x <= ( x "\/" y ) by A3,YELLOW_0:18;
then x << ( x "\/" y ) by A5,WAYBEL_3:2;
then ( x "\/" y ) << ( x "\/" y ) by A6,WAYBEL_3:3;
then ( x "\/" y ) is  compact by WAYBEL_3:def 2;
then ( sup { x,y } ) is  compact by YELLOW_0:41;
hence ( sup { x,y } ) in (the carrier of ( CompactSublatt L )) by CKB1:def 1;
end;
hence thesis by YELLOW_0:def 17;
end;
end;
