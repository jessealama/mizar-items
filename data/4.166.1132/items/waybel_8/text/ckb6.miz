environ
vocabularies XBOOLE_0,RELAT_2,ORDERS_2,STRUCT_0,CAT_1,YELLOW_0,SUBSET_1,RCOMP_1,WELLORD1,TARSKI,LATTICES,REWRITE1,WAYBEL_0,XXREAL_0,WAYBEL_3,WAYBEL_6,CARD_FIL,LATTICE3,EQREL_1,ORDINAL2,FINSET_1,ZFMISC_1,WAYBEL_4,MSSUBFAM,WAYBEL_7,INT_2,WAYBEL_1,FUNCT_1,GROUP_6,RELAT_1,BINOP_1,SEQM_3,YELLOW_1,FILTER_1,SETFAM_1,WAYBEL_8,CARD_1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,CARD_1,FINSET_1,RELAT_1,TOLER_1,FUNCT_1,RELSET_1,FUNCT_2,DOMAIN_1,RELAT_2,STRUCT_0,ORDERS_2,LATTICE3,QUANTAL1,YELLOW_0,YELLOW_1,YELLOW_2,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,CKB1;
definitions TARSKI,RELAT_2,ORDERS_2,YELLOW_2,STRUCT_0,CKB1;
theorems TARSKI,STRUCT_0,FINSET_1,FUNCT_1,FUNCT_2,ORDERS_2,LATTICE3,YELLOW_0,YELLOW_1,YELLOW_2,YELLOW_3,YELLOW_5,WAYBEL_0,WAYBEL_1,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,RELAT_1,YELLOW_7,XBOOLE_0,XBOOLE_1,RELAT_2,CKB1,CKB3,CKB4,CKB5;
schemes SUBSET_1,FUNCT_1;
registrations XBOOLE_0,SUBSET_1,RELSET_1,FINSET_1,STRUCT_0,LATTICE3,YELLOW_0,WAYBEL_0,YELLOW_1,YELLOW_2,WAYBEL_1,WAYBEL_2,WAYBEL_3,WAYBEL_4,WAYBEL_6,CARD_1,ORDINAL1,CKB2;
constructors DOMAIN_1,TOLER_1,QUANTAL1,ORDERS_3,WAYBEL_1,YELLOW_3,WAYBEL_3,WAYBEL_4,WAYBEL_6,WAYBEL_7,RELSET_1,PRALG_1,CKB1;
requirements SUBSET,BOOLE,NUMERALS;
begin
definition
let L being non empty  reflexive RelStr;
let x being (Element of L);
func compactbelow x -> (Subset of L)
equals
{ y where y is (Element of L): (x >= y & y is  compact) };
coherence
proof
set Z = { y where y is (Element of L): (x >= y & y is  compact) };
defpred P[ (Element of L) ]
 means
(x >= $1 & $1 is  compact);
consider X being (Subset of L) such that A1: (for y being (Element of L) holds (y in X iff P[ y ])) from SUBSET_1:sch 3;
now
let z being set;
thus (z in X implies z in Z)
proof
assume A2: z in X;
then reconsider z1 = z as (Element of L);
(x >= z1 & z1 is  compact) by A1,A2;
hence thesis;
end;

thus (z in Z implies z in X)
proof
assume z in Z;
then (ex v being (Element of L) st ((v = z & x >= v) & v is  compact));
hence thesis by A1;
end;

end;
hence thesis by TARSKI:1;
end;
end;
