environ
vocabularies CONLAT_1,STRUCT_0,QC_LANG1,SUBSET_1,LATTICES,XXREAL_2,PBOOLE,EQREL_1,XBOOLE_0,SETFAM_1,FUNCT_1,TARSKI,CAT_1,LATTICE3,ZFMISC_1,RELAT_1,FUNCT_3,LATTICE6,REWRITE1,GROUP_6,WELLORD1,FUNCT_2,MCART_1,FILTER_1,XXREAL_0,ORDERS_2,CONLAT_2;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,SETFAM_1,MCART_1,FUNCT_1,DOMAIN_1,RELSET_1,ORDERS_2,STRUCT_0,LATTICE2,LATTICE3,LATTICE6,PARTFUN1,FUNCT_2,LATTICES,LATTICE4,CONLAT_1,CKB1;
definitions TARSKI,LATTICE3,VECTSP_8,LATTICE6,FUNCT_1,XBOOLE_0,SUBSET_1,CKB1;
theorems TARSKI,RELAT_1,FUNCT_1,ZFMISC_1,LATTICE4,LATTICES,LATTICE3,LATTICE6,MCART_1,SETFAM_1,FUNCT_2,FILTER_1,LATTICE2,ORDERS_2,CONLAT_1,XBOOLE_0,CKB1,CKB3,CKB4;
schemes FUNCT_2;
registrations SUBSET_1,FUNCT_1,FUNCT_2,STRUCT_0,LATTICES,LATTICE2,LATTICE3,CONLAT_1,RELSET_1,CKB2;
constructors SETFAM_1,DOMAIN_1,LATTICE2,LATTICE4,CONLAT_1,LATTICE6,RELSET_1,CKB1;
requirements SUBSET,BOOLE;
begin
theorem
Th3: (for C being FormalContext holds (for D being non  empty (Subset-Family of (the carrier' of C)) holds ( ( AttributeDerivation C ) . ( union D ) ) = ( meet { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } )))
proof
let C being FormalContext;
let D being non  empty (Subset-Family of (the carrier' of C));
reconsider D9 = D as non  empty (Subset-Family of (the carrier' of C));
set OU = ( ( AttributeDerivation C ) . ( union D ) );
set M = ( meet { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } );
now
per cases ;
case A1: { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } <> ( {} );
thus OU = M
proof
thus OU c= M
proof
let x being set;
assume x in OU;
then x in { o9 where o9 is (Object of C): (for a being (Attribute of C) holds (a in ( union D9 ) implies o9 is-connected-with a)) } by CONLAT_1:def 4;
then A2: (ex x9 being (Object of C) st (x9 = x & (for a being (Attribute of C) holds (a in ( union D ) implies x9 is-connected-with a))));
then reconsider x as (Object of C);
A3: (for A being (Subset of (the carrier' of C)) holds (A in D implies (for a being (Attribute of C) holds (a in A implies x is-connected-with a))))
proof
let A being (Subset of (the carrier' of C));
assume A4: A in D;
let a being (Attribute of C);
assume a in A;
then a in ( union D ) by A4,TARSKI:def 4;
hence thesis by A2;
end;
A5: (for A being (Subset of (the carrier' of C)) holds (A in D implies x in ( ( AttributeDerivation C ) . A )))
proof
let A being (Subset of (the carrier' of C));
assume A in D;
then (for a being (Attribute of C) holds (a in A implies x is-connected-with a)) by A3;
then x in { o where o is (Object of C): (for a being (Attribute of C) holds (a in A implies o is-connected-with a)) };
hence thesis by CONLAT_1:def 4;
end;
(for Y being set holds (Y in { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } implies x in Y))
proof
let Y being set;
assume Y in { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D };
then (ex A being (Subset of (the carrier' of C)) st (Y = ( ( AttributeDerivation C ) . A ) & A in D));
hence thesis by A5;
end;
hence thesis by A1,SETFAM_1:def 1;
end;

set d = the (Element of { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D });
let x being set;
assume A6: x in M;
then A7: x in d by A1,SETFAM_1:def 1;
d in { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } by A1;
then (ex X being (Subset of (the carrier' of C)) st (d = ( ( AttributeDerivation C ) . X ) & X in D));
then reconsider x as (Object of C) by A7;
A8: (for A being (Subset of (the carrier' of C)) holds (A in D implies x in ( ( AttributeDerivation C ) . A )))
proof
let A being (Subset of (the carrier' of C));
assume A in D;
then ( ( AttributeDerivation C ) . A ) in { ( ( AttributeDerivation C ) . A9 ) where A9 is (Subset of (the carrier' of C)): A9 in D };
hence thesis by A6,SETFAM_1:def 1;
end;
A9: (for A being (Subset of (the carrier' of C)) holds (A in D implies (for a being (Attribute of C) holds (a in A implies x is-connected-with a))))
proof
let A being (Subset of (the carrier' of C));
assume A in D;
then x in ( ( AttributeDerivation C ) . A ) by A8;
then x in { o where o is (Object of C): (for a being (Attribute of C) holds (a in A implies o is-connected-with a)) } by CONLAT_1:def 4;
then A10: (ex x9 being (Object of C) st (x9 = x & (for a being (Attribute of C) holds (a in A implies x9 is-connected-with a))));
let a being (Attribute of C);
assume a in A;
hence thesis by A10;
end;
(for a being (Attribute of C) holds (a in ( union D ) implies x is-connected-with a))
proof
let a being (Attribute of C);
assume a in ( union D );
then (ex Y being set st (a in Y & Y in D)) by TARSKI:def 4;
hence thesis by A9;
end;
then x in { o9 where o9 is (Object of C): (for a being (Attribute of C) holds (a in ( union D9 ) implies o9 is-connected-with a)) };
hence thesis by CONLAT_1:def 4;
end;

end;
case A11: { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D } = ( {} );
D = ( {} )
proof
set x = the (Element of D);
assume D <> ( {} );
( ( AttributeDerivation C ) . x ) in { ( ( AttributeDerivation C ) . A ) where A is (Subset of (the carrier' of C)): A in D };
hence thesis by A11;
end;
hence thesis;
end;
end;
hence thesis;
end;
