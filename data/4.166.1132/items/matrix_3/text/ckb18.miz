environ
vocabularies NUMBERS,NAT_1,XBOOLE_0,VECTSP_1,SUPINF_2,MATRIX_1,FINSEQ_2,ARYTM_1,FINSEQ_1,TREES_1,RELAT_1,ZFMISC_1,XXREAL_0,CARD_1,ARYTM_3,SUBSET_1,FUNCT_1,INCSP_1,FVSUM_1,RVSUM_1,ALGSTR_0,MESFUNC1,RLVECT_1,CARD_3,ORDINAL4,TARSKI,STRUCT_0,MATRIX_2,QC_LANG1,FINSUB_1,BINOP_1,SETWISEO,FUNCOP_1,PARTFUN1,FINSEQOP,FUNCT_5,FINSOP_1,ABIAN,MATRIX_3;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,NUMBERS,XXREAL_0,RELAT_1,FUNCT_1,PARTFUN1,FUNCT_2,FINSEQ_1,BINOP_1,FINSEQ_4,STRUCT_0,ALGSTR_0,FUNCT_3,FUNCOP_1,RLVECT_1,GROUP_1,VECTSP_1,SETWISEO,FINSOP_1,SETWOP_2,FINSEQ_2,FINSEQOP,MATRIX_1,FINSUB_1,MATRIX_2,NAT_1,FVSUM_1,TREES_1,CAT_2,CKB1,CKB2,CKB3,CKB9,CKB10,CKB11,CKB12;
definitions BINOP_1,FINSEQ_2,ALGSTR_0,MATRIX_1,CKB1,CKB2,CKB3,CKB9,CKB11,CKB12;
theorems FINSEQ_1,FINSEQ_2,TARSKI,FUNCT_2,NAT_1,BINOP_1,TREES_1,FUNCT_1,SETWISEO,VECTSP_1,ZFMISC_1,FVSUM_1,SETWOP_2,MATRIX_1,MATRIX_2,FUNCT_3,FINSEQOP,FUNCOP_1,FINSUB_1,FUNCT_5,FINSEQ_3,RLVECT_1,RELAT_1,FINSOP_1,XBOOLE_0,XBOOLE_1,XCMPLX_1,GROUP_1,ORDINAL1,XXREAL_0,CARD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17;
schemes FUNCT_2,FINSEQ_2,MATRIX_1,FINSEQ_1,FUNCT_3,SETWISEO,FUNCT_1,BINOP_1;
registrations XBOOLE_0,SUBSET_1,FUNCT_1,ORDINAL1,RELSET_1,PARTFUN1,FUNCT_2,FINSET_1,FINSUB_1,XXREAL_0,XREAL_0,NAT_1,STRUCT_0,VECTSP_1,MATRIX_2,FVSUM_1,RELAT_1,CARD_1,FINSEQ_1,FINSEQ_2;
constructors RELAT_2,PARTFUN1,SETWISEO,SQUARE_1,NAT_1,FINSEQOP,FINSOP_1,SETWOP_2,CAT_2,ALGSTR_1,MATRIX_2,FVSUM_1,RELSET_1,FINSEQ_4,CKB1,CKB2,CKB3,CKB9,CKB10,CKB11,CKB12;
requirements NUMERALS,REAL,BOOLE,SUBSET;
begin
theorem
Lm1: (for L being  add-associative  right_zeroed  right_complementable non empty addLoopStr holds (for p being (FinSequence of L) holds ((for i being (Element of ( NAT )) holds (i in ( dom p ) implies ( p . i ) = ( 0. L ))) implies ( Sum p ) = ( 0. L ))))
proof
let L being  add-associative  right_zeroed  right_complementable non empty addLoopStr;
let p being (FinSequence of L);
assume A1: (for k being (Element of ( NAT )) holds (k in ( dom p ) implies ( p . k ) = ( 0. L )));
defpred P[ (FinSequence of L) ]
 means
((for k being (Element of ( NAT )) holds (k in ( dom $1 ) implies ( $1 . k ) = ( 0. L ))) implies ( Sum $1 ) = ( 0. L ));
A2: (for p being (FinSequence of L) holds (for x being (Element of L) holds (P[ p ] implies P[ ( p ^ <* x *> ) ])))
proof
let p being (FinSequence of L);
let x being (Element of L);
assume A3: ((for k being (Element of ( NAT )) holds (k in ( dom p ) implies ( p . k ) = ( 0. L ))) implies ( Sum p ) = ( 0. L ));
A4: ( ( len p ) + 1 ) in ( Seg ( ( len p ) + 1 ) ) by FINSEQ_1:4;
assume A5: (for k being (Element of ( NAT )) holds (k in ( dom ( p ^ <* x *> ) ) implies ( ( p ^ <* x *> ) . k ) = ( 0. L )));
A6: (for k being (Element of ( NAT )) holds (k in ( dom p ) implies ( p . k ) = ( 0. L )))
proof
A7: ( dom p ) c= ( dom ( p ^ <* x *> ) ) by FINSEQ_1:26;
let k being (Element of ( NAT ));
assume that
A8: k in ( dom p );
thus ( p . k ) = ( ( p ^ <* x *> ) . k ) by A8,FINSEQ_1:def 7
.= ( 0. L ) by A5,A8,A7;
end;
( len ( p ^ <* x *> ) ) = ( ( len p ) + ( len <* x *> ) ) by FINSEQ_1:22
.= ( ( len p ) + 1 ) by FINSEQ_1:39;
then A9: ( ( len p ) + 1 ) in ( dom ( p ^ <* x *> ) ) by A4,FINSEQ_1:def 3;
A10: x = ( ( p ^ <* x *> ) . ( ( len p ) + 1 ) ) by FINSEQ_1:42;
thus ( Sum ( p ^ <* x *> ) ) = ( ( Sum p ) + ( Sum <* x *> ) ) by RLVECT_1:41
.= ( ( Sum p ) + x ) by RLVECT_1:44
.= ( ( 0. L ) + ( 0. L ) ) by A3,A5,A6,A9,A10
.= ( 0. L ) by RLVECT_1:def 4;
end;
A11: P[ ( <*> (the carrier of L) ) ] by RLVECT_1:43;
(for p being (FinSequence of L) holds P[ p ]) from FINSEQ_2:sch 2(A11,A2);
hence thesis by A1;
end;
