environ
vocabularies NUMBERS,SCMNORM,SCMFSA_2,AMI_1,SUBSET_1,SCMFSA7B,SCMFSA8C,SCMFSA8A,AMI_3,CARD_1,AMISTD_2,SCMFSA8B,TURING_1,FSM_1,GRAPHSP,FUNCT_1,PARTFUN1,COMPLEX1,FUNCT_4,ARYTM_3,SF_MASTR,SCMFSA6C,SCMFSA6B,FUNCOP_1,ORDINAL1,RELAT_1,TARSKI,XBOOLE_0,XXREAL_0,CIRCUIT2,NAT_1,STRUCT_0,ARYTM_1,INT_1,FINSEQ_1,FINSEQ_2,SCMFSA6A,FINSUB_1,CARD_3,CLASSES1,VALUED_0,MSUALG_1,SCM_HALT,SCMBSORT,PBOOLE,COMPOS_1;
notations TARSKI,XBOOLE_0,ENUMSET1,SUBSET_1,SETFAM_1,ORDINAL1,CARD_1,NUMBERS,XCMPLX_0,NAT_1,INT_1,RELAT_1,FINSEQ_1,FUNCT_1,COMPLEX1,FUNCT_2,PBOOLE,FUNCT_4,FINSEQ_2,FUNCT_7,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_2,SCMFSA_2,FUNCOP_1,FINSUB_1,CARD_3,PARTFUN1,SCMFSA6B,SCMFSA6C,SCMFSA6A,SF_MASTR,SCMFSA8A,SCMFSA8B,SCMFSA8C,CLASSES1,RFINSEQ,SCMFSA7B,NAT_D,SCM_HALT,XXREAL_0;
definitions TARSKI,FUNCOP_1,COMPOS_1,EXTPRO_1,XBOOLE_0,SCMFSA8C,SCM_HALT,MEMSTR_0;
theorems SF_MASTR,FUNCT_1,FUNCT_7,FUNCOP_1,RELAT_1,FUNCT_2,ZFMISC_1,SCMFSA6A,FUNCT_4,FINSEQ_3,ENUMSET1,NAT_1,FINSEQ_1,RELSET_1,TARSKI,INT_1,PARTFUN1,GRFUNC_1,RFINSEQ,SCMFSA_2,SCMFSA7B,SCMFSA8B,SCMFSA8A,SCMFSA8C,SCMFSA6C,SCM_HALT,ABSVALUE,FINSEQ_4,XBOOLE_0,XBOOLE_1,SCMFSA9A,XREAL_1,ORDINAL1,XXREAL_0,NAT_D,CLASSES1,PBOOLE,AFINSQ_1,COMPOS_1,EXTPRO_1,MEMSTR_0,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16;
schemes RELSET_1,FUNCT_1,NAT_1;
registrations XBOOLE_0,SETFAM_1,FUNCT_1,RELSET_1,FUNCOP_1,FINSUB_1,NUMBERS,XXREAL_0,XREAL_0,NAT_1,INT_1,CARD_3,RFINSEQ,SCMFSA_2,SF_MASTR,SCMFSA6C,SCMFSA7B,FINSET_1,SCMFSA8A,SCMFSA8B,SCMFSA_9,SCM_HALT,STRUCT_0,VALUED_0,ORDINAL1,RELAT_1,FUNCT_2,PBOOLE,SCMFSA10,AMISTD_2,SCMFSA6A,COMPOS_1,SFMASTR1,FUNCT_4,EXTPRO_1,SCMFSA8C,MEMSTR_0;
constructors SETWISEO,XXREAL_0,REAL_1,AMI_3,SCMFSA6A,SF_MASTR,SCMFSA6B,SCMFSA6C,SCMFSA8A,SCMFSA8B,SCMFSA8C,SCM_HALT,SEQ_1,SCMFSA7B,AMISTD_2,NAT_D,CLASSES1,RELSET_1,DOMAIN_1,SFMASTR1,AMISTD_1,PBOOLE,PRE_POLY,SCMFSA_3,SCMFSA_7,SCMFSA_9,SCMFSA_2,XXREAL_2,MEMSTR_0;
requirements REAL,NUMERALS,SUBSET,BOOLE,ARITHM;
begin
theorem
Th30: (for I being (Program of ( SCM+FSA )) holds (for l being (Element of ( NAT )) holds ( UsedIntLoc ( Directed (I,l) ) ) = ( UsedIntLoc I )))
proof
let I being (Program of ( SCM+FSA ));
let l being (Element of ( NAT ));
consider UIL being (Function of (the Instructions of ( SCM+FSA )),( Fin ( Int-Locations ) )) such that A1: (for i being (Instruction of ( SCM+FSA )) holds ( UIL . i ) = ( UsedIntLoc i )) and A2: ( UsedIntLoc I ) = ( Union ( UIL * I ) ) by SF_MASTR:def 2;
consider UIL2 being (Function of (the Instructions of ( SCM+FSA )),( Fin ( Int-Locations ) )) such that A3: (for i being (Instruction of ( SCM+FSA )) holds ( UIL2 . i ) = ( UsedIntLoc i )) and A4: ( UsedIntLoc ( Directed (I,l) ) ) = ( Union ( UIL2 * ( Directed (I,l) ) ) ) by SF_MASTR:def 2;
A5: (for c being (Element of (the Instructions of ( SCM+FSA ))) holds ( UIL . c ) = ( UIL2 . c ))
proof
let c being (Element of (the Instructions of ( SCM+FSA )));
reconsider d = c as (Instruction of ( SCM+FSA ));
thus ( UIL . c ) = ( UsedIntLoc d ) by A1
.= ( UIL2 . c ) by A3;
end;
A6: ( dom UIL ) = (the Instructions of ( SCM+FSA )) by FUNCT_2:def 1;
A7: ( UIL . ( halt ( SCM+FSA ) ) ) = ( {} ) by A1,SF_MASTR:13;
A8: ( UIL . ( goto l ) ) = ( UsedIntLoc ( goto l ) ) by A1
.= ( {} ) by SF_MASTR:15;
A9: ( rng I ) c= (the Instructions of ( SCM+FSA )) by RELAT_1:def 19;
( UIL * ( Directed (I,l) ) ) = ( UIL * ( I +~ (( halt ( SCM+FSA ) ),( goto l )) ) ) by SCMFSA6A:def 1
.= ( UIL * ( ( ( id (the Instructions of ( SCM+FSA )) ) +* (( halt ( SCM+FSA ) ),( goto l )) ) * I ) ) by A9,FUNCT_7:116
.= ( ( UIL * ( ( id (the Instructions of ( SCM+FSA )) ) +* (( halt ( SCM+FSA ) ),( goto l )) ) ) * I ) by RELAT_1:36
.= ( UIL * I ) by A6,A7,A8,FUNCT_7:108;
hence thesis by A2,A4,A5,FUNCT_2:63;
end;
