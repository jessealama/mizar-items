environ
vocabularies AMI_1,SCMFSA_2,FSM_1,CARD_1,SCMFSA6B,TURING_1,FUNCT_1,RELAT_1,ARYTM_3,FUNCT_4,SCMFSA6A,TARSKI,XBOOLE_0,CIRCUIT2,NUMBERS,SUBSET_1,GRAPHSP,AMI_3,XXREAL_0,SF_MASTR,FUNCOP_1,FUNCT_7,STRUCT_0,ARYTM_1,INT_1,COMPLEX1,PARTFUN1,FINSEQ_1,FINSEQ_2,MSUALG_1,AOFA_I00,ORDINAL1,SCMNORM,PBOOLE,SCMFSA6C,AMISTD_1,AMISTD_2,COMPOS_1;
notations TARSKI,XBOOLE_0,SUBSET_1,ENUMSET1,CARD_1,NUMBERS,XCMPLX_0,NAT_1,INT_1,COMPLEX1,RELAT_1,FUNCT_1,PARTFUN1,FINSEQ_1,FINSEQ_2,FUNCOP_1,FUNCT_4,PBOOLE,STRUCT_0,MEMSTR_0,COMPOS_1,EXTPRO_1,AMISTD_1,AMISTD_2,FUNCT_7,SCMFSA_2,SCMFSA6A,SF_MASTR,SCMFSA6B,XXREAL_0,CKB3,CKB4;
definitions FUNCOP_1,COMPOS_1,EXTPRO_1,SCMFSA6B,SCMFSA6A,PARTFUN1,MEMSTR_0,AMISTD_1,CKB3,CKB4;
theorems RELAT_1,FUNCT_7,FUNCT_4,FUNCT_1,SCMFSA_3,ZFMISC_1,FUNCOP_1,TARSKI,NAT_1,SCMFSA_2,ENUMSET1,GRFUNC_1,SCMFSA6A,SF_MASTR,SCMFSA6B,XBOOLE_0,XBOOLE_1,PARTFUN1,COMPOS_1,EXTPRO_1,AMISTD_2,PBOOLE,STRUCT_0,MEMSTR_0,AMISTD_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB33,CKB34,CKB35;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,FUNCOP_1,FINSET_1,NUMBERS,XREAL_0,INT_1,SCMFSA_2,SCMFSA6A,SF_MASTR,SCMFSA6B,ORDINAL1,RELSET_1,COMPOS_1,STRUCT_0,EXTPRO_1,SCMFSA10,PBOOLE,FUNCT_4,AMISTD_2,MEMSTR_0,AMISTD_1,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32;
constructors DOMAIN_1,SETWISEO,XXREAL_0,INT_2,SCMFSA6A,SF_MASTR,SCMFSA6B,RELSET_1,PRE_POLY,AMISTD_1,AMISTD_2,PBOOLE,FUNCT_4,MEMSTR_0,CKB3,CKB4;
requirements NUMERALS,BOOLE,SUBSET,ARITHM;
begin
reserve x for set;
reserve a for Int-Location;
reserve s for (State of ( SCM+FSA ));
reserve P for (Instruction-Sequence of ( SCM+FSA ));
Lm3:now
set IF = ( Data-Locations ( SCM+FSA ) );
let I being  keeping_0  parahalting (Program of ( SCM+FSA ));
let s being (State of ( SCM+FSA ));
let P being (Instruction-Sequence of ( SCM+FSA ));
set IE = ( IExec (I,P,s) );
now
A1: ( dom ( Initialized IE ) ) = (the carrier of ( SCM+FSA )) by PARTFUN1:def 2;
A2: (the carrier of ( SCM+FSA )) = ( { ( IC ( SCM+FSA ) ) } \/ ( Data-Locations ( SCM+FSA ) ) ) by STRUCT_0:4;
A3: ( dom IE ) = (the carrier of ( SCM+FSA )) by PARTFUN1:def 2;
hence ( dom ( DataPart ( Initialized IE ) ) ) = ( ( dom IE ) /\ IF ) by A1,RELAT_1:61;
then A4: ( dom ( DataPart ( Initialized IE ) ) ) = ( Data-Locations ( SCM+FSA ) ) by A3,A2,XBOOLE_1:21;
let x;
assume A5: x in ( dom ( DataPart ( Initialized IE ) ) );
per cases  by A5,A4,SCMFSA_2:100,XBOOLE_0:def 3;
suppose x in ( Int-Locations );

then reconsider x9 = x as Int-Location by SCMFSA_2:4;
per cases ;
suppose A6: x9 is  read-write;

thus ( ( DataPart ( Initialized IE ) ) . x ) = ( ( Initialized IE ) . x ) by A5,A4,FUNCT_1:49
.= ( IE . x ) by A6,CKB33:1;
end;
suppose x9 is  read-only;

then A7: x9 = ( intloc ( 0 ) ) by SF_MASTR:def 5;
thus ( ( DataPart ( Initialized IE ) ) . x ) = ( ( Initialized IE ) . x9 ) by A5,A4,FUNCT_1:49
.= 1 by A7,SCMFSA6A:38
.= ( IE . x ) by A7,SCMFSA6B:11;
end;
end;
suppose x in ( FinSeq-Locations );

then reconsider x9 = x as FinSeq-Location by SCMFSA_2:5;
thus ( ( DataPart ( Initialized IE ) ) . x ) = ( ( Initialized IE ) . x9 ) by A5,A4,FUNCT_1:49
.= ( IE . x ) by CKB33:1;
end;
end;
hence ( DataPart ( Initialized IE ) ) = ( DataPart IE ) by FUNCT_1:46;
end;
theorem
Th7: (for I being  keeping_0  parahalting (Program of ( SCM+FSA )) holds (for j being  parahalting (Instruction of ( SCM+FSA )) holds ( ( IExec (( I ';' j ),P,s) ) . a ) = ( ( Exec (j,( IExec (I,P,s) )) ) . a )))
proof
let I being  keeping_0  parahalting (Program of ( SCM+FSA ));
let j being  parahalting (Instruction of ( SCM+FSA ));
set Mj = ( Macro j );
set SA = ( Start-At (( ( IC ( IExec (Mj,P,( IExec (I,P,s) )) ) ) + ( card I ) ),( SCM+FSA )) );
A1: (not a in ( dom SA )) by SCMFSA_2:102;
A2: ( DataPart ( Initialized ( IExec (I,P,s) ) ) ) = ( DataPart ( IExec (I,P,s) ) ) by Lm3;
a in ( Int-Locations ) by SCMFSA_2:2;
then A3: a in ( Data-Locations ( SCM+FSA ) ) by SCMFSA_2:100,XBOOLE_0:def 3;
thus ( ( IExec (( I ';' j ),P,s) ) . a ) = ( ( IncIC (( IExec (Mj,P,( IExec (I,P,s) )) ),( card I )) ) . a ) by SCMFSA6B:20
.= ( ( IExec (Mj,P,( IExec (I,P,s) )) ) . a ) by A1,FUNCT_4:11
.= ( ( Exec (j,( Initialized ( IExec (I,P,s) ) )) ) . a ) by CKB35:1
.= ( ( DataPart ( Exec (j,( Initialized ( IExec (I,P,s) ) )) ) ) . a ) by A3,FUNCT_1:49
.= ( ( DataPart ( Exec (j,( IExec (I,P,s) )) ) ) . a ) by A2,CKB34:1
.= ( ( Exec (j,( IExec (I,P,s) )) ) . a ) by A3,FUNCT_1:49;
end;
