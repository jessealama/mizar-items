environ
vocabularies NUMBERS,ZF_LANG,XBOOLEAN,XXREAL_0,BVFUNC_2,CLASSES2,FUNCT_1,CARD_1,FINSEQ_1,ARYTM_3,TARSKI,XBOOLE_0,ZF_MODEL,SUBSET_1,REALSET1,RELAT_1,FUNCT_4,FINSET_1,NAT_1,ZFMISC_1,ORDINAL4,ZF_LANG1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,FINSET_1,ZF_LANG,ZF_MODEL,XXREAL_0,FUNCT_7,CKB72,CKB73,CKB74,CKB140,CKB158,CKB159;
definitions TARSKI,ZF_LANG,ZF_MODEL,XBOOLE_0,CKB72,CKB140,CKB159;
theorems TARSKI,ZFMISC_1,ENUMSET1,NAT_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,ZF_LANG,ZF_MODEL,ZFMODEL1,RELSET_1,XBOOLE_0,XBOOLE_1,XXREAL_0,ORDINAL1,FUNCT_7,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70,CKB72,CKB75,CKB76,CKB77,CKB78,CKB79,CKB81,CKB82,CKB83,CKB84,CKB85,CKB86,CKB87,CKB88,CKB89,CKB90,CKB91,CKB92,CKB93,CKB94,CKB95,CKB96,CKB97,CKB98,CKB99,CKB100,CKB101,CKB102,CKB103,CKB104,CKB105,CKB106,CKB107,CKB108,CKB109,CKB110,CKB111,CKB112,CKB113,CKB114,CKB115,CKB116,CKB117,CKB118,CKB119,CKB120,CKB121,CKB122,CKB123,CKB124,CKB125,CKB126,CKB127,CKB128,CKB129,CKB130,CKB131,CKB132,CKB133,CKB134,CKB135,CKB136,CKB137,CKB138,CKB139,CKB140,CKB141,CKB142,CKB143,CKB144,CKB145,CKB146,CKB147,CKB148,CKB149,CKB150,CKB151,CKB152,CKB153,CKB154,CKB155,CKB156,CKB157,CKB159,CKB160,CKB161,CKB162,CKB163;
schemes PARTFUN1,ZF_LANG,CKB71;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,FINSET_1,XXREAL_0,NAT_1,FINSEQ_1,ZF_LANG,CKB80;
constructors ENUMSET1,XXREAL_0,XREAL_0,NAT_1,ZF_MODEL,FUNCT_7,RELSET_1,CKB72,CKB74,CKB140,CKB158,CKB159;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve F for ZF-formula;
reserve H for ZF-formula;
reserve x for Variable;
reserve y for Variable;
reserve a for set;
reserve j for (Element of ( NAT ));
theorem
Th170: (( 'not' F ) = ( ( 'not' H ) / (x,y) ) iff F = ( H / (x,y) ))
proof
set N = ( ( 'not' H ) / (x,y) );
A1: ( len <* 2 *> ) = 1 by FINSEQ_1:39;
A2: (( dom ( 'not' F ) ) = ( Seg ( len ( 'not' F ) ) ) & ( dom ( 'not' H ) ) = ( Seg ( len ( 'not' H ) ) )) by FINSEQ_1:def 3;
A3: (( len ( 'not' F ) ) = ( ( len <* 2 *> ) + ( len F ) ) & ( len ( 'not' H ) ) = ( ( len <* 2 *> ) + ( len H ) )) by FINSEQ_1:22;
A4: (( dom F ) = ( Seg ( len F ) ) & ( dom H ) = ( Seg ( len H ) )) by FINSEQ_1:def 3;
thus (( 'not' F ) = ( ( 'not' H ) / (x,y) ) implies F = ( H / (x,y) ))
proof
assume A5: ( 'not' F ) = N;
then A6: ( dom ( 'not' F ) ) = ( dom ( 'not' H ) ) by CKB159:def 1;
then A7: ( len ( 'not' F ) ) = ( len ( 'not' H ) ) by FINSEQ_3:29;
A8:now
let a;
assume A9: a in ( dom F );
then reconsider i = a as (Element of ( NAT ));
A10: (( F . a ) = ( N . ( 1 + i ) ) & ( 1 + i ) in ( dom N )) by A1,A5,A9,FINSEQ_1:28,FINSEQ_1:def 7;
A11: ( ( 'not' H ) . ( 1 + i ) ) = ( H . a ) by A1,A4,A3,A7,A9,FINSEQ_1:def 7;
then A12: (( H . a ) = x implies ( F . a ) = y) by A5,A6,A10,CKB159:def 1;
A13: (( H . a ) <> x implies ( F . a ) = ( H . a )) by A5,A6,A10,A11,CKB159:def 1;
(( H . a ) = x implies ( ( H / (x,y) ) . a ) = y) by A4,A3,A7,A9,CKB159:def 1;
hence ( F . a ) = ( ( H / (x,y) ) . a ) by A4,A3,A7,A9,A12,A13,CKB159:def 1;
end;
A14: ( dom H ) = ( dom ( H / (x,y) ) ) by CKB159:def 1;
( dom F ) = ( dom H ) by A3,A7,FINSEQ_3:29;
hence thesis by A14,A8,FUNCT_1:2;
end;

assume A15: F = ( H / (x,y) );
then A16: ( dom F ) = ( dom H ) by CKB159:def 1;
then A17: ( len F ) = ( len H ) by FINSEQ_3:29;
A18: ( dom <* 2 *> ) = { 1 } by FINSEQ_1:2,FINSEQ_1:def 8;
A19:now
let a;
assume A20: a in ( dom ( 'not' F ) );
then reconsider i = a as (Element of ( NAT ));
A21:now
A22: (( ( 'not' H ) . a ) <> x implies ( N . a ) = ( ( 'not' H ) . a )) by A2,A3,A17,A20,CKB159:def 1;
given j being Nat such that
A23: j in ( dom F )
and
A24: i = ( 1 + j );

A25: (( H . j ) = ( ( 'not' H ) . i ) & ( F . j ) = ( ( 'not' F ) . i )) by A1,A16,A23,A24,FINSEQ_1:def 7;
then A26: (( ( 'not' H ) . a ) = x implies ( ( 'not' F ) . a ) = y) by A15,A16,A23,CKB159:def 1;
(( ( 'not' H ) . a ) <> x implies ( ( 'not' F ) . a ) = ( ( 'not' H ) . a )) by A15,A16,A23,A25,CKB159:def 1;
hence ( ( 'not' F ) . a ) = ( N . a ) by A2,A3,A17,A20,A26,A22,CKB159:def 1;
end;
now
A27: (( ( 'not' H ) . 1 ) = 2 & 2 <> x) by CKB141:1,FINSEQ_1:41;
assume i in { 1 };
then A28: i = 1 by TARSKI:def 1;
then ( ( 'not' F ) . i ) = 2 by FINSEQ_1:41;
hence ( ( 'not' F ) . a ) = ( N . a ) by A2,A3,A17,A20,A28,A27,CKB159:def 1;
end;
hence ( ( 'not' F ) . a ) = ( N . a ) by A1,A18,A20,A21,FINSEQ_1:25;
end;
( dom ( 'not' F ) ) = ( dom N ) by A2,A3,A17,CKB159:def 1;
hence thesis by A19,FUNCT_1:2;
end;
