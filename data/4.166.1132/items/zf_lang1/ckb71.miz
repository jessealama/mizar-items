environ
vocabularies NUMBERS,ZF_LANG,XBOOLEAN,XXREAL_0,BVFUNC_2,CLASSES2,FUNCT_1,CARD_1,FINSEQ_1,ARYTM_3,TARSKI,XBOOLE_0,ZF_MODEL,SUBSET_1,REALSET1,RELAT_1,FUNCT_4,FINSET_1,NAT_1,ZFMISC_1,ORDINAL4,ZF_LANG1;
notations TARSKI,XBOOLE_0,ENUMSET1,ZFMISC_1,SUBSET_1,NUMBERS,NAT_1,RELAT_1,FUNCT_1,FUNCT_2,FINSEQ_1,FINSET_1,ZF_LANG,ZF_MODEL,XXREAL_0,FUNCT_7;
definitions TARSKI,ZF_LANG,ZF_MODEL,XBOOLE_0;
theorems TARSKI,ZFMISC_1,ENUMSET1,NAT_1,FINSEQ_1,FINSEQ_3,FUNCT_1,FUNCT_2,ZF_LANG,ZF_MODEL,ZFMODEL1,RELSET_1,XBOOLE_0,XBOOLE_1,XXREAL_0,ORDINAL1,FUNCT_7,RELAT_1,CKB1,CKB2,CKB3,CKB4,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB22,CKB23,CKB24,CKB25,CKB26,CKB27,CKB28,CKB29,CKB30,CKB31,CKB32,CKB33,CKB34,CKB35,CKB36,CKB37,CKB38,CKB39,CKB40,CKB41,CKB42,CKB43,CKB44,CKB45,CKB46,CKB47,CKB48,CKB49,CKB50,CKB51,CKB52,CKB53,CKB54,CKB55,CKB56,CKB57,CKB58,CKB59,CKB60,CKB61,CKB62,CKB63,CKB64,CKB65,CKB66,CKB67,CKB68,CKB69,CKB70;
schemes PARTFUN1,ZF_LANG;
registrations XBOOLE_0,SUBSET_1,ORDINAL1,RELSET_1,FINSET_1,XXREAL_0,NAT_1,FINSEQ_1,ZF_LANG;
constructors ENUMSET1,XXREAL_0,XREAL_0,NAT_1,ZF_MODEL,FUNCT_7,RELSET_1;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
reserve H for ZF-formula;
reserve H1 for ZF-formula;
reserve H2 for ZF-formula;
reserve x for Variable;
reserve x1 for Variable;
reserve x2 for Variable;
scheme ZFInduction { P[ZF-formula] } : (for H holds P[ H ])
provided
A1: (for x1 holds (for x2 holds (P[ ( x1 '=' x2 ) ] & P[ ( x1 'in' x2 ) ])))
and
A2: (for H holds (P[ H ] implies P[ ( 'not' H ) ]))
and
A3: (for H1 holds (for H2 holds ((P[ H1 ] & P[ H2 ]) implies P[ ( H1 '&' H2 ) ])))
and
A4: (for H holds (for x holds (P[ H ] implies P[ ( All (x,H) ) ])))
proof
A5: (for H holds (((H is  conjunctive & P[ ( the_left_argument_of H ) ]) & P[ ( the_right_argument_of H ) ]) implies P[ H ]))
proof
let H;
assume H is  conjunctive;
then H = ( ( the_left_argument_of H ) '&' ( the_right_argument_of H ) ) by ZF_LANG:40;
hence thesis by A3;
end;
A6: (for H holds (H is  atomic implies P[ H ]))
proof
let H;
assume that
A7: (H is  being_equality or H is  being_membership);
A8: (H is  being_membership implies thesis)
proof
given x1,x2 such that
A9: H = ( x1 'in' x2 );

thus thesis by A1,A9;
end;
(H is  being_equality implies thesis)
proof
given x1,x2 such that
A10: H = ( x1 '=' x2 );

thus thesis by A1,A10;
end;
hence thesis by A7,A8;
end;
A11: (for H holds ((H is  universal & P[ ( the_scope_of H ) ]) implies P[ H ]))
proof
let H;
assume H is  universal;
then H = ( All (( bound_in H ),( the_scope_of H )) ) by ZF_LANG:44;
hence thesis by A4;
end;
A12: (for H holds ((H is  negative & P[ ( the_argument_of H ) ]) implies P[ H ]))
proof
let H;
assume H is  negative;
then H = ( 'not' ( the_argument_of H ) ) by ZF_LANG:def 30;
hence thesis by A2;
end;
thus (for H holds P[ H ]) from ZF_LANG:sch 1(A6,A12,A5,A11);
end;
