environ
vocabularies NUMBERS,STRUCT_0,RELAT_1,XBOOLE_0,SUBSET_1,FINSEQ_1,TDGROUP,TARSKI,ORDINAL4,ARYTM_3,CARD_1,FUNCT_1,XXREAL_0,NAT_1,ZFMISC_1,ORDINAL1,FINSET_1,LANG1;
notations TARSKI,XBOOLE_0,ZFMISC_1,SUBSET_1,ORDINAL1,NUMBERS,NAT_1,DOMAIN_1,RELAT_1,STRUCT_0,FUNCT_1,FINSEQ_1,FINSET_1,RELSET_1,PARTFUN1,FUNCT_2,FINSEQ_2,XXREAL_0,PRE_POLY,CKB1,CKB3,CKB5,CKB6,CKB7,CKB8,CKB9,CKB11,CKB16,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26;
definitions XBOOLE_0,TARSKI,RELAT_1,STRUCT_0,ORDINAL1,CKB7,CKB8,CKB9,CKB11,CKB16,CKB20,CKB24,CKB25,CKB26;
theorems TARSKI,ZFMISC_1,RELAT_1,FINSEQ_1,NAT_1,RELSET_1,TREES_2,FUNCT_2,FINSEQ_3,XBOOLE_0,XBOOLE_1,XREAL_1,XXREAL_0,ORDINAL1,CKB7,CKB8,CKB9,CKB10,CKB11,CKB12,CKB13,CKB14,CKB15,CKB16,CKB17,CKB18,CKB19,CKB20,CKB21,CKB24,CKB25,CKB26;
schemes NAT_1,FUNCT_2;
registrations XBOOLE_0,SUBSET_1,RELAT_1,FUNCT_1,FUNCT_2,FINSET_1,XXREAL_0,XREAL_0,FINSEQ_1,STRUCT_0,ORDINAL1,CARD_1,RELSET_1,CKB1,CKB2,CKB3,CKB4,CKB27,CKB28,CKB29;
constructors PARTFUN1,DOMAIN_1,XXREAL_0,XREAL_0,NAT_1,FINSEQ_2,STRUCT_0,RELSET_1,PRE_POLY,CKB1,CKB3,CKB7,CKB8,CKB9,CKB11,CKB16,CKB20,CKB22,CKB23,CKB24,CKB25,CKB26;
requirements NUMERALS,REAL,BOOLE,SUBSET,ARITHM;
begin
definition
let D being non  empty set;
func TotalGrammar D ->  strict GrammarStr means 
:Def10: (((the carrier of it) = ( succ D ) & (the InitialSym of it) = D) & (the Rules of it) = ( { [ D,<* d,D *> ] where d is (Element of D): d = d } \/ { [ D,( {} ) ] } ));
existence
proof
reconsider E = ( succ D ) as non  empty set;
D in { D } by TARSKI:def 1;
then reconsider S = D as (Element of E) by XBOOLE_0:def 3;
set R = { [ S,<* d,S *> ] where d is (Element of D): d = d };
R c= [: E,( E * ) :]
proof
let a being set;
assume a in R;
then consider d being (Element of D) such that A1: a = [ S,<* d,S *> ] and d = d;
reconsider d as (Element of E) by XBOOLE_0:def 3;
a = [ S,<* d,S *> ] by A1;
hence thesis;
end;
then reconsider R as (Relation of E,( E * ));
take GrammarStr (# E,S,( R \/ { [ S,( <*> E ) ] } ) #);
thus thesis;
end;
uniqueness;
end;
