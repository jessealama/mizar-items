environ
vocabularies STRUCT_0,SUBSET_1,XBOOLE_0,FUNCT_1,NUMBERS,CARD_3,CARD_1,FUNCOP_1,FUNCT_4,RELAT_1,TARSKI,CAT_1,FSM_1,SETFAM_1,FINSET_1,NAT_1,ARYTM_1,PARTFUN1,ZFMISC_1,AMI_1,ARYTM_3,COMPOS_1,SCMFSA6C,XXREAL_0,SUPINF_2,MEMSTR_0;
notations TARSKI,XBOOLE_0,ZFMISC_1,MCART_1,SUBSET_1,SETFAM_1,ORDINAL1,PBOOLE,FUNCT_7,CARD_1,CARD_3,XCMPLX_0,RELAT_1,FUNCT_1,PARTFUN1,FINSET_1,NUMBERS,INT_1,NAT_1,NAT_D,FUNCOP_1,FUNCT_4,AFINSQ_1,FINSEQ_1,FUNCT_2,DOMAIN_1,VALUED_0,VALUED_1,STRUCT_0,XXREAL_0,CKB1,CKB2,CKB5,CKB6,CKB7,CKB8,CKB9,CKB10,CKB11;
definitions RELAT_1,FUNCOP_1,ORDINAL1,PBOOLE,PARTFUN1,MCART_1,ZFMISC_1,TARSKI,STRUCT_0,FUNCT_1,XBOOLE_0,NAT_1,FUNCT_4,NAT_D,AFINSQ_1,VALUED_1,CARD_3,CKB2,CKB10,CKB11;
theorems ZFMISC_1,FUNCT_2,TARSKI,CARD_3,FUNCT_4,FUNCOP_1,FUNCT_1,GRFUNC_1,RELAT_1,RELSET_1,XBOOLE_0,XBOOLE_1,ORDINAL1,SUBSET_1,FUNCT_7,PARTFUN1,PBOOLE,XREAL_1,NAT_D,NAT_2,STRUCT_0,CKB2,CKB10,CKB11;
schemes FRAENKEL;
registrations XBOOLE_0,SETFAM_1,RELAT_1,FUNCT_1,ORDINAL1,FUNCT_2,FUNCOP_1,FUNCT_4,FINSET_1,XREAL_0,FINSEQ_1,CARD_3,STRUCT_0,INT_1,RELSET_1,GRFUNC_1,PRE_POLY,PBOOLE,AFINSQ_1,VALUED_1,XCMPLX_0,PARTFUN1,NUMBERS,NAT_1,MEMBERED,FUNCT_7,CARD_1,XXREAL_2,ZFMISC_1,SUBSET_1,VALUED_0,XXREAL_0,ORDINAL4,ORDINAL5,CKB1,CKB3,CKB4,CKB12,CKB13;
constructors SETFAM_1,DOMAIN_1,FUNCT_4,XXREAL_0,RELSET_1,FUNCT_7,PRE_POLY,PBOOLE,RECDEF_2,AFINSQ_1,NAT_D,WELLORD2,STRUCT_0,CKB1,CKB2,CKB10,CKB11;
requirements NUMERALS,BOOLE,SUBSET,ARITHM,REAL;
begin
definition
let N being  with_non-empty_elements set;
let S being  IC-Ins-separated non empty Mem-Struct over N;
let p being (PartState of S);
func IC p -> (Element of ( NAT ))
equals
( p . ( IC S ) );
coherence
proof
per cases ;
suppose A1: ( IC S ) in ( dom p );

consider s being (State of S) such that A2: p c= s by PBOOLE:141;
reconsider ss = s as (Element of ( product (the Object-Kind of S) )) by CARD_3:107;
( dom (the Object-Kind of S) ) = (the carrier of S) by FUNCT_2:def 1;
then ( pi (( product (the Object-Kind of S) ),( IC S )) ) = ( ObjectKind ( IC S ) ) by CARD_3:12
.= ( NAT ) by CKB11:def 1;
then ( ss . ( IC S ) ) in ( NAT ) by CARD_3:def 6;
hence thesis by A1,A2,GRFUNC_1:2;
end;
suppose (not ( IC S ) in ( dom p ));

then ( p . ( IC S ) ) = ( 0 ) by FUNCT_1:def 2;
hence thesis;
end;
end;
end;
