stylesheet "1.0";
import "utils/die.xsl";
output method="xml" indent="yes";

// By default, copy and recurse
tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Item[@kind = "Reservation"]] {
  die (#message = "The split stylesheet assumes that there are no reservations.");
}

tpl [Implicitly-Qualified-Segment] {
  die (#message = "The split stylesheet assumes that there are no implicitly qualified segments.");
}

tpl [Item[@kind="Definition-Item"]] {
  $context = `.`;
  apply [Block] (#context = $context);
}

tpl [Block[@kind="Definitional-Block"]] (#context, #definitions) {
  for-each [Item[@kind = "Canceled-Pragma"
              or @kind = "Attribute-Definition"
              or @kind = "Functor-Definition"
              or @kind = "Predicate-Definition"
              or @kind = "Mode-Definition"
              or @kind = "Structure-Definition"]] {

    <Item {
      for-each [$context/@*] { copy-of `.`; }
      @kind = "Definition-Item";
      if [@kind = "Canceled-Pragma"] {
        apply [.];
      } else {
        <Block {
          @kind = "Definitional-Block";
          for-each [preceding-sibling::Item[@kind = "Loci-Declaration"
                                            or @kind = "Assumption"
                                            or @kind = "Existential-Assumption"
                                            or @kind = "Constant-Definition"
                                            or @kind = "Regular-Statement"
                                            or @kind = "Choice-Statement"
                                            or @kind = "Private-Functor-Definition"
                                            or @kind = "Private-Predicate-Definition"]] {
            apply [.];
          }
          <Item {
            for-each [@*] { copy-of `.`; }
            apply [*];
          }
          correctness-conditions (#candidates = `following-sibling::*`, #definitions = $definitions);
        }
      }
    }
  }
}

tpl [Block[@kind = "Registration-Block" and Item[@kind = "Cluster"]]] {
  apply [Item[@kind = "Cluster"]];
}

tpl [Block[@kind = "Registration-Block" and Item[@kind = "Identify"]]] {
  apply [Item[@kind = "Identify"]];
}

tpl [Block[@kind = "Registration-Block" and Item[@kind = "Reduction"]]] {
  apply [Item[@kind = "Reduction"]];
}

tpl [Block[@kind = "Notation-Block"]] {
  apply [Item[   @kind = "Pred-Antonym" or @kind = "Pred-Synonym"
              or @kind = "Attr-Antonym" or @kind = "Attr-Synonym"
              or @kind = "Func-Antonym" or @kind = "Func-Synonym"
	      or @kind = "Mode-Antonym" or @kind = "Mode-Synonym"]];
}

tpl [Item[@kind = "Cluster"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"
                                        or @kind = "Type-Changing-Statement"
                                        or @kind = "Constant-Definition"]] {
        apply [.];
      }
      <Item {
        @kind = "Cluster";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl [Item[@kind = "Identify"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = "Identify";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl [Item[@kind = "Reduction"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"
      	       				or @kind = "Regular-Statement"]] {
        apply [.];
      }
      <Item {
        @kind = "Reduction";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl correctness-conditions (#candidates, #definitions, #stop) {
  if [not($stop = "1")] {
    if [$candidates] {
      $candidate = `$candidates[1]`;
      for-each [$candidate] {
        $candidate_name = `local-name(.)`;
        $candidate_kind = `$candidate/@kind`;
        if [$candidate_name = "Item" and ($candidate_kind = "Correctness-Condition"
                                          or $candidate_kind = "Property"
                                          or $candidate_kind = "Correctness")] {
          apply [$candidate](#definitions = $definitions);
          correctness-conditions (#candidates = `$candidates[position() > 1]`,
                                  #definitions = $definitions);
        } else {
          correctness-conditions (#stop = "1");
        }
      }
    }
  }
}

tpl [Item[@kind = "Correctness-Condition"
          or @kind = "Property"
          or @kind = "Correctness"]](#definitions) {
  <Item {
    for-each [@*] { copy-of `.`; }
    apply [*](#definitions = $definitions);
  }
}

tpl [Block[@kind = "Proof"]](#definitions) {
  $context = `.`;
  <Block {
    @kind = "Proof";
    if [$definitions] {
      for-each [$definitions] {
        if [Variable] {
          $idnr = `Variable[1]/@idnr`;
          if [$context//Private-Predicate-Formula[@idnr = $idnr] or $context//Private-Functor-Term[@idnr = $idnr]] {
            copy-of `.`;
          }
        } else {
          die (#message = "While determining whether to possibly include some local definitions into a proof, we encountered a local definition that lacks a Variable child");
        }
      }
    }
    apply [*];
  }
}

tpl [Item[   @kind = "Pred-Synonym"
          or @kind = "Pred-Antonym"
          or @kind = "Attr-Synonym"
          or @kind = "Attr-Antonym"
          or @kind = "Func-Synonym"
          or @kind = "Func-Antonym"
          or @kind = "Mode-Synonym"
          or @kind = "Mode-Antonym"]] {
  <Item {
    @kind = "Definition-Item";
    <Block {
      @kind = "Notation-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = `@kind`;
        if [@line] { @line = `@line`; }
        if [@col] { @col = `@col`; }
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}
tpl [Item[@kind = "Canceled-Pragma" and @number and @number > 1]] {
  die (#message = "We encountered a canceled pragma that cancels more than one thing.  Did you apply the expand-canceled stylesheet first?");
}
