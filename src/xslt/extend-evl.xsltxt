stylesheet "1.0";
import "utils/token-strings.xsl";
output method="xml";

// Applied to a .evl file, reprint the .evl file with some extra
// content.  The stylesheet parameters
//
// #vocabularies
// #notations
// #definitions
// #theorems
// #registrations
// #constructors
// #requirements
// #schemes
// #equalities
// #expansions
//
// express extra articles that should be added to the relevant .evl
// file parts.  The purpose of this stylesheet is to fake the addition
// of content to the directives of a .miz file without actually
// editing the .miz (a hairy prospect indeed).

// The main application that I (Jesse Alama) have in mind for this
// stylesheet comes from the "itemization" of an article.  I divide a
// given mizar article into its constituent items, ITEM1, ITEM2, ... I
// want to verify, say, ITEM<n> with an environment that includes the
// exported content of ITEM1, ITEM2, ..., ITEM<n-1>.  Given the .evl
// file for the original .miz, I simply add ITEM1, ITEM2, ...,
// ITEM<n-1> to that .evl file using this stylesheet, and voila:
// without modifying the .miz file, I have effectively added ITEM1,
// ITEM2, ..., ITEM<n-1> to the environment for ITEM<n>.

// The values of the following parameters are supposed to be
// comma-delimited lists of article names, e.g.,
//
//  FOO1,BAR,BA5_4

// TODO:
//
// * At present, there is no sanity checking of the supplied
//   parameters.  One should check:
//
//   - that every parameter is a valid comma-delimited token list
//
//   - that there are no repetitions (this is bad because MIZAR will
//     complain if there are duplicate entries in a directive)

#vocabularies = { ",,"; }
#notations = { ",,"; }
#definitions = { ",,"; }
#theorems = { ",,"; }
#registrations = { ",,"; }
#constructors = { ",,"; }
#requirements = { ",,"; }
#schemes = { ",,"; }
#equalities = { ",,"; }
#expansions = { ",,"; }

tpl list(#separ,#elems) {
 for-each [$elems] {
  apply[.]; if [not(position()=last())] { copy-of $separ; } }
}

tpl [Environ] {
  <Environ {
    @aid = `@aid`; "\n";
    apply [Directive[@name="vocabularies"]] (#extras = $vocabularies);
    apply [Directive[@name="notations"]] (#extras = $notations);
    apply [Directive[@name="definitions"]] (#extras = $definitions);
    apply [Directive[@name="theorems"]] (#extras = $theorems);
    apply [Directive[@name="schemes"]] (#extras = $schemes);
    apply [Directive[@name="registrations"]] (#extras = $registrations);
    apply [Directive[@name="constructors"]] (#extras = $constructors);
    apply [Directive[@name="requirements"]] (#extras = $requirements);
    apply [Directive[@name="equalities"]] (#extras = $equalities);
    apply [Directive[@name="expansions"]] (#extras = $expansions);
  }
}

tpl [Ident] {
  <Ident {
    @"name" = `@name`;
  }
}

tpl write-extras (#extras) {
  $empty = token-string-is-empty (#token-string = $extras);
  if [$empty = "1"] {
    // nothing to do
  } else {
    $head = token-string-head (#token-string = $extras);
    $tail = token-string-tail (#token-string = $extras);
    <Ident { @"name" = $head; } "\n";
    write-extras (#extras = $tail);
  }
}

tpl [Directive] (#extras) {
  $valid = is-valid-token-string (#string = $extras);
  if [$valid = "1"] {
    <Directive {
      @"name" = `@name`;
      for-each [Ident] {
        if [position() = 1] {
          "\n";
        }
        apply [.]; "\n";
      }
      if [$extras and count (Ident) = "0"] {
        "\n";
      }
      write-extras (#extras = $extras);
    }
    "\n";
  } else {
    msg terminate="yes" `concat("Error: '", $extras, "' is not a valid token string.")`;
  }
}
