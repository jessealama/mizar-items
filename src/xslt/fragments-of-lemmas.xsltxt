stylesheet "1.0";

// List the lemmas occurring in an itemized .wsx file.

output method="text";

tpl count-preceding-lemmas {
  $num-preceding-regular-statements
    = `count (preceding::Item[parent::Text-Proper
    	                               and @kind = "Regular-Statement"
                                       and not(preceding-sibling::Item[@kind = "Pragma" and (@spelling = "$C induced" or @spelling = "$C deftheorem")])])`;
  $num-preceding-consider-propositions
    = `count (preceding::Proposition[parent::Conditions[parent::Item[@kind = "Choice-Statement" and parent::Text-Proper]]])`;
  $num-preceding-promoted-theorems
    = `count (preceding::Item[parent::Text-Proper and @kind = "Theorem-Item" and preceding-sibling::Item[@kind = "Pragma" and @spelling = "$C promoted lemma"]])`;
  `$num-preceding-regular-statements
   + $num-preceding-consider-propositions
   + $num-preceding-promoted-theorems
   + 1`;

}

// By default, do nothing
tpl [*] { }

tpl [/] {
    if [Fragments] {
      apply [Fragments];
    } else {
      msg terminate="yes" "Error: the required Fragments document element is missing.  (Are you applying this stylesheet to an itemized .wsx file?)";
    }
}

tpl [Fragments] {
    for-each [Text-Proper] {
      apply [.];
    }
}

tpl [Text-Proper] {
  $pos = `count (preceding-sibling::Text-Proper) + 1`;
  for-each [Item[position() = last()]] {
    apply [.] (#position = $pos);
  }
}

tpl [Item[    @kind = "Regular-Statement"
          and not(preceding-sibling::Item[    @kind = "Pragma"
                                          and (   @spelling = "$C induced"
                                               or @spelling = "$C deftheorem")])]] (#position)
{
  $lemma-pos = count-preceding-lemmas ();
  `$lemma-pos`; " "; $position; "\n";
}

tpl [Item[    @kind = "Theorem-Item"
          and preceding-sibling::Item[@kind = "Pragma" and @spelling = "$C promoted lemma"]]] (#position)
{
  $lemma-pos = count-preceding-lemmas ();
  `$lemma-pos`; " "; $position; "\n";
}
