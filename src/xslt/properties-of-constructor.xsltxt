stylesheet "1.0";

output method="text";

//////////////////////////////////////////////////////////////////////
// Identifying a specific constructor
//////////////////////////////////////////////////////////////////////

#aid = { ""; }
#nr = { ""; }
#kind = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

$lcletters = { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl lowercase (#string) { `translate($string, $ucletters, $lcletters)`; }
tpl uppercase (#string) { `translate($string, $lcletters, $ucletters)`; }

//////////////////////////////////////////////////////////////////////
// Document templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  choose {
    when [$aid = ""] {
      msg terminate="yes" "Error: please supply a value for aid attribute of the constructor to target.";
    }
    when [$nr = ""] {
      msg terminate="yes" "Error: please supply a value for the nr attribute of the constructor to target.";
    }
    when [$kind = ""] {
      msg terminate="yes" "Error: please supply a value for the kind attribute of the constructor to target.";
    }
    when [Constructors] {
      $kind-lc = lowercase (#string = $kind);
      $aid-lc = lowercase (#string = $aid);
      apply [Constructors] (#target-aid = $aid-lc,
       	    		    #target-nr = $nr,
			    #target-kind = $kind-lc);
    }
    otherwise {
      msg terminate="yes" "Error: the Constructors root element is missing.  (Are you applying this stylesheet to a .atr file?)";
    }
  }
}

tpl [Constructors] (#target-kind, #target-aid, #target-nr) {
  for-each [Constructor] {
    apply [.] (#target-kind = $target-kind,
  	       #target-aid = $target-aid,
	       #target-nr = $target-nr);
  }
}

tpl [Constructor[not(@aid)]] (#target-kind, #target-aid, #target-nr) {
  msg terminate="yes" "Error: we don't know how to handle a Constructor element that lacks an aid attribute.";
}

tpl [Constructor[not(@kind)]] (#target-kind, #target-aid, #target-nr) {
  msg terminate="yes" "Error: we don't know how to handle a Constructor element that lacks a kind attribute.";
}

tpl [Constructor[not(@nr)]] (#target-kind, #target-aid, #target-nr) {
  msg terminate="yes" "Error: we don't know how to handle a Constructor element that lacks an nr attribute.";
}

tpl [Constructor[@aid and @nr and @kind]] (#target-kind, #target-aid, #target-nr) {
  $this-nr = `@nr`;
  $this-aid = lowercase (#string = `@aid`);
  $this-kind = lowercase (#string = `@kind`);
  if [$this-kind = $target-kind and $this-nr = $target-nr and $this-aid = $target-aid] {
    apply [Properties];
  }
}

tpl [Properties] {
  for-each [*] {
    $name-lc = lowercase (#string = `name (.)`);
    if [$name-lc = "antisymmetry"] {
      "asymmetry";
    } else {
      $name-lc;
    }
    "\n";
  }
}
