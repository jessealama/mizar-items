stylesheet "1.0";
import "utils/die.xsl";
output method="text";

tpl [*] {
  apply [*];
}

tpl [/] {
  if [Text-Proper] {
    apply [Text-Proper];
  } else {
    apply [.] (#message = "The Text-Proper document node is missing.") mode="die";
  }
}

tpl [Item[@kind = "Reservation"]] {
  apply [.] (#message = "We found a reservation.") mode="die";
}

tpl [Item[@kind = "Implicitly-Qualified-Segment"]] {
  apply [.] (#message = "We found an implicitly qualified segment.") mode="die";
}

tpl [Item[    @kind = "Correctness-Condition"
          and Straightforward-Justification
          and not(preceding-sibling::Item[@kind = "Cluster"])
          and not(preceding-sibling::Item[@kind = "Reduction"])
          and count(Straightforward-Justification/*) < 1]] {
  $condition = `@condition`;
  $message = `concat ("Every correctness condition with a Straightforward-Justification should have at least 1 justification element.  We encountered a ", $condition, " condition that does not have this property.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [Item[    @kind = "Correctness-Condition"
          and not(preceding-sibling::Item[@kind = "Cluster"])
          and not(preceding-sibling::Item[@kind = "Reduction"])
          and Block[@kind = "Proof"]]] {
  apply [.] (#message = "Every correctness condition should have a Straightforward-Justification child, rather than a Proof block child.") mode="die";
}

tpl [Block[    @kind = "Definitional-Block"
           and count(Item[   @kind = "Functor-Definition"
                          or @kind = "Predicate-Definition"
                          or @kind = "Attribute-Definition"
                          or @kind = "Mode-Definition"
                          or @kind = "Structure-Definition"]) > 1]] {
  apply [.] (#message = "We found a definitional block that defines more than one thing.") mode="die";
}

tpl [Scheme-Justification] {
  $context = `.`;
  for-each [ancestor::*[parent::Text-Proper]] {
    choose {
      when [self::Item[@kind = "Scheme-Block-Item"]] {
        // ok
      }
      when [self::Item[@kind = "Regular-Statement" and @shape = "Compact-Statement"]] {
        if [count (preceding-sibling::*) = 0] {
          apply [$context] (#message = "We found a Scheme-Justification within a non-scheme.") mode="die";
        } else {
          for-each [preceding-sibling::*[1]] {
            if [self::Item[@kind = "Pragma" and @spelling = "$C scheme instance"]] {
              // ok
            } else {
              apply [$context] (#message = "We found a Scheme-Justification within a non-scheme.") mode="die";
            }
          }
        }
      }
      otherwise {
        apply [$context] (#message = "We found a Scheme-Justification within a non-scheme.") mode="die";
      }
    }
  }
}
