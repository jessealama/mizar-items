// dependencies.xsl : Print the dependencies of a mizar article (sans its constructor dependencies)

stylesheet 1.0;

output method="text";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// The directory in which to look for the given article's environment.
// If unset, we will look in whatever direcory the XSLT processor is
// working in.
#article-directory = { ""; }

#item-kind = { ""; }

//////////////////////////////////////////////////////////////////////
// Document templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  choose {
    when [$item-kind = ""] {
      msg terminate="yes" "Error: the empty string is not an acceptable value for the item-kind stylesheet parameter.";
    }
    when [$item-kind = "deftheorem"] {
      for-each [Article] {
        $aid = `@aid`;
        for-each [descendant::Ref[@kind = "D" and @absnr and @aid and not(@aid = $aid)]] {
          apply [.]; "\n";
        }
      }
    }
    when [$item-kind = "theorem"] {
      for-each [Article] {
        $aid = `@aid`;
        for-each [descendant::Ref[@kind = "T"]] {
          apply [.]; "\n";
        }
      }
    }
    when [$item-kind = "scheme"] {
      for-each [Article] {
        $aid = `@aid`;
        for-each [descendant::From] {
          apply [.]; "\n";
        }
      }
    }
    when [$item-kind = "definiens"] {
      apply [Definientia];
    }
    when [$item-kind = "cluster"] {
      apply [Registrations];
    }
    when [$item-kind = "identification"] {
      apply [IdentifyRegistrations];
    }
    when [$item-kind = "reduction"] {
      apply [ReductionRegistrations];
    }
    when [$item-kind = "pattern"] {
      apply [Notations];
    }
    when [$item-kind = "property-registration"] {
      apply [PropertyRegistrations];
    }
    otherwise {
      msg terminate="yes" `concat ("Error: unsupported value '", $item-kind, "' for the item-kind stylesheet parameter.")`;
    }
  }

}

tpl [From[not(@aid)]] {
  msg terminate="yes" "Error: the required aid attribute of a From node is missing.";
}

tpl [From[not(@absnr)]] {
  msg terminate="yes" "Error: the required absnr attribute of a From node is missing.";
}

tpl [From[@aid and @absnr]] {
  `@aid`; ":"; "scheme"; ":"; `@absnr`;
}

tpl [Ref[not(@aid) or not(@absnr)]] {
  msg terminate="yes" "Error: to handle references, we require that aid and absnr information be present.";
}

tpl [Ref[@kind = "T" and @aid and @absnr]] {
  `@aid`; ":"; "theorem"; ":"; `@absnr`;
}

tpl [Ref[@kind = "D" and @aid and @absnr]] {
  `@aid`; ":"; "deftheorem"; ":"; `@absnr`;
}

tpl [Notations] {
  for-each [Pattern] {
    apply [.]; "\n";
  }
}

tpl [Pattern[@aid and @kind and @constrnr = "0" and @nr]] {
  `@aid`; ":"; `@kind`; "pattern"; ":"; `@nr`;
}

tpl [Pattern[@aid and @kind and @nr and not(@constrnr = "0")]] {
  `@aid`; ":"; `@kind`; "pattern"; ":"; `@nr`;
}

tpl [Schemes] {
  for-each [Scheme] {
    apply [.]; "\n";
  }
}

tpl [Scheme[@aid and @nr]] {
   `@aid`; ":"; "scheme"; ":"; `@nr`;
}

tpl [Definientia] {
  for-each [Definiens] {
    apply [.]; "\n";
  }
}

tpl [Definiens[not(@aid)]] {
  msg terminate="yes" "Error: unable to deal with a Definiens element that lacks an aid attribute.";
}

tpl [Definiens[not(@relnr)]] {
  msg terminate="yes" "Error: unable to deal with a Definiens element that lacks a relnr attribute.";
}

tpl [Definiens[not(@constrkind)]] {
  msg terminate="yes" "Error: unable to deal with a Definiens element that lacks a constrkind attribute.";
}

tpl [Definiens[not(@defnr)]] {
  msg terminate="yes" "Error: unable to deal with a Definiens element that lacks a defnr attribute.";
}

tpl [Definiens[@aid and @constrkind and @defnr]] {
  `@aid`; ":"; "deftheorem"; ":"; `@defnr`;
}

tpl [Registrations] {
  for-each [CCluster | FCluster | RCluster] {
    apply [.]; "\n";
  }
}

tpl [CCluster[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle a CCluster element that lacks an aid attribute.";
}

tpl [CCluster[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle a CCluster element that lacks an nr attribute.";
}

tpl [CCluster[@aid and @nr]] {
  `@aid`; ":"; "ccluster"; ":"; `@nr`;
}

tpl [FCluster[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle a FCluster element that lacks an aid attribute.";
}

tpl [FCluster[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle a FCluster element that lacks an nr attribute.";
}

tpl [FCluster[@aid and @nr]] {
  `@aid`; ":"; "fcluster"; ":"; `@nr`;
}

tpl [RCluster[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle a RCluster element that lacks an aid attribute.";
}

tpl [RCluster[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle a RCluster element that lacks an nr attribute.";
}

tpl [RCluster[@aid and @nr]] {
  `@aid`; ":"; "rcluster"; ":"; `@nr`;
}

tpl [IdentifyRegistrations] {
  for-each [Identify] {
    apply [.]; "\n";
  }
}

tpl [Identify[not(@constrkind)]] {
  msg terminate="yes" "Error: unable to handle an Identify element that lacks a constrkind attribute.";
}

tpl [Identify[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle an Identify element that lacks an aid attribute.";
}

tpl [Identify[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle an Identify element that lacks an nr attribute.";
}

tpl [Identify[@constrkind and @aid and @nr]] {
  `@aid`; ":"; `@constrkind`; "identification"; ":"; `@nr`;
}

tpl [ReductionRegistrations] {
  for-each [Reduction] {
    apply [.]; "\n";
  }
}

tpl [Reduction[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle a Reduction element that lacks an aid attribute.";
}

tpl [Reduction[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle a Reduction element that lacks an nr attribute.";
}

tpl [Reduction[@aid and @nr]] {
  `@aid`; ":"; "reduction"; ":"; `@nr`;
}

tpl [PropertyRegistrations] {
  for-each [Property] {
    apply [.]; "\n";
  }
}

tpl [Property[not(@aid)]] {
  msg terminate="yes" "Error: unable to handle a Property element that lacks an aid attibute.";
}

tpl [Property[not(@nr)]] {
  msg terminate="yes" "Error: unable to handle a Property element that lacks an nr attibute.";
}

tpl [Property[not(@x)]] {
  msg terminate="yes" "Error: unable to handle a Property element that lacks an x attibute.";
}

tpl [Property[@aid and @nr and @x]] {
  $nr = `@nr`;
  $x = `@x`;
  $aid = `@aid`;
  $message = `concat ("Warning: Don't yet know how to handle Property items [aid = ", $aid, ", nr = ", $nr, "x = ", $x, "]")`;
  msg $message;
}
